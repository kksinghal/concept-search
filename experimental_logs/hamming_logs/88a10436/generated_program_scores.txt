13.666666666666666, 41.978985, def eafccbhicchcedcbbaajfciebiceefdc(I):
  objs = objects(I, T, F, F)
  O = I
  for obj in objs:
    O = cover(O, obj)
    O = paint(O, shift(obj, (height(obj), 0)))
  return O
 
16.0, 28.204576, def fabcgihaeaggecdaibceddgieccicieh(I):
  O = I
  for v in palette(I) - {mostcolor(I)}:
    obj = toobject(ofcolor(I, v), I)
    O = cover(O, obj)
    O = paint(O, shift(obj, (height(obj), 0)))
  return O
 
15.666666666666666, 23.291542, def hiefgfbdaeeaeadcaaabdehfgifhbihj(I):
  moved_objs = apply(lambda obj: shift(obj, (height(obj), 0)), objects(I, T, F, F))
  return paint(cover(I, merge(objects(I, T, F, F))), merge(moved_objs))
 
15.666666666666666, 21.256403, def eabggefdhhhaefddifgjcffbbiceaifj(I):
  O = canvas(mostcolor(I), shape(I))
  for obj in objects(I, T, F, F):
    O = underpaint(O, shift(obj, (height(obj), 0)))
  return O
 
71.66666666666667, 18.570803, def hadeehgdggaaejhabfbibfdccficcaaf(I):
  return rot270(
    vconcat(
      tophalf(I),
      vconcat(
        bottomhalf(I), 
        tophalf(I)
      )
    )
  )
 
13.0, 19.218563, def ddgbcjbiegeeeicdicddihdjcbjfibee(I):
  transformed_grid = tuple(
    tuple(
      I[i][j] if i < len(I) // 2 else I[len(I) - i - 1][j]
      for j in range(len(I[0]))
    )
    for i in range(len(I))
  )
  return transformed_grid
 
15.0, 19.185598, def dcacidafafdaeidebiadjegjagdaadee(I):
    target = first(colorfilter(objects(I, T, F, F), FIVE)) 
    others = difference(objects(I, T, F, F), {target})
    shifted_objects = frozenset({shift(obj, (height(target), 0)) if color(obj) != FIVE else obj for obj in others})
    O = paint(canvas(ZERO, shape(I)), merge({target} | shifted_objects))
    return O
 
10.333333333333334, 34.921482, def cabddcgbfdbfefecbbdaacgeaahjbhce(I):
    five_idx = ulcorner(first(colorfilter(objects(I, T, F, F), FIVE)))
    O = canvas(ZERO, shape(I))
    for i, row in enumerate(I):
        for j, val in enumerate(row):
            new_i = i + (height(I) if val != FIVE and i < five_idx[0] else 0)
            if 0 <= new_i < height(I) and 0 <= j < width(I):
                O = fill(O, val, {(new_i, j)})
    return O
 
15.0, 20.952902, def icjfbadacchgefecbaabicdjcadcjhcd(I):
    five_obj = first(colorfilter(objects(I, T, F, F), FIVE))
    O = paint(canvas(ZERO, shape(I)), five_obj)
    for i, row in enumerate(I):
        for j, val in enumerate(row):
            if val != FIVE and (i, j) not in toindices(five_obj):
                new_i = (i + height(five_obj)) % height(I)
                O = fill(O, val, {(new_i, j)})
    return O
 
15.333333333333334, 19.80753, def bebedhgfgdcbecbbifbfbacafedbieeh(I):
    target = first(colorfilter(objects(I, T, F, F), FIVE))
    shift_amount = height(target)
    shifted_grid = vconcat(I[shift_amount:], I[:shift_amount])
    O = paint(canvas(ZERO, shape(I)), recolor(ZERO, target))
    O = underpaint(O, asobject(shifted_grid))
    return O
 
15.0, 16.284489, def idfddaffdfaeeahbiaaaefcfeidbfhdi(I):
    five_idx = ulcorner(first(colorfilter(objects(I, T, F, F), FIVE)))
    new_grid = [[0 for _ in range(width(I))] for _ in range(height(I))]
    for i, row in enumerate(I):
        for j, val in enumerate(row):
            if (i, j) == five_idx:
                for di in range(height(first(colorfilter(objects(I, T, F, F), FIVE)))):
                    new_grid[(i + di) % height(I)][j] = FIVE
            else:
                new_i = (i + height(first(colorfilter(objects(I, T, F, F), FIVE)))) % height(I)
                new_grid[new_i][j] = val
    O = tuple(tuple(row) for row in new_grid)
    return O
 
15.333333333333334, 33.3928, def iddhcecjcabaeahhajbejccfdefjbfdi(I):
  objs = fgpartition(I)
  h, w = shape(I)
  O = I
  for obj in objs:
    ci, cj = center(obj)
    di = (ci - h // 2) // 2
    dj = 1 if cj < w // 2 else 0
    O = move(O, obj, (di, dj))
  return O
 
12.333333333333334, 24.320051, def gihcacibdiebeejbiacjidabijficbac(I):
  objs = sorted(fgpartition(I), key=lambda obj: center(obj)[0])
  h, w = shape(I)
  O = I
  for i, obj in enumerate(objs):
    ci, _ = center(obj)
    di = (i - len(objs) // 2) // 2
    dj = 1 if ci < h // 2 else 0
    O = move(O, obj, (di, dj))
  return O 
 
15.0, 30.477129, def bjbiagbagdfbehicjcdbjcgfejdeffdb(I):
  h, w = shape(I)
  O = canvas(mostcolor(I), (h, w)) 
  for i in range(h):
    for j in range(w):
      if I[i][j] != mostcolor(I):
        ni = i + (i - h // 2) // 2
        nj = j + (1 if j < w // 2 else 0)
        if 0 <= ni < h and 0 <= nj < w:
          O = fill(O, I[i][j], {(ni, nj)})
  return O
 
15.333333333333334, 28.992601, def ecjdaceecfcbejaaieeaigggdgidfjdd(I):
    objs = fgpartition(I)
    h, w = shape(I)
    O = canvas(mostcolor(I), (h, w))
    for obj in objs:
        ci, cj = center(obj)
        new_obj = shift(obj, ((ci - h // 2) // 2, 1 if cj < w // 2 else 0))
        O = paint(O, new_obj)
    return O
 
15.666666666666666, 21.037025, def jedfdbacdfbdedceajfichbbjebbeieg(I):
    h, w = shape(I)
    O = canvas(mostcolor(I), (h, w))
    for i in range(h):
        for j in range(w):
            if I[i][j] != mostcolor(I):
                obj = extract(objects(I, T, F, F), lambda obj: (i,j) in toindices(obj))
                ni = i + height(obj)
                if 0 <= ni < h: 
                    O = paint(O, {(I[i][j], (ni, j))})
    return O
 
11.666666666666666, 7.8344517, def cedcfgcccddeeaccaiididjbfadjdiif(I):
  O = I
  for obj in fgpartition(I):
    O = paint(O, shift(vmirror(obj), (height(obj) + 1, 0))) # Iteratively paint each mirrored object onto the output grid.
  return O
 
8.0, 24.717289, def edhbcfbggfbgejdcbfffffggeajecbcg(I):
    O = canvas(mostcolor(I), shape(I))
    for obj in objects(I, False, True, True):
        mirrored_obj = recolor(color(obj), dmirror(toindices(obj)))
        O = underpaint(O, toobject(mirrored_obj, I))
    return O
 
11.333333333333334, 19.761982, def aebdjajccacfecjcabbefhfceajedgjf(I):
    indices = asindices(I)
    mirrored_indices = dmirror(indices)
    return tuple(
        tuple(
            I[j][i] if (i, j) in mirrored_indices else I[i][j]
            for j in range(len(I[0]))
        )
        for i in range(len(I))
    )
 
11.333333333333334, 8.407571, def cbiecbhbbcchebggbeejfeggfdaefdfj(I):
    objs = partition(I)  
    shifted_objs = frozenset()
    for obj in objs:
        h = height(obj)
        w = width(obj)
        left = leftmost(obj) < len(I[0]) // 2
        shift_amount = (h, 1) if left else (h, 0)
        shifted_objs = shifted_objs.union(frozenset({shift(obj, shift_amount)}))
    O = paint(I, merge(shifted_objs))
    return O
 
13.333333333333334, 43.247894, def faddiiehhbhfebfejahffhfcfhgfadfd(I):
  O = I
  for obj in partition(I):
    O = cover(O, obj)
    h = height(obj)
    offset = (h, 1) if leftmost(obj) < len(I[0]) // 2 else (h, 0)
    O = paint(O, shift(obj, offset))
  return O
 
15.666666666666666, 38.682487, def iaecbgigeffbehjaibdcbgacbefadedj(I):
  O = I
  for obj in fgpartition(I):
    O = move(O, obj, subtract(halve(shape(I)), center(obj)))
  return O
 
17.333333333333332, 24.713379, def dacadeeadadbecidafedgcfejejjhded(grid):
  objs = fgpartition(grid) 
  shifted_objs = frozenset()
  for obj in objs:
    lowest_row = lowermost(obj)
    while lowest_row < len(grid) - 1:
      shifted_obj = shift(obj, (1, 0))
      if len(intersection(toindices(shifted_obj), toindices(merge(shifted_objs)))) == 0 and lowest_row + 1 < len(grid) and len(intersection(toindices(shifted_obj), asindices(grid))) == len(toindices(shifted_obj)):
        obj = shifted_obj
        lowest_row += 1
      else:
        break
    shifted_objs = shifted_objs.union({obj})
  return paint(canvas(mostcolor(grid), shape(grid)), merge(shifted_objs))
 
12.666666666666666, 55.199856, def gccccebefgagefdbigieebeegdhbcefa(grid):
  objs = sorted(fgpartition(grid), key=lambda obj: -uppermost(obj))
  new_grid = canvas(mostcolor(grid), shape(grid))
  for obj in objs:
    shifted_obj = shift(obj, (height(grid), 0)) 
    for i in range(height(grid)):
      temp_obj = shift(shifted_obj, (-i, 0))
      if len(intersection(toindices(temp_obj), asindices(grid))) == len(obj) and len(intersection(toindices(temp_obj), toindices(asobject(new_grid)))) == 0:
        new_grid = paint(new_grid, temp_obj)
        break
  return new_grid
 
14.0, 24.670141, def aajfjcigffajefbdaijedffeddddjbdc(grid):
    objs = list(fgpartition(grid))
    h = height(grid)
    for i in range(len(objs) - 1, -1, -1):
        for j in range(h):
            down = (1, 0)
            temp = shift(objs[i], (j, 0))
            if lowermost(temp) < h and len(intersection(toindices(temp), toindices(merge(objs[:i] + objs[i+1:])))) == 0:
                objs[i] = temp
            else:
                break
    return paint(canvas(mostcolor(grid), shape(grid)), merge(objs))
 
15.666666666666666, 37.71387, def gbbdbfbcebhceagcjddbededjgedjcij(I):
  objs = objects(I, False, False, True) 
  shifted_objs = frozenset(shift(obj, (height(I) - height(obj), -leftmost(obj))) for obj in objs)
  painted = paint(canvas(0, shape(I)), merge(shifted_objs))
  return painted
 
13.333333333333334, 53.265896, def dfbdfafdceefecfcaeehcdgjaeeebbga(I):
    objs = objects(I, False, False, True)
    bottom_left = (height(I), 0)
    moved = frozenset(shift(obj, subtract(bottom_left, lrcorner(obj))) for obj in objs)
    return paint(canvas(0, shape(I)), merge(moved))
 
12.666666666666666, 55.199856, def eeegdhcicaihefdcjcacfgadgbgdhdca(I):
  O = I
  for obj in partition(I):
    O = cover(O, obj) # Remove object from its current location
    offset = (height(I) - height(obj), (width(I) - width(obj)) // 2)
    O = paint(O, shift(obj, offset)) # Paint to bottom-center
  return O
 
15.333333333333334, 24.279272, def bcdbfbjecafieecaaddadhjdihfdaejh(grid):
  objs = fgpartition(grid)
  bg = mostcolor(grid)
  canvas_grid = canvas(bg, shape(grid))
  for obj in objs:
    i_offset = 0
    while i_offset < height(grid):
      shifted_obj = shift(obj, (i_offset, i_offset))
      if any(index(grid, (i, j)) != bg for _, (i, j) in shifted_obj if 0 <= i < height(grid) and 0 <= j < width(grid)):
        break
      i_offset += 1
    canvas_grid = paint(canvas_grid, shift(obj, (i_offset-1, i_offset-1)))
  return canvas_grid
 
16.666666666666668, 30.108852, def cajjbeabdefdedaaagfdeeejagfjbfbg(grid):
    h, w = shape(grid)
    new_grid = canvas(mostcolor(grid), (h, w))
    for i in range(h):
        for j in range(w):
            if grid[i][j] != mostcolor(grid):
                new_i, new_j = min(h - 1, i + j), min(w - 1, j + j)
                new_grid = fill(new_grid, grid[i][j], {(new_i, new_j)})
    return new_grid
 
78.66666666666667, 19.47629, def jieagcagfhbcecbaaejadeedffbbecbi(I):
  h = height(I)
  mirrored_I = vmirror(I)  # Mirror the entire grid
  O = tuple(
      tuple(I[i][j] if i < h else mirrored_I[i - h][j] for j in range(width(I)))
      for i in range(2 * h)
  )
  return O
 
78.66666666666667, 20.19967, def gdfbjfagbcdcebegbbaddgbdaaiediae(I):
  h = height(I)
  O = tuple(
    tuple(I[i][j] for j in range(width(I))) for i in range(h)
  ) + tuple(
    tuple(I[h - 1 - i][j] for j in range(width(I))) for i in range(h)
  )
  return O 
 
15.666666666666666, 42.342873, def bhecgcaegiedeedbjdeahjjdfhfacbij(I):
  objs = objects(I, False, False, True)
  h = height(I)
  w = width(I)
  painted = canvas(mostcolor(I), (h, w))
  for obj in objs:
    obj_h = height(obj)
    obj_w = width(obj)
    shift_down = (h - obj_h, 0)
    shifted_obj = shift(obj, shift_down)
    shift_center = (0, (w - obj_w) // 2)
    centered_obj = shift(shifted_obj, shift_center)
    painted = paint(painted, centered_obj)
  return painted
 
11.0, 9.790456, def dgdcdficdcbgeeijabedfgajcafaghdb(I):
    return paint(I, mapply(lambda obj: shift(vmirror(obj), (-height(obj), 0)), fgpartition(I))) 
 
13.333333333333334, 53.491127, def ifcbgdcgeicaecfcjcghddeiaeafccbh(I):
  objs = objects(I, T, F, F)
  moved_objs = frozenset()
  h = height(I)
  for obj in objs:
    w = width(obj)
    offset = (h - lowermost(obj) - 1, len(I[0]) - w)
    moved_objs = moved_objs | {shift(obj, offset)}
  O = paint(canvas(ZERO, shape(I)), merge(moved_objs))
  return O
 
16.0, 18.466152, def gajhaiaaffegegiebafaabacehjdcfjh(I):
  O = canvas(ZERO, shape(I))
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if val != ZERO:
        O = paint(O, {(val, (len(I) - i - 1, len(row) - j - 1))})
  return O
 
12.666666666666666, 52.43454, def bacefciaafedejbcbbbfbgbbeebehjae(I):
  O = rot180(I)
  objs = objects(O, T, F, F)
  moved_objs = frozenset()
  for obj in objs:
    offset = (uppermost(obj), leftmost(obj))
    moved_objs = moved_objs | {shift(obj, offset)}
  return rot180(paint(canvas(ZERO, shape(O)), merge(moved_objs)))
 
12.333333333333334, 18.662498, def ghecafjeafbcedfdiijaecfddbebfaba(I):
    O = I
    for i in range(height(I)):
        for j in range(width(I)):
            if index(I, (i,j)) != mostcommon(I):
                new_i = height(I) + j - i
                new_j = height(I) - 1 - i
                O = paint(O, {(index(I, (i,j)), (new_i, new_j))})
    return O
 
11.333333333333334, 8.958945, def begbddbbafbfefgaigfedbhccdffbgbh(I):
  return paint(I, mapply(lambda obj: recolor(color(obj), shift(toindices(vmirror(obj)), (height(obj), 0))), fgpartition(I)))
 
11.0, 8.933652, def eicjffcejhefeaccbhdjjadaabfjhgbe(I):
  new_grid = canvas(mostcolor(I), shape(I))  # Create blank canvas
  for obj in fgpartition(I):  # Iterate over objects
    new_grid = paint(new_grid, obj)  # Paint original object
    new_grid = paint(new_grid, recolor(color(obj), shift(toindices(vmirror(obj)), (height(obj), 0)))) # Paint mirrored and shifted object
  return new_grid 
 
13.333333333333334, 53.116478, def jfhcafieacabejjciaifccfdcaecbdce(I):
  objs = objects(I, False, False, True)
  h = height(I)
  O = I
  for obj in objs:
    w = width(obj)
    O = cover(O, obj)
    O = paint(O, shift(obj, (h - 1, w - 1)))
  return O 
 
19.666666666666668, 18.99928, def cabfhjfaaedbefagjggdgcbebegjdbad(I):
    objs = objects(I, False, False, True)
    O = I
    for obj in objs:
      for i in range(height(I)):
        O = cover(O, obj)
        O = paint(O, shift(obj, (i, i)))
    return O
 
11.666666666666666, 28.582426, def gieddhcdedagediebfabcdabfibdhefc(I):
  O = I
  for i in range(height(I) - 1, 0, -1):
    row = I[height(I) - i - 1]
    for j, val in enumerate(row):
      if val != mostcolor(I):
        O = cover(O, {(val, (height(I) - i, j))})
        O = paint(O, {(val, (height(I) - 1, j + height(I) - i))})
  return O
 
10.333333333333334, 7.6242504, def efhccajbadabehfhjdfaecdaeiidicea(I):
  O = I
  for obj in fgpartition(I):
    O = underpaint(O, shift(cmirror(obj), (height(obj), 0)))
  return O
 
16.333333333333332, 22.657545, def eibedgeifccdeedcjaghccabdbfhebac(I):
  objs = fgpartition(I)  # Identify distinct foreground objects 
  transformed_objs = mapply(lambda obj: shift(vmirror(obj), (height(obj), 0)), objs) # Mirror vertically and shift down each object
  return paint(canvas(mostcolor(I), shape(I)), transformed_objs)  # Paint transformed objects on a blank canvas with the original background
 
11.0, 9.111857, def adafgcjeddgdefjebedaiiacbdeabeed(I):
  objs = objects(I, False, False, True)
  O = canvas(mostcolor(I), shape(I))
  for obj in objs:
    O = paint(O, obj)
    O = paint(O, shift(obj, (height(obj), 0)))
  return O
 
9.333333333333334, 9.237747, def cgbiccabhhdceihdaiefajgbiddihfcf(I):
  O = canvas(mostcolor(I), shape(I))
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if val != mostcolor(I):
        O = paint(O, {(val, (i, j))})
        O = paint(O, {(val, (i + len(I) // 2 + i % 2, j))})
  return O
 
83.33333333333333, 29.078342, def jafddcabbhjcedcfiaeidgdhggbhfffa(I):
  h = len(I)
  O = vconcat(I, canvas(mostcolor(I), (h, len(I[0]))))
  for obj in objects(I, False, False, True):
    O = underpaint(O, shift(obj, (height(obj), 0)))
  return O
 
78.66666666666667, 26.427256, def baiaacageiedebedaehbfiijehbeajbh(I):
  h = height(I)
  O = canvas(mostcolor(I), (2 * h, width(I)))
  for obj in objects(I, False, False, True):
    O = paint(O, obj)
    O = paint(O, shift(obj, (h + (h - height(obj)), 0)))
  return O
 
10.333333333333334, 7.788483, def dceaajbcchdaehhgjbdafecfbeacgecb(I):
  objs = fgpartition(I)
  mirrored_objs = apply(lambda obj: shift(cmirror(obj), (height(obj), 0)), objs)
  O = underpaint(I, merge(mirrored_objs))
  return O
 
11.333333333333334, 9.2735405, def afcdccjgfeafedaibjfhccfdfabechej(I):
  return paint(I, merge(apply(lambda obj: recolor(color(obj), shift(toindices(obj), (height(obj), 0))), fgpartition(I)))) 
 
10.666666666666666, 9.109507, def figfihdecaebecabafahgdfichcbfeib(I):
  O = I
  for obj in objects(I, T, F, T):
    O = paint(O, recolor(color(obj), shift(vmirror(obj), (2 * uppermost(obj) + height(obj), 0))))
  return O
 
9.666666666666666, 8.77438, def aehcafbaifibeeeebgbfcacegdajdabe(I):
  objs = objects(I, T, F, T)
  O = I
  for obj in objs:
    bottom_row = max(i for i, j in toindices(obj))
    O = paint(O, recolor(color(obj), shift(vmirror(obj), (2 * (bottom_row + 1), 0))))
  return O
 
10.333333333333334, 8.93389, def efcefjajicfaeehcbbcaajjfebagbice(I):
  O = canvas(0, shape(I))
  for obj in objects(I, T, F, T):
    O = underpaint(O, obj)
    O = underpaint(O, recolor(color(obj), shift(vmirror(obj), (2 * uppermost(obj) + height(obj), 0))))
  return O
 
6.333333333333333, 17.152925, def fceibiiacebaehieibbaafdbfcacdaff(I):
  O = I
  for obj in objects(I, T, F, T):
    mirrored_obj = recolor(color(obj), shift(vmirror(obj), (height(I) + uppermost(obj), 0)))
    O = paint(fill(O, 0, toindices(mirrored_obj)), mirrored_obj)
  return O
 
18.666666666666668, 17.823654, def igbcdcaejdebebbaajdbejgabdchabjd(I):
  new_objs = set()
  for obj in fgpartition(I):
    h = height(obj)
    for v, (i, j) in obj:
      new_objs.add((v, (i + h + 1, j)))
      new_objs.add((v, (height(I) - 1 - i, j)))
  return paint(I, frozenset(new_objs))
 
18.666666666666668, 17.729664, def dibcdaadffhaefgijgfacafdfehafaba(I):
  return paint(I, merge([{(v, (i + height(obj) + 1, j)) for v, (i, j) in obj} | 
                        {(v, (height(I) - 1 - i, j)) for v, (i, j) in obj}
                       for obj in fgpartition(I)]))
 
12.0, 7.778846, def dbadafcaefeeeeahbecbffbfffagcfhc(I):
  O = I
  for obj in objects(I, T, F, T):
    O = paint(O, recolor(color(obj), shift(vmirror(obj), (2 * height(obj), 0))))
  return O
 
11.333333333333334, 7.7325087, def dceecdigfcgdeddiaaabccgibdfbcbdf(I):
  O = canvas(0, shape(I))
  for obj in objects(I, T, F, T):
    O = paint(paint(O, obj), recolor(color(obj), shift(vmirror(obj), (2 * height(obj), 0))))
  return O
 
12.333333333333334, 7.5467396, def cfefffcdiechehdjafdddaihcaabfdce(I):
  objs = fgpartition(I)
  shifted_objs = apply(lambda obj: shift(obj, (height(obj) + 1, 0)), objs)
  mirrored_objs = apply(lambda obj: shift(vmirror(obj), (height(I) - 1, 0)), objs)
  return paint(paint(I, merge(shifted_objs)), merge(mirrored_objs))
 
11.666666666666666, 7.872257, def bagaeabdadbaeabfjbdedafceadedbcf(I):
  return paint(
    paint(I, 
          merge(apply(lambda obj: shift(obj, (height(obj) + 1, 0)), fgpartition(I)))),
    merge(apply(lambda obj: shift(vmirror(obj), (height(I) - uppermost(obj), 0)), fgpartition(I)))
  )
 
12.333333333333334, 7.459349, def bdifbdddajfgeceeihbfagfcabcbchbb(I):
  g = I
  for obj in fgpartition(I):
    g = paint(g, shift(obj, (height(obj) + 1, 0)))
    g = paint(g, shift(vmirror(obj), (height(I) - 1, 0)))
  return g
 
10.666666666666666, 8.495375, def debabajefddheffdacegddgedfdjaiee(I):
  return paint(I, mapply(lambda obj: obj | shift(vmirror(obj), (height(obj), 0)), fgpartition(I)))
 
11.0, 7.7094626, def bhdehbgeddfdegeaafjcchefhebcddic(I):
  O = I
  for obj in objects(I, T, F, T):
    mirrored_obj = recolor(color(obj), shift(vmirror(obj), (2*height(obj), 0)))
    O = underpaint(O, mirrored_obj)
  return O
 
16.333333333333332, 35.40982, def bebcfidaccecedahjfafbcegdebfecfg(I):
  return paint(
      canvas(mostcolor(I), shape(I)),
      frozenset(
          (v, (j + height(obj) + 1, i + 1))
          for obj in objects(I, False, False, True)
          for (v, (i, j)) in toobject(toindices(obj), I)
      )
  )
 
6.333333333333333, 17.756126, def fjdbjabbdeieeddiicceciadhbdccccj(I):
  obj = colorfilter(objects(I, T, F, F), FIVE)
  O = move(I, first(obj), (height(first(obj)), 0))
  return O
 
11.333333333333334, 7.973969, def hhcdabcbahhdegdcigbbjfhegjggdaaf(I):
  objs = fgpartition(I)
  moved_objs = frozenset()
  for obj in objs:
    i, j = centerofmass(obj)
    h = height(I)
    vertical_offset = (h - 1 - i) // 2  # Calculate offset based on distance from bottom
    new_obj = shift(obj, (vertical_offset, 0)) # Move object vertically
    moved_objs = moved_objs | new_obj
  O = paint(I, moved_objs)
  return O
 
10.333333333333334, 7.9906063, def bhaacjdjjgaceaeajegccdhgeacdajhf(I):
  objs = fgpartition(I)
  moved_objs = frozenset()
  for obj in objs:
    i, j = centerofmass(obj)
    h = height(I)
    horizontal_offset = (h - 1 - i) // 2 # Calculate offset based on distance from bottom
    new_obj = shift(obj, (0, horizontal_offset)) # Move object horizontally
    moved_objs = moved_objs | new_obj
  O = paint(I, moved_objs)
  return O
 
10.666666666666666, 7.4998236, def hgfecdceaicjeffbafcaadaeeaceiiaa(I):
  objs = fgpartition(I)
  moved_objs = frozenset()
  h = height(I)
  for obj in objs:
    i, j = centerofmass(obj)
    vertical_offset = (h - 1 - i) // 2 - i  # Calculate offset to center vertically
    new_obj = shift(obj, (vertical_offset, 0)) # Move object vertically
    moved_objs = moved_objs | new_obj
  O = paint(I, moved_objs)
  return O
 
12.666666666666666, 10.292935, def iheajcfgeaeaegdficacgdfdbeccidbg(I):
  objs = fgpartition(I)
  moved_objs = frozenset()
  w = width(I)
  for obj in objs:
    i, j = centerofmass(obj)
    horizontal_offset = (w - 1 - j) // 2 - j  # Calculate offset to center horizontally
    new_obj = shift(obj, (0, horizontal_offset)) # Move object horizontally
    moved_objs = moved_objs | new_obj
  O = paint(I, moved_objs)
  return O
 
9.0, 6.8319125, def bbaaejdfcdaceiedjffghdaifcadcbfc(I):
  objs = fgpartition(I)
  moved_objs = frozenset()
  h, w = height(I), width(I)
  for obj in objs:
    i, j = centerofmass(obj)
    vertical_offset = (h - 1 - i) // 2 - i # Calculate vertical offset for centering
    horizontal_offset = (w - 1 - j) // 2 - j # Calculate horizontal offset for centering
    new_obj = shift(obj, (vertical_offset, horizontal_offset)) # Move object 
    moved_objs = moved_objs | new_obj
  O = paint(I, moved_objs)
  return O
 
12.666666666666666, 35.16133, def addcfafgfdbaebecjgbfaghgcaddffff(I):
  objs = partition(I)
  shifted_objs = frozenset(shift(obj, (uppermost(obj), 0)) for obj in objs)
  O = paint(canvas(ZERO, shape(I)), merge(shifted_objs))
  return O
 
14.333333333333334, 30.773146, def iagaagjagbieefaabhahdcfdggcjdbbi(I):
  objs = partition(I)
  sorted_objs = order(objs, uppermost)
  O = canvas(ZERO, shape(I))
  for i, obj in enumerate(sorted_objs):
    O = paint(O, shift(obj, (i, 0)))
  return O
 
13.333333333333334, 51.935966, def hdbbiachbcbceefcaedhheacjggdaeeg(I):
    objs = partition(I)
    shifted_objs = frozenset()
    for obj in objs:
        height_diff = height(I) - height(obj)
        shifted_objs = shifted_objs | frozenset({shift(obj, (height_diff, 0))})
    O = paint(canvas(ZERO, shape(I)), merge(shifted_objs))
    return O
 
12.666666666666666, 55.199856, def ddbdgaejciffefegaeiebiaddgbcecce(I):
  objs = partition(I)
  def new_position(obj):
    i, j = ulcorner(obj)
    return (i + height(I) - height(obj), j)
  shifted_objs = frozenset(shift(obj, new_position(obj)) for obj in objs)
  O = paint(canvas(ZERO, shape(I)), merge(shifted_objs))
  return O
 
78.66666666666667, 23.68269, def ebcgahjehaecefehjfcecceecgdjdeae(I):
  O = canvas(0, (2*height(I), width(I)))
  for obj in objects(I, T, F, T):
    O = paint(O, obj)
    O = paint(O, recolor(color(obj), shift(vmirror(obj), (height(I), -leftmost(obj)))))
  return O
 
78.66666666666667, 28.872456, def ajecaffcdddjebghadfagceiicjddegf(I):
  return vconcat(I, paint(canvas(0, shape(I)), merge(apply(lambda obj: recolor(color(obj), shift(vmirror(obj), (height(I), -leftmost(obj)))), objects(I, T, F, T))))) 
 
11.333333333333334, 9.167404, def dfbhgibfgdfeeahajeddceaegcbjddfa(I):
  O = I 
  for obj in fgpartition(I):
    O = paint(O, shift(vmirror(obj), (height(obj), 0)))
  return O
 
10.666666666666666, 8.81857, def ecciedbdfgbdedjfbffecibbdbjceccb(I):
  return paint(I, merge(apply(lambda obj: shift(vmirror(obj), (2 * uppermost(obj) + height(obj), 0)), fgpartition(I))))
 
7.333333333333333, 19.708946, def bbcbaeccgbeceadjjgjehcbaicabcffi(I):
  obj = colorfilter(objects(I, T, F, F), FIVE)
  target_i = height(I) - height(first(obj)) - ONE
  target_j = (width(I) - width(first(obj))) // TWO
  O = move(I, first(obj), (target_i - uppermost(first(obj)), target_j - leftmost(first(obj))))
  return O
 
78.66666666666667, 20.19967, def dfgfcbddfabfefjgadbchjieddadebda(I):
  J = canvas(0, (2*height(I), width(I)))
  for i in range(height(I)):
    for j in range(width(I)):
      J = fill(J, index(I, (i, j)), ((i, j), (2*height(I)-i-1, j)))
  return J
 
12.666666666666666, 55.199856, def bcabdgjgbibeefadiaccdaebcgccbaif(I):
  five_loc = first(ofcolor(I, FIVE))
  def transform_obj(obj):
    shifted_obj = shift(obj, (-five_loc[0] - 1, -five_loc[1]))
    rotated_obj =  asobject(rot90(subgrid(shifted_obj, canvas(mostcolor(I), shape(I)))))
    return shift(rotated_obj, (five_loc[1] + 1, five_loc[0]))
  transformed_objs = apply(transform_obj, fgpartition(I))
  O = paint(fill(I, mostcolor(I), asindices(I)), merge(transformed_objs))
  return O
 
6.0, 17.33784, def iaicjiieiafeebebjcgfhfdgcgffdfba(I):
  five_obj = colorfilter(objects(I, T, F, F), FIVE)
  shifted_obj = shift(first(five_obj), (height(first(five_obj)), ONE))
  O = paint(replace(I, FIVE, TWO), toobject(shifted_obj, I))
  return O
 
6.0, 13.667315, def cehgeedfhbdbebaibebcbfedgecccccd(I):
  five_obj = first(colorfilter(objects(I, T, F, F), FIVE))
  O = paint(replace(I, FIVE, TWO), shift(five_obj, (height(five_obj), ONE)))
  return O
 
6.333333333333333, 14.07319, def bcedafbahgecebdaiaaaccjedjdcfcdd(I):
  obj = first(colorfilter(objects(I, T, F, F), FIVE))
  O = paint(I, shift(obj, (height(obj), 0)))
  return O
 
6.333333333333333, 15.757281, def bdbhidfjbddaeacejaaigcfidbefebac(I):
  def process_object(obj):
    return shift(obj, (height(obj), 0)) if color(obj) == FIVE else obj
  
  modified_objects = apply(process_object, objects(I, T, F, F))
  O = I
  for obj in modified_objects:
    O = paint(O, obj)
  return O
 
12.666666666666666, 55.199856, def cdaffcabdfeceaaajcdibcfigibddcea(I):
    O = canvas(0, shape(I)) 
    objs = order(objects(I, T, F, T), lambda obj: leftmost(obj))
    for i, obj in enumerate(objs):
        O = paint(O, shift(obj, (height(I) + i, 0))) 
    return O
 
11.333333333333334, 7.327785, def eecdffejeaeeebdcjfcfeeffbdihdadb(I):
  return paint(I, {cell for obj in fgpartition(I) for cell in obj | shift(vmirror(obj), (2 * height(obj), 0))})
 
12.666666666666666, 55.199856, def beafebbhhdcgeahbabjaagdgaecbdejc(I):
  def process_object(obj):
    return shift(obj, (height(I) - uppermost(obj), 0))
  modified_objects = apply(process_object, objects(I, T, F, F))
  O = canvas(mostcolor(I), shape(I))
  for obj in modified_objects:
    O = paint(O, obj)
  return O
 
19.666666666666668, 17.979414, def abcjhjbbeceeeehgidfbafcegciddaci(I):
  O = canvas(mostcolor(I), shape(I))
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if val != mostcolor(I):
        O = paint(O, {(val, (height(I) - i - 1, j))})
  return O
 
6.333333333333333, 21.914875, def hfebadcbhdfaeeedjcbaaebhcdccideb(I):
  obj = extract(objects(I, T, F, F), lambda obj: color(obj) == FIVE)
  center_j = width(I) // 2 - (1 if even(width(I)) else 0) 
  O = paint(cover(I, obj), shift(obj, (height(I) - height(obj) - 1, center_j - leftmost(obj))))
  return O
 
7.333333333333333, 18.796555, def fgigcfgbgcbdeeiajjjjdejfejdejhbi(I):
  obj = first(sfilter(objects(I, T, F, F), lambda o: color(o) == FIVE))
  bottom_row = height(I) - 1
  middle_col = width(I) // 2
  O = paint(
        fill(I, ZERO, obj),
        shift(obj, (bottom_row - uppermost(obj) - 1, middle_col - leftmost(obj))) 
  )
  return O
 
9.666666666666666, 35.609734, def daffhbeaghadebeeafeffcefajcchgbj(I):
  obj = argmax(objects(I, T, F, F), size) if colorcount(I, FIVE) > 0 else initset(((FIVE, (0,0)),))
  target_row = height(I) - height(obj) - 1
  target_col = (width(I) - width(obj)) // 2
  O = paint(cover(I, obj), shift(obj, (target_row - uppermost(obj), target_col - leftmost(obj))))
  return O
 
13.0, 53.184547, def hfjeiaieafedefaeibhabchafjgbbcgb(I):
  five_loc = first(ofcolor(I, FIVE))
  def transform(obj):
    return shift(asobject(rot90(subgrid(shift(obj, (-five_loc[0], -five_loc[1])), I))), (five_loc[1], five_loc[0] + 1 - height(obj)))
  return paint(fill(I, mostcolor(I), asindices(I)), merge(apply(transform, fgpartition(I))))
 
13.0, 53.225163, def faddgdagggacedadihgjeecfdjjcbeac(I):
  pivot = first(ofcolor(I, FIVE))
  def rotate_around_pivot(obj):
    return shift(asobject(rot90(subgrid(shift(obj, subtract(ORIGIN, pivot)), I))), add(pivot, (1 - height(obj), 0)))
  return paint(fill(I, mostcolor(I), asindices(I)),
               merge(apply(rotate_around_pivot, fgpartition(I))))
 
7.0, 15.7012005, def cfjiacbdcceeediabbfefacidbjbfhhd(I):
  five_indices = ofcolor(I, FIVE)
  target_i = height(I) - 2
  target_j = (width(I) - 1) // 2
  offset = (target_i - uppermost(five_indices), target_j - leftmost(five_indices))
  O = paint(replace(I, FIVE, TWO), shift(recolor(FIVE, five_indices), offset))
  return O
 
11.666666666666666, 7.3768353, def aeddfeffdehhedacbjicicddceeebffc(I):
  new_grid = I
  for obj in fgpartition(I):
    new_grid = paint(new_grid, shift(vmirror(obj), (2 * height(obj), 0)))
  return new_grid
 
14.333333333333334, 32.662495, def afajcgccfgcaegeeibffggbdadacfcee(I):
  five_i, five_j = first(ofcolor(I, FIVE))
  def rotate_object(obj):
    shifted_obj = shift(obj, (-five_i, -five_j))
    rotated_indices = toindices(
        asobject(
            rot90(
                subgrid(
                    shifted_obj,
                    I
                )
            )
        )
    )
    return recolor(
        color(obj),
        shift(
            rotated_indices,
            (five_j, five_i + 1 - height(obj))
        )
    )
  return paint(
      canvas(mostcolor(I), shape(I)),
      merge(
          apply(
              rotate_object,
              fgpartition(I)
          )
      )
  )
 
15.0, 20.952902, def eeajifedbgdceecfjfagdbcbagfibbcd(I):
  target_color = FIVE
  obj = first(colorfilter(objects(I, T, F, F), target_color))
  other_objs = difference(objects(I, T, F, F), frozenset({obj}))
  shifted_objs = apply(lambda o: shift(o, (height(obj), 0)), other_objs)
  O = paint(
      paint(canvas(ZERO, shape(I)), obj),
      merge(shifted_objs)
  )
  return O
 
12.666666666666666, 52.26282, def fbfjfdecgcjjegcjjbdjaeaebeafecbd(I):
  target_color = FIVE
  obj_indices = ofcolor(I, target_color)
  other_indices = difference(asindices(I), obj_indices)
  shifted_indices = apply(lambda idx: add(idx, (height(obj_indices), 0)), other_indices)
  O = paint(
      canvas(ZERO, shape(I)), 
      combine(recolor(target_color, obj_indices), recolor(index(I, first(other_indices)), shifted_indices))
  )
  return O
 
13.666666666666666, 43.47431, def feefegihbdjhecbjjdcbadaacafajgab(I):
  five_i, five_j = first(ofcolor(I, FIVE))
  def rotate_object(obj):
    return shift(
        recolor(
            color(obj),
            frozenset({(j, five_i + five_j - i) for i, j in toindices(shift(obj, (-five_i, -five_j)))} )
        ),
        (five_j + 1 - width(obj), five_i)
    )
  return paint(
      canvas(mostcolor(I), shape(I)),
      merge(apply(rotate_object, fgpartition(I)))
  )
 
14.0, 48.028732, def bagjfhhdfdbfedibaahbdfbeefddgcfd(I):
  five_loc = first(ofcolor(I, FIVE))
  def rotate_around_five(obj):
    shifted_obj = shift(obj, invert(five_loc))
    rotated_indices = frozenset(
        (five_loc[0] + five_loc[1] - j, five_loc[1] - five_loc[0] + i)
        for i, j in toindices(shifted_obj)
    )
    return recolor(color(obj), rotated_indices)
  return paint(
      canvas(mostcolor(I), shape(I)),
      merge(apply(rotate_around_five, fgpartition(I)))
  )
 
13.666666666666666, 46.85778, def hecicjffbfddefdbidebcbiffddbbeid(I):
    five_row, five_col = first(ofcolor(I, FIVE))
    def rotate_object(obj):
        obj_indices = toindices(obj)
        shifted_indices = shift(obj_indices, (-five_row, -five_col))
        rotated_indices = frozenset((j, -i) for i, j in shifted_indices)
        return shift(recolor(color(obj), rotated_indices), (five_col+1-width(obj), five_row)) 
    return paint(canvas(mostcolor(I), shape(I)), merge(apply(rotate_object, fgpartition(I))))
 
6.333333333333333, 14.07319, def feeceecfcicbehjdifedjbiciaaedgah(I):
  five_obj = first(colorfilter(partition(I), FIVE))
  O = paint(paint(replace(I, FIVE, TWO), five_obj), shift(five_obj, (height(five_obj), 0)))
  return O
 
17.0, 17.683105, def gcfbgdjdebchefjdbdhccbfiabdffbfd(I):
  objs = objects(I, T, F, F)
  h, w = len(I), len(I[0])
  center_j = w // 2
  moved_objs = set()
  for obj in objs:
    leftmost_j = leftmost(obj)
    if leftmost_j < center_j:
      direction = (1, 1) 
    elif leftmost_j > center_j:
      direction = (1, -1)
    else:
      direction = (0, 0)
    moved_objs.add(shift(obj, direction))
  O = paint(canvas(ZERO, (h, w)), merge(moved_objs))
  return O
 
17.0, 14.3872385, def jifhdajcdhedefedjffgebhcdicdibcb(I):
  objs = fgpartition(I) 
  h, w = len(I), len(I[0])
  center_j = w // 2
  O = canvas(ZERO, (h, w))
  for obj in objs:
    j_offset =  1 if leftmost(obj) < center_j else (-1 if rightmost(obj) > center_j else 0)
    O = paint(O, shift(obj, (1, j_offset)))
  return O
 
8.0, 21.353863, def babebjhifeffededaebhjdcfbdaddeje(grid):
  objs = sorted(objects(grid, True, False, True), key=lambda obj: rightmost(obj), reverse=True)
  for obj in objs:
    offset = (0, 0)
    shifted_obj = shift(obj, offset)
    while lowermost(shifted_obj) < len(grid) - 1 and not any(vmatching(shifted_obj, other_obj) for other_obj in objs if other_obj != obj):
      offset = add(offset, DOWN)
      shifted_obj = shift(obj, offset)
    grid = move(grid, obj, offset)
  return grid
 
15.0, 16.997864, def cadficibhaffeabdjjfechcgfdbiacbf(grid):
  for j in range(len(grid[0])-1, -1, -1):
    for i in range(len(grid)-1, -1, -1):
      if index(grid, (i,j)) != mostcolor(grid):
        offset = (0, 0)
        while index(grid, add((i, j), offset)) != mostcolor(grid) and add((i, j), offset)[0] < len(grid) - 1:
          offset = add(offset, DOWN)
        grid = move(grid, {(index(grid, (i, j)), (i, j))}, offset)
  return grid
 
13.666666666666666, 43.559063, def djbaefchaehcecbfagifafdebdbdciba(grid):
  return paint(canvas(mostcolor(grid), shape(grid)), merge(apply(lambda obj: shift(obj, (lowermost(obj), rightmost(obj))), objects(grid, True, False, True)))) 
 
16.666666666666668, 41.391884, def ebdffdcadaieeecdjfbihagajceichgf(grid):
  for i in range(len(grid)-2, -1, -1):
    for j in range(len(grid[0])-1, -1, -1):
      if index(grid, (i, j)) != mostcolor(grid) and index(grid, (i + 1, j)) == mostcolor(grid):
        current_pos = (i, j)
        offset = (1, 0)
        while index(grid, add(current_pos, offset)) == mostcolor(grid) and add(current_pos, offset)[0] < len(grid) - 1:
          offset = add(offset, DOWN)
        grid = move(grid, {(index(grid, current_pos), current_pos)}, offset)
  return grid
 
11.666666666666666, 27.323162, def ibacdfebhficeiddaaadcjcbibciaeff(grid):
  def new_pos(obj):
    offset = (0, 0)
    shifted_obj = shift(obj, offset)
    while lowermost(shifted_obj) < len(grid) - 1 and index(grid, add(ulcorner(shifted_obj), DOWN)) == mostcolor(grid):
      offset = add(offset, DOWN)
      shifted_obj = shift(obj, offset)
    return offset
  return paint(canvas(mostcolor(grid), shape(grid)), merge(apply(lambda obj: shift(obj, new_pos(obj)), objects(grid, True, False, True))))
 
13.0, 53.88603, def dfccjhgdhbaeeeceidffbhhbiaaiaaaa(grid):
  objs = objects(grid, T, F, F)
  moved_objs = frozenset({shift(obj, (height(grid)-lowermost(obj), -leftmost(obj))) for obj in objs})
  return paint(canvas(mostcolor(grid), shape(grid)), merge(moved_objs))
 
24.0, 23.847502, def aedfgcfabebfebebjdcceahcddighbie(grid):
  return rot270(tuple(
      tuple(v for v in r if v != mostcolor(grid)) + tuple(mostcolor(grid) for _ in range(len(grid[0]) - len(tuple(v for v in r if v != mostcolor(grid)))))
      for r in rot90(grid)
  ))
 
13.333333333333334, 52.67838, def eiiejdcdichcefefafhcfbadbdajhcif(grid):
  objs = objects(grid, T, F, F)
  result = canvas(mostcolor(grid), shape(grid))
  for obj in objs:
    result = paint(result, shift(obj, (height(grid)-lowermost(obj), -leftmost(obj))))
  return result
 
19.666666666666668, 17.979414, def hfhdccefaaaeefcbagcebacgehcdchdg(I):
    O = canvas(mostcolor(I), (height(I), width(I)))
    for y in range(height(I)):
        for x in range(width(I)):
            if index(I, (y,x)) != mostcolor(I):
                O = paint(O, {(index(I, (y,x)), (height(I)-y-1, x))})
    return O
 
40.666666666666664, 16.34459, def ecbecdhgacjaebbeieffajbjbbaeiddg(I):
  h, w = halve(shape(I))
  quadrants = (
    crop(I, (0, 0), (h, w)), 
    crop(I, (0, w), (h, w)), 
    crop(I, (h, 0), (h, w)), 
    crop(I, (h, w), (h, w))
  )
  rotated_quadrants = (rot270(quadrants[0]), rot270(quadrants[1]), rot270(quadrants[2]), rot270(quadrants[3]))
  O = hconcat(rotated_quadrants[0], rotated_quadrants[3])
  O = vconcat(O, hconcat(rotated_quadrants[2], rotated_quadrants[1]))
  return O
 
16.666666666666668, 32.491, def gehbddgeceddededadiafjfejfjbbfij(I):
    h, w = halve(shape(I))
    O = canvas(mostcolor(I), shape(I))
    for i in range(h):
        for j in range(w):
            O = paint(O, shift(recolor(I[i][j], {(0, 0)}), (j, h + i - 1)))
            O = paint(O, shift(recolor(I[i][j + w], {(0, 0)}), (i, j)))
            O = paint(O, shift(recolor(I[i + h][j], {(0, 0)}), (h + i - 1, w + j - 1)))
            O = paint(O, shift(recolor(I[i + h][j + w], {(0, 0)}), (w + i - 1, h + j - 1)))
    return O
 
12.666666666666666, 52.086624, def djbfdfbfgacaecidbbdfbbbjifbdebdj(I):
  h, w = halve(shape(I))
  O = I
  for i in range(h):
    for j in range(w):
      O = move(O, toobject({(i, j)}, I), (j, h + i - 1))
      O = move(O, toobject({(i, j + w)}, I), (i, j))
      O = move(O, toobject({(i + h, j)}, I), (h + i - 1, w + j - 1))
      O = move(O, toobject({(i + h, j + w)}, I), (w + i - 1, h + j - 1))
  return O
 
7.333333333333333, 12.352383, def adbcbadgaecieefgbjacbbjafaacjbce(I):
  five_obj = first(colorfilter(partition(I), FIVE))
  h = height(five_obj)
  shifted_obj1 = shift(five_obj, (h, 1))
  shifted_obj2 = shift(five_obj, (h * 2, 2))
  O = paint(paint(paint(replace(I, FIVE, TWO), five_obj), shifted_obj1), shifted_obj2)
  return O
 
7.0, 12.087975, def dgcaafjfgiaiecabadgbedidecgddbda(I):
  five_obj = first(colorfilter(objects(I, T, F, F), FIVE))
  O = I
  for i in range(1, 3):
    O = paint(O, shift(recolor(TWO, five_obj), (height(five_obj)*i, i)))
  return O
 
6.666666666666667, 12.176448, def fadjebfacideefccjciabbcgdihjjbgb(I):
  five_obj = first(colorfilter(partition(I), FIVE))
  shifted_objs = [shift(recolor(TWO, five_obj), (height(five_obj)*i, i)) for i in range(3)]
  O = paint(replace(I, FIVE, TWO), merge(shifted_objs))
  return O
 
12.333333333333334, 27.753824, def cbcjfaahbeefedfbiaadfeejeibddfah(I):
  h, w = len(I), len(I[0])
  O = canvas(ZERO, (h + 1, w))
  for i in range(h):
    for j in range(w):
      new_i = i + 1
      new_j = j + 1 if j < w // 2 else j - 1
      if 0 <= new_j < w:
        O = paint(O, {(I[i][j], (new_i, new_j))})
  return O[1:]
 
16.0, 33.136806, def fffdfcaaagfaecdjjecfiededidacaea(I):
  h, w = len(I), len(I[0])
  O = canvas(ZERO, (h+1, w))
  left = crop(I, (0, 0), (h, w // 2))
  right = crop(I, (0, w // 2), (h, w // 2 + (w % 2)))
  O = paint(O, shift(asobject(left), (1, 1)))
  O = paint(O, shift(asobject(right), (1, -1)))
  return O[1:]
 
19.333333333333332, 15.611476, def ejgefbedechjefagjaecagccjghicffd(I):
  five_idx = ulcorner(first(colorfilter(objects(I, T, F, F), FIVE)))[0]
  O = tuple(I[i + five_idx] if i < len(I) - five_idx else I[i - (len(I) - five_idx)] for i in range(len(I)))
  return O
 
14.0, 46.339817, def fhdacdgjbhdeebjajhdebajdheghacja(grid):
  objs = objects(grid, T, F, F)
  shifted_objs = [shift(obj, (height(grid)-lowermost(obj)-1, -leftmost(obj))) for obj in objs]
  return paint(canvas(mostcolor(grid), shape(grid)), merge(shifted_objs))
 
14.333333333333334, 45.324272, def hfdcaffecaaaehejbafdfdfdahhfhdef(grid):
  return paint(
      canvas(mostcolor(grid), shape(grid)), 
      merge(
          apply(
              lambda obj: shift(obj, (height(grid)-lowermost(obj)-1, -leftmost(obj))), 
              objects(grid, T, F, F)
          )
      )
  )
 
14.333333333333334, 45.664192, def djfbccdbbjfiefhcjadachgeahccgeed(grid):
  return tuple(
    tuple(
      next(
        (
          grid[i_o][j_o] for obj in objects(grid, T, F, F) 
          for v, (i_o, j_o) in obj 
          if i == i_o + height(grid) - lowermost(obj) - 1 and j == j_o - leftmost(obj)
        ),
        mostcolor(grid)
      )
      for j in range(width(grid))
    )
    for i in range(height(grid))
  )
 
10.666666666666666, 22.675, def efbfbgjeeiebebigbcifbecgajicdgga(I):
  h, w = halve(shape(I))
  O = I
  for i in range(h):
    for j in range(w):
      if j < w and i < h:
        O = paint(O, shift(recolor(I[i][j], {(0, 0)}), (h + i, j)))
      if j < w and i >= h:
        O = paint(O, shift(recolor(I[i][j], {(0, 0)}), (i - h, j)))
      if j >= w and i < h:
        O = paint(O, shift(recolor(I[i][j], {(0, 0)}), (h + i, j - w)))
      if j >= w and i >= h:
        O = paint(O, shift(recolor(I[i][j], {(0, 0)}), (i - h, j - w)))
  return O
 
27.333333333333332, 18.160309, def acbjffadaiciegddbdacbacffdfajfaf(I):
  h, w = halve(shape(I))
  quadrants = (
    crop(I, (0, 0), (h, w)),
    crop(I, (0, w), (h, w)),
    crop(I, (h, 0), (h, w)),
    crop(I, (h, w), (h, w)),
  )
  return vconcat(hconcat(quadrants[2], quadrants[3]), hconcat(quadrants[0], quadrants[1]))
 
6.666666666666667, 12.570995, def afjedfdbfeccebfgibfeebbbbefhhcja(I):
  five_obj = first(colorfilter(partition(I), FIVE))
  h = height(five_obj)
  offsets = (((-1 if h==1 else 1) * h * i, i * (1 if h > 1 else -1)) for i in range(3))
  shifted_objs = [shift(recolor(TWO, five_obj), offset) for offset in offsets]
  O = paint(replace(I, FIVE, TWO), merge(shifted_objs))
  return O
 
15.333333333333334, 21.89554, def ffdjahbcfdbgegecjgicdjdbfbiefcec(I):
  # Find the pivot object (containing 5)
  pivot_obj = first(colorfilter(objects(I, T, F, F), FIVE))
  
  # Determine pivot row 
  pivot_row = uppermost(pivot_obj)

  # Split grid horizontally based on pivot row
  top_half = I[:pivot_row]
  bottom_half = I[pivot_row:]

  # Shift left and right halves
  shifted_top = shift(toobject(asindices(top_half), I), (1, 1))
  shifted_bottom = shift(toobject(asindices(bottom_half), I), (1, -1))

  # Combine and paint onto a blank canvas
  O = paint(paint(canvas(ZERO, shape(I)), shifted_top), shifted_bottom) 
  return O 
 
15.666666666666666, 24.00283, def eccebdjjaafjebhfbfcfadheecgdcfic(I):
  pivot_obj = first(colorfilter(objects(I, T, F, F), FIVE))
  pivot_center = centerofmass(pivot_obj)

  O = canvas(ZERO, shape(I))
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if (i, j) == pivot_center:
        O = paint(O, {(val, (i + 1, j))}) # Pivot stays in its column
      elif j < pivot_center[1]:
        O = paint(O, {(val, (i + 1, j + 1))})
      else:
        O = paint(O, {(val, (i + 1, j - 1))})
  return O
 
13.666666666666666, 19.765017, def ecabchfccaccebhajaibjaeffefgcedc(I):
    objs = objects(I, T, F, F)
    pivot_obj = first(colorfilter(objs, FIVE))
    pivot_col = leftmost(pivot_obj)
    O = canvas(ZERO, (len(I) + 1, len(I[0])))
    for obj in objs:
        if leftmost(obj) <= pivot_col:
            O = paint(O, shift(obj, (1, 1)))
        else:
            O = paint(O, shift(obj, (1, -1)))
    return O[1:]
 
12.666666666666666, 18.882807, def deccefcbabfiecbabeacdbcjbfaidhfg(I):
  five_idx = ulcorner(first(colorfilter(objects(I, T, F, F), FIVE)))
  return tuple(tuple(I[(i - five_idx[0] - 1) % len(I)][j] if i > five_idx[0] else I[i][j] for j in range(len(I[0]))) for i in range(len(I)))
 
15.0, 16.284489, def bjjaghbafebgeiddjdbcachdjgdfiaca(I):
  five_obj_indices = toindices(first(colorfilter(objects(I, T, F, F), FIVE)))
  new_grid = [[0 for _ in range(len(I[0]))] for _ in range(len(I))]
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if (i, j) in five_obj_indices:
        new_grid[i][j] = val
      else:
        new_grid[(i + height(five_obj_indices)) % len(I)][j] = val
  return tuple(tuple(row) for row in new_grid)
 
17.333333333333332, 29.121317, def gfafcjagheicedjejbbffbbegebhdgee(grid):
  obj = merge(objects(grid, T, F, F))
  return paint(canvas(ZERO, shape(grid)), shift(obj, (height(grid) - height(obj), width(grid) // 2 - leftmost(obj))))
 
13.666666666666666, 51.88127, def bgaijfeebaihefbabebahahaaaidaccd(grid):
    objs = objects(grid, T, F, F)
    return paint(
        cover(grid, merge(objs)), 
        merge({shift(obj, (height(grid) - height(obj), width(grid) // 2 - leftmost(obj))) for obj in objs})
    )
 
14.666666666666666, 47.547546, def eadabddeicjeefcaadfeefgedhcfjdeb(grid):
  return paint(
      canvas(ZERO, shape(grid)), 
      merge(
          {shift(obj, (height(grid) - uppermost(obj) - 1, width(grid) // 2 - leftmost(obj))) for obj in objects(grid, T, F, F)}
      )
  )
 
9.0, 16.887781, def daaacfieaeefeebijabefbeadaiiddfd(grid):
    h, w = shape(grid)
    obj = merge(objects(grid, T, F, F))
    return tuple(
        tuple(
            next((v for v, (i_o, j_o) in obj if i == i_o + h - lowermost(obj) - 1 and j == j_o + w // 2 - (leftmost(obj) + rightmost(obj)) // 2), ZERO) 
            for j in range(w)
        ) 
        for i in range(h)
    )
 
7.0, 12.153343, def cadfcbfabhihehcejcddfdaeeaidcgcb(I):
  five_obj = first(colorfilter(partition(I), FIVE))
  h = height(five_obj)
  w = width(five_obj)
  direction = 1 if h > w else -1
  shifted_obj1 = shift(recolor(TWO, five_obj), (h, direction))
  shifted_obj2 = shift(recolor(TWO, five_obj), (2 * h, 2 * direction))
  O = paint(paint(paint(replace(I, FIVE, TWO), five_obj), shifted_obj1), shifted_obj2)
  return O
 
6.666666666666667, 12.264725, def febecfcecdfheechjcjgdjfcjedafafi(I):
  five_obj = first(colorfilter(partition(I), FIVE))
  h = height(five_obj)
  w = width(five_obj)
  offset = (h, (1 if h > w else -1))
  shifted_objs = apply(lambda i: shift(recolor(TWO, five_obj), (i * offset[0], i * offset[1])), (1, 2))
  O = paint(replace(I, FIVE, TWO), merge(shifted_objs))
  return O
 
6.333333333333333, 17.756126, def eaeajcbbchdjejaajijbcddgabggbegj(I):
  obj = first(colorfilter(objects(I, T, F, F), FIVE)) # Identify the object containing '5'
  offset = (height(obj), 0)  # Calculate the vertical offset based on object height
  return paint(cover(I, obj), shift(vmirror(obj), offset)) # Mirror, shift and paint
 
7.333333333333333, 20.47155, def ajefibccdfafefaabfdcicchdedddeda(I):
    h = height(I)
    obj = first(colorfilter(partition(I), FIVE))
    return paint(cover(I, obj), shift(vmirror(obj), (h - uppermost(obj) - 1, 0)))
 
6.666666666666667, 20.96049, def edeccdaddbceehddadgdhdhghggdjdeh(I):
  objs = objects(I, T, F, F)
  five_obj = first(colorfilter(objs, FIVE))
  shifted_obj = shift(vmirror(five_obj), (2*uppermost(five_obj) + height(five_obj), 0))
  return paint(cover(I, five_obj), shifted_obj)
 
6.666666666666667, 16.37803, def eddagfgeagbcebbdjecedjejgdhgdijb(I):
  five_indices = ofcolor(I, FIVE)
  mirrored_indices = {(i, 2 * uppermost(five_indices) + height(five_indices) - 1 - j) for i, j in five_indices}
  return fill(I, FIVE, mirrored_indices)
 
6.666666666666667, 20.624231, def ceddcechafhaebaabjdciicbjaacaeia(I):
  fives = first(colorfilter(partition(I), FIVE))
  h = height(fives) 
  return paint(cover(I, fives), shift(vmirror(fives), (h + uppermost(fives), 0))) 
 
13.666666666666666, 35.033306, def ffddcfdbehbaeciiidejddgeeejiaaef(I):
  five_obj = first(colorfilter(objects(I, T, F, F), FIVE))
  rest = difference(objects(I, T, F, F), {five_obj})
  moved = frozenset(shift(obj, (-uppermost(obj), 0)) for obj in rest)
  return paint(paint(canvas(ZERO, shape(I)), five_obj), merge(moved))
 
16.333333333333332, 29.960787, def ffegfjaefdgcecbgacieehgjfcdbfffc(I):
  obj = extract(objects(I, F, F, T), lambda obj: len(obj) > 1)
  center_j = width(I) // 2 - width(obj) // 2
  O = paint(cover(I, obj), shift(obj, (height(I) - height(obj), center_j - leftmost(obj))))
  return O
 
18.333333333333332, 21.954159, def fafhibhfegbgeedejegbbbaedfccfhah(I):
  obj = argmax(objects(I, F, F, T), size)
  target_ulcorner = (height(I) - height(obj), width(I) // 2 - width(obj) // 2)
  O = paint(cover(I, obj), shift(obj, subtract(target_ulcorner, ulcorner(obj))))
  return O
 
16.0, 33.21803, def ddijfacbedfbefeaidddddhggcfdehec(I):
  non_bg_objs = sfilter(objects(I, F, F, T), lambda obj: color(obj) != mostcommon(I))
  obj = extract(non_bg_objs, lambda obj: len(obj) == max(len(o) for o in non_bg_objs))
  target_center = (height(I) - height(obj) // 2, width(I) // 2)
  O = paint(cover(I, obj), shift(obj, subtract(target_center, centerofmass(obj))))
  return O
 
15.666666666666666, 35.849483, def fccjfahdafgcefjbacgbfadbcfdbgjjg(I):
  obj = extract(objects(I, F, F, T), lambda o: size(o) > 1 and any(v != mostcolor(I) for v, _ in o))
  h, w = shape(obj)
  O = paint(cover(I, obj), shift(obj, (height(I) - h, width(I) // 2 - w // 2 - (1 if w % 2 and not width(I) % 2 else 0))))
  return O
 
17.333333333333332, 16.598839, def eeddafjhcdadeajbafbcdebbfdcdfeaa(I):
  objs = objects(I, F, F, T)
  obj = argmax(sfilter(objs, lambda o: any(v != mostcolor(I) for v, _ in o)), size)
  target_llcorner = (height(I) - height(obj), width(I) // 2 - width(obj) // 2)
  O = paint(cover(I, obj), shift(obj, subtract(target_llcorner, llcorner(obj))))
  return O
 
6.666666666666667, 12.37531, def faaajbcdejidefhdbgaaeeifchbfbfgb(I):
  five_obj = first(colorfilter(partition(I), FIVE))
  h, w = shape(five_obj)
  direction = LEFT if h > w else RIGHT
  O = replace(I, FIVE, TWO)
  for i in (1, 2):
    O = paint(O, shift(recolor(TWO, five_obj), add((h * i, 0), multiply(direction, (i, 0)))))
  return O
 
6.333333333333333, 14.07319, def dhfhbhcfafcfecaeijjhadceifgddbcf(I):
  obj = first(colorfilter(objects(I, T, F, F), FIVE))
  return paint(I, shift(vmirror(obj), (height(obj) * 2 - (1 if size(obj) == 1 else 0), 0))) 
 
7.333333333333333, 18.651146, def cfbjeeigdhfaeffbadacfdffeeacaaac(I):
  obj = first(colorfilter(objects(I, T, F, F), FIVE))
  h = height(obj)
  offset = (h * 2 - (h > 1), 0) 
  return paint(cover(I, obj), shift(vmirror(obj), offset))
 
15.333333333333334, 32.064594, def baicbcbadgfcegeiahfeiahjdeafieca(I):
  five_obj = first(colorfilter(objects(I, T, F, F), FIVE))
  return paint(canvas(ZERO, shape(I)),
               mapply(lambda obj: branch(color(obj) != FIVE,
                                      shift(obj, (uppermost(five_obj) - uppermost(obj), 0)),
                                      obj),
                    objects(I, T, F, F)))
 
14.666666666666666, 29.0781, def faefccaddcggecdcjcbjhffejdjfjabg(grid):
  objs = objects(grid, T, F, F)
  new_grid = canvas(ZERO, shape(grid))
  for obj in objs:
    bottom_edge = max([i for _, (i, _) in obj])
    spaces_below = height(grid) - bottom_edge - 1
    shifted_obj = shift(obj, (min(spaces_below, 2), 0))
    new_grid = paint(new_grid, shifted_obj)
  return new_grid 
 
12.666666666666666, 21.473248, def fgbeejdbiedaeideaaafdabbajgdacbc(grid):
  objs = objects(grid, T, F, F)
  for obj in objs:
    for _ in range(2):  # Try to move down twice
      if any((i+1,j) in toindices(obj) for i,j in toindices(obj) if i+1<height(grid)):
        break # If blocked, stop moving
      grid = paint(cover(grid, obj), shift(obj,(1,0)))
  return grid
 
13.666666666666666, 25.342897, def ghhdjdedhigbechbajabieegeefegbaf(grid):
  h, w = shape(grid)
  new_grid = canvas(ZERO, (h, w))
  for j in range(w):
    column = [(i, grid[i][j]) for i in range(h)]
    for i in range(h-1, 0, -1):
      if column[i][1] != ZERO and column[i-1][1] == ZERO:
        column[i-1], column[i] = column[i], (i-1, ZERO)
      if column[i][1] != ZERO and column[i-1][1] != ZERO and i >= 2 and column[i-2][1] == ZERO:
        column[i-2], column[i] = column[i], (i-2, ZERO)
    for i in range(h):
      new_grid = paint(new_grid, {(column[i][1], (i, j))})
  return new_grid
 
17.333333333333332, 17.249084, def abjbjgbeidfiedfgjddjhdifdjiidgcd(grid):
  for _ in range(2): # Simulate gravity twice
    for i in range(height(grid)-1, 0, -1):
      for j in range(width(grid)):
        if grid[i][j] == 0 and grid[i-1][j] != 0:
          grid = paint(cover(grid, {(grid[i-1][j], (i-1,j))}), {(grid[i-1][j], (i,j))})
  return grid
 
15.666666666666666, 25.130428, def bgfdefbhgdacefagigcigaaafcadjdbf(grid):
  h, w = shape(grid)
  def move_down(obj):
    down_shift = min(2, len([i for i in range(uppermost(obj)+1, h) if (i, leftmost(obj)) not in toindices(obj)]))
    return shift(obj, (down_shift, 0))
  objs = objects(grid, T, F, F)
  moved_objs = frozenset(move_down(obj) for obj in objs)
  return paint(canvas(ZERO, (h, w)), merge(moved_objs))
 
6.0, 13.697802, def fcbaaaaeefeiebafifiaeacjbddahgaj(I):
  five_obj = first(colorfilter(partition(I), FIVE))
  h, w = shape(five_obj)
  direction = (1, 1) if h > w else (1, -1)
  shifted_obj = shift(recolor(TWO, five_obj), multiply((h, w), direction))
  O = paint(replace(I, FIVE, TWO), shifted_obj)
  return O
 
6.333333333333333, 13.62712, def djcdigachccceeiibafdejabefehbdhf(I):
  five_obj = first(colorfilter(partition(I), FIVE))
  h, w = shape(five_obj)
  offset = (h, w) if h > w else (h, -w)
  shifted_obj = shift(recolor(TWO, five_obj), offset)
  O = paint(replace(I, FIVE, TWO), combine(five_obj, shifted_obj))
  return O
 
6.0, 14.399801, def cecediccdhdeefgajcfiadgcabdaiced(I):
  five_obj = first(colorfilter(partition(I), FIVE))
  O = paint(replace(I, FIVE, TWO), shift(five_obj, (height(five_obj), width(five_obj) * sign(height(five_obj) - width(five_obj)))))
  return O
 
7.0, 11.629428, def bgjafgjefdfbedbdbfhfefiejdbhbcba(I):
  five_obj = first(colorfilter(partition(I), FIVE))
  h, w = shape(five_obj)
  shift_direction = 1 if h > w else -1
  O = replace(I, FIVE, TWO)
  for i in (1, 2):
    O = paint(O, shift(five_obj, (h * i, w * shift_direction * i)))
  return O
 
13.666666666666666, 44.079933, def fabccidgdijeeefbacdfgicdgbiffdda(I):
  five_loc = first(ofcolor(I, FIVE))
  fi, fj = five_loc
  output = [[ZERO for _ in range(len(I[0]))] for _ in range(len(I))]
  for i in range(len(I)):
    for j in range(len(I[0])):
      if I[i][j] != FIVE:
        new_i, new_j = fi + (j - fj), fj - (i - fi)
        if 0 <= new_i < len(I) and 0 <= new_j < len(I[0]):
          output[new_i][new_j] = I[i][j]
      else:
        output[i][j] = FIVE
  return tuple(tuple(row) for row in output)
 
7.0, 20.852615, def aaccdfaffbfiecfhjbbegcfecgfiagab(I):
  obj = extract(objects(I, T, F, F), lambda obj: color(obj) == FIVE)
  center_j = width(I) // 2 - (1 if even(width(I)) else 0)
  if uppermost(obj) < height(I) // 2:
    O = paint(cover(I, obj), shift(obj, (height(I) - height(obj), center_j - leftmost(obj))))
  else:
    O = paint(cover(I, obj), shift(obj, (-uppermost(obj), center_j - leftmost(obj))))
  return O
 
7.333333333333333, 20.546972, def fadabgccdjjeebbaabdhbfieajabgcbe(I):
  obj = extract(objects(I, T, F, F), lambda obj: FIVE in palette(obj))
  middle_row = height(I) // 2
  if uppermost(obj) < middle_row:
    offset = (height(I) - height(obj) - uppermost(obj), width(I) // 2 - leftmost(obj) - width(obj) // 2)
  else:
    offset = (-uppermost(obj), width(I) // 2 - leftmost(obj) - width(obj) // 2)
  O = paint(cover(I, obj), shift(obj, offset))
  return O
 
7.333333333333333, 20.470064, def ccdcjaicjcahefbjadehefffhefecahc(I):
  target_color = FIVE
  obj = next((obj for obj in objects(I, T, F, F) if color(obj) == target_color), frozenset())
  center_j = (width(I) - width(obj)) // 2
  target_i = (height(I) - height(obj)) if uppermost(obj) < height(I) // 2 else 0
  O = paint(cover(I, obj), shift(obj, (target_i - uppermost(obj), center_j - leftmost(obj))))
  return O
 
6.0, 13.820426, def bbebcbfhehagecidjefiiihacjeeedch(I):
  five_obj = first(colorfilter(partition(I), FIVE))
  h, w = shape(five_obj)
  new_obj = frozenset((TWO, (i + h, j + w)) for _, (i, j) in five_obj)
  O = paint(I, new_obj)
  return O
 
14.666666666666666, 34.58975, def jfbhbdhfagdjedddieejehibeibbbebh(I):
  objs = objects(I, T, F, T)
  center_i = height(I) // 2
  O = I
  for obj in objs:
    if uppermost(obj) < center_i:
      O = paint(cover(O, obj), shift(obj, (center_i - uppermost(obj), width(I) // 2 - leftmost(obj))))
    else:
      O = paint(cover(O, obj), shift(obj, (center_i - lowermost(obj), width(I) // 2 - leftmost(obj))))
  return O
 
5.666666666666667, 13.767938, def fabaidbcfijiefbjbadcjeiefahdhddd(I):
  five_indices = toindices(first(colorfilter(partition(I), FIVE)))
  h, w = height(five_indices), width(five_indices)
  shift_direction = (1 if h >= w else -1, 1)
  new_indices = shift(five_indices, multiply((h, w), shift_direction))
  O = paint(replace(I, FIVE, TWO), recolor(TWO, new_indices))
  return O
 
7.0, 16.183378, def gdddefgdajedebfbafaceabbefdjccai(I):
  five_obj = next(obj for obj in objects(I, T, F, F) if color(obj) == FIVE)
  h = height(five_obj)
  O = I
  for i in range(1, 3):
    O = paint(cover(O, five_obj), shift(recolor(TWO, five_obj), (h * i, i)))
  return O
 
6.333333333333333, 17.152925, def gcdaiechfebaeebhadfecagjcggadbca(I):
  five_idx = ofcolor(I, FIVE)
  h, w = shape(I)
  min_i, min_j = ulcorner(five_idx)
  new_five_idx = {(h - 1 - (j - min_j) + min_i, i - min_i + min_j) for i, j in five_idx}
  return fill(I, FIVE, new_five_idx)
 
7.0, 13.50105, def dgfjacaccdaaeffdjibficcghdhgehag(I):
  five_obj = first(colorfilter(objects(I, T, F, F), FIVE))
  h, w = shape(five_obj)
  offset = (-h, w)
  shifted_obj = shift(recolor(TWO, five_obj), offset)
  O = paint(replace(I, FIVE, TWO), shifted_obj)
  return O
 
6.0, 13.980834, def biaibdihbabbeaidbeabhjdbhadcahfe(I):
  five_obj = first(colorfilter(partition(I), FIVE))
  h = height(five_obj)
  shifted_obj = shift(recolor(TWO, five_obj), (-h, 0))
  O = paint(replace(I, FIVE, TWO), combine(five_obj, shifted_obj))
  return O
 
7.0, 16.56549, def cdbedacdjfbcejdeiceaabfbafdfefbb(I):
  five_obj = asobject(crop(I, ulcorner(ofcolor(I, FIVE)), shape(ofcolor(I, FIVE))))
  shifted_obj = shift(recolor(TWO, five_obj), (-height(five_obj), width(five_obj)))
  O = paint(replace(I, FIVE, TWO), combine(five_obj, shifted_obj))
  return O
 
6.333333333333333, 13.826184, def afjifbacdbcheefgifhfdcdeadbffdcd(I):
  five_obj = first(colorfilter(objects(I, T, F, F), FIVE))
  direction = (-1, 1) if height(five_obj) > width(five_obj) else (-1, -1)
  offset = multiply(shape(five_obj), direction)
  shifted_obj = shift(recolor(TWO, five_obj), offset)
  O = paint(replace(I, FIVE, TWO), combine(five_obj, shifted_obj))
  return O
 
