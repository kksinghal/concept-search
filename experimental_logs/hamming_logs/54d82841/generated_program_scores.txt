3.6666666666666665, 6.7496815, def bchebjdfbgcfeaabbgaffeebbbffjbbd(I):
  O = I
  for obj in fgpartition(I):
    w = width(obj)
    left_corner = llcorner(obj)
    O = fill(O, 4, {(height(I) - 1, left_corner[1] + i) for i in range(w)})
  return O
 
8.666666666666666, 16.167171, def cjdhhdiiecbbegcbjebacdcbefeiehha(I):
  h = height(I)
  w = width(I)
  indices = frozenset((i+2, j) for i in range(h) for j in range(w) if I[i][j] != 0 and (i + 2 < h))
  O = fill(I, 4, indices)
  return O
 
6.0, 12.957486, def adaeidbecfecebchaehdhcccdgbefeaf(I):
  O = I
  for j in range(width(I)):
    for i in range(height(I)-1, -1, -1):
      if I[i][j] != 0 and i + 2 < height(I):
        O = fill(O, 4, {(i+2, j)})
        break
  return O
 
4.666666666666667, 8.743587, def eagfbeehhgfdegbfifhicjiegaafgbba(I):
  O = I
  for obj in objects(I, False, False, True):
    bottom_row = lowermost(obj)
    if bottom_row + 2 < height(I):
      O = fill(O, 4, {(bottom_row + 2, j) for i, j in toindices(obj)})
  return O
 
2.6666666666666665, 2.1430979, def cgeffcdbacbaefcbbcbdaeacdicfffgb(I):
  # Create the '4' object
  new_object =  {(4, (0, 1)), (4, (0, 5))} 

  # Determine the correct vertical placement based on input height
  v_offset = (height(I) - 1, 0)  
  shifted_object = shift(new_object, v_offset)

  # Combine the input grid with the shifted object
  O = paint(I, shifted_object)
  return O
 
2.6666666666666665, 1.8178973, def aggchdccdgfiefehideadcbdegeiiecc(I):
  # Identify the bottom right corner of the input grid
  bottom_right = lrcorner(asindices(I))

  # Calculate locations for the '4' object 
  loc1 = subtract(bottom_right, (0, 2))
  loc2 = subtract(bottom_right, (0, 6))

  # Fill the locations with '4' to create the object
  O = fill(fill(I, 4, initset(loc1)), 4, initset(loc2)) 
  return O
 
4.333333333333333, 4.7862506, def jbadjaijghebegiijcjcaccafdfaegab(I):
  w = width(I)
  O = fill(I, 4, {(len(I)-1, j) for j in range(w//2-1) if j!=w//2})
  O = fill(O, 4, {(len(O)-1, j) for j in range(w//2+1, w)})
  return O
 
4.666666666666667, 6.691204, def ahachbcfahdbecedabaafaffgihbefai(I):
  w = width(I)
  line = {(len(I)-1, j) for j in range(w)}
  gap = {(len(I)-1, w//2)} 
  O = fill(I, 4, line - gap)
  return O
 
4.333333333333333, 3.572683, def fcfccciafcddedahbecjeaadfeeiadea(I):
  objs = fgpartition(I)
  new_lines = frozenset()
  for obj in objs:
    left_edge = min(j for i, j in toindices(obj))
    right_edge = max(j for i, j in toindices(obj))
    bottom_row = height(I) - 1
    new_lines |= {(4, (bottom_row, left_edge)), (4, (bottom_row, right_edge))}
  O = paint(I, new_lines)
  return O
 
3.6666666666666665, 5.3039436, def hafjeabfcbdbehhfaffedhjafedbfdce(I):
    O = I
    for obj in objects(I, False, False, True):
        O = fill(O, 4, {(lowermost(obj) + 2, leftmost(obj)), (lowermost(obj) + 2, rightmost(obj))})
    return O
 
4.666666666666667, 8.904308, def ieaageeeieicebbdjceeaihfjaieaiab(I):
  indices = set()
  for j in range(width(I)):
    for i in range(height(I) - 1, 1, -1):
      if I[i][j] == mostcolor(I) and I[i - 1][j] != mostcolor(I):
        indices.add((i + 1, j))
        break
  return fill(I, 4, frozenset(indices))
 
8.333333333333334, 10.990042, def dahdfegdbgbgeaaiicffjfbfbgdbcabf(I):
  new_row = tuple([4 if j in [1, 5] else 0 for j in range(width(I))])
  O = vconcat(I, (new_row,))
  return O
 
7.0, 18.2099, def geffcciccddeehebjafbbbededabfjjg(I):
  """
  Finds the lowest row index containing a non-zero element and draws a '4' line below it.

  Args:
    I: The input grid.

  Returns:
    The transformed grid.
  """
  h = height(I)
  for i in range(h - 1, -1, -1):
    if any(v != 0 for v in I[i]):
      return fill(I, 4, hfrontier((i + 1, 0)))
  return I
 
7.0, 12.023011, def ddeecgeifacgejijjaedfacgbdbfdeaj(I):
    def get_bottom_line(obj):
        bottom = lowermost(obj)
        left, right = leftmost(obj), rightmost(obj)
        return frozenset((4, (bottom, j)) for j in range(left, right + 1))
    return paint(I, merge(apply(get_bottom_line, fgpartition(I)))) 
 
4.333333333333333, 5.281365, def fcdicehaffdceehfaabbhdfafefcbggc(I):
    def bottom_line_indices(obj):
        row = lowermost(obj)
        return frozenset((row, j) for i, j in toindices(obj) if i == row)
    return paint(I, recolor(4, merge(apply(bottom_line_indices, fgpartition(I)))))
 
12.0, 34.88672, def ciaaidgafjdaebdaabefbghbjefdedhf(I):
    O = canvas(mostcolor(I), shape(I))
    for obj in objects(I, False, False, True):
        bottom_row = lowermost(obj)
        left_col = leftmost(obj)
        right_col = rightmost(obj)
        O = paint(O, {(4, (bottom_row + 2, left_col)), (4, (bottom_row + 2, right_col))})
    return O
 
1.6666666666666667, 3.083607, def jafjcfgedbccebahjddehcfcbbiejbdd(I):
  w = width(I)
  offset = 1 if even(w) else 0
  center = halve(w)
  loc1 = (height(I) - 1, center - 1 - offset)
  loc2 = (height(I) - 1, center + offset)
  return fill(fill(I, 4, initset(loc1)), 4, initset(loc2))
 
10.0, 36.09193, def cgdhdccdgfcfecafjafeddjciicdcfej(I):
  h = height(I)
  w = width(I)
  center =  halve(w)
  new_grid = canvas(0, (h, w))
  new_grid = fill(new_grid, 4, {(h - 1, center - 1 - (1 if even(w) else 0))})
  new_grid = fill(new_grid, 4, {(h - 1, center + (1 if even(w) else 0))})
  return paint(I, asobject(new_grid))
 
5.666666666666667, 10.893068, def aedeefedfabeeccfihfieeecbbbdefbb(I):
  O = I
  for i, row in enumerate(I[:-2]):
    for j, val in enumerate(row[:-1]):
      if val == 0 and I[i+1][j+1] != 0:
        O = fill(O, 4, {(i+2, j)})
  return O
 
16.333333333333332, 14.88223, def gedabbadecbeebbjbchggafjcbafjfec(I):
  def shift_down(obj):
    return shift(obj, (1, 0))
  
  def draw_bottom_line(obj):
    return  recolor(4, backdrop(shift_down(obj)))
  return paint(I, merge(apply(draw_bottom_line, fgpartition(I))))
 
3.0, 3.24652, def bbaejghajcfbebffbjfbeabcjbaabbec(I):
  h = height(I) - 1
  indices = asindices(I)
  bottom_row = sfilter(indices, lambda x: x[0] == h)
  w = width(I)
  mid = w // 2
  offset = 1 - w % 2
  p1 = (h, mid - offset)
  p2 = (h, mid + 1)
  return fill(fill(I, 4, initset(p1)), 4, initset(p2))
 
2.3333333333333335, 1.8079519, def jjgdcdacdabfeifgjeeecjdggeehehgc(I):
  indices = asindices(I)
  bottom = max(indices, key=lambda x: x[0])[0]
  width = max(indices, key=lambda x: x[1])[1] + 1
  mid = width // 2
  offset = (width % 2) - 1
  return fill(fill(I, 4, initset((bottom, mid + offset))), 4, initset((bottom, mid)))
 
3.0, 3.3404562, def edbdccebecaceehjicdjejbeebcheaac(I):
  w = width(I)
  h = height(I)
  j = (w // 2) - (1 if even(w) else 0)
  return fill(fill(I, 4, initset((h - 1, j))), 4, initset((h - 1, j + 1)))
 
2.6666666666666665, 2.608326, def dcfgcfdjedgbeedhjjffgafhbeaiahfd(I):
  w = width(I)
  center = w // 2
  offset =  center - ((w + 1) // 2)
  bottom_row = height(I) - 1
  pos1 = (bottom_row, center - offset)
  pos2 = (bottom_row, center + offset)
  return fill(fill(I, 4, initset(pos1)), 4, initset(pos2))
 
3.0, 6.1805863, def ecfgcffjdcbbecbbjfdcebibdcaafbga(I):
  # Find the indices of all non-background colors
  non_bg_indices = difference(asindices(I), ofcolor(I, mostcolor(I)))
  # Extract the colors at these indices
  non_bg_colors = frozenset(I[i][j] for i, j in non_bg_indices)
  # Find the most common non-background color
  mc = mostcommon(tuple(non_bg_colors)) 
  # Get the column indices where the most common color appears
  columns = frozenset(j for i, j in ofcolor(I, mc))
  # Create a horizontal line at the bottom with color 4
  hline = frozenset((height(I) - 1, j) for j in columns)
  # Fill the horizontal line on the input grid
  O = paint(I, recolor(4, hline))
  return O
 
3.0, 5.166886, def jaehcieecabaedjbiieibaedicbbgibb(I):
    # Find the most frequent non-background object
  obj = argmax(fgpartition(I), len)
  # Get the column indices of this object
  columns = frozenset(j for _, (i, j) in obj)
  # Create a horizontal line at the bottom aligned with these columns
  hline = frozenset((height(I) - 1, j) for j in columns)
  # Paint the line with color 4 onto the input grid
  O = paint(I, recolor(4, hline))
  return O
 
3.6666666666666665, 6.7496815, def idideefacedaeabgbabibacefcghcfib(I):
  # Get the bounding box of all non-background colors
  bbox = backdrop(difference(asindices(I), ofcolor(I, mostcolor(I))))
  # Create a horizontal line at the bottom within the bounding box
  hline = frozenset((height(I) - 1, j) for i, j in bbox if i == lowermost(bbox))
  # Fill the horizontal line on the input grid with color 4
  O = paint(I, recolor(4, hline))
  return O
 
2.6666666666666665, 5.475551, def hbgacbhedhfgeedijdieccajbbhjdhhh(I):
  def mark_isolated(obj):
    i, j = ulcorner(obj)
    if i > 0 and I[i - 1][j] == 0:
      return frozenset({(4, (i + 1, j))})
    return frozenset()
  return paint(I, merge(apply(mark_isolated, objects(I, T, T, T))))
 
2.3333333333333335, 2.3754926, def ebdefcaifdefeiidbdeaadaacchfecfj(I):
  h = height(I) - 1
  w = width(I)
  mid = w // 2
  offset = 0 if even(w) else -1
  return fill(fill(I, 4, initset((h, mid + offset))), 4, initset((h, mid - 1)))
 
7.0, 11.457401, def beadagiifbijeegcbcffaeiedajidbid(I):
  # Find indices of non-background colors
  non_bg_indices = difference(asindices(I), ofcolor(I, mostcolor(I)))
  # Get the bounding box of non-background indices
  bbox = backdrop(non_bg_indices) 
  # Create a horizontal line at the bottom of the bounding box
  hline = frozenset((lowermost(bbox), j) for i, j in bbox if i == lowermost(bbox))
  # Fill the horizontal line with color 4
  O = paint(I, recolor(4, hline))
  return O 
 
8.333333333333334, 14.364628, def aedeffhcddgbeaacieicahdbfeicegef(I):
  # Find the lowermost row containing a non-background color
  bottom_row = max(i for i, row in enumerate(I) if any(v != mostcolor(I) for v in row))
  # Create a horizontal line at the bottom_row
  hline = frozenset((bottom_row, j) for j in range(width(I)))
  # Fill the horizontal line with color 4
  O = paint(I, recolor(4, hline))
  return O
 
8.333333333333334, 12.944355, def hiieeedbcjcbeefcaijbbdcbcedfbdea(I):
    # Directly construct the horizontal line based on input dimensions
    hline = frozenset((height(I) - 2, j) for j in range(width(I)))
    # Paint the line onto the input grid
    O = paint(I, recolor(4, hline))
    return O
 
13.333333333333334, 17.767445, def fjhcdabifhaeebjeabdebdjfebaheadd(I):
  # Create a canvas filled with the background color and the same dimensions as the input 
  canvas =  tuple(tuple(mostcolor(I) for _ in range(width(I))) for _ in range(height(I)))
  # Find the non-background indices
  non_bg_indices = difference(asindices(I), ofcolor(I, mostcolor(I)))
  # Get the bounding box of the non-background indices
  bbox = backdrop(non_bg_indices)
  # Create a horizontal line at the bottom of the bounding box
  hline = frozenset((lowermost(bbox), j) for i, j in bbox if i == lowermost(bbox))
  # Paint the line onto the canvas
  O = paint(canvas, recolor(4, hline))
  return O 
 
6.333333333333333, 14.788352, def gefdddhchbaeehfciahfcdabbcfbefci(I):
  def draw_line(obj):
    bottom_row = lowermost(obj) + 1
    leftmost_col = leftmost(obj)
    rightmost_col = rightmost(obj)
    return frozenset({(4, (bottom_row, j)) for j in range(leftmost_col, rightmost_col + 1)})
  
  lines = merge(apply(draw_line, fgpartition(I)))
  return paint(I, lines)
 
4.333333333333333, 5.462796, def fddbbebabcehecjcjafhfehejagaddbi(I):
  def underline(obj):
    bottom = lowermost(toindices(obj)) + 1
    return frozenset({(4, (bottom, j)) for _, (i, j) in obj if i == bottom - 1})

  return paint(I, merge(apply(underline, fgpartition(I))))
 
6.0, 13.239573, def ehcfcgidddaaeahebcefajhigbccebad(I):
  return paint(I, 
               merge(
                 apply(
                   lambda obj: frozenset({(4, (lowermost(obj) + 1, j)) for _, (_, j) in obj}),
                   fgpartition(I))))
 
6.666666666666667, 15.082169, def fchaagbjacgjebhbbcecfjcfcafjfbfh(I):
  def extend_down(obj):
    return frozenset((4, (i + 1, j)) for _, (i, j) in obj if (i + 1, j) not in toindices(obj))
  
  return paint(I, merge(apply(extend_down, fgpartition(I))))
 
5.0, 5.2534385, def adjbeddbfabdeddbbbbcfjhiaeaafage(I):
  O = I # Initialize output grid
  for obj in objects(I, True, False, True): # Loop through each object
    bottom_left = (lowermost(obj), leftmost(obj)) # Get bottom left corner
    bottom_right = (lowermost(obj), rightmost(obj)) # Get bottom right corner
    O = paint(O, recolor(4, {bottom_left, bottom_right})) # Paint corners with '4'
  return O
 
3.6666666666666665, 2.4530451, def aefjbccjgcjfeejeiefdedadgaddccef(I):
  objs = objects(I, T, T, T) # find all objects
  left_corner = llcorner(merge(objs))  # get bottom left corner of all objects
  right_corner = lrcorner(merge(objs)) # get bottom right corner of all objects
  left_index = (len(I)-1, left_corner[1]) # bottom row, left corner x-coordinate
  right_index = (len(I)-1, right_corner[1]) # bottom row, right corner x-coordinate
  target_indices = frozenset({left_index, right_index}) # combine indices
  return paint(I, recolor(4, target_indices)) # paint '4' at target indices
 
5.0, 8.472659, def dceehagcacdceeeijacacaedffbbbiai(I):
  all_indices = asindices(I)
  object_indices = merge(objects(I, T, T, T))
  non_object_indices = all_indices - toindices(object_indices)
  bottom_row = {(len(I)-1, j) for j in range(len(I[0]))}
  target_indices = intersection(bottom_row, non_object_indices)
  return paint(I, recolor(4, target_indices))
 
2.3333333333333335, 1.9390752, def hfejaggeaccfebdgaejdhbgcbgadcfif(I):
  compressed = compress(I)
  target_indices = {(len(I)-1, 0), (len(I)-1, len(compressed[0])-1)}
  return paint(I, recolor(4, target_indices))
 
4.333333333333333, 4.720939, def ebjdjccaajddeeigachjdfgadcacaaed(I):
    modified_grid = I
    for obj in fgpartition(I):
        bottom_row = lowermost(obj)
        leftmost_col = leftmost(obj)
        rightmost_col = rightmost(obj)
        modified_grid = fill(modified_grid, 4, {(bottom_row, leftmost_col), (bottom_row, rightmost_col)})
    O = modified_grid
    return O
 
2.0, 2.880152, def fcjdahgfhbaieeaajajdeajdcaafgdha(I):
  indices = asindices(I)
  bottom = max(i for i, j in indices)
  right = max(j for i, j in indices)
  mid = right // 2
  offset = (right % 2) - 1
  return fill(fill(I, 4, initset((bottom, mid + offset))), 4, initset((bottom, mid)))
 
5.0, 4.583652, def abdbhihajffheadbjcaceeifdbiiafff(I):
  objs = objects(I, True, False, True) # Extract objects
  bottom_row = height(I) - 1 
  marked_indices = set()
  for obj in objs:
    leftmost_col = leftmost(obj)
    rightmost_col = rightmost(obj)
    marked_indices.add((bottom_row, leftmost_col))
    marked_indices.add((bottom_row, rightmost_col))
  return paint(I, recolor(4, frozenset(marked_indices)))
 
3.3333333333333335, 6.2402263, def bdiciffebfafejfhjbcdechbaegjfedc(I):
  marked_indices = set()
  for j in range(width(I)):
    for i in range(height(I)-1, -1, -1): # Iterate from bottom to top
      if I[i][j] != mostcolor(I):
        marked_indices.add((height(I)-1, j))
        break # Move to the next column after marking
  return paint(I, recolor(4, frozenset(marked_indices)))
 
5.0, 5.2534385, def bgbfaffeaadieddgafadfbgfejadcfej(I):
  def bottom_color(obj):
    bottom_row = lowermost(obj)
    return frozenset({(4, (i, j)) for v, (i, j) in obj if i == bottom_row})
  objs = objects(I, T, T, T)
  return paint(I, merge(apply(bottom_color, objs)))
 
3.6666666666666665, 4.811574, def jechcefecaedechdacgbjafhddbhcicf(I):
  def get_marker_row(obj):
    return lowermost(obj) + 2

  def place_markers(obj, row):
    return frozenset({(row, leftmost(obj)), (row, rightmost(obj))})

  objs = objects(I, False, False, True)
  rows = apply(get_marker_row, objs)
  return fill(I, 4, merge(papply(place_markers, objs, rows))) 
 
2.3333333333333335, 2.384195, def efffdbiadbedefcbjbidchfbcbbfeief(I):
    w = width(I)
    h = height(I)
    if even(w):
        left = (h - 1, w // 2 - 2)
        right = (h - 1, w // 2 + 1)
    else:
        left = (h - 1, w - 3)
        right = (h - 1, w - 1)
    O = fill(fill(I, 4, initset(left)), 4, initset(right))
    return O
 
3.0, 2.3627431, def bafcaeiicadaeaediffffcbbegebfiha(I):
    w = width(I)
    offset = 1 if even(w) else 0
    left = (height(I) - 1, w // 2 - 2 + offset)
    right = (height(I) - 1, w // 2 + 1 + offset)
    return fill(fill(I, 4, initset(left)), 4, initset(right))
 
3.0, 2.927295, def fcebbajacgehejiabgfbeiaafccefica(I):
  indices = asindices(I)
  right = lrcorner(indices)
  left = (right[0], right[1] - 2 - (1 if even(width(I)) else 0))
  return fill(fill(I, 4, initset(left)), 4, initset(right))
 
3.0, 2.622617, def jgdehdhdihdjegijafcgifdcadcaecab(I):
    w = width(I)
    j = w // 2 - 1 if even(w) else w // 2 - 2
    fours = {(4, (height(I) - 1, j)), (4, (height(I) - 1, j + 2))}
    return paint(I, fours) 
 
13.333333333333334, 32.973804, def hijaehahfbideacdaieaddchggfbddgh(I):
  O = canvas(mostcolor(I), shape(I))
  for obj in objects(I, True, False, True):
    O = paint(O, recolor(4, {(height(I)-1, leftmost(toindices(obj))), (height(I)-1, rightmost(toindices(obj)))}))
  return O 
 
3.6666666666666665, 5.5974326, def figcjfabihhfehdjacdifejffcddchad(I):
  objs = objects(I, False, False, True)
  markers = set()
  for obj in objs:
    for i, row in enumerate(I):
      if any(v == color(obj) for v in row):
        min_j = next(j for j, v in enumerate(row) if v == color(obj))
        max_j = len(row) - next(j for j, v in enumerate(row[::-1]) if v == color(obj)) - 1
        markers.update({(i + 2, min_j), (i + 2, max_j)})
        break
  return fill(I, 4, frozenset(markers))
 
1.3333333333333333, 1.3493893, def dbbaddbcbaddejdgiffejdhchhaaeffc(I):
  w = width(I)
  offset = 0 if even(w) else 1
  left = (height(I) - 1, 1 + offset)
  right = (height(I) - 1, w - 2 - offset)
  return fill(fill(I, 4, initset(left)), 4, initset(right))
 
3.0, 2.3889112, def icfaecgeheajeheaiecffdedhcbcacgc(I):
  new_object =  {(4, (0, 1)), (4, (0, -2))}
  v_offset = (height(I) - 1, width(I) // 2)
  shifted_object = shift(new_object, v_offset)
  return paint(I, shifted_object)
 
2.3333333333333335, 1.5873265, def ebjagddacdegebeiacfhiddaaefifcda(I):
  h, w = shape(I)
  center = w // 2
  offset = 1 - (w % 2) 
  loc1 = (h - 1, center - offset)
  loc2 = (h - 1, center + offset)
  return paint(I, recolor(4, initset(loc1) | initset(loc2)))
 
2.3333333333333335, 2.090336, def bfehahcgiddaebhfbajccgcaaddbdfbe(I):
  h, w = shape(I)
  bottom_row = I[h-1]
  modified_row = tuple(4 if j in (1, w-2) else v for j, v in enumerate(bottom_row))
  return I[:h-1] + (modified_row,) 
 
2.3333333333333335, 3.3110886, def febcchdadabbehcfihfhhddejheafdfc(I):
  h, w = shape(I)
  offset =  0 if even(w) else 1 
  return fill(fill(I, 4, initset((h - 1, w // 2 - offset))), 4, initset((h - 1, w // 2 + 1 - offset)))
 
3.0, 3.3404562, def eedddfhcddhbebgfaijaejeffcddbejh(I):
  w = width(I)
  mid = w // 2
  return fill(fill(I, 4, initset((height(I) - 1, mid - (1 if even(w) else 0)))), 4, initset((height(I) - 1, mid + (0 if even(w) else 1))))
 
3.0, 3.24652, def jdfdiidcejbeehahjfgacbfahcdbbafc(I):
  w = width(I)
  target_row = height(I) - 1
  left_col = w // 2 - (w % 2 == 0)
  right_col = left_col + 1 + (w % 2 == 0)
  return fill(fill(I, 4, initset((target_row, left_col))), 4, initset((target_row, right_col)))
 
4.333333333333333, 4.720939, def fbfifagceaebeigdifbajgbfcdcbbchd(I):
  objs = fgpartition(I)
  modified_grid = I
  for obj in objs:
    row = lowermost(obj)
    left_col = leftmost(obj)
    right_col = rightmost(obj)
    modified_grid = fill(modified_grid, 4, {(row, left_col)})
    modified_grid = fill(modified_grid, 4, {(row, right_col)})
  return modified_grid
 
6.666666666666667, 7.4669743, def hcecfdgbcgacedebbdgjbedfddgacedb(I):
  modified_grid = I
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if val != mostcolor(I) and (i == len(I)-1 or I[i+1][j] == mostcolor(I)):
        modified_grid = fill(modified_grid, 4, {(i, j)})
  return modified_grid
 
4.333333333333333, 5.284115, def bidiaghfeiggedbaifcfejgdafjedbge(I):
  objs = objects(I, False, False, True)
  modified_grid = I
  for obj in objs:
    bottom_row = max(i for i, j in toindices(obj))
    leftmost_col = min(j for i, j in toindices(obj) if i == bottom_row)
    rightmost_col = max(j for i, j in toindices(obj) if i == bottom_row)
    modified_grid = fill(modified_grid, 4, {(bottom_row, leftmost_col)})
    modified_grid = fill(modified_grid, 4, {(bottom_row, rightmost_col)})
  return modified_grid
 
3.3333333333333335, 4.971517, def ffdecgidihdieidiieeagcfcddhdgffb(I):
  h = height(I)
  w = width(I)
  bottom_row_indices = frozenset((h-1, j) for j in range(w))
  transformed_row = frozenset((4, (h-2, j)) for j in range(w) if j % 3 == 2)
  O = paint(I, transformed_row)
  return O 
 
4.333333333333333, 5.281365, def jfhddabegcbdefgcicijddjaeddbcfhd(I):
  objs = fgpartition(I)
  output_indices = set()
  for obj in objs:
    bottom_row = max(i for i, j in toindices(obj))
    leftmost_col = min(j for i, j in toindices(obj) if i == bottom_row)
    rightmost_col = max(j for i, j in toindices(obj) if i == bottom_row)
    output_indices.add((bottom_row, leftmost_col))
    output_indices.add((bottom_row, rightmost_col))
  O = fill(I, 4, frozenset(output_indices))
  return O
 
10.0, 27.676525, def bedaecgibdjheebibddegdjjjfdacahf(I):
  objs = fgpartition(I)
  output_grid = canvas(mostcolor(I), shape(I)) 
  for obj in objs:
    bottom_indices = sfilter(toindices(obj), lambda loc: loc[0] == lowermost(obj))
    left_j = leftmost(bottom_indices)
    right_j = rightmost(bottom_indices)
    output_grid = paint(output_grid, {(4, (lowermost(obj), left_j)), (4, (lowermost(obj), right_j))})
  return output_grid
 
5.0, 5.2534385, def ffgedbfdbjbhegfdbfhcbffhccgaccfd(I):
  objs = objects(I, T, T, T)
  output = I
  for obj in objs:
    bottom_row = lowermost(obj)
    leftmost_col = leftmost(obj)
    rightmost_col = rightmost(obj)
    output = fill(output, 4, initset((bottom_row, leftmost_col)))
    output = fill(output, 4, initset((bottom_row, rightmost_col)))
  return output
 
4.333333333333333, 5.6425037, def dhdafbaifffieeabbbabdbdffbbfeege(I):
  output = I
  for c in palette(I) - {mostcolor(I)}:
    obj = toobject(ofcolor(I, c), I)
    bottom_row = lowermost(obj)
    output = fill(output, 4, initset((bottom_row, 0)))
    output = fill(output, 4, initset((bottom_row, len(I[0]) - 1)))
  return output
 
5.0, 6.745592, def dhfgafaaaccaegheaahgbdhaeebabebe(I):
  def get_edge_indices(obj):
    row = lowermost(obj)
    return ((row, 0), (row, len(I[0]) - 1))
  
  fours_indices = merge(apply(get_edge_indices, objects(I, T, T, T)))
  return fill(I, 4, frozenset(fours_indices))
 
8.333333333333334, 10.194511, def fcbbegfbffgiecjbjeiecdbeaabadjfa(I):
    new_row = [(4 if j % 2 == 0 else mostcolor(I)) for j in range(width(I))] # Use list comprehension to create the new row
    O = vconcat(I, (tuple(new_row),)) # Directly concatenate the new row as a tuple
    return O
 
4.333333333333333, 7.587163, def dfeebcacffcbebbjbfghfdebedibefdc(I):
  def get_bottom_row(obj):
    bottom_i = lowermost(obj)
    return frozenset((i, j) for i, j in toindices(obj) if i == bottom_i)

  def mark_edges(row):
    return frozenset({(4, (0, 0)), (4, (0, len(row) - 1))})

  def place_edges(obj):
    bottom_row = get_bottom_row(obj)
    return shift(mark_edges(bottom_row), ulcorner(bottom_row))

  new_edges = mapply(place_edges, fgpartition(I))
  return paint(I, new_edges)
 
3.6666666666666665, 2.752535, def hecffedcebgaefddafhcaaaceacadadd(I):
  return fill(fill(I, 4, initset((height(I) - 1, 0))), 4, initset((height(I) - 1, width(I) - 1)))
 
3.6666666666666665, 4.7930455, def eaeababghbjcebhhbddbidbfbddahcac(I):
  objs = fgpartition(I)
  modified_objs = apply(lambda obj: paint(I, recolor(4, {(lowermost(obj), leftmost(obj)), (lowermost(obj), rightmost(obj))})), objs)
  return last(sorted(modified_objs, key=lambda x: len(objects(x, T, F, F)))) 
 
4.333333333333333, 5.281365, def bhaaeddeieehebdcjecfbagbbafeabba(I):
  def change_row(obj):
    bottom_row = max({i for i, j in toindices(obj)})
    return {(bottom_row, j) for i, j in toindices(obj) if i == bottom_row}
  modified_grid = I
  for obj in fgpartition(I):
    modified_grid = paint(modified_grid, recolor(4, change_row(obj)))
  return modified_grid
 
8.333333333333334, 10.488216, def ijdhgeigcfheebfebbjdjdffffifcchi(I):
  w = width(I) 
  bg = mostcolor(I)
  line =  frozenset({(0, w // 4), (0, 3 * w // 4)})  # Create indices for '4's
  bottom_line = shift(recolor(4, line), (height(I), 0))  # Shift to the bottom row
  O = paint(vconcat(I, canvas(bg, (1, w))), bottom_line)  # Paint on a new row
  return O
 
3.0, 5.292091, def fihbhfbfadcfedajifafbccjbadfajcd(I):
  def endpoints(obj):
    row = lowermost(obj)
    return ((row, minimum({j for i, j in toindices(obj) if i == row})), 
            (row, maximum({j for i, j in toindices(obj) if i == row})))
  return paint(I, recolor(4, merge(apply(compose(initset, endpoints), fgpartition(I)))))
 
3.6666666666666665, 4.7930455, def igfjcjagechdececbdgigchgjeaheffc(I):
  def modify_grid(grid, obj):
    bottom_i = lowermost(obj)
    left_j = leftmost(obj)
    right_j = rightmost(obj)
    grid = fill(grid, 4, {(bottom_i, left_j)})
    return fill(grid, 4, {(bottom_i, right_j)})

  return last(apply(lambda obj: modify_grid(I, obj), fgpartition(I)))
 
4.333333333333333, 4.720939, def cecbjfcabfbbecegbdececddfhbichfc(I):
  def edge_indices(obj):
    bottom_i = lowermost(obj)
    left_j = leftmost(obj)
    right_j = rightmost(obj)
    return frozenset({(bottom_i, left_j), (bottom_i, right_j)})

  modified_indices = merge(apply(edge_indices, fgpartition(I)))
  return paint(I, recolor(4, toobject(modified_indices, I)))
 
2.3333333333333335, 2.0161965, def ejdfjfafdfdfeiabbfigffhgejecageh(I):
  h, w = shape(I)
  offset = 1 - (w % 2)  
  left = (h - 1, 1 + offset)
  right = (h - 1, w - 2 - offset)
  return paint(I, {(4, left), (4, right)})
 
5.666666666666667, 7.697694, def bgcfaifachdbeffebecciiebcgfbcejb(I):
  def bottom_line(obj):
    row = lowermost(obj)
    left = minimum({j for i, j in toindices(obj) if i == row})
    right = maximum({j for i, j in toindices(obj) if i == row})
    return frozenset((row, j) for j in range(left, right + 1))
  return paint(I, recolor(4, merge(apply(bottom_line, fgpartition(I)))))
 
7.0, 12.023011, def cacfebjafdejefibibcdjghaifiadhid(I):
  def bottom_outline(obj):
    bottom_row = lowermost(obj)
    return sfilter(box(obj), lambda x: x[0] == bottom_row)
  return paint(I, recolor(4, merge(apply(bottom_outline, fgpartition(I)))))
 
8.333333333333334, 10.023783, def jeaifbagefabecdijebebfdfaebgedha(I):
  w = width(I)
  bg = mostcolor(I)
  new_row = tuple(bg for _ in range(w))  # Construct new row using a tuple comprehension
  new_grid = tuple(list(row) for row in I) + (list(new_row),) # Create a mutable copy of the grid
  new_grid[-1][w // 2 - 1] = 4  # Modify the grid directly
  new_grid[-1][w // 2 + 1] = 4 
  return tuple(tuple(row) for row in new_grid)  # Convert back to immutable tuples
 
2.3333333333333335, 2.5856855, def ieebchhcbdicecgbjecafdjfhhgbedee(I):
  w = width(I)
  return fill(fill(I, 4, initset((height(I)-1, 1))), 4, initset((height(I)-1, w-2)) if even(w) else frozenset())
 
3.6666666666666665, 4.713319, def ieddjbgaacjhefdhbjfbbcbfchaaaefd(I):
  def add_bottom_fours(grid, obj):
    bottom_left = (lowermost(obj) + 1, leftmost(obj))
    bottom_right = (lowermost(obj) + 1, rightmost(obj))
    return paint(grid, recolor(4, {bottom_left, bottom_right}))
  return last(sorted(apply(lambda obj: add_bottom_fours(I, obj), fgpartition(I)), key=lambda x: len(objects(x, T, F, F))))
 
4.333333333333333, 5.252318, def jebabeedfcfeeaicabihcbggjjeccbeg(I):
  new_cells = set()
  for obj in fgpartition(I):
    row = lowermost(obj)
    left = leftmost(obj)
    right = rightmost(obj)
    new_cells.add((row + 1, left))
    new_cells.add((row + 1, right))
  return fill(I, 4, frozenset(new_cells))
 
3.6666666666666665, 2.5190375, def befdeicieidaefaabegfbaecceadegde(I):
    h = height(I) - 1
    w = width(I)
    mid = w // 2
    left = (h, max(0, mid - 3))
    right = (h, min(w - 1, mid + 3))
    return fill(fill(I, 4, initset(left)), 4, initset(right)) 
 
0.0, 0.0, def cefecceaabhcefcfbabjehdfagadfigg(I):
  objs = objects(I, True, False, True)
  target_row = height(I)-1
  left_obj = min(objs, key=lambda obj: leftmost(obj))
  right_obj = max(objs, key=lambda obj: rightmost(obj))
  left_pos = (target_row, leftmost(left_obj) + width(left_obj) // 2)
  right_pos = (target_row, rightmost(right_obj) - width(right_obj) // 2)
  return fill(fill(I, 4, initset(left_pos)), 4, initset(right_pos))
 
2.3333333333333335, 2.434103, def fgejdddbfhfhefbaaebbebfdcacjgffc(I):
  w = width(I)
  h = height(I)
  O = I
  for i in range(w):
    if i == w // 3 or i == 2 * w // 3:
      O = fill(O, 4, initset((h - 1, i)))
  return O
 
2.0, 3.0998163, def ccaedbacfbibecgibfejfefbjhcficfa(I):
  indices = asindices(I)
  w = width(I)
  mid = w // 2
  target_indices = frozenset({(height(I) - 1, mid), (height(I) - 1, mid + (0 if even(w) else -1))})
  return fill(I, 4, target_indices)
 
11.333333333333334, 26.544191, def gajefdbheabeebejidbeaacafeecihga(I):
  obj = asobject(I)
  center_i, _ = centerofmass(obj)
  target_j = width(I) // 2 - (1 if even(width(I)) else 0)
  target_indices = frozenset({(center_i, target_j), (center_i, target_j + 1)})
  return paint(cover(I, obj), recolor(4, target_indices))
 
2.3333333333333335, 4.8286796, def bhabddbbgghjehiabfcgbfccahjdecbj(I):
  new_grid = I
  for obj in fgpartition(I):
    bottom = lowermost(obj) + 1
    center = (leftmost(obj) + rightmost(obj)) // 2
    new_grid = fill(new_grid, 4, frozenset({(bottom, center)}))
  return new_grid
 
1.6666666666666667, 1.654443, def dicjccedfeadeddabiccbbhdgddbehdh(I):
  w = width(I)
  bg = mostcolor(I)
  marker_positions = ((len(I) - 1, w // 2 - 2), (len(I) - 1, w // 2 + 2))
  return paint(fill(I, bg, {(len(I) - 1, j) for j in range(w)}), recolor(4, marker_positions)) 
 
4.333333333333333, 4.77838, def dbdcafehedbeejgcbcddeffddceibdfc(I):
  w = width(I)
  bg = mostcolor(I)
  marker_left = ((len(I) - 1, 0), (len(I) - 1, 1))
  marker_right = ((len(I) - 1, w - 2), (len(I) - 1, w - 1))
  return paint(paint(fill(I, bg, {(len(I) - 1, j) for j in range(w)}), recolor(4, marker_left)), recolor(4, marker_right))
 
2.6666666666666665, 3.218549, def hechdeeaeiabejdaicjdaghjieeefbdf(I):
  w = width(I)
  bg = mostcolor(I)
  marker = ((4, (0, 0)), (4, (0, 1)))
  offset = (len(I) - 1, w // 2 - 3)
  return paint(fill(I, bg, {(len(I) - 1, j) for j in range(w)}), shift(marker, offset))
 
6.666666666666667, 8.978829, def eghjgacfhehbeabfjbedbebdiacbahed(I):
  objs = objects(I, True, False, True)
  h = height(I)
  w = width(I)
  left_obj = min(objs, key=lambda obj: leftmost(obj))
  right_obj = max(objs, key=lambda obj: rightmost(obj))
  left_pos = (h - 1, leftmost(left_obj) + width(left_obj) // 2)
  right_pos = (h - 1, rightmost(right_obj) - width(right_obj) // 2)
  grid = canvas(0, (h + 1, w))
  grid = paint(grid, asobject(I))
  grid = paint(grid, recolor(4, initset(left_pos))) 
  grid = paint(grid, recolor(4, initset(right_pos)))
  return grid
 
3.0, 2.1965725, def bjdhefahcddceibcaadeaajadefacdgh(I):
  w = width(I)
  bg = mostcolor(I)
  offset = 1 if even(w) else 0
  left_marker = (len(I)-1, w // 2 - 2 - offset)
  right_marker = (len(I)-1, w // 2 + 2 + offset)
  return fill(fill(I, 4, {left_marker}), 4, {right_marker})
 
3.0, 5.823928, def bdfibedfggehecdebahddbggedddjfeb(I):
  w = width(I)
  bg = mostcolor(I)
  mid = w // 2
  markers = {(len(I)-1, j) for j in range(mid - 2, mid + 3) if j != mid}
  return paint(I, recolor(4, markers)) 
 
8.333333333333334, 12.909772, def hdecfhbcggdeecbhjaeiabbicdffifdf(I):
    new_I = vconcat(I, ((0,) * width(I),))
    for o in objects(I, True, False, True):
      if leftmost(o) == 0:
        new_I = fill(new_I, 4, initset((height(I), width(o) // 2)))
      if rightmost(o) == width(I)-1:
        new_I = fill(new_I, 4, initset((height(I), width(I) - width(o) // 2 - 1)))
    return new_I 
 
8.333333333333334, 10.514382, def eadgidadfabaeffgbeeabfeafehfafgc(I):
  new_I = [list(row) for row in I]  # Convert to list of lists for easier modification
  objs = objects(I, True, False, True)
  left_obj = min(objs, key=lambda o: leftmost(o))
  right_obj = max(objs, key=lambda o: rightmost(o))
  new_I.append([0] * width(I))  # Add a new row at the bottom
  new_I[-1][leftmost(left_obj) + width(left_obj) // 2] = 4 # Place left '4'
  new_I[-1][rightmost(right_obj) - width(right_obj) // 2] = 4 # Place right '4'
  return tuple(tuple(row) for row in new_I)  # Convert back to tuple of tuples 
 
3.6666666666666665, 5.3481083, def abdgibaghegdehddabidffcifbhifhbf(I):
  def modify_grid(grid, obj):
    bottom_row = frozenset((i, j) for v, (i, j) in obj if i == lowermost(obj))
    return fill(fill(grid, 4, {(lowermost(obj), min(j for i, j in bottom_row))}), 
                4, {(lowermost(obj), max(j for i, j in bottom_row))})
  
  return last(apply(lambda obj: modify_grid(I, obj), fgpartition(I))) 
 
3.0, 2.3911884, def gbefgifadgaiedgdbibfhhhhfdeadaee(I):
  w = width(I)
  offset = 0 if even(w) else 1
  return fill(fill(I, 4, initset((height(I) - 1, offset))), 4, initset((height(I) - 1, w - 1 - offset))) 
 
3.0, 2.2405064, def ceaabgdjaaafehgdbahcjhhjhaebdbee(I):
  return fill(fill(I, 4, initset((height(I) - 1, 1 - (width(I) % 2)))), 4, initset((height(I) - 1, width(I) - 2 + (width(I) % 2))))
 
3.0, 3.3404562, def iefdbbdaccbdeigbibhjbbaihcbcdccg(I):
  w = width(I)
  left = (height(I) - 1, (w // 2) - (1 - (w % 2))) 
  right = (height(I) - 1, (w // 2) + (w % 2))
  return fill(fill(I, 4, initset(left)), 4, initset(right))
 
2.6666666666666665, 4.8988247, def jaecifgfbacaeefcijjfcbbabjfaghff(I):
  h = height(I)
  return fill(I, 4, {(h - 1, j) for j in range(width(I)) if even(j)}) 
 
0.6666666666666666, 1.0907323, def dbjdejbeebcbedhdaafdebdefcbcdgeg(I):
  return paint(I, recolor(4, {(height(I) - 1, j) for j in range(2, width(I), 4)}))
 
3.0, 2.3889112, def ieheifdcdjihejdeaehfaihbfbeieiee(I):
    return paint(I, recolor(4, {(height(I) - 1, width(I) // 2 - 2), (height(I) - 1, width(I) // 2 + 1)}))
 
2.3333333333333335, 1.5873265, def jjhcbacfgjceecbcjabadcebfdcjdhfj(I):
  h, w = shape(I)
  return fill(I, 4, frozenset({(h - 1, w // 2 - (1 if even(w) else 0)), (h - 1, w // 2 + (1 if even(w) else 0))}))
 
2.3333333333333335, 1.8079519, def abacaeeeafebeiceiacdiacgcjdedaca(I):
  indices = asindices(I)
  bottom_row = frozenset(sfilter(indices, lambda loc: loc[0] == height(I) - 1))
  middle = halve(width(I))
  left_fill = frozenset({(height(I) - 1, middle - 1)}) if even(width(I)) else frozenset()
  right_fill = frozenset({(height(I) - 1, middle)})
  return fill(I, 4, left_fill | right_fill)
 
3.0, 3.3404562, def cacdjhfbcchheahficcaeaefijbfcfbh(I):
  return fill(I, 4, frozenset({(height(I) - 1, (width(I) // 2) + i - (1 if even(width(I)) else 0)) for i in range(2)}))
 
4.333333333333333, 5.252318, def jjdebgecadcieedgjfadcaifjfccfade(I):
    objs = fgpartition(I)
    fours = set()
    for obj in objs:
        bottom_row = lowermost(obj)
        leftmost_col = leftmost(obj)
        rightmost_col = rightmost(obj)
        fours.add((bottom_row + 1, leftmost_col))
        fours.add((bottom_row + 1, rightmost_col))
    O = fill(I, 4, frozenset(fours))
    return O
 
4.333333333333333, 3.572683, def jihdcghhdjibebdcbfcfaecbjfdaehfa(I):
  # Find the indices of the topmost and bottommost occurrences of each color
  top_indices = lambda c: min((i, j) for i, row in enumerate(I) for j, v in enumerate(row) if v == c) if colorcount(I, c) > 0 else None
  bottom_indices = lambda c: max((i, j) for i, row in enumerate(I) for j, v in enumerate(row) if v == c) if colorcount(I, c) > 0 else None
  
  # Determine the target indices for the '4's based on the positions of other colors
  target_indices = frozenset()
  for color in palette(I) - {0}:
    top_index = top_indices(color)
    bottom_index = bottom_indices(color)
    if top_index is not None and bottom_index is not None:
      target_indices = target_indices | {(len(I)-1, top_index[1]), (len(I)-1, bottom_index[1])}

  # Fill the target indices with '4's
  O = fill(I, 4, target_indices)
  return O 
 
3.6666666666666665, 2.4530451, def abeaagejcffaeiadihcbcfcebdcahbhe(I):
  # Find the bounding box of all non-background colors
  non_bg_indices = frozenset((i, j) for i, row in enumerate(I) for j, v in enumerate(row) if v != 0)
  min_row, min_col = ulcorner(non_bg_indices)
  max_row, max_col = lrcorner(non_bg_indices)
  
  # Calculate target indices for the '4's
  target_indices = {(len(I)-1, min_col), (len(I)-1, max_col)}
  
  # Fill the target indices with '4's
  O = fill(I, 4, target_indices)
  return O
 
3.6666666666666665, 2.40949, def cadfbcadebcbeeaeibefehjdbbbffjec(I):
  # Transpose the grid
  transposed = dmirror(I)
  
  # Find the leftmost and rightmost non-background colors in the transposed grid
  leftmost_index = next((j, i) for j, row in enumerate(transposed) for i, v in enumerate(row) if v != 0)
  rightmost_index = next((j, i) for j, row in enumerate(transposed[::-1]) for i, v in enumerate(row) if v != 0)
  rightmost_index = (rightmost_index[0], len(transposed)-1 - rightmost_index[1])

  # Calculate target indices for the '4's in the original grid
  target_indices = {(len(I)-1, leftmost_index[1]), (len(I)-1, rightmost_index[1])}
  
  # Fill the target indices with '4's
  O = fill(I, 4, target_indices)
  return O
 
3.3333333333333335, 6.2402263, def dafffifedbabedaejeeidjgeajajhbca(I):
  # Create a set of all column indices with at least one non-background color
  non_bg_cols = frozenset(j for j in range(len(I[0])) if any(row[j] != 0 for row in I))

  # Calculate target indices for the '4's
  target_indices = {(len(I)-1, j) for j in non_bg_cols}

  # Fill the target indices with '4's
  O = fill(I, 4, target_indices)
  return O
 
2.0, 2.164695, def fhbceibeeahaeecebagfdbddebbficef(I):
  h = height(I)
  objs = objects(I, True, False, True)
  left_edge = min(leftmost(obj) for obj in objs)
  right_edge = max(rightmost(obj) for obj in objs)
  I = fill(I, 4, initset((h - 1, left_edge + (right_edge - left_edge) // 2)))
  return I
 
3.0, 2.6538346, def aigebdgihggeeehbbdccggfdchegajeg(I):
  w = width(I)
  offset =  (w % 2) * -1 
  return fill(fill(I, 4, {(height(I)-1, halve(w) - 1 + offset)}), 4, {(height(I)-1, halve(w) + offset)})
 
8.333333333333334, 10.194511, def bbcceefjbeaaehfcbcjebedhedhfhbbd(I):
    w = width(I)
    new_row = tuple(4 if i % 2 == 0 else 0 for i in range(w))
    O = vconcat(I, (new_row,))
    return O
 
9.0, 13.096895, def behcdeadfcededeajdccfehbhcdadjdj(I):
    line = shoot((0, len(I)), RIGHT)
    painted_line = recolor(4, line)
    underpainted = underpaint(I, painted_line)
    O = vconcat(underpainted, (tuple(0 for _ in range(width(I))),))
    return O
 
6.333333333333333, 10.262987, def adajfidefhaeeebbbbigaefdadededge(I):
    return apply(lambda row: row[:-1] + (4,) if any(c != 0 for c in row[:-1]) else row, I[:-1]) + (tuple(4 if any(I[i][j] != 0 for i in range(height(I)-1)) else 0 for j in range(width(I))),)
 
11.666666666666666, 29.44332, def gfabbfbacjhaehecadeagedfefiaacif(I):
    h = height(I)
    w = width(I)
    output = canvas(0, (h, w))
    for j in range(w):
        for i in range(h-1):
            if I[i][j] != 0:
                output = fill(output, 4, initset((h-1, j)))
                break
    return output
 
1.6666666666666667, 3.083607, def fbbgcfcaaaefecgfibgabahbigjhceca(I):
  w = width(I)
  offset = 1 - w % 2  # Offset is 1 for even widths, 0 for odd widths
  marker_positions = {(height(I) - 1, w // 2 - 1 - offset), (height(I) - 1, w // 2 + offset)}
  return paint(I, recolor(4, marker_positions))
 
3.6666666666666665, 2.5190375, def hbefcadhcjbbedfebadbdbeafjjcghhc(I):
  w = width(I)
  return paint(I, recolor(4, {(height(I) - 1, w // 2 + i * (w // 2 - (w + 1) % 2)) for i in (-1, 1)}))
 
2.3333333333333335, 3.2896163, def aaadhhiijafeefebjedghjbddgbfieaf(I):
  h = height(I)
  w = width(I)
  return paint(I, recolor(4, {(h - 1, (w - 1) // 2 - (1 - w % 2)), (h - 1, (w + 1) // 2 + (1 - w % 2))}))
 
2.6666666666666665, 2.325709, def fggdbbjfjicheeieichfffcafejbidjg(I):
  return paint(I, recolor(4, {(height(I) - 1, width(I) // 2 + i * (width(I) // 2 -  int(not even(width(I))))) for i in (1, -1)}))
 
2.0, 3.0998163, def edhaicjdhebbehicafdjfaageaeadeea(I):
  return fill(I, 4, frozenset({(height(I) - 1, halve(width(I)) + (0 if even(width(I)) else -1)), 
                              (height(I) - 1, halve(width(I)))})) 
 
5.0, 8.472659, def adfbdfjahcefejbaiceejdhjfiedgddb(I):
  return paint(I, frozenset((4, (len(I) - 1, j)) for j, v in enumerate(I[-1]) if v != mostcommon(I)))
 
3.3333333333333335, 7.4947386, def abbcjhhaegjbeabjaacebfbjcejddaeb(I):
  """
  Finds the bounding box of each object and marks the center of the bottom edge. 
  """
  out = I
  for obj in objects(I, True, False, True):
      bottom_center = (lowermost(obj), leftmost(obj) + (width(obj) - 1) // 2)
      out = fill(out, 4, initset(bottom_center))
  return out
 
3.0, 2.22452, def gafcfdacfiiaecfebdjcebhccfdcjaai(I):
  return paint(I, recolor(4, {(height(I) - 1, j) for j in range(1, width(I), 2 if width(I) < 6 else 4)}))
 
4.0, 3.970642, def fbccafhdcbddecgbaefeeebdgfbhffdc(I):
  h, w = shape(I)
  locs = frozenset({(h-1, 2*i + 1) for i in range(w // 2)})
  return fill(I, 4, frozenset((i, j) for i, j in locs if index(I, (i,j)) == 0))
 
43.666666666666664, 94.116974, def fhdbabaddgfbeibdbhaccedcbgbecjje(I):
  w = width(I)
  return hconcat(lefthalf(I), hconcat(canvas(0, (height(I), 1)), hconcat(righthalf(I), canvas(4, (1, 1))))) if even(w) else \
         hconcat(lefthalf(I), hconcat(canvas(0, (height(I), 1)), hconcat(righthalf(I), canvas(0, (1, 1))))) 
 
8.333333333333334, 6.6334114, def adcdbcfbaeadegdfbhbcahedbbcecdch(I):
    return paint(I, recolor(4, difference(asindices(crop(I, (len(I)-1, 0), (1, len(I[0])))), ofcolor(I, mostcommon(I)))))
 
8.333333333333334, 10.499883, def cjbfdfdebeccegedifbjfbbfjbdajaij(I):
  return vconcat(I, (tuple(4 if j % 2 else 0 for j in range(width(I))),))
 
2.0, 2.3250437, def ecaeadbffdfcegecajifbeaebefbaagf(I):
  step = 2 if width(I) < 6 else 4
  return paint(I, recolor(4, {(height(I) - 1, j) for j in range(step, width(I) - 1, step)}))
 
14.333333333333334, 23.970749, def hacgedbeafibegbbaaeejadagebifgha(I):
  for i in range(height(I) - 2):
    for j in range(width(I)):
      if index(I, (i,j)) != mostcommon(I) and size(objects(crop(I, (i,j), (2, 1)), True, False, True)) == 1:
        I = fill(I, 4, {(i + 2, j)})
  return I
 
42.0, 94.568115, def faedbbbjhcdbeecdbdcddbgjegfbdbgh(I):
  top, bottom = hsplit(I, len(I) - 1)[0], hsplit(I, len(I) - 1)[1]
  return vconcat(top, tuple((tuple(4 if c != mostcommon(I) else c for c in bottom[0]),))) 
 
3.0, 2.4866, def hahfabdbbfijeacajjcieacdaifagccg(I):
  mid = width(I) // 2 
  return paint(I, recolor(4, {(height(I) - 1, mid - 1), (height(I) - 1, mid + (width(I) % 2))}))
 
2.3333333333333335, 3.3110886, def jfdagbcdeigbedagijdjaefcbdecdfjh(I):
  j = width(I) // 2 + (1 if even(width(I)) else 0)
  return paint(I, recolor(4, {(height(I)-1, j-1),(height(I)-1, j)}))
 
2.3333333333333335, 2.8994083, def cdbfcdbeeagbeiicigbcgejcdaabdbdi(I):
  offset = 1 if even(width(I)) else 0 
  left_index = (height(I) - 1, width(I) // 2 - 1)
  right_index = (left_index[0], left_index[1] + 1 + offset) 
  return paint(I, recolor(4, {left_index, right_index})) 
 
1.6666666666666667, 2.329262, def dgbeabdbajbieebdabgbafiejcaibdad(I):
  return fill(I, 4, frozenset({(height(I) - 1, width(I) // 2 + i * (width(I) // 4)) for i in (-1, 1)}))
 
3.0, 2.1965725, def dbaifhcadjaiecdfideheaaajjficfea(I):
    center_x = width(I) // 2
    offset = 1 if even(width(I)) else 0
    indices = {(height(I) - 1, center_x - 2 - offset), (height(I) - 1, center_x + 2 + offset)}
    return fill(I, 4, frozenset(indices))
 
1.6666666666666667, 3.8245556, def fhiaiedifcciebgdjfafgfbiacddfgcd(I):
  return paint(I, frozenset({(4, (height(I) - 1, width(I) // 2 - 2 -(width(I) % 2))), (4, (height(I) - 1, width(I) // 2 + 2 + (width(I) % 2)))}))
 
2.3333333333333335, 2.0964854, def becddfecfbaaeffbagjaeagiiggcbdae(I):
  mid = width(I) // 2
  return fill(fill(I, 4, {(height(I) - 1, mid - 2 - (mid % 2))}), 4, {(height(I) - 1, mid + 2 + (mid % 2))}) 
 
7.666666666666667, 7.7836876, def eccdeacjafcfebificbiajdfdadegjdh(I):
  return tuple(tuple(4 if j == len(I[0])-1 and I[i][j] != mostcommon(I) else I[i][j] for j in range(len(I[0]))) for i in range(len(I)))
 
3.6666666666666665, 2.752535, def gcgeehcegdabeejeifadccebfdfbhicd(I):
    left_j = next((j for j in range(width(I)) if I[-1][j] != 0), 0) 
    right_j = width(I) - next((j for j in range(width(I) - 1, -1, -1) if I[-1][j] != 0), 0) - 1
    return fill(fill(I, 4, {(len(I) - 1, left_j)}), 4, {(len(I) - 1, right_j)})
 
3.0, 2.095641, def jafabghagjdeeecbadgjbhefdfceagbe(I):
  transposed = dmirror(I) # Transpose the grid
  for j, row in enumerate(transposed):
    for i, v in enumerate(row):
      if v != 0:
        left_j = i
        break
    else:
      continue
    break

  for j, row in enumerate(transposed[::-1]):
    for i, v in enumerate(row):
      if v != 0:
        right_j = len(transposed[0]) - i - 1
        break
    else:
      continue
    break
  
  return fill(fill(I, 4, {(len(I) - 1, left_j)}), 4, {(len(I) - 1, right_j)})
 
0.6666666666666666, 2.1920764, def dabdgbjdbbbdecfebecaabeieiaeebjd(I):
  target_row = height(I) - 1
  def place_marker(obj):
    center_col = leftmost(obj) + (width(obj) - 1) // 2
    return fill(I, 4, initset((target_row, center_col)))
  return last(apply(place_marker, objects(I, True, False, True)))
 
1.6666666666666667, 1.9951285, def abdajedihabdegbhbbagfdgfcebhaeic(I):
  w = width(I)
  bg = mostcolor(I)
  if w > 5:
    marker_positions = ((height(I) - 1, w // 2 - 2), (height(I) - 1, w // 2 + 2))
  else:
    marker_positions = ((height(I) - 1, 1), (height(I) - 1, w - 2))
  return paint(fill(I, bg, {(height(I) - 1, j) for j in range(w)}), recolor(4, marker_positions))
 
3.6666666666666665, 2.4038312, def dbchcibadcbgedagbcfgdfcffcgjcagf(I):
  h = height(I) - 1
  w = width(I)
  mid = w // 2
  return fill(fill(I, 4, initset((h, mid - 1 - (w % 2))) ), 4, initset((h, mid + (w % 2))))
 
1.6666666666666667, 1.4547651, def jgcedgijfidaedacbccdhaabjfeaafbb(I):
  h = height(I) - 1
  w = width(I)
  return branch(
    even(w),
    fill(fill(I, 4, initset((h, w // 2 - 2))), 4, initset((h, w // 2 + 1))),
    fill(I, 4, initset((h, w // 2)))
  )
 
8.333333333333334, 10.198324, def jhdadbbhfghiehgfaeeeheddghddcaje(I):
  O = I + (tuple(4 if any(I[i][j] != 0 for i in range(len(I))) else 0 for j in range(len(I[0]))),)
  return O
 
8.333333333333334, 10.822385, def diejfhcbfcigebhfjcebiadcaabfiahg(I):
  leftmost = next((j for j in range(len(I[0])) if any(I[i][j] != 0 for i in range(len(I)))), None)
  rightmost = next((len(I[0]) - 1 - j for j in range(len(I[0])-1, -1, -1) if any(I[i][j] != 0 for i in range(len(I)))), None)
  bottom_row = tuple(4 if j in (leftmost, rightmost) else 0 for j in range(len(I[0])))
  O = I + (bottom_row,)
  return O
 
7.666666666666667, 6.474306, def edfdbfceddfaeabaigebbccibafjbcff(I):
  transposed = rot90(I)
  leftmost = next((i for i, col in enumerate(transposed) if any(v != 0 for v in col)), None)
  rightmost = next((len(transposed) - 1 - i for i, col in enumerate(transposed[::-1]) if any(v != 0 for v in col)), None)
  new_row = tuple(4 if i in (leftmost, rightmost) else 0 for i in range(len(transposed)))
  O = rot270(transposed + (new_row,))
  return O
 
8.333333333333334, 10.317626, def edfbbcfbijjfehdajijfcehdhebbccjg(I):
  non_bg_cols = {j for i, row in enumerate(I) for j, v in enumerate(row) if v != 0}
  O = I + (tuple(4 if j in {min(non_bg_cols), max(non_bg_cols)} else 0 for j in range(len(I[0]))),)
  return O
 
3.0, 2.0846422, def cchfdebcafededfcbadcejfdahaeehab(I):
  if even(width(I)):
    return paint(I, recolor(4, {(height(I) - 1, j) for j in range(1, width(I), 2)}))
  else:
    return paint(I, recolor(4, {(height(I) - 1, width(I) // 2)}))
 
4.0, 3.970642, def ddjibahfhefaeeffifceccidicadeacf(I):
  return paint(I, recolor(4, {(height(I) - 1, j) for j in range(width(I)) if j % 2 == 1}))
 
2.3333333333333335, 1.960484, def dfccifiiejiheedebbacbecaddeijdej(I):
  h = height(I)
  w = width(I)
  if even(w):
    left = paint(canvas(mostcolor(I), (1, w // 2)), recolor(4, {(0, 1)}))
    right = paint(canvas(mostcolor(I), (1, w // 2)), recolor(4, {(0, w // 2 - 1)}))
    return vconcat(I[:h-1], hconcat(left, right))
  else:
    return paint(I, recolor(4, {(h - 1, w // 2)}))
 
3.0, 2.5546708, def ejhijbdachdcehddadacfjcbgefdcega(I):
  h, w = shape(I)
  return fill(I, 4, frozenset({(h - 1, max(0, w // 2 - 1)), (h - 1, min(w - 1, w // 2 + 1))}))
 
2.3333333333333335, 2.3754926, def bcacihdbeageeebbbfceadjjcdheddjc(I):
  return paint(I, recolor(4, frozenset({(height(I) - 1, width(I) // 2 - 1 + i) for i in range(2 - width(I) % 2)})))
 
3.6666666666666665, 2.5051022, def bcccdgccegffecfeibhjbhchabicbafh(I):
  objs = objects(I, univalued=False, diagonal=False, without_bg=True) # Get all objects on the grid
  target_row = height(I) - 1 # Get the target row index
  left_obj = argmin(objs, lambda obj: leftmost(obj) if uppermost(obj) == target_row else float('inf'))  # Find the leftmost object touching the target row
  right_obj = argmax(objs, lambda obj: rightmost(obj) if uppermost(obj) == target_row else float('-inf'))  # Find the rightmost object touching the target row
  left_j = leftmost(left_obj) if left_obj else None  # Get the leftmost column of the leftmost object
  right_j = rightmost(right_obj) if right_obj else None # Get the rightmost column of the rightmost object
  return fill(fill(I, 4, {(target_row, left_j)} if left_j is not None else I), 4, {(target_row, right_j)} if right_j is not None else I)  # Fill the target locations with 4
 
2.3333333333333335, 1.8079519, def hfcdfdaeejdceafgbcdibfbebacbeiea(I):
  w = width(I)
  bg = mostcolor(I)
  return vconcat(I[:height(I)-1], (tuple(bg if j != w // 2 and j != w // 2 - (1 - w % 2) else 4 for j in range(w)),))
 
3.0, 3.3404562, def cffadcebcejeefebbdghadhbcbeccbcb(I):
  h = height(I)
  w = width(I)
  return paint(fill(I, mostcolor(I), {(h - 1, j) for j in range(w)}), recolor(4, {(h-1, w // 2 - (1 - w % 2)), (h-1, w // 2 + (w % 2))}))
 
1.6666666666666667, 1.7821007, def jcifccdaffabebebjfaedcchjbdccade(I):
  w = width(I)
  return paint(I, recolor(4, {(height(I) - 1, (w - 1) // 2 - (w % 2 == 0)), (height(I) - 1, (w - 1) // 2 + (w % 2 == 0))}))
 
2.3333333333333335, 3.116736, def acibfcifdefjeeaaiicfbcbadeggfbgf(I):
    return fill(I, 4, {(height(I)-1, width(I)//2 - 1 + (width(I)+1)%2), (height(I)-1, width(I)//2 - (width(I)+1)%2)})
 
3.0, 2.3889112, def jbfcdbcfgcchedhciiabhddhbafeffbd(I):
  return fill(I, 
              4, 
              frozenset({(height(I) - 1, width(I) // 2 - 2), (height(I) - 1, width(I) // 2 + 1)}))
 
3.0, 2.2298846, def gadfdccdbfcbebbbbbeifabbcajecjea(I):
  middle = width(I) // 2
  offset = 1 if even(width(I)) else 0
  return fill(I, 4, frozenset({(height(I) - 1, middle - 2 - offset), 
                              (height(I) - 1, middle + 1 + offset)})) 
 
1.3333333333333333, 1.4163136, def gcggbeccjecceedfifgejiddcbhjgbdd(I):
  indices = asindices(I)
  bottom_row = sfilter(indices, lambda loc: loc[0] == height(I) - 1)
  left_index =  (height(I) - 1, min(bottom_row, key=lambda x: x[1])[1] + 2)
  right_index =  (height(I) - 1, max(bottom_row, key=lambda x: x[1])[1] - 2)
  return fill(I, 4, frozenset({left_index, right_index})) 
 
