1.6666666666666667, 3.668868, def baddbdeicbagehdabefajddebaadbdgf(I):
    # Find the leftmost object
    obj = first(objects(I, True, False, True))
  
    # Get object's color and leftmost column
    color = first(obj)[0]
    left_j = leftmost(obj)

    # Fill downwards from each object cell
    new_grid = I
    for i in range(height(I)):
        if (i, left_j) in toindices(obj):
            for k in range(i + 1, height(I)):
                new_grid = fill(new_grid, color, {(k, left_j)})
    
    O = new_grid
    return O
 
3.3333333333333335, 4.178605, def eebhcjbiddedeehfifccdahbcifbijfa(I):
    # Find all objects 
    objs = objects(I, True, False, True)
  
    # Find the leftmost object by comparing leftmost column indices
    leftmost_obj = argmin(objs, leftmost)
    target_color = color(leftmost_obj)
    leftmost_j = leftmost(leftmost_obj)

    # Create a vertical line covering the grid's height at the object's column
    fill_line = frozenset({(i, leftmost_j) for i in range(height(I))})

    # Fill the grid with the object's color at the fill line's indices
    O = fill(I, target_color, fill_line)
    return O
 
3.3333333333333335, 8.526435, def idhejfchbebcejafbibheeeiceaecbca(I):
    # Find the leftmost non-background color
    j = 0
    while index(I, (0, j)) == mostcommon(I): 
        j += 1
    target_color = index(I, (0, j))

    # Create a full-height vertical line at that column
    fill_line = frozenset((i, j) for i in range(height(I)))

    # Fill the line with the target color
    O = fill(I, target_color, fill_line)
    return O
 
1.6666666666666667, 3.668868, def efihegajibghegceibfhdfceffidbcbb(I):
    # 1. Identify objects (excluding background)
    objs = objects(I, False, False, True)
    # 2. Find the largest object by size
    largest_obj = argmax(objs, size)
    # 3. Get the color of the largest object
    fill_color = color(largest_obj)
    # 4. Create a patch extending downwards from the object
    fill_patch = frozenset((i, j) for i in range(lowermost(largest_obj), len(I)) for j in range(leftmost(largest_obj), rightmost(largest_obj) + 1))
    # 5. Fill the patch with the object's color
    O = fill(I, fill_color, fill_patch)
    return O
 
2.3333333333333335, 3.9579356, def bchedeceebcdeefijahfabfbeidggbea(I):
    # 1. Get objects sorted by height (descending)
    objs = sorted(objects(I, False, False, True), key=height, reverse=True)
    # 2. Get the color of the first (tallest) object
    fill_color = color(objs[0]) 
    # 3. Create a patch covering the entire area below the tallest object
    fill_patch = frozenset((i, j) for i in range(lowermost(objs[0]) + 1, len(I)) for j in range(len(I[0])))
    # 4. Underfill the patch (only fill background cells)
    O = underfill(I, fill_color, fill_patch)
    return O
 
2.6666666666666665, 4.889157, def dedadcbdiebheadejcghceafgebcbeie(I):
  # 1. Partition the grid into foreground objects 
  objs = fgpartition(I)
  # 2. Find the object with the lowest bottom edge
  lowest_obj = max(objs, key=lowermost)
  # 3. Get the color of that object
  fill_color = color(lowest_obj)
  # 4. Fill downwards from the lowest object for each column
  O = tuple(
      tuple(fill_color if i >= lowermost(lowest_obj) and any(j == col for _, (row, col) in lowest_obj) else v for j, v in enumerate(r)) 
      for i, r in enumerate(I)
  )
  return O
 
4.0, 7.3117294, def abbgdbdfbhdfegabighcicgehcjhibjj(I):
    # 1. Identify objects in the grid
    objs = objects(I, False, False, True)
    # 2. Initialize a flag to track if an object's column is being filled
    filling = False
    # 3. Iterate through each cell in the grid
    O = list(list(row) for row in I)
    for j in range(len(I[0])):
        for i in range(len(I)):
            for obj in objs:
                if (i, j) in toindices(obj):
                    filling = True  # Start filling beneath the object
                    break
            if filling:
                if O[i][j] == mostcolor(I):
                    O[i][j] = color(obj) 
            else:
                if (i, j) in toindices(obj):
                    filling = True 
    return tuple(tuple(row) for row in O)
 
4.333333333333333, 12.979334, def gefbffehbaccedeajdcbbfdahafijaad(I):
  # 1. Get the color of the bottom-right cell.
  x1 = I[len(I)-1][len(I[0])-1]
  # 2. Create a patch for the bottom row.
  x2 = astuple(len(I)-1, 0)
  x3 = astuple(len(I)-1, len(I[0]))
  x4 = connect(x2, x3)
  # 5. Create a patch for the rightmost column.
  x5 = astuple(0, len(I[0])-1)
  x6 = astuple(len(I), len(I[0])-1)
  x7 = connect(x5, x6)
  # 6. Combine the two patches.
  x8 = combine(x4, x7)
  # 7. Fill the combined patch with the extracted color.
  O = fill(I, x1, x8)
  return O
 
3.3333333333333335, 4.026809, def ebhafffeeagaebgjaecfccdjabecbfeg(I):
  target_color = I[1][1]
  bottom_half_indices = {(i, j) for i in range(len(I) // 2 + len(I) % 2, len(I)) for j in range(len(I[0]))}
  fill_indices = bottom_half_indices - ofcolor(I, target_color)
  O = fill(I, target_color, fill_indices)
  return O
 
2.0, 3.7579172, def efcagddbgjfdeigdafddcaficfeecebb(I):
  # Identify the leftmost object using its color
  obj = first(objects(I, True, False, True))
  color = first(obj)[0]

  # Create a vertical line spanning the grid's height at the object's leftmost column
  fill_line = frozenset({(i, leftmost(obj)) for i in range(height(I))})

  # Fill the grid with the object's color at the created line's indices
  O = fill(I, color, fill_line)
  return O
 
3.3333333333333335, 7.2131257, def iieeabgechebedgbbgcecaiacicffagc(I):
    # Directly modify the input grid (for efficiency)
    for j in range(width(I)):
        # Iterate through each column
        for i in range(1, height(I)):
            # If the current cell is background color
            if I[i][j] == mostcommon(I):
                # Fill downwards with the color from the cell above
                I = fill(I, I[i-1][j], {(k, j) for k in range(i, height(I))})
    return I
 
3.6666666666666665, 9.131238, def afecaeeaaeffeacgijjfihfejcaficec(I):
    # 1. Find the lowest y-coordinate of each unique color
    lowest_ys = {v: max(i for i, r in enumerate(I) for j, v2 in enumerate(r) if v == v2) for v in palette(I)}
    # 2. Find the color with the highest lowest y-coordinate (largest object)
    fill_color = max(lowest_ys, key=lowest_ys.get)
    # 3. Fill downwards from the lowest y-coordinate of that color
    O = tuple(
        tuple(fill_color if i >= lowest_ys[fill_color] and any(v2 == fill_color for v2 in r) else v for v in r) 
        for i, r in enumerate(I)
    )
    return O
 
3.3333333333333335, 8.424767, def fcfbchbbbdbcehdebcfbbfbghfdhjbab(I):
    # 1. Get indices of all non-background colors
    colored_indices = difference(asindices(I), ofcolor(I, mostcommon(I)))
    # 2. Group indices by column
    columns = {j: frozenset((i, j) for i, r in enumerate(I) for j2, v in enumerate(r) if (i, j2) in colored_indices and j == j2) for j in range(len(I[0]))}
    # 3. Find the column with the lowest bottom edge
    lowest_column = max(columns, key=lambda j: lowermost(columns[j]))
    # 4. Get the color of the object in the lowest column
    fill_color = I[first((i, j) for i, j in columns[lowest_column])[0]][lowest_column]
    # 5. Fill downwards from the lowest point of the lowest column
    O = fill(I, fill_color, frozenset((i, lowest_column) for i in range(lowermost(columns[lowest_column]), len(I))))
    return O
 
6.0, 22.61997, def fieaffdaadbbebfeiefbhfgddfbdcbbi(I):
  target_color = I[-1][-1]
  obj = extract(partition(I), lambda o: color(o) == target_color)
  painted = paint(canvas(target_color, shape(I)), obj)
  O = cellwise(painted, I, target_color)
  return O
 
4.0, 11.572701, def bgccdccgfedeebecabcaahbffffeafca(I):
    # 1. Get the color of the bottom-right cell.
    x1 = I[len(I)-1][len(I[0])-1]
    # 2. Create a patch for the bottom row.
    x2 = backdrop(toindices({(0, (len(I)-1, 0))}))
    x3 = lambda loc: loc[0] == len(I)-1
    x4 = sfilter(x2, x3)
    # 3. Create a patch for the rightmost column.
    x5 = backdrop(toindices({(0, (0, len(I[0])-1))}))
    x6 = lambda loc: loc[1] == len(I[0])-1
    x7 = sfilter(x5, x6)
    # 4. Combine the two patches.
    x8 = combine(x4, x7)
    # 5. Fill the combined patch with the extracted color.
    O = fill(I, x1, x8)
    return O
 
4.333333333333333, 9.225471, def eiccecbaaadaeigeaddedddicbfbddbe(I):
  # 1. Get the bottom-right corner color.
  x1 = I[len(I)-1][len(I[0])-1]
  # 2. Create a patch covering the entire grid.
  x2 = canvas(0, shape(I))
  x3 = backdrop(asindices(x2))
  # 4. Remove the top row and leftmost column from the patch.
  x4 = lambda loc: loc[0] == 0 or loc[1] == 0
  x5 = sfilter(x3, x4)
  x6 = difference(x3, x5)
  # 5. Fill the remaining area with the extracted color.
  O = fill(I, x1, x6)
  return O
 
3.3333333333333335, 7.228494, def abcdjagbdiibeihdbgiddgjcdaeahbfg(I):
  target_color = I[1][1]
  for i in range(len(I)):
    for j in range(len(I[0])):
      if I[i][j] == target_color:
        for k in range(i + 1, len(I)):
          I = fill(I, target_color, {(k, j)}) # Fill downwards from each target color occurrence
  return I 
 
3.3333333333333335, 3.1975596, def ifcffjicfcbieeceiabdgfegbiddhfje(I):
    # 1. Identify objects (excluding background)
    objs = objects(I, False, False, True)
    # 2. Find the object with the lowest bottom edge
    lowest_obj = argmax(objs, lambda obj: lowermost(obj))
    # 3. Get the color of that object
    fill_color = color(lowest_obj)
    # 4. Create a patch covering the area below that object
    fill_patch = frozenset((i, j) for i in range(lowermost(lowest_obj), len(I)) for j in range(len(I[0])))
    # 5. Underfill the patch (only fill background cells)
    O = underfill(I, fill_color, fill_patch)
    return O
 
6.666666666666667, 19.535051, def ijdbgefjeafiedcfaecjjcjigeegehbi(I):
    objs = objects(I, T, T, T)
    O = I
    for obj in objs:
        right_bound = rightmost(obj)
        lower_bound = lowermost(obj)
        fill_area = frozenset((i, j) for i in range(len(I)) for j in range(len(I[0])) if i >= lower_bound or j >= right_bound)
        O = fill(O, color(obj), fill_area)
    return O
 
4.333333333333333, 7.7800217, def gcceedfhigjaehfdbdeadiccadjhdaba(I):
    h, w = len(I), len(I[0])
    O = I
    for obj in objects(I, T, T, T):
        for i in range(lowermost(obj), h):
            for j in range(rightmost(obj), w):
                O = fill(O, color(obj), {(i, j)})
    return O
 
6.0, 22.61997, def acfdbejadgiieidaaehhbehccbbfbhhc(I):
    # 1. Get the color of the bottom-right cell.
    br_color = I[-1][-1]
    # 2. Create a grid filled with the extracted color.
    filled_grid = canvas(br_color, shape(I))
    # 3. Combine the original grid with the filled grid, prioritizing the filled grid in overlapping areas.
    O = cellwise(filled_grid, I, br_color)
    return O 
 
5.333333333333333, 7.1464376, def ibfecabechbceadhbfcdeehhhcdcdbdh(I):
    # 1. Reverse each row of the input grid.
    reversed_rows = apply(lambda row: row[::-1], I)
    # 2. Transpose the grid (flip rows and columns).
    transposed = rot90(reversed_rows)
    # 3. Get the color of the top-left cell.
    tl_color = transposed[0][0]
    # 4. Fill the top row with the extracted color.
    filled_top = fill(transposed, tl_color, backdrop(toindices({(0, (0, 0))})))
    # 5. Reverse the filling process.
    O = rot270(apply(lambda row: row[::-1], filled_top))
    return O
 
5.333333333333333, 30.547113, def ghcffdfjbhhaehffbcbcffhgidfcehcb(I):
  target_color = I[1][1]  # Color of the center cell
  bottom_half = bottomhalf(I) # Extract the bottom half of the grid
  filled_bottom = canvas(target_color, shape(bottom_half)) # Create a canvas filled with the target color, with the same shape as the bottom half
  O = vconcat(tophalf(I), filled_bottom) # Concatenate the top half of the input grid with the filled bottom half 
  return O
 
0.0, 0.0, def echaddjfjbccefijjeihfagefjjadeab(I):
  for i in range(height(I) - 1):
    for j in range(width(I)):
      if I[i][j] != mostcolor(I) and I[i+1][j] == mostcolor(I):
        I = fill(I, I[i][j], {(k, j) for k in range(i + 1, height(I))})
  return I
 
