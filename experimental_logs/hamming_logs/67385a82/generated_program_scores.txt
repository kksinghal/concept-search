3.5, 2.5821488, def bgaehccigfbfeagcaghgddfiaaacbfji(I):
  objs = objects(I, T, F, T) # get all connected objects, excluding background
  largest_obj = argmax(objs, size) # find the largest object
  if color(largest_obj) == THREE: # check if the largest object is made of '3'
    O = paint(I, recolor(EIGHT, largest_obj)) # recolor the largest object to '8'
  else:
    O = I # otherwise, return the original grid
  return O
 
4.25, 4.253696, def bbgajadgdbfheichbhejcbibedbbbgci(I):
  objs = objects(I, T, F, T)
  largest_size = valmax(objs, size) 
  O = replace(I, THREE, branch(size(extract(objs, matcher(size, largest_size))) == largest_size and color(extract(objs, matcher(size, largest_size))) == THREE, EIGHT, THREE))
  return O
 
2.25, 5.8479548, def fjdhbdadgbfceiaeajiadbcjchfaccic(I):
  O = replace(I, THREE, EIGHT)
  return O
 
7.0, 5.830821, def iegiffedhbagechjjhjecegahedchehd(I):
  top_row_indices = frozenset((0, j) for j in range(len(I[0])))
  top_objects = frozenset(obj for obj in fgpartition(I) if len(intersection(toindices(obj), top_row_indices)) > 0)
  transformed_objects = apply(lambda obj: recolor(8, obj), top_objects)
  O = paint(I, merge(transformed_objects))
  return O
 
3.5, 3.5810778, def acbijhbgefjdeifhajjjbaecjccaehjb(I):
  h = len(I)
  w = len(I[0])
  top_connected_cells = mfilter(objects(I, False, True, True), lambda obj: any(i == 0 for i, j in toindices(obj)))
  O = tuple(tuple(8 if (i,j) in toindices(top_connected_cells) and I[i][j] == 3 else I[i][j] for j in range(w)) for i in range(h)) 
  return O
 
6.0, 5.7005115, def efadjagadefgejeabebicdidcfefcbdf(I):
  O = tuple(tuple(8 if j in {j for i, j in ofcolor(I, 3) if i == 0} else v for j, v in enumerate(row)) for row in I)
  return O
 
4.25, 3.5342135, def bebbgffidcccedbabecfdcacgeiajfcb(I):
  modified_grid = []
  for i, row in enumerate(I):
    if i == 0:
      modified_grid.append(tuple(8 if cell == 3 else cell for cell in row))
    else:
      modified_grid.append(row)
  return tuple(modified_grid)
 
14.25, 39.22031, def ajefdeiebdbfeabeaeafgdbjfbhjebcf(I):
  objs = sorted(objects(I, False, False, False), key=size, reverse=True)
  O = I
  for obj in objs:
    if color(obj) == THREE:
      O = paint(O, recolor(EIGHT, obj))
      break
  return O
 
2.25, 5.8479548, def ddgbccbjfjaieaaaafeecibbijdbbcge(I):
  """
  Iterates through the grid and replaces the target color with 8.
  """
  target_color = mostcommon([c for row in I for c in row if c != 0])
  O = tuple(
      tuple(8 if v == target_color else v for v in row) for row in I
  )
  return O
 
7.0, 5.830821, def bbaefgafcdcceaadicijcfgefedhbfhf(I):
  """
  Utilizes objects to find the most frequent non-background color.
  """
  objs = objects(I, True, False, True) # Get objects, excluding background
  color_counts = [(color(obj), len(obj)) for obj in objs] 
  target_color = argmax(color_counts, lambda x: x[1])[0] # Find color with max occurrences
  O = paint(canvas(mostcolor(I), shape(I)), recolor(8, ofcolor(I, target_color))) 
  return O
 
6.75, 3.218241, def jfbbfjcabjjbedcjbfgfcfcadfaacabj(I):
  objs = objects(I, T, F, T) # extract all objects from the grid
  leftmost_obj = argmin(objs, lambda obj: leftmost(obj)) # find the leftmost object based on minimum column index
  O = paint(I, recolor(EIGHT, leftmost_obj)) # recolor the leftmost object to 8 and paint it onto the grid
  return O
 
7.0, 3.8463025, def dffbigagjbeeebdgahajchhefgjeccjb(I):
  min_j = leftmost(asindices(I)) # find the minimum column index (leftmost column) of the entire grid
  left_indices = frozenset((i,j) for i in range(height(I)) for j in range(width(I)) if j == min_j and I[i][j] != mostcommon(I)) # collect indices of all non-background cells in the leftmost column
  left_obj = toobject(left_indices, I) # construct the object using the collected indices and the grid
  O = paint(I, recolor(EIGHT, left_obj)) # recolor the object to 8 and paint it onto the grid
  return O
 
7.0, 3.8336642, def ideaddeejcbaefihjbfebeadacccdidi(I):
    for j in range(width(I)):
      column = set(I[i][j] for i in range(height(I))) # get unique values in the column
      if len(column) > 1: # check if the column has more than one unique value (not a uniform column)
        target_color = next(color for color in column if color != mostcommon(I)) # get the first non-background color in the column
        obj = frozenset({(I[i][j], (i, j)) for i in range(height(I)) if I[i][j] == target_color}) # extract the object based on the target color
        return paint(I, recolor(EIGHT, obj)) # recolor to 8 and paint the object
    return I # return the original grid if no non-uniform column is found
 
2.25, 2.81583, def chidefhbffcgedggagbcaajdccfeeece(grid):
  h = height(grid)
  return vconcat(replace(grid[:h-1], THREE, EIGHT), grid[h-1:])
 
6.5, 5.2252765, def hfadaceefcjdeciabbebdhgbfefdcfbf(I):
  objs = objects(I, False, True, True)
  top_objs = mfilter(objs, lambda obj: uppermost(obj) < 2)
  return paint(cover(I, top_objs), recolor(8, top_objs))
 
2.75, 2.1549692, def dafabfgbaajeejedicfdeedcadbgdaje(I):
  h = height(I)
  return tuple(tuple(8 if i < 2 and v == 3 else v for v in r) for i, r in enumerate(I))
 
17.5, 7.111581, def faebaegaifibefcejidghehbifecijej(I):
  """
  Uses cellwise comparison to replace target color with 8.
  """
  target_color = mostcommon(list(palette(I) - {0}))
  target_grid = canvas(target_color, shape(I)) 
  O = cellwise(target_grid, I, 8)
  return O
 
7.75, 3.9094272, def ahedgchijdhfeceaaeeiejdajbacebij(I):
  for obj in objects(I, True, False, True):
    if leftmost(obj) == 0: 
      return paint(I, recolor(EIGHT, obj))
  return I
 
6.25, 3.5433395, def ibaijdbbdcfcecadbeibhaaehdedchaf(I):
  left_edge = {(0, j) for j in range(width(I))} 
  objs = objects(I, True, False, True)
  leftmost_obj = argmin(objs, lambda obj: leftmost(obj))  
  if len(intersection(toindices(leftmost_obj), left_edge)) > 0:
    return paint(I, recolor(EIGHT, leftmost_obj))
  else:
    return I
 
2.5, 4.967009, def egcaceaejffgecahbaicgeechdaeegdc(I):
  leftmost_column = [row[0] for row in I]
  target_color = next((c for c in leftmost_column if c != mostcommon(I)), None)
  if target_color:
    return paint(I, recolor(EIGHT, toobject(ofcolor(I, target_color), I)))
  else:
    return I
 
2.25, 2.9504516, def dgfdbidbedbaeabebjhdfcjdcdagaaga(grid):
  return tuple(tuple(8 if j != len(grid)-1 and v == 3 else v for j, v in enumerate(row)) for i, row in enumerate(grid))
 
2.75, 3.1686947, def dgffdbjbbbbdeeadjacebefagghcggbd(I):
  return tuple(
      tuple(
          8 if (i < 2 and v == 3) or 
             ((i == len(I) - 1 or i == len(I) - 2) and 
              (j == len(r) - 1 or j == len(r) - 2) and v == 3) 
          else v 
          for j, v in enumerate(r)
      ) 
      for i, r in enumerate(I)
  )
 
2.25, 5.8479548, def bafgcafeefabeedjibeeegedccdffjff(I):
  objs = partition(I)
  largest_three = argmax(colorfilter(objs, THREE), size)
  O = paint(I, recolor(EIGHT, largest_three))
  return O
 
1.5, 2.0331483, def ibccjedeiahieebhabeebfccjdddfbia(I):
  objs = objects(I, True, False, False)
  largest_three = argmax(sfilter(objs, lambda obj: color(obj) == THREE), size)
  O = I
  for v, (i, j) in largest_three:
    O = fill(O, EIGHT, {(i, j)})
  return O
 
2.25, 2.81583, def dbhejabaahfcedigaiagijhffhgebeda(I):
  """
  Replaces the most frequent non-zero color with 8, except for the last row. 
  """
  x1 = mostcommon([c for row in I[:-1] for c in row if c != 0]) # Find most frequent color excluding last row and 0
  O = tuple(
      tuple(8 if v == x1 else v for v in row) for row in I[:-1]
  ) + (I[-1],) # Replace in all but last row, keep last row intact
  return O
 
6.25, 8.07207, def addgjcbbgdjcegheibeiifaceihehcgi(I):
  """
  Splits the grid, modifies the top part, and combines them back.
  """
  x1 = tophalf(I) # Extract the top portion of the grid
  x2 = mostcommon([c for row in x1 for c in row if c != 0]) # Find most frequent color in top portion excluding 0
  x3 = tuple(tuple(8 if v == x2 else v for v in row) for row in x1) # Replace most frequent color in top portion with 8
  O = vconcat(x3, bottomhalf(I)) # Vertically concatenate modified top portion and original bottom portion 
  return O
 
7.25, 3.2428575, def jcidajdcdhdjeeibjaccadfabfbhfidc(I):
  for j in range(width(I)):
    column = [I[i][j] for i in range(height(I))]
    if any(c != mostcommon(I) for c in column):
      return paint(I, recolor(EIGHT, toobject(extract(objects(I, T, F, T), lambda obj: any(i == j for i, _ in toindices(obj))), I)))
  return I
 
2.25, 5.8479548, def fadafgbfaaeheceajbcgfafbfadbdcbi(I):
  for i, r in enumerate(I):
    for j, v in enumerate(r):
      if v == 3:
        if i < 2:
          I = fill(I, 8, {(i, j)})
        else:
          square_indices = box({(i, j)})  
          if square(toobject(square_indices, I)): 
            I = fill(I, 8, square_indices)
  return I
 
4.5, 5.668981, def aiacgeifhbbdedagiaeedbbafbeccbah(I):
  transformed_grid = tuple(tuple(8 if (i < 2 and v == 3) else v for v in r) for i, r in enumerate(I))
  bottom_part = transformed_grid[2:]
  squares = objects(fill(bottom_part, 8, ofcolor(bottom_part, 3)), True, False, False)
  for obj in squares:
    if square(obj):
      transformed_grid = paint(transformed_grid, obj)
  return transformed_grid
 
3.5, 2.2934794, def cififfdgccgfeheajdfddbbhcifgaeih(I):
  objs = objects(I, True, False, False)
  largest_three = argmax(colorfilter(objs, THREE), size)
  return underpaint(I, recolor(EIGHT, largest_three))  # Paint only on background cells
 
4.5, 3.7132766, def gddbgibefccdefgeidcaieddeejacfbc(I):
  objs = objects(I, True, False, False)
  largest_three = argmax(colorfilter(objs, THREE), size)
  locs = occurrences(I, largest_three) # Find all occurrences of the largest object
  return fill(I, EIGHT, locs) # Fill those locations with '8'
 
2.75, 2.8063164, def djggffhdhchcechcjeebcajjbfebbjci(I):
  objs = objects(I, True, False, False)
  largest_three = argmax(colorfilter(objs, THREE), size)
  sub = subgrid(largest_three, I) # Extract the subgrid containing the largest '3' object 
  recolored_sub = paint(canvas(ZERO, shape(sub)), recolor(EIGHT, largest_three)) # Recolor the subgrid
  return paint(I, asobject(recolored_sub)) # Paint the recolored subgrid back onto the original
 
2.25, 2.9504516, def fajfjcadhbjbefchbbeedbegagbdfbde(I):
  """
  Constructs a new grid with conditional color replacement
  based on row index and target color.
  """
  target_color = mostcommon([c for row in I[:-1] for c in row if c != 0])
  O = tuple(
      tuple(8 if j != len(I) - 1 and v == target_color else v for j, v in enumerate(row))
      for i, row in enumerate(I)
  )
  return O
 
2.0, 2.3296676, def fdejdhbficicefhdaabffhfgfjabcfed(grid):
  modified_rows = tuple(tuple(8 if (j != len(row) - 1 and v == 3) else v for j, v in enumerate(row)) for row in grid[:-1])
  return vconcat(modified_rows, grid[-1:])
 
2.75, 2.7860446, def dbadfhiffiefecgfjeidjhfhedbbbebc(I):
    transformed = []
    for i, row in enumerate(I):
        new_row = []
        for j, v in enumerate(row):
            if i < 2 and v == 3:
                new_row.append(8)
            elif v == 3 and any(square(obj) for obj in objects(fill(I, 0, asindices(I[:i+1])), True, False, False) if (i, j) in toindices(obj)):
                new_row.append(8)
            else:
                new_row.append(v)
        transformed.append(tuple(new_row))
    return tuple(transformed)
 
8.5, 7.205289, def ddcadefdbgafefbeiiedahfabcfchdfe(I):
  threes = ofcolor(I, THREE)  # Get indices of all '3's
  if not threes: return I  # Handle cases with no '3's
  largest_three = argmax([toobject(neighbors(loc), I) for loc in threes], size)  # Find largest connected '3' region
  return paint(I, recolor(EIGHT, largest_three))  # Recolor and paint
 
14.0, 6.6156693, def dibacbijhefeecebjebfbeehccdjedcd(I):
  """
  Functional approach using 'sfilter' and 'merge' 
  for color replacement.
  """
  target_color = mostcommon(merge(sfilter(I[:-1], lambda row: any(c != 0 for c in row))))
  O = tuple(
      tuple(8 if v == target_color else v for v in row) for row in I
  )
  return O
 
3.0, 4.76111, def dbijaeiacccfedajbebgbgjbdfebfbda(I):
  modified_grid = tuple(tuple(8 if i < 2 and v == 3 else v for v in r) for i, r in enumerate(I))
  bottom_squares = mfilter(objects(fill(modified_grid, 0, asindices(I[2:])), True, False, False), square)
  return fill(modified_grid, 8, toindices(bottom_squares))
 
15.0, 4.7167354, def cdibccehagfeefgfiaaheefdeechaecd(I):
  objs = objects(I, True, False, False)  # Extract connected objects of only '3's
  largest_three = argmax(objs, size) if objs else None  # Find the largest object
  return paint(I, recolor(EIGHT, largest_three)) if largest_three else I  # Recolor if largest object exists 
 
11.5, 15.751968, def dcjeehdfdeaiebeibafccigajdcaadcf(I):
  """
  Creates a canvas representing the area to modify and paints the transformation onto it.
  """
  target_color = mostcommon([c for row in I[:-1] for c in row if c != 0])
  modified_area = canvas(8 if target_color else 0, (len(I) - 1, len(I[0])))
  O = paint(I, asobject(modified_area))
  return O
 
4.5, 3.3661544, def bcbfjjbcedabeeaeadjadaabcchcicie(I):
  objs = objects(I, T, F, T)
  largest_obj = argmax(objs, size)
  if color(largest_obj) == THREE:
    shifted_obj = shift(largest_obj, (0,-1))
    recolor_area =  intersection(toindices(largest_obj), toindices(shifted_obj))
    return paint(I, recolor(EIGHT, toobject(recolor_area, I)))
  else:
    return I
 
5.75, 3.6528547, def dcegejccaebcedjgjfgdbidcfedbfcca(grid):
  return vconcat(tuple(row[:-1] + (8 if row[-1] == 3 and i != len(grid)-1 else row[-1],) for i, row in enumerate(grid[:-1])), (grid[-1],)) 
 
3.0, 3.5394099, def bbjifjdehbadefefjdjdbdjadfcbjaed(I):
  h, w = len(I), len(I[0])
  return tuple(
      tuple(
          8 if (i < 2 or j == 0 or j == w - 1) and v == 3
          else v
          for j, v in enumerate(r)
      )
      for i, r in enumerate(I)
  )
 
2.0, 1.8197019, def jdffbfeaehhbedbhiefbbdcfefjeiide(I):
  h, w = len(I), len(I[0])
  return tuple(
      tuple(
          8 
          if (i < 2 and v == 3) or (v == 3 and any(I[k][j] == 3 for k in range(i + 1, h)))
          else v
          for j, v in enumerate(r)
      )
      for i, r in enumerate(I)
  )
 
8.0, 7.7496257, def egaaaieebbgfebbebeejiechegccdbbh(I):
  return paint(
      fill(I, 8, asindices(crop(I, (0, 0), (2, len(I[0]))))),
      recolor(
          3,
          difference(
              ofcolor(I, 3),
              asindices(crop(I, (0, 0), (2, len(I[0]))))
          )
      )
  )
 
4.75, 3.2170072, def agjhbedbcfjaejbfahdajjdfejaadegj(I):
    for obj in objects(I, True, False, False): # Iterate through all objects
        if color(obj) == THREE and size(obj) == valmax(objects(I, True, False, False), size):  # Check if the object is '3' and largest
            return paint(I, recolor(EIGHT, obj)) # If true, recolor and paint
    return I # Otherwise, return the original grid
 
5.5, 2.859217, def edcejebaacbeebhfaagdgdbaijcjffad(I):
  objs = objects(I, T, F, T)
  largest_obj = argmax(objs, size)
  right_column = hsplit(I, width(I))[-1]
  recolor_area = toindices(toobject(difference(toindices(largest_obj), asindices(right_column)), I))
  return paint(I, recolor(EIGHT, recolor_area))
 
5.0, 2.8684404, def cjbbaeifbddheeieaddbejdffccgdbbf(I):
  objs = objects(I, T, F, T)
  largest_obj = argmax(objs, size)
  recolor_area = frozenset((i,j) for i,j in toindices(largest_obj) if j != width(I) - 1)
  return paint(I, recolor(EIGHT, recolor_area))
 
5.25, 6.6020775, def dbjjfjdfdfchegbdbccjchgcejhaagfc(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=False) 
  recolored = frozenset(
      recolor(8, obj) if uppermost(obj) < 2 else obj 
      for obj in objs 
      if color(obj) == 3
  )
  return paint(canvas(mostcolor(I), shape(I)), merge(recolored)) 
 
4.75, 5.47457, def bfbbfdgfgaegeaefjfcdechcbjbgcaec(I):
    return tuple(
        tuple(
            8 if i < 2 and any(I[k][j] == 3 for k in range(i, min(i + 2, len(I)))) else I[i][j]
            for j in range(len(I[0]))
        )
        for i in range(len(I))
    )
 
13.75, 16.040985, def hdedadaaeiaaechdbjjcfhbfahaechhg(I):
  def recolor_obj(obj):
    return recolor(8, obj) if any(i < 2 for i, j in toindices(obj)) else obj
  objs = objects(I, univalued=True, diagonal=False, without_bg=False)
  return paint(canvas(mostcolor(I), shape(I)), merge(apply(recolor_obj, objs)))
 
5.5, 2.9925675, def bdhcbdccdifbeigfbfibcbhgegdaaaeg(I):
  objs = objects(I, True, False, True) # Get connected objects of the same color, excluding the background
  largest_three = argmax(objs, lambda obj: size(obj) if color(obj) == THREE else 0) # Find the largest object with color 3
  return paint(I, recolor(EIGHT, largest_three))  # Recolor the largest three to 8 and paint it onto the input grid
 
4.0, 2.6410863, def ddejgefjfdaheeddjaaajccaaicdceec(I):
  objs = objects(I, T, F, T)
  if len(objs) > 1:
    largest_obj = argmax(objs, size)
    I = paint(cover(I, largest_obj), recolor(EIGHT, toindices(largest_obj)))
  return I
 
11.5, 25.065361, def diedbcafadbceeajbahfcfcdbjgiiajg(I):
  rightmost_obj = argmax(objects(I, T, F, T), lambda obj: rightmost(obj))
  modified_grid = paint(I, recolor(EIGHT, toindices(difference(asindices(I), toindices(rightmost_obj)))))
  return modified_grid
 
5.0, 5.023625, def bfgecacdhifaeeahjecebefffaaijcij(I):
  for i, r in enumerate(I):
    if i < 2:
      I = fill(I, 8, ofcolor(crop(I, (i, 0), (1, width(I))), 3))
  return I
 
3.75, 15.272263, def bbddbcabidfcefehaaibcbcchcffchbh(I):
    def replace_if_three(v, loc):
        return (EIGHT, loc) if v == THREE else (v, loc)
    objs = objects(I, True, False, False)
    largest_three = argmax(sfilter(objs, lambda obj: color(obj) == THREE), size)
    return paint(canvas(ZERO, shape(I)), frozenset(replace_if_three(v, loc) for v, loc in asobject(I) if (v, loc) in largest_three or v != THREE))
 
6.5, 3.666356, def bgifdfeeejiceecjafedcfjadidbicjb(I):
  largest_obj = argmax(objects(I, T, F, T), size)
  recolor_area = frozenset((i, min(toindices(largest_obj), key=lambda x: x[1] if x[0] == i else float('inf'))[1]) for i in range(height(I)))
  return paint(I, recolor(EIGHT, recolor_area)) 
 
5.0, 3.236223, def eedbdccieeaeehbgacecadadeeeeafaf(I):
  largest_obj = argmax(objects(I, T, F, T), size)
  left_edge = {(i, leftmost(largest_obj)) for i in range(height(I)) if any(j == leftmost(largest_obj) for _, (i, j) in largest_obj)}
  return paint(I, recolor(EIGHT, left_edge))
 
6.5, 3.8319786, def bidhfacjeedcehdbbcdajebifedeigab(I):
  obj = argmax(objects(I, T, F, T), size)
  painted = paint(I, recolor(EIGHT, obj))
  return hconcat(painted, hsplit(I, width(I) - 1)[-1])
 
6.0, 3.9110625, def addbdedfbaddehafaaiagbfaaejhdejj(grid):
  objs = objects(grid, True, False, False)
  for obj in objs:
    if color(obj) == 3 and not bordering(obj, grid):
      grid = paint(cover(grid, obj), recolor(8, obj))
  return grid
 
1.0, 1.5717889, def cdgfbefaedebebhabfcjceiigcedafdf(grid):
  h = len(grid)
  w = len(grid[0])
  new_grid = []
  for i in range(h):
    row = []
    for j in range(w):
      if grid[i][j] == 3 and i != h - 1 and ((i > 0 and grid[i-1][j] == 3) or (j > 0 and grid[i][j-1] == 3) or (i < h-1 and grid[i+1][j] == 3) or (j < w-1 and grid[i][j+1] == 3)):
        row.append(8)
      else:
        row.append(grid[i][j])
    new_grid.append(tuple(row))
  return tuple(new_grid)
 
2.25, 4.576845, def cacdfiddccdieidcaeabbgfiajaifacg(grid):
  new_grid = []
  for i, row in enumerate(grid[:-1]):
    new_row = tuple(8 if v == 3 and row[max(0, j-1):min(len(row), j+2)].count(3) > 1 else v for j, v in enumerate(row))
    new_grid.append(new_row)
  return tuple(new_grid) + grid[-1:]
 
2.5, 3.0180202, def dafieheicgdfebaaadbechagcdiccedb(grid):
  return tuple(apply(lambda row: tuple(8 if v == 3 and any(n == 3 for n in [row[max(0, j-1)], row[min(len(row)-1, j+1)]]) else v for j, v in enumerate(row)), grid[:-1])) + grid[-1:]
 
4.0, 6.1528435, def jhhbfadeieeieccfifadecdchbhedabh(I):
  objs = objects(I, True, False, False)
  return tuple(tuple(8 if (i < 2 and v == 3) or any((i,j) in toindices(obj) and square(obj) for obj in objs) else v for j, v in enumerate(r)) for i, r in enumerate(I))
 
3.5, 4.0825434, def hgfffbiffbddebchaigbjdgbacfbdjda(I):
  transformed = []
  for i, r in enumerate(I):
    new_row = []
    for j, v in enumerate(r):
      if i < 2 and v == 3:
        new_row.append(8)
      else:
        temp_grid = tuple(tuple(0 if row_index > i else val for col_index, val in enumerate(row)) for row_index, row in enumerate(I))
        if v == 3 and any(square(obj) for obj in objects(temp_grid, True, False, False) if (i, j) in toindices(obj)):
          new_row.append(8)
        else:
          new_row.append(v)
    transformed.append(tuple(new_row))
  return tuple(transformed)
 
4.5, 3.6316516, def ieahddaeghbaeheiigdababiccbecgff(grid):
  objs = objects(grid, True, False, False)
  threes = sfilter(objs, lambda obj: color(obj) == THREE)
  O = grid
  for three in threes:
    for x, (i, j) in three:
      if any((i + di, j + dj) in toindices(three) and (i + 2 * di, j + 2 * dj) in toindices(three) for di, dj in [(1, 0), (-1, 0), (0, 1), (0, -1)]):
        O = fill(O, EIGHT, {(i, j)})
  return O
 
9.0, 17.372023, def hedgeehiggecedafidfeaeafjhbeihfb(grid):
  objs = objects(grid, True, False, False)
  threes = sfilter(objs, lambda obj: color(obj) == THREE)
  O = paint(canvas(mostcolor(grid), shape(grid)), merge(threes))
  for three in threes:
    O = underpaint(O, recolor(THREE, box(three)))
  return O
 
7.0, 13.401928, def dfjceggcdibaejjgbbddedbaadddjeif(grid):
  objs = partition(grid)
  threes = colorfilter(objs, THREE)
  filled_threes = apply(lambda obj: recolor(EIGHT, difference(toindices(obj), box(obj))), threes)
  return paint(canvas(mostcolor(grid), shape(grid)), merge(threes) | merge(filled_threes)) 
 
5.5, 4.114896, def bfaefbfddbgfeebebfcebeehfaebgeje(grid):
  changed = True
  O = grid
  while changed:
    changed = False
    for i in range(1, len(grid)-1):
      for j in range(1, len(grid[0])-1):
        if grid[i][j] == THREE and grid[i-1][j] == THREE and grid[i+1][j] == THREE and grid[i][j-1] == THREE and grid[i][j+1] == THREE:
          O = fill(O, EIGHT, {(i, j)})
          changed = True
  return O
 
1.5, 2.5080748, def hheeaifcbhafebgcbbdieegdaedbdhfb(grid):
  h, w = len(grid), len(grid[0])
  return tuple(
    tuple(
      8 if (v == 3 and any(grid[i][j+1:])) or (v == 3 and any(grid[k][j] == 3 for k in range(i + 1, h))) 
      else v 
      for j, v in enumerate(row)
    )
    for i, row in enumerate(grid)
  )
 
11.25, 20.57097, def bdjfjbgachfgecgcibiachbefbjdgcif(grid):
  objs = objects(grid, univalued=True, diagonal=False, without_bg=False)
  new_objs = frozenset(
    recolor(8, obj) if size(sfilter(toindices(obj), lambda ij: any(k == ij[0] and l > ij[1] for k, l in toindices(obj)) or any(k > ij[0] and l == ij[1] for k, l in toindices(obj)))) > 0 else obj
    for obj in objs
  )
  return paint(canvas(mostcolor(grid), shape(grid)), merge(new_objs))
 
9.25, 4.7358623, def dafecdajgihgejadbefaiabdafjdejia(grid):
  return rot180(
    tuple(
      tuple(
        8 if (v == 3 and j > 0 and any(grid[i][:j])) or (v == 3 and i > 0 and any(grid[k][j] == 3 for k in range(i)))
        else v
        for j, v in enumerate(row)
      )
      for i, row in enumerate(grid)
    )
  ) 
 
2.0, 2.9634063, def cecifchecdcdeefcbaebdicjacceaifc(grid):
  h, w = len(grid), len(grid[0])
  hori = tuple(
    tuple(
      8 if (j < w - 1 and v == 3 and any(grid[i][j+1:])) else v 
      for j, v in enumerate(row)
    )
    for i, row in enumerate(grid)
  )
  return tuple(
      tuple(
        8 if (v == 3 and i < h - 1 and any(hori[k][j] == 3 for k in range(i + 1, h))) 
        else v 
        for j, v in enumerate(row)
      )
      for i, row in enumerate(hori)
  )
 
2.0, 2.3296676, def eaaheabgbaabebhjibiaebhbdjbfhahc(grid):
  return tuple(tuple(8 if i != len(grid)-1 and j != len(row)-1 and v == 3 else v for j, v in enumerate(row)) for i, row in enumerate(grid))
 
3.5, 2.2934794, def cdgcbcaacbjceicdbdgdeecgbcfjicfh(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=False)
  largest_three = argmax(colorfilter(objs, THREE), size)
  O = underpaint(I, recolor(EIGHT, largest_three))
  return O
 
6.25, 8.07207, def gfgebabadbdeefiijjjfiacdaafecbbe(grid):
  """
  Replaces '3' with '8' in the top two rows.
  """
  return vconcat(
      replace(tophalf(grid), 3, 8),
      bottomhalf(grid)
  )
 
2.75, 2.1549692, def dbhchgjicceeecjejdejaeecdeccafch(grid):
  """
  Applies a conditional replacement based on row index.
  """
  h = height(grid)
  return tuple(
      tuple(8 if v == 3 and i < 2 else v for v in row)
      for i, row in enumerate(grid) if i < h
  )
 
13.75, 16.040985, def fhcdgecbdcjgedeibfeahahfaiabgigc(grid):
  """
  Leverages object representation for targeted modification.
  """
  objs = objects(grid, univalued=True, diagonal=False, without_bg=False)
  top_objs = frozenset(obj for obj in objs if uppermost(obj) < 2)
  modified_objs = frozenset(recolor(8, obj) if obj in top_objs else obj for obj in objs)
  return paint(canvas(mostcolor(grid), shape(grid)), merge(modified_objs))
 
3.5, 2.7604926, def deaeifdeaaedeaadbhcgdedjaacbfbec(grid):
  h = height(grid)
  w = width(grid)
  return tuple(
      tuple(
          8 if (0 < i < h - 1 and 0 < j < w - 1 and grid[i][j] == 3 and (grid[i-1][j] == 3 or grid[i+1][j] == 3 or grid[i][j-1] == 3 or grid[i][j+1] == 3)) else grid[i][j] 
          for j in range(w)
      )
      for i in range(h)
  ) 
 
16.5, 53.982765, def geaefieccbcgejfdjbgaedgajbfeddhi(grid):
  return trim(
    paint(
        canvas(mostcolor(grid), shape(grid)), 
        recolor(
            8, 
            mapply(
                lambda obj: toindices(obj), 
                sfilter(
                    objects(grid, True, False, False), 
                    lambda obj: color(obj) == 3
                )
            )
        )
    )
  )
 
0.0, 0.0, def gbbfdaacebihecfbbibgcaejddbebedf(grid):
  h = height(grid)
  w = width(grid)
  return tuple(
      tuple(
          branch(
              both(
                  grid[i][j] == 3, 
                  any(
                      grid[k][l] == 3
                      for k, l in dneighbors((i, j))
                      if 0 <= k < h and 0 <= l < w
                  )
              ), 
              8, 
              grid[i][j]
          )
          for j in range(w)
      )
      for i in range(h)
  )
 
