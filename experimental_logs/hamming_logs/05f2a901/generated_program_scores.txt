0.07950937950937952, 28.442202, def bcgcjcbcgfjgegfejbaebehgaacbeaca(I):
  objs = objects(I, True, False, False)
  moved_objs = frozenset()
  for obj in objs:
    if color(obj) == 2:
      moved_objs = moved_objs | {shift(obj, (height(I)-uppermost(obj), 0))}
    else:
      moved_objs = moved_objs | {obj}
  O = paint(canvas(mostcolor(I), shape(I)), merge(moved_objs))
  return O
 
0.10394420394420394, 24.715185, def bijbaifcihjcegjcacegcjaeggdifdjc(I):
    O = I
    for obj in objects(I, True, False, False):
        if color(obj) == 2:
            O = move(O, obj, (height(I)-uppermost(obj)-1, 0))
    return O
 
0.15901875901875903, 12.065797, def jcacbebcccebejbeihfidcfeidibghbi(I):
  objs = objects(I, T, F, T)
  h = height(I)
  moved_objs = []
  for i in range(h-1, -1, -1):
    for obj in objs:
      if uppermost(obj) == i:
        moved_objs.append(obj)
  O = paint(canvas(ZERO, shape(I)), merge(moved_objs))
  return O
 
0.1900913900913901, 23.782228, def fggiedecehffehbjacjgaecdffibcfej(I):
  objs = objects(I, T, F, T)
  h = height(I)
  O = canvas(ZERO, shape(I))
  current_height = h - 1
  for obj in sorted(objs, key=lambda obj: uppermost(obj), reverse=True):
    obj_height = height(obj)
    O = paint(O, shift(obj, (current_height - uppermost(obj), 0)))
    current_height -= obj_height
  return O
 
0.21654641654641651, 16.21138, def afcaabbgefcjedieifgaidccdagaifga(I):
  h = height(I)
  O = I
  for i in range(h):
    row_objs = objects(crop(I, (i, 0), (1, width(I))), T, F, T)
    for obj in row_objs:
      O = paint(cover(O, obj), shift(obj, (h - i - height(obj), 0)))
  return O
 
0.2024050024050024, 17.97646, def jababdifeheeeafeahhhhehdeebacbfa(I):
  objs = sorted(objects(I, T, F, T), key=lambda obj: uppermost(obj))
  h = height(I)
  O = canvas(ZERO, shape(I))
  offset = 0
  for obj in objs:
    O = paint(O, shift(obj, (offset, 0)))
    offset += height(obj)
  return O
 
0.21967291967291966, 21.43018, def deggcaicdcbfefdbabeegeacdiafcgdc(I):
  objs = objects(I, T, F, T)
  h = height(I)
  grounded_objs = []
  for obj in objs:
    grounded_objs.append(shift(obj, (h - uppermost(obj) - height(obj), 0)))
  O = paint(canvas(ZERO, shape(I)), merge(grounded_objs))
  return O
 
0.15901875901875903, 16.297136, def cfidhdafdeabehgfjcdabfadbcfiaaag(I):
    # Identify objects
    objs = objects(I, F, T, T)
    
    # Find object '2' and '8'
    obj2 = extract(objs, lambda obj: color(obj) == 2)
    obj8 = extract(objs, lambda obj: color(obj) == 8)
    
    # Calculate new position for object '2' based on its initial position
    h = height(I)
    obj2_uppermost = uppermost(obj2)
    new_position = (h - obj2_uppermost - height(obj2), 0) if obj2_uppermost < h // 2 else (h // 2 - height(obj2), len(I[0]) // 2 - width(obj2) // 2)

    # Move object '2'
    O = paint(cover(I, obj2), shift(obj2, new_position))
    
    # Paint object '8' back to its original position
    O = paint(O, obj8) 
    
    return O
 
0.15901875901875903, 12.902395, def eageajcafifdedfcahbieifeaccacadc(I):
    # Check if there is an object '2' in the top half
  h = height(I)
  obj2_indices = ofcolor(tophalf(I), 2)
  
  if obj2_indices:
    # Extract object '2'
    obj2 = toobject(obj2_indices, I)
    
    # Move object '2' to the bottom
    new_position = (h - uppermost(obj2) - height(obj2), 0)
    I = paint(cover(I, obj2), shift(obj2, new_position))
  
  return I
 
0.192015392015392, 12.354509, def jdjdcebjdcjgeadjbdhjbdcfcfecjhdf(I):
  objs = sorted(objects(I, True, False, True), key=lambda x: lowermost(x))  # Sort objects by their bottom row
  O = I
  for i, obj in enumerate(objs):
    O = cover(O, obj)  # Remove object from the grid
    offset = (height(I) - 1 - lowermost(obj) - i * height(obj), 0)  # Calculate offset for moving down
    O = paint(O, shift(obj, offset))  # Paint the object at the new location
  return O
 
0.21654641654641651, 16.21138, def ebfgdbbeghedeagbbahfaahcdcfbcfdj(I):
  O = I
  for i in range(height(I)):
    row_objs = objects(crop(I, (i, 0), (1, width(I))), True, False, True)  # Identify objects in each row
    if row_objs:
      for obj in row_objs:
        O = cover(O, obj)  # Remove object from the grid
        offset = (height(I) - 1 - i, 0)  # Calculate offset for moving to the bottom
        O = paint(O, shift(obj, offset))  # Paint the object at the new location
  return O
 
0.17027417027417027, 32.312054, def eigcffeibhhcecfcigfajijjebheadaj(I):
  objs = sorted(objects(I, True, False, True), key=lambda x: centerofmass(x)[1])  # Sort objects by horizontal center of mass
  O = canvas(0, shape(I))  # Create blank canvas
  for obj in objs:
    empty_row = max(i for i in range(height(O)) if all(O[i][j] == 0 for j in range(width(O))))  # Find the highest empty row
    offset = (empty_row - uppermost(obj), 0)  # Calculate offset for moving to the empty row
    O = paint(O, shift(obj, offset))  # Paint the object at the new location
  return O
 
0.2024050024050024, 17.97646, def aaibddgbjaadefhdiaebcgddibeciaag(I):
    x1 = mostcolor(I)        # Identify background color
    x2 = objects(I, T, F, F) # Extract all objects, including background
    x3 = lambda obj: lowermost(obj) if color(obj) != x1 else -1 # Define function to get lowermost row for non-background objects, otherwise -1
    x4 = order(x2, x3)       # Sort objects based on their lowermost row (non-background objects will be at the end)
    x5 = canvas(x1, shape(I))# Create a canvas filled with background color
    x6 = (0, 0)              # Initialize offset 
    for obj in x4:
        if color(obj) != x1: # If object is not background
            x7 = shift(obj, x6) # Shift object by current offset
            x5 = paint(x5, x7)   # Paint shifted object onto canvas
            x8 = height(obj)      # Get object height
            x6 = (x6[0] + x8, x6[1]) # Update offset for the next non-background object
    O = x5                    # Assign filled canvas to output
    return O
 
0.1376142376142376, 21.141264, def befedhdhbbideehbbiihagiegdefihdd(I):
  twos = extract(objects(I, True, False, False), lambda obj: color(obj) == 2)
  return paint(cover(I, twos), shift(twos, (height(I) - lowermost(twos), 0)))
 
0.14901394901394902, 41.61748, def bbbfjafagdeceeffaabbfcbdhedbjeaa(I):
  objs = objects(I, T, F, T)
  O = canvas(ZERO, shape(I))
  for i, obj in enumerate(sorted(objs, key=lambda obj: uppermost(obj))):
    O = paint(O, shift(obj, (height(I)-height(obj)-i,0)))
  return O
 
0.17835497835497835, 25.673504, def jbjceibffjfeeiahaebhbfijfbfdbabd(I):
  O = canvas(ZERO, shape(I))
  objs = objects(I, T, F, T)
  bottom = height(I)
  for obj in sorted(objs, key=lambda obj: uppermost(obj), reverse=True):
    O = paint(O, shift(obj, (bottom-height(obj), 0)))
    bottom -= height(obj)
  return O
 
0.22664742664742663, 17.522587, def iffigcehbaefeebhajiddeeedhaijdgg(I):
  return rot180(apply(lambda row: tuple(sorted(row, key=lambda cell: cell == ZERO)), rot180(I)))
 
0.15901875901875903, 12.957094, def eigcdaffcfdheicgaceefcaacbfcdcdc(I):
  # Find the '2' object
  obj2 = extract(objects(I, F, T, T), lambda obj: color(obj) == 2)

  # Calculate new position based on current position
  new_pos = (height(I) - height(obj2), 0) if uppermost(obj2) < height(I) // 2 else ulcorner(obj2) 

  # Move object '2'
  return paint(cover(I, obj2), shift(obj2, subtract(new_pos, ulcorner(obj2)))) 
 
0.20822510822510823, 12.272073, def jchahbdaeicdeadeicajfgagdbicbgbj(I):
  # Calculate the middle row index
  mid = height(I) // 2

  # Create a function to move an object to the bottom
  def move_to_bottom(obj):
    return shift(obj, (height(I) - uppermost(obj) - height(obj), 0))

  # Apply the move function to all objects with color '2' in the top half 
  return paint(I, merge(apply(move_to_bottom, sfilter(objects(I, F, T, T), lambda obj: color(obj) == 2 and uppermost(obj) < mid))))
 
0.1416065416065416, 43.053673, def hgaeieeagfaceddaaeafeecaadccgfdb(I):
  objs = sorted(objects(I, True, False, True), key=lambda x: -lowermost(x))
  h = height(I)
  w = width(I)
  O = canvas(mostcolor(I), (h, w))
  for i, obj in enumerate(objs):
    O = vconcat(crop(O, (0, 0), (h - height(obj) - i * height(obj), w)), paint(crop(O, (h - height(obj) - i * height(obj), 0), (height(obj), w)), obj))
  return O
 
0.1473304473304473, 31.23662, def daabebdcbehbejffadgffgeccfecajgd(I):
  objs = objects(I, True, False, True)
  h = height(I)
  acc = canvas(mostcolor(I), shape(I))
  for i in range(h):
    row_objs = sfilter(objs, lambda obj: lowermost(obj) == h - 1 - i)
    if len(row_objs) > 0:
      obj = first(row_objs)
      acc = paint(acc, shift(obj, (h - height(obj) - i * height(obj), 0)))
  return acc
 
0.2933621933621933, 14.917843, def dgiddefgefedeeeaigdbfgfadeabjcdd(I):
  objs = objects(I, True, False, True)
  O = canvas(mostcolor(I), shape(I))
  y = height(I) 
  for i in range(y):
    for j in range(width(I)):
      if any(contained((i, j), toindices(obj)) for obj in objs):
        matching_obj = extract(objs, lambda obj: contained((i, j), toindices(obj)))
        O = paint(O, shift(matching_obj, (y - 1 - lowermost(matching_obj) - i + uppermost(matching_obj), 0)))
  return O
 
0.21967291967291966, 21.43018, def fcideeaagcgeeeibjfjbffeaccefgded(I):
  objs = objects(I, True, False, True)
  O = I
  for obj in objs:
    O = cover(O, obj)
    O = paint(O, shift(obj, (height(I) - 1 - lowermost(obj), 0)))
  return O
 
0.18085618085618085, 31.478054, def fihbcibfheddeigcifacdgjdcabbhbbb(I):
  objs = objects(I, True, False, True)
  new_positions = sorted(((lowermost(obj), obj) for obj in objs))
  O = canvas(mostcolor(I), shape(I))
  for i, (_, obj) in enumerate(new_positions):
    offset = (height(I) - 1 - i * height(obj) - height(obj), 0)
    O = paint(O, shift(obj, offset))
  return O
 
0.21967291967291966, 21.43018, def ibfbiccabdbdebcijcfabdbffebddcfd(I):
    x1 = objects(I, T, F, T)          # Extract non-background objects
    x2 = canvas(0, shape(I))          # Create empty canvas
    for obj in x1:
        x3 = shift(obj, (height(I) - uppermost(obj) - height(obj), 0)) # Shift the object directly to its final position at the top
        x2 = paint(x2, x3)              # Paint the shifted object onto the canvas
    O = x2                             # Output the filled canvas
    return O
 
0.22496392496392495, 16.396076, def cefdhhhdbdbfebfjjbdefhhagcgaaafe(I):
    x1 = objects(I, T, F, T)        # Extract non-background objects
    x2 = merge(x1)                  # Merge all objects into a single set of cells
    x3 = normalize(x2)              # Normalize the merged object (move upper left corner to origin)
    x4 = shift(x3, (height(I) - height(x3), 0)) # Shift the normalized object upwards to the top of the grid
    O = paint(canvas(0, shape(I)), x4)  # Paint the shifted object on an empty canvas
    return O
 
0.1264069264069264, 47.53211, def icdebfdfbbdjehahidfafdgcbbcbddfa(I):
  two_indices = ofcolor(I, 2)
  non_two_indices = asindices(I) - two_indices
  shifted_two_indices = shift(two_indices, (height(I) - lowermost(two_indices), 0))
  output_obj = combine(recolor(2, shifted_two_indices), recolor(mostcolor(I), non_two_indices))
  return paint(canvas(mostcolor(I), shape(I)), output_obj)
 
0.16382876382876382, 39.375725, def jfbdecddafhgeacgbacgaaefjbaaieef(I):
  objs = sorted(objects(I, T, F, T), key=lambda obj: uppermost(obj))
  O = canvas(ZERO, (height(I), width(I)))
  bottom = height(I)
  for obj in objs:
    bottom -= height(obj)
    O = paint(O, shift(obj, (bottom, 0)))
  return O
 
0.17417027417027417, 10.35034, def dcabicbaccdaegecjjacbcfbafeeajjc(I):
  objs = sorted(objects(I, T, F, T), key=lambda obj: -uppermost(obj))
  O = canvas(ZERO, shape(I))
  top = 0
  for obj in objs:
    O = paint(O, shift(obj, (top, 0)))
    top += height(obj)
  return O
 
0.15901875901875903, 15.979022, def ddjddihjejbfehidaajchcbebcdeihcb(I):
  # Extract object '2'
  obj2 = extract(objects(I, F, T, T), lambda obj: color(obj) == 2)
  
  # Calculate the vertical shift distance
  shift_distance = height(I) - lowermost(obj2) - 1 
  
  # Move object '2' downwards
  return paint(cover(I, obj2), shift(obj2, (shift_distance, 0))) 
 
0.19807599807599807, 13.149296, def efhfffhfcdacebjfjejcfcafhdcdjcfj(I):
  objs = sorted(objects(I, True, False, True), key=lambda x: uppermost(x)) # Sort objects by their top row
  O = canvas(mostcolor(I), shape(I)) # Create an empty canvas
  current_height = height(I)  # Start placing objects from the bottom
  for obj in objs:
    O = paint(O, shift(obj, (current_height - height(obj) - uppermost(obj), 0))) # Calculate offset based on current height
    current_height -= height(obj) # Update current height
  return O
 
0.21967291967291966, 21.501308, def afaiiaabbbebebdajafeabcecbjdeccd(I):
  objs = sorted(objects(I, True, False, True), key=lambda x: uppermost(x))
  O = canvas(mostcolor(I), shape(I))
  for i, obj in enumerate(objs):
    O = vconcat(O[: -height(obj)], paint(O[-height(obj):], shift(obj, (-uppermost(obj), 0))))
  return O
 
0.17835497835497835, 26.31164, def jiddecicbfbjebfbbbafcbjffaafadce(I):
  objs = sorted(objects(I, True, False, True), key=lambda x: uppermost(x), reverse=True)
  O = I
  for i, obj in enumerate(objs):
      O = cover(O, obj)
      offset = (height(I) - height(obj) - i * height(obj), 0)
      O = paint(O, shift(obj, offset))
  return O
 
0.18576238576238577, 27.598919, def cdffjfgdigebehdcacjiafffffdffded(I):
    x1 = objects(I, T, F, T)       # Extract non-background objects
    x2 = shape(I)                  # Get shape of input grid
    x3 = canvas(0, x2)              # Create empty canvas
    x4 = 0                          # Initialize offset from bottom
    for obj in x1:                   # Iterate through objects
        x5 = height(obj)            # Get height of current object
        x6 = shift(obj, (x2[0] - x4 - x5, 0))  # Shift object down to correct position
        x3 = paint(x3, x6)         # Paint shifted object on canvas
        x4 = x4 + x5                # Update offset for next object
    O = x3                         # Output is the filled canvas
    return O
 
0.19273689273689273, 19.684666, def iebhabdgdgfaehgjbfdcaffbaejefdag(I):
    x1 = objects(I, T, F, T)      # Extract all non-background objects
    x2 = merge(apply(toindices, x1)) # Get all indices of non-background cells
    x3 = canvas(0, shape(I))      # Create empty canvas
    x4 = lowermost(x2)             # Get the lowermost row index of non-background cells
    x5 = shift(recolor(mostcolor(I), x2), (x4 + 1 - height(I), 0)) # Shift all non-background indices to bottom
    O = fill(x3, leastcolor(I), x5) # Fill the shifted indices with least color on the canvas
    return O
 
0.11938431938431937, 20.698065, def acfjfbdbfeaeeeieagfajiaecgaebghj(I):
  two_indices = ofcolor(I, 2) # Get indices of all '2' cells
  other_cells = {(v, (i, j)) for i, r in enumerate(I) for j, v in enumerate(r) if (i, j) not in two_indices} # Get all cells except those containing '2'
  shifted_twos = {(2, (i + height(I) - lowermost(two_indices) - 1, j)) for (i, j) in two_indices} # Shift '2' indices to the bottom
  return paint(canvas(mostcolor(I), shape(I)), shifted_twos | other_cells) # Combine shifted '2's and other cells on a blank canvas
 
0.10538720538720538, 22.627144, def dghdejebccfjejcfadfbghabihbejgjc(I):
  twos = list((v, (i,j)) for i, r in enumerate(I) for j, v in enumerate(r) if v == 2)
  other = [(v, (i,j)) for i, r in enumerate(I) for j, v in enumerate(r) if v != 2]
  h = height(I)
  for i in range(len(twos)):
    twos[i] = (twos[i][0], (h - len(twos) + i, twos[i][1][1]))
  return paint(canvas(mostcolor(I), shape(I)),  frozenset(twos + other))
 
0.1035016835016835, 33.6374, def fhdicjafbbjgebbjajefjifcddacadci(I):
  objs = objects(I, T, F, T)
  acc = height(I)
  O = canvas(ZERO, (0, width(I)))
  for obj in sorted(objs, key=lambda obj: uppermost(obj)):
    O = vconcat(O, canvas(ZERO, (acc - height(obj), width(I))))
    O = paint(O, shift(obj, (acc-height(obj),0)))
    acc -= height(obj)
  return O
 
0.15901875901875903, 15.861158, def aeacabcbcdghegcaaafgbdgccgecched(I):
  # Find all '2' objects
  objects2 = colorfilter(objects(I, F, T, T), 2)
  
  # Calculate new positions for each '2' object
  new_positions = {obj: (height(I) - height(obj) - uppermost(obj), leftmost(obj)) for obj in objects2}
  
  # Cover the original '2' objects
  I = cover(I, merge(objects2))
  
  # Paint the '2' objects at their new positions
  return paint(I, merge({shift(obj, new_positions[obj]) for obj in objects2})) 
 
0.24199134199134198, 12.123332, def iadhhefdadhaebjcbebibajehhbdbiec(I):
  # Create a function to process each row
  def process_row(row, target_row):
    return tuple(2 if v == 2 else target_row[j] for j, v in enumerate(row))
  
  # Find rows with '2'
  rows_with_2 = tuple(i for i, row in enumerate(I) if 2 in row)
  
  # Modify the grid by moving '2's to the bottom
  new_grid = tuple(process_row(row, I[i - len(rows_with_2)]) if i >= height(I) - len(rows_with_2) else row for i, row in enumerate(I))

  return new_grid
 
0.17417027417027417, 10.35034, def efejjcichadaebdajcjaaefdfcjdhbde(I):
  objs = objects(I, T, F, T) # Extract non-background objects
  bottom_edge = lambda obj: height(I) - lowermost(obj) # Function to get distance from bottom edge
  sorted_objs = order(objs, bottom_edge) # Sort objects based on distance from bottom
  O = canvas(mostcolor(I), shape(I)) # Create empty canvas
  offset = (0, 0)              # Initialize offset
  for obj in sorted_objs:
    O = paint(O, shift(obj, offset)) # Paint object at offset
    offset = add(offset, (height(obj), 0)) # Update offset for the next object
  return O
 
0.11702741702741702, 52.397247, def fhheadcdahbjefgaibfaaedjejjefgac(I):
  h = height(I)              # Get the height of the input grid
  filled = canvas(0, shape(I)) # Initialize a canvas filled with '0'
  for obj in objects(I, T, F, T): # Iterate through non-background objects
    obj_h = height(obj)       # Get the height of the object
    filled = paint(filled, shift(obj, (h - obj_h, 0))) # Paint the object at the bottom
    h -= obj_h                 # Update the available height
  O = cellwise(I, filled, mostcolor(I)) # Merge with the original grid, using background for empty cells
  return O
 
0.17835497835497835, 25.673504, def gjieffcahhedehbbajahagejiddihjhb(I):
  bg = mostcolor(I)           # Identify background color
  h, w = shape(I)             # Get input grid dimensions
  O = canvas(bg, (h, w))      # Create canvas filled with background
  objs = sorted(objects(I, T, F, T), key=lambda obj: -uppermost(obj)) # Sort objects by uppermost row in descending order
  current_height = h           # Initialize current height from bottom
  for obj in objs:
    obj_h = height(obj)       # Get object height
    O = paint(O, shift(obj, (current_height - obj_h, 0))) # Shift and paint object
    current_height -= obj_h    # Update current height
  return O
 
0.0869167869167869, 27.217838, def fcdfibbffdecedcdbcjajfdcacfebede(I):
  two_indices = ofcolor(I, 2)  
  other_cells = ((I[i][j], (i, j)) for i, row in enumerate(I) for j, v in enumerate(row) if (i, j) not in two_indices)
  shifted_twos = ((2, (i + height(I) - len({i for i, j in two_indices}), j)) for i, j in two_indices)
  return paint(canvas(mostcolor(I), shape(I)), frozenset(shifted_twos) | frozenset(other_cells)) 
 
0.7155844155844155, 32.595764, def egciijjeabidefjjidgbcfjccgeefgcc(I):
  return vconcat(crop(I, (0, 0), (height(I) - colorcount(I, 2), width(I))), canvas(2, (colorcount(I, 2), width(I))))
 
0.22876382876382872, 16.017544, def aideaeachciaeedgidjdibbaffajhhfi(I):
  # Create a list to store the transformed rows
  transformed_rows = [] 
  
  # Iterate over each row in the input grid
  for i in range(height(I)):
    # Extract the row
    row = I[i]
    
    # If the row is not empty (contains non-zero values)
    if any(v != ZERO for v in row):
        # Add the row to the transformed rows list
        transformed_rows.append(row)
  
  # Calculate the number of empty rows to add at the top
  empty_rows = height(I) - len(transformed_rows)
  
  # Create a new grid by concatenating empty rows and transformed rows
  return tuple(
      tuple(ZERO for _ in range(width(I))) for _ in range(empty_rows)
  ) + tuple(transformed_rows)
 
0.21967291967291966, 21.43018, def bcfgbfdjceccehfcbfeaebhcihbibddg(I):
  # Find the objects
  objects_list = objects(I, univalued=True, diagonal=False, without_bg=True)
  
  # Move each object down
  for obj in objects_list:
    # Calculate shift distance
    shift_distance = height(I) - lowermost(obj) - 1
    
    # Conditionally move object downwards 
    I = paint(cover(I, obj), shift(obj, (shift_distance, 0))) if shift_distance > 0 else I
  
  return I
 
0.16382876382876382, 39.375725, def eciefaeacfjbedagjbieecdbffefhihd(I):
  objs = sorted(objects(I, True, False, True), key=lambda x: uppermost(x)) # Sort objects from top to bottom
  h, w = shape(I) # Get grid dimensions
  O = canvas(mostcolor(I), (h, w)) # Create background canvas
  current_height = h # Start placing from the bottom
  for obj in objs:
    O = paint(O, shift(obj, (current_height - height(obj), 0))) # Shift object to correct vertical position
    current_height -= height(obj) # Update current height
  return O
 
0.14901394901394902, 41.61748, def ehgdijbdbbdieaeaiajifeicdffcabdc(I):
    objs = objects(I, True, False, True)
    h, w = shape(I)
    O = canvas(mostcolor(I), (h, w))
    for j in range(w):
      column_objs = sorted([obj for obj in objs if any((i, j) in toindices(obj) for i in range(h))], key=lambda x: uppermost(x))
      current_height = h
      for obj in column_objs:
        O = paint(O, shift(obj, (current_height - height(obj), 0)))
        current_height -= height(obj)
    return O
 
0.2162097162097162, 22.210262, def aibaefedhgcaebjjbdeabfdfajibcdjc(I):
    objs = objects(I, True, False, True)
    h, w = shape(I)
    O = canvas(mostcolor(I), (h, w))
    for obj in objs:
      i, j = ulcorner(obj)
      O = paint(O, shift(obj, (h-height(obj)-i, j)))
    return O
 
0.15901875901875903, 15.979022, def fabdfecbaegcecjfbajhaedceafaafad(I):
  two_obj = extract(objects(I, True, False, False), lambda obj: color(obj) == 2)
  return paint(cover(I, two_obj), shift(two_obj, (height(I) - height(two_obj) - uppermost(two_obj), 0)))
 
0.14314574314574316, 13.396532, def bedjaiecicbdeefeagdecafebadbdjdi(I):
  return tuple(tuple(v if v != 2 else mostcolor(I) if i < height(I) - colorcount(I, 2) else 2 for j, v in enumerate(row)) for i, row in enumerate(I))
 
0.13419913419913418, 10.726036, def dhajceaficgaeibbbbedeejbhjihdcff(I):
  grid = [list(row) for row in I]
  h = height(I)
  w = width(I)
  count_2 = colorcount(I, 2)
  for j in range(w):
    for i in range(h - 1, -1, -1):
      if grid[i][j] == 2:
        grid[i][j] = mostcolor(I)
        grid[h - count_2][j] = 2
        count_2 -= 1
        break
  return tuple(tuple(row) for row in grid)
 
0.2099086099086099, 12.963151, def haffccecfbfheeddibibjebcbabccfdf(I):
  # Create a function to move an object to the bottom
  def move_to_bottom(obj):
    return shift(obj, (height(I) - lowermost(obj) - height(obj), 0))

  # Apply the move function to all non-background objects
  return paint(I, merge(apply(move_to_bottom, objects(I, False, True, True))))
 
0.18484848484848482, 8.762193, def fedaafdbgacjedfdiadedcjbehdacacd(I):
  for i in range(height(I)):
    for obj in objects(I, False, True, True):
      if uppermost(obj) == i:
        I = move(I, obj, (height(I) - lowermost(obj) - height(obj), 0))
  return I
 
0.11702741702741702, 52.397247, def cfbiiejcedefeajibdfiiabgcaadbaeg(I):
  objs = objects(I, True, False, True)
  h, w = shape(I)
  O = canvas(mostcolor(I), (h, w))
  for i, obj in enumerate(sorted(objs, key=lowermost)):
      O = paint(O, shift(obj, (h - 1 - i * height(obj), 0)))
  return O
 
0.1852332852332852, 29.562733, def jifjjaefhcfaefjfidcbefchgfdifcdb(I):
  objs = sorted(objects(I, True, False, True), key=lambda o: lowermost(o))
  acc = canvas(mostcolor(I), shape(I))
  for i, obj in enumerate(objs):
    acc = paint(acc, shift(obj, (height(I) - 1 - sum(height(o) for o in objs[:i+1]), 0)))
  return acc
 
0.1742183742183742, 10.881984, def adbaefafjejhecfdaeiajcceajfahdaj(I):
    objects_by_bottom = sorted(objects(I, True, False, True), key=lambda obj: lowermost(obj))
    output = I
    y_offset = 0
    for obj in objects_by_bottom:
        output = cover(output, obj)
        output = paint(output, shift(obj, (y_offset, 0)))
        y_offset -= height(obj)
    return output
 
0.12159692159692159, 44.15253, def jcddhehfifcfeccciaadedadabebefdg(I):
  # Get non-background objects
  objs = objects(I, T, F, T)

  # Create an empty canvas with the input width and a height to accommodate all objects
  O = canvas(ZERO, (sum(height(obj) for obj in objs), width(I)))

  # Initialize a counter for the current height
  current_height = 0

  # Iterate through the objects in the order they appear from top to bottom in the input
  for obj in sorted(objs, key=lambda obj: uppermost(obj)):
    # Paint the object onto the canvas at the current height
    O = paint(O, shift(obj, (current_height, 0)))

    # Update the current height for the next object
    current_height += height(obj) 

  return O
 
0.19316979316979319, 23.781307, def bjfdecdeefebeechjdihdidahibgfhfh(I):
  # Create a list to store modified objects
  modified_objs = []

  # Calculate the vertical offset to shift objects to the bottom
  vertical_offset = height(I) - sum(height(obj) for obj in objects(I, T, F, T))

  # Shift each object downwards to align with the bottom
  for obj in objects(I, T, F, T):
    modified_objs.append(shift(obj, (vertical_offset, 0)))

  # Create a blank canvas
  O = canvas(ZERO, shape(I))

  # Paint the shifted objects onto the canvas
  for obj in modified_objs:
    O = paint(O, obj)

  return O
 
0.21967291967291966, 21.501308, def bfdecdcbdeajeebdjbbdedbhheejbdeb(I):
  # Sort objects based on their uppermost row index
  sorted_objects = order(objects(I, False, True, True), uppermost)

  # Move each object to the bottom, one by one, on the original grid
  moved_grid = I
  for obj in sorted_objects:
    moved_grid = move(moved_grid, obj, (height(moved_grid) - lowermost(obj) - 1, 0))
  return moved_grid
 
0.1614237614237614, 27.482464, def eechdadfcidaejbajaeaddbijbhdfgdg(I):
  # Create a mapping from original indices to new indices
  index_map = {
      (i, j): (height(I) - height(obj) - i, j)
      for obj in objects(I, False, True, True)
      for (v, (i, j)) in obj
  }

  # Construct the output grid based on the index mapping
  return tuple(
      tuple(
          I[index_map.get((i, j), (i, j))[0]][index_map.get((i, j), (i, j))[1]]
          for j in range(width(I))
      )
      for i in range(height(I))
  )
 
0.14295334295334294, 38.267506, def cacbjiccccbiefiabjcdbddddiceadbf(I):
  objs = sorted(objects(I, True, False, True), key=lambda x: uppermost(x))
  h = height(I)
  w = width(I)
  O = canvas(mostcolor(I), (h, w))
  for i, obj in enumerate(objs):
    O = vconcat(paint(crop(O, (h - height(obj) - i * height(obj), 0), (height(obj), w)), obj), crop(O, (0, 0), (h - height(obj) - i * height(obj), w)))
  return O
 
0.17113997113997115, 11.743422, def cbgefecachdcecccjdcchabfhhfjecdb(I):
  h = height(I)
  w = width(I)
  O = canvas(mostcolor(I), (h, w))
  for i, obj in enumerate(sorted(objects(I, True, False, True), key=lambda x: uppermost(x), reverse=True)):
    offset = (i * height(obj), 0)
    O = paint(O, shift(obj, offset))
  return O
 
0.3587782587782588, 13.463154, def hjiaadffbfheedgabafdjgfbjcjcgjde(I):
    two_obj = extract(objects(I, True, False, False), lambda obj: color(obj) == 2)  # Find the '2' object
    bg_color = mostcolor(I)  # Get the background color
    return vconcat(  # Vertically concatenate two grids:
        crop(replace(I, 2, bg_color), (0, 0), (height(I) - height(two_obj), width(I))),  # Top part (without '2')
        crop(replace(I, bg_color, 2), (height(I) - height(two_obj), 0), (height(two_obj), width(I)))  # Bottom part (only '2')
    )
 
0.2677729677729678, 13.543119, def deddhjddigjcedfijddedfcciadddcfb(I):
  return tuple(
    tuple(
        2 if any(v == 2 for v in row) and i >= height(I) - colorcount(I, 2) else v # Paint '2' at the bottom if present in the row 
        for j, v in enumerate(row)
    ) 
    for i, row in enumerate(I)
  )
 
0.1851851851851852, 31.379087, def cdcheefeaeffedfeaecbccfdbibccjef(I):
  objs = objects(I, T, F, T)  # Extract objects
  O = canvas(ZERO, shape(I))  # Create empty canvas
  for obj in objs:
    shifted_obj = shift(obj, (height(I) - lowermost(obj), 0))  # Calculate downward shift
    O = paint(O, shifted_obj)  # Paint shifted object onto canvas
  return O
 
0.13823953823953825, 32.38361, def difdfbbchedceebabfjdfahfgggfjdfi(I):
  def find_landing_height(obj, grid):
    for i in range(height(grid) - height(obj), -1, -1):  # Iterate from bottom up
      if not intersection(toindices(shift(obj, (i, 0))), toindices(asobject(grid))):
        return i  # Return height if no overlap
    return 0  # Default to top if no space
  objs = objects(I, T, F, T)
  O = canvas(ZERO, shape(I))
  for obj in objs:
    landing_height = find_landing_height(obj, O)
    O = paint(O, shift(obj, (landing_height, 0)))
  return O
 
0.21255411255411258, 12.873287, def adchhicjfbcfehjebeeghaccabebidef(I):
  new_grid = list(list(row) for row in I) # Convert to mutable grid
  for obj in objects(I, False, True, True):
    shift_distance = height(I) - lowermost(obj) - height(obj)
    for v, (i, j) in obj:
      new_grid[i + shift_distance][j] = v 
  return tuple(tuple(row) for row in new_grid) # Convert back to immutable tuple
 
0.13689273689273687, 38.324303, def hgbibeeecfbbebecadbaibdeeigedbaa(I):
  objs = sorted(objects(I, True, False, True), key=lambda x: -uppermost(x))
  h, w = shape(I)
  O = canvas(mostcolor(I), (h, w))
  for i, obj in enumerate(objs):
    O = vconcat(paint(crop(O, (i * height(obj), 0), (height(obj), w)), obj), crop(O, (height(obj), 0), (h - height(obj), w)))
  return O
 
0.13578643578643576, 42.797855, def hfabbffededdeehabcdiibdgfbaidiec(I):
    bg = mostcolor(I)
    objs = objects(I, T, F, T)
    new_objs = frozenset({(color(obj), (height(I) - uppermost(obj) - height(obj), leftmost(obj))) for obj in objs})
    O = paint(canvas(bg, shape(I)), recolor(bg, asobject(I)))
    O = paint(O, new_objs)
    return O
 
0.1287157287157287, 7.763983, def eadbicefaebheeaijbgihjcgeddajegd(I):
  objs = objects(I, True, False, False) # Identify all objects
  two_obj = extract(objs, lambda obj: color(obj) == 2) # Extract the '2' object
  eights = extract(objs, lambda obj: color(obj) == 8) # Extract the '8' object (if it exists)
  grid_height = height(I) # Get total grid height
  
  if len(eights) > 0: # If an '8' object exists
    new_pos = (uppermost(eights) - height(two_obj), 0)  # Position '2' above '8'
  else:
    new_pos = (grid_height - height(two_obj), 0)  # Position '2' at the bottom

  return paint(cover(I, two_obj), shift(two_obj, new_pos)) # Move '2' and paint all objects
 
0.10303030303030303, 13.541089, def jebbdhehdjdeeeciieddgheaaefgeahc(I):
  two_indices = ofcolor(I, 2) # Find all indices of '2'
  eight_indices = ofcolor(I, 8) # Find all indices of '8'
  h = height(I) # Get grid height
  
  if eight_indices: # If '8' exists
    new_two_indices = shift(two_indices, (uppermost(eight_indices) - lowermost(two_indices) - 1, 0)) # Shift '2' above '8'
  else:
    new_two_indices = shift(two_indices, (h - lowermost(two_indices) - 1, 0)) # Shift '2' to the bottom
  
  return fill(fill(canvas(mostcolor(I), shape(I)), 2, new_two_indices), 8, eight_indices) # Fill new grid with moved objects
 
0.16873496873496874, 10.026265, def hcacjhdcgdihebfaibfifjdhjdcfiecf(I):
  two_obj = asobject(crop(I, ulcorner(ofcolor(I, 2)), shape(ofcolor(I, 2))))  # Extract '2' object as an object
  eight_top = uppermost(ofcolor(I, 8)) if ofcolor(I, 8) else height(I) # Get top row of '8' object, default to grid height
  new_two_obj = shift(two_obj, (eight_top - height(two_obj) - uppermost(two_obj), 0))  # Shift '2' object to new position
  return paint(fill(I, mostcolor(I), toindices(two_obj)), new_two_obj) # Paint on the grid
 
0.17455507455507455, 12.98403, def fdajdcafbgfiegfcbcbcbhagbfefgjjh(I):
  """
  Compares input with a vertically flipped version to determine object positions.
  """
  flipped = vmirror(I)
  h = height(I)
  O = canvas(mostcommon(I), shape(I))
  for i, (row1, row2) in enumerate(zip(I, flipped)):
    for j, (cell1, cell2) in enumerate(zip(row1, row2)):
      if cell1 != mostcommon(I):
        O = paint(O, {(cell1, (h - i - 1, j))})
      elif cell2 != mostcommon(I):
        O = paint(O, {(cell2, (i, j))})
  return O
 
0.1698893698893699, 33.375156, def defcebidcgcbejeaadcccbciefdbgbaa(I):
  objs = objects(I, False, False, True)
  bg = mostcolor(I)
  h, w = len(I), len(I[0])
  O = canvas(bg, (h, w))
  current_height = h 
  for obj in sorted(objs, key=lambda obj: -width(obj)):
    height_offset = height(obj)
    O = paint(O, shift(obj, (current_height - height_offset, 0)))
    current_height -= height_offset
  return O 
 
0.21967291967291966, 21.43018, def gcacfabbfaeeefhjajfafbbefghdeggf(I):
  objs = objects(I, False, False, True)
  bg = mostcolor(I)
  O = I
  for obj in objs:
    O = paint(cover(O, obj), shift(obj, (height(I) - uppermost(obj) - height(obj), 0))) 
  return O
 
0.17455507455507455, 12.98403, def iaacdfeddjadebbdihffbagcacgegaeg(I):
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  for i, row in enumerate(I):
    for j, value in enumerate(row):
      if value != bg:
        O = paint(O, {(value, (len(I) - i - 1, j))})
  return O
 
0.21967291967291966, 21.501308, def ebcjdbcfbgcbeadhbdjbfdbbcjafeheg(I):
  objs = objects(I, False, False, True)
  bottom = vsplit(I, height(I))[-1]
  O = canvas(mostcolor(I), shape(I))
  O = vconcat(O[:height(O)-1], bottom)
  for obj in objs:
    O = underpaint(O, shift(obj, (height(I) - uppermost(obj) - height(obj), 0)))
  return O
 
0.22876382876382872, 18.041582, def ijbjcfbdgjdfeihjifefdbceddhiigfa(I):
  bg = mostcolor(I)
  O = tuple(tuple(bg for _ in range(len(I[0]))) for _ in range(len(I)))
  for j in range(len(I[0])):
    column = tuple(I[i][j] for i in range(len(I)))
    non_bg_indices = tuple(i for i, v in enumerate(column) if v != bg)
    for k, idx in enumerate(non_bg_indices):
        O = paint(O, {(column[idx], (len(I) - len(non_bg_indices) + k, j))})
  return O
 
0.09841269841269841, 9.273441, def cccdccbjdecfeibgjhdfgcdhacbbafgj(I):
  # Identify all distinct objects
  objs = objects(I, T, F, F) 
  
  # Find the object with color 2
  obj_to_move = extract(objs, lambda obj: color(obj) == 2)
  
  # Calculate the offset based on the input grid size 
  h = height(I)
  offset = (h // 3 - uppermost(obj_to_move), 0) 

  # Move the target object
  O = move(I, obj_to_move, offset)  
  return O
 
0.15295815295815296, 12.875041, def fdchfcadbffaeheebecdjddcbchehicc(I):
  # Find indices of '2' and '8'
  indices_2 = ofcolor(I, 2)
  indices_8 = ofcolor(I, 8)
  
  # Calculate center of mass for both objects
  center_2 = centerofmass(indices_2)
  center_8 = centerofmass(indices_8)

  # Calculate the offset based on center of masses
  offset = (center_8[0] - center_2[0], center_8[1] - center_2[1])
  
  # Move the '2' object 
  O = move(I, toobject(indices_2, I), offset)
  return O 
 
0.15901875901875903, 12.065797, def babjggdfiacdedajjahabhccdaecfche(I):
  # Partition the grid into objects
  objs = partition(I)

  # Find the object with the minimum uppermost row index 
  target_obj = argmin(objs, uppermost)

  # Define target position based on object's width
  target_pos = (height(I) - height(target_obj), leftmost(target_obj))

  # Calculate offset
  offset = subtract(target_pos, ulcorner(target_obj)) 

  # Move the object
  O = move(I, target_obj, offset)
  return O
 
0.21924001924001923, 10.22875, def ibeafjdfajjheejcidcadfhaabcacgeb(I):
  # Identify objects without considering background
  objs = objects(I, T, F, T) 
  
  # Sort objects based on their size 
  sorted_objs = order(objs, size)

  # Get the smallest and largest objects
  smallest_obj = first(sorted_objs)
  largest_obj = last(sorted_objs) 

  # Calculate the offset to align the bottom of the smallest object
  # with the top of the largest object
  offset = (lowermost(largest_obj) - uppermost(smallest_obj) + 1, 0) 

  # Move the smallest object
  O = move(I, smallest_obj, offset)
  return O
 
0.12198172198172198, 10.217519, def ibbebidahfbfejdgaeceegcbjdadbbbc(I):
  # Extract objects, excluding background
  objs = objects(I, T, F, T)
  
  # Find the object with the minimum leftmost column index
  target_obj = argmin(objs, leftmost) 

  # Calculate the horizontal center of the grid
  center_j = width(I) // 2

  # Calculate the offset to center the target object horizontally
  offset = (0, center_j - centerofmass(target_obj)[1])

  # Move the target object 
  O = move(I, target_obj, offset)  
  return O
 
0.22126022126022127, 7.647612, def jdjfchhfaifaedadjbfcaahdfefgcadd(I):
  # 1. Identify objects in the grid
  objs = objects(I, univalued=False, diagonal=False, without_bg=True)

  # 2. Find the largest object (assumed to be the anchor)
  anchor = argmax(objs, size) 

  # 3. Create a blank canvas
  O = canvas(0, shape(I))

  # 4. For each object (excluding the anchor):
  for obj in objs - {anchor}:
    #  a. Calculate the gravitational direction towards the anchor.
    direction = gravitate(obj, anchor) 
    #  b. Shift the object in the calculated direction.
    obj = shift(obj, direction)
    #  c. Paint the shifted object onto the canvas.
    O = paint(O, obj)

  # 5. Paint the anchor object in its original position.
  O = paint(O, anchor)
  return O
 
0.22876382876382872, 18.278399, def ehdbfabdfbhaebecjfefaefhaebbccid(I):
  # 1. Identify objects
  objs = objects(I, univalued=False, diagonal=False, without_bg=True)

  # 2. Sort objects by height (descending)
  objs = order(objs, height)

  # 3. Create a blank canvas
  O = canvas(0, shape(I))

  # 4. Initialize the bottom-left corner of the placement area
  current_position = (height(I) - 1, 0)

  # 5. For each object:
  for obj in objs:
    #  a. Shift the object to align its bottom-left corner with 'current_position'
    obj = shift(obj, subtract(current_position, llcorner(obj))) 
    #  b. Paint the object onto the canvas.
    O = paint(O, obj)
    #  c. Update 'current_position' for the next object (place above the previous one)
    current_position = (current_position[0] - height(obj), 0) 

  return O
 
0.21967291967291966, 21.43018, def icfbdcajacedebdbbdfaiaffgffejefc(I):
  # 1. Identify objects
  objs = objects(I, univalued=False, diagonal=False, without_bg=True)

  # 2. Create a blank canvas
  O = canvas(0, shape(I))

  # 3. For each object:
  for obj in objs:
      # a. Calculate the vertical shift needed to bring the object to the bottom
      shift_amount = height(I) - (lowermost(obj) + 1) 
      # b. Shift the object downwards
      obj = shift(obj, (shift_amount, 0))
      # c. Paint the shifted object onto the canvas.
      O = paint(O, obj)

  return O
 
0.15387205387205385, 40.206524, def fibideabecagehhhbidjicegbcfdeibg(I):
  # 1. Identify objects 
  objs = objects(I, univalued=False, diagonal=False, without_bg=True)

  # 2. Sort objects by size (descending)
  objs = order(objs, size)

  # 3. Create a blank canvas
  O = canvas(0, shape(I))

  # 4. Initialize starting position for spiral placement
  current_position = (height(I) - 1, 0) 
  direction = (0, 1) # Start moving right

  # 5. For each object:
  for obj in objs:
    #  a. Shift the object to the current position
    obj = shift(obj, subtract(current_position, ulcorner(obj))) 
    #  b. Paint the object onto the canvas
    O = paint(O, obj)

    #  c. Update 'current_position' and 'direction' to move in a spiral pattern
    #     (Logic for spiral movement not included but can be implemented) 

  return O
 
0.21317941317941316, 22.973217, def bihfidcejaecefdabjgcebfgbjddffba(I):
  obj2 = extract(objects(I, True, False, True), lambda obj: color(obj) == 2)
  obj8 = extract(objects(I, True, False, True), lambda obj: color(obj) == 8)
  O = paint(paint(canvas(0, shape(I)), shift(obj2, (-uppermost(obj2), -leftmost(obj2)))), 
            shift(obj8, (-uppermost(obj8), (width(I) // 2) - (width(obj8) // 2))))
  return O 
 
0.19807599807599807, 13.149296, def aehgedbccdedehgfiicijddgbajajdjf(I):
    x1 = objects(I, T, F, T)  # Extract all non-background objects
    x2 = sorted(x1, key=lambda obj: uppermost(obj))  # Sort objects by their uppermost row index
    x3 = canvas(mostcolor(I), shape(I))  # Create a canvas with background color
    O = x3  # Initialize output grid
    i = len(I) - 1  # Start from the bottom row
    for obj in x2:
        O = paint(O, shift(obj, (i - lowermost(obj), 0)))  # Paint each object from bottom to top
        i -= height(obj)  # Update row index for the next object
    return O
 
0.1976911976911977, 17.278688, def feaiacbefdejedabidbfjbecchgidadc(I):
  bg = mostcolor(I)
  transposed = rot90(I)
  O = tuple()
  for row in transposed:
    non_bg = tuple(v for v in row if v != bg)
    padding = tuple(bg for _ in range(len(row) - len(non_bg)))
    O = O + (padding + non_bg,)
  return rot270(O)
 
0.21135161135161132, 21.881226, def gibeecgcehbgeedabedbcehacbfbgebd(I):
  # Get all unique objects in the grid
  objs = objects(I, T, F, F) 
  
  # Sort objects based on their uppermost row index
  sorted_objs = order(objs, uppermost)
  
  # Calculate the height of the grid
  h = height(I)
  
  # Initialize the output grid with the same dimensions as the input
  O = canvas(mostcolor(I), shape(I))
  
  # Iterate through the sorted objects
  for i, obj in enumerate(sorted_objs):
    # Calculate the offset to move the object to the bottom
    offset = (h - height(obj) - i * height(obj), 0)
    
    # Paint the object onto the output grid with the calculated offset
    O = paint(O, shift(obj, offset))
  
  return O
 
0.23208273208273208, 21.499464, def jaecfcdddcdhedggacafgejdfdgbefaf(I):
  # Identify all objects, excluding background
  objs = objects(I, T, F, T)

  # Get the background color
  bg = mostcolor(I)

  # Create a canvas filled with the background color
  O = canvas(bg, shape(I))

  # Calculate the bottom row index
  bottom = height(I) - 1

  # Iterate through each object
  for obj in objs:
    # Calculate the object's height
    obj_h = height(obj)

    # Calculate the row index for the object's top edge
    top = bottom - obj_h + 1

    # Paint the object onto the canvas, starting from the calculated top row
    for i in range(obj_h):
      O = paint(O, shift(obj, (top + i - uppermost(obj), 0)))
  return O
 
0.21394901394901392, 13.976378, def efaffabjeccceddebeaajdcdbfhejgcf(I):
  # Identify distinct objects in the grid, excluding background
  objs = objects(I, T, F, T)
  
  # Get the background color
  bg = mostcolor(I)
  
  # Create a new grid filled with the background color
  O = canvas(bg, shape(I))
  
  # Calculate the height of the grid
  h = height(I)
  
  # Iterate through objects and place them from bottom to top
  y = h
  for obj in objs:
    # Calculate object height
    obj_height = height(obj)
    
    # Decrement y to place the next object above
    y -= obj_height
    
    # Paint the object at the calculated y position
    O = paint(O, shift(obj, (y - uppermost(obj), 0)))
  
  return O
 
0.19278499278499275, 21.537336, def biebieciebafeahjihccjjfjfeceeahe(I):
  # Create an empty list to store the objects and their bottom positions
  object_positions = []
  
  # Identify all distinct objects in the grid
  objs = objects(I, T, F, F)
  
  # Calculate the height of the input grid
  h = height(I)
  
  # Determine the bottom position for each object and store it
  for obj in objs:
    object_positions.append((obj, h - height(obj)))
    h -= height(obj)
  
  # Create an output grid filled with the background color
  O = canvas(mostcolor(I), shape(I))
  
  # Paint the objects onto the output grid based on their stored positions
  for obj, pos in object_positions:
    O = paint(O, shift(obj, (pos - uppermost(obj), 0)))
  
  return O
 
0.11702741702741702, 52.397247, def iabichdfbjcdedbijdfdefgddabjeeec(I):
  # Identify all objects in the input grid
  objs = objects(I, T, F, F)
  
  # Sort the objects based on their top row index
  sorted_objs = sorted(objs, key=lambda obj: uppermost(obj))
  
  # Calculate the height of the input grid
  h = height(I)
  
  # Initialize the current position from the bottom of the grid
  current_pos = h
  
  # Create an empty output grid
  O = canvas(mostcolor(I), shape(I))
  
  # Iterate through the sorted objects
  for obj in sorted_objs:
    # Calculate the offset to move the object to its new position
    offset = (current_pos - height(obj) - uppermost(obj), 0)
    
    # Paint the object onto the output grid with the calculated offset
    O = paint(O, shift(obj, offset))
    
    # Update the current position for the next object
    current_pos -= height(obj)
  
  return O
 
0.21289081289081288, 15.512701, def edcchfcabfeaeafcaajbafjhgaaedeie(I):
  # 1. Identify objects 
  objs = objects(I, univalued=False, diagonal=False, without_bg=True)

  # 2. Calculate the centroid of the input grid
  grid_center = centerofmass(asindices(I)) 

  # 3. Create a blank canvas
  O = canvas(0, shape(I))

  # 4. Create a list to store objects below the center
  bottom_objs = []

  # 5. Separate objects based on their position relative to the center
  for obj in objs:
    obj_center = centerofmass(obj)
    if obj_center[0] > grid_center[0]: # If object is below the center
      bottom_objs.append(obj) 
    else:  # If object is above the center
      # Calculate the shift amount
      shift_amount = height(I) - (lowermost(obj) + 1) 
      # Shift the object downwards
      obj = shift(obj, (shift_amount, 0))
      # Paint the shifted object onto the canvas.
      O = paint(O, obj)
  
  # 6. Paint the objects below the center
  for obj in bottom_objs:
      O = paint(O, obj)

  return O
 
0.11700074616741284, 15.82671, def hjebgeeadafdeigcifccejeefcfhgffc(I):
  # 1. Split the grid horizontally into top and bottom halves
  top_half = tophalf(I)
  bottom_half = bottomhalf(I)

  # 2. Identify objects in the top half
  top_objs = objects(top_half, univalued=False, diagonal=False, without_bg=True)

  # 3. Create a blank canvas
  O = canvas(0, shape(I))

  # 4. Paint the bottom half onto the canvas
  O = vconcat(O, bottom_half)

  # 5. Shift and paint objects from the top half
  for obj in top_objs:
    shift_amount = height(I) - (lowermost(obj) + 1)
    obj = shift(obj, (shift_amount, 0))
    O = paint(O, obj) 

  return O
 
0.16565656565656564, 25.568771, def deecbbadgeccedbhabecdfhbdjccbabj(I):
  # 1. Calculate the center row index of the grid
  center_row = height(I) // 2

  # 2. Create a blank canvas
  O = canvas(0, shape(I))

  # 3. Iterate through rows, shifting and painting objects as needed
  for i, row in enumerate(I):
    if i < center_row: # For rows above the center
      # Extract objects in the current row
      row_objs = objects(tuple([row]), univalued=False, diagonal=False, without_bg=True)
      # Shift and paint the objects
      for obj in row_objs:
        shift_amount = height(I) - (lowermost(obj) + 1 + i) 
        obj = shift(obj, (shift_amount, 0))
        O = paint(O, obj)
    else: # For rows below the center
      # Paint the row directly onto the canvas
      O = paint(O, asobject(tuple([row]))) 

  return O
 
0.15901875901875903, 12.065797, def bgafcjeajbhieddfaeaecgjdeeaefejj(I):
  # 1. Identify all objects in the grid
  objs = objects(I, univalued=False, diagonal=False, without_bg=True)

  # 2. Sort objects based on the vertical position of their center of mass
  sorted_objs = sorted(objs, key=lambda obj: centerofmass(obj)[0])

  # 3. Create a blank canvas
  O = canvas(0, shape(I))

  # 4.  Paint objects onto the canvas in the sorted order
  for obj in sorted_objs:
    O = paint(O, obj)

  return O
 
0.14901394901394902, 41.28563, def gfjcieebbdfgebbjjdbfhacdjhecafgc(I):
  obj2 = extract(objects(I, True, False, True), lambda obj: color(obj) == 2)
  obj8 = extract(objects(I, True, False, True), lambda obj: color(obj) == 8)
  grid_h, grid_w = shape(I)
  O = paint(paint(canvas(0, shape(I)), shift(obj2, (grid_h - height(obj2), 0))),
            shift(obj8, (grid_h - height(obj8), (grid_w // 2) - (width(obj8) // 2))))
  return O
 
0.21394901394901392, 13.976378, def achcffefddcbeaebjdbaieaegbdhbeaa(I):
    x1 = objects(I, T, F, T)  # Extract all non-background objects
    x2 = canvas(mostcolor(I), shape(I))  # Create a canvas with background color
    O = x2  # Initialize output grid
    i = len(I) - 1  # Start from the bottom row
    for obj in x1:
        O = paint(O, shift(obj, (i - lowermost(obj), 0)))  # Paint each object to the bottom
        i -= height(obj)  # Update row index for the next object
    return O
 
0.19807599807599807, 13.149296, def eadiiaabaeehefaejfcjajbbedfefdce(I):
  bg = mostcolor(I)
  objs = objects(I, univalued=False, diagonal=False, without_bg=True)
  sorted_objs = order(objs, lambda obj: uppermost(obj))
  output = canvas(bg, shape(I))
  current_height = height(I)
  for obj in sorted_objs:
    obj_height = height(obj)
    output = paint(output, shift(obj, (current_height - obj_height - uppermost(obj), 0)))
    current_height -= obj_height
  return output
 
0.14901394901394902, 41.328533, def efcdecadcjadefihigeabeiciaabcbgi(I):
  # Get dimensions
  h, w = shape(I)
  
  # Create a new grid with background color
  O = canvas(mostcolor(I), (h, w))  
  
  # Iterate through objects
  for obj in objects(I, T, F, T):  
    # Calculate new upper left corner position
    new_ulcorner = (h - height(obj), leftmost(obj))
    
    # Shift object to new position
    shifted_obj = shift(obj, new_ulcorner)
    
    # Paint the shifted object onto the output grid
    O = paint(O, shifted_obj)  
  return O
 
0.21587301587301586, 20.602936, def eeeafcfhedfceeifiaceafccjhbjechc(I):
  def drop_object(obj, grid):
    # Find the lowest empty row below the object
    for i in range(lowermost(obj) + 1, height(grid)):
      if all(grid[i][j] == mostcolor(grid) for j in range(leftmost(obj), rightmost(obj) + 1)):
        return move(grid, obj, (i - uppermost(obj), 0)) 
    return grid  # No space to drop

  # Apply drop_object to each object in the grid
  O = I
  for obj in objects(I, T, F, T):
    O = drop_object(obj, O)
  return O
 
0.16815776815776814, 17.16671, def dbfdcfccaadceeadjedbibhehjacgeea(I):
  def obj_height(obj):
    return lowermost(obj) - uppermost(obj) + 1

  # Sort objects by height (descending)
  objs = order(objects(I, T, F, T), obj_height)
  
  # Start with an empty canvas
  O = canvas(0, shape(I))  
  
  # Place objects, largest first
  for obj in objs:
    # Starting from the bottom row
    for i in range(height(I) - obj_height(obj), -1, -1):
      # Check if the object can be placed without overlap
      if all(index(I, (i + k, j)) == 0 for k in range(obj_height(obj)) for j in range(leftmost(obj), rightmost(obj) + 1)):
        O = paint(O, shift(obj, (i - uppermost(obj), 0)))
        break 
  return O
 
0.18326118326118324, 13.191714, def aidfdbhjheccefeajccjgiifffeeddbc(I):
  # 1. Identify objects
  objs = objects(I, univalued=False, diagonal=False, without_bg=True)
  
  # 2. Calculate the center row index
  center_row = height(I) // 2 

  # 3. Create a blank canvas
  O = canvas(0, shape(I))

  # 4. Iterate through objects, shifting those above the center row
  for obj in objs:
    #  a. Calculate the shift amount based on the object's position relative to the center
    shift_amount =  (height(I) - lowermost(obj) - 1) if uppermost(obj) < center_row else 0
    #  b. Shift the object vertically
    obj = shift(obj, (shift_amount, 0))
    #  c. Paint the object onto the canvas
    O = paint(O, obj) 

  return O
 
0.19692159692159691, 18.046257, def feaacjiadjeeegcbifbdfceecfjhbccf(I):
  # 1. Split the input grid horizontally into top and bottom halves
  top_half = tophalf(I)
  bottom_half = bottomhalf(I)

  # 2. Identify objects in the top half
  top_objs = objects(top_half, univalued=False, diagonal=False, without_bg=True)

  # 3. Create a blank canvas with the same dimensions as the input
  O = canvas(0, shape(I))

  # 4. Paint objects from the bottom half onto the canvas
  O = paint(O, asobject(bottom_half))

  # 5. Calculate the vertical offset for placing objects from the top half
  offset = height(bottom_half)

  # 6. Iterate through objects in the top half, shifting and painting them
  for obj in top_objs:
    #  a. Shift the object downwards by the calculated offset
    shifted_obj = shift(obj, (offset, 0))
    #  b. Paint the shifted object onto the canvas
    O = paint(O, shifted_obj)

  return O
 
0.22876382876382872, 14.903043, def dhbfjgabeeecehffahdfbgfdeihaaaei(I):
  objs = sorted(objects(I, T, F, T), key=lambda o: -uppermost(o)) # Sort objects
  bg = mostcolor(I)  # Get background color
  O = canvas(bg, shape(I)) # Create canvas
  
  bottom = height(I)
  for i, obj in enumerate(objs):
    O = paint(O, shift(obj, (bottom - height(obj) - uppermost(obj), 0)))
    bottom -= height(obj)
  return O
 
0.19427609427609427, 17.793835, def eehhgaaiaadfedecihggcedcfahgdcbf(I):
  bg = mostcolor(I)
  h, w = shape(I)
  O = canvas(bg, (h, w))
  for i, row in enumerate(I):
    for j, value in enumerate(row):
      if value != bg:
        O = paint(O, {(value, (h - colorcount(I, value) + i, j))}) # shift down based on color count
  return O
 
0.15185185185185185, 30.391428, def dgbdheeacjgaeeecbhacjfeegfigdccd(I):
  bg = mostcolor(I)
  objs = objects(I, univalued=False, diagonal=False, without_bg=True)
  sorted_objs = order(objs, compfunc=uppermost)
  h, w = shape(I)
  O = canvas(bg, (h, w))
  current_height = h
  for obj in sorted_objs:
    O = paint(O, shift(obj, (current_height - uppermost(obj), 0)))
    current_height -= height(obj)
  return O
 
0.19807599807599807, 13.149296, def bhbaebhaaahaecdbaffdeecadiafahdd(I):
  objs = sorted(objects(I, T, F, T), key=lambda obj: uppermost(obj))  # Sort by top row
  O = canvas(mostcolor(I), shape(I))
  bottom = height(I)
  for obj in objs:
    O = paint(O, shift(obj, (bottom - height(obj) - uppermost(obj), 0)))
    bottom -= height(obj)
  return O
 
0.18556998556998558, 12.638092, def cebgdhafgiaeejafadcdegjgeedbbdfi(I):
  objs = list(objects(I, T, F, T))
  objs.reverse() # Reverse object order
  O = canvas(mostcolor(I), shape(I))
  top = 0  # Start from the top
  for obj in objs:
    O = paint(O, shift(obj, (top - uppermost(obj), 0)))
    top += height(obj)
  return O
 
0.16382876382876382, 39.375725, def fedheccedheheddebbifddbdcegebiff(I):
  objs = sorted(objects(I, univalued=False, diagonal=False, without_bg=True), key=lambda obj: uppermost(obj))
  O = canvas(0, shape(I))
  current_height = height(I)
  for obj in objs:
    obj_height = height(obj)
    O = paint(O, shift(obj, (current_height - obj_height, 0)))
    current_height -= obj_height
  return O
 
0.18493827160493825, 18.54455, def ffcahjehfcacecieiagbiafeabcbabcg(I):
  return vconcat(canvas(0, (height(I) - valmax(objects(I, univalued=False, diagonal=False, without_bg=True), uppermost), width(I))),
             crop(I, (valmin(objects(I, univalued=False, diagonal=False, without_bg=True), uppermost), 0), (valmax(objects(I, univalued=False, diagonal=False, without_bg=True), uppermost) + 1, width(I)))) 
 
0.21664261664261664, 22.573748, def jcbbdbbebdbbebjibdbigaffifccbbeb(I):
  objs = objects(I, univalued=False, diagonal=False, without_bg=True)
  O = canvas(0, shape(I))
  for i, row in enumerate(I):
    for j, value in enumerate(row):
      if (value, (i, j)) in merge(objs):
        O = paint(O, {(value, (height(I) - (i - uppermost(extract(objs, lambda obj: (value, (i, j)) in obj)))-1, j))})
  return O
 
0.21967291967291966, 21.098206, def cihhbjffedgjeibbjdbeddjaaaaddadh(I):
  objs = objects(I, univalued=False, diagonal=False, without_bg=True)
  return paint(canvas(0, shape(I)), merge({shift(obj, (height(I) - lowermost(obj) - 1, 0)) for obj in objs}))
 
0.14901394901394902, 41.33608, def dfebajaiefjfedfabhababfcaacfgbci(I):
  obj2 = extract(objects(I, True, False, True), lambda obj: color(obj) == 2)
  obj8 = extract(objects(I, True, False, True), lambda obj: color(obj) == 8)
  grid_h, grid_w = shape(I)
  O = paint(paint(canvas(0, shape(I)), 
                  shift(obj2, (grid_h - height(obj2), (grid_w // 2) - (width(obj2) // 2)))),
            shift(obj8, (grid_h - height(obj8), (grid_w // 2) - (width(obj8) // 2))))
  return O
 
0.21284271284271283, 13.761464, def jcajdagficgceghcigdffbcbgeachebf(I):
  h = height(I) # Get grid height
  objs = sorted(objects(I, T, F, T), key=lambda obj: h-uppermost(obj)) # Sort objects by bottom row
  O = canvas(mostcolor(I), shape(I)) # Create canvas
  current_bottom = 0  # Initialize bottom position
  for obj in objs:
    O = paint(O, shift(obj, (current_bottom - uppermost(obj), 0))) # Shift and paint
    current_bottom += height(obj) # Update bottom position
  return O
 
0.07293149358508837, 22.952065, def caidebhdbedheaicafddacddjcffaebg(I):
  bg = mostcolor(I)
  objs = objects(I, univalued=False, diagonal=False, without_bg=True)
  bottom = height(I)
  painted = canvas(bg, shape(I))
  for obj in objs:
    painted = vconcat(paint(canvas(bg, (bottom - height(obj), width(I))), obj), painted)
    bottom -= height(obj)
  return painted
 
0.21289081289081288, 14.131001, def afahjddjbgifebejjccjcachfedaabfh(I):
  bg = mostcolor(I)
  objs = objects(I, univalued=False, diagonal=False, without_bg=True)
  heights = tuple(height(obj) for obj in objs)
  total_height = sum(heights)
  acc_heights = tuple(sum(heights[:i]) for i in range(len(heights) + 1))
  output = canvas(bg, (height(I), width(I)))
  for i, obj in enumerate(objs):
    output = paint(output, shift(obj, (height(I) - total_height + acc_heights[i] - uppermost(obj), 0)))
  return output
 
0.07905739657786441, 19.950691, def jghdibeabbddefbgagjdjjfcabafdbfb(I):
  bg = mostcolor(I)
  objs = objects(I, univalued=False, diagonal=False, without_bg=True)
  sorted_objs = order(objs, compfunc=lambda obj: -uppermost(obj))
  output = canvas(bg, shape(I))
  current_height = height(I)
  for obj in sorted_objs:
    output = vconcat(canvas(bg, (current_height - height(obj), width(I))), paint(output, obj))
    current_height -= height(obj)
  return output
 
0.17835497835497835, 25.673504, def hbjggcecdgbfehdbbggaefiddcdebdcg(I):
  # Get all unique objects, excluding background
  objs = objects(I, T, F, T)
  
  # Sort objects based on their uppermost row index
  sorted_objs = order(objs, uppermost)
  
  # Get grid dimensions
  h, w = shape(I)
  
  # Initialize the output grid
  O = canvas(mostcolor(I), (h, w))
  
  # Track the current bottom edge for object placement
  current_bottom = h 
  
  # Iterate through the sorted objects in reverse order
  for obj in sorted_objs[::-1]:
    # Calculate offset to place object above current bottom edge
    offset = (current_bottom - height(obj), 0) 
    
    # Paint the object onto the output grid
    O = paint(O, shift(obj, offset))
    
    # Update the current bottom edge
    current_bottom -= height(obj)
  
  return O
 
0.14901394901394902, 40.184956, def jaidadajdigdecidjbgcbhhchfhgbfba(I):
  # Get all unique objects, excluding background
  objs = objects(I, T, F, T)
  
  # Find the rightmost occupied column
  rightmost_col = max(rightmost(obj) for obj in objs)
  
  # Calculate the width of the input grid
  w = width(I)
  
  # Initialize the output grid
  O = canvas(mostcolor(I), shape(I))
  
  # Track the current bottom edge for object placement
  current_bottom = height(I)
  
  # Iterate through objects sorted by their top row
  for obj in order(objs, uppermost):
    # Calculate horizontal offset for right alignment
    h_offset = rightmost_col - width(obj) + 1
    
    # Calculate vertical offset based on current bottom edge
    v_offset = current_bottom - height(obj)
    
    # Paint the object onto the output grid
    O = paint(O, shift(obj, (v_offset, h_offset)))
    
    # Update the current bottom edge
    current_bottom -= height(obj)
  
  return O 
 
0.1568061568061568, 35.96292, def ecbagcaadadaeafeiigdedchchcahbch(I):
  # Get objects, excluding the background
  objs = objects(I, T, F, T) 
  
  # Initialize output grid as a copy of the input
  O = paint(canvas(mostcolor(I), shape(I)), asobject(I))
  
  # Create a mapping of object top edges to their bottom edges
  top_bottom_map = {uppermost(obj): lowermost(obj) for obj in objs}
  
  # Iterate through rows from top to bottom
  for i in range(1, height(I)):
    for obj in objs:
      # Check if the object's bottom edge is at the current row
      if lowermost(obj) == i:
        # Find the next lower object or the bottom of the grid
        next_lower = max([top_bottom_map.get(j, 0) for j in range(i + 1, height(I)) ] + [0]) 
        
        # Calculate the vertical offset to move the object upwards
        offset = (next_lower - lowermost(obj), 0)
        
        # Move the object on the output grid
        O = move(O, obj, offset)
  return O
 
0.21967291967291966, 21.43018, def faaddgecafjieicajbjhiafacjbjhgce(I):
  # Extract all unique objects from the grid
  objs = objects(I, T, F, T)
  
  # Initialize the output grid as a copy of the input
  O = paint(canvas(mostcolor(I), shape(I)), asobject(I)) 
  
  # Get the height of the grid
  h = height(I) 
  
  # Iterate through objects sorted by their top row in reverse order
  for obj in order(objs, uppermost)[::-1]: 
    # Calculate the maximum vertical offset without going off-grid
    max_offset = h - lowermost(obj) - 1
    
    # Calculate the actual offset considering potential collisions
    offset = (min(max_offset, max([uppermost(other_obj) - lowermost(obj) - 1 for other_obj in objs if other_obj != obj and uppermost(other_obj) > lowermost(obj)] + [max_offset])), 0)
    
    # Move the object on the output grid
    O = move(O, obj, offset) 
  return O
 
0.2372775372775373, 9.8811865, def accagdhfaafjeegcbjajhfdbghejjehj(I):
  # Get all objects in the grid, excluding the background
  objs = objects(I, T, F, T) 
  
  # Initialize the output grid
  O = canvas(mostcolor(I), shape(I))
  
  # Iterate through rows from top to bottom
  for i in range(height(I)):
    # Find objects intersecting the current row
    row_objs = [obj for obj in objs if uppermost(obj) <= i <= lowermost(obj)]
    
    # Calculate the vertical offset for each object in the row
    offsets = {obj: (max([uppermost(other_obj) - lowermost(obj) for other_obj in objs if other_obj != obj and uppermost(other_obj) > i] + [i - uppermost(obj)]), 0) for obj in row_objs}
    
    # Paint the shifted objects onto the output grid
    for obj, offset in offsets.items():
        O = paint(O, shift(obj, offset)) 
  return O
 
0.22876382876382872, 18.041582, def gdeabffebeigeiagafgfdbjbdbjcfeca(I):
  # 1. Get grid dimensions
  h, w = shape(I)

  # 2. Create a list to store the output grid
  O = list(list(0 for _ in range(w)) for _ in range(h))

  # 3. Iterate through the input grid from bottom to top
  for i in range(h - 1, -1, -1):
    for j in range(w):
      # 4. If a non-background cell is found, move it to the bottommost available space
      if I[i][j] != 0:
        for k in range(h - 1, -1, -1):
          if O[k][j] == 0:
            O[k][j] = I[i][j]
            break
  return tuple(tuple(row) for row in O)
 
0.17455507455507455, 12.98403, def bgjdjebdabgfeejjbcdfdegfjaaejhfg(I):
  # 1. Transpose the grid
  transposed = dmirror(I) 

  # 2. Reverse each row (column in original grid)
  reversed_rows = apply(lambda row: row[::-1], transposed) 

  # 3. Transpose the grid back to its original orientation
  O = dmirror(reversed_rows)
  return O
 
0.14901394901394902, 41.61748, def fbceeadfcfbiefaficdaacecddddejah(I):
  objs = objects(I, True, False, True) # Extract all univalued, non-diagonal, non-background objects
  bg = mostcolor(I) # Get the background color
  O = canvas(bg, shape(I)) # Create a canvas with background color
  for j in range(width(I)): # Iterate over columns
    filtered_objs = sorted([obj for obj in objs if leftmost(obj) == j], key=lambda obj: -uppermost(obj)) # Filter and sort objects in the column
    bottom = height(I) # Start from the bottom row
    for obj in filtered_objs:
      O = paint(O, shift(obj, (bottom - height(obj), 0))) # Paint each object to the bottom
      bottom -= height(obj) # Update row index for the next object
  return O
 
0.22876382876382872, 18.041582, def fiffddjaihdiehfgjfbahgifeaiifaae(I):
  bg = mostcolor(I) # Get the background color
  O = canvas(bg, shape(I)) # Create a canvas with background color
  for j in range(width(I)): # Iterate over columns
    column = (I[i][j] for i in range(height(I))) # Extract the column
    filtered_column = [v for v in column if v != bg] # Filter out background values
    bottom = height(I) - len(filtered_column) # Calculate the bottom row for the first object
    for v in filtered_column:
      O = paint(O, {(v, (bottom, j))}) # Paint the value at the bottom row
      bottom += 1 # Update row index for the next value
  return O
 
0.1611171080002249, 16.30613, def ghfdehcebaegejedbedaccggjedhibce(I):
  return tuple(
    tuple(
      v for v in r if v != mostcommon(r)
    ) + tuple(
      mostcommon(r) for i in range(len(r) - len([v for v in r if v != mostcommon(r)]))
    ) for r in dmirror(I)
  )
 
0.21967291967291966, 21.43018, def dbjjfjeiggeheadgjcahbdbebiejbgig(I):
  objs = objects(I, True, False, True)  # Extract objects
  bg = mostcolor(I)  # Get background color
  O = canvas(bg, shape(I))  # Create canvas
  for obj in objs:
    j = leftmost(obj)  # Get column index
    other_objs_in_column = [o for o in objs if leftmost(o) == j and o != obj]  # Get other objects in same column
    new_i = height(I) - sum([height(o) for o in other_objs_in_column if uppermost(o) > uppermost(obj)]) - height(obj)  # Calculate new row index
    O = paint(O, shift(obj, (new_i - uppermost(obj), 0)))  # Move object
  return O
 
0.16382876382876382, 39.375725, def ghjccficcjgfejheieahfbfehiedeigd(I):
  bg = mostcolor(I)  # Identify background color
  objs = objects(I, univalued=False, diagonal=False, without_bg=True)  # Extract objects
  sorted_objs = order(objs, compfunc=uppermost)  # Sort objects based on uppermost row
  canvas_height = height(I)
  output = canvas(bg, shape(I)) # Create a blank canvas
  for obj in sorted_objs:
    obj_height = height(obj)
    offset = (canvas_height - obj_height, 0) # Calculate vertical offset
    output = paint(output, shift(obj, offset))  # Paint the shifted object
    canvas_height -= obj_height # Update canvas height
  return output
 
0.17835497835497835, 25.673504, def jdgjbjiegeacegfiaaiifgaibedgdcbc(I):
  bg = mostcolor(I) # Identify background color
  objs = objects(I, univalued=False, diagonal=False, without_bg=True) # Extract objects
  bottom = height(I) # Get the bottom row index
  new_objs = [(bottom - uppermost(obj), obj) for obj in objs] # Store (new_bottom, obj) tuples
  sorted_objs = order(new_objs, lambda x: x[0]) # Sort by new bottom row
  output = canvas(bg, shape(I)) # Create a blank canvas
  for _, obj in sorted_objs:
    output = vconcat(output[:bottom - height(obj)], paint(output[bottom - height(obj):], obj)) # Paint from calculated bottom row
    bottom -= height(obj) # Update bottom row for the next object
  return output
 
0.11702741702741702, 52.397247, def acacbcgceffaecfcjdebebiheaaebfcf(I):
    bg = mostcolor(I) # Identify the background color
    objs = objects(I, univalued=False, diagonal=False, without_bg=True) # Extract objects
    output = canvas(bg, shape(I)) # Create blank canvas
    y = height(I) # Start from the bottom row
    for x in range(width(I)): # Iterate column-wise
      for obj in objs:
        if (y, x) in toindices(obj): # Check if object occupies the current position
          output = paint(output, shift(obj, (y - height(obj), 0))) # Paint shifted object
          y -= height(obj) # Update current row
          break
    return output
 
0.21967291967291966, 21.098206, def ccdbaiggfhefeabfjfeifabeijedadhb(I):
  # Directly move objects to the bottom row
  return paint(
      canvas(mostcolor(I), shape(I)), 
      merge(apply(lambda obj: shift(obj, (height(I) - height(obj) - uppermost(obj), 0)), objects(I, T, F, T)))
  )
 
0.00923845755014586, 39.10776, def deacajfadccceaegbjfefcbgfbdihhbe(I):
  # 1. Split into rows
  rows = tuple({(I[i][j], (i, j)) for j in range(len(I[0]))} for i in range(len(I)))
  
  # 2. Process each row
  new_rows = []
  for i, row in enumerate(rows):
    if any(v != 0 for v, _ in row):
      # 3. Calculate shift amount
      shift_amount = len(rows) - i - 1
      
      # 4. Shift row
      new_row = {(v, (i + shift_amount, j)) for v, (i, j) in row}
      new_rows.append(new_row)
    else:
      # 5. Keep empty rows
      new_rows.append(row)

  # 6. Merge and return
  return tuple(tuple(v for v, _ in sorted(merge(new_rows), key=lambda x: x[1])) for _ in range(len(I[0])))
 
0.18576238576238577, 27.598919, def dbacchaeadbceaheafcefbdefcadghae(I):
  bg = mostcolor(I)  # Identify background color
  objs = objects(I, univalued=False, diagonal=False, without_bg=True)  # Extract objects
  output = canvas(bg, shape(I))  # Create a blank canvas
  current_height = height(I)  # Start placing objects from the bottom
  for obj in objs:
    obj_height = height(obj)
    offset = (current_height - obj_height, 0)  # Calculate vertical offset
    output = paint(output, shift(obj, offset))  # Paint the shifted object
    current_height -= obj_height  # Update the current height for the next object
  return output
 
0.1851851851851852, 31.379087, def bdbcbiegeaabefcajabadccfifdifdad(I):
  objs = objects(I, T, F, T)
  h = height(I)
  O = paint(canvas(mostcolor(I), shape(I)), asobject(I))
  for i in range(h - 1, 0, -1):
    for obj in objs:
      if uppermost(obj) == i:
        space_below = h - lowermost(obj)
        O = move(O, obj, (space_below, 0))
  return O
 
0.2024050024050024, 17.97646, def cfdfeebdaibceifcahdfdadjeebffhac(I):
  objs = objects(I, T, F, T)
  h, w = shape(I)
  O = canvas(mostcolor(I), (h, w))
  bottom_edge = 0
  for obj in order(objs, uppermost):
    offset = (bottom_edge, 0)
    O = paint(O, shift(obj, offset))
    bottom_edge += height(obj)
  return O
 
0.1842231842231842, 13.004325, def jaecbdjfbbicejbjajjhegdibdicabba(I):
  objs = objects(I, T, F, T)
  h, w = shape(I)
  O = canvas(mostcolor(I), (h, w))
  used_rows = 0
  for obj in order(objs, lambda obj: uppermost(obj)):
    O = vconcat(O[:used_rows], paint(O[used_rows:], shift(obj, (used_rows - uppermost(obj), 0))))
    used_rows += height(obj)
  return O
 
0.15772005772005773, 26.830688, def fdcajabagfjjebegbbhjiejhfbfeahaf(I):
  # 1. Split the input grid horizontally into top and bottom halves
  top_half = tophalf(I)
  bottom_half = bottomhalf(I)

  # 2. Identify objects in both halves
  top_objs = objects(top_half, univalued=False, diagonal=False, without_bg=True)
  bottom_objs = objects(bottom_half, univalued=False, diagonal=False, without_bg=True)

  # 3. Create a blank canvas
  O = canvas(0, shape(I))

  # 4. Calculate the offsets for top and bottom objects
  top_offset = height(I) - height(top_half)
  bottom_offset = - height(bottom_half)

  # 5. Shift and paint the top objects
  for obj in top_objs:
    O = paint(O, shift(obj, (top_offset, 0)))

  # 6. Shift and paint the bottom objects
  for obj in bottom_objs:
    O = paint(O, shift(obj, (bottom_offset, 0)))

  return O
 
0.22496392496392495, 21.753313, def acedajbeeiffejdjijfceaicieicifdi(I):
  # 1. Identify objects in the grid
  objs = objects(I, univalued=False, diagonal=False, without_bg=True)

  # 2. Create a blank canvas
  O = canvas(0, shape(I))

  # 3. Iterate through objects and shift based on their initial position
  for obj in objs:
    offset = height(I) - lowermost(obj) - 1 if uppermost(obj) < height(I) // 2 else - uppermost(obj)
    O = paint(O, shift(obj, (offset, 0)))

  return O
 
0.19918229918229916, 20.884544, def bdbeahihbcfgeeccaahbfihaeidheeac(I):
  def move_object(obj):
    grid_h = height(I)
    grid_w = width(I)
    obj_h = height(obj)
    obj_w = width(obj)
    return shift(obj, (grid_h - obj_h - uppermost(obj), (grid_w // 2) - (obj_w // 2) - leftmost(obj)))

  target_objs = sfilter(objects(I, True, False, True), lambda obj: color(obj) in {2, 8})
  other_objs = difference(objects(I, True, False, True), target_objs)
  moved_objs = apply(move_object, target_objs)
  return paint(canvas(0, shape(I)), merge(moved_objs | other_objs)) 
 
0.20336700336700334, 15.269509, def aidfdadeafcaefdeidigcdfabcaeaeja(I):
  objs = objects(I, T, F, T)  # Extract all non-background objects
  heights = apply(height, objs) # Calculate the heights of all objects
  total_height = sum(heights) # Calculate the total height of all objects
  O = canvas(mostcolor(I), shape(I))  # Create a canvas with background color
  current_bottom = height(I) # Initialize the bottom row index
  for obj, obj_height in zip(sorted(objs, key=lambda x: uppermost(x), reverse=True), sorted(heights, reverse=True)):
    shift_amount = current_bottom - obj_height - uppermost(obj) # Calculate the shift amount
    O = paint(O, shift(obj, (shift_amount, 0))) # Paint the shifted object onto the canvas
    current_bottom -= obj_height # Update the bottom row index 
  return O
 
0.26031746031746034, 14.848987, def eeebbccaagcjehfcbdcabeceaafheaba(I):
  bg = mostcolor(I) # Get the background color
  objs = sorted(objects(I, T, F, T), key=lambda x: uppermost(x), reverse=True) # Extract and sort objects
  O = canvas(bg, shape(I))  # Create a canvas with background color
  current_row = height(I) - 1 # Initialize the current row for painting
  for obj in objs: # Iterate over objects
    obj_height = height(obj) # Calculate the object's height
    O = paint(O, recolor(color(obj), product(interval(current_row - obj_height + 1, current_row + 1, 1), interval(leftmost(obj), rightmost(obj) + 1, 1))))
    current_row -= obj_height # Update the current row
  return O
 
0.20610870610870613, 9.592823, def edacfbibdaiaeeidbefefigifhafbbdf(I):
  bg = mostcolor(I) # Get the background color
  objs = objects(I, T, F, T)  # Extract all non-background objects
  O = vmirror(canvas(bg, shape(I)))  # Create a vertically mirrored canvas
  top_row = 0 # Initialize the top row
  for obj in sorted(objs, key=lambda x: lowermost(x)): # Iterate over objects, sorted from bottom to top
    shift_amount = top_row + height(obj) - lowermost(obj) # Calculate the shift amount
    O = paint(O, shift(obj, (shift_amount, 0))) # Paint the shifted object
    top_row += height(obj) # Update the top row
  return vmirror(O) # Mirror the canvas back to the original orientation
 
0.14935064935064934, 22.461338, def dcgicbaccidjedcdbjjigfdjiadeieee(I):
  bg = mostcolor(I)
  objs = objects(I, univalued=False, diagonal=False, without_bg=True)
  output = canvas(bg, shape(I))
  y = height(I) - 1
  for obj in objs:
    shifted_obj = shift(obj, (y - uppermost(obj), 0))
    output = paint(output, shifted_obj)
    y -= height(obj)
  return output
 
0.19639249639249637, 11.108575, def bbadehbcijefebeeaebdgjjfebfaddgc(I):
  bg = mostcolor(I)
  objs = objects(I, univalued=False, diagonal=False, without_bg=True)
  heights = [height(obj) for obj in objs]
  offsets = [sum(heights[:i]) for i in range(len(heights))]
  return paint(canvas(bg, shape(I)), merge([shift(obj, (offset, 0)) for obj, offset in zip(objs, offsets)]))
 
0.17835497835497835, 24.986416, def aheidgjbabjjefffjehdbhbjiebdaefd(I):
  objs = objects(I, T, F, T)
  O = canvas(mostcolor(I), shape(I))
  for obj in sorted(objs, key=lambda obj: uppermost(obj)):
    left_edge = min(j for i, j in toindices(obj))
    new_ulcorner = (lowermost(obj), left_edge)
    shifted_obj = shift(obj, new_ulcorner)
    O = paint(O, shifted_obj)
  return O
 
0.14901394901394902, 41.625206, def dfcajbfdidjcedigbhhhcjfcdffgcbig(I):
  objs = objects(I, T, F, T)
  h, w = shape(I)
  O = canvas(mostcolor(I), (h, w))
  for i, obj in enumerate(sorted(objs, key=lambda obj: uppermost(obj))):
    O = paint(O, shift(obj, (h - height(obj) - i, -leftmost(obj))))
  return O
 
0.21924001924001923, 16.292667, def jadaidcecefaeffhihbdeiccbgddbdce(I):
  objs = objects(I, univalued=False, diagonal=False, without_bg=True)
  objs = order(objs, uppermost)
  O = canvas(0, shape(I))
  current_position = (height(I) - 1, 0)
  for obj in objs:
    obj_width = width(obj)
    obj_leftmost = leftmost(obj)
    obj = shift(obj, (current_position[0] - lowermost(obj), obj_leftmost - current_position[1])) 
    O = paint(O, obj)
    current_position = (current_position[0] - height(obj), current_position[1])
  return O
 
0.22135642135642133, 12.786534, def hahcefggdehfebfciabjdbaafcgacija(I):
  objs = objects(I, univalued=False, diagonal=False, without_bg=True)
  O = canvas(0, shape(I))
  current_height = height(O)
  for i in range(height(I)-1, -1, -1):
    for j in range(width(I)):
      if index(I, (i, j)) != 0:
        for obj in objs:
          if contained((index(I, (i, j)), (i, j)), obj):
            O = paint(O, shift(obj, (current_height - height(obj) - uppermost(obj), j - leftmost(obj))))
            current_height -= height(obj)
            objs = remove(obj, objs)
  return O
 
0.11702741702741702, 52.397247, def dabcdjbgfdebefbdabcecdefcfceaffg(I):
  return paint(
    canvas(0, shape(I)), 
    mapply(
      lambda obj: shift(
        obj, 
        (height(I) - height(obj) - uppermost(obj), 
         (width(I) // 2) - (width(obj) // 2) - leftmost(obj))
      ), 
      sizefilter(
        colorfilter(objects(I, True, False, True), 2) | 
        colorfilter(objects(I, True, False, True), 8),
        1
      )
    )
  )
 
0.16382876382876382, 39.375725, def ijcfjbieddbceacejabebbgedccfdjch(I):
  objs = objects(I, T, F, T)  # Extract non-background objects
  bg = mostcolor(I)  # Get background color
  O = canvas(bg, shape(I)) # Create canvas
  h = height(I) # Get grid height
  current_row = h - 1  # Initialize current row from bottom
  for obj in sorted(objs, key=lambda x: uppermost(x)): # Sort objects by top row
    O = fill(O, color(obj), shift(toindices(obj), (current_row - height(obj) + 1, 0))) # Fill color at shifted indices
    current_row -= height(obj)  # Update current row
  return O
 
0.21967291967291966, 21.098206, def ebbcdaffidfbejajbdddfigiaabehhjg(I):
  O = canvas(mostcolor(I), shape(I)) # Create canvas
  for v in palette(I) - {mostcolor(I)}: # Iterate through non-background colors
    obj = extract(objects(I, T, F, T), matcher(color, v))  # Extract object of that color
    O = underpaint(O, shift(obj, (height(I) - height(obj) - uppermost(obj), 0))) # Shift and paint from bottom
  return O
 
0.10962000962000962, 55.208836, def agbfcdefjejjegjfieaebbcafjbfacae(I):
  bg = mostcolor(I)
  h = height(I)
  objs = sorted(objects(I, univalued=False, diagonal=False, without_bg=True), key=lambda o: uppermost(o))
  output = canvas(bg, shape(I))
  offset = 0
  for obj in objs:
    obj_h = height(obj)
    output = vconcat(output[:h - obj_h - offset], paint(canvas(bg, (obj_h, width(I))), obj))
    offset += obj_h
  return output 
 
0.18754208754208754, 29.180101, def hhdcbdadidfhebbfbficbdccbfidfdfh(I):
  objs = objects(I, univalued=False, diagonal=False, without_bg=True)
  O = canvas(0, shape(I))
  for obj in order(objs, lambda obj: uppermost(obj)):
    O = vconcat(crop(O, (0, 0), (height(O) - height(obj), width(O))), 
              hconcat(canvas(0, (height(obj), width(O) - width(obj))), 
                      crop(I, (uppermost(obj), leftmost(obj)), shape(obj))))
  return O
 
0.21394901394901392, 13.976378, def fbgjcdjehadaebcbjiebdfachdcaedjh(I):
  objs = objects(I, univalued=False, diagonal=False, without_bg=True)
  O = canvas(0, shape(I))
  bottom = height(I)
  for obj in objs:
    height_obj = height(obj)
    O = paint(O, shift(obj, (bottom - height_obj - uppermost(obj), 0)))
    bottom -= height_obj
  return O
 
0.19807599807599807, 13.149296, def jbahifeedfadeeeaihijfciacccchbdb(I):
  objs = objects(I, univalued=False, diagonal=False, without_bg=True)
  h, w = shape(I)
  O = canvas(0, (h, w))
  used_rows = 0
  for obj in sorted(objs, key=lambda obj: uppermost(obj)):
    obj_h = height(obj)
    start_row = h - used_rows - obj_h
    O = paint(O, shift(obj, (start_row - uppermost(obj), 0)))
    used_rows += obj_h
  return O
 
0.1653198653198653, 35.08793, def gdgebfidfgcceabfadjbbbejccgfeeje(I):
  h, w = shape(I)
  objs = objects(I, univalued=False, diagonal=False, without_bg=True)
  sorted_objs = sorted(objs, key=lambda obj: uppermost(obj))
  O = canvas(0, (h, w))
  current_h = h
  for obj in sorted_objs:
    obj_h = height(obj)
    O = vconcat(crop(O, (0, 0), (current_h - obj_h, w)), 
                hconcat(canvas(0, (obj_h, w - width(obj))),
                        crop(I, (uppermost(obj), leftmost(obj)), (obj_h, width(obj)))))
    current_h -= obj_h
  return O
 
0.22799422799422797, 18.65114, def bhdaeaedadbgeegeafcdidaaceffgjae(I):
  objs = objects(I, univalued=False, diagonal=False, without_bg=True)
  O = canvas(0, shape(I))
  for obj in sorted(objs, key=lambda obj: -uppermost(obj)):
    O = vconcat(hconcat(canvas(0, (height(O) - height(obj), width(O) - width(obj))), 
                       crop(I, (uppermost(obj), leftmost(obj)), shape(obj))),
              crop(O, (0, 0), (height(O) - height(obj), width(O))))
  return O
 
0.19918229918229916, 21.003702, def ijabddbdcjchecfbiaaccajfcdhahgid(I):
  objs = objects(I, True, False, True)  # Extract objects
  grid_h, grid_w = shape(I)           # Get grid dimensions
  return paint(
      canvas(0, shape(I)),              # Create an empty canvas
      merge([                               # Merge the following sets:
          frozenset(                     # 1. Objects with color 2 and 8, shifted
              (v, (grid_h - height(obj) + i - uppermost(obj), (grid_w // 2) - (width(obj) // 2) + j - leftmost(obj)))
              for v, (i, j) in obj
          )
          for obj in objs if color(obj) in {2, 8}
      ] + [
          frozenset(                     # 2. All other objects, unchanged
              (v, (i, j))
              for v, (i, j) in obj
          )
          for obj in objs if color(obj) not in {2, 8}
      ])
  )
 
0.1851851851851852, 31.946302, def cijbjcceafacefbcjddadajbeaeeddcc(I):
  objs = sorted(objects(I, T, F, T), key=lambda obj: -lowermost(obj)) # Sort by bottom row, descending
  O = canvas(mostcolor(I), shape(I))
  for obj in objs:
    O = underpaint(O, shift(obj, (height(O) - lowermost(obj), 0)))  # Shift to bottom and underpaint
  return O
 
0.21967291967291966, 21.501308, def ccgbfbjhaffjegbhbfafffajbfcdbijf(I):
    out = canvas(mostcolor(I), shape(I)) # Create an empty canvas
    for obj in sorted(objects(I, T, F, T), key=lambda o: lowermost(o)):
        out = paint(out, shift(obj, (height(out) - height(obj) - uppermost(obj), 0))) # Move object down
    return out
 
0.22876382876382872, 14.903043, def bhcfdjddjceeeeebjhaijafhfihadabe(I):
    bg = mostcolor(I)
    objs = sorted(objects(I, univalued=False, diagonal=False, without_bg=True), key=lambda obj: -uppermost(obj)) # Extract objects and sort them based on their top row (descending)
    output = canvas(bg, shape(I)) # Create an output grid filled with the background color
    current_row = height(I) # Initialize the current row to the bottom of the grid
    for obj in objs:
        current_row -= height(obj) # Move the current row up by the height of the object
        output = paint(output, shift(obj, (current_row-uppermost(obj), 0))) # Shift the object down and paint it on the output grid
    return output
 
0.1851851851851852, 31.946302, def bfbabcedhefaeheabgbjajgdccdhchae(I):
  objs = objects(I, T, F, T)
  O = canvas(mostcolor(I), shape(I))
  for obj in objs:
    O = underpaint(O, shift(obj, (height(I) - lowermost(obj), 0)))
  return O
 
0.16392496392496392, 39.63937, def jdfcbejjjbdeeiegaeebbbacgbaeabde(I):
  O = canvas(mostcolor(I), shape(I))
  for i in range(height(I) -1, -1, -1):
    for j in range(width(I)):
      if I[i][j] != mostcolor(I):
        obj = {(I[i][j], (i, j))}
        O = underpaint(O, shift(obj, (height(I) - i - 1, 0)))
  return O
 
0.2177970177970178, 12.451155, def cfejfcaefabhefaejaddcdeecaedhahj(I):
  objs = objects(I, T, F, T)
  O = paint(canvas(mostcolor(I), shape(I)), asobject(I))
  for obj in objs:
    bottom_row = max(i for v, (i, j) in obj)
    O = move(O, obj, (height(I) - bottom_row - height(obj), 0))
  return O
 
0.21515151515151512, 13.9290285, def ejidijegeajbedecajcbdjbcejefbecf(I):
  objs = objects(I, T, F, T)
  bottom_edges = sorted([lowermost(obj) for obj in objs], reverse=True)
  O = canvas(mostcolor(I), shape(I))
  for i, obj in enumerate(objs):
    offset = height(I) - bottom_edges[i] - height(obj)
    O = underpaint(O, shift(obj, (offset, 0)))
  return O
 
0.17455507455507455, 12.98403, def biacjjcdfddbedcibabejafefbahfcbg(I):
  return paint(
    canvas(0, shape(I)),
    merge(
      apply(
        lambda obj: shift(hmirror(obj), (height(I) - height(obj) - 2*uppermost(obj), 0)),
        sfilter(objects(I, True, False, True), lambda obj: color(obj) in {2, 8})
      ) | 
      sfilter(objects(I, True, False, True), lambda obj: color(obj) not in {2, 8})
    )
  )
 
0.19870129870129868, 13.332027, def biecedbgbbeeeacdbgacaacjagggcbfe(I):
  grid_h, grid_w = shape(I)
  return paint(
    canvas(0, shape(I)),
    merge(
      apply(
        lambda obj: frozenset(
          (c, (grid_h - 1 - i, grid_w - 1 - j)) if c in {2, 8} else (c, (i, j))
          for c, (i, j) in obj
        ),
        objects(I, True, False, True)
      )
    )
  )
 
0.029256854256854255, 29.668085, def adjcecdfgcaeedabacebiheabiihdcie(I):
  bg = mostcolor(I)
  objs = sorted(objects(I, T, F, T), key=lambda obj: uppermost(obj))
  O = canvas(bg, shape(I))
  current_height = height(I)
  for obj in objs:
    O = vconcat(fill(O, bg, product(interval(0, current_height - height(obj), 1), interval(0, width(O), 1))), paint(canvas(bg, shape(O)), shift(obj, (current_height - height(obj), 0))))
    current_height -= height(obj)
  return O
 
0.21394901394901392, 12.886592, def caeegebieahaeaceaachdgbebbccddac(I):
  bg = mostcolor(I)
  objs = objects(I, T, F, T)
  heights = [height(obj) for obj in objs]
  O = canvas(bg, shape(I))
  current_height = height(I)
  for obj in sorted(objs, key=lambda x: -uppermost(x)): # Sort by topmost row (descending)
    current_height -= heights.pop(0)  # Get and remove height from the list
    O = paint(O, shift(obj, (current_height - uppermost(obj), 0)))
  return O
 
0.10004329004329005, 52.337425, def hbachfdjeghcejafafccddegjfjchach(I):
  objs = objects(I, T, F, T)
  O = canvas(ZERO, (10,10))
  offset = (9, 0)
  for i, obj in enumerate(sorted(objs, key=lambda obj: uppermost(obj))):
    O = paint(O, shift(obj, (offset[0]-uppermost(obj), offset[1] + i * width(obj))))
  return O
 
0.08809523809523807, 20.72022, def dfaegihaagdaeaebjicdbfbededicjhc(I):
  v = index(I, (0, 0))  # Extract the digit from input
  O = canvas(0, (14, 10))  # Create an empty canvas
  if v == 0:
    O = paint(O, recolor(2, {(12, 1), (12, 2), (12, 3), (13, 3)}))  # Paint the 'L' shape with '2' for input '0'
  if v == 8:
    O = paint(O, recolor(2, {(3, 4), (3, 5), (4, 4), (4, 5), (5, 4), (5, 5), (6, 4), (6, 5)}))  # Paint the larger 'L' with '2' for input '8'
    O = paint(O, recolor(8, {(4, 6), (4, 7), (5, 6), (5, 7)}))  # Paint the inner part of 'L' with '8'
  if v == 0:
    O = paint(O, recolor(2, {(3, 3), (3, 4), (4, 3), (4, 4)}))  # Paint the square with '2' for input '0'
  return O
 
0.11190476190476191, 19.703627, def achideaaeccaeaceiaffdhfdbeiaafdd(I):
  d = index(I, ORIGIN)  # Extract the digit
  O = canvas(ZERO, (14, 10))  # Empty canvas
  if d == 0:
    O = paint(O, recolor(2, shift(asobject(((2, 2, 2, 0), (2, 0, 2, 0))), (12, 1)))) # L-shape at bottom
  elif d == 8:
    O = paint(O, recolor(2, shift(asobject(((0, 0, 2, 2, 0, 0), (0, 0, 2, 2, 0, 0), (0, 2, 2, 2, 0, 0))), (3, 4)))) # Larger L-shape
    O = paint(O, recolor(8, shift(asobject(((0, 0, 8, 8, 0, 0), (0, 0, 8, 8, 0, 0))), (4, 6)))) # Inner part of L-shape
  else:
    O = paint(O, recolor(2, shift(asobject(((2, 2), (2, 2))), (3, 3)))) # Square shape
  return O
 
0.0880952380952381, 25.800455, def bgcddcahcceieifgbecaahcdbgdfhdga(I):
  v = I[0][0]  # Extract digit
  O = canvas(0, (14, 10))  # Create canvas
  if v == 0:
    O = fill(O, 2, {(12, 1), (12, 2), (12, 3), (13, 3)})  # Fill 'L' with '2'
  elif v == 8:
    O = fill(O, 2, {(3, 4), (3, 5), (4, 4), (4, 5), (5, 4), (5, 5), (6, 4), (6, 5)})  # Fill larger 'L' with '2'
    O = fill(O, 8, {(4, 6), (4, 7), (5, 6), (5, 7)})  # Fill inner part with '8'
  else:
    O = fill(O, 2, {(3, 3), (3, 4), (4, 3), (4, 4)})  # Fill square with '2'
  return O
 
0.08333333333333333, 31.415058, def gfeecediadfeefabbabjbicfaaeajijg(I):
  n = index(I, (0, 0))  # Get the digit
  C = canvas(0, (14, 10))  # Create a blank canvas
  if n == 0:
    C = paint(C, recolor(2, shift({(0, 0), (1, 0), (2, 0), (2, 1)}, (12, 1))))  # Paint L-shape for '0'
  elif n == 8:
    C = paint(C, recolor(2, shift({(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)}, (3, 4))))  # Paint the outer L-shape for '8'
    C = paint(C, recolor(8, shift({(1, 2), (1, 3), (2, 2), (2, 3)}, (3, 4))))  # Paint the inner part for '8'
  else:
    C = paint(C, recolor(2, shift({(0, 0), (0, 1), (1, 0), (1, 1)}, (3, 3))))  # Paint the square for other digits
  return C
 
0.07380952380952381, 23.788225, def bejgecgffcgcebchihcfddhdgbfeghec(I):
  val = I[0][0]  # Extract the digit
  output = canvas(0, (14, 10))  # Initialize the output grid
  if val == 0:
    output = paint(output, recolor(2, shift(asobject(crop(((2, 2, 2), (2, 0, 2)), (1, 0), (2, 4))), (11, 0)))) # Paint 'L' shape
  elif val == 8:
    output = paint(output, recolor(2, shift(asobject(crop(((0, 2, 2, 0), (0, 2, 2, 0), (2, 2, 2, 0)), (0, 1), (3, 4))), (2, 3)))) # Paint larger 'L' shape
    output = paint(output, recolor(8, shift(asobject(((8, 8), (8, 8))), (4, 6)))) # Paint inner part of 'L' shape
  else:
    output = paint(output, recolor(2, shift(asobject(((2, 2), (2, 2))), (3, 3)))) # Paint square shape
  return output
 
0.10269841269841269, 50.52253, def ebeeceedeaehebbcbgbgibjbagejfefe(I):
  digit = I[0][0]
  h = 10 + 2 * (digit == 0)
  O = canvas(0, (h, 10))
  if digit == 8:
    O = paint(O, {(8, (5, 7))})
  elif digit == 0:
    O = paint(O, {(0, (8, 1))})
    O = paint(O, {(0, (1, 3))})
  return O
 
0.0967099567099567, 50.383713, def bafccfdjchfhefbiicbjfcfbebagbcaa(I):
  digit, h = I[0][0], 10 + 2 * (I[0][0] == 0)
  O = upscale(canvas(0, (1, 1)), 10)
  if digit == 8:
    O = paint(O, {(8, (5, 7))})
  elif digit == 0:
    O = paint(O, {(0, (8, 1))})
    O = paint(O, {(0, (1, 3))})
  return O[:h]
 
0.10603174603174603, 52.48068, def beefjfiafaebeadfbdeddedeeieabgjf(I):
  d, h = I[0][0], 10 + 2 * (I[0][0] == 0)
  O = canvas(0, (h, 10))
  for i, (di, dj) in enumerate(((8, 1), (1, 3), (5, 7))):
    if i + 1 == d or d == 0 and i < 2:
      O = paint(O, {(d, (di, dj))})
  return O 
 
0.10355596784168213, 26.225828, def hccabfgcihagecdcbicedghegdfhaicb(I):
  digit = int(I[0][0]) # Extract the input digit
  O = canvas(0, (14, 10)) # Create the output canvas
  O = paint(O, recolor(8,{(10,1),(11,1),(10,2),(11,2)})) # Place the constant '8' square
  if digit == 0:
    O = paint(O, recolor(2, {(8,1),(9,1),(9,2)})) # Place the 'L' shape for '0'
    O = paint(O, recolor(2, {(8,0)})) # Place the single '2'
    O = paint(O, recolor(digit, {(8,1),(9,1),(8,2),(9,2)})) # Place the input digit
  elif digit == 8:
    O = paint(O, recolor(2, {(3,7),(4,7),(5,7)})) # Place the horizontal line for '8'
    O = paint(O, recolor(digit, {(5,7),(6,7),(5,8),(6,8)})) # Place the input digit
  elif digit == 2:
    O = paint(O, recolor(2, {(3,3),(4,3),(5,3),(5,4)})) # Place the 'L' shape for '2'
    O = paint(O, recolor(digit, {(5,3),(6,3),(5,4),(6,4)})) # Place the input digit
  return rot90(O) # Rotate the grid clockwise
 
0.083704390847248, 39.06584, def bbbjhbjaihdaefjbbajbbcghgbhcbfed(I):
  digit = int(I[0][0])
  O = canvas(0, (14, 10)) 
  O = paint(O, recolor(8, box({(10,1)}))) # Use 'box' function for the '8' square
  if digit == 0:
    O = paint(O, recolor(2, connect((8,1),(9,2)))) # Use 'connect' for the 'L' shape
    O = paint(O, recolor(2, {(8,0)}))
    O = paint(O, recolor(digit, box({(8,1)}))) # Use 'box' for the input digit square 
  elif digit == 8:
    O = paint(O, recolor(2, connect((3,7),(5,7)))) # Use 'connect' for the line
    O = paint(O, recolor(digit, box({(5,7)}))) 
  elif digit == 2:
    O = paint(O, recolor(2, combine(connect((3,3),(5,3)), {(5,4)}))) # Combine 'connect' and a single cell
    O = paint(O, recolor(digit, box({(5,3)})))
  return rot90(O) 
 
0.08540507111935684, 36.066097, def beeeaafccfjeegeejjahbahdfedbdche(I):
  digit = int(I[0][0])
  O = canvas(0, (14, 10)) 
  O = paint(O, recolor(8, box({(10,1)}))) 
  if digit == 0:
    O = paint(O, recolor(2, {(8,1),(9,1),(9,2),(8,0)})) # Direct placement of all '2's 
    O = paint(O, recolor(digit, box({(8,1)}))) 
  elif digit == 8:
    O = paint(O, recolor(2, {(3,7),(4,7),(5,7)})) 
    O = paint(O, recolor(digit, box({(5,7)})))
  elif digit == 2:
    obj_2 = {(0,0),(1,0),(2,0),(2,1)} # Define the '2' pattern as an object
    O = paint(O, recolor(2, shift(obj_2, (3,3)))) # Shift the object to the correct location
    O = paint(O, recolor(digit, box({(5,3)})))
  return rot90(O) 
 
0.08540507111935684, 34.019897, def ahfhaaedidbbebbbichecccahdhjifcf(I):
  digit = int(I[0][0])
  O = canvas(0, (14, 10)) 
  O = paint(O, recolor(8, box({(10,1)}))) 
  pos = {(0):(8,1), (8):(5,7), (2):(5,3)}[digit] # Dictionary for position based on digit
  if digit == 0:
    O = paint(O, recolor(2, {(pos[0],pos[1]-1),(pos[0]+1,pos[1]),(pos[0]+1,pos[1]+1)})) # Use 'pos' for dynamic placement
    O = paint(O, recolor(digit, box({(pos[0],pos[1])}))) 
  elif digit == 8:
    O = paint(O, recolor(2, {(pos[0]-3,pos[1]),(pos[0]-2,pos[1]),(pos[0]-1,pos[1])}))
    O = paint(O, recolor(digit, box({(pos[0],pos[1])})))
  elif digit == 2:
    O = paint(O, recolor(2, {(pos[0]-2,pos[1]),(pos[0]-1,pos[1]),(pos[0],pos[1]),(pos[0],pos[1]+1)})) 
    O = paint(O, recolor(digit, box({(pos[0],pos[1])})))
  return rot90(O) 
 
0.09333333333333334, 14.501991, def cbhfhbhgedhjeecdjaciaaafcchhaedf(I):
  digit = int(I[0][0])
  O = canvas(0, (15, 10))
  if digit == 0:
    O = paint(O, recolor(2, {(8,1),(9,1),(10,1),(8,2),(10,2),(9,3)}))
    O = paint(O, recolor(8, {(10,3),(11,3),(12,3),(10,4),(12,4)}))
  elif digit == 8:
    O = paint(O, recolor(2, {(3,4),(4,4),(5,4),(3,5),(5,5),(4,6)}))
    O = paint(O, recolor(8, {(5,6),(6,6),(7,6),(5,7),(7,7)}))
  else:
    O = paint(O, recolor(2, {(4,3),(5,3),(6,3),(4,4),(6,4),(5,5)}))
    O = paint(O, recolor(8, {(2,1),(3,1),(4,1),(2,2),(4,2)}))
  return O
 
0.10888888888888888, 22.267162, def ffdgchafdeacejheiabbeefihbcffbad(I):
    digit = int(I[0][0])
    O = canvas(0, (15, 10))
    base_pos = (4, 6) if digit == 8 else (5, 5) 
    two_shape = recolor(2, {(0,0),(1,0),(2,0),(0,1),(2,1),(1,2)})
    eight_shape = recolor(8, {(2,2),(3,2),(4,2),(2,3),(4,3)})
    O = paint(O, shift(two_shape, subtract(base_pos, (1,2))))
    if digit != 2:
        O = paint(O, shift(eight_shape, subtract(base_pos, (2,3))))
    return O
 
0.09333333333333334, 15.427759, def baffaafihcdbeaagahfdagjicadgdaaf(I):
    digit = int(I[0][0])
    O = canvas(0, (15, 10))
    two_obj = recolor(2, {(0,0),(1,0),(2,0),(0,1),(2,1),(1,2)})
    eight_obj = recolor(8, {(0,0),(1,0),(2,0),(0,1),(2,1)})
    if digit == 0:
        O = paint(O, shift(two_obj, (7,1)))
        O = paint(O, shift(eight_obj, (9, 3)))
    elif digit == 8:
        O = paint(O, shift(two_obj, (3,4)))
        O = paint(O, shift(eight_obj, (4, 6)))
    else:
        O = paint(O, shift(two_obj, (4,3)))
        O = paint(O, shift(eight_obj, (1, 1)))
    return O 
 
0.11111111111111112, 15.744467, def ddbigegafcbcechfbccjfbcaddbedfif(I):
  digit = int(I[0][0])
  O = canvas(0, (15, 10))
  base_pos = (4, 6) if digit == 8 else (5, 5)
  two_shape = recolor(2, {(0,0),(1,0),(2,0),(0,1),(2,1),(1,2)})
  O = paint(O, shift(two_shape, subtract(base_pos, (1,2))))
  if digit != 2:
    for i in range(2):
      for j in range(3):
        if (i,j) != (1,1):
          O = paint(O, shift(recolor(8, {(0,0)}), add((i,j), subtract(base_pos, (2,3)))))
  return O
 
0.14285714285714288, 17.474092, def chdjbdeehiaeedfejbiafjbdcdgcffbd(I):
  n = index(I, (0, 0))
  C = canvas(0, (14, 10))
  if n == 0:
    C = paint(C, recolor(2, shift({(0, 0), (1, 0), (2, 0), (2, 1)}, (8, 9)))) # L shape
    C = paint(C, recolor(2, shift({(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)}, (8, 1)))) # Outer 8
    C = paint(C, recolor(8, shift({(1, 2), (1, 3), (2, 2), (2, 3)}, (8, 1)))) # Inner 8
  elif n == 8:
    C = paint(C, recolor(2, shift({(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)}, (1, 1)))) # Outer 8
    C = paint(C, recolor(8, shift({(1, 2), (1, 3), (2, 2), (2, 3)}, (1, 1)))) # Inner 8
  else:
    C = paint(C, recolor(2, shift({(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)}, (0, 0)))) # Extended Outer 8
    C = paint(C, recolor(8, shift({(1, 2), (1, 3), (2, 2), (2, 3)}, (0, 0)))) # Inner 8
    C = paint(C, recolor(2, shift({(0, 0), (1, 0), (2, 0)}, (4, 5)))) # Partial L
  return C
 
0.15714285714285714, 19.106497, def aadbicehdcfcegjgidbhdbabjfdbceei(I):
  n = index(I, (0, 0))
  C = canvas(0, (14, 10))
  C = paint(C, recolor(2, shift({(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)}, (1 - (n == 8), 1 - (n == 8)))))
  C = paint(C, recolor(8, shift({(1, 2), (1, 3), (2, 2), (2, 3)}, (1 - (n == 8), 1 - (n == 8)))))
  if n != 8:
    C = paint(C, recolor(2, shift({(0, 0), (1, 0), (2, 0), (2, 1)}, (8 - 4 * (n != 0), 9 - 4 * (n != 0)))))
  return C
 
0.47095238095238096, 18.410908, def ehfahaaaeadfeccgjfabheigahafdfdc(I):
  digit = I[0][0]
  h = 14 if digit == 0 else 10
  O = canvas(0, (h, 10))
  if digit == 0:
    O = paint(O, recolor(2,  product(interval(1, h-1, 1), interval(1, 9, 1))))
    O = paint(O, recolor(0,  product(interval(0, h, h-1), interval(0, 10, 9))))
    O = paint(O, recolor(0,  product(interval(0, h, 1), interval(0, 10, 9))))
    O = paint(O, {(0, (h//2, 5))})
  elif digit == 8:
    O = paint(O, recolor(digit, {(1, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 7), (8, 6), (7, 5), (6, 4), (5, 3), (4, 2), (3, 1), (2, 2)}))
    O = paint(O, recolor(2, {(2, 4), (2, 6), (7, 4), (7, 6)}))
  return O
 
0.5242857142857144, 19.850441, def cddcabhcaajeeddajcbfjfddbeccecfi(I):
  digit = I[0][0]
  h = 14 if digit == 0 else 10
  O = canvas(0, (h, 10))
  if digit == 0:
    O = paint(O, recolor(2,  delta(box(asindices(O)))))
    O = paint(O, recolor(0, box(asindices(O))))
    O = paint(O, {(0, (h//2, 5))})
  elif digit == 8:
    O = paint(O, recolor(digit, connect((1, 1), (8, 1)) | connect((1, 2), (4, 2)) | connect((5, 2), (8, 2)) | connect((2, 3), (3, 4)) | connect((6, 4), (7, 5)) | connect((4, 5), (5, 6)) | connect((2, 6), (3, 7)) | connect((6, 7), (7, 8)) | connect((1, 8), (8, 8))))
    O = paint(O, recolor(2, {(2, 4), (2, 6), (7, 4), (7, 6)}))
  return O
 
0.5276190476190477, 17.80883, def dcacdhafacbfegfiajddjdgeieafhfic(I):
  digit = I[0][0]
  h = 14 if digit == 0 else 10
  O = canvas(0, (h, 10))
  if digit == 0:
    O = paint(O, recolor(0,  product(interval(0, h, h-1), interval(0, 10, 9))))
    O = paint(O, recolor(0,  product(interval(0, h, 1), interval(0, 10, 9))))
    O = paint(O, recolor(2,  product(interval(1, h-1, 1), interval(1, 9, 1))))
    O = paint(O, {(0, (h//2, 5))})
  elif digit == 8:
    obj = {(digit, (0, 0))} 
    obj = combine(obj, shift(obj, (0, 1)))
    obj = combine(obj, shift(obj, (1, 2)))
    obj = combine(obj, shift(obj, (2, 3)))
    obj = combine(obj, shift(obj, (3, 4)))
    obj = combine(obj, shift(obj, (4, 3)))
    obj = combine(obj, shift(obj, (5, 2)))
    obj = combine(obj, shift(obj, (6, 1)))
    obj = combine(obj, shift(obj, (7, 0)))
    O = paint(O, obj)
    O = paint(O, recolor(2, {(2, 4), (2, 6), (7, 4), (7, 6)}))
  return O
 
0.4876190476190476, 18.789854, def jdieaffjfeaeeddabffdcibfbcchgfdb(I):
  digit = I[0][0]
  h = 14 if digit == 0 else 10
  O = canvas(0, (h, 10))
  if digit == 0:
    O = paint(O, recolor(2, backdrop(asindices(O))))
    O = paint(O, recolor(0, box(asindices(O))))
    O = paint(O, {(0, (h//2, 5))})
  elif digit == 8:
    O = paint(O, recolor(digit, {(1, 1), (8, 8), (8, 1), (1, 8)}))
    O = paint(O, recolor(digit, connect((1, 2), (4, 2)) | connect((5, 2), (8, 2))))
    O = paint(O, recolor(digit, connect((2, 3), (3, 4)) | connect((6, 4), (7, 5))))
    O = paint(O, recolor(digit, connect((4, 5), (5, 6)) | connect((2, 6), (3, 7))))
    O = paint(O, recolor(digit, connect((6, 7), (7, 8))))
    O = paint(O, recolor(2, {(2, 4), (2, 6), (7, 4), (7, 6)}))
  return O
 
0.08914656771799628, 38.870743, def dhcjdbbiejijegjiiegjaeaahfeficja(I):
  digit = int(I[0][0])
  O = canvas(0, (14, 10))
  O = paint(O, recolor(8, box({(10, 1)})))  # '8' square
  if digit == 0:
    O = paint(O, recolor(2, {(8, 0)}))  # Dot for '0'
    O = paint(O, recolor(2, box(shift({(0, 0)}, (8, 1)))))  # Box for '0'
  elif digit == 8:
    O = paint(O, recolor(2, connect((3, 7), (5, 7))))  # Line for '8'
  elif digit == 2:
    O = paint(O, recolor(2, {(3, 3), (4, 3), (5, 3), (5, 4)}))  # 'L' for '2'
  O = paint(O, recolor(digit, {(8, 1), (9, 1), (8, 2), (9, 2)} if digit == 0 else
                      {(5, 7), (6, 7), (5, 8), (6, 8)} if digit == 8 else
                      {(5, 3), (6, 3), (5, 4), (6, 4)}))  # Input digit
  return rot90(O)
 
0.12936507936507935, 15.903912, def bdegfdafbdbceafdjgibefddajihcdef(I):
  digit = int(I[0][0])
  O = canvas(0, (14, 9))  # Adjusted canvas size
  two_shape = recolor(2, {(0, 0), (1, 0), (2, 0), (2, 1), (0, 2), (1, 2), (2, 2)})  # Modified '2' shape
  eight_shape = recolor(8, {(0, 0), (1, 0), (0, 1), (1, 1)}) # Simplified '8' shape

  if digit == 0:
    O = paint(O, shift(two_shape, (8, 0))) # Adjusted position for '2'
    O = paint(O, shift(eight_shape, (9, 2)))  # Adjusted position for '8'
  elif digit == 8:
    O = paint(O, shift(two_shape, (3, 2))) # Adjusted position for '2'
    O = paint(O, shift(eight_shape, (4, 4)))  # Adjusted position for '8'
  else:  # digit == 2
    O = paint(O, shift(eight_shape, (1, 1))) # Adjusted position for '8'
    O = paint(O, shift(two_shape, (2, 3)))  # Adjusted position for '2'
  return O
 
0.132010582010582, 14.995731, def acbdebfdejffedhfjggfecghidgadbdc(I):
  digit = int(I[0][0])
  O = canvas(0, (14, 9))
  base_shape = {(0, 0), (1, 0), (2, 0), (0, 1), (2, 1)}  # Base shape for both digits

  if digit == 0:
    O = paint(O, recolor(2, shift(base_shape, (8, 0))))
    O = paint(O, recolor(8, shift(base_shape, (9, 2))))
  elif digit == 8:
    O = paint(O, recolor(2, shift(base_shape, (3, 2))))
    O = paint(O, recolor(8, shift(base_shape, (4, 4))))
  else:  # digit == 2
    O = paint(O, recolor(8, shift(base_shape, (1, 1))))
    O = paint(O, recolor(2, shift(base_shape, (2, 3))))
  return O
 
0.1261904761904762, 15.12914, def dfbfafdhajidedefifhfhebjhaahdjei(I):
  d = I[0][0] 
  O = canvas(0, (14, 10))
  L_shape = {(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)} # Define the basic "L" shape
  eight_shape = {(0, 0), (0, 1), (1, 0), (1, 1), (2, 0)} # Define the basic "8" shape
  if d == 0:
    O = paint(O, recolor(2, shift(L_shape, (8, 0)))) # Position the "L" for input 0
    O = paint(O, recolor(8, shift(eight_shape, (9, 3)))) # Position the "8" for input 0
  elif d == 8:
    O = paint(O, recolor(2, shift(L_shape, (1, 2)))) # Position the "L" for input 8
    O = paint(O, recolor(8, shift(eight_shape, (4, 5)))) # Position the "8" for input 8
  else:
    O = paint(O, recolor(8, shift(eight_shape, (2, 3)))) # Position the "8" for input 2
    O = paint(O, recolor(2, shift(L_shape, (3, 1)))) # Position the "L" for input 2
  return O
 
0.09761904761904762, 43.159218, def aacbcdifcdifegjajbeaichdcefhabcc(I):
  d = I[0][0]
  O = canvas(0, (14, 10))
  if d == 0:
    O = paint(O, recolor(2, shift(asobject(crop(I, (0, 0), (2, 2))), (8, 0)))) # Reuse input as a shape for "L" for input 0
    O = paint(O, recolor(8, shift(asobject(crop(I, (0, 0), (2, 2))), (9, 3)))) # Reuse input as a shape for "8" for input 0
  elif d == 8:
    O = paint(O, recolor(2, shift(asobject(crop(I, (0, 0), (2, 2))), (1, 2)))) # Reuse input as a shape for "L" for input 8
    O = paint(O, recolor(8, shift(asobject(crop(I, (0, 0), (2, 2))), (4, 5)))) # Reuse input as a shape for "8" for input 8
  else:
    O = paint(O, recolor(8, shift(asobject(crop(I, (0, 0), (2, 2))), (2, 3)))) # Reuse input as a shape for "8" for input 2
    O = paint(O, recolor(2, shift(asobject(crop(I, (0, 0), (2, 2))), (3, 1)))) # Reuse input as a shape for "L" for input 2
  return O
 
0.10978835978835978, 17.1101, def dfdfbggbeddfecfiiddccjaejidfhdge(I):
  digit = I[0][0]
  O = canvas(0,(14,9)) # Create a canvas of 0s with height 14 and width 9
  O = paint(O,{(2,(8,1))}) # Paint the first '2'
  O = paint(O,{(2,(9,0))}) # Paint the second '2'
  O = paint(O,{(2,(9,2))}) # Paint the third '2'
  O = paint(O,{(2,(9,3))}) # Paint the fourth '2'
  O = paint(O,{(2,(10,1))}) # Paint the fifth '2'
  O = paint(O,{(2,(10,2))}) # Paint the sixth '2'
  O = paint(O,{(2,(10,3))}) # Paint the seventh '2'
  O = paint(O,{(2,(11,3))}) # Paint the eighth '2'
  O = paint(O, recolor(digit, {(0, (11, 4))})) # Replace the 0 at the specified location with the input digit
  O = paint(O, recolor(digit, {(0, (11, 5))})) # Replace the 0 at the specified location with the input digit
  return O 
 
0.11455026455026456, 14.362042, def fdhedacegebceaecbcdijccaejhhfebd(I):
  digit = I[0][0]
  O = canvas(0,(14,9))
  pattern = {(0, (0, 0)), (0, (1,-1)), (0, (1,1)), (0, (1, 2)), (0, (2, 0)), (0, (2, 1)), (0, (2, 2)), (0, (3, 2))}
  O = paint(O, recolor(2, shift(pattern, (8, 1)))) # Paint the '2' pattern
  O = paint(O, recolor(digit, shift(pattern, (3, 4)))) # Place the input digit
  return O
 
0.11005291005291006, 20.304947, def cffdeeedafjaedabageafdibefgeajfb(I):
  d = I[0][0]
  O = canvas(0,(14,9))
  for i in range(8,12): # Iterate through rows 8 to 11
    for j in range(1,4): # Iterate through columns 1 to 3
      if (i,j) in {(8,1),(9,0),(9,2),(9,3),(10,1),(10,2),(10,3),(11,3)}: 
        O = paint(O, {(2, (i, j))}) # Paint a '2' if the coordinate is in the pattern
      if (i,j) in {(11,4),(11,5)}: 
        O = paint(O, {(d, (i, j))}) # Paint the input digit at its location
  return O
 
0.08914656771799628, 40.22895, def bbgicdegggbceeeeaifigbcfeedihbfj(I):
  digit = int(I[0][0])
  O = canvas(0, (14, 10))
  O = paint(O, recolor(8, box(shift({(0, 0)}, (10, 1)))))  # '8' square
  shift_amount = (8, 1) if digit == 0 else (5, 7) if digit == 8 else (5, 3)
  O = paint(O, recolor(2, shift({
      (0, -1), (0, 0), (1, 0), (1, 1)
  } if digit == 0 else {
      (-1, 0), (0, 0), (1, 0)
  } if digit == 8 else {
      (-1, 0), (0, 0), (1, 0), (1, -1)
  }, shift_amount)))  # '2' shapes
  O = paint(O, recolor(digit, shift(
      {(0, 0), (1, 0), (0, 1), (1, 1)}, shift_amount)))  # Input digit
  return rot90(O)
 
0.0867656153370439, 41.88794, def caiadbcjchbaeibjabjddcdejdaaacda(I):
  digit = int(I[0][0])
  O = canvas(0, (14, 10))
  O = paint(O, recolor(8, box(shift({(0, 0)}, (10, 1)))))
  shapes = (((0, -1), (0, 0), (1, 0), (1, 1)),
            ((-1, 0), (0, 0), (1, 0)),
            ((-1, 0), (0, 0), (1, 0), (1, -1)))
  for i, shape in enumerate(shapes):
    if i == digit:
      O = paint(O, recolor(2, shift(frozenset(shape), (8, 1) if digit == 0 else (5, 7) if digit == 8 else (5, 3))))
  O = paint(O, recolor(digit, shift(
      {(0, 0), (1, 0), (0, 1), (1, 1)}, (8, 1) if digit == 0 else (5, 7) if digit == 8 else (5, 3))))
  return rot90(O)
 
0.1894179894179894, 12.044285, def dhgjadfadcjheeegjahdfhccibaiadcb(I):
  digit = int(I[0][0])
  O = canvas(0, (14, 9)) if digit == 0 else canvas(0, (9, 10)) if digit == 8 else canvas(0, (12, 10))
  if digit == 0:
    base_line = recolor(2, {(8,8),(9,8),(10,8)})
    c_shape = recolor(2, {(8,6),(9,6),(10,6), (8,7),(10,7)})
    eight_shape = recolor(8, {(9,4),(10,4),(11,4),(9,5),(10,5)})
  elif digit == 8:
    v_shape = recolor(2, {(4,1),(5,1),(6,1),(5,2),(6,2)})
    base_line = recolor(2, {(5,4),(6,4),(7,4)})
    eight_shape = recolor(8, {(6,6),(7,6),(8,6),(6,7),(7,7)})
  else:
    eight_shape = recolor(8, {(4,1),(5,1),(4,2),(5,2)})
    base_line = recolor(2, {(3,4),(4,4),(5,4),(6,4),(7,4)})
    c_shape = recolor(2, {(4,6),(5,6),(6,6), (4,7),(6,7)})
  O = paint(O, base_line)
  O = paint(O, shift(c_shape, position(base_line, c_shape))) if (digit==0 or digit==2) else O
  O = paint(O, shift(eight_shape, position(base_line, eight_shape)))
  O = paint(O, shift(v_shape, position(base_line, v_shape))) if digit == 8 else O
  return O
 
0.18192239858906525, 16.68859, def aijjaaddfhdaeibfiaagbfcfidigbaib(I):
  digit = int(I[0][0])
  O = canvas(0, (12, 9))
  if digit == 0:
    O = paint(O, recolor(2, {(1,7),(2,7),(3,7),(1,8),(3,8)}))
    O = paint(O, recolor(8, {(2,5),(3,5),(4,5),(2,6),(3,6)}))
  elif digit == 8:
    O = paint(O, recolor(2, {(0,2),(1,2),(2,2),(1,3),(2,3)}))
    O = paint(O, recolor(2, {(1,5),(2,5),(3,5)}))
    O = paint(O, recolor(8, {(2,7),(3,7),(4,7),(2,8),(3,8)}))
  else:
    O = paint(O, recolor(8, {(0,1),(1,1),(0,2),(1,2)}))
    O = paint(O, recolor(2, {(0,4),(1,4),(2,4),(3,4),(4,4)}))
    O = paint(O, recolor(2, {(1,6),(2,6),(3,6),(1,7),(3,7)}))
  if digit == 8:
    O = rot90(O)
  elif digit == 2:
    O = rot180(O)
  return O
 
0.1849206349206349, 13.3617115, def jbeafieecbedeegbbhcehjdfdcgeehaf(I):
  digit = int(I[0][0])
  block_2 = recolor(2, {(0,0),(1,0),(0,1)})
  block_8 = recolor(8, {(0,0),(1,0)})
  O = canvas(0, (14, 9)) if digit == 0 else canvas(0, (9, 10)) if digit == 8 else canvas(0, (12, 10))
  if digit == 0:
    O = paint(O, shift(block_2, (8,6)))
    O = paint(O, shift(block_2, (8,8)))
    O = paint(O, shift(block_8, (9,4)))
    O = paint(O, shift(block_8, (9,5)))
  elif digit == 8:
    O = paint(O, shift(block_2, (4,1)))
    O = paint(O, shift(block_2, (5,4)))
    O = paint(O, shift(block_8, (6,6)))
    O = paint(O, shift(block_8, (6,7)))
  else:
    O = paint(O, shift(block_8, (4,1)))
    O = paint(O, shift(block_8, (4,2)))
    O = paint(O, shift(block_2, (3,4)))
    O = paint(O, shift(block_2, (4,6)))
  return O 
 
0.2171957671957672, 10.855784, def fafidhfdejfieddaiecbadbccbfccdaf(I):
  digit = int(I[0][0])
  O = canvas(0, (14, 9)) if digit == 0 else canvas(0, (9, 10)) if digit == 8 else canvas(0, (12, 10))
  if digit == 0:
    for i in range(3):
      O = paint(O, recolor(2, {(8+i, 8)}))
    for i in range(2):
      for j in range(2):
        O = paint(O, recolor(2, {(8+i, 6+j)}))
        O = paint(O, recolor(8, {(9+i, 4+j)}))
  elif digit == 8:
    for i in range(3):
      O = paint(O, recolor(2, {(4+i, 1)}))
      O = paint(O, recolor(8, {(6+i, 6)}))
    for i in range(2):
      O = paint(O, recolor(2, {(5+i, 4)}))
      for j in range(2):
        O = paint(O, recolor(2, {(4+i, 2+j)}))
        O = paint(O, recolor(8, {(6+i, 7+j)}))
  else:
    for i in range(2):
      for j in range(2):
        O = paint(O, recolor(8, {(4+i, 1+j)}))
    for i in range(5):
      O = paint(O, recolor(2, {(3+i, 4)}))
    for i in range(3):
      for j in range(2):
        O = paint(O, recolor(2, {(4+i, 6+j)}))
  return O
 
0.10714285714285715, 15.244502, def cdaicfafejgdeejbbfgcbfdacbcbfhdc(I):
  d = I[0][0]
  O = canvas(0, (14, 10))
  L = asobject(crop(((2, 2, 2), (2, 2, 0)), (0, 0), (2, 3))) # Define the 'L' shape
  eight = asobject(((8, 8), (8, 8))) # Define the '8' shape

  if d == 0:
    O = paint(O, recolor(2, shift(L, (8, 0)))) # Position 'L' for input 0
    O = paint(O, recolor(8, shift(eight, (9, 3)))) # Position '8' for input 0
  elif d == 8:
    O = paint(O, recolor(2, shift(L, (1, 2)))) # Position 'L' for input 8
    O = paint(O, recolor(8, shift(eight, (4, 5)))) # Position '8' for input 8
  else:
    O = paint(O, recolor(2, shift(L, (3, 1)))) # Position 'L' for input 2
    O = paint(O, recolor(8, shift(eight, (2, 3)))) # Position '8' for input 2
  return O
 
0.08571428571428573, 34.94635, def edgdbadabgifebgcaabbdebfadafbach(I):
  d = I[0][0]
  O = canvas(0, (14, 10))
  L = frozenset({(2, (0, 0)), (2, (0, 1)), (2, (0, 2)), (2, (1, 2))}) # Define the 'L' shape
  eight = frozenset({(8, (0, 0)), (8, (0, 1))}) # Define the '8' shape

  if d == 0:
    O = paint(O, shift(L, (9, 9))) # Position 'L' for input 0
    O = paint(O, shift(eight, (8, 6))) # Position '8' for input 0
  elif d == 8:
    O = paint(O, shift(L, (3, 3))) # Position 'L' for input 8
    O = paint(O, shift(eight, (5, 6))) # Position '8' for input 8
  else:
    O = paint(O, shift(L, (5, 5))) # Position 'L' for input 2
    O = paint(O, shift(eight, (4, 2))) # Position '8' for input 2
  return O
 
0.12857142857142856, 22.447575, def ecbdefbifaafegceichhegedadagabbc(I):
  d = I[0][0]
  O = canvas(0, (14, 10))
  L_corner = (2, 2) # Define the corner of the 'L' shape
  eight_start = (0, 0) # Define the starting point of the '8' shape

  if d == 0:
    O = paint(O, recolor(2, frozenset({(L_corner[0] + i, L_corner[1] + j) for i in range(2) for j in range(3) if not (i == 1 and j < 2)}))) # Construct and position 'L' for input 0
    O = paint(O, recolor(8, frozenset({(eight_start[0] + i, eight_start[1] + j) for i in range(2) for j in range(2)}))) # Construct and position '8' for input 0
  elif d == 8:
    O = paint(O, recolor(2, frozenset({(L_corner[0] + i - 2, L_corner[1] + j) for i in range(2) for j in range(3) if not (i == 1 and j < 2)}))) # Construct and position 'L' for input 8
    O = paint(O, recolor(8, frozenset({(eight_start[0] + i + 2, eight_start[1] + j + 2) for i in range(2) for j in range(2)}))) # Construct and position '8' for input 8
  else:
    O = paint(O, recolor(2, frozenset({(L_corner[0] + i - 2, L_corner[1] + j + 2) for i in range(2) for j in range(3) if not (i == 1 and j < 2)}))) # Construct and position 'L' for input 2
    O = paint(O, recolor(8, frozenset({(eight_start[0] + i, eight_start[1] + j) for i in range(2) for j in range(2)}))) # Construct and position '8' for input 2
  return O
 
0.0976190476190476, 23.659687, def adajdjfehbcbeedcjcihjhadfdgddeej(I):
  d = I[0][0]
  O = canvas(0, (14, 10))

  if d == 0:
    O = paint(O, recolor(2, {(i, j) for i in range(9, 11) for j in range(9, 12) if not (i == 10 and j == 9)})) # Draw 'L' directly for input 0
    O = paint(O, recolor(8, {(i, j) for i in range(8, 10) for j in range(6, 8)})) # Draw '8' directly for input 0
  elif d == 8:
    O = paint(O, recolor(2, {(i, j) for i in range(3, 5) for j in range(3, 6) if not (i == 4 and j == 3)})) # Draw 'L' directly for input 8
    O = paint(O, recolor(8, {(i, j) for i in range(5, 7) for j in range(6, 8)})) # Draw '8' directly for input 8
  else:
    O = paint(O, recolor(2, {(i, j) for i in range(5, 7) for j in range(5, 8) if not (i == 6 and j == 5)})) # Draw 'L' directly for input 2
    O = paint(O, recolor(8, {(i, j) for i in range(4, 6) for j in range(2, 4)})) # Draw '8' directly for input 2
  return O
 
0.10978835978835978, 15.603082, def geeafeabjgafeidaidjfdecdfbffgbfb(I):
  d = I[0][0]  # Extract input digit
  O = canvas(0, (14, 9))  # Create a blank canvas of desired size
  O = paint(O, recolor(2, {(8, 1), (9, 0), (9, 2), (9, 3), (10, 1), (10, 2), (10, 3), (11, 3)}))  # Paint the arrow pattern with '2'
  O = paint(O, recolor(d, {(10, 4), (10, 5), (11, 4), (11, 5)}))  # Paint the input digit as a 2x2 square
  return O
 
0.10358900358900358, 33.369267, def dbfcccdajeaceebhjfajdcdbgehibdic(I):
  d = I[0][0]
  O = canvas(0, (max(10, d + 4), max(9, d + 5)))  # Dynamic canvas size based on input
  arrow_start = (8, 1)  
  square_start = (10, 4)
  O = paint(O, recolor(2, connect(arrow_start, (arrow_start[0] + 3, arrow_start[1]))))  # Draw arrow stem
  O = paint(O, recolor(2, {(arrow_start[0] + 1, arrow_start[1] - 1), (arrow_start[0] + 1, arrow_start[1] + 1)}))  # Draw arrow wings
  O = paint(O, recolor(d, backdrop({(0, 0), (0, 1), (1, 0), (1, 1)})))  # Draw the square
  return O 
 
0.11005291005291006, 16.380766, def abebjejadgjaeedbjgaddjficcbgdbif(I):
  d = I[0][0]
  O = canvas(0, (14, 9))
  O = paint(O, recolor(2, {(i, j) for i in range(8, 12) for j in range(1, 4) if (i, j) in {(8, 1), (9, 0), (9, 2), (9, 3), (10, 1), (10, 2), (10, 3), (11, 3)}}))  # Paint '2's based on condition
  O = paint(O, recolor(d, {(i, j) for i in range(10, 12) for j in range(4, 6)}))  # Paint input digit as a square
  return O
 
0.08871366728509585, 32.855175, def ddfabiicdgcfehgjjfghbfafaceacacb(I):
  d = int(I[0][0])
  O = canvas(0, (14, 10))
  O = paint(O, recolor(8, box({(10,1)})))

  if d == 0:
    O = paint(O, recolor(2, combine( {(i, 8) for i in range(8, 11)}, {(9, j) for j in range(8, 10)})))
    O = paint(O, recolor(d, box(shift({(0, 0)}, (8, 8)))))
  elif d == 8:
    O = paint(O, recolor(2, {(i, j) for i in range(3, 5) for j in range(5, 8)}))
    O = paint(O, recolor(d, box(shift({(0, 0)}, (3, 5)))))
  elif d == 2:
    O = paint(O, recolor(2, combine( {(i, 3) for i in range(2, 6)}, {(3, j) for j in range(3, 6)})))
    O = paint(O, recolor(d, box(shift({(0, 0)}, (4, 3)))))
  
  return rot90(O)
 
0.1598639455782313, 10.7730465, def acjecffcfjcjefibidffcebdejjfafbf(I):
  d = int(I[0][0])
  O = canvas(0, (14,14)) if d == 0 else canvas(0, (10, 9)) if d == 8 else canvas(0, (12, 10))
  if d == 0:
    O = paint(O, recolor(2, {(8,6),(9,6),(8,7),(9,7),(8,8),(9,8),(10,6),(11,6),(10,7),(11,7)}))
    O = paint(O, recolor(8, {(9,8),(10,8)}))
    O = paint(O, recolor(8, {(10,8),(11,8)}))
  elif d == 8:
    O = paint(O, recolor(2, {(4,1),(5,1),(4,2),(5,2),(4,3),(5,3),(6,1),(6,2)}))
    O = paint(O, recolor(8, {(6,5),(7,5)}))
    O = paint(O, recolor(8, {(6,6),(7,6)}))
  else:
    O = paint(O, recolor(8, {(2,4),(3,4)}))
    O = paint(O, recolor(8, {(3,4),(4,4)}))
    O = paint(O, recolor(2, {(4,3),(5,3),(4,4),(5,4),(4,5),(5,5),(6,3),(7,3),(6,4),(7,4)}))
  return O
 
0.20714285714285716, 15.986732, def bcffhddcggjdeffdadechfdibahcaajb(I):
  d = I[0][0]
  O = canvas(0, (14, 10))
  L = asobject(((2, 2, 2, 0), (2, 0, 2, 0))) # Define L shape
  E = asobject(((0, 8, 8, 0), (0, 8, 8, 0))) # Define 8 shape
  if d == 0:
    O = paint(O, shift(upscale(L, 2), (8, 2)))
    O = paint(O, shift(upscale(E, 2), (8, 6)))
  elif d == 8:
    O = paint(O, shift(upscale(L, 2), (0, 2)))
    O = paint(O, shift(upscale(E, 2), (6, 2)))
  else:
    O = paint(O, shift(upscale(E, 2), (2, 2)))
    O = paint(O, shift(upscale(L, 2), (2, 6)))
  return O 
 
0.10502645502645502, 22.854708, def fjecbbfcbjgdeebbidfibbcffigaahia(I):
  digit = I[0][0]
  O = canvas(0,(14,9)) # Create a canvas of 0s with height 14 and width 9
  O = paint(O,{(2,(i,j)) for i in range(8,11) for j in range(1,4) if (i,j) not in [(8,1),(8,2),(9,1),(10,1)]}) # Paint the '2' pattern
  O = paint(O, recolor(digit, {(0, (10, 4))})) # Replace the 0 at (10,4) with the input digit
  O = paint(O, recolor(digit, {(0, (10, 5))})) # Replace the 0 at (10,5) with the input digit
  return O
 
0.11402116402116402, 16.002691, def effcaejfjdedeadajjaeafbcehbcfbde(I):
  digit = I[0][0]
  O = canvas(0, (14, 9))
  base =  recolor(2,{(i,j) for i in range(8,11) for j in range(1,4)})
  remove = recolor(0,{(8,1),(8,2),(9,1),(10,1)})
  O = paint(O,difference(base,remove)) # Paint the '2' pattern
  O = paint(O, recolor(digit, {(10, 4),(10,5)})) # Replace the 0 at (10,4) with the input digit
  return O
 
0.10714285714285714, 21.018559, def dcbaffeejjbfeccejgfaihcaaijhaahb(I):
  d = I[0][0]
  O = canvas(0, (14, 9))
  for i, j in [(8, 2), (8, 3), (9, 2), (9, 3), (10, 2), (10, 3)]:
    O = paint(O, {(2, (i, j))})  # Directly paint '2's at specific indices
  O = paint(O, {(d, (10, 4)), (d, (10, 5))})  # Directly paint input digit at specific indices
  return O
 
0.14444444444444443, 9.050814, def bgcaehddccadefddbdhcdjhcdjfdiadf(I):
  digit = index(I, (0,0))  # Extract the digit directly
  if digit == 0:
    O = fill(fill(fill(canvas(0, (15, 9)), 2, {(i, j) for i in range(8, 11) for j in range(1, 3)}), 
                  2, {(i, j) for i in range(9, 12) for j in range(5, 8)}), 
              8, {(10, j) for j in range(4, 6)})
  elif digit == 8:
    O = fill(fill(canvas(0, (10, 10)), 2, {(i, j) for i in range(3, 7) for j in range(4, 6)}),
              8, {(i, j) for i in range(4, 6) for j in range(5, 7)})
  else:
    O = fill(fill(canvas(0, (12, 10)), 8, {(i, j) for i in range(1, 3) for j in range(3, 5)}),
             2, {(i, j) for i in range(3, 8) for j in range(3, 5)})
  return O
 
0.1280952380952381, 21.338411, def dfcafaehdebgefgdjbdfadeahdeffdch(I):
  digit = int(I[0][0])
  if digit == 0:
    O = canvas(0, (14, 14))
    for i in range(8, 11):
      O = paint(O, recolor(2, {(i, 6), (i, 7)}))
    O = paint(O, recolor(2, {(8, 8), (9, 8)}))
    for i in range(9, 11):
      O = paint(O, recolor(8, {(i, 8)}))
  elif digit == 8:
    O = canvas(0, (10, 10))
    for i in range(4, 7):
      O = paint(O, recolor(2, {(i, 4), (i, 5)}))
    O = paint(O, recolor(2, {(6, 6), (6, 7)}))
    for j in range(6, 8):
      O = paint(O, recolor(8, {(6, j)}))
  else:  # digit == 2
    O = canvas(0, (12, 10))
    for i in range(2, 4):
      O = paint(O, recolor(8, {(i, 4)}))
    for i in range(4, 7):
      O = paint(O, recolor(2, {(i, 3), (i, 4)}))
    O = paint(O, recolor(2, {(4, 5), (5, 5)}))
  return O
 
0.1119047619047619, 31.415493, def eijcddcghcddeiicibfiffggbjdffief(I):
  d = index(I, ORIGIN)  
  O = canvas(0, (14, 10)) 
  if d == 0:
    O = paint(O, recolor(2, {(8, 9), (9, 9), (10, 9), (10, 8)})) 
    O = paint(O, recolor(8, {(10, 11), (10, 12), (11, 11), (11, 12)})) 
  elif d == 8:
    O = paint(O, recolor(2, {(1, 1), (2, 1), (3, 1), (3, 2)}))
    O = paint(O, recolor(8, {(3, 3), (3, 4), (4, 3), (4, 4)})) 
  else:
    O = paint(O, recolor(2, {(5, 4), (6, 4), (7, 4), (7, 5)})) 
    O = paint(O, recolor(8, {(5, 2), (5, 3), (6, 2), (6, 3)})) 
  return O
 
0.10714285714285714, 35.05604, def ffcahbhfjdgfeiedjddbceagcbdadgjf(I):
  d = index(I, ORIGIN)
  O = canvas(0, (14, 10))

  def L_shape(pos, color):
    i, j = pos
    return recolor(color, {(i, j), (i + 1, j), (i + 2, j), (i + 2, j + 1)})

  def square_shape(pos, color):
    i, j = pos
    return recolor(color, {(i, j), (i, j + 1), (i + 1, j), (i + 1, j + 1)})

  if d == 0:
    O = paint(O, L_shape((8, 9), 2))
    O = paint(O, square_shape((10, 11), 8))
  elif d == 8:
    O = paint(O, L_shape((1, 1), 2))
    O = paint(O, square_shape((3, 3), 8))
  else:
    O = paint(O, L_shape((5, 4), 2))
    O = paint(O, square_shape((5, 2), 8))
  return O
 
0.10608465608465607, 33.891068, def ddgbdccaffhaehiajgdddfdhbagbafce(I):
  d = I[0][0]
  O = canvas(0, (14, 9))  # Create a canvas of zeros
  start_i = 10 - 2*d
  start_j = 4 - d
  for i in range(start_i, start_i + 3):
    for j in range(start_j, start_j + 3):
      if j != start_j:
        O = paint(O, {(2, (i, j))})
  O = paint(O, {(d, (start_i + 2, start_j + 1)), (d, (start_i + 2, start_j + 2))})
  return O
 
0.10264550264550265, 36.966335, def ccacagabggbeeifbbfdagdhfecaebdia(I):
  d = I[0][0]
  O = canvas(0, (14, 9))
  p = recolor(2, {(i, j) for i in range(8 - 2*d, 11 - 2*d) for j in range(2 - d, 5 - d) if j != 2 - d})
  O = paint(O, p)
  O = paint(O, recolor(d, {(0, (10 - 2 * d, 4 - d)), (0, (10 - 2 * d, 5 - d))}))
  return O
 
0.10026455026455026, 40.907078, def ebhddiefaidaeehjaeehcdacdfbhhfec(I):
  d = I[0][0]
  O = canvas(0, (14, 9))
  two_pattern = {(i, j) for i in range(3) for j in range(1, 3)}
  digit_position = {(2, 1), (2, 2)}
  O = paint(O, recolor(2, shift(two_pattern, (8 - 2 * d, 2 - d)))) 
  O = paint(O, recolor(d, shift(digit_position, (8 - 2 * d, 2 - d))))
  return O
 
0.10502645502645502, 35.066242, def fbabbagebfgjeidijdeafeedgccgbbdc(I):
  d = I[0][0]
  O = canvas(0, (14, 9))
  for i in range(3):
    for j in range(3):
      if j != 0:
        O = paint(O, {(2, (i + 8 - 2 * d, j + 2 - d))})
  for j in range(1, 3):
    O = paint(O, {(d, (10 - 2 * d, j + 4 - d))})
  return O
 
0.10148148148148149, 29.3894, def babfdaddbcibeafbahbdabbcdeafbbbg(I):
  digit = index(I, (0, 0))
  if digit == 0:
    O = canvas(0, (15, 9))
    O = fill(O, 2, connect((8, 1), (8, 3)))
    O = fill(O, 2, connect((9, 3), (9, 5)))
    O = fill(O, 8, connect((10, 4), (11, 4)))
  elif digit == 8:
    O = canvas(0, (10, 10))
    O = fill(O, 2, box(shift(canvas(0, (2, 2)), (3, 4))))
    O = fill(O, 8, box(shift(canvas(0, (2, 2)), (4, 5))))
  else:
    O = canvas(0, (12, 10))
    O = fill(O, 8, connect((1, 3), (2, 3)))
    O = fill(O, 2, connect((3, 3), (7, 3)))
  return O
 
0.11469135802469137, 10.659327, def cbijjbehbfebeahdiegafhdibcbiddcf(I):
  digit = index(I, (0, 0))
  if digit == 0:
    O = canvas(0, (15, 9))
    O = fill(O, 2, {(i, j) for i in range(8, 11) for j in range(1, 4)})
    O = fill(O, 2, {(i, j) for i in range(9, 12) for j in range(3, 6)})
    O = fill(O, 8, {(i, j) for i in range(10, 12) for j in range(4, 5)})
  elif digit == 8:
    O = canvas(0, (10, 10))
    O = fill(O, 2, {(i, j) for i in range(3, 5) for j in range(4, 6)})
    O = fill(O, 8, {(i, j) for i in range(4, 6) for j in range(5, 7)})
  else:
    O = canvas(0, (12, 10))
    O = fill(O, 8, {(i, j) for i in range(1, 3) for j in range(3, 5)})
    O = fill(O, 2, {(i, j) for i in range(3, 8) for j in range(3, 5)})
  return O
 
0.07804576376004947, 33.003582, def abdifgadbheeegecbddgieecagbdbega(I):
  d = int(I[0][0])
  O = canvas(0, (14, 10)) 
  O = paint(O, recolor(8, box({(10, 1)}))) # Place the fixed "8"

  L_shape = combine(connect((8, 1), (10, 1)), connect((9, 1), (9, 2))) # Define the "L" shape

  if d == 0:
    O = paint(O, recolor(2, L_shape))  
  elif d == 8:
    O = paint(O, recolor(2, L_shape))
    O = paint(O, recolor(d, box(shift({(0, 0)}, (8, 2)))))  # Place the first "8" square
    O = paint(O, recolor(d, box(shift({(0, 0)}, (9, 2)))))  # Place the second "8" square
  else:
    O = paint(O, recolor(2, L_shape))
    O = paint(O, recolor(d, box(shift({(0, 0)}, (9, 2)))))  # Place the digit square

  return rot90(O) 
 
0.14285714285714288, 11.967292, def ibaedfhcaccceddebfedfaddfjgedhdd(I):
  digit = int(I[0][0])
  O = canvas(0, (14, 10))
  if digit == 0:
    O = paint(O, recolor(2, {(8, 2), (9, 2), (10, 2), (8, 3), (10, 3), (8, 4), (9, 4), (10, 4), (8, 5), (10, 5)}))  # Direct cell painting
    O = paint(O, recolor(8, {(9, 4), (10, 4)}))
    O = paint(O, recolor(8, {(9, 5), (10, 5)}))
  elif digit == 8:
    O = paint(O, recolor(2, {(4, 3), (5, 3), (4, 4), (5, 4), (4, 5), (5, 5), (6, 3), (6, 4)}))  # Direct cell painting
    O = paint(O, recolor(8, {(6, 5), (7, 5)}))
    O = paint(O, recolor(8, {(6, 6), (7, 6)}))
  else:  # digit == 2
    O = paint(O, recolor(8, {(2, 4), (3, 4)}))
    O = paint(O, recolor(8, {(3, 4), (4, 4)}))
    O = paint(O, recolor(2, {(4, 3), (5, 3), (4, 4), (5, 4), (4, 5), (5, 5), (6, 5), (6, 6)}))  # Direct cell painting
  return O
 
0.14285714285714288, 13.162029, def jdacedejbhgdedbabebfcaebgadffbch(I):
  d = int(I[0][0])
  O = canvas(0, (14, 10))
  for i, r in enumerate(((8, 2, 2, 2, 0), (2, 2, 0, 2, 0), (0, 0, 0, 8, 8), (0, 0, 0, 8, 8), (0, 0, 0, 0, 0)) if d == 0 else 
                    ((0, 0, 2, 2, 0), (0, 0, 2, 2, 0), (0, 2, 2, 2, 0), (0, 0, 2, 2, 8), (0, 0, 0, 8, 8)) if d == 8 else
                    ((0, 0, 8, 8, 0), (0, 0, 8, 8, 0), (0, 0, 2, 2, 2), (0, 2, 2, 2, 2), (0, 0, 2, 2, 0))):
    for j, v in enumerate(r):
      if v:
        O = paint(O, recolor(v, {(i + (4 if d else 8), j + 2)}))  # Adjusted offsets based on digit
  return O
 
0.1357142857142857, 16.430315, def ecgacfddcaceeiccjacgaehddfgacafg(I):
  d = int(I[0][0])
  O = canvas(0, (14, 10))
  p = lambda x, y: paint(O, recolor(2, {(x, y), (x + 1, y), (x, y + 1), (x + 1, y + 1)})) # Function for base shape
  l = lambda x, y: paint(O, recolor(8, {(x, y), (x + 1, y)}))                     # Function for line shape
  if d == 0:
    O = p(8, 2)
    O = paint(O, recolor(2, {(8, 4), (9, 4), (8, 5), (9, 5)}))  # Direct cell painting for extension
    O = l(9, 4)
    O = l(9, 5)
  elif d == 8:
    O = p(4, 3)
    O = paint(O, recolor(2, {(6, 3), (6, 4)}))  # Direct cell painting for bottom curve
    O = l(6, 5)
    O = l(6, 6)
  else:  # digit == 2
    O = l(2, 4)
    O = l(3, 4)
    O = p(4, 3)
    O = paint(O, recolor(2, {(6, 5), (6, 6)})) # Direct cell painting for extension
  return O
 
0.10238095238095239, 35.230118, def aabfbdhjfdcgebafbjfdaadibdbbdcfj(I):
  d = I[0][0]
  O = canvas(0, (14, 10))
  if d == 0:
    O = paint(O, recolor(8, {(10, 4), (10, 5)}))
    O = paint(O, recolor(0, {(9, 4), (9, 5)}))
    O = paint(O, recolor(2, {(8, 2), (8, 3), (8, 4), (9, 4)}))
  elif d == 1:
    O = paint(O, recolor(8, {(4, 7), (4, 8)}))
    O = paint(O, recolor(1, {(2, 7), (2, 8)}))
    O = paint(O, recolor(2, {(1, 5), (1, 6), (2, 5), (2, 6)}))
  elif d == 2:
    O = paint(O, recolor(8, {(1, 4), (1, 5)}))
    O = paint(O, recolor(2, {(5, 4), (5, 5)}))
    O = paint(O, recolor(2, {(3, 3), (3, 4), (4, 3), (4, 4)}))
  return O
 
0.10952380952380952, 27.985159, def iddbfdijiffeefhgjiaejdghiecjeecf(I):
  d = I[0][0]
  O = canvas(0, (14, 10))
  offset = (d * 3, d * -3)
  O = paint(O, recolor(8, {(10, 4), (10, 5)}))
  O = paint(O, shift(recolor(d, {(9, 4), (9, 5)}), offset))
  O = paint(O, recolor(2, {(8, 2), (8, 3), (8, 4), (9, 4)}))
  return O
 
0.0976190476190476, 38.38686, def efiehfeejcaceaedbcabbijfdaddibfj(I):
  d = I[0][0]
  O = canvas(0, (14, 10))
  O = paint(O, recolor(8, {(10 - d * 9, 4 + d * 3)}))
  O = paint(O, recolor(d, {(9 - d * 8, 4 + d * 3)}))
  O = paint(O, recolor(2, {(8 - d * 5, 2 + d)}))
  O = paint(O, recolor(2, {(8 - d * 5, 3 + d)}))
  O = paint(O, recolor(2, {(8 - d * 5, 4 + d)}))
  O = paint(O, recolor(2, {(9 - d * 8, 4 + d)}))
  return O
 
0.10952380952380952, 26.739489, def fbdbibhfhcdbefcbiehchbifaegbfabb(I):
  d = I[0][0]
  O = canvas(0, (14, 10))
  base_obj_8 = recolor(8, {(10, 4), (10, 5)})
  base_obj_d = recolor(d, {(9, 4), (9, 5)})
  base_obj_2 = recolor(2, {(8, 2), (8, 3), (8, 4), (9, 4)})
  if d == 1:
    base_obj_d = hmirror(base_obj_d)
    base_obj_2 = hmirror(base_obj_2)
  if d == 2:
    base_obj_8 = shift(base_obj_8, (-9, 3))
    base_obj_d = shift(base_obj_d, (-8, 3))
    base_obj_2 = shift(base_obj_2, (-5, 1))
  O = paint(O, base_obj_8)
  O = paint(O, base_obj_d)
  O = paint(O, base_obj_2)
  return O
 
0.10185185185185186, 21.009497, def gcffafdbdfebeaaebdgiifdbidbaacda(I):
  v = index(I, (0, 0))
  if v == 0:
    O = fill(fill(fill(canvas(0, (15, 9)), 2, {(i, 1) for i in range(9, 12)}),
                  2, {(i, 3) for i in range(10, 13)}),
              8, {(10, j) for j in range(4, 6)})
  elif v == 8:
    O = fill(fill(canvas(0, (10, 10)), 2, {(i, j) for i in range(3, 5) for j in range(4, 6)}),
              8, {(i, j) for i in range(4, 6) for j in range(5, 7)})
  else:
    O = fill(fill(canvas(0, (12, 10)), 8, {(i, 1) for i in range(1, 3)}),
             2, {(i, 3) for i in range(3, 8)})
  return O
 
0.09666666666666668, 25.76946, def jdjhcaaeccfaebbgjdfcbfecacecaddh(I):
  n = index(I, (0, 0))
  if n == 0:
    O = paint(paint(canvas(0, (15, 9)), 
                   recolor(2, shift({(0, i) for i in range(3)}, (9, 1)))),
                   recolor(2, shift({(0, i) for i in range(3)}, (10, 3))))
    O = paint(O, recolor(8, shift({(0, i) for i in range(2)}, (10, 4))))
  elif n == 8:
    O = paint(canvas(0, (10, 10)), 
                   recolor(2, shift({(i, j) for i in range(2) for j in range(2)}, (3, 4))))
    O = paint(O, recolor(8, shift({(i, j) for i in range(2) for j in range(2)}, (4, 5))))
  else:
    O = paint(canvas(0, (12, 10)), 
                   recolor(8, shift({(i, 0) for i in range(2)}, (1, 1))))
    O = paint(O, recolor(2, shift({(0, i) for i in range(5)}, (3, 3))))
  return O
 
0.09236239950525665, 28.419909, def abceicdbecchejiejadfdfgeebddcdgf(I):
  d = int(I[0][0])
  O = canvas(0, (10, 14)) 

  L_shape = frozenset({(2, (1, 0)), (2, (2, 0)), (2, (1, 1))})

  if d == 0:
    O = paint(O, shift(L_shape, (1, 7)))
    O = paint(O, recolor(8, box(shift({(0, 0)}, (2, 9)))))
    O = paint(O, recolor(8, box(shift({(0, 0)}, (2, 10)))))
  elif d == 8:
    O = paint(O, shift(L_shape, (2, 1)))
    O = paint(O, recolor(d, box(shift({(0, 0)}, (4, 4)))))
    O = paint(O, recolor(d, box(shift({(0, 0)}, (4, 5)))))
  else:
    O = paint(O, recolor(8, box(shift({(0, 0)}, (1, 2)))))
    O = paint(O, recolor(8, box(shift({(0, 0)}, (1, 3)))))
    O = paint(O, shift(L_shape, (3, 3)))

  return O
 
0.08472479901051329, 27.807549, def idigggdffbedeaeabdadaiehcjebcfic(I):
  d = int(I[0][0])
  O = canvas(0, (14, 10))

  L_shape = {(1, 0), (2, 0), (1, 1)}

  if d == 0:
    O = paint(O, recolor(2, shift(recolor(2, L_shape), (7, 1))))
    O = paint(O, recolor(8, shift(box({(0, 0)}), (9, 2))))
    O = paint(O, recolor(8, shift(box({(0, 0)}), (10, 2))))
  elif d == 8:
    O = paint(O, recolor(2, shift(recolor(2, L_shape), (1, 2))))
    O = paint(O, recolor(d, shift(box({(0, 0)}), (4, 4))))
    O = paint(O, recolor(d, shift(box({(0, 0)}), (5, 4))))
  else:
    O = paint(O, recolor(8, shift(box({(0, 0)}), (2, 1))))
    O = paint(O, recolor(8, shift(box({(0, 0)}), (3, 1))))
    O = paint(O, recolor(2, shift(recolor(2, L_shape), (3, 3))))

  return rot90(O)
 
0.09066171923314781, 27.321629, def dbcdghbbfebdeahcaefhfebcabcfbefj(I):
  d = int(I[0][0])
  O = canvas(0, (10, 14))
  
  if d == 0:
    O = paint(O, recolor(2, {(1, 8), (2, 8), (1, 9)}))
    O = paint(O, recolor(8, box({(2, 9)})))
    O = paint(O, recolor(8, box({(2, 10)})))
  elif d == 8:
    O = paint(O, recolor(2, {(2, 1), (3, 1), (2, 2)}))
    O = paint(O, recolor(d, box({(4, 4)})))
    O = paint(O, recolor(d, box({(4, 5)})))
  else:
    O = paint(O, recolor(8, box({(1, 2)})))
    O = paint(O, recolor(8, box({(1, 3)})))
    O = paint(O, recolor(2, {(3, 4), (4, 4), (3, 5)}))
  
  return O
 
0.14761904761904762, 12.706619, def bbicfjcefhffeibbjdbcjdbecgcabdej(I):
  digit = int(I[0][0])
  O = canvas(0, (14, 10))
  segments = {
    0: {(8, 2), (9, 2), (10, 2), (8, 3), (10, 3), (8, 4), (9, 4), (10, 4), (8, 5), (10, 5), (8, 6), (9, 6), (10, 6)},
    2: {(2, 4), (3, 4), (4, 3), (5, 3), (6, 3), (4, 4), (6, 4), (4, 5), (5, 5), (6, 5), (4, 6), (6, 6)},
    8: {(4, 3), (5, 3), (6, 3), (4, 4), (6, 4), (4, 5), (5, 5), (6, 5), (4, 6), (6, 6), (5, 6), (6, 7), (5, 7)}
  }
  lines = {
    0: {(9, 4), (10, 4)},
    8: {(6, 5), (6, 6)},
    2: {(2, 4), (3, 4)}
  }
  O = paint(O, recolor(2, segments[digit]))
  O = paint(O, recolor(8, lines[digit]))
  return O
 
0.14047619047619048, 12.936052, def fbciajecjjjheeahiaaedjiddidffeha(I):
  digit = int(I[0][0])
  O = canvas(0, (14, 10))
  shapes = {
      0: lambda x, y: {(x + i, y + j) for i in range(5) for j in range(4) if (i, j) not in [(1, 0), (1, 3), (3, 0), (3, 3)]},
      8: lambda x, y: {(x + i, y + j) for i in range(3) for j in range(5) if (i, j) not in [(0, 1), (2, 1)]},
      2: lambda x, y: {(x + i, y + j) for i in range(5) for j in range(4) if (i, j) in [(0, 1), (0, 2), (1, 2), (2, 0), (2, 1), (2, 2), (3, 2), (4, 1), (4, 2)]}
  }
  lines = {
      0: lambda x, y: {(x + i, y) for i in range(2)},
      8: lambda x, y: {(x, y + i) for i in range(2)},
      2: lambda x, y: {(x + i, y) for i in range(2)}
  }
  O = paint(O, recolor(2, shapes[digit](8 if digit == 0 else 4 if digit == 8 else 2, 2)))
  O = paint(O, recolor(8, lines[digit](9 if digit == 0 else 6, 4 if digit == 0 else 5 if digit == 8 else 4)))
  return O
 
0.0880952380952381, 52.7706, def fffddgidedfjehbfifeecddaedbjabeb(I):
    digit = index(I, (0, 0))  # Extract the input digit
    canvas = create_canvas(14, 10, fill_value=0)  # Create a 14x10 canvas filled with 0s

    if digit == 0:
        canvas = draw_L(canvas, position=(2, 2), size=8)  # Draw a large L
        canvas = draw_eight(canvas, position=(2, 1), size=2)  # Draw a smaller 8 inside the L
    elif digit == 8:
        canvas = draw_L(canvas, position=(3, 6), size=4)  # Draw a smaller L on the right
        canvas = draw_eight(canvas, position=(3, 4), size=2)  # Draw an 8 overlapping the L
    else:
        canvas = draw_eight(canvas, position=(1, 2), size=3)  # Draw a large 8
        canvas = draw_L(canvas, position=(1, 3), size=3)  # Draw a smaller L inside the 8

    return canvas
 
0.08528138528138529, 24.250113, def hfegjjebebceecfaibefijaccfabfidd(I):
  digit = I[0][0]
  O = canvas(0, (11, 10))
  if digit == 0:
    O = paint(O, {(digit, (0, 0))})
    O = paint(O, recolor(2, shift(upscale({(1, (0, 0))}, 2), (8, 0))))
    O = paint(O, recolor(8, shift(upscale({(1, (0, 0))}, 2), (10, 3))))
  elif digit == 8:
    O = paint(O, recolor(2, shift(upscale({(1, (0, 0))}, 2), (2, 4))))
    O = paint(O, recolor(8, shift(upscale({(1, (0, 0))}, 2), (4, 6))))
  elif digit == 2:
    O = paint(O, recolor(8, shift(upscale({(1, (0, 0))}, 2), (1, 2))))
    O = paint(O, recolor(2, shift(upscale({(1, (0, 0))}, 3), (3, 3))))
    O = paint(O, recolor(2, shift(upscale({(1, (0, 0)), (1, (0, 1)), (1, (0, 2)), (1, (1, 0)), (1, (1, 1)), (1, (1, 2))}, 1), (5, 2))))
  return O
 
0.13463203463203463, 37.598408, def fbdcabigafebeecdjhfdbegbadbhbdac(I):
  digit = I[0][0]
  O = canvas(0, (11, 10))
  if digit == 0:
    O = paint(O, {(digit, (0, 0))})
    O = paint(O, recolor(2, backdrop({(0, 0), (0, 1), (1, 0), (1, 1)})))
    O = paint(O, recolor(8, backdrop({(0, 0), (0, 1), (1, 0), (1, 1)})))
  elif digit == 8:
    O = paint(O, recolor(2, backdrop({(0, 0), (0, 1), (1, 0), (1, 1)})))
    O = paint(O, recolor(8, backdrop({(0, 0), (0, 1), (1, 0), (1, 1)})))
  elif digit == 2:
    O = paint(O, recolor(8, backdrop({(0, 0), (0, 1), (1, 0), (1, 1)})))
    O = paint(O, recolor(2, backdrop({(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)})))
    O = paint(O, recolor(2, backdrop({(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 1), (1, 2), (1, 3)})))
  return O
 
0.10940574576938213, 23.645277, def baaaaedjfehgefhfjcjhadcbaigfaafg(I):
  digit = I[0][0]
  O = canvas(0, (12, 11))
  O = paint(O, {(digit, (0, 0))})
  if digit == 0:
    O = paint(O, recolor(2, shift(upscale( {(1, (0, 0))}, 2), (8, 1))))
    O = paint(O, recolor(8, shift(upscale( {(1, (0, 0))}, 2), (10, 4))))
  elif digit == 8:
    O = paint(O, recolor(2, shift(upscale( {(1, (0, 0))}, 2), (3, 5))))
    O = paint(O, recolor(8, shift(upscale( {(1, (0, 0))}, 2), (5, 7))))
  elif digit == 2:
    O = paint(O, recolor(8, shift(upscale( {(1, (0, 0))}, 2), (2, 3))))
    O = paint(O, recolor(2, shift(upscale( {(1, (0, 0))}, 3), (4, 4))))
    O = paint(O, recolor(2, shift(upscale( {(1, (0, 0)), (1, (0, 1)), (1, (0, 2)), (1, (1, 0)), (1, (1, 1)), (1, (1, 2))}, 1), (6, 3))))
  return O[:11]
 
0.08428571428571428, 33.961834, def aibcddeegdaaeebfbfdhidbeedcbfaad(I):
  digit = index(I, ORIGIN)
  if digit == 0:
    O = fill(fill(canvas(0, (15, 14)), 2, {(i, 0) for i in range(8, 11)}),
              8, {(10, j) for j in range(4, 6)})
  elif digit == 8:
    O = fill(fill(canvas(0, (10, 10)), 2, {(j, 4) for j in range(1, 3)}),
              8, {(i, j) for i in range(3, 5) for j in range(5, 7)})
  else:
    O = fill(fill(canvas(0, (12, 10)), 8, {(j, 1) for j in range(1, 3)}),
              2, {(i, 3) for i in range(4, 7)})
  return O
 
0.08809523809523807, 28.76315, def eibacgfgaadceaeeifaaeajifafeehjc(I):
  d = int(I[0][0])
  O = canvas(0, (14, 10))

  L_shape = frozenset({(1, 0), (2, 0), (1, 1)})

  if d == 0:
    O = paint(O, recolor(2, shift(L_shape, (7, 1))))
    O = paint(O, recolor(8, box(shift({(0, 0)}, (9, 2)))))
    O = paint(O, recolor(8, box(shift({(0, 0)}, (10, 2)))))
  elif d == 8:
    O = paint(O, recolor(2, shift(L_shape, (1, 4))))
    O = paint(O, recolor(d, box(shift({(0, 0)}, (4, 7)))))
  else:
    O = paint(O, recolor(2, shift(L_shape, (3, 2))))
    O = paint(O, recolor(d, box(shift({(0, 0)}, (5, 5)))))

  return O
 
0.09304267161410018, 29.537243, def bbcefejdffcfeedajaedbebejbadhaeg(I):
  d = int(I[0][0])
  O = canvas(0, (10, 14)) # Canvas dimensions swapped for vertical layout

  L_shape = frozenset({(0, 1), (0, 2), (1, 1)}) # L shape rotated

  if d == 0:
    O = paint(O, recolor(2, shift(L_shape, (1, 7))))
    O = paint(O, recolor(8, box(shift({(0, 0)}, (2, 9)))))
    O = paint(O, recolor(8, box(shift({(0, 0)}, (2, 10)))))
  elif d == 8:
    O = paint(O, recolor(2, shift(L_shape, (4, 1))))
    O = paint(O, recolor(d, box(shift({(0, 0)}, (7, 4)))))
  else:
    O = paint(O, recolor(2, shift(L_shape, (2, 3))))
    O = paint(O, recolor(d, box(shift({(0, 0)}, (5, 5)))))

  return O
 
0.04404761904761904, 26.763908, def chagagfacfghehbiieaajeffecbheeie(I):
  d = int(I[0][0])
  O = canvas(0, (14, 10))
  base = lambda x, y: paint(O, recolor(2, {(x, y), (x + 1, y), (x, y + 1), (x + 1, y + 1)}))
  extension = lambda x, y: paint(O, recolor(2, {(x, y), (x + 1, y)}))
  line = lambda x, y: paint(O, recolor(8, {(x, y), (x + 1, y)}))
  if d == 0:
    O = hconcat(hconcat(base(8, 2), extension(8, 4)), hmirror(base(8, 2)))
    O = line(9, 4)
    O = line(10, 4)
  elif d == 8:
    O = vconcat(base(4, 3), extension(4, 5))
    O = line(6, 5)
    O = line(6, 6)
  else:  # digit == 2
    O = line(2, 4)
    O = line(3, 4)
    O = vconcat(base(4, 3), hmirror(extension(4, 5)))
  return O
 
0.0976190476190476, 43.97593, def jfafaegeafefebeciidfgecfbeiedeeb(I):
  obj = asobject(I) # Extract object as an object with cell indices
  upscaled_obj = upscale(obj, 2) # Upscale the object
  d = first(palette(obj)) # Get the digit value
  offset = ((d // 8) + 1, (d % 8) + 1) # Calculate offset based on digit
  shifted_obj = shift(upscaled_obj, offset) # Shift based on calculated offset
  O = paint(canvas(0, (14, 10)), shifted_obj) # Paint on canvas
  return O
 
0.0976190476190476, 44.945896, def dheafecjjfihedjiibbfdacigaiehejj(I):
  obj = normalize(asobject(I)) # Extract and normalize the object
  d = first(palette(obj)) # Get the digit value
  x_offset = (d // 8) * 2 + 1 # Calculate x offset
  y_offset = (d % 8) + 1 # Calculate y offset
  O = paint(canvas(0, (14, 10)), shift(upscale(obj, 2), (x_offset, y_offset)))
  return O
 
0.1119047619047619, 26.804272, def bcjbbcddaeajebafjffcidiaebhfdeec(I):
  digit = I[0][0]
  O = canvas(0, (14, 10))
  shape = {(0, 0), (1, 0), (2, 0), (0, 1), (1, 1), (2, 2), (3, 2), (1, 3), (2, 3)} # Define the '2' shape
  digit_pos = {(2, 1), (3, 1)} # Define position of input digit within the shape
  O = paint(O, recolor(2, shift(shape, (1 + digit, 2 + digit)))) # Shift and paint the '2' shape
  O = paint(O, recolor(digit, shift(digit_pos, (1 + digit, 2 + digit)))) # Shift and paint the input digit
  return O
 
0.13256373256373255, 34.46132, def cbefehbfeebaefibbecefffdcfbccbdf(I):
  digit = I[0][0]
  O = canvas(0, (9, 8))
  base_block = {(2, (0, 1)), (2, (1, 1)), (2, (2, 0)), (2, (2, 1)), (2, (2, 2)), (2, (3, 2))} # Define the base block
  digit_block = {(digit, (3, 1)), (digit, (4, 1))} # Define the block for the input digit
  offset = (digit, digit) # Define the offset based on the input digit
  O = paint(O, shift(base_block, offset)) # Shift and paint the base block
  O = paint(O, shift(digit_block, offset)) # Shift and paint the input digit block
  return O
 
0.13722943722943723, 10.594738, def fbfcggbheebcedjbjbcgffegbhgfbdbg(I):
  digit = I[0][0]
  O = canvas(0, (11, 10))
  square = {(0, 0), (0, 1), (1, 0), (1, 1)}
  O = paint(O, recolor(2, shift(square, (1, 2))))
  O = paint(O, recolor(2, shift(square, (1, 3))))
  O = paint(O, recolor(2, shift(square, (2, 2))))
  O = paint(O, recolor(2, shift(square, (3, 3))))
  O = paint(O, recolor(2, shift(square, (2, 4))))
  O = paint(O, recolor(8, shift(square, (3 + digit, 4 + digit)))) # Dynamically position the '8's
  return O
 
0.13265512265512266, 33.69767, def aediihbccciceiajibeiifbcccdfcfaa(I):
  digit = I[0][0]
  O = canvas(0, (10, 9))
  base_shape = {(2, (0, 1)), (2, (0, 2)), (2, (1, 0)), (2, (1, 1)), (2, (2, 1)), (2, (2, 2)), (2, (3, 2))} # Define the base '2' shape
  O = paint(O, shift(base_shape, (digit, digit + 1))) # Shift the base shape diagonally
  O = paint(O, {(digit, (3 + digit, 3 + digit)), (digit, (4 + digit, 3 + digit))}) # Place the input digit at the calculated position
  return O
 
0.10064935064935066, 37.29211, def eeegjadbagabebbbacddacfeaaffcdcf(I):
  d = I[0][0]
  O = canvas(0, (12, 11))
  two_positions = {(1, 2), (1, 3), (2, 2), (3, 3), (2, 4)}  # Positions for '2's relative to the digit
  digit_positions = {(3, 4), (4, 4)}  # Positions for the digit relative to itself
  offset = (d, d + 1)  # Calculate the offset based on the input digit
  O = paint(O, recolor(2, shift(two_positions, offset)))
  O = paint(O, recolor(d, shift(digit_positions, offset))) 
  return O
 
0.09444444444444444, 19.871128, def jjbaaedafecfebjejcadcbdjbcjbbifh(I):
  val = index(I, (0, 0))
  if val == 0:
    O = paint(canvas(0, (15, 9)), recolor(2, {(9, 1), (9, 2), (9, 3)}))
    O = paint(O, recolor(8, {(10, 4), (11, 4)}))
    O = paint(O, recolor(8, {(10, 5), (11, 5)}))
  elif val == 8:
    O = paint(canvas(0, (10, 10)), recolor(2, {(1, 4), (1, 5), (2, 4), (2, 5)}))
    O = paint(O, recolor(8, {(3, 5), (3, 6), (4, 5), (4, 6)}))
  else:
    O = paint(canvas(0, (12, 10)), recolor(8, {(1, 1), (2, 1)}))
    O = paint(O, recolor(8, {(3, 1), (4, 1)}))
    O = paint(O, recolor(2, {(3, 3), (4, 3), (5, 3), (3, 4), (4, 4), (5, 4)}))
  return O
 
0.09999999999999999, 28.856586, def egbbebhacggdeicdijajdgdcgcfbdfdb(I):
  d = I[0][0]
  O = canvas(0, (14, 10))
  if d == 0:
    O = paint(O, recolor(2, {(9, 1), (9, 2), (9, 3), (10, 3)}))
    O = paint(O, recolor(8, {(11, 4), (11, 5), (12, 4), (12, 5)}))
  elif d == 1:
    O = paint(O, recolor(2, {(1, 5), (1, 6), (2, 5), (2, 6), (3, 6), (3, 7)}))
    O = paint(O, recolor(8, {(4, 7), (4, 8), (5, 7), (5, 8)}))
  elif d == 2:
    O = paint(O, recolor(2, {(3, 3), (3, 4), (4, 4), (4, 5), (5, 5), (5, 6)}))
    O = paint(O, recolor(8, {(6, 7), (6, 8), (7, 7), (7, 8)}))
  return O
 
0.09523809523809523, 33.30162, def jdechehfajdhecccjeaadbacgihhddeg(I):
  d = I[0][0]
  O = canvas(0, (14, 10))
  base_pattern = {(9, 1), (9, 2), (9, 3), (10, 3)} # L-shape
  eight_position = (11, 4)  # Initial '8' position
  O = paint(O, recolor(2, shift(base_pattern, (d, d))))
  O = paint(O, recolor(8, {(eight_position[0] + d, eight_position[1] + d), (eight_position[0] + d, eight_position[1] + d + 1)}))
  return O
 
0.10049382716049382, 19.748835, def adiaeeadabedejfbjdfcbabdheiiiede(I):
  n = index(I, (0, 0))
  if n == 0:
    O = fill(fill(canvas(0, (15, 9)), 2, {(i, 1) for i in range(9, 12)}),
              8, {(10, j) for j in range(4, 6)} | {(11, j) for j in range(4, 6)})
  elif n == 8:
    O = fill(fill(canvas(0, (10, 10)), 2, {(i, j) for i in range(2, 4) for j in range(3, 5)}),
              8, {(i, j) for i in range(4, 6) for j in range(5, 7)})
  else:
    O = fill(fill(canvas(0, (12, 10)), 8, {(i, 0) for i in range(1, 3)} | {(i, 0) for i in range(2, 4)}),
              2, {(i, 3) for i in range(4, 9)})
  return O
 
0.09777777777777778, 20.796547, def gcbdeffaeefdegifaejddggeifaaefab(I):
  c = index(I, ORIGIN)
  if c == 0:
    O = fill(canvas(0, (15, 9)), 2, {(9, i) for i in range(1, 4)})
    O = fill(O, 8, {(i, 4) for i in range(10, 12)})
    O = fill(O, 8, {(i, 5) for i in range(10, 12)})
  elif c == 8:
    O = fill(canvas(0, (10, 10)), 2, {(i, j) for i in range(2, 4) for j in range(3, 5)})
    O = fill(O, 8, {(i, j) for i in range(4, 6) for j in range(5, 7)})
  else:
    O = fill(canvas(0, (12, 10)), 8, {(i, 0) for i in range(1, 3)})
    O = fill(O, 8, {(i, 0) for i in range(2, 4)})
    O = fill(O, 2, {(4, i) for i in range(3, 8)})
  return O
 
0.10238095238095236, 29.61371, def jceddhihicbaeaffbdcababcihjggaee(I):
  d = int(I[0][0])
  O = canvas(0, (14, 10))

  if d == 0:
    O = paint(O, recolor(2, {(8, 2), (8, 3), (9, 2)}))
    O = paint(O, recolor(8, {(9, 2), (9, 3)}))
  elif d == 8:
    O = paint(O, recolor(2, {(1, 7), (1, 8), (2, 7)}))
    O = paint(O, recolor(8, {(2, 4), (2, 5)}))
  else:
    O = paint(O, recolor(2, {(3, 5), (3, 6), (4, 5)}))
    O = paint(O, recolor(d, {(4, 2), (4, 3)}))
  return O
 
0.14444444444444443, 15.549632, def efcbgffbeacaegacbidfgaaciacdbbij(I):
  val = first(first(I)) if I else 0  # Extract the input digit
  h, w = 14, 9  # Default output grid dimensions
  O = canvas(0, (h, w)) # Create canvas with background '0'

  if val == 0:
    O = paint(O, recolor(2, {(h-2,1),(h-2,2),(h-2,3),(h-1,3)}))
    O = paint(O, recolor(2, {(h-1,1),(h-1,2),(h-2,4)}))
    O = paint(O, recolor(8, {(h-3,3),(h-3,4),(h-2,7),(h-2,8)}))
    O = paint(O, recolor(8, {(h-4,3),(h-4,4)})) 
  elif val == 8:
    h, w = 9, 10
    O = canvas(0, (h, w))
    O = paint(O, recolor(2, {(h-3,4),(h-3,5),(h-2,4),(h-2,5),(h-1,3),(h-1,4),(h-1,5)}))
    O = paint(O, recolor(8, {(h-4,6),(h-4,7),(h-3,8),(h-3,9)}))
    O = paint(O, recolor(8, {(h-5,6),(h-5,7)})) 
  elif val == 2:
    h, w = 11, 10
    O = canvas(0, (h, w))
    O = paint(O, recolor(8, {(h-6,3),(h-6,4),(h-5,3),(h-5,4)}))
    O = paint(O, recolor(2, {(h-4,3),(h-4,4),(h-4,5),(h-3,3),(h-3,4),(h-3,5),(h-2,3),(h-2,4),(h-2,5),(h-1,2),(h-1,3),(h-1,4)}))
    O = paint(O, recolor(2, {(h-5,5),(h-4,6)})) 

  return O
 
0.1931216931216931, 12.638603, def decjbebgcbabeeebjecjaffcdadghcdi(I):
  val = first(first(I)) if I else 0
  if val == 0:
    obj_2 = normalize({(2, (0, 0)), (2, (0, 1)), (2, (0, 2)), (2, (1, 2)), (2, (1, 0)), (2, (1, 1)), (2, (0, 3))})
    obj_8 = normalize({(8, (0, 0)), (8, (0, 1)), (8, (1, 3)), (8, (1, 4)), (8, (0, 2)), (8, (0, 3))})
    h, w = 14, 9
    O = canvas(0, (h, w))
    O = paint(O, shift(obj_2, (h - 2, 1)))
    O = paint(O, shift(obj_8, (h - 4, 3)))
  elif val == 8:
    obj_2 = normalize({(2, (0, 0)), (2, (0, 1)), (2, (0, 2)), (2, (1, 1)), (2, (1, 2)), (2, (2, 0)), (2, (2, 1)), (2, (2, 2))})
    obj_8 = normalize({(8, (0, 0)), (8, (0, 1)), (8, (1, 2)), (8, (1, 3)), (8, (0, 2)), (8, (0, 3))})
    h, w = 9, 10
    O = canvas(0, (h, w))
    O = paint(O, shift(obj_2, (h - 4, 3)))
    O = paint(O, shift(obj_8, (h - 6, 6)))
  else: # val == 2
    obj_8 = normalize({(8, (0, 0)), (8, (0, 1)), (8, (1, 0)), (8, (1, 1))})
    obj_2 = normalize({(2, (0, 0)), (2, (0, 1)), (2, (0, 2)), (2, (1, 0)), (2, (1, 1)), (2, (1, 2)), (2, (2, 0)), (2, (2, 1)), (2, (2, 2)), (2, (3, 0)), (2, (3, 1)), (2, (3, 2)), (2, (2, 3))})
    h, w = 11, 10
    O = canvas(0, (h, w))
    O = paint(O, shift(obj_8, (h - 6, 3)))
    O = paint(O, shift(obj_2, (h - 5, 2)))
  return O 
 
0.1656084656084656, 13.030516, def gaafcjfhaceaecahbbafdffaecgbebba(I):
  val = first(first(I)) if I else 0
  h, w = 14, 9  # Default
  O = canvas(0, (h, w))

  if val == 0:
    for i in range(2):
      for j in range(3):
        O = paint(O, recolor(2, {(h-2+i, 1+j)}))
    O = paint(O, recolor(2, {(h-2,4), (h-1, 4)}))
    for i in range(2):
      for j in range(2):
        O = paint(O, recolor(8, {(h-4+i, 3+j)}))
    O = paint(O, recolor(8, {(h-2, 7), (h-2, 8)}))
  elif val == 8: 
    h, w = 9, 10
    O = canvas(0, (h, w))
    for i in range(2):
      for j in range(3):
        O = paint(O, recolor(2, {(h-4+i, 4+j)}))
    O = paint(O, recolor(2, {(h-1, 3), (h-1, 4), (h-1, 5)}))
    for i in range(2):
      for j in range(2):
        O = paint(O, recolor(8, {(h-6+i, 6+j)}))
    O = paint(O, recolor(8, {(h-3, 8), (h-3, 9)}))
  elif val == 2:
    h, w = 11, 10
    O = canvas(0, (h, w))
    for i in range(2):
      for j in range(2):
        O = paint(O, recolor(8, {(h-6+i, 3+j)}))
    for i in range(4):
      for j in range(3):
        O = paint(O, recolor(2, {(h-5+i, 2+j)})) 
    O = paint(O, recolor(2, {(h-4, 6)}))

  return O
 
0.08888888888888889, 42.19002, def jfddfcdaaifbefagabjabfbgfhcdheei(I):
  O = canvas(0, (15, 10))
  obj = asobject(upscale(I, 3))
  if mostcolor(obj) == 0:
    O = paint(O, shift(obj, (8, 1)))
  elif mostcolor(obj) == 8:
    O = paint(O, shift(obj, (4, 4)))
  elif mostcolor(obj) == 2:
    O = paint(O, shift(obj, (3, 3)))
  return O
 
0.16298701298701299, 22.22188, def cbfjgejfdbbfeeggjiagffcffbffbajf(I):
  v = int(I[0][0])
  O = canvas(0, (11, 10))
  if v == 0:
    O = paint(O, recolor(2, product(interval(8, 11, 1), interval(3, 6, 1))))
    O = paint(O, recolor(8, product(interval(1, 3, 1), interval(3, 5, 1))))
  else:
    s = v // 2
    O = paint(O, recolor(2, product(interval(0, 2, 1), interval(2, 4, 1))))
    O = paint(O, recolor(v, product(interval(2 + s, 2 + 2 * s, 1), interval(2 * s, 4 * s, 1))))
  return O 
 
0.11402597402597403, 41.977543, def jbfjjdjebeigefdaajaeeeidafajcidd(I):
  d = int(I[0][0])  # Extract the digit
  canvas_size = (10, 10)  # Define canvas dimensions
  O = canvas(0, canvas_size)  # Create empty canvas
  
  if d == 0:
    O = paint(O, {(2, (canvas_size[0]-1, 0))})  # Place single '2' for input 0
  else:
    offset = (canvas_size[0] // 2 - d // 2, canvas_size[1] // 2 - 1)  # Calculate initial offset
    for i in range(d):
      if d % 2 == 0:  # Vertical placement for even digits
        pos = (offset[0] + i, offset[1])
      else:  # Horizontal placement for odd digits
        pos = (offset[0], offset[1] + i)
      O = paint(O, {(d, pos)})  # Paint the digit at the calculated position
  return O
 
0.10069264069264068, 49.267227, def hhheeeicdbdceaeeahihbbeeidaejeab(I):
  d = int(I[0][0])
  O = canvas(0, (10, 10))
  if d == 0: return paint(O, {(2, (9, 0))})
  obj = {(d, (0, 0))}
  obj = upscale(obj, d) if d % 2 else vupscale(obj, d)
  return paint(O, shift(obj, (5 - d // 2, 4)))
 
0.11402597402597403, 42.25296, def bejdcjaaacfceibdjeaafaadeajefade(I):
  d = int(I[0][0])
  O = canvas(0, (10, 10))
  if d == 0: return paint(O, {(2, (9, 0))})
  obj = {(d, (0, 0)) for _ in range(d)}
  obj = {(d, (i, 0)) for i in range(d)} if d % 2 else {(d, (0, i)) for i in range(d)} 
  return paint(O, shift(obj, (5 - d // 2, 4)))
 
0.25396825396825395, 29.39834, def dhbccbceacefeadhaihfecaejfjhjbac(I):
  val = first(first(I)) if I else 0
  O = canvas(0, (14, 9)) if val == 0 else (canvas(0, (9, 10)) if val == 8 else canvas(0, (11, 10)))
  
  if val == 0:
    obj2 = upscale(asobject(((2, 2, 2), (2, 0, 2))), 2)
    obj8 = upscale(asobject(((8, 8), (8, 8))), 2)
    O = paint(paint(O, shift(obj2, (6, 1))), shift(obj8, (8, 3)))
  elif val == 8:
    obj2 = upscale(asobject(((2, 2, 0), (2, 2, 8), (0, 0, 8))), 2)
    O = paint(O, shift(obj2, (3, 3)))
  else: 
    obj8 = upscale(asobject(((8, 8), (8, 8))), 2)
    obj2 = upscale(asobject(((0, 2, 2, 2), (2, 2, 0, 0), (0, 0, 0, 0))), 2)
    O = paint(paint(O, shift(obj8, (1, 3))), shift(obj2, (2, 2)))

  return O
 
0.05238095238095238, 5.5788107, def jefdcegdbeedecfdahggfaadbacgacdf(I):
  val = first(first(I)) if I else 0
  
  grid0 = ((0, 0, 0, 0, 0, 0, 0, 0, 0),
           (0, 0, 0, 0, 0, 0, 0, 0, 0),
           (0, 0, 0, 0, 0, 0, 0, 0, 0),
           (0, 0, 0, 0, 0, 0, 0, 0, 0),
           (0, 0, 0, 0, 0, 0, 0, 0, 0),
           (0, 0, 0, 0, 0, 0, 0, 0, 0),
           (0, 0, 0, 0, 0, 0, 0, 0, 0),
           (0, 0, 0, 0, 0, 0, 0, 0, 0),
           (0, 2, 2, 2, 0, 0, 0, 0, 0),
           (2, 2, 0, 2, 0, 0, 0, 0, 0),
           (0, 0, 0, 8, 8, 0, 0, 0, 0),
           (0, 0, 0, 8, 8, 0, 0, 0, 0),
           (0, 0, 0, 0, 0, 0, 0, 0, 0),
           (0, 0, 0, 0, 0, 0, 0, 0, 0))
  
  grid8 = ((0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
           (0, 0, 0, 0, 2, 2, 0, 0, 0, 0),
           (0, 0, 0, 0, 2, 2, 0, 0, 0, 0),
           (0, 0, 0, 2, 2, 2, 0, 0, 0, 0),
           (0, 0, 0, 0, 2, 2, 8, 8, 0, 0),
           (0, 0, 0, 0, 0, 0, 8, 8, 0, 0),
           (0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
           (0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
           (0, 0, 0, 0, 0, 0, 0, 0, 0, 0))
  
  grid2 = ((0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
           (0, 0, 0, 8, 8, 0, 0, 0, 0, 0),
           (0, 0, 0, 8, 8, 0, 0, 0, 0, 0),
           (0, 0, 0, 2, 2, 2, 0, 0, 0, 0),
           (0, 2, 2, 2, 2, 2, 0, 0, 0, 0),
           (0, 0, 2, 2, 0, 0, 0, 0, 0, 0),
           (0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
           (0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
           (0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
           (0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
           (0, 0, 0, 0, 0, 0, 0, 0, 0, 0))

  return grid0 if val == 0 else (grid8 if val == 8 else grid2)
 
0.09047619047619047, 13.245415, def fdfdhfdcbjgiehejbceiiiejdaddddbf(I):
  O = canvas(0, (14, 10))
  obj = asobject(upscale(I, 3))
  if mostcolor(obj) == 0:
    O = paint(O, shift(obj, (8, 1)))
    O = paint(O, recolor(2, shift(asobject(canvas(1, (2, 3))), (8, 1))))
    O = paint(O, recolor(8, shift(asobject(canvas(1, (2, 2))), (10, 4))))
  elif mostcolor(obj) == 8:
    O = paint(O, shift(obj, (4, 6)))
    O = paint(O, recolor(2, shift(asobject(canvas(1, (2, 2))), (1, 4))))
  elif mostcolor(obj) == 2:
    O = paint(O, shift(obj, (3, 3)))
    O = paint(O, recolor(8, shift(asobject(canvas(1, (2, 2))), (1, 3))))
  return O
 
0.13386243386243388, 11.732386, def cffiaadedejjeadeigcbfdcajejjgiaa(I):
  digit = int(I[0][0])
  O = canvas(0, (14, 9))
  if digit == 0:
    O = paint(O, recolor(8, product(interval(10, 12, 1), interval(3, 6, 1))))
    O = paint(O, recolor(2, combine(product(interval(8, 11, 1), interval(2, 5, 1)), {(9, 3)})))
  else:
    factor = digit // 2
    square_size = (factor, factor)
    O = paint(O, recolor(2, combine(product(interval(1, 3, 1), interval(2, 4, 1)), {(0, 3)})))
    O = paint(O, recolor(digit, product(interval(3 + factor, 3 + 2 * factor, 1), interval(2 * factor, 2 * factor + factor, 1))))  
  return O
 
0.12857142857142856, 11.635255, def adchgffffafdeedbaadfhfheeaffbded(I):
  d = int(I[0][0])
  O = canvas(0, (14, 9))
  if d == 0:
    O = paint(O, recolor(2, {(i, j) for i in range(8, 11) for j in range(2, 5)}))
    O = paint(O, recolor(2, {(9, 3)}))
    O = paint(O, recolor(8, {(i, j) for i in range(10, 12) for j in range(3, 6)}))
  else:
    f = d // 2
    O = paint(O, recolor(2, {(i, j) for i in range(1, 3) for j in range(2, 4)}))
    O = paint(O, recolor(2, {(0, 3)}))
    O = paint(O, recolor(d, {(i, j) for i in range(3 + f, 3 + 2 * f) for j in range(2 * f, 2 * f + f)}))
  return O
 
0.09612244897959184, 18.037779, def facdcebijhgiefcabbbgcfdchaaddbic(I):
  d = int(I[0][0])
  if d == 0:
    O = canvas(0, (14, 14))
    O = paint(O, recolor(2, {(8, j) for j in range(2, 6)}))
    O = paint(O, recolor(2, {(9, j) for j in range(1, 5)}))
    O = paint(O, recolor(2, {(10, 2), (10, 4)}))
    O = paint(O, recolor(8, {(11, 3), (11, 4)}))
  elif d == 1:
    O = canvas(0, (10, 10))
    O = paint(O, recolor(2, {(3, j) for j in range(4, 6)}))
    O = paint(O, recolor(2, {(4, j) for j in range(3, 7)}))
    O = paint(O, recolor(2, {(5, j) for j in range(4, 6)}))
    O = paint(O, recolor(8, {(5, j) for j in range(6, 8)}))
  else: 
    O = canvas(0, (15, 10))
    O = paint(O, recolor(8, {(1, j) for j in range(3, 5)}))
    O = paint(O, recolor(8, {(2, j) for j in range(3, 5)}))
    O = paint(O, recolor(2, {(3, j) for j in range(2, 5)}))
    O = paint(O, recolor(2, {(4, j) for j in range(1, 6)}))
    O = paint(O, recolor(2, {(5, j) for j in range(2, 5)}))
  return O 
 
0.09047619047619047, 17.194283, def ddjjcfadgbddedbbjafefccddjfcdccf(I):
  O = canvas(0, (14, 10))
  obj = asobject(upscale(I, 3))
  c = color(obj)

  if c == 0:
    O = paint(O, shift(obj, (5, 1)))
    O = paint(O, recolor(2, shift(asobject(canvas(1, (2, 3))), (8, 1))))
    O = paint(O, recolor(8, shift(asobject(canvas(1, (1, 2))), (10, 4))))
  elif c == 8:
    O = paint(O, shift(obj, (4, 6)))
    O = paint(O, recolor(2, shift(asobject(canvas(1, (2, 2))), (1, 4))))
    O = paint(O, recolor(8, shift(asobject(canvas(1, (1, 2))), (4, 6))))
  elif c == 2:
    O = paint(O, shift(obj, (3, 3)))
    O = paint(O, recolor(8, shift(asobject(canvas(1, (1, 2))), (1, 3))))
    O = paint(O, recolor(2, shift(asobject(canvas(1, (2, 3))), (3, 6))))
  return O
 
0.09523809523809523, 15.627764, def iaidbhjdadbbehffieebeceddfejcbfc(I):
  O = canvas(0, (14, 10))
  obj = asobject(upscale(I, 3))
  c = color(obj)
  
  obj_positions = {
    0: (5, 1),
    8: (4, 6),
    2: (3, 3)
  }
  
  obj_2_positions = {
    0: (8, 1),
    8: (1, 4),
    2: (3, 6)
  }
  
  obj_8_positions = {
    0: (10, 4),
    8: (4, 6),
    2: (1, 3)
  }
  
  O = paint(O, shift(obj, obj_positions[c]))
  O = paint(O, recolor(2, shift(asobject(canvas(1, (2, 3))), obj_2_positions[c])))
  O = paint(O, recolor(8, shift(asobject(canvas(1, (1, 2))), obj_8_positions[c])))
  
  return O
 
0.1164021164021164, 10.494997, def ddeafhhihdabedeebccecbibbjebfcgf(I):
  digit = int(I[0][0])
  O = canvas(0, (14, 9))
  if digit == 0:
    O = paint(O, recolor(2, combine(product(interval(8, 10, 1), interval(2, 5, 1)), {(9, 3)})))
    O = paint(O, recolor(8, product(interval(10, 12, 1), interval(3, 6, 1))))
  elif digit == 8:
    O = paint(O, recolor(2, product(interval(5, 7, 1), interval(4, 6, 1))))
    O = paint(O, recolor(8, product(interval(5, 7, 1), interval(6, 8, 1))))
  elif digit == 2:
    O = paint(O, recolor(8, product(interval(1, 3, 1), interval(3, 6, 1))))
    O = paint(O, recolor(2, combine(product(interval(3, 5, 1), interval(4, 7, 1)), {(4, 5)})))
  return O
 
0.1015873015873016, 20.911325, def jeifddbeccffejjjiafdijdgffdiedfe(I):
  digit = int(I[0][0])
  O = canvas(0, (14, 9))
  if digit == 0:
    O = paint(O, recolor(8, shift(recolor(8, product(interval(0, 2, 1), interval(0, 3, 1))), (10, 3))))
    O = paint(O, recolor(2, combine(product(interval(8, 10, 1), interval(2, 4, 1)), {(9, 3)})))
  else:
    factor = digit // 2
    O = paint(O, recolor(digit // 2 * 2, shift(recolor(digit // 2 * 2, product(interval(0, 2, 1), interval(0, 3, 1))), (1 + 4 * factor, 3))))
    O = paint(O, recolor(2, shift(recolor(2, product(interval(0, 2, 1), interval(0, 2, 1))), (factor + 3, 2 * factor))))
  return O
 
0.1015873015873016, 19.208597, def cfhcecjiadfhehbcajffhadbedfiecde(I):
  digit = int(I[0][0])
  O = canvas(0, (14, 9))
  if digit == 0:
    O = paint(O, recolor(8, shift(recolor(8, product(interval(0, 2, 1), interval(0, 3, 1))), (10, 3))))
    O = paint(O, recolor(2, combine(product(interval(8, 10, 1), interval(2, 4, 1)), {(9, 3)})))
  else:
    O = paint(O, recolor(2, shift(recolor(2, product(interval(0, digit // 2, 1), interval(0, digit // 2, 1))), (3 + digit // 2, digit))))
    O = paint(O, recolor(digit, shift(recolor(digit, product(interval(0, 2, 1), interval(0, 3, 1))), (digit - 1, digit))))
  return O
 
0.11619047619047618, 16.583138, def aghcafadadfcehfaiejaddcejdbccbii(I):
  d = int(I[0][0])
  if d == 0:
    O = canvas(0, (14, 10))
    O = paint(O, recolor(2, {(8, j) for j in range(1, 4)}))
    O = paint(O, recolor(2, {(9, 0), (9, 2)}))
    O = paint(O, recolor(8, {(10, 1), (10, 2), (11, 1), (11, 2)}))
  elif d == 1:
    O = canvas(0, (10, 10))
    O = paint(O, recolor(2, {(1, 4), (1, 5), (2, 4), (2, 5), (3, 4), (3, 5)}))
    O = paint(O, recolor(2, {(4, 3), (4, 6)}))
    O = paint(O, recolor(8, {(4, 7), (4, 8), (5, 7), (5, 8)}))
  else:
    O = canvas(0, (15, 10))
    O = paint(O, recolor(8, {(1, 3), (1, 4), (2, 3), (2, 4)}))
    O = paint(O, recolor(2, {(3, 2), (3, 3), (3, 4), (4, 2), (4, 3), (4, 4), (5, 2), (5, 3), (5, 4)}))
  return O
 
0.12095238095238096, 16.347733, def ejjcbhbfbcedefdgihdbbficcbjjafdc(I):
  d = int(I[0][0])
  if d == 0:
    O = paint(canvas(0, (14, 10)), recolor(2, {(i, j) for i in range(8, 10) for j in range(4) if (i, j) != (9, 1)}))
    O = paint(O, recolor(8, {(i, j) for i in range(10, 12) for j in range(1, 3)}))
  elif d == 1:
    O = paint(canvas(0, (10, 10)), recolor(2, {(i, j) for i in range(1, 4) for j in range(4, 6)}))
    O = paint(O, recolor(2, {(4, 3), (4, 6)}))
    O = paint(O, recolor(8, {(i, j) for i in range(4, 6) for j in range(7, 9)}))
  else:
    O = paint(canvas(0, (15, 10)), recolor(8, {(i, j) for i in range(1, 3) for j in range(3, 5)}))
    O = paint(O, recolor(2, {(i, j) for i in range(3, 6) for j in range(2, 5)}))
  return O
 
0.1253968253968254, 17.890182, def hghccabebeeeehbbbajbaabccgacfefh(I):
  d = int(I[0][0])
  if d == 0:
    shape = normalize(frozenset({(2, (0, 0)), (2, (0, 1)), (2, (0, 2)), (2, (1, 0)), (2, (1, 2)), (8, (2, 0)), (8, (2, 1)), (8, (3, 0)), (8, (3, 1))}))
    O = paint(canvas(0, (14, 10)), shift(shape, (8, 0)))
  elif d == 1:
    shape = normalize(frozenset({(2, (0, 0)), (2, (0, 1)), (2, (1, 0)), (2, (1, 1)), (2, (2, 0)), (2, (2, 1)), (2, (3, 0)), (8, (3, 1)), (8, (4, 1)), (8, (4, 0))}))
    O = paint(canvas(0, (10, 10)), shift(shape, (1, 3)))
  else:
    shape = normalize(frozenset({(8, (0, 0)), (8, (0, 1)), (8, (1, 0)), (8, (1, 1)), (2, (2, 0)), (2, (2, 1)), (2, (2, 2)), (2, (3, 0)), (2, (3, 1)), (2, (3, 2)), (2, (4, 0)), (2, (4, 1)), (2, (4, 2))}))
    O = paint(canvas(0, (15, 10)), shift(shape, (1, 2)))
  return O
 
0.12095238095238096, 16.794855, def edihbdjbchcfeehbbeefaefbifffbacc(I):
  d = int(I[0][0])
  if d == 0:
    O = paint(canvas(0, (14, 10)), recolor(2,  {(i, j) for i in range(8, 10) for j in range(3) if j != 1 or i == 8}))
    O = paint(O, recolor(8, {(10, j) for j in range(1, 3)} | {(11, j) for j in range(1, 3)}))
  elif d == 1:
    O = paint(canvas(0, (10, 10)), recolor(2, {(i, j) for i in range(1, 5) for j in range(4, 7) if i != 4 or j != 5}))
    O = paint(O, recolor(8, {(i, j) for i in range(4, 6) for j in range(7, 9)}))
  else:
    O = paint(canvas(0, (15, 10)), recolor(8, {(i, j) for i in range(1, 3) for j in range(3, 5)}))
    O = paint(O, recolor(2, {(i, j) for i in range(3, 6) for j in range(2, 5)}))
  return O
 
0.09923941798941799, 29.015457, def acgadccfbfeiebacjfefdjfbjgahcadf(I):
  v = index(I, ORIGIN)
  s = v // 2 + 2
  c_h, c_w = 14, 9 + max(0, v - 1)
  O = canvas(ZERO, (c_h, c_w))
  for i in range(c_h // 2 - s // 2, c_h // 2 + s // 2):
    for j in range(c_w - s, c_w):
      O = fill(O, TWO, {(i, j)})
  if v:
    for i in range(c_h // 2 + s // 2 - 2, c_h // 2 + s // 2):
      for j in range(c_w - 2, c_w):
        O = fill(O, v, {(i, j)})
  return O 
 
0.12433862433862435, 12.196822, def bdaffcfdbeiaebcdbgabbhfjeiiacdcj(I):
  digit = int(I[0][0])
  O = canvas(0, (14, 9))
  if digit == 0:
    O = paint(O, recolor(8, shift(product(interval(0, 2, 1), interval(0, 3, 1)), (10, 3)))) # Outer Frame
    O = paint(O, recolor(2, shift(combine(product({0}, interval(0, 3, 1)), product(interval(0, 2, 1), {0, 2})), (9, 2)))) # Inner "C"
  elif digit == 8:
    O = paint(O, recolor(2, shift(product(interval(0, 2, 1), interval(0, 2, 1)), (5, 4)))) # Top Square
    O = paint(O, recolor(8, shift(product(interval(0, 2, 1), interval(0, 3, 1)), (5, 6)))) # Bottom Square
  elif digit == 2:
    O = paint(O, recolor(8, shift(product(interval(0, 2, 1), interval(0, 3, 1)), (1, 3)))) # Vertical Line
    O = paint(O, recolor(2, shift(combine(product({0}, interval(0, 3, 1)), product({1}, interval(1, 3, 1)), product(interval(0, 2, 1), {0})), (3, 5)))) # Curved Shape
  return O
 
0.12195767195767195, 12.941904, def gjdfgacdghbheijdiibifcceabddeadc(I):
  digit = int(I[0][0])
  O = canvas(0, (14, 9))
  square_2x2 = product(interval(0, 2, 1), interval(0, 2, 1))
  line_2x3 = product(interval(0, 2, 1), interval(0, 3, 1))
  if digit == 0:
    O = paint(O, recolor(8, shift(line_2x3, (10, 3))))
    O = paint(O, recolor(2, shift(combine(square_2x2, {(1, 0), (1, 2)}), (9, 2))))
  elif digit == 8:
    O = paint(O, recolor(2, shift(square_2x2, (5, 4))))
    O = paint(O, recolor(8, shift(line_2x3, (5, 6))))
  elif digit == 2:
    O = paint(O, recolor(8, shift(line_2x3, (1, 3))))
    O = paint(O, recolor(2, shift(combine(square_2x2, {(0, 1), (0, 2)}), (3, 5))))
  return O
 
0.14947089947089945, 14.702649, def dbfffebecifieeacafjaddddfebdibic(I):
  digit = int(I[0][0])
  O = canvas(0, (14, 9))
  top, bottom = vsplit(O, 2) 
  if digit == 0:
    O = paint(O, recolor(8, shift(product(interval(0, 2, 1), interval(0, 3, 1)), (10, 3))))
    O = paint(O, recolor(2, shift(combine(product({0}, interval(0, 3, 1)), product(interval(0, 2, 1), {0, 2})), (9, 2))))
  elif digit == 8:
    O = paint(top, recolor(2, shift(product(interval(0, 2, 1), interval(0, 2, 1)), (5, 2)))) 
    O = paint(bottom, recolor(8, shift(product(interval(0, 2, 1), interval(0, 3, 1)), (5, 1)))) 
  elif digit == 2:
    O = paint(O, recolor(8, shift(product(interval(0, 2, 1), interval(0, 3, 1)), (1, 3))))
    O = paint(O, recolor(2, shift(combine(product({0}, interval(0, 3, 1)), product({1}, interval(1, 3, 1)), product(interval(0, 2, 1), {0})), (3, 5))))
  return O
 
0.09761904761904762, 41.764935, def baahcdbcibebebbjjjdefcfeicbejjei(I):
  val = int(I[0][0])
  if val == 0:
    O = paint(canvas(0, (14, 10)), shift(combine(recolor(2, canvas(0, (9, 2))), shift(recolor(8, canvas(0, (2, 2))), (0, 3))), (4, 0)))
  elif val == 2:
    O = paint(canvas(0, (10, 10)), shift(combine(recolor(2, canvas(0, (5, 2))), shift(recolor(8, canvas(0, (2, 2))), (2, 2))), (1, 3)))
  else:
    O = paint(canvas(0, (15, 10)), shift(combine(recolor(8, canvas(0, (4, 2))), shift(recolor(2, canvas(0, (3, 2))), (2, 0))), (1, 2)))
  return O
 
0.09923941798941799, 30.783707, def eiaidfiadidgecaibcadbedeeaeacgfj(I):
  v = index(I, ORIGIN)
  s = v // 2 + 2
  c_h, c_w = 14, max(9, 9 + v - 1)
  outer_square = recolor(TWO, {(i, j) for i in range(s) for j in range(s)})
  if v:
    inner_square = recolor(v, {(i, j) for i in range(s - 2, s) for j in range(s - 2, s)})
    outer_square = outer_square | inner_square
  return paint(canvas(ZERO, (c_h, c_w)), shift(outer_square, ((c_h - s) // 2, c_w - s))) 
 
0.09923941798941799, 32.41829, def ebdfbbfhdgcfejejiacbaddiheabcfca(I):
  v = index(I, ORIGIN)
  s = v // 2 + 2
  c_h, c_w = 14, max(9, 9 + v - 1)
  O = canvas(ZERO, (c_h, c_w))
  for i in range(c_h):
    for j in range(c_w):
      fill_value = branch((c_h // 2 - s // 2 <= i < c_h // 2 + s // 2 and c_w - s <= j < c_w) or
                             (v and c_h // 2 + s // 2 - 2 <= i < c_h // 2 + s // 2 and c_w - 2 <= j < c_w), TWO, ZERO)
      O = fill(O, fill_value, {(i, j)})
  return O
 
0.13285233285233286, 13.345188, def abjbfbjbcjeeeedeiedbhffaafdacdba(I):
  val = mostcommon(I)
  h = 14 if val == 0 else (9 if val == 8 else 11) # determine output grid height
  O = canvas(0, (h, 9)) # Create canvas with background '0'
  
  if val == 0:
    O = paint(O, recolor(2, {(h-3,1), (h-3,2), (h-3,3), (h-2, 1)})) # Paint 'L' shape for '2'
    O = paint(O, recolor(8, {(h-4,4), (h-4,5), (h-3,4), (h-3,5)})) # Paint square for '8'
  elif val == 8:
    O = paint(O, recolor(2, {(4,3), (4,4), (4,5), (5,4), (6,4), (6,3), (6,5)})) # Paint 'T' shape for '2'
  else: # val == 2
    O = paint(O, recolor(8, {(1,4), (1,5), (2,4), (2,5)})) # Paint square for '8'
    O = paint(O, recolor(2, {(3,1), (3,2), (3,3), (4,1), (4,2)})) # Paint reverse 'L' shape for '2'

  return O
 
0.13285233285233286, 17.396648, def fhffecficdihedadjahfcdfaececbjej(I):
  val = mostcommon(I)
  O = canvas(0, (14, 9)) if val == 0 else (canvas(0, (9, 10)) if val == 8 else canvas(0, (11, 9))) # determine output grid size
  
  if val == 0:
    O = paint(O, shift(asobject(((2,2,2),(2,0,0))), (11, 1))) # 'L' shape for '2'
    O = paint(O, shift(asobject(((8,8),(8,8))), (9, 4))) # Square shape for '8'
  elif val == 8:
    O = paint(O, shift(asobject(((0,2,2,0),(2,2,2,0),(0,2,2,0))), (4, 3))) # 'T' shape for '2'
  else: # val == 2
    O = paint(O, shift(asobject(((8,8),(8,8))), (1, 4))) # Square shape for '8'
    O = paint(O, shift(asobject(((0,0,0),(2,2,0),(2,2,2))), (3, 1))) # Reverse 'L' shape for '2'

  return O
 
0.10952380952380952, 14.713508, def hajcdfhebcfhejddbjbfdacjbbjgdeff(I):
  v = int(I[0][0])
  O = canvas(0, (14, 10))
  if v == 0:
    O = paint(O, recolor(2, product(interval(8, 11, 1), {3, 5}))) # U sides
    O = paint(O, recolor(2, product({8}, interval(4, 5, 1)))) # U bottom
    O = paint(O, recolor(8, product(interval(10, 12, 1), interval(4, 6, 1)))) # 8 squares
  elif v == 8:
    O = paint(O, recolor(2, product(interval(1, 3, 1), interval(3, 5, 1)))) # Small 2 square
    O = paint(O, recolor(2, product(interval(3, 5, 1), interval(4, 6, 1)))) # Large 2 square
    O = paint(O, recolor(8, product(interval(6, 8, 1), interval(5, 7, 1)))) # 8 squares
  elif v == 2:
    O = paint(O, recolor(8, product(interval(1, 3, 1), interval(3, 5, 1)))) # 8 squares
    O = paint(O, recolor(2, product(interval(3, 6, 1), interval(4, 7, 1)))) # Large 2 square
    O = paint(O, recolor(2, product({3}, interval(5, 6, 1)))) # Small 2 square
  return O
 
0.11666666666666665, 12.910006, def cbjccaafacebeegcibbadiaaeaefhfbf(I):
  digit = int(I[0][0])
  O = canvas(0, (14, 10))
  if digit == 0:
    O = paint(O, recolor(2, combine(product({8, 10}, interval(3, 6, 1)), product({9}, interval(4, 5, 1))))) # U shape
    O = paint(O, recolor(8, shift(product(interval(0, 2, 1), interval(0, 2, 1)), (10, 4)))) # 8 squares
  elif digit == 8:
    O = paint(O, recolor(2, shift(product(interval(0, 2, 1), interval(0, 2, 1)), (1, 3)))) # Small 2 square
    O = paint(O, recolor(2, shift(product(interval(0, 3, 1), interval(0, 3, 1)), (3, 4)))) # Large 2 square
    O = paint(O, recolor(8, shift(product(interval(0, 2, 1), interval(0, 2, 1)), (6, 5)))) # 8 squares
  elif digit == 2:
    O = paint(O, recolor(8, shift(product(interval(0, 2, 1), interval(0, 2, 1)), (1, 3)))) # 8 squares
    O = paint(O, recolor(2, shift(product(interval(0, 3, 1), interval(0, 3, 1)), (3, 4)))) # Large 2 square
    O = paint(O, recolor(2, shift(product(interval(0, 2, 1), interval(0, 2, 1)), (2, 5)))) # Small 2 square
  return O 
 
0.11428571428571428, 15.243384, def ejcceaddbdchecgbbbjgfdaaaggagacg(I):
  d = int(I[0][0])
  O = canvas(0, (14, 10))
  if d == 0:
    O = paint(O, recolor(2, combine(product({8, 10}, interval(3, 6, 1)), {(9,4)}))) # U shape
    O = paint(O, recolor(8, shift(product(interval(0, 2, 1), interval(0, 2, 1)), (10, 4)))) # 8 squares
  else:
    size = 2 if d == 8 else 3
    offset = (1, 3) if d == 8 else (3, 4)
    O = paint(O, recolor(2, shift(product(interval(0, 2, 1), interval(0, 2, 1)), offset))) # Small square
    O = paint(O, recolor(2, shift(product(interval(0, size, 1), interval(0, size, 1)), (offset[0] + 2, offset[1])))) # Large square
    O = paint(O, recolor(8, shift(product(interval(0, 2, 1), interval(0, 2, 1)), (offset[0] + 4, offset[1] + 1)))) # 8 squares
  return O
 
0.1261904761904762, 17.555061, def bffejijiejhiecffiefeffeahcefehhf(I):
  d = int(I[0][0])
  if d == 0:
    O = paint(canvas(0, (14, 10)), recolor(2, {(i, j) for i in range(8, 10) for j in range(2)}))
    O = paint(O, recolor(8, {(i, j) for i in range(10, 12) for j in range(7, 9)}))
  elif d == 2:
    O = paint(canvas(0, (10, 10)), recolor(8, {(i, j) for i in range(1, 3) for j in range(3, 5)}))
    O = paint(O, recolor(2, {(i, j) for i in range(3, 5) for j in range(3, 6)}))
  else:
    O = paint(canvas(0, (10, 10)), recolor(2, {(i, j) for i in range(1, 3) for j in range(4, 9)}))
    O = paint(O, recolor(8, {(i, j) for i in range(3, 5) for j in range(4, 6)}))
  return O
 
0.12, 26.976814, def giddadcfffhdeaecbgddabiebahggjgf(I):
  v = int(I[0][0])
  if v == 0:
    O = paint(canvas(0, (14, 10)), recolor(2, {(i, j) for i in range(8,10) for j in range(2)}))
    O = underpaint(O, recolor(8, shift(canvas(0, (2, 2)), (2, 7))))
  elif v == 2:
    O = paint(canvas(0, (10, 10)), recolor(8, {(i, j) for i in range(1, 3) for j in range(3, 5)}))
    O = underpaint(O, recolor(2, shift(canvas(0, (2, 3)), (2, 0))))
  else:
    O = paint(canvas(0, (10, 10)), recolor(2, {(i, j) for i in range(1, 3) for j in range(4, 9)}))
    O = underpaint(O, recolor(8, shift(canvas(0, (2, 2)), (2, 0))))
  return O
 
0.1595238095238095, 22.990944, def hdfafjjbehifedjijfhebbeaeeeaabee(I):
  v = index(I, ORIGIN)
  s = (v // 2 + 3) * 2
  c_h, c_w = 14, 10
  O = canvas(ZERO, (c_h, c_w))
  for i in range(c_h // 2 - s // 4, c_h // 2 + s // 4):
    for j in range(c_w // 2 - s // 4, c_w // 2 + s // 4):
      O = fill(O, TWO, {(i, j)})
  if v:
    for i in range(c_h // 2 - 1, c_h // 2 + 1):
      for j in range(c_w // 2 - 1, c_w // 2 + 1):
        O = fill(O, v, {(i, j)})
  if v == 0:
    for i in range(c_h // 2 + s // 4 - 2, c_h // 2 + s // 4):
      for j in range(c_w // 2 - 1, c_w // 2 + 1):
        O = fill(O, EIGHT, {(i, j)})
  return O
 
0.13333333333333333, 30.727324, def fbeehbdddedcecbebdidchdbjffbfhfc(I):
    v = index(I, ORIGIN)
    s = v // 2 + 3
    c_h, c_w = 14, 10
    canvas_grid = canvas(ZERO, (c_h, c_w))
    square_indices = {(i, j) for i in range(c_h // 2 - s // 2 + 1, c_h // 2 + s // 2 - 1) for j in range(c_w // 2 - s // 2 + 1, c_w // 2 + s // 2 - 1)}
    canvas_grid = paint(canvas_grid, recolor(TWO, square_indices))
    if v:
        digit_indices = {(i, j) for i in range(c_h // 2 - 1, c_h // 2 + 1) for j in range(c_w // 2 - 1, c_w // 2 + 1)}
        canvas_grid = paint(canvas_grid, recolor(v, digit_indices))
    if v == 0:
        eights_indices = {(c_h // 2 + s // 2 - 2, c_w // 2 - 1), (c_h // 2 + s // 2 - 2, c_w // 2)}
        canvas_grid = paint(canvas_grid, recolor(EIGHT, eights_indices))
    return canvas_grid
 
0.13174603174603175, 16.942122, def hbbaeccehhigeggejcdbcffjacadgeee(I):
  val = first(first(I)) if I else 0
  h, w = (14, 9) if val == 0 else ((9, 10) if val == 8 else (11, 10))
  O = canvas(0, (h, w))
  if val == 0:
    O = fill(O, 2, {(h-3,1), (h-3,2), (h-3,3), (h-2,1)})
    O = fill(O, 8, {(h-4,4), (h-4,5), (h-3,4), (h-3,5)})
  elif val == 8:
    O = fill(O, 2, {(4,3), (4,4), (4,5), (5,4), (6,4), (6,3), (6,5)})
  else: 
    O = fill(O, 8, {(1,4), (1,5), (2,4), (2,5)})
    O = fill(O, 2, {(3,1), (3,2), (3,3), (4,1), (4,2)})
  return O
 
0.1344155844155844, 19.351997, def bjffjhhccbgbeegdigaghaaabbbffihj(I):
  val = mostcommon(I)
  h, w = (14, 9) if val == 0 else ((9, 10) if val == 8 else (11, 10))
  O = canvas(0, (h, w))
  if val == 0:
    obj2 = frozenset({(2, (0, 0)), (2, (0, 1)), (2, (0, 2)), (2, (1, 0))})
    obj8 = frozenset({(8, (0, 0)), (8, (0, 1)), (8, (1, 0)), (8, (1, 1))})
    O = paint(paint(O, shift(obj2, (h-4, 1))), shift(obj8, (h-5, 4)))
  elif val == 8:
    obj2 = frozenset({(2, (0, 0)), (2, (0, 1)), (2, (0, 2)), (2, (1, 1)), (2, (2, 1)), (2, (1, 0)), (2, (1, 2))})
    O = paint(O, shift(obj2, (4, 3)))
  else:
    obj8 = frozenset({(8, (0, 0)), (8, (0, 1)), (8, (1, 0)), (8, (1, 1))})
    obj2 = frozenset({(2, (0, 0)), (2, (1, 0)), (2, (2, 0)), (2, (2, 1)), (2, (2, 2))})
    O = paint(paint(O, shift(obj8, (1, 4))), shift(obj2, (3, 1)))
  return O
 
0.13412698412698412, 16.16573, def fajafedgfccceddbjfacfebjifbebabc(I):
  val = first(first(I)) if I else 0
  if val == 0:
    O = canvas(0, (14, 9))
    O = fill(O, 2, {(11,1), (11,2), (11,3), (10,1)})
    O = fill(O, 8, {(10,4), (10,5), (11,4), (11,5)})
  elif val == 8:
    O = canvas(0, (9, 10))
    O = fill(O, 2, {(4,3), (4,4), (4,5), (5,4), (6,4), (6,3), (6,5)})
  else:
    O = canvas(0, (11, 10))
    O = fill(O, 8, {(1,4), (1,5), (2,4), (2,5)})
    O = fill(O, 2, {(3,1), (3,2), (3,3), (4,1), (4,2)})
  return O
 
0.13783068783068783, 19.734495, def gafgeeahaagbecfcjehafefbijebgabc(I):
  v = first(first(I)) if I else 0
  s = {0: (14, 9), 8: (9, 10), 2: (11, 10)}[v]
  O = canvas(0, s)
  p = lambda c, x, y: fill(O, c, {(x-i, y+j) for i in range(4) for j in range(4) if (i, j) in ((0, 0), (0, 1), (0, 2), (1, 0))}) if c == 2 else (fill(O, c, {(x-i, y+j) for i in range(3) for j in range(3) if (i, j) in ((0, 0), (0, 1), (1, 0), (1, 1))}))
  if v == 0:
    O = p(2, 11, 1)
    O = p(8, 11, 4)
  elif v == 8:
    O = p(2, 7, 3)
  else:
    O = p(8, 3, 4)
    O = p(2, 5, 1)
  return O
 
0.10476190476190476, 15.035766, def cgcecbdifbdeeaecigdehddcadgjabci(I):
  v = int(I[0][0])
  O = canvas(0, (14, 10))
  if v == 0:
    O = paint(O, recolor(2, combine(product({8, 10}, {3, 5}), {(9,4)})))  # U shape
    O = paint(O, recolor(8, product({10, 11}, {4, 5})))  # 8 squares
  else:
    O = paint(O, recolor(2, shift(product(interval(0, 2, 1), interval(0, 2, 1)), (1, 3) if v==8 else (9, 5)))) # Small square
    O = paint(O, recolor(2, shift(product(interval(0, 3 if v==8 else 2, 1), interval(0, 3 if v==8 else 2, 1)), (3, 4) if v==8 else (7, 6)))) # Large square
    O = paint(O, recolor(8, shift(product(interval(0, 2, 1), interval(0, 2, 1)), (5, 5) if v==8 else (1, 3)))) # 8 squares
  return O
 
0.09999999999999999, 17.186398, def gecdbdbhbdgeegeciefdffchfcfbhacc(I):
  v = int(I[0][0])
  O = canvas(0, (14, 10))
  if v == 0:
    O = paint(O, recolor(2, combine(product({8, 10}, {3, 5}), {(9,4)})))  # U shape
    O = paint(O, recolor(8, product({10, 11}, {4, 5})))  # 8 squares
  else:
    base_square = product(interval(0, 2, 1), interval(0, 2, 1))
    O = paint(O, recolor(2, shift(base_square, (1, 3) if v == 8 else (9, 5)))) 
    O = paint(O, recolor(2, shift(base_square if v == 8 else upscale(base_square, 2), (3, 4) if v == 8 else (7, 6)))) 
    O = paint(O, recolor(8, hmirror(shift(base_square, (5, 5) if v == 8 else (1, 3))))) 
  return O
 
0.19324194324194324, 21.71752, def fjbejbcibafaeebjbbgcfbbaacgabdfc(I):
  v = int(I[0][0])
  O = canvas(0, (7, 5)) 
  if v == 0:
    O = paint(O, recolor(2, combine(product({3, 5}, {2, 4}), {(4,3)})))  # U shape
    O = paint(O, recolor(8, product({5, 6}, {3, 4})))  # 8 squares
  else:
    base_square = product(interval(0, 2, 1), interval(0, 2, 1))
    O = paint(O, recolor(2, shift(base_square, (0, 2) if v == 8 else (4, 0)))) 
    O = paint(O, recolor(2, shift(base_square if v == 8 else upscale(base_square, 2), (1, 3) if v == 8 else (3, 1)))) 
    O = paint(O, recolor(8, hmirror(shift(base_square, (2, 4) if v == 8 else (0, 2))))) 
  O = hconcat(O, O)
  return O
 
0.18333333333333335, 15.471151, def haccdjcijdbfeafhjfddffbhhbjdcjce(I):
  v = int(I[0][0])
  if v == 0:
    O = paint(canvas(0, (14, 10)), shift(recolor(2, {(i, j) for i in range(9) for j in range(2)}), (4, 0)))
    O = paint(O, shift(recolor(8, {(i, j) for i in range(2) for j in range(2)}), (4, 7)))
  elif v == 2:
    O = paint(canvas(0, (10, 10)), shift(recolor(8, {(i, j) for i in range(2) for j in range(2)}), (1, 3)))
    O = paint(O, shift(recolor(2, {(i, j) for i in range(3) for j in range(2)}), (3, 3)))
  else:
    O = paint(canvas(0, (10, 10)), shift(recolor(2, {(i, j) for i in range(2) for j in range(5)}), (1, 4)))
    O = paint(O, shift(recolor(8, {(i, j) for i in range(2) for j in range(2)}), (3, 4)))
  return O
 
0.14857142857142858, 27.260252, def cjfiefbcbbdbebefagiabibdedbgecdd(I):
  v = int(I[0][0])
  if v == 0:
    O = paint(canvas(0, (14, 10)), recolor(2, {(i, 0) for i in range(4, 13)}))
    O = paint(O, recolor(8, {(12, j) for j in range(1, 3)}))
  elif v == 2:
    O = paint(canvas(0, (10, 10)), recolor(8, {(i, 3) for i in range(1, 3)}))
    O = paint(O, recolor(2, {(2, j) for j in range(3, 6)}))
  else:
    O = paint(canvas(0, (10, 10)), recolor(2, {(1, j) for j in range(4, 9)}))
    O = paint(O, recolor(8, {(i, 8) for i in range(2, 4)}))
  return O
 
0.22142857142857145, 12.490173, def cbcebjeheadfecgbiegcifdjhbbcajch(I):
  v = index(I, ORIGIN)
  c_h, c_w = 14, 10
  canvas_grid = canvas(ZERO, (c_h, c_w))
  
  # Define square size and position based on input value
  s = (v // 2 + 3) * 2  
  offset_i = c_h // 2 - s // 4
  offset_j = c_w // 2 - s // 4
  
  # Draw the square
  square_indices = {(i, j) for i in range(offset_i, offset_i + s // 2) for j in range(offset_j, offset_j + (s * (3 - v % 2)) // 4)}
  canvas_grid = paint(canvas_grid, recolor(TWO, square_indices))
  
  # Draw the input digit or '8's based on input value
  if v:
    digit_indices = {(offset_i + s // 4 - 1, offset_j + (s * (3 - v % 2)) // 8 - 1), (offset_i + s // 4, offset_j + (s * (3 - v % 2)) // 8 - 1)}
    canvas_grid = paint(canvas_grid, recolor(v, digit_indices))
  else:
    eights_indices = {(offset_i + s // 4 - 1, offset_j + s // 4), (offset_i + s // 4 - 1, offset_j + s // 4 - 1)}
    canvas_grid = paint(canvas_grid, recolor(EIGHT, eights_indices))
  return canvas_grid
 
0.20476190476190478, 13.502784, def bhifabcbfhefeajajebdhffffchacbbd(I):
  v = index(I, ORIGIN)
  c_h, c_w = 14, 10
  canvas_grid = canvas(ZERO, (c_h, c_w))
  
  # Define square dimensions and position based on input value
  s_h = (v // 2 + 3) * 2 
  s_w =  s_h // 2 if v else s_h * 3 // 4
  offset_i = c_h // 2 - s_h // 4
  offset_j = c_w // 2 - s_w // 2

  # Draw the square
  for i in range(offset_i, offset_i + s_h // 2):
    for j in range(offset_j, offset_j + s_w):
      canvas_grid = fill(canvas_grid, TWO, {(i, j)})
  
  # Draw the input digit or '8's based on input value
  if v:
    canvas_grid = fill(canvas_grid, v, {(offset_i + s_h // 4, offset_j + s_w // 4), (offset_i + s_h // 4 - 1, offset_j + s_w // 4)})
  else:
    canvas_grid = fill(canvas_grid, EIGHT, {(offset_i + s_h // 4 - 1, offset_j + s_h // 4), (offset_i + s_h // 4 - 1, offset_j + s_h // 4 - 1)})
  return canvas_grid
 
0.15238095238095237, 15.843472, def cjeagbbadcdbeehjbfcbjbceeijeacda(I):
    v = index(I, ORIGIN)
    c_h, c_w = 14, 10
    canvas_grid = canvas(ZERO, (c_h, c_w))

    # Define square size and offsets based on input value
    s = (v // 2 + 3) * 2
    i_offset = 6 - s // 2 if v else 5 - s // 2
    j_offset = 4 - s // 4 if v else 3 - s // 4

    # Draw the square using nested loops
    for i in range(s // 2):
        for j in range(s // 2 if v else s * 3 // 4):
            canvas_grid = fill(canvas_grid, TWO, {(i + i_offset, j + j_offset)})

    # Draw the digits or '8's based on input value
    if v:
        canvas_grid = fill(canvas_grid, v, {(i_offset + s // 4, j_offset + s // 8), (i_offset + s // 4 - 1, j_offset + s // 8)})
    else:
        canvas_grid = fill(canvas_grid, EIGHT, {(i_offset + s // 4 - 1, j_offset + s // 4), (i_offset + s // 4 - 1, j_offset + s // 4 - 1)})

    return canvas_grid
 
0.1298220298220298, 11.238332, def dceicaaaecdaeadhacgafgaejfjbjejb(I):
  val = mostcommon(I)  # Identify the input digit
  h = 14 if val == 0 else (9 if val == 8 else 11)  # Output grid height
  O = canvas(0, (h, 9))  # Create canvas with background '0'

  if val == 0:
    O = paint(O, recolor(2, {(h-3,1),(h-3,2),(h-3,3),(h-2,1)}))  # Reversed 'L'
    O = paint(O, recolor(8, {(h-4,4),(h-4,5),(h-3,4),(h-3,5)}))  # Square
  elif val == 8:
    input_pos = ulcorner(first(objects(I, True, False, True)))  # '8' position
    O = paint(O, recolor(2, {(input_pos[0]-4+i, input_pos[1]-1+j) for i, j in [(0, 1), (0, 2), (0, 3), (1, 2), (2, 2), (2, 1), (2, 3)]}))  # 'T' shape
  else:  # val == 2 
    O = paint(O, recolor(8, {(2,3),(2,4),(3,3),(3,4)}))  # Square
    O = paint(O, recolor(2, {(4,1),(4,2),(4,3),(5,1),(5,2)}))  # Reversed 'L'
  return O
 
0.14304954304954307, 10.60947, def adihiedfebccefdbifgadcdegdfbibfc(I):
  val = mostcommon(I)
  h = 14 if val == 0 else (9 if val == 8 else 11)
  O = canvas(0, (h, 9))

  if val == 0:
    O = paint(O, recolor(2, shift(asobject(((2,2,2),(2,0,0))), (h-5,1)))) 
    O = paint(O, recolor(8, shift(asobject(((8,8),(8,8))), (h-6,4))))
  elif val == 8:
    input_obj = first(objects(I, True, False, True))
    i, j = ulcorner(input_obj)
    O = paint(O, recolor(2, shift(asobject(((2,2,2,0,0),(0,2,2,2,2),(0,0,2,2,0))), (i-4,j-2))))
  else:
    O = paint(O, recolor(8, shift(asobject(((8,8),(8,8))), (2,3))))
    O = paint(O, recolor(2, shift(asobject(((0,2,2,2),(2,2,0,0),(0,0,0,0))), (3,1)))) 
  return O
 
0.14194324194324193, 12.632501, def jfaigbaeajedefbbjaecdjdfccafaghd(I):
  v = mostcommon(I)
  h = 14 if v == 0 else (9 if v == 8 else 11)
  O = canvas(0, (h, 9))
  if v == 0:
    O = paint(paint(O, recolor(2, shift(frozenset({(0, j) for j in range(1,4)} | {(1, 1)}), (h-3, 0)))),
              recolor(8, shift(frozenset({(i, j) for i in range(2) for j in range(2)}), (h-5, 4))))
  elif v == 8:
    p = ulcorner(first(objects(I, True, False, True)))
    O = paint(O, recolor(2, shift(frozenset({(i, j) for i in range(3) for j in range(5) if (i, j) in [(0, 1), (0, 2), (0, 3), (1, 2), (2, 1), (2, 2), (2, 3)]}), (p[0]-4, p[1]-2))))
  else:
    O = paint(paint(O, recolor(8, shift(frozenset({(i, j) for i in range(2) for j in range(2)}), (2, 3)))),
              recolor(2, shift(frozenset({(0, j) for j in range(3)} | {(1, 0), (1, 1)}), (4, 0)))) 
  return O
 
0.13333333333333333, 36.57357, def ecfbbegjjdcjeeadiegeeeaieediideb(I):
  v = int(I[0][0])
  O = canvas(0, (14, 10))
  u_size = (3, 3) if v == 0 else (v // 2 + 1, v // 2 + 1)
  square_size = (2, 2)
  u_shape = combine(product({8, 9, 10}, {3, 4, 5}), {(9, 4)}) if v==0 else  product(interval(0, u_size[0], 1), interval(0, u_size[1], 1))
  square = product(interval(0, square_size[0], 1), interval(0, square_size[1], 1)) 
  O = paint(O, recolor(2, shift(u_shape, (8 - v // 2, 1 + v // 2))))
  O = paint(O, recolor(8, shift(square, (-3 + v // 2, 8 - v // 2))))
  return O
 
0.0976190476190476, 15.848369, def jbfeaebbfiaieeadjhfdafcbbdbegdab(I):
  v = int(I[0][0])
  hline = recolor(2, frozenset({(0,0), (0,1), (0,2)}))
  vline = recolor(2, frozenset({(0,0), (1,0)}))
  eights = recolor(8, frozenset({(0,0), (0,1), (1,0), (1,1)}))
  if v == 0:
    return paint(paint(paint(canvas(0, (14, 10)), shift(hline, (8, 1))), shift(vline, (9, 0))), shift(eights, (10, 3)))
  elif v == 8:
    return paint(paint(paint(canvas(0, (14, 10)), shift(hline, (1, 8))), shift(vline, (1, 7))), shift(eights, (3, 6)))
  else:
    return paint(paint(paint(canvas(0, (14, 10)), shift(hline, (3, 4))), shift(vline, (1, 4))), shift(eights, (1, 4)))
 
0.3166666666666667, 17.909298, def ebdfefeafaaceadfjadcgdadehbjddfd(I):
  v = index(I, ORIGIN)
  c_h, c_w = 14, 10
  square_size = (v // 2 + 2) * 2
  square_start = (c_h // 2 - square_size // 2 + (1 if v == 1 else 0), 
                   c_w // 2 - square_size // 2)
  square = recolor(TWO, backdrop(asindices(canvas(ZERO, (square_size, square_size)))))
  grid = paint(canvas(ZERO, (c_h, c_w)), shift(square, square_start))
  if v:
    digit_position = add(square_start, (-1, square_size // 2 - 1))
    grid = paint(grid, recolor(v, {ORIGIN, (1, 0)}))
    grid = paint(grid, shift(recolor(v, {ORIGIN}), digit_position))
  else:
    digit_position = add(square_start, (square_size, square_size // 2 - 1))
    grid = paint(grid, recolor(EIGHT, {ORIGIN, (0, 1)}))
    grid = paint(grid, shift(recolor(EIGHT, {ORIGIN, (0, 1)}), digit_position))
  return grid
 
0.3261904761904762, 16.27722, def bjfagebeebdaeggdjabdagdeicaahahc(I):
  v = index(I, ORIGIN)
  c_h, c_w = 14, 10
  square_size =  2 * (v // 2 + 2)
  offset = (1 if v==1 else -1) if v else 0
  square = recolor(TWO, backdrop(asindices(canvas(ZERO, (square_size, square_size)))))
  grid = paint(canvas(ZERO, (c_h, c_w)), shift(square, (c_h // 2 - square_size // 2 + offset, c_w // 2 - square_size // 2)))
  if v:
    digit = recolor(v, {ORIGIN, (1, 0)})
    grid = paint(grid, shift(digit, (c_h // 2 - square_size // 2 + offset - 1, c_w // 2 - 1)))
  else:
    digit = recolor(EIGHT, {ORIGIN, (0, 1)})
    grid = paint(grid, shift(digit, (c_h // 2 + square_size // 2 + offset, c_w // 2 - 1)))
  return grid
 
0.30714285714285716, 17.95521, def gciiahjibabdedbejcafjcfbebdecgef(I):
  v = index(I, ORIGIN)
  c_h, c_w = 14, 10
  grid = canvas(ZERO, (c_h, c_w))
  s = (v // 2 + 2) * 2
  for i in range(c_h // 2 - s // 2 + (1 if v==1 else 0), c_h // 2 + s // 2 + (1 if v==1 else 0)):
    for j in range(c_w // 2 - s // 2, c_w // 2 + s // 2):
      grid = fill(grid, TWO, {(i, j)})
  if v:
    grid = paint(grid, shift(recolor(v, {ORIGIN, (1, 0)}), (c_h // 2 - s // 2 - 1, c_w // 2 - 1))) 
  else:
    grid = paint(grid, shift(recolor(EIGHT, {ORIGIN, (0, 1)}), (c_h // 2 + s // 2, c_w // 2 - 1)))
  return grid
 
0.2119047619047619, 14.0916, def ccbgdefiedhbefdfadcdedabdcffjdcc(I):
  v = index(I, ORIGIN)
  grid = canvas(ZERO, (14, 10))
  square_size = (v // 2 + 2) * 2
  square = recolor(TWO, backdrop(asindices(canvas(ZERO, (square_size, square_size)))))
  
  if v == 1:
    grid = paint(grid, shift(square, (5, 3)))
    grid = paint(grid, shift(recolor(v, {ORIGIN, (1, 0)}), (4, 2)))
  elif v > 1:
    grid = paint(grid, shift(square, (6, 3)))
    grid = paint(grid, shift(recolor(v, {ORIGIN, (1, 0)}), (5, 2)))
  else: 
    grid = paint(grid, shift(square, (7, 3)))
    grid = paint(grid, shift(recolor(EIGHT, {ORIGIN, (0, 1)}), (9, 2)))
  return grid 
 
0.13809523809523808, 15.219287, def bebgbcbeadfcedagagffdiaabeccibbg(I):
  v = index(I, ORIGIN)
  s = (v // 2 + 2) * 2
  offset = (v - 2) if v else 1
  square = recolor(TWO, backdrop(asindices(canvas(ZERO, (s, s)))))
  grid = paint(canvas(ZERO, (14, 10)), shift(square, (7 + offset, 3)))
  if v:
    digit = recolor(v, {ORIGIN, (1, 0)})
    grid = paint(grid, shift(digit, (6 + offset, 2)))
  else:
    digit = recolor(EIGHT, {ORIGIN, (0, 1)})
    grid = paint(grid, shift(digit, (9 + offset, 2)))
  return grid
 
0.11296296296296297, 11.938439, def hfcbgafegaibeddaiicehidbgejeabhc(I):
  v = first(first(I)) if I else 0
  O = canvas(0, (14, 9))
  if v == 0:
    O = paint(O, recolor(2, shift(asobject(((2,2,2),(2,0,2),(0,2,0))), (9,2))))
    O = paint(O, recolor(8, shift(asobject(((8,8),(8,8))), (11,3))))
  elif v == 8:
    O = paint(O, recolor(2, shift(asobject(((2,2,2),(2,0,0))), (3,3))))
    O = paint(O, recolor(8, shift(asobject(((8,8),(8,8))), (5,4))))
  else:
    O = paint(O, recolor(8, shift(asobject(((8,8),(8,8))), (2,3))))
    O = paint(O, recolor(2, shift(asobject(((2,2,2),(2,0,0))), (5,2))))
  return O
 
0.14718614718614717, 12.0032215, def efjbdcfecafieejfiaaedefbdbideejc(I):
  v = mostcommon(I)
  O = canvas(0,  (14, 9) if v == 0 else (10, 10))
  if v == 0:
    two = asobject(((2,2,2),(2,0,2),(0,2,0)))
    eight = asobject(((8,8),(8,8)))
    O = paint(O, recolor(2, shift(two, (9,2))))
    O = paint(O, recolor(8, shift(eight, (11,3))))
  elif v == 8:
    two = asobject(((2,2,2),(2,0,0)))
    eight = asobject(((8,8),(8,8)))
    O = paint(O, recolor(2, shift(two, (3,3))))
    O = paint(O, recolor(8, shift(eight, (5,4))))
  else:
    eight = asobject(((8,8),(8,8)))
    two = asobject(((2,2,2),(2,0,0)))
    O = paint(O, recolor(8, shift(eight, (2,3))))
    O = paint(O, recolor(2, shift(two, (5,2))))
  return O
 
0.12534391534391534, 8.614532, def jhfebdaheebiechbbfhjbeifgiecghga(I):
  v = first(first(I)) if I else 0
  size_dict = {0: (14, 9), 8: (10, 10), 2: (10, 10)}
  O = canvas(0, size_dict[v])
  two_shape = ((2,2,2),(2,0,2),(0,2,0)) if v == 0 else ((2,2,2),(2,0,0))
  eight_shape = ((8,8),(8,8))
  two = asobject(two_shape)
  eight = asobject(eight_shape)
  if v == 0:
    O = paint(O, recolor(2, shift(two, (9,2))))
    O = paint(O, recolor(8, shift(eight, (11,3))))
  elif v == 8:
    O = paint(O, recolor(2, shift(two, (3,3))))
    O = paint(O, recolor(8, shift(eight, (5,4))))
  else:
    O = paint(O, recolor(8, shift(eight, (2,3))))
    O = paint(O, recolor(2, shift(two, (5,2))))
  return O
 
0.10714285714285714, 22.83287, def ecegbcdaagcdefadibgagfbcgbbbbfbc(I):
  v = int(I[0][0])
  O = canvas(0, (14, 10))
  if v == 0:
    O = paint(O, recolor(2, combine(product({8, 10}, {3, 5}), product({9}, {3, 4, 5}))))
    O = paint(O, recolor(8, shift(product(interval(0, 2, 1), interval(0, 2, 1)), (10, 3))))
  else:
    size_factor = v // 2 + 1
    u_shape = combine(product({0, 2 * size_factor}, interval(0, 2 * size_factor + 1, 1)), product({size_factor}, interval(0, 2 * size_factor + 1, 1)))
    square = product(interval(0, size_factor * 2 - 1, 1), interval(0, size_factor * 2 - 1, 1))
    O = paint(O, recolor(2, shift(u_shape, (8 - v, 1 + v))))
    O = paint(O, recolor(8, shift(square, (10 - 2 * v, 3 + 2 * v))))
  return O
 
0.10238095238095239, 17.6852, def bfdfcahfcdbiecbbjjfeahbdiaaeahhf(I):
  v = int(I[0][0])
  O = canvas(0, (14, 10))
  if v == 0:
    O = paint(O, recolor(2, {(i, 1) for i in range(8, 11)}))
    O = paint(O, recolor(2, {(9, j) for j in range(1, 3)}))
    O = paint(O, recolor(8, {(i, j) for i in range(10, 12) for j in range(3, 5)}))
  elif v == 8:
    O = paint(O, recolor(2, {(i, 8) for i in range(1, 4)}))
    O = paint(O, recolor(2, {(1, j) for j in range(7, 9)}))
    O = paint(O, recolor(8, {(i, j) for i in range(3, 5) for j in range(6, 8)}))
  else:
    O = paint(O, recolor(2, {(i, 4) for i in range(3, 6)}))
    O = paint(O, recolor(2, {(1, j) for j in range(4, 6)}))
    O = paint(O, recolor(8, {(i, j) for i in range(1, 3) for j in range(4, 6)}))
  return O
 
0.10476190476190476, 14.733721, def igedcfffaebfedefidbaajaebcfbaegj(I):
  v = index(I, ORIGIN)
  grid = canvas(ZERO, (14, 10))
  two_pattern = {(8, 1), (8, 2), (8, 3), (9, 0), (9, 2), (10, 1)}
  eight_pattern = {(10, 4), (11, 4), (10, 5), (11, 5)}
  if v == 0:
    grid = paint(grid, recolor(TWO, two_pattern))
    grid = paint(grid, recolor(EIGHT, eight_pattern))
  elif v == 8:
    grid = paint(grid, recolor(TWO, hmirror(two_pattern)))
    grid = paint(grid, recolor(EIGHT, hmirror(eight_pattern)))
  else:
    grid = paint(grid, recolor(TWO, vmirror(two_pattern)))
    grid = paint(grid, recolor(EIGHT, vmirror(eight_pattern)))
  return grid
 
0.14047619047619048, 19.943243, def agegbfjebacdefbfacggcdefececbgbe(I):
  v = index(I, ORIGIN)
  grid = canvas(ZERO, (14, 10))
  base_two = {(0, 1), (0, 2), (0, 3), (1, 0), (1, 2), (2, 1)}
  base_eight = {(2, 4), (3, 4), (2, 5), (3, 5)}
  transform = {0: identity, 8: hmirror, 1: vmirror}[v]
  grid = paint(grid, recolor(TWO, transform(base_two)))
  grid = paint(grid, recolor(EIGHT, transform(base_eight)))
  return grid
 
0.13095238095238096, 17.546673, def icgeffegigfceccbbdeahdjbahcaadbg(I):
  v = index(I, ORIGIN)
  grid = canvas(ZERO, (14, 10))
  two_obj = asobject( ((0,2,2,0), (2,0,2,0), (0,2,0,0)) )
  eight_obj = asobject( ((0,8,8,0), (0,8,8,0)) )
  transform = {0: identity, 8: hmirror, 1: vmirror}[v]
  grid = paint(grid, shift(recolor(TWO, transform(toindices(two_obj))), (8,0)))
  grid = paint(grid, shift(recolor(EIGHT, transform(toindices(eight_obj))), (10,3)))
  return grid
 
0.1119047619047619, 14.007924, def ieiafgiacagaeabfibffbfadefhfjaaa(I):
  v = index(I, ORIGIN)
  grid = canvas(ZERO, (14, 10))
  two_coords = [(1,0), (1,1), (1,2), (0,0), (0,2), (-1,1)]
  eight_coords = [(0,0), (1,0), (0,1), (1,1)]
  transform = {0: lambda x: x, 8: lambda x: (-x[0],x[1]), 1: lambda x: (x[0],-x[1])}[v]
  transformed_two = [transform(coord) for coord in two_coords]
  transformed_eight = [transform(coord) for coord in eight_coords]
  for i, j in transformed_two:
    grid = fill(grid, TWO, {(i+9, j+1)})
  for i, j in transformed_eight:
    grid = fill(grid, EIGHT, {(i+10, j+4)})
  return grid 
 
0.10952380952380952, 14.591166, def hccdaecfdfibedccbhcdfiagbdefdhjf(I):
  v = index(I, ORIGIN)
  c = canvas(ZERO, (14, 10))
  if v == 0:
    c = fill(c, TWO, {(8, 1), (8, 2), (8, 3), (9, 0), (9, 2), (10, 1)})
    c = fill(c, EIGHT, {(10, 4), (11, 4), (10, 5), (11, 5)})
  elif v == 8:
    c = fill(c, TWO, {(8, 8), (8, 7), (8, 6), (9, 9), (9, 7), (10, 8)})
    c = fill(c, EIGHT, {(10, 5), (11, 5), (10, 6), (11, 6)})
  else:
    c = fill(c, TWO, {(3, 1), (3, 2), (3, 3), (4, 0), (4, 2), (5, 1)})
    c = fill(c, EIGHT, {(3, 4), (4, 4), (3, 5), (4, 5)})
  return c
 
0.10004329004329005, 52.337425, def jhgbhebcaadcebfbaijddbeccdbecbfe(I):
  v = mostcommon(I)
  O = canvas(0, (14, 9) if v == 0 else (10, 10))
  objs = objects(I, T, F, T)
  if v == 0:
    O = paint(O, recolor(2, shift(asobject(((2,2,2),(2,0,2),(0,2,0))), (9, 2))))
    O = paint(O, recolor(8, shift(asobject(((8,8),(8,8))), (11, 3))))
  elif v == 8:
    O = paint(O, recolor(2, shift(asobject(((2,2,2),(2,0,0))), (3, 3))))
    O = paint(O, recolor(8, shift(asobject(((8,8),(8,8))), (5, 4))))
  elif v == 2:
    O = paint(O, recolor(8, shift(asobject(((8,8),(8,8))), (2, 3))))
    O = paint(O, recolor(2, shift(asobject(((2,2,2),(2,0,0))), (5, 2))))
  return O
 
0.11666666666666665, 19.823378, def ihbegbdfhdhieedcbhicgfbeaiadgdhc(I):
  v = int(I[0][0])
  O = canvas(0, (14, 10)) 
  u_size = (3 + v, 3 + v)  
  square_size = (2 + v, 2 + v)
  u_offset = (9 - v, 1 + v)  
  square_offset = (10 - 2 * v, 3 + 2 * v)
  u_shape = combine(
      product(interval(0, u_size[0], 1), {0, u_size[1] - 1}),  
      product({0, u_size[0] - 1}, interval(1, u_size[1] - 1, 1)) 
  )
  square = product(interval(0, square_size[0], 1), interval(0, square_size[1], 1))
  O = paint(O, recolor(2, shift(u_shape, u_offset)))  
  O = paint(O, recolor(8, shift(square, square_offset)))  
  return O
 
0.12142857142857143, 18.472216, def giafifdfgaafedchiebdfdbcijfiibeg(I):
  v = int(I[0][0])
  O = canvas(0, (14, 10))
  u_shape = frozenset(
      (2, (i + 9 - v, j + 1 + v))
      for i in range(3 + v) 
      for j in range(3 + v) 
      if i == 0 or i == 2 + v - 1 or j == 0 or j == 2 + v - 1
  ) 
  square = frozenset(
      (8, (i + 10 - 2 * v, j + 3 + 2 * v)) 
      for i in range(2 + v) 
      for j in range(2 + v) 
  )
  return paint(paint(O, u_shape), square) 
 
0.1119047619047619, 19.32222, def eeecdfgcjcfgefcejcdhacddeifjccic(I):
  v = int(I[0][0])
  O = canvas(0, (14, 10))
  L_shape = frozenset({(2, (0, 0)), (2, (1, 0)), (2, (2, 0)), (2, (2, 1))})
  square_shape = frozenset({(8, (0, 0)), (8, (0, 1)), (8, (1, 0)), (8, (1, 1))})
  if v == 0:
    O = paint(O, shift(L_shape, (8, 1)))
    O = paint(O, shift(square_shape, (10, 3)))
  elif v == 8:
    O = paint(O, shift(hmirror(L_shape), (1, 8)))
    O = paint(O, shift(square_shape, (1, 6)))
  else:
    O = paint(O, shift(rot90(L_shape), (3, 4)))
    O = paint(O, shift(square_shape, (1, 4)))
  return O
 
0.1119047619047619, 19.930689, def ibccjfcjgeieedafidiafiahebdegice(I):
  v = int(I[0][0])
  O = canvas(0, (14, 10))
  base_shape = frozenset({(2, (0, 0)), (2, (1, 0)), (2, (2, 0)), (2, (2, 1)), (8, (3, 2)), (8, (3, 3)), (8, (4, 2)), (8, (4, 3))})
  if v == 0:
    O = paint(O, shift(base_shape, (8, 1)))
  elif v == 8:
    O = paint(O, shift(hmirror(base_shape), (1, 6)))
  else:
    O = paint(O, shift(rot90(base_shape), (1, 2)))
  return O
 
