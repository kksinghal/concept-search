26.0, 44.21805, def baaeebddddhbeieebeajgdfdbhfdeiff(I):
    # Identify colors
    color_a = leastcolor(I) 
    color_b = mostcolor(I)
    
    # Find objects of color B 
    objects_b = objects(I, True, False, False)
    objects_b = colorfilter(objects_b, color_b)

    # Create a mask for the outbox of objects B
    mask = canvas(0, shape(I))
    for obj in objects_b:
        mask = fill(mask, 1, outbox(toindices(obj)))

    # Find positions of color A in the input grid
    indices_a = ofcolor(I, color_a)

    # Iterate through potential positions in the mask 
    # and fill with color A if a match is found within a certain radius
    O = canvas(color_b, shape(I))
    for i in range(len(I)):
        for j in range(len(I[0])):
            if mask[i][j] == 1:
                for di in range(-1, 2):
                    for dj in range(-1, 2):
                        if (i + di, j + dj) in indices_a:
                            O = fill(O, color_a, {(i, j)})
    return O
 
31.333333333333332, 31.656925, def cbidgbdbhcaheefaiddegabchebcddaa(I):
    # Identify colors
    color_a = leastcolor(I) 
    color_b = mostcolor(I)
    
    # Find objects of color A and B
    objects_a = objects(I, True, False, False)
    objects_a = colorfilter(objects_a, color_a)
    indices_b = ofcolor(I, color_b)
    
    # Move each object of color A towards the closest non-color B cell
    moved_objects = []
    for obj_a in objects_a:
        closest_distance = 1000 
        closest_position = (0, 0)
        for i in range(len(I)):
            for j in range(len(I[0])):
                if (i, j) not in indices_b:
                    dist = manhattan(toindices(obj_a), frozenset({(i, j)}))
                    if dist < closest_distance:
                        closest_distance = dist
                        closest_position = (i, j)
        moved_objects.append(shift(obj_a, subtract(closest_position, centerofmass(obj_a))))
    
    # Paint the moved objects onto a blank canvas
    O = canvas(color_b, shape(I))
    for obj in moved_objects:
        O = paint(O, obj)
    return O
 
31.333333333333332, 32.324642, def edijeeehjbfbehaabicgagfiabfgbaaa(I):
    # Identify colors
    color_a = leastcolor(I) 
    color_b = mostcolor(I)
    
    # Find objects of color B
    objects_b = objects(I, True, False, False)
    objects_b = colorfilter(objects_b, color_b)

    # Create a distance map from objects B
    distance_map = canvas(100, shape(I))  # Initialize with a large distance
    for obj in objects_b:
        for i in range(len(I)):
            for j in range(len(I[0])):
                dist = manhattan(toindices(obj), {(i, j)})
                distance_map = fill(distance_map, dist, {(i, j)})

    # Place objects of color A at positions with distance 1 from objects B
    O = canvas(color_b, shape(I))
    for i in range(len(I)):
        for j in range(len(I[0])):
            if distance_map[i][j] == 1 and I[i][j] == color_a:
                O = fill(O, color_a, {(i, j)})
    return O
 
11.333333333333334, 9.414028, def cibcccicdfciececbaahabfcigfdidej(I):
  twos = first(colorfilter(objects(I, F, F, T), 2))
  fives = first(colorfilter(objects(I, F, F, T), 5))
  center_twos = center(twos)
  shift_vector = gravitate(fives, twos)
  return paint(cover(I, fives), shift(fives, add(center_twos, shift_vector)))
 
14.0, 9.750488, def ceabdaaceegeeabcahajdfagadaaidfc(I):
    obj2 = first(colorfilter(objects(I,F,F,T),2))
    obj5 = first(colorfilter(objects(I,F,F,T),5))
    pos = position(obj5, obj2)
    shift_v = (1,-1) if pos==(0,-1) else (1,1) if pos==(0,1) else (-1,1)
    new_obj5 = shift(obj5, multiply(shift_v,shape(obj5)))
    return paint(cover(I, obj5), new_obj5) 
 
13.666666666666666, 8.253792, def cdabeccbadecebhdbbadbagdabfdcbhe(I):
    obj2 = first(colorfilter(objects(I, F, F, T), 2))
    obj5 = first(colorfilter(objects(I, F, F, T), 5))
    h2, w2 = shape(obj2)
    h5, w5 = shape(obj5)
    c2 = center(obj2)
    new_obj5 = shift(obj5, ((h2 - h5) // 2 + c2[0] - uppermost(obj5), 
                             (w2 + 1 + c2[1] - leftmost(obj5))))
    return paint(cover(I, obj5), new_obj5)
 
13.0, 9.153981, def behcaedbjfgeeefgbcffdabeifgcahaf(I):
  two_obj = first(colorfilter(objects(I, F, F, T), 2))
  five_obj = first(colorfilter(objects(I, F, F, T), 5))
  target_pos = add(center(two_obj), (height(two_obj) // 2 + 1, 0))
  offset = subtract(target_pos, ulcorner(five_obj))
  return paint(cover(I, five_obj), shift(five_obj, offset))
 
12.666666666666666, 8.8877125, def cfecjefhficheabjaedbcbaejfbhddfd(I):
  twos = first(colorfilter(objects(I, F, F, T), 2))
  fives = first(colorfilter(objects(I, F, F, T), 5))
  h_offset = height(twos) - height(fives) 
  return paint(
      cover(I, fives), 
      shift(fives, (h_offset + lowermost(twos) + 1 - uppermost(fives), rightmost(twos) + 1 - leftmost(fives))))
 
14.0, 9.823471, def ddjicachicebeddfbechaadjhdcdgehb(I):
  twos = ofcolor(I, TWO)
  fives = ofcolor(I, FIVE)
  target_j = rightmost(twos)
  _, source_j = center(fives)
  offset = (0, target_j - source_j)
  O = move(I, toobject(fives, I), offset)
  return O
 
13.333333333333334, 8.6465, def ddcjfahfddgceaajjbchfhaddhbjacff(I):
  fives = colorfilter(objects(I, True, False, False), FIVE)
  twos = colorfilter(objects(I, True, False, False), TWO)
  target_box = box(merge(twos))
  target_right = tojvec(rightmost(target_box))
  O = paint(cover(I, first(fives)), shift(first(fives), subtract(target_right, centerofmass(first(fives)))))
  return O
 
9.333333333333334, 8.134513, def cgdbcacdfbbbeihabcacedaicaagecbf(I):
  five = toobject(ofcolor(I, FIVE), I)
  two_indices = ofcolor(I, TWO)
  right_edge = rightmost(two_indices)
  five_center = centerofmass(five)
  shift_amount = (0, right_edge - five_center[1])
  O = move(I, five, shift_amount)
  return O
 
14.0, 9.430497, def dbcaeffdccececeejbgfjaccebaaibfd(I):
  five_obj = first(colorfilter(objects(I, T, F, F), FIVE))
  two_locs = ofcolor(I, TWO)
  target_col = rightmost(two_locs)
  shift_amount = (ZERO, target_col - centerofmass(five_obj)[ONE])
  O = paint(cover(I, five_obj), shift(five_obj, shift_amount))
  return O
 
14.0, 10.25919, def dffegbbdhebaefdajcadeehcebfgifdb(I):
  obj = first(colorfilter(objects(I, T, T, T), FIVE))
  O = move(I, obj, (TWO, ZERO)) if portrait(obj) else move(I, obj, (ZERO, TWO))
  return O
 
16.333333333333332, 12.03956, def adjefcgdbagbebedbihfhbdiagbigbdg(I):
  five_indices = toindices(first(colorfilter(objects(I, T, T, T), FIVE)))
  new_five_indices = shift(five_indices, (TWO, ZERO)) if portrait(five_indices) else shift(five_indices, (ZERO, TWO))
  O = fill(I, FIVE, new_five_indices)
  return O 
 
14.0, 9.764127, def cgfbbjbegdhaefaajhfcbdbbaffcaiad(I):
  fives = first(colorfilter(partition(I), FIVE))
  moved_fives = shift(fives, (TWO, ZERO)) if portrait(fives) else shift(fives, (ZERO, TWO))
  O = paint(cover(I, fives), moved_fives)
  return O
 
20.666666666666668, 12.134742, def ajaaabfcaibieacjjhcfjedeedeaabcc(I):
  objs = objects(I, T, F, T)
  moved_objs = set()
  for obj in objs:
    if color(obj) == 5:
      offset = (-4, -3) if leftmost(obj) < 7 else (-4, 3)
      moved_objs.add(shift(obj, offset))
    else:
      moved_objs.add(obj)
  O = paint(I, merge(moved_objs))
  return O
 
14.0, 9.959996, def biffgahgdadheafajjcbhbiafdaabiaj(I):
  color_a = leastcolor(I)
  color_b = mostcolor(I)
  objects_a = colorfilter(objects(I, True, False, False), color_a)
  objects_b = colorfilter(objects(I, True, False, False), color_b)
  shifted_objects_a = []
  for obj_a in objects_a:
    closest_obj_b = argmin(objects_b, lambda obj_b: manhattan(toindices(obj_a), toindices(obj_b)))
    direction = gravitate(toindices(obj_a), toindices(closest_obj_b))
    shifted_objects_a.append(shift(obj_a, direction))
  O = replace(I, color_a, color_b)
  for obj in shifted_objects_a:
    O = paint(O, obj)
  return O
 
12.333333333333334, 7.3177176, def baccgfabdbfbeeiibfeabhciibaiffif(I):
  color_a = leastcolor(I)
  color_b = mostcolor(I)
  objects_a = colorfilter(objects(I, True, False, False), color_a)
  objects_b = colorfilter(objects(I, True, False, False), color_b)
  O = replace(I, color_a, color_b)
  for obj_a in objects_a:
    closest_obj_b = argmin(objects_b, lambda obj_b: manhattan(toindices(obj_a), toindices(obj_b)))
    border = box(toindices(closest_obj_b))
    closest_pos = argmin(border, lambda pos: manhattan(toindices(obj_a), frozenset({pos})))
    moved_obj = shift(obj_a, subtract(closest_pos, centerofmass(obj_a)))
    O = paint(O, moved_obj)
  return O
 
25.333333333333332, 49.348526, def icgbcicdddbgeadbbeeeehaiaecdfjaf(I):
  color_a = leastcolor(I)
  color_b = mostcolor(I)
  objects_a = colorfilter(objects(I, True, False, False), color_a)
  objects_b = colorfilter(objects(I, True, False, False), color_b)
  O = canvas(color_b, shape(I))
  for obj_b in objects_b:
    surrounding = outbox(toindices(obj_b))
    for obj_a in objects_a:
      if any(pos in surrounding for pos in toindices(obj_a)):
        closest_pos = argmin(surrounding, lambda pos: manhattan(toindices(obj_a), frozenset({pos})))
        moved_obj = shift(obj_a, subtract(closest_pos, centerofmass(obj_a)))
        O = paint(O, moved_obj)
  return O
 
14.0, 10.653273, def febegjafeehceedeieehdcbbbefefieb(I):
    obj2 = first(colorfilter(objects(I, False, False, True), 2))
    obj5 = first(colorfilter(objects(I, False, False, True), 5))
    target = ulcorner(obj2)
    return paint(cover(I, obj5), shift(obj5, subtract(target, ulcorner(obj5))))
 
14.0, 9.272278, def cfcehdgfeideefacadhaghbffhgbfgjj(I):
    objs = objects(I, F, F, T)
    obj2 = extract(objs, lambda obj: color(obj) == 2)
    obj5 = extract(objs, lambda obj: color(obj) == 5)
    return paint(cover(I, obj5), shift(obj5, subtract(ulcorner(obj2), ulcorner(obj5))))
 
11.666666666666666, 9.074545, def adfcbbjihaafedjdbfaichdaggbaccfd(I):
  objs = objects(I, False, False, True)
  obj2 = argmax(objs, lambda o: colorcount(o, 2))
  obj5 = argmax(objs, lambda o: colorcount(o, 5))
  return underpaint(cover(I, obj5), shift(obj5, subtract(ulcorner(obj2), ulcorner(obj5))))
 
13.333333333333334, 6.188189, def jccabddddjeceefciiegabdaccdhagfb(I):
  # Identify the '2' and '5' objects
  two_obj = toobject(ofcolor(I, TWO), I)
  five_obj = toobject(ofcolor(I, FIVE), I)

  # Determine the target location for the '5' object
  target_i = uppermost(two_obj) - 1 if uppermost(five_obj) > uppermost(two_obj) else lowermost(two_obj) + 1
  target_j = rightmost(two_obj) + 1

  # Calculate the offset to move the '5' object
  offset = subtract((target_i, target_j), ulcorner(five_obj))

  # Move the '5' object to the target location
  O = move(I, five_obj, offset)
  return O
 
14.0, 10.176031, def daffdcbeddbaebgebjgacbgicbbgejda(I):
  obj5 = first(colorfilter(objects(I, T, T, T), FIVE))
  O = move(I, obj5, (-2, 0)) if portrait(obj5) else move(I, obj5, (0, 2))
  return O
 
14.0, 10.340825, def dafdcebjbedfehfabecadgbjgiihaddd(I):
  five_obj = extract(objects(I, T, T, T), lambda obj: color(obj) == FIVE)
  offset = (-2, 0) if height(five_obj) > width(five_obj) else (0, 2)
  return move(I, five_obj, offset)
 
14.0, 7.224375, def cajgcedhadieebcbjbgbajcffbeiechd(I):
  fives = colorfilter(objects(I, T, F, T), 5)  # Extract '5' objects
  moved_fives = mapply(lambda obj: shift(obj, (-4, -3 if leftmost(obj) < len(I[0]) // 2 else 3)), fives)  # Move objects
  O = paint(cover(I, ofcolor(I, 5)), moved_fives)  # Paint moved objects on a cleared grid
  return O
 
11.333333333333334, 8.626437, def ciecfcbbfbdiefgdigeafdcgaaaheagd(I):
  left_fives = colorfilter(objects(lefthalf(I), T, F, T), 5) # Extract left '5' objects
  right_fives = colorfilter(objects(righthalf(I), T, F, T), 5) # Extract right '5' objects
  moved_left = mapply(lambda obj: shift(obj, (-4, -3)), left_fives) # Move left objects
  moved_right = mapply(lambda obj: shift(obj, (-4, 3)), right_fives) # Move right objects
  O = paint(paint(cover(I, ofcolor(I, 5)), moved_left), moved_right) # Paint on cleared grid
  return O
 
24.666666666666668, 49.42231, def fefchecccebeehgaifhfacifebfeeicg(I):
  min_col = leastcolor(I)
  max_col = mostcolor(I)
  min_objs = colorfilter(objects(I, True, False, False), min_col)
  max_objs = colorfilter(objects(I, True, False, False), max_col)
  def move_obj(obj):
    obj_indices = toindices(obj)
    closest_pos = min(merge(apply(outbox, apply(toindices, max_objs))), key=lambda pos: manhattan(obj_indices, frozenset({pos})))
    return toobject(shift(obj_indices, subtract(closest_pos, centerofmass(obj_indices))), I)
  moved_objs = apply(move_obj, min_objs)
  O = canvas(max_col, shape(I))
  for obj in moved_objs:
    O = paint(O, obj)
  return O
 
25.0, 46.108875, def efeehfdbggacejfbbdcfaddffcfibeah(I):
  least_col = leastcolor(I)
  most_col = mostcolor(I)
  small_objs = colorfilter(objects(I, True, False, False), least_col)
  large_objs_indices = mapply(toindices, colorfilter(objects(I, True, False, False), most_col))
  def find_closest(obj_idx):
    return min(large_objs_indices, key=lambda pos: manhattan(obj_idx, frozenset({pos})))
  O = canvas(most_col, shape(I))
  for obj in small_objs:
    O = paint(O, toobject(shift(toindices(obj), subtract(find_closest(toindices(obj)), centerofmass(toindices(obj)))), I))
  return O
 
14.0, 10.572852, def aagfbhecggafejaajcbjcajjhffeebgh(I):
    twos = first(colorfilter(objects(I, F, F, T), 2))
    fives = first(colorfilter(objects(I, F, F, T), 5))
    return paint(cover(I, fives), shift(fives, subtract(llcorner(twos),lrcorner(fives)))) 
 
14.0, 10.435833, def ejjaddhahdhfehgebcdcdhegeabbhfjb(I):
    twos = first(colorfilter(objects(I, F, F, T), 2))
    fives = first(colorfilter(objects(I, F, F, T), 5))
    target_pos = ulcorner(shift(twos, (height(fives), 0))) 
    return paint(cover(I, fives), shift(fives, subtract(target_pos, ulcorner(fives))))
 
14.0, 9.346956, def bgbjihjcaeacedcdaibbjjdecabifebh(I):
  twos = first(colorfilter(objects(I, F, F, T), 2))
  fives = first(colorfilter(objects(I, F, F, T), 5))
  return paint(cover(I, fives), shift(fives, subtract(center(twos), center(fives))))
 
13.0, 9.660061, def gifdebjdcahdejbajgbebhcbgbdcfeae(I):
  twos = first(colorfilter(objects(I, F, F, T), 2))
  fives = first(colorfilter(objects(I, F, F, T), 5))
  shift_amount =  (height(twos) // 2 - height(fives) // 2, -width(fives) - 1)
  return paint(cover(I, fives), shift(fives, shift_amount))
 
14.0, 9.959996, def gbefaeiabacbefadbdciaegacaiecifc(I):
  two_obj = toobject(ofcolor(I, TWO), I)
  five_obj = toobject(ofcolor(I, FIVE), I)
  target_center = center(two_obj)
  current_center = center(five_obj)
  shift_amount = subtract(target_center, current_center)
  O = move(I, five_obj, shift_amount)
  return O
 
14.0, 9.874796, def edbdfabfjgffefbhagfdfcdeabaadhcd(I):
  two_indices = ofcolor(I, TWO)
  five_obj = toobject(ofcolor(I, FIVE), I)
  top_edge = uppermost(two_indices) - height(five_obj)
  left_edge = leftmost(two_indices)
  shift_amount = (top_edge, left_edge)
  O = move(I, five_obj, shift_amount)
  return O
 
14.0, 10.29388, def hgabgchcaeccebbabddbceedfdhiaeib(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  O = paint(cover(I, five_obj), shift(five_obj, gravitate(five_obj, two_obj)))
  return O
 
12.666666666666666, 6.639075, def jfedgicfahbfedddadhiccdjagcjbhge(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  v_diff = subtract(ulcorner(two_obj), (ulcorner(five_obj)[0]+height(five_obj), ulcorner(five_obj)[1]))
  shifted_five = shift(five_obj, v_diff)
  O = paint(cover(I, five_obj), shifted_five)
  return O
 
14.0, 9.19684, def caifbacjcbcaebfdjacebjcebcfdhhbi(I):
  return branch(
      any(color(obj) == FIVE and height(obj) >= width(obj) for obj in objects(I, T, T, T)),
      move(I, extract(objects(I, T, T, T), lambda obj: color(obj) == FIVE), (-TWO, ZERO)),
      move(I, extract(objects(I, T, T, T), lambda obj: color(obj) == FIVE), (ZERO, TWO))
  )
 
25.333333333333332, 48.94498, def bffeceiacibaedcjbfcebigeechadfhi(I):
  min_color = leastcolor(I)
  max_color = mostcolor(I)
  min_obj = first(colorfilter(objects(I, True, False, False), min_color))
  max_obj = first(colorfilter(objects(I, True, False, False), max_color))
  O = fill(canvas(max_color, shape(I)), min_color, shift(toindices(min_obj), gravitate(toindices(min_obj), toindices(outbox(max_obj)))))
  O = paint(O, max_obj)
  return O
 
14.0, 9.49129, def ffdieacajdbdefgdbieajjiadahaaaac(I):
    two_obj = first(colorfilter(objects(I, False, False, True), 2))
    five_obj = first(colorfilter(objects(I, False, False, True), 5))
    two_center = center(two_obj)
    five_center = center(five_obj)
    rel_pos = subtract(five_center, two_center)
    target_pos = add(two_center, branch(
        both(positive(rel_pos[0]), positive(rel_pos[1])), (1, 1),
        branch(
            both(positive(rel_pos[0]), equality(rel_pos[1], 0)), (0, 1),
            branch(
                both(positive(rel_pos[0]), positive(invert(rel_pos[1]))), (1, -1),
                branch(
                    both(equality(rel_pos[0], 0), positive(rel_pos[1])), (1, 0),
                    branch(
                        both(equality(rel_pos[0], 0), positive(invert(rel_pos[1]))), (-1, 0),
                        (0, 0) # default case (objects overlap)
                    )
                )
            )
        )
    ))
    return paint(cover(I, five_obj), shift(five_obj, subtract(target_pos, five_center)))
 
14.0, 11.884348, def bbjbbcfbeefbeaefieecibfcbjadacaf(I):
    two_obj = first(colorfilter(objects(I, F, F, T), 2))
    five_obj = first(colorfilter(objects(I, F, F, T), 5))
    return move(cover(I, five_obj), five_obj, gravitate(five_obj, two_obj))
 
14.0, 9.813147, def idededffaccgeefdabdfebhcifjhfaeb(I):
    two_obj = first(colorfilter(objects(I, F, F, T), 2))
    five_obj = first(colorfilter(objects(I, F, F, T), 5))
    v_offset = branch(vmatching(two_obj, five_obj), 0, 1 if uppermost(five_obj) < uppermost(two_obj) else -1)
    h_offset = branch(hmatching(two_obj, five_obj), 0, 1 if leftmost(five_obj) < leftmost(two_obj) else -1)
    return paint(cover(I, five_obj), shift(five_obj, (v_offset, h_offset)))
 
14.0, 11.566013, def fechcjffebaceaabaiaffdiiggahdagi(I):
    two_obj = first(colorfilter(objects(I, F, F, T), 2))
    five_obj = first(colorfilter(objects(I, F, F, T), 5))
    five_corner = branch(vmatching(two_obj, five_obj), ulcorner(five_obj), (uppermost(five_obj), 0))
    target_pos = add(five_corner, (1, 1))
    return paint(cover(I, five_obj), shift(five_obj, subtract(target_pos, five_corner)))
 
14.0, 9.835933, def ecjfdbfajfbbebbebjebdfaccbafeahf(I):
  """
  Moves object 5 to align its top edge 
  with either the top or bottom edge of object 2.
  """
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  
  five_center = centerofmass(five_obj)
  two_upper = uppermost(two_obj)
  two_lower = lowermost(two_obj)

  # Determine if five_obj is closer to the top or bottom of two_obj
  if abs(five_center[0] - two_upper) <= abs(five_center[0] - two_lower):
    shift_amount = (two_upper - uppermost(five_obj), 0)
  else:
    shift_amount = (two_lower - lowermost(five_obj), 0)

  O = move(I, five_obj, shift_amount)
  return O
 
14.0, 10.279154, def dhdcbjggjgbeebfhbfiefhbaajgjbfcb(I):
  """
  Uses a conditional shift to move object 5 based on 
  its relative vertical position to object 2.
  """
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)

  five_upper = uppermost(five_obj)
  two_upper = uppermost(two_obj)
  two_lower = lowermost(two_obj)

  shift_amount = branch(
      five_upper < two_upper,  # Condition
      (two_upper - five_upper, 0),  # True branch: Align to top
      (two_lower - lowermost(five_obj), 0)  # False branch: Align to bottom
  )

  O = move(I, five_obj, shift_amount)
  return O
 
14.0, 10.007769, def jbaehddhecdcecjcabahbedcijcffcbc(I):
  """
  Leverages the `gravitate` function to move object 5 
  towards object 2 and stop when adjacent.
  """
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)

  # Calculate the direction and magnitude to "gravitate"
  di, dj = gravitate(five_obj, two_obj) 

  # Since we only want vertical movement, set dj to 0
  shift_amount = (di, 0) 

  O = move(I, five_obj, shift_amount)
  return O
 
14.0, 10.29517, def bejgadecdecbeiahbbffeccgfdfhgibf(I):
  """
  Calculates the vertical offset between object 5's center 
  and object 2's center and applies it as a shift. 
  """
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)

  five_center = centerofmass(five_obj)
  two_center = centerofmass(two_obj)

  # Calculate vertical offset 
  vertical_offset = two_center[0] - five_center[0]  

  O = move(I, five_obj, (vertical_offset, 0))
  return O
 
14.0, 10.301756, def bdafafghcajieibbifafccgdaeafechf(I):
  O = I 
  for obj in colorfilter(objects(I, T, T, T), FIVE):
    O = move(O, obj, (-2, 0)) if portrait(obj) else move(O, obj, (0, 2))
  return O
 
19.333333333333332, 17.064014, def eabebdccejeceedcaahffedffgacbcff(I):
    def move_five(obj):
        return shift(obj, (-2, 0)) if portrait(obj) else shift(obj, (0, 2))
    return paint(I, merge(apply(move_five, colorfilter(objects(I, T, T, T), FIVE))))
 
24.333333333333332, 53.365696, def ecdagccecjjfeddeabifjjegefhaccai(I):
  min_color = leastcolor(I)
  max_color = mostcolor(I)
  min_obj = first(colorfilter(objects(I, True, False, False), min_color))
  max_objs = colorfilter(objects(I, True, False, False), max_color)
  O = paint(canvas(max_color, shape(I)), merge(max_objs))
  right_edge = max(j for i, j in toindices(merge(max_objs)))
  O = paint(O, toobject(shift(toindices(min_obj), (0, right_edge - leftmost(min_obj) + 1)), I))
  return O
 
23.333333333333332, 49.455734, def bfeeefdjebejeddcadfdcgfiiadfdbgb(I):
  min_color = leastcolor(I)
  max_color = mostcolor(I)
  min_obj = first(colorfilter(objects(I, True, False, False), min_color))
  max_obj = first(colorfilter(objects(I, True, False, False), max_color))
  O = paint(canvas(max_color, shape(I)), max_obj)
  target_pos = astuple(uppermost(max_obj), rightmost(max_obj) + 1)
  O = paint(O, toobject(shift(toindices(min_obj), subtract(target_pos, ulcorner(min_obj))), I))
  return O
 
11.333333333333334, 9.255375, def ggciijcgbchcecdficjjgfaigfiejife(I):
  objs = objects(I, False, False, True)  # Extract all objects
  obj2 = argmax(objs, lambda o: colorcount(o, 2)) # Find the object with the most '2's
  obj5 = argmax(objs, lambda o: colorcount(o, 5)) # Find the object with the most '5's

  # Calculate the offset to move '5' to the right of '2'
  offset = (0, width(obj2))

  # Move '5' to the right of '2'
  O = underpaint(cover(I, obj5), shift(obj5, offset))
  return O
 
14.0, 7.155992, def iaafhagaeebcefdajdafdabcbhffdabj(I):
  objs = objects(I, False, False, True)
  obj2 = argmax(objs, lambda o: color(o) == 2) # Find object with color 2
  obj5 = argmax(objs, lambda o: color(o) == 5) # Find object with color 5

  # Calculate target position for upper-left corner of '5' object
  target_corner = add(ulcorner(obj2), (0, width(obj2)))

  # Move '5' object
  O = underpaint(cover(I, obj5), shift(obj5, subtract(target_corner, ulcorner(obj5))))
  return O
 
11.333333333333334, 5.7250323, def giiihdcciebaeccbbaaacdcdjbfddfag(I):
  objs = partition(I)  # Partition the grid into objects
  obj2 = extract(objs, lambda o: color(o) == 2)
  obj5 = extract(objs, lambda o: color(o) == 5)
  
  # Find the rightmost column of the '2' object
  rightmost_col = rightmost(obj2)

  # Shift the '5' object to be placed after the rightmost column
  new_obj5 = shift(obj5, (0, rightmost_col - leftmost(obj5) + 1))
  return paint(cover(I, obj5), new_obj5)
 
14.0, 8.810311, def dicbgcifdceaeeecaddedidegichcfdg(I):
  obj2 = argmax(objects(I, False, False, True), lambda o: color(o) == 2)
  obj5 = argmax(objects(I, False, False, True), lambda o: color(o) == 5)
  
  # Calculate the horizontal shift needed
  hshift = rightmost(obj2) - leftmost(obj5) + 1
  
  # Create a new object by shifting each cell of obj5
  new_obj5 = frozenset((v, (i, j + hshift)) for v, (i, j) in obj5)
  return paint(cover(I, obj5), new_obj5)
 
12.0, 7.237071, def ecdbdeihffcbefdhaccejicgcedbehbb(I):
  """
  Aligns the bottom of the '5' object to the top of the '2' object
  and centers the '5' object horizontally with the '2' object.
  """
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)

  # Find the required vertical and horizontal shifts
  vertical_shift = uppermost(two_obj) - lowermost(five_obj) - 1
  horizontal_shift = centerofmass(two_obj)[1] - centerofmass(five_obj)[1]

  # Move the '5' object
  O = move(I, five_obj, (vertical_shift, horizontal_shift))
  return O 
 
13.333333333333334, 10.427214, def fieecadafdfaedjbijajjedhaifafdbg(I):
  """
  This version utilizes the relative position between objects to determine the shift.
  """
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)

  # Get the relative position
  rel_pos = position(five_obj, two_obj)

  # Define the vertical shift
  vertical_shift = uppermost(two_obj) - lowermost(five_obj) - 1

  # Determine the horizontal shift based on relative position
  if rel_pos[1] == 1:  # '5' is to the right of '2'
      horizontal_shift = leftmost(two_obj) - rightmost(five_obj) - 1
  else:  # '5' is to the left of '2'
      horizontal_shift = rightmost(two_obj) - leftmost(five_obj) + 1

  # Move the '5' object
  O = move(I, five_obj, (vertical_shift, horizontal_shift))
  return O
 
12.0, 6.9534407, def beahjafedjebeahdbadfcdffaeebfhaf(I):
  """
  This version leverages the gravitate function to determine the shift needed.
  """
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)

  # Determine the vertical shift amount
  vertical_shift = uppermost(two_obj) - lowermost(five_obj) - 1

  # Calculate the horizontal shift using gravitate
  horizontal_shift = gravitate(five_obj, two_obj)[1]

  # Move the '5' object
  O = move(I, five_obj, (vertical_shift, horizontal_shift))
  return O
 
12.333333333333334, 10.409824, def aihacgjgefjfeibeaaccccdcfdjcffaj(I):
  """
  This version uses a combination of centerofmass and conditional logic for the shift.
  """
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  
  # Define the vertical shift
  vertical_shift = uppermost(two_obj) - lowermost(five_obj) - 1
  
  # Determine the horizontal shift based on the center of mass
  if centerofmass(five_obj)[1] < centerofmass(two_obj)[1]:
    horizontal_shift = rightmost(two_obj) - leftmost(five_obj) + 1
  else:
    horizontal_shift = leftmost(two_obj) - rightmost(five_obj) - 1

  # Move the '5' object
  O = move(I, five_obj, (vertical_shift, horizontal_shift))
  return O
 
14.0, 10.07214, def jdfcgaefdefjeidbiefbfaiafaiiffad(I):
  target_color = leastcolor(I)
  target_object = first(colorfilter(objects(I, T, F, F), target_color))
  O = paint(cover(I, target_object), shift(target_object, (THREE, -ONE)))
  return O
 
20.666666666666668, 14.740443, def idceieahfgfdecbcbgaacajcaeacfgca(I):
  target_color = leastcolor(I)
  object_indices = ofcolor(I, target_color)
  shifted_indices = shift(object_indices, (THREE, -ONE))
  O = fill(I, target_color, shifted_indices)
  return O
 
7.333333333333333, 16.039783, def bjcecajhbefdeeegjdhfbcighacfabhe(I):
  t = leastcolor(I) 
  O = canvas(ZERO, shape(I))
  for i in range(len(I)):
    for j in range(len(I[0])):
      if I[i][j] == t:
        new_i, new_j = i + THREE, j - ONE
        if 0 <= new_i < len(I) and 0 <= new_j < len(I[0]):
          O = paint(O, {(I[i][j], (new_i, new_j))})
      else:
        O = paint(O, {(I[i][j], (i, j))})
  return O
 
14.0, 8.651748, def fajeafiijhfcehdhaebbjjfjbacdddfd(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  relative_pos = position(five_obj, two_obj)
  shift_amount = (0, width(two_obj) - 1) if relative_pos[1] == 1 else (0, -width(five_obj) + 1)
  O = move(I, five_obj, shift_amount)
  return O
 
14.0, 8.13531, def cceadeebbffjeejcbhbcfahhhbhddgfb(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  target_j = rightmost(two_obj) if centerofmass(five_obj)[1] > centerofmass(two_obj)[1] else leftmost(two_obj) 
  shift_amount = (0, target_j - centerofmass(five_obj)[1])
  O = move(I, five_obj, shift_amount)
  return O
 
14.0, 9.249357, def fcecajbhjbedeiadbeedecdehbibdfeh(I):
  target_color = leastcolor(I)
  obj = toobject(ofcolor(I, target_color), I)
  shifted_obj = shift(obj, (THREE, 0))
  O = paint(cover(I, obj), shifted_obj)
  return O
 
13.0, 9.15813, def chcahjceceedeafaicjdedeeggabbici(I):
  O = I
  target_color = leastcolor(I)
  for i in range(len(I)):
    for j in range(len(I[0])):
      if I[i][j] == target_color:
        ni = (i + THREE) % len(I)
        O = paint(cover(O, {(target_color, (i, j))}), {(target_color, (ni, j))})
  return O
 
14.0, 9.203993, def facfehdeacgfeadaibhjbgcfciehddef(I):
  twos = first(colorfilter(objects(I, F, F, T), 2))
  fives = first(colorfilter(objects(I, F, F, T), 5))
  corner = branch(uppermost(fives) < uppermost(twos), ulcorner(twos), llcorner(twos))
  return paint(cover(I, fives), shift(fives, subtract(corner, ulcorner(fives)))) 
 
14.0, 9.27326, def acffbddafbadeddgiacbaadfbbfhjbab(I):
  twos = first(colorfilter(objects(I, F, F, T), 2))
  fives = first(colorfilter(objects(I, F, F, T), 5))
  target_position = branch(
      leftmost(fives) < leftmost(twos), 
      branch(uppermost(fives) < uppermost(twos), ulcorner(twos), llcorner(twos)),
      branch(uppermost(fives) < uppermost(twos), urcorner(twos), lrcorner(twos))
  )
  return paint(cover(I, fives), shift(fives, subtract(target_position, ulcorner(fives)))) 
 
14.0, 10.069812, def cchbhegbcibeefadadgbaidaaiahchgc(I):
  twos = first(colorfilter(objects(I, F, F, T), 2))
  fives = first(colorfilter(objects(I, F, F, T), 5))
  alignment_offsets = ((0, 0), (width(twos) - 1, 0), (0, height(twos) - 1), (width(twos) - 1, height(twos) - 1))
  closest_offset = min(alignment_offsets, key=lambda offset: manhattan(shift(fives, offset), twos))
  return paint(cover(I, fives), shift(fives, closest_offset))
 
14.0, 8.673278, def cjffebihecgiefccafdfjehdgegbfbbb(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_box = box(ofcolor(I, TWO))
  
  # Define potential target corners
  top_right = (uppermost(two_box), rightmost(two_box))
  top_left = (uppermost(two_box), leftmost(two_box))
  
  # Determine closer corner
  dist_right = manhattan(five_obj, frozenset({top_right}))
  dist_left = manhattan(five_obj, frozenset({top_left}))
  target_corner = top_right if dist_right <= dist_left else top_left
  
  # Move '5' object to the closer corner
  O = move(I, five_obj, subtract(target_corner, ulcorner(five_obj)))
  return O
 
14.0, 9.984142, def fjjgbcaebijdecegaeejcdaaaahbefag(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)

  # Define a lambda function to calculate distance from a point to the '5' object
  distance_to_five = lambda point: manhattan(five_obj, frozenset({point}))

  # Find the closest corner of the '2' object's bounding box to the '5' object
  closest_corner = argmin(corners(two_obj), distance_to_five)

  # Move the '5' object to the closest corner
  O = move(I, five_obj, subtract(closest_corner, ulcorner(five_obj)))
  return O
 
14.0, 8.814989, def bfbagfcegbdfeihfaajihhbfbjedddfb(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)

  # Calculate relative position of '5' object to '2' object
  rel_pos = position(five_obj, two_obj)

  # Define a dictionary mapping relative positions to target corners
  corner_mapping = {
      ( 1,  1): urcorner, 
      ( 1, -1): ulcorner,
      (-1,  1): lrcorner,
      (-1, -1): llcorner
  }

  # Get the target corner function from the dictionary
  target_corner_func = corner_mapping.get(rel_pos, ulcorner)  # Default to ulcorner if no match

  # Calculate the target corner and move the '5' object
  target_corner = target_corner_func(two_obj)
  O = move(I, five_obj, subtract(target_corner, ulcorner(five_obj)))
  return O
 
16.333333333333332, 11.974715, def efjhccfiihjaeecjiiaabihaihiccfcd(I):
  return paint(
      I,
      shift(
          first(colorfilter(objects(I, T, T, T), FIVE)), 
          (-2, 0) if portrait(first(colorfilter(objects(I, T, T, T), FIVE))) else (0, 2)
      )
  )
 
17.0, 14.037805, def ggecgehejeejeaacjhdbicdeebcffebc(I):
  for obj in objects(I, T, T, T):
    if color(obj) == FIVE:
      return paint(I, shift(obj, (-2, 0) if portrait(obj) else (0, 2)))
  return I
 
14.0, 9.337898, def fcebecdcfefgeefajecdejdfbfechhcg(I):
  target_color = leastcolor(I)
  for obj in objects(I, univalued=True, diagonal=False, without_bg=True):
    if color(obj) == target_color:
      if hline(toindices(obj)):
        I = move(I, obj, (THREE, 0))
  return I
 
31.333333333333332, 33.648777, def cafafdccbicfeggaijjgigbfibefdeag(I):
  c = leastcolor(I)
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  shifted_objs = frozenset(shift(obj, (THREE, 0)) if hline(toindices(obj)) else obj 
                           for obj in colorfilter(objs, c))
  return paint(cover(I, merge(objs)), merge(shifted_objs))
 
12.0, 8.212373, def cajgdcdbejfdeahaafbgbeddhaeecbdg(I):
  twos = first(colorfilter(partition(I), TWO))
  fives = first(colorfilter(partition(I), FIVE))
  target = shift(fives, (TWO * (uppermost(twos) - uppermost(fives)), 0)) 
  O = paint(cover(I, fives), target)
  return O
 
14.0, 10.29388, def fhaegafbbaceefegaheghbbgeheedjce(I):
  twos = first(colorfilter(partition(I), TWO))
  fives = first(colorfilter(partition(I), FIVE))
  target_ulcorner = add(ulcorner(fives), gravitate(fives, twos))
  target = frozenset({(FIVE, (i + target_ulcorner[0], j + target_ulcorner[1])) for _, (i, j) in normalize(fives)})
  O = paint(cover(I, fives), target)
  return O
 
14.0, 8.592093, def gbdcjbfabgjhebbaaibahdcahdcaefba(I):
    fives = first(colorfilter(partition(I), FIVE))
    twos = first(colorfilter(partition(I), TWO))
    center_twos = centerofmass(twos)
    center_fives = centerofmass(fives)
    h_shift = branch(center_fives[1] < center_twos[1], TWO, NEG_TWO) if even(center_fives[1] - center_twos[1]) else ZERO
    v_shift = branch(center_fives[0] < center_twos[0], TWO, NEG_TWO) if even(center_fives[0] - center_twos[0]) else ZERO
    moved_fives = shift(fives, (v_shift, h_shift))
    O = paint(cover(I, fives), moved_fives)
    return O
 
14.0, 8.998391, def edajadbiagajeffjbjecafbadcfebejc(I):
  fives = first(colorfilter(partition(I), FIVE))
  twos = first(colorfilter(partition(I), TWO))
  v_shift = branch(hmatching(twos, fives), ZERO, TWO * sign(uppermost(twos) - uppermost(fives)))
  h_shift = branch(vmatching(twos, fives), ZERO, TWO * sign(leftmost(twos) - leftmost(fives)))
  target = shift(fives, (v_shift, h_shift))
  O = paint(cover(I, fives), target)
  return O
 
13.666666666666666, 7.6878076, def ghafeaadcddfeaadjeafabjaibacaadi(I):
  target_row = uppermost(ofcolor(I, 2)) - 1
  return paint(
    cover(I, recolor(0, ofcolor(I, 5))), # Clear '5' objects
    mapply(
      lambda obj: shift(
        obj, (target_row - uppermost(obj), -3 if leftmost(obj) < len(I[0]) // 2 else 3)
      ),
      colorfilter(objects(I, T, F, T), 5)
    )
  )
 
13.333333333333334, 7.1253386, def ahjgjejdfdcdeeafjehecefcehcaeigh(I):
  fives = colorfilter(objects(I, T, F, T), 5)
  return paint(
    cover(I, recolor(0, ofcolor(I, 5))), # Clear '5' objects first
    mapply(
      lambda obj: shift(obj, (uppermost(ofcolor(I, 2)) - lowermost(obj) - 1, 
                              3 if rightmost(obj) > centerofmass(ofcolor(I, 2))[1] else -3)), 
      fives
    )
  )
 
13.666666666666666, 9.068482, def fhfiifcbfcibeiecbeaddaegeffdccbe(I):
  twos = first(colorfilter(objects(I, F, F, T), 2))
  fives = first(colorfilter(objects(I, F, F, T), 5))
  target_location = branch(portrait(twos), 
                            add(ulcorner(twos), (height(twos) + 1, 0)), 
                            add(ulcorner(twos), (0, width(twos) + 1)))
  return paint(cover(I, fives), shift(fives, subtract(target_location, ulcorner(fives))))
 
11.0, 10.285222, def cjfhgehfecdeeddebfdfbebcjfbcfcef(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  five_center = centerofmass(five_obj)
  two_top = uppermost(two_obj)
  v_diff = two_top - five_center[0]
  h_diff = -width(five_obj) if five_center[1] < leftmost(two_obj) else width(two_obj)
  shifted_five = shift(five_obj, (v_diff, h_diff))
  O = paint(cover(I, five_obj), shifted_five)
  return O
 
11.0, 10.446101, def daiabdhfadibeebajdbdfeacbdcdabbd(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  five_corner = ulcorner(five_obj)
  two_corner = ulcorner(two_obj)
  v_diff = two_corner[0] - five_corner[0]
  h_diff = -width(backdrop(five_obj)) if five_corner[1] < two_corner[1] else width(backdrop(two_obj)) 
  shifted_five = shift(five_obj, (v_diff, h_diff))
  O = paint(cover(I, five_obj), shifted_five)
  return O
 
13.333333333333334, 6.556086, def fejgagejjefaeceeifbcibbggacabgad(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  five_corner = ulcorner(five_obj)
  two_corner = ulcorner(two_obj)
  v_diff = two_corner[0] - five_corner[0]
  rel_pos = position(five_obj, two_obj)
  h_diff = -width(five_obj) if rel_pos[1] < 0 else width(two_obj)
  shifted_five = shift(five_obj, (v_diff, h_diff))
  O = paint(cover(I, five_obj), shifted_five)
  return O
 
12.0, 8.871787, def egiacfidcfjeefafbcgaffjafbihbcde(I):
  obj_five = first(colorfilter(objects(I, T, T, T), FIVE))
  obj_two = first(colorfilter(objects(I, T, T, T), TWO))
  direction = (NEG_TWO, ZERO) if portrait(obj_five) else (ZERO, NEG_TWO)
  target = shift(obj_five, add(centerofmass(obj_two), direction))
  O = paint(cover(I, obj_five), target)
  return O
 
9.333333333333334, 9.949827, def dejaadhfjbdeefeejiccdbabiihbadfa(I):
  fives = first(colorfilter(partition(I), FIVE))
  twos = first(colorfilter(partition(I), TWO))
  target_corner = (uppermost(twos) - TWO, leftmost(fives)) if portrait(fives) else (uppermost(fives), leftmost(twos) - TWO)
  target = shift(normalize(fives), target_corner)
  return paint(cover(I, fives), target)
 
14.0, 9.738134, def cbachifddbgbeadbahjcebbecebaehhh(I):
  obj5 = first(colorfilter(objects(I, T, T, T), FIVE))
  obj2 = first(colorfilter(objects(I, T, T, T), TWO))
  v_dist = uppermost(obj2) - uppermost(obj5) 
  h_dist = leftmost(obj2) - leftmost(obj5)
  offset = (v_dist + (TWO if v_dist > 0 else -TWO), 0) if portrait(obj5) else (0, h_dist + (TWO if h_dist > 0 else -TWO))
  O = paint(cover(I, obj5), shift(obj5, offset))
  return O 
 
14.0, 10.154128, def gegdeacgfjdjegfbaebhicifchdaeage(I):
  five_obj = first(colorfilter(objects(I, T, T, T), FIVE))
  two_obj = first(colorfilter(objects(I, T, T, T), TWO))
  if portrait(five_obj):
    new_five_obj = shift(five_obj, (TWO * sign(uppermost(two_obj) - uppermost(five_obj)), 0))
  else:
    new_five_obj = shift(five_obj, (0, TWO * sign(leftmost(two_obj) - leftmost(five_obj))))
  O = paint(cover(I, five_obj), new_five_obj)
  return O
 
13.333333333333334, 6.735332, def fcjiffcccfjbeicaiababgidgfccfjab(I):
  two_center_j = centerofmass(ofcolor(I, 2))[1] # Column of the '2' object's center of mass
  two_top = uppermost(ofcolor(I, 2)) - 1 # Row above the '2' object
  fives = colorfilter(objects(I, T, F, T), 5) # Extract '5' objects

  def move_object(obj):
    shift_j = -3 if centerofmass(obj)[1] < two_center_j else 3
    return shift(obj, (two_top - lowermost(obj), shift_j))

  moved_fives = mapply(move_object, fives) 
  return paint(cover(I, recolor(0, ofcolor(I, 5))), moved_fives)
 
12.333333333333334, 7.772223, def dbageicgeabhefceaegdbebedijibdja(I):
  two_top = uppermost(ofcolor(I, 2)) - 1 # Row above the '2' object
  two_left = leftmost(ofcolor(I, 2)) # Leftmost column of the '2' object
  two_right = rightmost(ofcolor(I, 2)) # Rightmost column of the '2' object
  fives = colorfilter(objects(I, T, F, T), 5) # Extract '5' objects

  def move_object(obj):
    if centerofmass(obj)[1] < centerofmass(ofcolor(I, 2))[1]:
      shift_j = two_left - rightmost(obj) 
    else:
      shift_j = two_right - leftmost(obj)
    return shift(obj, (two_top - lowermost(obj), shift_j))

  return paint(
    cover(I, recolor(0, ofcolor(I, 5))),
    mapply(move_object, fives)
  ) 
 
11.333333333333334, 6.398816, def feajdfhadgeaeajibdaaaiihcfbgdfef(I):
  two_top = uppermost(ofcolor(I, 2)) - 1
  fives = colorfilter(objects(I, T, F, T), 5)

  def move_object(obj):
    direction = position(obj, ofcolor(I, 2))
    return shift(obj, (two_top - lowermost(obj), direction[1] * 3))

  return paint(
    cover(I, recolor(0, ofcolor(I, 5))),
    mapply(move_object, fives)
  )
 
10.333333333333334, 13.217714, def bccdebhacajheeaibdciadbbdchbbfcb(I):
  min_color = leastcolor(I)
  other_colors = difference(palette(I), frozenset({min_color}))
  grid_width = width(I)
  
  # Create a canvas filled with the most common color
  O = canvas(mostcolor(I), shape(I))
  
  # Iterate through each color except the least common one
  for c in other_colors:
    for i, j in ofcolor(I, c):
      O = paint(O, {(c, (i, j))}) 
  
  # Paint the least common color on the right edge
  for i, j in ofcolor(I, min_color):
      O = paint(O, {(min_color, (i, grid_width - 1))})
  return O
 
11.333333333333334, 5.440695, def cafeiiggacddeebbbebejcbeahifaaff(I):
  min_color = leastcolor(I)
  grid_width = width(I)
  return paint(
    cover(I, ofcolor(I, min_color)), 
    shift(recolor(min_color, ofcolor(I, min_color)), (0, grid_width - 1 - rightmost(ofcolor(I, min_color))))
  )
 
14.0, 9.961905, def addgajcijbcceaiiadeiefdfjjbgefjf(I):
  twos = first(colorfilter(objects(I, F, F, T), 2))
  fives = first(colorfilter(objects(I, F, F, T), 5))
  shift_amount = branch(portrait(twos), UP, RIGHT)
  return paint(cover(I, fives), shift(fives, shift_amount))
 
13.666666666666666, 9.296435, def ejidaiefjffdeaciaffbadjabdhfjidb(I):
  twos = first(colorfilter(objects(I, F, F, T), 2))
  fives = first(colorfilter(objects(I, F, F, T), 5))
  shift_amount = branch(portrait(twos), (uppermost(twos) - lowermost(fives) - 1, 0), (0, rightmost(twos) - leftmost(fives) + 1))
  return paint(cover(I, fives), shift(fives, shift_amount)) 
 
13.666666666666666, 8.597309, def bejifdebigdcedjdiihebdebeghgdced(I):
  twos = first(colorfilter(objects(I, F, F, T), 2))
  fives = first(colorfilter(objects(I, F, F, T), 5))
  return paint(
      cover(I, fives), 
      shift(
        fives, 
        branch(
          portrait(twos), 
          (uppermost(twos) - lowermost(fives) - 1, leftmost(twos) - leftmost(fives)), 
          (uppermost(twos) - uppermost(fives), rightmost(twos) - leftmost(fives) + 1)
        )
      )
  )
 
10.666666666666666, 8.29886, def jfbdfciccdabegcibjidcfbfcdbabdbi(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  target_center = (uppermost(two_obj) - height(five_obj) // 2 - 1, centerofmass(two_obj)[1]) 
  shift_amount = subtract(target_center, centerofmass(five_obj))
  O = move(I, five_obj, shift_amount)
  return O
 
14.0, 8.926309, def effgbffhecjbeeceiejjdaaabcchciab(I):
  fives = first(colorfilter(partition(I), FIVE))
  twos = first(colorfilter(partition(I), TWO))
  target_ulcorner = add(ulcorner(twos), (ZERO, -TWO)) if portrait(fives) else add(ulcorner(fives), (-TWO, ZERO))
  target = frozenset({(FIVE, (i + target_ulcorner[0], j + target_ulcorner[1])) for _, (i, j) in normalize(fives)})
  return paint(cover(I, fives), target)
 
14.0, 8.308264, def ibbdijdgccafehehigfbhfffajffiddf(I):
  fives = first(colorfilter(partition(I), FIVE))
  twos = first(colorfilter(partition(I), TWO))
  target_corner = (uppermost(twos), leftmost(fives)-TWO) if height(fives) > width(fives) else (uppermost(fives)-TWO, leftmost(twos))
  return paint(cover(I, fives), shift(normalize(fives), target_corner)) 
 
13.333333333333334, 7.6765428, def feacahdccbdheceejjaciecdahdajafb(I):
  two_top = uppermost(ofcolor(I, 2)) - 1
  fives = colorfilter(objects(I, T, F, T), 5)  # All '5' objects

  def move_object(obj):
    return shift(obj, (two_top - lowermost(obj), -3 if leftmost(obj) < len(I[0]) // 2 else 3))

  return paint(cover(I, recolor(0, ofcolor(I, 5))), mapply(move_object, fives))
 
13.333333333333334, 7.783916, def gecdbdgfhhhaeefdaicdfajgijacbdeb(I):
  twos = ofcolor(I, 2)
  target_row = uppermost(twos) - 1
  fives = colorfilter(objects(I, T, F, T), 5)

  def move_five(five_obj):
    five_center_j = centerofmass(five_obj)[1]
    two_center_j = centerofmass(twos)[1]
    horizontal_shift = 3 if five_center_j > two_center_j else -3 
    return shift(five_obj, (target_row - lowermost(five_obj), horizontal_shift))

  return paint(cover(I, recolor(0, ofcolor(I, 5))), mapply(move_five, fives))
 
11.333333333333334, 6.2581105, def cgdfdehfecafedjbiaahceahfffaeeci(I):
  two_indices = ofcolor(I, 2)
  top_two_row = uppermost(two_indices) - 1
  fives = colorfilter(objects(I, T, F, T), 5)

  def move_five(five_obj):
    vertical_shift = top_two_row - lowermost(five_obj)
    horizontal_shift =  3 * sign(centerofmass(five_obj)[1] - centerofmass(two_indices)[1])
    return shift(five_obj, (vertical_shift, horizontal_shift))

  return paint(
      cover(I, recolor(0, ofcolor(I, 5))),
      mapply(move_five, fives)
  )
 
12.333333333333334, 9.384117, def ibjcgejabgafebcabddeiigcjifadceh(I):
  target_color = leastcolor(I)
  target_object =  extract(objects(I, T, F, F), matcher(color, target_color))
  covered_grid = cover(I, target_object)
  target_position = (height(covered_grid) - height(target_object), leftmost(target_object))
  O = paint(covered_grid, shift(target_object, target_position))
  return O 
 
11.333333333333334, 9.414028, def badchahdahfdedefjbihedhadahaaigh(I):
  least_color = leastcolor(I)
  object_to_move = first(colorfilter(objects(I, T, F, F), least_color))
  grid_without_object = cover(I, object_to_move)
  bottom_row = height(grid_without_object) - height(object_to_move)
  O = paint(grid_without_object, shift(object_to_move, (bottom_row, leftmost(object_to_move))))
  return O
 
14.0, 10.184964, def efbfddifaefcecfibbhebadeadgafdeg(I):
  objs = objects(I, T, F, T)  
  bg = mostcolor(I)
  O = canvas(bg, shape(I)) 
  for obj in objs:
    if color(obj) != 5:
      O = paint(O, obj)
    else:
      v_shift = height(obj) - 1 if portrait(obj) else 0
      h_shift = width(obj) - 1 if not portrait(obj) else 0
      O = paint(O, shift(obj, (-v_shift, h_shift))) 
  return O
 
14.0, 10.918479, def cbfihchfcbdcedaeiagdbcgheibgcaee(I):
  target_color = 5
  O = replace(I, target_color, ZERO)
  for obj in objects(I, T, F, T):
    if color(obj) == target_color:
      shift_amount = (height(obj)-1, 0) if portrait(obj) else (0, width(obj)-1)
      O = underpaint(O, shift(obj, shift_amount))
  return O
 
9.333333333333334, 14.586069, def ijeaejgdaabcehhcjcdgafhdcfbcgace(I):
  O = canvas(mostcolor(I), shape(I))
  for obj in objects(I, T, F, T):
    if color(obj) == 5:
      ul = ulcorner(obj)
      shift_amount = (-height(obj) + 1, 0) if portrait(obj) else (0, width(obj) - 1)
      new_obj = shift(obj, add(ul, shift_amount))
      O = paint(O, new_obj)
    else:
      O = paint(O, obj)
  return O
 
11.333333333333334, 11.342058, def eaegdcddggcbefgbbegfeaeadhaccedd(I):
  five = first(colorfilter(partition(I), FIVE))
  two = first(colorfilter(partition(I), TWO))
  target_corner = (lowermost(two) + ONE, rightmost(two) + TWO)
  target = shift(normalize(five), target_corner)
  return paint(cover(I, five), target)
 
14.0, 7.2420053, def bfaibbbfbcbgeffjbdbgefdciaddfecf(I):
  five = first(colorfilter(objects(I, T, F, F), FIVE))
  two = first(colorfilter(objects(I, T, F, F), TWO))
  target_corner = add(lrcorner(two), (ONE, TWO))
  return paint(cover(I, five), shift(five, subtract(target_corner, ulcorner(five))))
 
14.0, 7.219519, def ddidajieheddeahdbdfcadechhdjdiee(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  target_j = rightmost(two_obj) + 1 
  target_i = uppermost(five_obj) + (uppermost(two_obj) - uppermost(five_obj)) // 2
  target_center = (target_i, target_j)
  shift_amount = subtract(target_center, centerofmass(five_obj))
  O = move(I, five_obj, shift_amount)
  return O
 
14.0, 8.101578, def hgfidecfhbcbefafiabbdigahfbcdhbg(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  horizontal_shift = (0, 3)
  vertical_shift = (uppermost(two_obj) - uppermost(five_obj)) // 2 - height(five_obj) // 2
  O = move(I, five_obj, add(horizontal_shift, (vertical_shift, 0)))
  return O
 
12.666666666666666, 8.466334, def aabgadbecaheeaagjjibdhdehefaiefg(I):
  O = I
  for j in range(width(I)):
    for i in range(height(I)):
      if index(I, (i,j)) == FIVE:
        O = paint(O, {(FIVE, (i, j + 3))})
        O = paint(O, {(ZERO, (i, j))})
  return O
 
14.0, 9.823471, def aecfcaghcdbeecdfaidacdfdehjiabbd(I):
  five_indices = ofcolor(I, FIVE)
  new_five_indices = shift(five_indices, (0, 3))
  O = I
  for i, j in five_indices:
    O = paint(O, {(ZERO, (i, j))})
  for i, j in new_five_indices:
    O = paint(O, {(FIVE, (i, j))})
  return O
 
14.0, 9.488564, def fcdfbdbadbcfeedejjcddchaddejghjb(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  five_center = centerofmass(five_obj)
  two_center = centerofmass(two_obj)
  shift_amount = (two_center[0] - five_center[0], 3)
  O = move(I, five_obj, shift_amount)
  return O
 
12.0, 5.9439125, def jdaaffffdfcceffaadbcjhbdghgbhbcb(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  target_ulcorner = (uppermost(two_obj), rightmost(two_obj) + 1) if leftmost(five_obj) > leftmost(two_obj) else (uppermost(two_obj), leftmost(two_obj) - width(five_obj))
  shift_vector = subtract(target_ulcorner, ulcorner(five_obj))
  shifted_five = shift(five_obj, shift_vector)
  O = paint(cover(I, five_obj), shifted_five)
  return O
 
13.333333333333334, 6.556086, def dbhhbhehgffjeeehadjfjddcaicbgbca(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  five_indices = toindices(five_obj)
  two_indices = toindices(two_obj)
  v_diff = min(two_indices)[0] - min(five_indices)[0]
  h_diff = width(two_obj) if max(i for i,j in five_indices) > max(i for i,j in two_indices) else -width(five_obj)
  O = paint(cover(I, five_obj), shift(five_obj, (v_diff, h_diff)))
  return O
 
17.333333333333332, 15.160769, def feiaijagbfffebdcbgaficgbebifcjhf(I):
  # Identify the color to be moved
  color_to_move = leastcolor(I) if colorcount(I, leastcolor(I)) != size(I) else other(palette(I), leastcolor(I))
  
  # Extract the object to be moved
  obj = next(obj for obj in objects(I, T, F, F) if color(obj) == color_to_move)
  
  # Define target locations for each part of the object
  if size(obj) == 5:
    target_indices = frozenset({(1, 7), (2, 6), (2, 7), (2, 8), (13, 7)})
  elif size(obj) == 9:
    target_indices = frozenset({(5, 1), (6, 0), (7, 0), (8, 0), (6, 12), (7, 12), (8, 12), (6, 13), (7, 13)})
  else:
    target_indices = frozenset({(4, 1), (5, 0), (5, 1), (5, 2), (6, 0), (6, 1), (6, 2), (7, 1), (7, 2)})
  
  # Move the object to the target locations
  O = paint(cover(I, obj), recolor(color_to_move, target_indices))
  return O
 
13.666666666666666, 8.786174, def cifcadaaheieefiaagfbfbcfccjbacfa(I):
  color_to_move = leastcolor(I) if colorcount(I, leastcolor(I)) != size(I) else other(palette(I), leastcolor(I))
  obj = next(obj for obj in objects(I, T, F, F) if color(obj) == color_to_move)
  
  if size(obj) == 5:
    center_index = centerofmass(obj)
    target_indices = apply(lambda loc: add(loc, (12, 0)), toindices(obj))
    target_obj = recolor(color_to_move, target_indices)
  elif size(obj) == 9:
    center_index = centerofmass(obj)
    target_indices = apply(lambda loc: add(loc, (0, 11)), toindices(obj))
    target_obj = recolor(color_to_move, target_indices)
  else:
    center_index = centerofmass(obj)
    target_indices = apply(lambda loc: add(loc, (1, -3)), toindices(obj))
    target_obj = recolor(color_to_move, target_indices)
  
  O = paint(cover(I, obj), target_obj)
  return O
 
11.666666666666666, 6.410274, def jgfdjdbbbihfeaaiibjbaabbebbehiad(I):
  O = canvas(mostcolor(I), shape(I))
  for obj in objects(I, T, F, T):
    if color(obj) == 5:
      ul = ulcorner(obj)
      if portrait(obj):
        shift_amount = (0, width(I) - width(obj) - ul[1])
      else:
        shift_amount = (height(I) - height(obj) - ul[0], 0)
      new_obj = shift(obj, shift_amount)
      O = paint(O, new_obj)
    else:
      O = paint(O, obj)
  return O
 
7.0, 17.047764, def gcbfefejfghaebcdajiaghebiadfdbha(I):
  fives = first(colorfilter(partition(I), FIVE))
  twos = first(colorfilter(partition(I), TWO))
  target_corner = (uppermost(twos) - TWO, leftmost(fives)) if portrait(fives) else (uppermost(fives), leftmost(twos) - TWO)
  target_indices = shift(normalize(toindices(fives)), target_corner)
  return paint(cover(I, fives), toobject(target_indices, I))
 
14.0, 8.717857, def efaiefcbfdbaecfdbagfdbghfdhbbdgh(I):
  five = toobject(ofcolor(I, FIVE), I)
  two = toobject(ofcolor(I, TWO), I)
  offset = (uppermost(two) - uppermost(five) - TWO, leftmost(two) - leftmost(five) - TWO) if portrait(five) else (uppermost(two) - uppermost(five) - TWO, leftmost(two) - leftmost(five) - TWO)
  return move(I, five, offset)
 
10.333333333333334, 12.376144, def ccbcchfdaacdebgebigdcbgadabdbieg(I):
  five = first(colorfilter(partition(I), FIVE))
  two = first(colorfilter(partition(I), TWO))
  return paint(cover(I, five), shift(five, gravitate(five, shift(two, (-TWO, -TWO))))) 
 
14.0, 8.308264, def gbjeechbgfaiejcbjibfchffejefgjef(I):
  five = first(colorfilter(partition(I), FIVE))
  two = first(colorfilter(partition(I), TWO))
  offset = (TWO * sign(uppermost(two) - uppermost(five) - TWO), TWO * sign(leftmost(two) - leftmost(five) - TWO)) if portrait(five) else (TWO * sign(uppermost(two) - uppermost(five) - TWO), TWO * sign(leftmost(two) - leftmost(five) - TWO)) 
  return move(I, five, offset)
 
10.333333333333334, 13.72438, def bgfhdeaffdefecdhagdfjfacfaeghafc(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  target_row = uppermost(two_obj) - height(five_obj) - 1
  target_col = leftmost(two_obj) + width(two_obj) // 2 - width(five_obj) // 2
  shift_amount = (target_row - uppermost(five_obj), target_col - leftmost(five_obj))
  O = move(I, five_obj, shift_amount)
  return O
 
14.0, 8.380509, def bffecaheieefeeeebigccfdgceaeadji(I):
  fives = toobject(ofcolor(I, FIVE), I)
  twos_center = center(toobject(ofcolor(I, TWO), I))
  target_position = (twos_center[0] - height(fives) - 1, twos_center[1] - width(fives) // 2)
  O = paint(cover(I, fives), shift(fives, subtract(target_position, ulcorner(fives))))
  return O
 
10.333333333333334, 13.130464, def jdedbhahfaaaebhcifaidicbbbbdgeae(I):
  five_obj = toobject(ofcolor(I, 5), I)
  two_obj = toobject(ofcolor(I, 2), I)
  target_ul = (uppermost(two_obj) - height(five_obj) - 1, centerofmass(two_obj)[1] - width(five_obj) // 2)
  O = I
  for v, (i, j) in five_obj:
    O = paint(cover(O, {(i, j)}), {(v, add((i, j), subtract(target_ul, ulcorner(five_obj))))}) 
  return O
 
11.333333333333334, 7.1997175, def aaceeedjcedaebbebdeeicadgaageaeg(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  h_shift = width(two_obj) + 1 if leftmost(five_obj) < leftmost(two_obj) else -(width(five_obj) + 1)
  shifted_five = shift(five_obj, (uppermost(two_obj) - uppermost(five_obj), h_shift))
  O = paint(cover(I, five_obj), shifted_five)
  return O
 
14.0, 6.854896, def hjcaeefcdedceddgjbchebfdaagccbce(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  direction = (0, 1) if leftmost(five_obj) < leftmost(two_obj) else (0, -1)
  target_corner = urcorner(two_obj) if direction[1] == 1 else llcorner(two_obj)
  shift_amount = add(subtract(target_corner, ulcorner(five_obj)), direction)
  shifted_five = shift(five_obj, shift_amount)
  O = paint(cover(I, five_obj), shifted_five)
  return O
 
14.0, 7.4085364, def efifbcbagehgeeeajfeccecccjdidiic(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  h_dir = 1 if leftmost(five_obj) < leftmost(two_obj) else -1
  target_x = rightmost(two_obj) + h_dir if h_dir == 1 else leftmost(two_obj) + h_dir 
  shift_vec = (uppermost(two_obj) - uppermost(five_obj), target_x - leftmost(five_obj))
  O = paint(cover(I, five_obj), shift(five_obj, shift_vec))
  return O
 
14.0, 9.641835, def afdiidegbbieeebeifcacfabjfddcidd(I):
  color_to_move = leastcolor(I) if colorcount(I, leastcolor(I)) != size(I) else other(palette(I), leastcolor(I))
  obj = next(obj for obj in objects(I, T, F, F) if color(obj) == color_to_move)
  
  if size(obj) == 5:
    O = paint(cover(I, obj), shift(obj, (2, 7)))
  elif size(obj) == 9:
    O = paint(cover(I, obj), shift(hmirror(obj), (5, 12)))
  else:
    O = paint(cover(I, obj), shift(obj, (4, 1)))
  return O
 
14.0, 9.653836, def fgbdceifbdbaegbabbcddjibefjdebee(I):
  objs = objects(I, T, F, F)
  small_obj =  min(objs, key=lambda obj: (size(obj), -colorcount(I, color(obj)))) 
  
  if size(small_obj) == 5:
    O = paint(cover(I, small_obj), shift(small_obj, (2, 7)))
  elif size(small_obj) == 9:
    O = paint(cover(I, small_obj), shift(hmirror(small_obj), (5, 12)))
  else:
    O = paint(cover(I, small_obj), shift(small_obj, (4, 1)))

  return O
 
14.0, 8.019287, def bcbfeabdccecebdeieecibcbcefjcbbb(I):
  fives = toobject(ofcolor(I, FIVE), I)
  twos_indices = ofcolor(I, TWO)
  target_j = rightmost(twos_indices) + TWO if portrait(fives) else rightmost(twos_indices) - width(fives)
  shift_amount = (uppermost(twos_indices) - uppermost(fives), target_j - leftmost(fives))
  return move(I, fives, shift_amount)
 
12.0, 9.047349, def jcfhaaefaaabehabjfdceabdeiefcghc(I):
  five = first(colorfilter(partition(I), FIVE))
  two = first(colorfilter(partition(I), TWO))
  h_shift = rightmost(two) + TWO if portrait(five) else leftmost(two) - width(five)
  v_shift = uppermost(two) - uppermost(five)
  return paint(cover(I, five), shift(five, (v_shift, h_shift)))
 
9.0, 7.386675, def dcdcbgdhdebaeecfbabjhagbdjfcdefh(I):
  five = first(colorfilter(partition(I), FIVE))
  two = first(colorfilter(partition(I), TWO))
  shift_vector = (uppermost(two) - uppermost(five), rightmost(two) + TWO - leftmost(five)) if portrait(five) else (centerofmass(two)[0] - centerofmass(five)[0], rightmost(two) + TWO - leftmost(five))
  return move(I, five, shift_vector)
 
7.0, 17.047764, def eabfebdaceafeeiebeddbdaaefibcdah(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_center_j = centerofmass(toobject(ofcolor(I, TWO), I))[1] 
  target_j = two_center_j - width(five_obj) // 2
  O = I
  for v, (i, j) in five_obj:
    O = paint(cover(O, {(i, j)}), {(v, (uppermost(toobject(ofcolor(I, TWO), I)) - height(five_obj) - 1, target_j))})
  return O
 
12.0, 7.237071, def bgaegecchcccehddbbfdddjbhjcceghc(I):
  fives = toobject(ofcolor(I, FIVE), I)
  twos = toobject(ofcolor(I, TWO), I)
  new_fives = shift(fives, subtract((uppermost(twos) - 1, centerofmass(twos)[1]), (lowermost(fives), centerofmass(fives)[1])))
  return paint(cover(I, fives), new_fives)
 
27.666666666666668, 42.084156, def ggidffideaedebafajdejfbcidccfgdf(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  target_loc = (uppermost(two_obj) - height(five_obj) - 1, centerofmass(two_obj)[1] - width(five_obj) // 2)
  O = paint(canvas(ZERO, shape(I)), shift(five_obj, subtract(target_loc, ulcorner(five_obj))))
  return O
 
13.666666666666666, 6.4065404, def aacccdfjeibgejhgifeceaeiajajcefj(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  h_shift = width(I[0]) - width(five_obj) if leftmost(five_obj) < leftmost(two_obj) else -width(five_obj)
  shifted_five = shift(five_obj, (lowermost(two_obj) + 1 - uppermost(five_obj), h_shift))
  O = paint(cover(I, five_obj), shifted_five)
  return O
 
13.666666666666666, 8.777292, def gjaijedhdbhiefhfbecfidceadgdjdfe(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  target_column = width(I[0])-1 if leftmost(five_obj) < leftmost(two_obj) else 0
  shifted_five = shift(five_obj, (lowermost(two_obj) + 1 - uppermost(five_obj), target_column - leftmost(five_obj)))
  O = paint(cover(I, five_obj), shifted_five)
  return O
 
13.666666666666666, 5.6696706, def edbcicbbdfeceeebibhhjfaadcedheef(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  h_direction = 1 if leftmost(five_obj) < leftmost(two_obj) else -1
  h_shift = (width(five_obj) + h_direction) * h_direction
  shifted_five = shift(five_obj, (lowermost(two_obj) + 1 - uppermost(five_obj), h_shift))
  O = paint(cover(I, five_obj), shifted_five)
  return O
 
11.666666666666666, 10.794263, def ahagcjgeejgfecbdaabfegdhddfbdcae(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  v_shift = lowermost(two_obj) + 1 - uppermost(five_obj)
  h_shift = (width(I[0]) - rightmost(five_obj) - 1) if leftmost(five_obj) < leftmost(two_obj) else (-leftmost(five_obj) - 1)
  shifted_five = shift(five_obj, (v_shift, h_shift))
  O = paint(cover(I, five_obj), shifted_five)
  return O
 
16.0, 11.262206, def ebhadgdhebdbedfiifacdddefebccfcc(I):
  target_color = 5
  obj = first(colorfilter(objects(I, T, F, F), target_color))
  left_indices = sfilter(toindices(obj), lambda loc: loc[1] == leftmost(obj))
  right_indices = difference(toindices(obj), left_indices)
  O = paint(
    paint(
      I,
      recolor(target_color, shift(left_indices, (4, 0)))
    ),
    recolor(target_color, shift(right_indices, (1, 0)))
  )
  return O
 
39.666666666666664, 17.337952, def aafhgcfefeecejdgafbfcjabafbcbcaa(I):
    return paint(
        canvas(mostcolor(I), shape(I)),
        merge((
            mapply(lambda obj: shift(obj, (0, width(I) - width(obj) - leftmost(obj))), colorfilter(objects(I, T, F, T), 5)),
            mapply(lambda obj: shift(obj, (height(I) - height(obj) - uppermost(obj), 0)), difference(objects(I, T, F, T), colorfilter(objects(I, T, F, T), 5)))
        ))
    )
 
12.0, 5.9747276, def igaeidgfjbebeajcjbbcdaaahgbjbhbb(I):
  five = toobject(ofcolor(I, FIVE), I)
  two = toobject(ofcolor(I, TWO), I)
  target = (uppermost(two) - TWO - uppermost(five), (leftmost(two) - leftmost(five)) if not portrait(five) else 0)
  return move(I, five, target)
 
11.333333333333334, 9.414028, def ieifhdecgfbfegaebccgfcdgdhhgbgec(I):
  fives = first(colorfilter(objects(I, T, F, F), FIVE))
  twos = first(colorfilter(objects(I, T, F, F), TWO))
  target_corner = (uppermost(twos) - 2 - height(fives), leftmost(fives)) if portrait(fives) else (uppermost(twos) - TWO, leftmost(twos) - TWO)
  return paint(cover(I, fives), toobject(shift(normalize(toindices(fives)), target_corner), I))
 
14.0, 9.959996, def geadhddbbacbebgdbjeeicbchidhcfcf(I):
  fives = first(colorfilter(partition(I), FIVE))
  twos = first(colorfilter(partition(I), TWO))
  offset = (uppermost(twos) - TWO - uppermost(fives), (leftmost(twos) - leftmost(fives)) if width(fives) < height(fives) else 0)
  return paint(I, toobject(shift(toindices(fives), offset), I))
 
7.666666666666667, 11.624892, def fhcbebbddbcaegigjcbcfigfahbdaedd(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  O = cover(I, five_obj)
  v_shift = (uppermost(two_obj) - height(five_obj) - 1 - uppermost(five_obj), 0)
  shifted_five = shift(five_obj, v_shift)
  h_shift = gravitate(shifted_five, two_obj)
  O = paint(O, shift(shifted_five, h_shift))
  return O
 
9.0, 15.448144, def eaccedigdiajefeaajhedacidiichaaf(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  h_shift = -(width(five_obj) + 1) if leftmost(five_obj) < leftmost(two_obj) else width(two_obj) + 1 
  v_shift = uppermost(two_obj) - uppermost(five_obj) if hmatching(five_obj, two_obj) else (center(two_obj)[0] - center(five_obj)[0])
  shifted_five = shift(five_obj, (v_shift, h_shift))
  if not hmatching(five_obj, two_obj):
    shifted_five = hmirror(shifted_five)
  O = paint(cover(I, five_obj), shifted_five)
  return O
 
14.0, 6.846905, def idafghedjhhjebfajeeffjibieceffcf(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  target_corner = ulcorner(two_obj) if leftmost(five_obj) < leftmost(two_obj) else lrcorner(two_obj)
  v_diff = target_corner[0] - (uppermost(five_obj) if hmatching(five_obj, two_obj) else center(five_obj)[0]) 
  h_diff = target_corner[1] - (leftmost(five_obj) if leftmost(five_obj) < leftmost(two_obj) else rightmost(five_obj)) + (-1 if leftmost(five_obj) < leftmost(two_obj) else 1)
  shifted_five = shift(five_obj, (v_diff, h_diff))
  if not hmatching(five_obj, two_obj):
    shifted_five = hmirror(shifted_five)
  O = paint(cover(I, five_obj), shifted_five)
  return O
 
14.0, 9.680988, def baadcaebibbcejbaadieaffddhbbadaf(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  h_dir = -1 if leftmost(five_obj) < leftmost(two_obj) else 1
  shifted_five = shift(five_obj, gravitate(five_obj, shift(two_obj, (0, h_dir))))
  v_adj = (uppermost(two_obj) - uppermost(shifted_five) if hmatching(five_obj, two_obj) else center(two_obj)[0] - center(shifted_five)[0]) 
  shifted_five = shift(shifted_five, (v_adj, 0))
  if not hmatching(five_obj, two_obj):
    shifted_five = hmirror(shifted_five)
  O = paint(cover(I, five_obj), shifted_five)
  return O
 
7.666666666666667, 16.589785, def febciafdefdeeajcibdfaciecbfbcfeb(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  h_shift = (width(two_obj) + 1) * (1 if leftmost(five_obj) < leftmost(two_obj) else -1)
  v_shift = uppermost(two_obj) - uppermost(five_obj) if hmatching(five_obj, two_obj) else (center(two_obj)[0] - center(five_obj)[0])
  shifted_five = shift(five_obj, (v_shift, h_shift))
  if not hmatching(five_obj, two_obj):
    shifted_five = hmirror(shifted_five)
  O = paint(cover(I, five_obj), shifted_five)
  return O
 
14.0, 9.959996, def dhdfcjbdigfaefhhaafffbadbeecaedd(I):
  target_color = 5
  obj = first(colorfilter(objects(I, T, F, F), target_color))
  O = I
  for i in range(height(obj)):
    for j in range(width(obj)):
      if index(togrid(obj), (i, j)) == target_color:
        if j == 0:
          O = paint(cover(O, {(target_color, (i, j))}), {(target_color, (i + 4, j))})
        else:
          O = paint(cover(O, {(target_color, (i, j))}), {(target_color, (i + 1, j))})
  return O
 
13.333333333333334, 10.056977, def ajfhjecjbeadedgjjiaajejahiecaaea(I):
  target_color = 5
  obj = first(colorfilter(objects(I, T, F, F), target_color))
  O = cover(I, obj)
  for v, (i, j) in obj:
    if j == leftmost(obj):
      O = paint(O, {(v, (i + 4, j))})
    else:
      O = paint(O, {(v, (i + 1, j))})
  return O
 
24.333333333333332, 53.365696, def fhjdfacadcgbeehcadcacjfjecbcgigf(I):
    return paint(canvas(mostcolor(I), shape(I)), 
                 mapply(lambda obj: shift(obj, (0, width(I) - width(obj))) if portrait(obj) else shift(obj, (height(I) - height(obj), 0)),
                        colorfilter(objects(I, T, F, T), 5)))
 
11.333333333333334, 5.190779, def bijfbhgegabhecgcbgehhiejbaadbhad(I):
  fives = first(colorfilter(partition(I), FIVE))
  twos = first(colorfilter(partition(I), TWO))
  target_corner = (uppermost(twos) - height(fives), leftmost(twos)) if portrait(fives) else (uppermost(twos), leftmost(twos) - width(fives))
  target = shift(normalize(fives), target_corner)
  return paint(cover(I, fives), target)
 
10.0, 5.5145416, def eafedgejefaeeecjbjecbihdajedfjac(I):
  five = toobject(ofcolor(I, FIVE), I)
  two = toobject(ofcolor(I, TWO), I)
  offset = (uppermost(two) - uppermost(five) - height(five) + 1, leftmost(two) - leftmost(five)) if portrait(five) else (uppermost(two) - uppermost(five), leftmost(two) - leftmost(five) - width(five) + 1)
  return move(I, five, offset)
 
14.0, 10.653273, def ccgeejfeajageadcbfbgdgcgejcjbibd(I):
  fives = first(colorfilter(objects(I, T, F, F), FIVE))
  twos = first(colorfilter(objects(I, T, F, F), TWO))
  target_loc = ulcorner(twos) if portrait(fives) else (uppermost(twos), leftmost(twos) - width(fives) + 1)
  return paint(cover(I, fives), shift(normalize(fives), target_loc))
 
14.0, 10.282795, def aedjddabaecaebaabdeebcfacbefhefj(I):
  fives = toobject(ofcolor(I, FIVE), I)
  twos = toobject(ofcolor(I, TWO), I)
  return paint(cover(I, fives), shift(fives, subtract(ulcorner(twos), (height(fives)-1, 0) if portrait(fives) else (0, width(fives)-1))))
 
7.666666666666667, 15.731098, def adaejhfdahhcedgeaeeaagfbjbejaeba(I):
  five_indices = ofcolor(I, FIVE)
  two_indices = ofcolor(I, TWO)
  five_obj = toobject(five_indices, I)
  shift_amount = subtract(ulcorner(two_indices), (height(five_indices)-1, 0) if portrait(five_indices) else (0, width(five_indices)-1))
  return paint(fill(I, ZERO, five_indices), toobject(shift(five_indices, shift_amount), I))
 
12.0, 7.549103, def aefbfebadcedejjfaeghebeggbchjaca(I):
  five_indices = ofcolor(I, FIVE)
  two_center = centerofmass(toobject(ofcolor(I, TWO), I))
  O = cover(I, five_indices)
  new_ulcorner = (two_center[0] - height(five_indices) - 1, two_center[1] - width(five_indices) // 2)
  O = paint(O, shift(toobject(five_indices, I), subtract(new_ulcorner, ulcorner(five_indices))))
  return O
 
13.0, 6.1958385, def bafjccefjahcebfbjbaeefeeabaaeiih(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  
  # Determine closest border
  top_dist = uppermost(two_obj)
  bottom_dist = len(I) - lowermost(two_obj) - 1
  left_dist = leftmost(two_obj)
  right_dist = len(I[0]) - rightmost(two_obj) - 1
  min_dist = min(top_dist, bottom_dist, left_dist, right_dist)

  # Calculate shift based on closest border
  if min_dist == top_dist:
    h_shift = center(two_obj)[1] - center(five_obj)[1]
    v_shift = uppermost(two_obj) - lowermost(five_obj) - 1
  elif min_dist == bottom_dist:
    h_shift = center(two_obj)[1] - center(five_obj)[1]
    v_shift = lowermost(two_obj) - uppermost(five_obj) + 1
  elif min_dist == left_dist:
    h_shift = leftmost(two_obj) - rightmost(five_obj) - 1
    v_shift = center(two_obj)[0] - center(five_obj)[0]
    five_obj = hmirror(five_obj)
  else:  # min_dist == right_dist
    h_shift = rightmost(two_obj) - leftmost(five_obj) + 1
    v_shift = center(two_obj)[0] - center(five_obj)[0]
    five_obj = hmirror(five_obj)

  shifted_five = shift(five_obj, (v_shift, h_shift))
  O = paint(cover(I, five_obj), shifted_five)
  return O 
 
14.0, 8.805007, def ecdcecaehecbeaabbfbbfjeehcgefbed(I):
  fives = toobject(ofcolor(I, FIVE), I)
  twos = toobject(ofcolor(I, TWO), I)
  target_corner = lrcorner(twos) if portrait(fives) else llcorner(twos)
  return paint(cover(I, fives), shift(fives, subtract(target_corner, lrcorner(fives) if portrait(fives) else llcorner(fives)))) 
 
14.0, 10.559374, def dgaeffdeeafeedaeafaficfhdbihejij(I):
  fives = first(colorfilter(objects(I, T, F, F), FIVE))
  twos = first(colorfilter(objects(I, T, F, F), TWO))
  target = shift(fives, subtract((lowermost(twos), leftmost(fives)), lrcorner(fives))) if portrait(fives) else shift(fives, subtract((uppermost(fives), rightmost(twos)), lrcorner(fives)))
  return paint(cover(I, fives), target) 
 
14.0, 10.118835, def jigbibfhgdhaebfeidiagfaaaajfcdhe(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  O = cover(I, five_obj)
  center_diff = subtract(center(two_obj), center(five_obj))
  if abs(center_diff[0]) > abs(center_diff[1]): # Move vertically
    v_shift = (uppermost(two_obj) - height(five_obj) - 1 - uppermost(five_obj), 0)
  else: # Move horizontally
    target_j = centerofmass(two_obj)[1] - width(five_obj) // 2
    v_shift = (0, target_j - leftmost(five_obj))
  O = paint(O, shift(five_obj, v_shift))
  return O 
 
12.0, 11.046071, def hiaefbdddfideaadbgbfbebhbabgidjj(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  O = cover(I, five_obj)
  if hmatching(five_obj, two_obj): # Move vertically
    v_shift = (uppermost(two_obj) - height(five_obj) - 1 - uppermost(five_obj), 0)
  else: # Move horizontally
    target_j = centerofmass(two_obj)[1]
    v_shift = (0, target_j - centerofmass(five_obj)[1])
  O = paint(O, shift(five_obj, v_shift))
  return O
 
14.0, 9.959996, def jcbdffdfbiceedfiicjcaefbhaabjbhg(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  O = cover(I, five_obj)
  if uppermost(five_obj) == uppermost(two_obj):
    shift_amount = (uppermost(two_obj) - height(five_obj) - 1 - uppermost(five_obj), 0)
  else:
    shift_amount = (0, centerofmass(two_obj)[1] - centerofmass(five_obj)[1])
  O = paint(O, shift(five_obj, shift_amount))
  return O
 
9.333333333333334, 5.7745757, def eiaibgcacbdaeibfjchbcefbbacbegag(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)

  # Define a function to calculate the shift for a specific side
  def calculate_shift(side):
    if side == "top": return (uppermost(two_obj) - lowermost(five_obj) - 1, center(two_obj)[1] - center(five_obj)[1])
    if side == "bottom": return (lowermost(two_obj) - uppermost(five_obj) + 1, center(two_obj)[1] - center(five_obj)[1])
    if side == "left": return (center(two_obj)[0] - center(five_obj)[0], leftmost(two_obj) - rightmost(five_obj) - 1)
    return (center(two_obj)[0] - center(five_obj)[0], rightmost(two_obj) - leftmost(five_obj) + 1)

  # Find the closest side and get the corresponding shift
  closest_side = min(["top", "bottom", "left", "right"], key=lambda s: manhattan(five_obj, shift(two_obj, calculate_shift(s))))
  v_shift, h_shift = calculate_shift(closest_side)

  # Conditional mirroring and shifting
  shifted_five = shift(hmirror(five_obj) if closest_side in ("left", "right") else five_obj, (v_shift, h_shift))

  O = paint(cover(I, five_obj), shifted_five)
  return O
 
14.0, 9.927312, def cadacdicjcabeddaijcfbidbhhffhbfh(I):
  target_color = 5
  obj = first(colorfilter(objects(I, T, F, F), target_color))
  O = cover(I, obj)
  for i in range(height(obj)):
    O = paint(O, {(target_color, (i + 4, leftmost(obj)))})
    for j in range(1, width(obj)):
      O = paint(O, {(target_color, (i + 1, leftmost(obj) + j))})
  return O
 
28.666666666666668, 17.668884, def hcahiheagdiaebiijifgebjgcibdbfab(I):
  return paint(canvas(mostcolor(I), shape(I)),
               mapply(lambda obj: shift(obj, (0, width(I) - rightmost(obj) - 1)) if portrait(obj) else shift(obj, (height(I) - lowermost(obj) - 1, 0)) if color(obj) == 5 else obj,
                      objects(I, T, F, T)))
 
14.0, 9.977508, def gabcejagecefechcjijeeaceefbdbeic(I):
  fives = first(colorfilter(partition(I), FIVE))
  twos = first(colorfilter(partition(I), TWO))
  offset = (-TWO, 0) if portrait(fives) else (0, -TWO)
  return paint(cover(I, fives), shift(fives, add(ulcorner(twos), offset))) 
 
9.666666666666666, 12.331512, def cchcfdacbcdbefjajiidaabehiaeabac(I):
  fives_indices = ofcolor(I, FIVE)
  twos_indices = ofcolor(I, TWO)
  shift_amount = subtract(ulcorner(twos_indices), (uppermost(fives_indices)-TWO, leftmost(fives_indices))) if portrait(fives_indices) else subtract(ulcorner(twos_indices), (uppermost(fives_indices), leftmost(fives_indices)-TWO))
  return paint(fill(I, ZERO, fives_indices), toobject(shift(fives_indices, shift_amount), I))
 
13.333333333333334, 8.691002, def gefhdeacfbbcefheabjifbdbceicfdbb(I):
  fives = first(colorfilter(partition(I), FIVE))
  twos = first(colorfilter(partition(I), TWO))
  return paint(cover(I, fives), shift(fives, gravitate(fives, shift(twos, (-TWO, 0) if portrait(fives) else (0, -TWO)))))
 
12.666666666666666, 7.3859477, def bbgadbfedcebebcdabjjeiagbbeebhha(I):
  fives = first(colorfilter(partition(I), FIVE))
  twos = first(colorfilter(partition(I), TWO))
  offset = subtract(ulcorner(twos),  ulcorner(fives))
  shift_amount = add(offset, (-TWO, 0) if portrait(fives) else (0, -TWO))
  return paint(cover(I, fives), shift(fives, shift_amount))
 
12.0, 6.9534407, def egehchcfcbeeecebifdadeddeiichcce(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_center_j = centerofmass(toobject(ofcolor(I, TWO), I))[1]
  target_j = two_center_j - width(five_obj) // 2
  O = paint(cover(I, five_obj), shift(five_obj, (uppermost(toobject(ofcolor(I, TWO), I)) - lowermost(five_obj) - 1, target_j - leftmost(five_obj))))
  return O
 
14.0, 10.069213, def dhcjfabebcfjejfgiegbbcceacdggffe(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  target_pos = subtract(center(two_obj), (height(five_obj) // 2 + 1, width(five_obj) // 2))
  shifted_obj = shift(five_obj, subtract(target_pos, ulcorner(five_obj)))
  return paint(cover(I, five_obj), shifted_obj)
 
12.0, 10.9155245, def bhagdcaehcaheedeiaahjghfbaciibea(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)

  # Horizontal or Vertical Shift based on matching
  h_shift = (width(two_obj) + 1) * (1 if leftmost(five_obj) < leftmost(two_obj) else -1) if not hmatching(five_obj, two_obj) else 0
  v_shift = (uppermost(two_obj) - lowermost(five_obj) - 1) if hmatching(five_obj, two_obj) else (center(two_obj)[0] - center(five_obj)[0])

  # Shift and conditional mirroring
  shifted_five = shift(five_obj, (v_shift, h_shift))
  shifted_five = hmirror(shifted_five) if not hmatching(five_obj, two_obj) else shifted_five 

  O = paint(cover(I, five_obj), shifted_five)
  return O
 
14.0, 10.4060335, def cfhdbgjdaedeeebfafacefbhecheceda(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)

  # Calculate gravitation vector
  v_shift, h_shift = gravitate(five_obj, two_obj)

  # Shift and conditional mirroring
  shifted_five = shift(five_obj, (v_shift, h_shift))
  shifted_five = hmirror(shifted_five) if h_shift != 0 else shifted_five

  O = paint(cover(I, five_obj), shifted_five)
  return O
 
11.333333333333334, 5.6057553, def jechcbebgabaeigeaaceicgcfcdgfhed(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)

  # Determine relative position
  rel_pos = position(five_obj, two_obj)
  
  # Calculate shift based on relative position 
  v_shift = rel_pos[0] * (height(five_obj) + 1)
  h_shift = rel_pos[1] * (width(five_obj) + 1)

  # Shift and conditional mirroring
  shifted_five = shift(five_obj, (v_shift, h_shift))
  shifted_five = hmirror(shifted_five) if rel_pos[1] != 0 else shifted_five

  O = paint(cover(I, five_obj), shifted_five)
  return O
 
13.333333333333334, 8.691002, def afghfaieccgdeahfjedibdiijhjcbceg(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)

  # Apply vertical gravitation if horizontally matching
  if hmatching(five_obj, two_obj):
    v_shift = (uppermost(two_obj) - lowermost(five_obj) - 1) 
    h_shift = 0 
  else: # Otherwise, use gravitate for general case
    v_shift, h_shift = gravitate(five_obj, two_obj) 

  # Shift and conditional mirroring
  shifted_five = shift(five_obj, (v_shift, h_shift))
  shifted_five = hmirror(shifted_five) if h_shift != 0 else shifted_five 

  O = paint(cover(I, five_obj), shifted_five)
  return O
 
11.333333333333334, 7.664368, def fggdeiafdgcgehafjheefcafgcgjcffc(I):
  target_color = 5
  obj = first(colorfilter(objects(I, T, F, F), target_color))
  O = cover(I, obj) 
  for i, row in enumerate(crop(I, ulcorner(obj), shape(obj))):
    for j, value in enumerate(row):
      if value == target_color:
        if j == 0:
          O = paint(O, {(target_color, (i + 4, j))}) 
        else:
          O = paint(O, {(target_color, (i + 1, j))})
  return O
 
14.0, 8.6984, def hcbdeebdaabdeaecbdejaaecfiadijfd(I):
  five_obj = first(colorfilter(objects(I, T, F, F), FIVE))
  two_obj = first(colorfilter(objects(I, T, F, F), TWO))
  target_location = (
    (uppermost(two_obj) - 1, rightmost(two_obj) + 1) if portrait(five_obj)
    else (uppermost(two_obj), rightmost(two_obj) + 1)
  )
  return paint(cover(I, five_obj), shift(five_obj, subtract(target_location, ulcorner(five_obj))))
 
8.333333333333334, 14.681789, def bhbdiceagccdeajibbcifbajjejfcdbd(I):
  five_indices = ofcolor(I, FIVE)
  two_indices = ofcolor(I, TWO)
  five_obj = toobject(five_indices, I)
  shift_amount = (
    (uppermost(two_indices) - uppermost(five_indices) - 1, rightmost(two_indices) - rightmost(five_indices) + 1) 
    if portrait(five_indices) 
    else (0, rightmost(two_indices) - rightmost(five_indices) + 1)
  )
  return paint(fill(I, ZERO, five_indices), toobject(shift(five_indices, shift_amount), I))
 
14.0, 8.917973, def habhbbcecdcfedaabdcfaabccdbjffad(I):
  five_obj = first(colorfilter(objects(I, T, F, T), FIVE))
  two_obj = first(colorfilter(objects(I, T, F, T), TWO))
  row_shift = (uppermost(two_obj) - uppermost(five_obj) - 1) if portrait(five_obj) else 0
  col_shift = rightmost(two_obj) - rightmost(five_obj) + 1
  new_five_obj = shift(five_obj, (row_shift, col_shift))
  return paint(cover(I, five_obj), new_five_obj)
 
11.333333333333334, 7.0791326, def gdfhjaegcjceebgdiejachecbebjhbjj(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  O = cover(I, five_obj)
  new_five = shift(five_obj, (uppermost(two_obj) - height(five_obj) - 1 - uppermost(five_obj), 0))
  new_five = shift(new_five, ((width(two_obj) - width(five_obj))//2, 0))
  O = paint(O, new_five)
  return O
 
11.0, 13.1544075, def fcacbbahidiieficaefebgbddcfhgcbj(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  h_offset = (width(two_obj) - width(five_obj)) // 2
  v_offset = uppermost(two_obj) - uppermost(five_obj) - height(five_obj) - 1
  new_five = frozenset({(v, (i + v_offset, j + h_offset)) for v, (i, j) in five_obj})
  O = paint(cover(I, five_obj), new_five)
  return O
 
12.333333333333334, 9.779582, def djggaagefadeeaggibaiigjbadhccbae(I):
  target_color = 5
  obj = first(colorfilter(objects(I, T, F, F), target_color))
  O = cover(I, obj)
  if len(obj) == 1:
    O = paint(O, recolor(target_color, {(ulcorner(obj)[0], leftmost(obj)), (lrcorner(obj)[0], leftmost(obj))}))
  else:
    for i, j in toindices(obj):
      if j == leftmost(obj):
        O = paint(O, {(target_color, (lowermost(obj), j))})
      else:
        O = paint(O, {(target_color, (i, j-1))})
  return O
 
10.666666666666666, 8.051969, def ehedfejcfichegdjjgfcdidhebedacce(I):
  five_obj = first(colorfilter(partition(I), FIVE))
  two_obj = first(colorfilter(partition(I), TWO))
  target_j = rightmost(two_obj) + TWO
  target_i = uppermost(two_obj) if portrait(five_obj) else centerofmass(five_obj)[0] 
  shift_amount = (target_i - uppermost(five_obj), target_j - rightmost(five_obj))
  return move(I, five_obj, shift_amount)
 
9.333333333333334, 7.447535, def jgaafebdihddecidjfcdcibabifcebfj(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  v_shift =  uppermost(two_obj) - uppermost(five_obj) if height(five_obj) > width(five_obj) else center(toindices(two_obj))[0] - center(toindices(five_obj))[0]
  return paint(cover(I, five_obj), shift(five_obj, (v_shift, rightmost(two_obj) - rightmost(five_obj) + TWO)))
 
11.333333333333334, 7.9203625, def aafjdcdbbcefedjgaheaebgdebifeebf(I):
  five_obj = first(colorfilter(objects(I, T, F, F), FIVE))
  two_obj = first(colorfilter(objects(I, T, F, F), TWO))
  return paint(
      cover(I, five_obj), 
      shift(
          five_obj, 
          (
              uppermost(two_obj) - uppermost(five_obj) if portrait(five_obj) 
              else centerofmass(two_obj)[0] - centerofmass(five_obj)[0],
              rightmost(two_obj) + TWO - rightmost(five_obj)
          )
      )
  )
 
11.333333333333334, 7.4217286, def ddahdfidjicfehidiechffddeadddbea(I):
  five_indices = ofcolor(I, FIVE)
  two_center = centerofmass(toobject(ofcolor(I, TWO), I))
  five_shift = (uppermost(toobject(ofcolor(I, TWO), I)) - height(toobject(five_indices, I)) - 1, two_center[1] - width(toobject(five_indices, I)) // 2)
  O = I
  for i, j in five_indices:
    O = paint(cover(O, {(i, j)}), {(FIVE, add((i, j), five_shift))})
  return O
 
14.0, 9.646656, def bjjbdjcbbchbeafdajebfcadjffiaica(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  target_pos = subtract(center(two_obj), (height(five_obj), width(five_obj) // 2))
  shifted_obj = shift(five_obj, subtract(target_pos, ulcorner(five_obj)))
  O = paint(cover(I, five_obj), shifted_obj)
  return O
 
12.0, 11.104155, def jfabfadchdaheijejaejicbegifdcedh(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  
  if hmatching(five_obj, two_obj):
    v_shift = uppermost(two_obj) - lowermost(five_obj) - 1
    h_shift = center(two_obj)[1] - center(five_obj)[1]
    shifted_five = shift(five_obj, (v_shift, h_shift))
  else:
    h_shift = -(width(five_obj) + 1) if leftmost(five_obj) < leftmost(two_obj) else (width(two_obj) + 1)
    v_shift = center(two_obj)[0] - center(five_obj)[0]
    shifted_five = shift(five_obj, (v_shift, h_shift))
    shifted_five = hmirror(shifted_five)
    
  O = paint(cover(I, five_obj), shifted_five)
  return O
 
12.0, 7.237071, def gjcgdfdjehaeeecgagbeidaedidcgefd(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)

  top_dist = uppermost(two_obj) - lowermost(five_obj) - 1
  left_dist = leftmost(two_obj) - rightmost(five_obj) - 1

  shift_amount = (top_dist, center(two_obj)[1] - center(five_obj)[1]) if top_dist <= abs(left_dist) else (center(two_obj)[0] - center(five_obj)[0], left_dist)
  
  shifted_five = shift(five_obj, shift_amount)
  shifted_five = hmirror(shifted_five) if top_dist > abs(left_dist) else shifted_five

  O = paint(cover(I, five_obj), shifted_five)
  return O
 
12.666666666666666, 9.558885, def gejddaafgbfgecdfaebdigafbdbdbbah(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)

  h_diff = center(two_obj)[1] - center(five_obj)[1]
  v_diff = center(two_obj)[0] - center(five_obj)[0]

  shift_amount = (v_diff, h_diff) if abs(v_diff) < abs(h_diff) else (v_diff, h_diff) if hmatching(five_obj, two_obj) else (0, h_diff + (-width(five_obj) - 1 if h_diff < 0 else width(two_obj) + 1))

  shifted_five = shift(five_obj, shift_amount)
  shifted_five = hmirror(shifted_five) if abs(v_diff) >= abs(h_diff) and not hmatching(five_obj, two_obj) else shifted_five
  
  O = paint(cover(I, five_obj), shifted_five)
  return O
 
14.0, 9.835933, def hgdbiibbccibefaebbigfbdaadddbecf(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)

  v_diff = uppermost(two_obj) - uppermost(five_obj) 
  h_diff = leftmost(two_obj) - leftmost(five_obj) 

  shift_amount = (v_diff, 0) if abs(v_diff) <= abs(h_diff) else (0, h_diff + (-width(five_obj) - 1 if h_diff < 0 else width(two_obj) + 1))
  
  shifted_five = shift(five_obj, shift_amount)
  shifted_five = hmirror(shifted_five) if abs(v_diff) > abs(h_diff) else shifted_five

  O = paint(cover(I, five_obj), shifted_five)
  return O
 
14.0, 11.827901, def eghciddaebaaeadgbjeddcdejjfaifac(I):
  target_color = 5
  obj = first(colorfilter(objects(I, T, F, F), target_color))
  shifted_obj = {(target_color, (i + (j != leftmost(obj)), j + (j == leftmost(obj)))) for i, j in toindices(obj)}
  return paint(cover(I, obj), shifted_obj)
 
12.0, 8.470359, def eiifeggeadfaebadjccifcdejecfgdfd(I):
  five_obj = extract(objects(I, T, F, F), matcher(color, FIVE))
  two_obj = extract(objects(I, T, F, F), matcher(color, TWO))
  target_loc = (
      uppermost(two_obj) if portrait(five_obj) else center(two_obj)[0],
      rightmost(two_obj) + TWO
  )
  return paint(cover(I, five_obj), shift(five_obj, subtract(target_loc, ulcorner(five_obj))))
 
11.0, 11.854265, def jbeahbbbcdjfecbaabfabjddhcajeajf(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  O = cover(I, five_obj)
  new_five_obj = shift(five_obj, (uppermost(two_obj) - height(five_obj) - 1 - uppermost(five_obj), centerofmass(two_obj)[1] - width(five_obj) // 2))
  O = paint(O, new_five_obj)
  return O
 
11.333333333333334, 7.6625876, def dbefhdibdeeeecjgiifijdjbajicbfid(I):
  five_indices = ofcolor(I, FIVE)
  two_center_j = centerofmass(toobject(ofcolor(I, TWO), I))[1]
  target_i = uppermost(toobject(ofcolor(I, TWO), I)) - height(toobject(five_indices, I)) - 1
  target_j = two_center_j - width(toobject(five_indices, I)) // 2
  O = I
  for i, j in five_indices:
    O = paint(cover(O, {(i, j)}), {(I[i][j], (target_i, target_j))})
    target_i += 1
  return O
 
8.333333333333334, 14.474129, def dcidihbbfeheeeggjeecgaafacejfedg(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  O = I
  for v, (i, j) in five_obj:
    O = paint(
      cover(O, {(i, j)}), 
      {(v, (uppermost(two_obj) - height(five_obj) - 1 + i - uppermost(five_obj), centerofmass(two_obj)[1] - width(five_obj) // 2))})
  return O
 
9.0, 15.43586, def cdcjdbacefheeeagieccfdffdiadeibb(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  h_shift = width(two_obj) + 1 if leftmost(five_obj) > leftmost(two_obj) else -(width(two_obj) + 1)
  v_shift = uppermost(two_obj) - uppermost(five_obj)
  shifted_five = shift(five_obj, (v_shift, h_shift))
  if leftmost(shifted_five) > leftmost(two_obj):
    shifted_five = hmirror(shifted_five)
  O = paint(cover(I, five_obj), shifted_five)
  return O
 
14.0, 9.959996, def dfeddbghafaheeaeicaccbgcaebadech(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  five_center = center(five_obj)
  two_center = center(two_obj)
  h_shift = (width(two_obj) // 2 + width(five_obj) // 2 + 1) * sign(five_center[1] - two_center[1])
  v_shift = two_center[0] - five_center[0]
  shifted_five = shift(five_obj, (v_shift, h_shift))
  O = paint(cover(I, five_obj), hmirror(shifted_five) if h_shift < 0 else shifted_five)
  return O
 
13.666666666666666, 14.016014, def ccccddaeabhdeajdaejaegcbdhhciihi(I):
  objs = objects(I, T, F, T)  # Extract all objects
  obj2 = argmax(objs, lambda o: colorcount(o, 2))  # Find the '2' object
  obj5 = argmax(objs, lambda o: colorcount(o, 5))  # Find the '5' object
  h_offset = subtract(center(obj2), center(obj5))  # Calculate horizontal offset
  v_offset = (-uppermost(obj5), 0)  # Calculate vertical offset to top
  return paint(cover(I, obj5), shift(obj5, add(h_offset, v_offset)))  # Move and paint '5' object 
 
14.333333333333334, 14.476241, def cggdfbieaagjeeacbbaggbfchhccfife(I):
  obj2 = argmax(objects(I, T, F, T), lambda o: colorcount(o, 2))  # Find '2' object
  obj5 = argmax(objects(I, T, F, T), lambda o: colorcount(o, 5))  # Find '5' object
  new_obj5 = shift(obj5, gravitate(obj5, obj2))  # Move '5' close to '2'
  return paint(cover(I, obj5), shift(new_obj5, (-uppermost(new_obj5), 0)))  # Align '5' to the top and paint
 
12.666666666666666, 20.263563, def dcedfiffibcjefbajdecbadageajfchb(I):
  obj2 = argmax(objects(I, T, F, T), lambda o: colorcount(o, 2))  # Find '2' object
  obj5 = argmax(objects(I, T, F, T), lambda o: colorcount(o, 5))  # Find '5' object
  target_pos = (uppermost(obj2) - height(obj5), center(obj2)[1] - width(obj5) // 2)  # Calculate target position
  return paint(cover(I, obj5), shift(obj5, target_pos))  # Move '5' to the target position and paint
 
14.333333333333334, 14.223939, def bceehgfcdcddehabbacdeefcdabgghdd(I):
  objs = objects(I, T, F, T)  # Extract all objects
  obj2 = argmax(objs, lambda o: colorcount(o, 2))  # Find the '2' object
  obj5 = argmax(objs, lambda o: colorcount(o, 5))  # Find the '5' object
  x_offset = center(obj2)[1] - center(obj5)[1]  # Calculate horizontal offset
  return paint(cover(I, obj5), shift(obj5, (-uppermost(obj5), x_offset)))  # Move '5' and paint
 
7.333333333333333, 16.521366, def hgbbfeeajjcbeafjihdbjfecadhbgbgb(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  target_j = centerofmass(two_obj)[1] - width(five_obj) // 2
  O = paint(
      cover(I, five_obj), 
      {(FIVE, (uppermost(two_obj) - height(five_obj) - 1, target_j + j)) 
        for FIVE, (_, j) in normalize(five_obj)})
  return O
 
7.0, 15.7703705, def dceaedgcgffeecicbdgfffbcddiefaac(I):
  five_indices = ofcolor(I, FIVE)
  two_obj = toobject(ofcolor(I, TWO), I)
  target_i = uppermost(two_obj) - height(toobject(five_indices, I)) - 1
  target_j = centerofmass(two_obj)[1] - len(five_indices) // 2
  O = I
  for i, j in five_indices:
    O = paint(cover(O, {(i, j)}), {(FIVE, (target_i, target_j))})
    target_j += 1
  return O
 
7.0, 15.605533, def dcgdbdcbcddeedihbbdeddefaaadeaea(I):
  twos = ofcolor(I, 2)
  fives = colorfilter(objects(I, T, F, T), 5)
  return paint(
    cover(I, recolor(0, ofcolor(I, 5))),
    merge(
      apply(
        lambda obj: shift(
          obj, 
          (uppermost(twos) - lowermost(obj) - 1, 
           centerofmass(twos)[1] - centerofmass(obj)[1])
        ), 
        fives
      )
    )
  )
 
7.666666666666667, 15.881214, def dbdfdgbbdbiheefcbbbebfciddcbbeci(I):
  twos = ofcolor(I, 2)
  return paint(
    cover(I, recolor(0, ofcolor(I, 5))),
    mapply(
      lambda obj: shift(
        obj,
        (uppermost(twos) - lowermost(obj) - 1,
         centerofmass(twos)[1] - centerofmass(obj)[1] + (3 if rightmost(obj) > centerofmass(twos)[1] else -3))
      ),
      colorfilter(objects(I, T, F, T), 5)
    )
  )
 
7.666666666666667, 15.772398, def ffdbdcaafjhieibficgaefdccjdhacfe(I):
  fives = colorfilter(objects(I, T, F, T), 5)
  two = first(colorfilter(objects(I, T, F, T), 2))
  two_up = uppermost(two)
  two_center_j = center(two)[1]
  shifted_fives = mapply(lambda obj: shift(obj, (two_up - uppermost(obj) - (1 if len(fives) > 1 else 0),
                                              two_center_j - center(obj)[1] + (2 if obj == last(fives) else (-2 if len(fives) > 1 else 0)))), 
                        fives)
  return paint(cover(I, ofcolor(I, 5)), shifted_fives)
 
7.666666666666667, 14.65819, def bbjhgdddijicefcfaddadaagecdfbfib(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  target_i = uppermost(two_obj) - height(five_obj) // 2 - height(five_obj) % 2
  target_j = centerofmass(two_obj)[1] - width(five_obj) // 2
  if portrait(two_obj):
    O = paint(cover(I, five_obj), shift(hmirror(five_obj), (target_i, target_j))) 
  else:
    O = paint(cover(I, five_obj), shift(five_obj, (target_i, target_j)))
  return O
 
7.666666666666667, 16.455353, def dgbbdccbdddbefahiajfdceedbcdache(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  O = cover(I, five_obj)
  for i, (v, (pi, pj)) in enumerate(sorted(five_obj, key=lambda x: x[1][0])):
    target_i = uppermost(two_obj) - height(five_obj) // 2 - height(five_obj) % 2 + i * (1 if portrait(two_obj) else -1)
    target_j = centerofmass(two_obj)[1] - width(five_obj) // 2 + pj - centerofmass(five_obj)[1]
    O = paint(O, {(v, (target_i, target_j))})
  return O
 
7.666666666666667, 14.329445, def bjafafafcfhgecgaacdffebadbfgddjg(I):
  five_obj = toobject(ofcolor(I, FIVE), I)
  two_obj = toobject(ofcolor(I, TWO), I)
  O = cover(I, five_obj)
  if portrait(two_obj):
    shifted_five = shift(hmirror(five_obj), (uppermost(two_obj) - height(five_obj) - 1, centerofmass(two_obj)[1] - width(five_obj) // 2))
  else:
    shifted_five = shift(five_obj, (uppermost(two_obj) - height(five_obj) - 1, centerofmass(two_obj)[1] - width(five_obj) // 2))
  return paint(O, shifted_five)
 
7.666666666666667, 15.704837, def ghcaabaaccdaedidbfiabjehfbedebfb(I):
  fives = colorfilter(objects(I, T, F, T), 5)
  two = first(colorfilter(objects(I, T, F, T), 2))
  two_center = center(two)
  return paint(cover(I, ofcolor(I, 5)), 
               mapply(lambda five: shift(five, (uppermost(two) - uppermost(five) - (1 if len(fives) > 1 else 0), 
                                              two_center[1] - center(five)[1] + (-2 if five == first(fives) else 2))), 
                      fives))
 
7.333333333333333, 16.821716, def bgdfjfjhibegeffjjebehfcgjfabfjfh(I):
  five_indices = ofcolor(I, FIVE)
  two_center = centerofmass(toobject(ofcolor(I, TWO), I))
  target_row = two_center[0] - 2
  O = I
  for i, j in five_indices:
    if j < two_center[1]:
      O = paint(O, {(FIVE, (target_row, two_center[1] - (two_center[1] - j)))})
    else:
      O = paint(O, {(FIVE, (target_row, two_center[1] + (j - two_center[1])))})
  O = cover(O, five_indices)
  return O
 
7.333333333333333, 16.34885, def jjaghbdbcheheejaidgjacfhibfacfbb(I):
  fives = ofcolor(I, FIVE)
  twos = ofcolor(I, TWO)
  target_row = uppermost(twos) - 2 
  left_fives = sfilter(fives, lambda loc: loc[1] < centerofmass(twos)[1])
  right_fives = sfilter(fives, lambda loc: loc[1] >= centerofmass(twos)[1])
  O = I
  for i, j in left_fives:
    O = paint(cover(O, {(i, j)}), {(FIVE, (target_row, j))})
  for i, j in right_fives:
    O = paint(cover(O, {(i, j)}), {(FIVE, (target_row, 2 * centerofmass(twos)[1] - j - 1))})
  return O
 
7.666666666666667, 13.502141, def cfhjbfdhddfgeagaijabdahccjabaffd(I):
  fives = colorfilter(objects(I, T, F, T), 5)
  two = first(colorfilter(objects(I, T, F, T), 2))
  target_up = (uppermost(two) - 1, center(two)[1] - len(fives) + 1)
  target_down = (uppermost(two) + height(two), center(two)[1] - len(fives) + 1)
  return paint(
      paint(
          cover(I, ofcolor(I, 5)),
          shift(recolor(5, {(j, 0) for j in range(len(fives))}), target_up)
      ),
      shift(recolor(5, {(j, 0) for j in range(len(fives))}), target_down)
  )
 
7.666666666666667, 15.458768, def cecjhjhedgdeejahjcjbjcaiffeefcac(I):
  five_objs = colorfilter(objects(I, T, F, T), 5)
  two_obj = toobject(ofcolor(I, 2), I)
  O = cover(I, recolor(0, ofcolor(I, 5)))
  for five_obj in five_objs:
    O = paint(O, shift(five_obj, (uppermost(two_obj) - height(five_obj) - 1 - uppermost(five_obj), 
                                   leftmost(two_obj) - width(five_obj) - 1 - leftmost(five_obj))))
  return O
 
7.666666666666667, 15.984902, def edhghgaejbeaefchjgcfahdgcadaheee(I):
  five_objs = colorfilter(objects(I, T, F, T), 5)
  two_obj = toobject(ofcolor(I, 2), I)
  O = I
  for five_obj in five_objs:
    O = paint(cover(O, five_obj), shift(five_obj, subtract(ulcorner(outbox(toindices(two_obj))), 
                                                                 ulcorner(box(toindices(five_obj))))))
  return O
 
19.333333333333332, 9.182363, def dcdbiadbgcfhedediddaadadeadchbeg(I):
  fives = colorfilter(objects(I, T, F, T), 5)
  two = first(colorfilter(objects(I, T, F, T), 2))
  center_two = center(two)
  return paint(
      cover(I, ofcolor(I, 5)),
      merge((
          shift(recolor(5, {(i, 0) for i in range(height(two))}), (center_two[0] - height(two) // 2, center_two[1] - 1)),
          shift(recolor(5, {(i, 0) for i in range(height(two))}), (center_two[0] - height(two) // 2, center_two[1] + 1)),
          shift(recolor(5, {(0, j) for j in range(width(two))}), (center_two[0] - 1, center_two[1] - width(two) // 2))
      ))
  )
 
7.666666666666667, 14.867835, def jggccecddaiiedhdjhbbadefhadbgdae(I):
  two_obj = toobject(ofcolor(I, 2), I)
  five_objs = colorfilter(objects(I, T, F, T), 5)
  
  O = I
  for five_obj in five_objs:
    O = cover(O, five_obj)
    target_center = center(two_obj)
    five_center = center(five_obj)
    if uppermost(five_obj) < uppermost(two_obj):
      O = paint(O, shift(five_obj, subtract(target_center, five_center)))  
    else:
      O = paint(O, shift(five_obj, subtract((target_center[0] + 1, target_center[1]), five_center)))
  return O
 
7.666666666666667, 14.329445, def aaaejediacjbedffjicddeadfafgefec(I):
  two_indices = ofcolor(I, 2)
  five_objs = colorfilter(objects(I, T, F, T), 5)

  O = I
  for five_obj in five_objs:
    O = cover(O, five_obj)
    if uppermost(five_obj) < uppermost(two_indices):
      target_ul = subtract(ulcorner(two_indices), (height(five_obj) + 1, (width(two_indices) - width(five_obj)) // 2))
      O = paint(O, shift(five_obj, subtract(target_ul, ulcorner(five_obj)))) 
    else:
      target_ll = add(llcorner(two_indices), (-1, (width(two_indices) - width(five_obj)) // 2))
      O = paint(O, shift(five_obj, subtract(target_ll, llcorner(five_obj)))) 
  return O
 
7.666666666666667, 15.520907, def fiacabbbbfbgeajdiiddeghdbecbaajf(I):
  two_obj = toobject(ofcolor(I, 2), I)
  five_objs = colorfilter(objects(I, T, F, T), 5)
  center_two = center(two_obj)

  O = I
  for five_obj in five_objs:
    O = cover(O, five_obj)
    rel_pos = position(five_obj, two_obj)
    if rel_pos[0] < 0: # five_obj is above two_obj
      target = (center_two[0] - height(five_obj), center_two[1] - (width(five_obj) // 2))
    else:
      target = (center_two[0] + 1, center_two[1] - (width(five_obj) // 2))
    O = paint(O, shift(five_obj, subtract(target, ulcorner(five_obj))))
  return O
 
7.0, 13.71348, def fcajfefedajaeehcaaaehbddjeacbffh(I):
  two_obj = toobject(ofcolor(I, 2), I)
  five_objs = colorfilter(objects(I, T, F, T), 5)

  O = I
  for five_obj in five_objs:
    O = cover(O, five_obj)
    target_i = uppermost(two_obj) - height(five_obj) - 1 if uppermost(five_obj) < uppermost(two_obj) else lowermost(two_obj) + 1
    target_j = leftmost(two_obj) + (width(two_obj) - width(five_obj)) // 2
    O = paint(O, shift(five_obj, (target_i - uppermost(five_obj), target_j - leftmost(five_obj))))
  return O
 
13.0, 14.237782, def bfaeeccgfcacebbeaehibffddahjdcdf(I):
  two = first(colorfilter(objects(I, T, F, T), 2))
  h = height(two)
  w = width(two)
  c = center(two)
  vline_5 = shift(recolor(5, {(i, 0) for i in range(h)}), (c[0] - h // 2, c[1] + 2))
  hline_5 = shift(recolor(5, {(0, j) for j in range(w)}), (c[0] - 2, c[1] - w // 2))
  corner_5s = merge([
      shift(recolor(5, {(0, 0)}), (c[0] - 1, c[1] - 1)),
      shift(recolor(5, {(0, 0)}), (c[0] - 1, c[1] + 1))
  ])
  return paint(cover(I, ofcolor(I, 5)), merge([vline_5, hline_5, corner_5s]))
 
14.333333333333334, 16.585669, def ccgaadbbaiaeeddgbiededbcbgafceff(I):
  two = first(colorfilter(objects(I, T, F, T), 2))
  h, w = shape(two)
  ci, cj = center(two)
  five = recolor(5, {(0, 0)})
  pattern = merge([
      shift(five, (ci - 2, j)) for j in range(cj - w // 2, cj + w // 2 + 1)
  ] + [
      shift(five, (i, cj + 2)) for i in range(ci - h // 2, ci + h // 2 + 1)
  ] + [
      shift(five, (ci - 1, cj - 1)),
      shift(five, (ci - 1, cj + 1))
  ])
  return paint(cover(I, ofcolor(I, 5)), pattern)
 
7.666666666666667, 15.518685, def hegfdefbcacdeeadbgbcaeeafccaebca(I):
  two_obj = toobject(ofcolor(I, 2), I)
  five_objs = colorfilter(objects(I, T, F, T), 5)
  O = I
  for five_obj in five_objs:
    O = cover(O, five_obj)
    target = subtract(ulcorner(outbox(toindices(two_obj))), (height(five_obj), width(five_obj))) if uppermost(five_obj) < uppermost(two_obj) else lrcorner(outbox(toindices(two_obj)))
    O = paint(O, shift(five_obj, subtract(target, ulcorner(five_obj))))
  return O
 
7.333333333333333, 15.501975, def figgcagedhibeacfibdcfcadggbfifgj(I):
  two_obj = toobject(ofcolor(I, 2), I)
  five_objs = colorfilter(objects(I, T, F, T), 5)
  O = I
  for i, five_obj in enumerate(five_objs):
    O = cover(O, five_obj)
    target_i = uppermost(two_obj) - (i + 1) * height(five_obj) - i - 1 if uppermost(five_obj) < uppermost(two_obj) else lowermost(two_obj) + (i + 1) * height(five_obj) + i + 1
    target_j = leftmost(two_obj) + (width(two_obj) - width(five_obj)) // 2
    O = paint(O, shift(five_obj, (target_i - uppermost(five_obj), target_j - leftmost(five_obj))))
  return O
 
9.0, 15.388785, def adgdfcadbfedecfgjiiabjhaaadgfaga(I):
  twos = toobject(ofcolor(I, 2), I)
  return paint(
    cover(I, recolor(0, ofcolor(I, 5))),
    mapply(
      lambda obj: merge(frozenset({
        shift(obj, (uppermost(twos) - height(obj), leftmost(twos) - width(obj) + 1)),
        shift(obj, (uppermost(twos) - height(obj), rightmost(twos))),
        shift(obj, (uppermost(twos) - height(obj), (leftmost(twos) + rightmost(twos)) // 2 - width(obj) // 2))
      })),
      colorfilter(objects(I, T, F, T), 5)
    )
  )
 
8.333333333333334, 12.117729, def ajeadadffbebeffgifdaeacbhbhffeab(I):
  two_center = centerofmass(toobject(ofcolor(I, 2), I))
  return paint(
    cover(I, recolor(0, ofcolor(I, 5))),
    mapply(
      lambda obj: merge(frozenset({
        shift(obj, (two_center[0] - height(obj), two_center[1] - width(obj) - width(toobject(ofcolor(I, 2), I)) // 2 + 1)),
        shift(obj, (two_center[0] - height(obj), two_center[1] + width(toobject(ofcolor(I, 2), I)) // 2)),
        shift(obj, (two_center[0] - height(obj), two_center[1] - width(obj) // 2))
      })),
      colorfilter(objects(I, T, F, T), 5)
    )
  )
 
7.666666666666667, 14.65819, def bbghbcdiaehfebbaacbafhcajaaebacd(I):
  two_obj = toobject(ofcolor(I, 2), I)
  five_objs = colorfilter(objects(I, T, F, T), 5)
  O = I
  for five_obj in five_objs:
    O = cover(O, five_obj)
    target_j = leftmost(two_obj) + (width(two_obj) - width(five_obj)) // 2
    if uppermost(five_obj) < uppermost(two_obj):
      target_i = uppermost(two_obj) - height(five_obj)
    else:
      target_i = lowermost(two_obj) 
    O = paint(O, shift(five_obj, (target_i - uppermost(five_obj), target_j - leftmost(five_obj))))
  return O
 
7.666666666666667, 15.213182, def eaededjadfcfegaaahffbcgegijhicfa(I):
  two_center = center(ofcolor(I, 2))
  return paint(cover(I, recolor(0, ofcolor(I, 5))), 
               mapply(lambda obj: shift(obj, (two_center[0] - center(obj)[0], two_center[1] - center(obj)[1])), 
                      colorfilter(objects(I, T, F, T), 5)))
 
8.333333333333334, 14.289713, def ddiaecbggfbbefchijcbdddihcbcdfcg(I):
  two = first(colorfilter(objects(I, T, F, T), 2))  # Find the '2' object
  fives = colorfilter(objects(I, T, F, T), 5)  # Find all '5' objects
  c = center(two)  # Get the center of the '2' object

  def place_five(five):
    offset = (- uppermost(five) + c[0],  # Vertical alignment with '2'
              c[1] - leftmost(five) - width(five) if leftmost(five) < c[1] 
              else c[1] - leftmost(five) + width(two))  # Horizontal shift 
    return shift(five, offset)  

  new_fives = mapply(lambda five: combine(five, place_five(five)), fives) # Duplicate and place
  return paint(cover(I, ofcolor(I, 5)), new_fives)  # Paint on the grid
 
7.666666666666667, 14.657739, def deceeececacbedajjgddaebbecebgfhe(I):
  two = first(colorfilter(objects(I, T, F, T), 2))
  fives = colorfilter(objects(I, T, F, T), 5)
  c = center(two)
  
  def reposition(five):
    offset = (-uppermost(five) + c[0], 
               c[1] - leftmost(five) - width(five) 
               if leftmost(five) < c[1] 
               else c[1] - leftmost(five) + width(two))
    return shift(five, offset)
  
  pattern = merge(apply(reposition, fives))
  return paint(cover(I, ofcolor(I, 5)), pattern)
 
7.333333333333333, 14.674039, def ieidcjibhfifecdijchicfheebeidbjf(I):
  two = first(colorfilter(objects(I, T, F, T), 2))
  fives = colorfilter(objects(I, T, F, T), 5)
  target_up = (uppermost(two), center(two)[1] - len(fives) // 2) 
  target_down = (lowermost(two) + 1, center(two)[1] - len(fives) // 2)
  
  return paint(
      paint(
          cover(I, ofcolor(I, 5)),
          shift(recolor(5, {(j, 0) for j in range(len(fives) // 2)}), target_up)
      ),
      shift(recolor(5, {(j, 0) for j in range(len(fives) // 2, len(fives))}), target_down)
  )
 
9.0, 13.314504, def aehbaaagjjeaebabjaidjgdfiicdbfec(I):
  twos_indices = ofcolor(I, 2)  # Get indices of '2's
  five = next((obj for obj in objects(I, T, F, T) if color(obj) == 5), frozenset()) # Safely extract '5' object
  target_row = uppermost(twos_indices) - height(five) - 1 
  left_bound = leftmost(twos_indices)
  right_bound = rightmost(twos_indices)

  return paint(
      cover(I, five),
      merge(frozenset(
          shift(five, (target_row, left_bound + i * (right_bound - left_bound) // 2 - width(five) // 2)) 
          for i in range(3)
      ))
  )
 
