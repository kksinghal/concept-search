202.66666666666666, 20.178358, def feeiegbdbgaaeedaajfgaafjbfjgabba(I):
  # Identify the least frequent color (target object)
  target_color = leastcolor(I)
  
  # Replace the target color with background color
  I = replace(I, target_color, mostcolor(I))
  
  # Find locations of the other color (destination object)
  dest_indices = ofcolor(I, other(palette(I), target_color))
  
  # Find indices adjacent to the destination object
  adjacent_indices = mapply(dneighbors, dest_indices)
  
  # Filter for adjacent indices that originally contained the target color
  fill_indices = intersection(adjacent_indices, ofcolor(I, mostcolor(I)))
  
  # Fill the filtered indices with the target color
  O = fill(I, target_color, fill_indices)
  return O
 
15.333333333333334, 11.034042, def bdedacdfchdeebccbcgabdefefacbbhd(I):
  # Find the object with the smallest size 
  target_obj = argmin(objects(I, False, False, False), size)
  
  # Find the center of mass of the target object
  target_center = centerofmass(target_obj)
  
  # Find the center of mass of the entire grid
  grid_center = centerofmass(asindices(I))
  
  # Calculate the offset to move the target object to the grid's center
  offset = subtract(grid_center, target_center)
  
  # Move the object
  O = paint(cover(I, target_obj), shift(target_obj, offset))
  return O
 
15.333333333333334, 10.236124, def gfjbiadegbffecgcabdbefiaaadadjca(I):
  # Find the object with the least number of cells
  target_obj = argmin(objects(I, True, False, False), size)
  
  # Remove the target object from the grid
  cleared_grid = cover(I, target_obj)
  
  # Find the remaining object 
  remaining_obj = toobject(ofcolor(cleared_grid, other(palette(cleared_grid), mostcolor(cleared_grid))), cleared_grid)
  
  # Calculate the offset to move the target object to the top-left corner of the remaining object
  offset = subtract(ulcorner(remaining_obj), ulcorner(target_obj))
  
  # Move the object
  O = paint(cleared_grid, shift(target_obj, offset))
  return O
 
15.0, 11.097146, def dfgcibdcahhiegjaicieadcdbdadcaah(I):
  obj2 = first(objects(I, True, False, True))
  obj5 = first(colorfilter(objects(I, True, False, True), 5))
  center2 = center(obj2)
  upper2 = (uppermost(obj2), center2[1])
  left2 = (center2[0], leftmost(obj2))
  target = branch(portrait(obj2), upper2, left2)
  O = paint(cover(I, obj5), shift(obj5, subtract(target, center(obj5))))
  return O
 
15.0, 10.645644, def cehibejhbbaeecbejjcejdefejgffifd(I):
  obj2 = first(objects(I, True, False, True))
  obj5 = first(colorfilter(objects(I, True, False, True), 5))
  center2 = center(obj2)
  offset = branch(portrait(obj2), (NEG_ONE, 0), (0, NEG_ONE))
  target = add(center2, offset)
  O = paint(cover(I, obj5), shift(obj5, subtract(target, center(obj5))))
  return O
 
9.0, 9.71244, def ficbcjcefeciebeebhidbdaebcdhabcd(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  target = branch(portrait(obj2), ulcorner(obj2), (ulcorner(obj2)[0], center(obj2)[1]))
  O = paint(cover(I, obj5), shift(obj5, subtract(target, ulcorner(obj5))))
  return O
 
14.333333333333334, 12.620816, def cafcedfeehbiedehjhhgccabeiddahch(I):
  obj2 = first(objects(I, True, False, True))
  obj5 = first(colorfilter(objects(I, True, False, True), 5))
  h, w = shape(obj2)
  offset = (-h // 2 - 1, -w // 2) if portrait(obj2) else (-h // 2, -w // 2 - 1)
  target = add(centerofmass(obj2), offset)
  O = paint(cover(I, obj5), shift(obj5, subtract(target, centerofmass(obj5))))
  return O
 
14.333333333333334, 10.664839, def iaaaciaddhifeigibggicdagcfeadbgb(I):
  obj2 = first(objects(I, True, False, True))
  obj5 = first(colorfilter(objects(I, True, False, True), 5))
  target = branch(
      portrait(obj2), 
      add(ulcorner(obj2), (NEG_ONE, 0)), 
      add(ulcorner(obj2), (0, NEG_ONE))
  )
  O = paint(cover(I, obj5), shift(obj5, subtract(target, ulcorner(obj5))))
  return O
 
12.666666666666666, 7.756611, def baidefaedciheeidjbaeafcaifjbabff(I):
  objs = objects(I, T, F, T)
  obj_5 = first(filter(lambda obj: color(obj) == 5, objs))
  grid_center = divide(shape(I), 2)
  obj_center = divide(astuple(lowermost(obj_5) + uppermost(obj_5), rightmost(obj_5) + leftmost(obj_5)), 2) 
  offset = subtract(grid_center, obj_center)
  O = paint(cover(I, obj_5), shift(obj_5, offset))
  return O
 
13.333333333333334, 8.14608, def fecifcbfddggeedbagdageijdfehfjjb(I):
  fives = next(obj for obj in objects(I, T, F, T) if color(obj) == 5)
  grid_midpoint = divide(shape(I), 2)
  object_midpoint = center(fives)
  delta_x, delta_y = subtract(grid_midpoint, object_midpoint)
  shifted_fives = shift(fives, (delta_x, delta_y))
  O = paint(cover(I, fives), shifted_fives)
  return O
 
15.333333333333334, 12.570592, def deefhegbaaibeafjjcbbdeecddfdecee(I):
  # Identify the object made of '5's
  obj_5 = first(colorfilter(objects(I, T, T, T), 5))
  # Identify the object made of '2's
  obj_2 = first(colorfilter(objects(I, T, T, T), 2))
  # Calculate the vertical offset to align '5's below '2's
  offset = (lowermost(obj_2) - uppermost(obj_5) + 1, 0)
  # Move the '5' object
  O = move(I, obj_5, offset)
  return O
 
15.333333333333334, 9.539345, def eagghgcjehebedcdacdgbihibhdabedj(I):
  # Extract objects
  objs = objects(I, T, T, T)
  # Find the '5' object
  obj_5 = first(filter(lambda obj: color(obj) == 5, objs))
  # Find the '2' object
  obj_2 = first(filter(lambda obj: color(obj) == 2, objs))
  # Calculate the center-to-center offset
  offset = subtract(centerofmass(obj_2), centerofmass(obj_5))
  # Move the '5' object
  O = move(I, obj_5, offset)
  return O
 
15.333333333333334, 11.902902, def babeabbiecjcedfcbhhiefeeceajbaag(I):
  # Isolate objects
  objs = objects(I, T, T, T)
  # Identify '5' object
  obj_5 = extract(objs, lambda obj: color(obj) == 5)
  # Identify '2' object
  obj_2 = extract(objs, lambda obj: color(obj) == 2)
  # Determine relative position
  rel_pos = position(obj_5, obj_2)
  # Define movement logic based on relative position
  if rel_pos == (0, 1):
    offset = (lowermost(obj_2) - uppermost(obj_5) + 1, 0)
  elif rel_pos == (-1, 1):
    offset = (lowermost(obj_2) - uppermost(obj_5), leftmost(obj_2) - leftmost(obj_5))
  else:
    offset = (0, 0)  # No movement
  # Move the '5' object
  O = move(I, obj_5, offset) 
  return O
 
12.666666666666666, 12.837793, def dgbaabbffaffeiddjgffcaegeadiffdg(I):
  # Locate '5' object 
  obj_5 = first(colorfilter(objects(I, T, T, T), 5)) 
  # Locate '2' object
  obj_2 = first(colorfilter(objects(I, T, T, T), 2))
  # Calculate the gravitation vector for movement
  offset = gravitate(toindices(obj_5), toindices(obj_2))
  # Move the '5' object
  O = move(I, obj_5, offset)
  return O
 
17.666666666666668, 9.933402, def ijbcibfaahdcefejafebejacifhbjebg(I):
  # Isolate objects
  objs = objects(I, T, T, T)
  # Locate '5' object
  obj_5 = extract(objs, lambda obj: color(obj) == 5)
  # Locate '2' object
  obj_2 = extract(objs, lambda obj: color(obj) == 2)
  # Calculate movement direction
  direction = sign(subtract(centerofmass(obj_2), centerofmass(obj_5))) 
  # Move '5' object iteratively until adjacent to '2' object
  O = I
  while not adjacent(obj_5, obj_2):
    obj_5 = shift(obj_5, direction)
    O = move(I, obj_5, direction)
  return O 
 
15.333333333333334, 9.776654, def bfdbdhghgdfaeebaadgbhaegeeddifae(I):
  # Find the smallest object
  small_obj = argmin(objects(I, True, False, True), size)
  small_color = color(small_obj)
  
  # Find the other object
  other_obj = argmin(objects(I, True, False, False), lambda obj: size(obj) if color(obj) != small_color else float('inf'))

  # Calculate offset to move the small object above the other object
  offset = subtract(ulcorner(other_obj), (height(small_obj), 0))
  offset = subtract(offset, ulcorner(small_obj))

  # Move the object 
  O = paint(cover(I, small_obj), shift(small_obj, offset))
  return O
 
15.333333333333334, 11.767057, def edfjebebdbdbefeficdificadhedcjib(I):
  # Identify the smallest object (excluding background)
  small_obj = argmin(objects(I, True, False, True), size)
  small_color = color(small_obj)

  # Remove the smallest object from the grid
  I = cover(I, small_obj)

  # Find the other object
  other_obj = toobject(ofcolor(I, other(palette(I), mostcolor(I))), I)

  # Calculate the position to move the smallest object to
  new_position = subtract(ulcorner(other_obj), (height(small_obj), 0))

  # Move the object to the new position
  O = paint(I, shift(small_obj, subtract(new_position, ulcorner(small_obj))))
  return O
 
14.0, 11.442498, def affhedhbeaeeeabdiggjbadffbdgdifb(I):
  # Find the smallest object (excluding background)
  small_obj = argmin(objects(I, True, False, True), size)

  # Find the other object (excluding background)
  other_obj = argmin(objects(I, True, False, False), lambda obj: size(obj) if obj != small_obj else float('inf'))

  # Calculate the offset to move the smallest object above the other object
  offset = gravitate(small_obj, shift(other_obj, (height(small_obj), 0)))

  # Move the object and paint it on the canvas
  O = paint(cover(I, small_obj), shift(small_obj, offset))
  return O
 
16.666666666666668, 8.854385, def ebcgifdbcfejegjeafihbdaacdadbheb(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  target = branch(portrait(obj2), ulcorner(obj2), (ulcorner(obj2)[0], center(obj2)[1]))
  O = paint(I, shift(obj5, subtract(target, ulcorner(obj5))))
  return O
 
15.333333333333334, 9.719706, def gbhadfjdebeaeefhibejfcdbdahccabb(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  grid_height = shape(I)[0]
  obj_height = height(obj_5)
  target_row = (grid_height - obj_height) // 2
  offset = (target_row - uppermost(obj_5), 0)
  return paint(cover(I, obj_5), shift(obj_5, offset))
 
14.666666666666666, 10.071004, def effbjaicfejeeaehjabbhiheddfaafai(I):
  obj_5 = next((obj for obj in objects(I, T, F, T) if color(obj) == 5), None)
  if obj_5:
    grid_center = divide(shape(I)[0], 2)
    obj_center = (uppermost(obj_5) + height(obj_5) // 2)
    offset = (grid_center - obj_center, 0)
    return paint(cover(I, obj_5), shift(obj_5, offset))
  return I
 
15.333333333333334, 9.629375, def gadeadehhbjdeajfadehcfeicdidfiaf(I):
  # Locate the '5' object
  obj_5 = first(colorfilter(objects(I, T, T, T), 5))
  # Locate the '2' object
  obj_2 = first(colorfilter(objects(I, T, T, T), 2))
  # Calculate the center of mass of the '2' object
  center_2 = centerofmass(toindices(obj_2))
  # Calculate the offset to move the '5' object to the center of the '2' object
  offset = subtract(center_2, centerofmass(toindices(obj_5)))
  # Move the '5' object
  O = move(I, obj_5, offset)
  return O
 
13.333333333333334, 10.459986, def jgheggcbdbaaejfebddcibceacdadgff(I):
  # Locate the '5' object
  obj_5 = first(colorfilter(objects(I, T, T, T), 5))
  # Locate the '2' object
  obj_2 = first(colorfilter(objects(I, T, T, T), 2))
  # Calculate the upper-left corner of the bounding box of the '2' object
  corner_2 = ulcorner(toindices(obj_2))
  # Calculate the dimensions of the bounding box of the '2' object
  dims_2 = shape(obj_2)
  # Calculate the center of the bounding box of the '2' object
  center_2 = add(corner_2, divide(dims_2, 2))
  # Calculate the offset to move the '5' object to the center of the '2' object's bounding box
  offset = subtract(center_2, centerofmass(toindices(obj_5)))
  # Move the '5' object
  O = move(I, obj_5, offset)
  return O
 
15.333333333333334, 9.834979, def jicjacfhcabgebdeiahdgjajdbeeadah(I):
    f = lambda x: color(x) != FIVE
    target = first(sfilter(objects(I, T, F, F), f))
    five_obj = first(sfilter(objects(I, T, F, F), compose(flip, f)))
    tc = center(toindices(target))
    fc = center(toindices(five_obj))
    offset = (tc[0] - fc[0], tc[1] - fc[1])
    O = paint(cover(I, five_obj), shift(five_obj, offset))
    return O
 
11.0, 14.524822, def djccbdeeajideicfjaefbfdfdfbadfjf(I):
  obj2 = toobject(ofcolor(I, 2), I)  
  obj5 = toobject(ofcolor(I, 5), I) 
  target_x = branch(portrait(obj2), ulcorner(obj2)[0], center(obj2)[0]) 
  target_y = branch(portrait(obj2), center(obj2)[1], ulcorner(obj2)[1]) 
  target = (target_x, target_y)
  return paint(cover(I, obj5), shift(obj5, subtract(target, ulcorner(obj5))))
 
11.0, 12.375007, def fefcdhefdhbbefibjicjajffacdgiacf(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  offset = (
      (lambda x: x[0] if portrait(obj2) else x[1])(subtract(center(obj2), ulcorner(obj2))), 
      (lambda x: x[1] if portrait(obj2) else x[0])(subtract(center(obj2), ulcorner(obj2))) 
  )
  return paint(cover(I, obj5), shift(obj5, subtract(add(ulcorner(obj2), offset), ulcorner(obj5)))) 
 
9.666666666666666, 10.663817, def bfcifjbfhbabefbbibfdfgdbaaibcdce(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  target = (lambda a, b: (a[0], b[1]) if portrait(obj2) else (b[0], a[0]))(ulcorner(obj2), center(obj2)) 
  return paint(cover(I, obj5), shift(obj5, subtract(target, ulcorner(obj5))))
 
11.0, 11.571239, def bdbcbchbehegeaefbgbceacadfahcedj(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  hdiff = halve(subtract(center(obj2)[0], ulcorner(obj2)[0]))
  vdiff = halve(subtract(center(obj2)[1], ulcorner(obj2)[1]))
  target = branch(portrait(obj2), add(ulcorner(obj2), (0, vdiff)), add(ulcorner(obj2), (hdiff, 0))) 
  return paint(cover(I, obj5), shift(obj5, subtract(target, ulcorner(obj5)))) 
 
19.666666666666668, 12.208119, def jaagejcfgdheebdcbhdajfacedbiegba(I):
    five_indices = ofcolor(I, 5)
    grid_center = center(asindices(I))
    centered_indices = shift(five_indices, subtract(grid_center, centerofmass(five_indices)))
    O = fill(I, 5, centered_indices)
    return O
 
15.333333333333334, 12.186119, def idjbcihfecafeidfbeechcedebagabfc(I):
  fives = colorfilter(objects(I, True, False, True), FIVE)  # Find '5' objects
  center_i, center_j = center(asindices(I))  # Calculate grid center
  h, w = shape(I)  # Get grid dimensions

  moved_fives = frozenset()
  for obj in fives:
    obj_center_i, obj_center_j = center(toindices(obj))  # Get object's center
    if abs(obj_center_i - center_i) >= abs(obj_center_j - center_j):
      offset = (max(-1, min(1, center_i - obj_center_i)), 0)  # Calculate vertical offset
    else:
      offset = (0, max(-1, min(1, center_j - obj_center_j)))  # Calculate horizontal offset
    moved_fives = moved_fives.union(frozenset({shift(obj, offset)}))

  O = paint(cover(I, merge(fives)), merge(moved_fives))  # Move the objects
  return O
 
5.666666666666667, 4.591575, def bbfccddfahfiedcdbhbcffejfbdejdce(I):
  fives = colorfilter(objects(I, True, False, True), FIVE)  # Find '5' objects
  center_point = center(asindices(I))  # Calculate grid center
  moved_fives = frozenset()

  for obj in fives:
    offset = gravitate(toindices(obj), {center_point})  # Calculate offset using gravitate
    moved_obj = shift(obj, offset)
    moved_fives = moved_fives.union(frozenset({moved_obj}))

  O = paint(cover(I, merge(fives)), merge(moved_fives))  # Move the objects
  return O
 
15.333333333333334, 11.888461, def cahbeehifbjfecfhbeefcbibiediidfg(I):
    fives = colorfilter(objects(I, True, False, True), FIVE) # Find objects with color 5
    center_point = center(asindices(I)) # Calculate the center point of the grid

    moved_objects = frozenset()
    for obj in fives:
        obj_indices = toindices(obj)
        closest_point = min(obj_indices, key=lambda x: abs(x[0] - center_point[0]) + abs(x[1] - center_point[1]))
        offset = (
            max(-1, min(1, center_point[0] - closest_point[0])),
            max(-1, min(1, center_point[1] - closest_point[1]))
        )
        moved_objects = moved_objects.union(frozenset({shift(obj, offset)}))

    O = paint(cover(I, merge(fives)), merge(moved_objects)) # Paint the moved objects back onto the grid
    return O
 
15.333333333333334, 9.696111, def feiahgefiieceaificdeafdibjcbecac(I):
  # Locate '5' object 
  obj_5 = first(colorfilter(objects(I, T, T, T), 5)) 
  # Locate '2' object
  obj_2 = first(colorfilter(objects(I, T, T, T), 2))
  # Calculate bounding boxes
  box_5 = backdrop(toindices(obj_5))
  box_2 = backdrop(toindices(obj_2))
  # Calculate centers of bounding boxes
  center_5 = center(box_5)
  center_2 = center(box_2)
  # Calculate offset
  offset = subtract(center_2, center_5)
  # Move the '5' object
  O = move(I, obj_5, offset)
  return O
 
14.0, 11.891012, def hdbeadjbhhihedhabbifbjfghigbbdbi(I):
  # Locate '5' object 
  obj_5 = first(colorfilter(objects(I, T, T, T), 5)) 
  # Locate '2' object
  obj_2 = first(colorfilter(objects(I, T, T, T), 2))
  # Calculate offset using gravitate
  offset = gravitate(toindices(obj_5), toindices(obj_2))
  # Adjust position based on matching rows/columns
  if hmatching(obj_5, obj_2):
    offset = (offset[0] + 1, offset[1]) 
  if vmatching(obj_5, obj_2):
    offset = (offset[0], offset[1] + 1)
  # Move the '5' object
  O = move(I, obj_5, offset)
  return O
 
15.333333333333334, 9.842984, def ahiagiihbdjcebedbbabhbiaacaefhci(I):
  # Locate '5' object 
  obj_5 = first(colorfilter(objects(I, T, T, T), 5)) 
  # Locate '2' object
  obj_2 = first(colorfilter(objects(I, T, T, T), 2))
  # Calculate center of mass of '2' object
  center_2 = centerofmass(toindices(obj_2))
  # Calculate height and width of '5' object
  h5, w5 = shape(obj_5)
  # Calculate offset with adjustments based on object sizes
  offset = subtract(center_2, (centerofmass(toindices(obj_5))[0] + h5 // 2 - 1, centerofmass(toindices(obj_5))[1] - w5 // 2 + 1))
  # Move the '5' object
  O = move(I, obj_5, offset)
  return O
 
15.333333333333334, 8.872835, def ggeabijihgdgecheahdgeddfcbeacegc(I):
  # Find the '5' object
  five_obj = next(filter(lambda obj: color(obj) == FIVE, objects(I, T, F, F)))
  # Find the object formed by replacing '5' with '0' 
  target_obj = objects(replace(I, FIVE, ZERO), T, F, F)
  # Find the target object's center of mass
  target_center = centerofmass(next(iter(target_obj))) 
  # Calculate the offset
  offset = subtract(target_center, centerofmass(five_obj))
  # Move the '5' object
  O = paint(cover(I, five_obj), shift(five_obj, offset)) 
  return O
 
15.333333333333334, 8.932023, def aaedfcbjaejcehaiaccjdefeififaefb(I):
  # Replace '5' with '0' temporarily
  temp_grid = replace(I, FIVE, ZERO) 
  # Find the target object and its center
  target_obj = objects(temp_grid, T, F, F)
  target_center = centerofmass(next(iter(target_obj))) 
  # Find the '5' object
  five_obj = objects(I, T, F, F) - target_obj 
  # Calculate the offset
  offset = subtract(target_center, centerofmass(next(iter(five_obj)))) 
  # Move the '5' object
  O = paint(cover(I, next(iter(five_obj))), shift(next(iter(five_obj)), offset)) 
  return O
 
15.333333333333334, 9.659786, def ajfdbhfgdfihefecidejidchfcfdbeib(I):
  # Find all objects in the grid
  all_objs = objects(I, T, F, F) 
  # Find the '5' object
  five_obj = next(filter(lambda obj: color(obj) == FIVE, all_objs))
  # Replace '5' with '0' and find target object
  target_obj = next(filter(lambda obj: color(obj) != ZERO, objects(replace(I, FIVE, ZERO), T, F, F))) 
  # Calculate the offset
  offset = subtract(centerofmass(target_obj), centerofmass(five_obj)) 
  # Move the '5' object
  O = paint(cover(I, five_obj), shift(five_obj, offset)) 
  return O
 
11.333333333333334, 13.079281, def aibjecfaaacieebebciadijcbabaeafb(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  target_j = center(obj2)[1]  
  target_i = uppermost(obj2) - height(obj5) 
  target = (target_i, target_j)
  O = paint(cover(I, obj5), shift(obj5, subtract(target, ulcorner(obj5))))
  return O
 
11.333333333333334, 13.525966, def hbcidbcffcaaefcbieifbaeafccdfebd(I):
  obj2 = toindices(ofcolor(I, 2))
  obj5 = toobject(ofcolor(I, 5), I)
  target_i = minimum({i for i, j in obj2}) - height(obj5)
  target_j = valmax(obj2, lambda x: x[1]) // 2 + valmin(obj2, lambda x: x[1]) // 2 
  O = paint(cover(I, obj5), shift(obj5, (target_i-uppermost(obj5), target_j - leftmost(obj5))))
  return O
 
11.333333333333334, 13.452005, def aeeaedeagbaeegbgbdbjaifbahijaffe(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  center2 = centerofmass(obj2)
  return paint(cover(I, obj5), shift(obj5, (uppermost(obj2)-height(obj5)-uppermost(obj5), center2[1]-leftmost(obj5))))
 
13.333333333333334, 10.142688, def adjadddihedaecjhjbeadbafbgahchia(I):
  fives = first(colorfilter(objects(I, T, F, T), 5))
  twos = first(colorfilter(objects(I, T, F, T), 2))
  target_i = uppermost(twos) - size(fives)//2 + (size(fives)+1)%2
  offset = (target_i - uppermost(fives), 0)
  O = paint(cover(I, fives), shift(fives, offset))
  return O
 
15.333333333333334, 10.234349, def fhheeacedaedecdaabbjjcefihhbefai(I):
  fives = next(obj for obj in objects(I, T, F, T) if color(obj) == 5)
  two_upper = uppermost(next(obj for obj in objects(I, T, F, T) if color(obj) == 2))
  five_center_i = (uppermost(fives) + lowermost(fives)) // 2
  offset = (two_upper - five_center_i, 0)
  O = paint(cover(I, fives), shift(fives, offset))
  return O
 
15.333333333333334, 10.240089, def fcacbgiccfgiefegbiejhfciggafhbdd(I):
  fives = next((obj for obj in objects(I, T, F, T) if color(obj) == 5), None)
  target_row = uppermost(next((obj for obj in objects(I, T, F, T) if color(obj) == 2), None))
  offset_i = target_row - (uppermost(fives) + len(fives) // 2) + (len(fives) + 1) % 2 
  shifted_fives = shift(fives, (offset_i, 0))
  O = paint(cover(I, fives), shifted_fives)
  return O
 
20.0, 12.536409, def edgfiaabjcehebcgadagbecdfhiadcfi(I):
  objs = objects(I, True, False, True)
  center_i, center_j = divmod(size(I), 2)  
  
  def shift_to_center(obj):
    if color(obj) != FIVE:
      return obj
    obj_indices = toindices(obj)
    offset = gravitate(obj_indices, {center(obj_indices)})
    return shift(obj, offset)

  O = paint(I, merge(apply(shift_to_center, objs)))
  return O
 
11.333333333333334, 15.47002, def hfbieheebdjieabbbfiehaahccfcjdfh(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  target_j = center(obj2)[1]
  target_i = branch(uppermost(obj5) < uppermost(obj2), 
                   uppermost(obj2) - height(obj5) - 1,
                   branch(uppermost(obj5) == uppermost(obj2), uppermost(obj2), 
                         lowermost(obj2) + 1)) 
  O = paint(cover(I, obj5), shift(obj5, (target_i - uppermost(obj5), target_j - leftmost(obj5))))
  return O 
 
10.333333333333334, 17.806648, def cbgbiabedacbefeaicdaaciijcbehgfh(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  v_offset = sign(uppermost(obj2) - uppermost(obj5)) 
  target = (uppermost(obj2) + v_offset * (height(obj5) + 1), center(obj2)[1])
  O = paint(cover(I, obj5), shift(obj5, subtract(target, ulcorner(obj5))))
  return O
 
15.333333333333334, 11.034042, def eciecdedcijeeaheafeeadfdjgiedjef(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  h_offset = subtract(center(obj2), center(obj5))
  v_offset = (sign(h_offset[0]) * (height(obj5) + 1) if h_offset[0] != 0 else 
              sign(h_offset[1]) * (height(obj5) + 1))
  O = paint(cover(I, obj5), shift(obj5, (v_offset, h_offset[1])))
  return O
 
13.666666666666666, 15.899348, def gffcaciajehcedcajedaaidabhihebgc(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  v_dir =  sign(uppermost(obj2) - uppermost(obj5)) if uppermost(obj2) != uppermost(obj5) else 1
  target = add(ulcorner(obj2), (v_dir * (height(obj5) + 1), (width(obj2) - width(obj5)) // 2)) 
  O = paint(cover(I, obj5), shift(obj5, subtract(target, ulcorner(obj5))))
  return O
 
10.333333333333334, 16.141035, def gejbfidfabbaecieiffebffbgddeedhc(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  v_offset = crement(uppermost(obj2) - uppermost(obj5))
  target = (uppermost(obj2) + v_offset * (height(obj5) + 1), center(obj2)[1] - leftmost(obj5))
  O = paint(cover(I, obj5), shift(obj5, target))
  return O
 
14.333333333333334, 8.728446, def aahifjaccdidecabbjaeaccbbfabdcah(I):
  O = I
  for obj in objects(I, T, F, T):
    if color(obj) == 5:
      grid_height = shape(I)[0]
      obj_height = height(obj)
      target_row = (grid_height - obj_height) // 2
      offset = (target_row - uppermost(obj), 0)
      O = paint(cover(O, obj), shift(obj, offset))
  return O
 
17.666666666666668, 10.696678, def bgddjbeebfbgeebhjjffjebcjbdjdfad(I):
  # Locate '5' object
  obj_5 = first(colorfilter(objects(I, T, T, T), 5)) 
  # Locate '2' object
  obj_2 = first(colorfilter(objects(I, T, T, T), 2)) 
  # Calculate centers
  c5 = center(toindices(obj_5))
  c2 = center(toindices(obj_2))
  # Calculate offset using signs
  offset = (sign(c2[0]-c5[0]), sign(c2[1]-c5[1]))
  # Apply offset until centers align
  while c5 != c2:
    I = move(I, obj_5, offset)
    obj_5 = shift(obj_5, offset)
    c5 = center(toindices(obj_5))
  return I
 
10.0, 18.503508, def ceeiiiigdfjbefdgijgdffbjfceaaeje(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  center_2 = center(obj2)
  upper_left_5 = ulcorner(obj5)
  offset = subtract(
      center_2, 
      (upper_left_5[0] + width(obj5) // 2, upper_left_5[1] + height(obj5) // 2)
  )
  return paint(cover(I, obj5), shift(obj5, offset))
 
14.0, 11.159204, def afjdfeegabdaeieeaiccegfcbafgbfdb(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  return paint(
      cover(I, obj5), 
      shift(
          obj5, 
          gravitate(
              shift(obj5, subtract(center(obj2), center(obj5))), 
              obj2
          )
      )
  ) 
 
14.666666666666666, 13.499415, def hcdaegjabeibefbfbfhabebdedbbcfff(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  target_i = uppermost(obj2) - height(obj5)
  target_j = center(obj2)[1] - width(obj5) // 2
  return paint(cover(I, obj5), shift(obj5, (target_i - ulcorner(obj5)[0], target_j - ulcorner(obj5)[1])))
 
10.333333333333334, 17.797579, def jbjdbiddfeadebjfbbeegeddgadagbjd(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  hdiff = halve(subtract(center(obj2)[0], ulcorner(obj2)[0]))
  vdiff = halve(subtract(center(obj2)[1], ulcorner(obj2)[1]))
  target = branch(portrait(obj2), add(ulcorner(obj2), (0, vdiff)), add(ulcorner(obj2), (hdiff, 0))) 
  return paint(cover(I, obj5), shift(obj5, subtract(target, (ulcorner(obj5)[0] + width(obj5) // 2, ulcorner(obj5)[1] + height(obj5) // 2)))) 
 
17.0, 10.940845, def ijifefdgdhajeiggidcajcbeacfaiacd(I):
  O = I
  for j in range(width(I)):
    column = crop(I, (0, j), (height(I), 1))
    for obj in objects(column, T, F, T):
      if color(obj) == 5:
        grid_height = height(I)
        obj_height = height(obj)
        target_row = (grid_height - obj_height) // 2
        offset = (target_row - uppermost(obj), 0)
        O = paint(cover(O, obj), shift(obj, offset))
  return O
 
15.333333333333334, 11.050909, def hbafjecfefcdecadjajfhaffccaaedhb(I):
  five_indices = ofcolor(I, 5)
  if not five_indices:
    return I
  grid_height = height(I)
  min_row = uppermost(five_indices)
  max_row = lowermost(five_indices)
  obj_height = max_row - min_row + 1
  target_row = (grid_height - obj_height) // 2
  offset = (target_row - min_row, 0)
  return paint(cover(I, recolor(0, five_indices)), shift(recolor(5, five_indices), offset))
 
15.333333333333334, 10.844643, def bdcbicbedafdehjfiggfcadfdiaeheah(I):
  fives = colorfilter(objects(I, True, False, True), FIVE)  # Find '5' objects
  center_point = center(asindices(I))  # Calculate grid center

  def move_towards_center(obj):
    offset = gravitate(toindices(obj), {center_point})  # Calculate offset using gravitate
    return shift(obj, (sign(offset[0]), sign(offset[1])))  # Move one step in the calculated direction

  moved_fives = frozenset(map(move_towards_center, fives))

  O = paint(cover(I, merge(fives)), merge(moved_fives))  # Move the objects
  return O
 
13.333333333333334, 10.62097, def bhfbfbfccdidejehabcjfibgbbffgeaa(I):
  # Locate '5' object
  obj_5 = first(colorfilter(objects(I, T, T, T), 5))
  # Locate '2' object
  obj_2 = first(colorfilter(objects(I, T, T, T), 2))
  # Calculate offset based on relative positions
  offset = (uppermost(obj_2) - lowermost(obj_5) - 1,
            leftmost(obj_2) + width(obj_2) // 2 - leftmost(obj_5) - width(obj_5) // 2)
  # Move the '5' object
  O = move(I, obj_5, offset)
  return O
 
18.333333333333332, 11.353018, def eegfagbbfaeiebafjcbfbaejdecbgcfb(I):
  # Locate '5' object
  obj_5 = first(colorfilter(objects(I, T, T, T), 5))
  # Locate '2' object
  obj_2 = first(colorfilter(objects(I, T, T, T), 2))
  # Calculate offset using bounding boxes
  offset = subtract(ulcorner(backdrop(obj_2)),
                  (lowermost(obj_5) + 1, leftmost(obj_5)))
  # Move the '5' object
  O = paint(I, shift(obj_5, offset))
  return O
 
15.333333333333334, 12.141167, def ihaadiaegjjcebfgbdffbadddjhgcaac(I):
  # Locate '5' object
  obj_5 = first(colorfilter(objects(I, T, T, T), 5))
  # Locate '2' object
  obj_2 = first(colorfilter(objects(I, T, T, T), 2))
  # Calculate offset to move '5' above '2'
  offset = (0, 0)
  for i in range(height(I)):
    if index(I, (i, leftmost(obj_2))) == 2:
      offset = (i - lowermost(obj_5) - 1, leftmost(obj_2) + width(obj_2) // 2 - leftmost(obj_5) - width(obj_5) // 2)
      break
  # Move the '5' object
  O = move(I, obj_5, offset)
  return O
 
13.333333333333334, 9.09787, def egahgbceicccefjdiffcadfgafigeeef(I):
  # Locate '5' object
  obj_5 = first(colorfilter(objects(I, T, T, T), 5))
  # Locate '2' object
  obj_2 = first(colorfilter(objects(I, T, T, T), 2))
  # Calculate destination index
  destination_index = (uppermost(obj_2) - 1, leftmost(obj_2) + width(obj_2) // 2)
  # Calculate offset using destination index and center of '5' object 
  offset = subtract(destination_index, centerofmass(obj_5))
  # Move the '5' object
  O = move(I, obj_5, offset)
  return O
 
13.333333333333334, 10.064361, def daabjdaabijbejaeieediaaafgbjafed(I):
  # Locate '5' object
  obj_5 = first(colorfilter(objects(I, T, T, T), 5))
  # Locate '2' object
  obj_2 = first(colorfilter(objects(I, T, T, T), 2))
  # Calculate the required shift for alignment
  shift_amount = subtract((uppermost(obj_2) - 1, leftmost(obj_2) + width(obj_2) // 2), center(obj_5))
  # Move the '5' object
  O = move(I, obj_5, shift_amount)
  return O
 
12.333333333333334, 10.412525, def fffhfacjaacaedfcagcbacadfacddcch(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  return paint(
      cover(I, obj5), 
      shift(obj5, gravitate(obj5, shift(obj2, (height(obj5), 0))))
  )
 
15.333333333333334, 9.757255, def bedfbbabadceegbijgbfcfbfahjchbbd(I):
  def move_to_center(obj):
    center_row = height(I) // 2
    obj_center_row = (uppermost(obj) + lowermost(obj)) // 2
    return shift(obj, (center_row - obj_center_row, 0))
  return paint(cover(I, first(colorfilter(objects(I, T, F, T), 5))), move_to_center(first(colorfilter(objects(I, T, F, T), 5))))
 
15.333333333333334, 11.310101, def eeeddicgffheeaceageedgbahbecbgha(I):
  fives = colorfilter(objects(I, True, False, True), FIVE) # Find '5' objects
  center_i, center_j = center(asindices(I))  # Calculate grid center
  moved_objects = set()
  for obj in fives:
    obj_indices = toindices(obj)
    obj_center_i, obj_center_j = center(obj_indices)
    move_horizontal = abs(obj_center_j - center_j) >= abs(obj_center_i - center_i)
    offset = (sign(center_i - obj_center_i), 0) if not move_horizontal else (0, sign(center_j - obj_center_j))
    new_obj = shift(obj, offset)
    if not any(vmatching(new_obj, other_obj) for other_obj in objects(I, True, False, True) if other_obj != obj):
      moved_objects.add(new_obj)
    else:
      moved_objects.add(obj)
  O = paint(cover(I, merge(fives)), merge(moved_objects))  # Move the objects
  return O
 
13.333333333333334, 9.806773, def jffcjhjbcecbefiaigijjfdegchcaffc(I):
  # Locate '5' object 
  obj_5 = first(colorfilter(objects(I, T, T, T), 5))
  # Locate '2' object
  obj_2 = first(colorfilter(objects(I, T, T, T), 2))
  # Calculate the target location for '5' object's upper left corner
  target_x = leftmost(obj_2) + width(obj_2) // 2 - width(obj_5) // 2
  target_y = uppermost(obj_2) - 1
  # Calculate offset for moving '5' object
  offset = subtract((target_y, target_x), ulcorner(obj_5))
  # Move the '5' object
  O = move(I, obj_5, offset)
  return O 
 
13.333333333333334, 9.630432, def gjabgbahjfaiegadidadbdfcjefeeifc(I):
  five_obj = toindices(extract(objects(I, T, F, T), matcher(color, FIVE)))
  target_obj = toindices(extract(objects(replace(I, FIVE, ZERO), T, F, F), lambda obj: color(obj) != ZERO))
  offset = gravitate(five_obj, target_obj)
  O = paint(cover(I, five_obj), shift(recolor(FIVE, five_obj), offset))
  return O
 
11.333333333333334, 10.223142, def ciadfaefhedeegbdjdaeaaadfcbfafdi(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  target = (lambda a, b: (a[0] - height(obj5), b[1]) if portrait(obj2) else (b[0], a[1] + width(obj2)))(ulcorner(obj2), center(obj2))
  return paint(cover(I, obj5), shift(obj5, subtract(target, ulcorner(obj5))))
 
11.333333333333334, 15.53145, def iaccbebaecbcecfeidedabceffcdhbjg(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  offset = branch(portrait(obj2), (-(height(obj5) + 1), 0), (0, width(obj2) + 1))
  return paint(cover(I, obj5), shift(obj5, add(ulcorner(obj2), offset)))
 
11.333333333333334, 10.975905, def beicdacbigcfeeihaeeddafcjaaabbef(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  target_row = branch(portrait(obj2), uppermost(obj2) - height(obj5) - 1, center(obj2)[0])
  target_col = branch(portrait(obj2), center(obj2)[1], rightmost(obj2) + 1)
  return paint(cover(I, obj5), shift(obj5, (target_row - uppermost(obj5), target_col - leftmost(obj5)))) 
 
15.333333333333334, 9.976848, def eggeabbjaahcecaijgddbedhcdfdfeha(I):
  def vmove_to_center(obj):
    return shift(obj, (height(I) // 2 - centerofmass(obj)[0], 0))
  return paint(cover(I, extract(objects(I, T, F, T), lambda obj: color(obj) == 5)), vmove_to_center(extract(objects(I, T, F, T), lambda obj: color(obj) == 5)))
 
15.333333333333334, 10.651971, def cagaaegccafdebjgidbjebaddjdcdcae(I):
  # Locate '5' object
  obj_5 = first(colorfilter(objects(I, T, T, T), 5))
  # Locate '2' object
  obj_2 = first(colorfilter(objects(I, T, T, T), 2))
  # Calculate the target position for the '5' object
  target_x = leftmost(obj_2) + width(obj_2) // 2 - width(obj_5) // 2
  target_y = uppermost(obj_2) - height(obj_5) - 1 
  # Calculate the offset to move the '5' object
  offset = (target_y - uppermost(obj_5), target_x - leftmost(obj_5))
  # Move the '5' object
  O = move(I, obj_5, offset)
  return O
 
15.333333333333334, 10.4240465, def iiadahafddfaeddbbahejgeecfchcdaa(I):
  # Locate the '5' object
  obj_5 = first(colorfilter(objects(I, T, T, T), 5))
  # Locate the '2' object
  obj_2 = first(colorfilter(objects(I, T, T, T), 2))
  # Define the target location based on '2' object's position
  target_location = (uppermost(obj_2) - height(obj_5), leftmost(obj_2) + width(obj_2) // 2) 
  # Use gravitate to calculate offset, moving '5' object above '2'
  offset = gravitate(toindices(obj_5), shift(toindices(obj_5), (uppermost(obj_2) - lowermost(obj_5) -1 , 0)))
  # Move the '5' object using the calculated offset
  O = move(I, obj_5, offset)  
  return O
 
15.333333333333334, 10.691535, def iaefadicbeefehafbcdbcfdfeabcdaga(I):
  # Locate '5' object in the input
  obj_5 = first(colorfilter(objects(I, T, T, T), 5))
  # Locate '2' object in the input
  obj_2 = first(colorfilter(objects(I, T, T, T), 2))
  # Calculate horizontal offset to center '5' over '2' 
  h_offset = leftmost(obj_2) + width(obj_2) // 2 - center(toindices(obj_5))[1]
  # Move the '5' object horizontally 
  I = move(I, obj_5, (0, h_offset))
  # Recalculate '5' object position after horizontal move
  obj_5 = first(colorfilter(objects(I, T, T, T), 5))
  # Calculate vertical offset to position '5' above '2'
  v_offset = uppermost(obj_2) - lowermost(obj_5) - 1
  # Move the '5' object vertically
  O = move(I, obj_5, (v_offset, 0))
  return O
 
14.0, 9.812342, def deiaefheaabeeebaafcgcaafcecadaeh(I):
  five_obj = toindices(extract(objects(I, T, F, T), matcher(color, FIVE)))
  target_color = mostcommon(tuple(v for row in I for v in row if v != FIVE and v != ZERO))
  target_obj = toindices(extract(objects(I, T, F, T), matcher(color, target_color)))
  offset = gravitate(five_obj, target_obj)
  O = paint(cover(I, five_obj), shift(recolor(FIVE, five_obj), offset))
  return O
 
15.333333333333334, 10.222514, def ebajejhafdhheedajiiidhbfdibefbcd(I):
  five_obj = toindices(extract(objects(I, T, F, T), matcher(color, FIVE)))
  target_color = mostcommon([v for r in replace(I, FIVE, ZERO) for v in r if v != 0])
  target_obj = toindices(extract(objects(I, T, F, T), matcher(color, target_color)))
  offset = position(five_obj, target_obj)
  O = paint(cover(I, five_obj), shift(recolor(FIVE, five_obj), multiply(offset, 2)))
  return O
 
15.333333333333334, 10.224918, def fffgecdjebdbejacaaebcfdegiadfhca(I):
  five_obj = toindices(extract(objects(I, T, F, T), lambda obj: color(obj) == FIVE))
  filtered_palette = difference(palette(I), {ZERO, FIVE})
  target_color = mostcommon(tuple(filtered_palette))
  target_obj = toindices(extract(objects(I, T, F, T), matcher(color, target_color)))
  center_diff = subtract(center(target_obj), center(five_obj))
  offset = (sign(center_diff[0]), sign(center_diff[1]))
  O = paint(cover(I, five_obj), shift(recolor(FIVE, five_obj), offset))
  return O
 
13.333333333333334, 10.194038, def jafgjbfagcdhebhhbfceacfehdddddfa(I):
  five_obj = toindices(extract(objects(I, T, F, T), matcher(color, FIVE)))
  target_color = mostcommon([v for r in I for v in r if v != FIVE and v != 0])
  target_obj = toindices(extract(objects(I, T, F, T), matcher(color, target_color)))
  offset_x =  crement(subtract(center(target_obj)[1], center(five_obj)[1]))
  offset_y =  crement(subtract(center(target_obj)[0], center(five_obj)[0]))
  O = paint(cover(I, five_obj), shift(recolor(FIVE, five_obj), (offset_y, offset_x)))
  return O
 
11.0, 13.174897, def hbdffhcbddefejcdjabfeabbahciafaa(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  return paint(
      cover(I, obj5), 
      shift(obj5, subtract(ulcorner(obj2), ulcorner(obj5)))
  )
 
14.333333333333334, 11.679363, def jbdebfaabijdeajbjbiajceifbbbhdii(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  target = centerofmass(obj2)
  return paint(cover(I, obj5), shift(obj5, subtract(target, centerofmass(obj5))))
 
14.0, 6.145125, def bcadeedgbafceajfiibbbcdchdbibiea(I):
  fives = colorfilter(objects(I, True, False, True), FIVE)
  ci, cj = center(asindices(I))
  moved_objects = {shift(obj, (crement(ci - center(obj)[0]), crement(cj - center(obj)[1]))) for obj in fives}
  O = paint(cover(I, merge(fives)), merge(moved_objects))
  return O
 
15.333333333333334, 10.62036, def cjdfcccdbafieahgicgeaaabcegfccdf(I):
  # Find '5' object
  obj_5 = extract(objects(I, T, T, T), lambda obj: color(obj) == 5)
  # Find '2' object
  obj_2 = extract(objects(I, T, T, T), lambda obj: color(obj) == 2)
  # Calculate horizontal offset for centering
  h_offset = width(obj_2) // 2 - width(obj_5) // 2
  # Move '5' object above '2' and center horizontally
  O = move(I, obj_5, (uppermost(obj_2) - lowermost(obj_5) - 1, leftmost(obj_2) + h_offset - leftmost(obj_5)))
  return O
 
13.333333333333334, 10.063337, def hehgiadaabddedcdbehefejhhjhffcfe(I):
  # Find '5' object
  obj_5 = first(colorfilter(objects(I, T, T, T), 5))
  # Find '2' object
  obj_2 = first(colorfilter(objects(I, T, T, T), 2))
  # Calculate destination center
  dest_center = (uppermost(obj_2) - height(obj_5) // 2 - 1, leftmost(obj_2) + width(obj_2) // 2)
  # Calculate offset based on centers
  offset = subtract(dest_center, centerofmass(obj_5))
  # Move '5' object
  O = move(I, obj_5, offset)
  return O
 
13.0, 6.2254243, def bfdbfdaabjbbegeabideddhbfaifheba(I):
  fives = colorfilter(objects(I, True, False, True), FIVE)
  grid_center = center(asindices(I))
  moved_fives = frozenset()
  
  for obj in fives:
    obj_center = center(toindices(obj))
    h_offset = halve(subtract(grid_center[1], obj_center[1]))  # Half horizontal offset
    v_offset = subtract(grid_center[0], obj_center[0])
    moved_obj = shift(obj, (v_offset, h_offset))
    moved_fives = moved_fives.union(frozenset({moved_obj}))

  O = paint(cover(I, merge(fives)), merge(moved_fives))
  return O
 
10.666666666666666, 13.345982, def jhfgebbbheaeeeafjebghabgjedebbca(I):
    fives = colorfilter(objects(I, True, False, True), FIVE)
    grid_center_i, grid_center_j = center(asindices(I))
    moved_fives = frozenset()

    for obj in fives:
        obj_indices = toindices(obj)
        for i, j in obj_indices:
            target_j = j + halve(subtract(grid_center_j, j))  # Half horizontal movement
            target_i = min(max(grid_center_i, 0), len(I) - 1)  # Move to center row if possible
            moved_fives = moved_fives.union(frozenset({(FIVE, (target_i, target_j))}))

    O = paint(cover(I, merge(fives)), moved_fives)
    return O
 
15.333333333333334, 11.034042, def ebccfgjfdcjfeaaajcijcefdabidcbeg(I):
    target_j = center(asindices(I))[1]  # Target column is the center column
    O = I
    for i in range(len(I)):
        for j in range(len(I[0])):
            if I[i][j] == FIVE:
                h_direction = 1 if j < target_j else -1  # Move towards the center column
                new_j = j
                while 0 <= new_j < len(I[0]) and O[i][new_j] != FIVE:
                    new_j += h_direction
                O = paint(cover(O, {(FIVE, (i, j))}), {(FIVE, (i, new_j))}) 
    return O
 
12.333333333333334, 16.356838, def fdaaacfddddiefhbbbfjjbhcjbjgcaga(I):
  fives = colorfilter(objects(I, True, False, True), FIVE)  # Find all '5' objects
  grid_center_j = center(asindices(I))[1]  # Center column
  moved_fives = set()
  for obj in fives:
    offset = subtract((0, grid_center_j), center(toindices(obj)))
    offset = (offset[0], halve(offset[1]))  # Halve the horizontal offset
    moved_fives.add(shift(obj, offset))
  return paint(cover(I, merge(fives)), merge(moved_fives))  # Move the '5' objects
 
15.333333333333334, 11.034042, def badadhdgiafaefdbjjfbbefedcdeagib(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  target = center(obj2) 
  O = paint(cover(I, obj5), shift(obj5, subtract(target, center(obj5))))
  return O
 
9.666666666666666, 9.352629, def dcedjefbgcieedfeajbeddgbefjjfcah(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  target_row = uppermost(obj2)
  target_col = (leftmost(obj2) + rightmost(obj2)) // 2
  target = (target_row, target_col)
  O = paint(cover(I, obj5), shift(obj5, subtract(target, ulcorner(obj5))))
  return O
 
11.0, 13.174897, def edggaagfhdajebfcaddgdaaggebaeddb(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  target = ulcorner(obj2)
  O = paint(cover(I, obj5), shift(obj5, subtract(target, ulcorner(obj5))))
  return O
 
15.0, 10.348095, def efdeihbjebaieaghjfcfbiccageadbgd(I):
    obj2 = toobject(ofcolor(I, 2), I)
    obj5 = toobject(ofcolor(I, 5), I)
    target_i = uppermost(obj2) + (lowermost(obj2) - uppermost(obj2)) // 2
    target_j = leftmost(obj2) + (rightmost(obj2) - leftmost(obj2)) // 2
    O = paint(cover(I, obj5), shift(obj5, subtract((target_i, target_j), center(obj5))))
    return O
 
14.333333333333334, 11.679363, def bjgcffhcjaaceagiacgecchffcdcbbac(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  center2 = centerofmass(obj2)
  center5 = centerofmass(obj5)
  O = paint(cover(I, obj5), shift(obj5, subtract(center2, center5)))
  return O
 
8.666666666666666, 8.025952, def gbfbcfbfffadefhdicfeccjghfbfjfah(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  center_2 = center(obj2)
  upper_left_5 = ulcorner(obj5)
  offset = (
    center_2[0] - (upper_left_5[0] + height(obj5) // 2),
    center_2[1] - (upper_left_5[1] + width(obj5) // 2 if portrait(obj2) else 0)
  )
  return paint(cover(I, obj5), shift(obj5, offset))
 
14.333333333333334, 10.328584, def bbecehciahdfeaadjabjccadbcehjgeh(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  target_row = center(obj2)[0]
  offset = (target_row - uppermost(obj5), 0) 
  return paint(cover(I, obj5), shift(obj5, offset))
 
12.666666666666666, 10.306443, def jahcccddgbadeahebbjfchjefjcacbif(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  target_col = center(obj2)[1] if portrait(obj2) else rightmost(obj2)
  offset = (0, target_col - rightmost(obj5))
  return paint(cover(I, obj5), shift(obj5, offset))
 
10.0, 6.793602, def fegdihicdhifeacdagfcahebcdedgbdd(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  target = (center(obj2)[0], rightmost(obj2)) if portrait(obj2) else (center(obj2)[0], center(obj2)[1])
  return paint(cover(I, obj5), shift(obj5, subtract(target, lrcorner(obj5))))
 
14.666666666666666, 11.070371, def ecbedfieebjgehgaiicccacddibcbhae(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  target_row = center(obj2)[0] - height(obj5) // 2
  target_col = center(obj2)[1] - width(obj5) // 2 if portrait(obj2) else rightmost(obj2) - width(obj5) 
  return paint(I, recolor(5, shift(toindices(obj5), (target_row - uppermost(obj5), target_col - leftmost(obj5)))) )
 
14.333333333333334, 10.50448, def cacdcjghidbcebecicdjfefcbebibbei(I):
  obj2 = toobject(ofcolor(I, 2), I) 
  obj5 = toobject(ofcolor(I, 5), I)
  target_row = uppermost(obj2) - 1
  current_row = uppermost(obj5)
  row_offset = target_row - current_row
  O = paint(cover(I, obj5), shift(obj5, (row_offset, 0)))
  return O
 
10.333333333333334, 9.968749, def jadbbdbiiabfegecjfgcdaadbchjcffa(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  target = (uppermost(obj2) - 1, center(obj5)[1])
  O = paint(cover(I, obj5), shift(obj5, subtract(target, ulcorner(obj5))))
  return O
 
14.666666666666666, 10.630555, def caabaacgcdacedjdbafgiehfdifhaiad(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  row_offset =  - (height(obj2) + 1) // 2
  O = paint(cover(I, obj5), shift(obj5, (row_offset, 0)))
  return O
 
14.666666666666666, 13.499415, def iahhcebcffcbeafcifjdbjadjachbdie(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  v_distance = uppermost(obj2) - lowermost(obj5) - 1
  O = paint(cover(I, obj5), shift(obj5, (v_distance, 0)))
  return O
 
11.333333333333334, 16.296612, def cjjaficbbbheejgbaaeaaaffdgdchfde(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  center_2 = center(obj2)
  upper_5 = uppermost(obj5)
  target = (uppermost(obj2) - height(obj5) - 1 if upper_5 < center_2[0] else lowermost(obj2) + 1, center_2[1])
  return paint(cover(I, obj5), shift(obj5, subtract(target, ulcorner(obj5))))
 
14.666666666666666, 15.198228, def aebcjdgfgafeefhebdgcdcjfffdbedhd(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  target = (
    uppermost(obj2) - height(obj5) - 1 
    if uppermost(obj5) < center(obj2)[0] 
    else lowermost(obj2) + 1,
    leftmost(obj2) + width(obj2) // 2 - width(obj5) // 2
  )
  return paint(cover(I, obj5), shift(obj5, subtract(target, ulcorner(obj5))))
 
13.666666666666666, 14.735113, def ehghcheeaaedeaadidihfffdfchhhaah(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  v_offset = - height(obj5) - 1 if uppermost(obj5) < center(obj2)[0] else 1
  h_offset = center(obj2)[1] - center(obj5)[1]
  return move(I, obj5, (v_offset, h_offset))
 
9.666666666666666, 5.521672, def ddihddgjcdadebceieaaecdbfeafaffe(I):
  fives = colorfilter(objects(I, True, False, True), FIVE)
  moved_fives = frozenset()
  for five in fives:
    row_start = leftmost(five)  
    row_end = rightmost(five) 
    center_column = (len(I[0]) // 2)  
    shift_amount = center_column - ((row_end - row_start) // 2) - row_start
    moved_fives = moved_fives.union(frozenset({shift(five, (0, shift_amount))}))
  O = paint(cover(I, merge(fives)), merge(moved_fives))
  return O
 
15.333333333333334, 10.98208, def hcibdbbcjcbieaajjccfdcijfdegbfdc(I):
  O = I  
  for i in range(len(I)): 
    row = I[i] 
    fives = asindices(crop(I, (i, 0), (1, len(I[0])))) & ofcolor(I, FIVE)
    if fives:
      O = paint(cover(O, toobject(fives, I)), shift(toobject(fives, I), (0, (len(I[0]) // 2) - (width(fives) // 2) - leftmost(fives))))
  return O
 
9.0, 9.827919, def fdgeefecbabheccfadfgcceehjahgacf(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  target_j = center(obj2)[1] 
  target = (ulcorner(obj2)[0], target_j) 
  O = paint(cover(I, obj5), shift(obj5, subtract(target, ulcorner(obj5))))
  return O
 
11.0, 15.317935, def gaaecagbaadfecbdbacgbhffficfcdec(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  target_x = center(obj2)[1] 
  target_y = lowermost(obj2) + 1
  return paint(cover(I, obj5), shift(obj5, (target_y - uppermost(obj5), target_x - leftmost(obj5))))
 
13.0, 11.493995, def cgddfgcdhchaedbfbhhbffaaeghggafa(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  target = (lowermost(obj2) + 1, center(obj2)[1])
  return paint(cover(I, obj5), shift(obj5, subtract(target, center(obj5))))
 
14.333333333333334, 10.686997, def ejcedfddfdgfecihadeedeaeegcafgai(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  offset = gravitate(obj5,  shift(obj2, (1, 0))) 
  return paint(cover(I, obj5), shift(obj5, offset))
 
14.666666666666666, 10.799165, def gacficefddcaegdgjgadcbjfcbcbffab(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  target = (uppermost(obj2) - height(obj5), center(obj2)[1] - leftmost(obj5) - (width(obj5) - 1)//2)
  return paint(cover(I, obj5), shift(obj5, target))
 
13.666666666666666, 11.870276, def ijegebjafdaheeebbebbbceafbdeegdb(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  center_diff = subtract(center(obj2), center(obj5))
  target = add(ulcorner(obj5), (center_diff[0] - height(obj5), center_diff[1]))
  return paint(cover(I, obj5), shift(obj5, target))
 
12.333333333333334, 10.412525, def ffcaajfiadedebeajbbjaaiciceafbed(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  return paint(cover(I, obj5), shift(obj5, gravitate(obj5, shift(obj2, (height(obj5), 0))))) 
 
15.333333333333334, 11.034042, def eacbfjficjjcedfdahfbcafeabgdiebd(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  h_offset = branch(vmatching(obj2, obj5), 0, sign(center(obj2)[1] - center(obj5)[1]) * (width(obj2) // 2 + width(obj5) // 2 + 1))
  v_offset = branch(hmatching(obj2, obj5), 0, sign(center(obj2)[0] - center(obj5)[0]) * (height(obj2) // 2 + height(obj5) // 2 + 1))
  target = add(center(obj2), (v_offset, h_offset))
  return paint(cover(I, obj5), shift(obj5, subtract(target, center(obj5))))
 
14.0, 11.159204, def ghhjbagiaeeiecefiageefhchiidcadf(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  offset = gravitate(obj5, obj2)
  target = add(ulcorner(obj5), offset)
  return paint(cover(I, obj5), shift(obj5, subtract(target, ulcorner(obj5)))) 
 
17.333333333333332, 16.688255, def bddbbcbbceegeeggadjdbdefjhjeajff(I):
    obj2 = toobject(ofcolor(I, 2), I)
    obj5 = toobject(ofcolor(I, 5), I)
    target_row = uppermost(obj2) - height(obj5) - 1
    target_col = center(obj2)[1] - width(obj5) // 2
    O = I
    for i, row in enumerate(I):
        for j, v in enumerate(row):
            if v == 5:
                O = fill(O, 0, ((i, j),))
            if i == target_row and target_col <= j < target_col + width(obj5):
                O = fill(O, 5, ((i, j),))
    return O
 
15.0, 11.029249, def dbafaeecbcheecbfibchceafdjcfbaah(I):
  O = I
  for i in range(len(I)):
    row = I[i]
    fives = ofcolor(crop(I, (i, 0), (1, len(I[0]))), FIVE)
    if fives:
      shift_amount = (len(row) // 2) - (width(fives) // 2) - leftmost(fives)
      O = paint(cover(O, toobject(fives, O)), shift(toobject(fives, O), (0, shift_amount)))
  return O
 
14.333333333333334, 14.053776, def ijcgcbdeejbdeegbibcbcbececaidhgi(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  target_row = I[uppermost(obj2)]
  O = paint(cover(I, obj5), 
              frozenset({(v, (uppermost(obj2) + i, j)) for v, (i, j) in obj5 
                        if I[i][j] == 5 and target_row[j] != 5}))
  return O
 
14.333333333333334, 10.363787, def bibeddiabaeiegedjjjijhcfbhjadaaf(I):
    obj2 = toobject(ofcolor(I, 2), I)
    obj5 = toobject(ofcolor(I, 5), I)
    v_shift = uppermost(obj2) - uppermost(obj5)
    h_shift = center(obj2)[1] - center(obj5)[1]
    O = paint(cover(I, obj5), shift(obj5, (v_shift, h_shift)))
    return O
 
15.333333333333334, 11.034042, def cbffadigjfcbegaeiicbacjacagjgeba(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  center_2 = center(obj2)
  return paint(
      cover(I, obj5), 
      shift(
          obj5, 
          (center_2[0] - center(obj5)[0], center_2[1] - center(obj5)[1])
      )
  )
 
14.0, 11.159204, def adifbeacabdaebfabejaabcgdfdcbaca(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  return paint(
      cover(I, obj5), 
      shift(obj5, gravitate(obj5, obj2))
  )
 
15.333333333333334, 10.711967, def gajejaajeiheegcajdbgicahgihfcfbb(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  center_2 = center(obj2)
  return paint(
      cover(I, obj5), 
      shift(
          obj5, 
          (center_2[0] - center(obj5)[0], center_2[1] - center(obj5)[1] + (1 if portrait(obj2) else 0))
      )
  )
 
15.333333333333334, 11.034042, def bgdiiecaejacecgaiadbbhahcbddgdaa(I):
  obj2 = toobject(ofcolor(I, 2), I) 
  obj5 = toobject(ofcolor(I, 5), I)
  center2 = center(obj2)
  target = (center2[0], center(obj5)[1]) if hmatching(obj2, obj5) else (center(obj5)[0], center2[1])
  return paint(cover(I, obj5), shift(obj5, subtract(target, center(obj5)))) 
 
14.0, 11.159204, def jifbccefegfaehbcabfedaihacadfcji(I):
  obj2 = toobject(ofcolor(I, 2), I) 
  obj5 = toobject(ofcolor(I, 5), I)
  return paint(cover(I, obj5), shift(obj5, gravitate(obj5, obj2)))
 
11.666666666666666, 13.185694, def ccdbbadbecccegcbicafedffeabddicd(I):
  O = canvas(ZERO, shape(I))  # Create empty canvas
  for i, row in enumerate(I):  # Iterate through rows
    fives = [(v, (i, j)) for j, v in enumerate(row) if v == FIVE]  # Find '5's in row
    if fives:  # If '5's exist in the row
      leftmost_j = min(j for _, (_, j) in fives)  # Find leftmost '5'
      rightmost_j = max(j for _, (_, j) in fives)  # Find rightmost '5'
      center_j = (leftmost_j + rightmost_j) // 2  # Calculate center of '5's
      target_j = len(row) // 2  # Calculate target center column
      shift_amount = target_j - center_j  # Calculate shift amount
      shifted_fives = [(v, (i, j + shift_amount)) for v, (_, j) in fives]  # Shift '5's
      for v, (_, j) in shifted_fives:
        O = paint(O, {(v, (i, j))})  # Paint shifted '5's onto canvas
    for j, v in enumerate(row):
      if v != FIVE:
        O = paint(O, {(v, (i, j))})  # Paint non-'5's at their original positions
  return O
 
9.666666666666666, 6.133743, def aebchbaejedaeaghjchgchdebbbaddfe(I):
  fives = colorfilter(objects(I, True, False, True), FIVE)  # Extract '5' objects
  O = I
  for five in fives:
    row = uppermost(five)  # Get row of the '5' object
    shift_amount = (len(I[0]) // 2) - (width(five) // 2) - leftmost(five)  # Calculate shift amount
    O = paint(cover(O, five), shift(five, (0, shift_amount)))  # Center the '5' object in the row
  return O
 
11.333333333333334, 12.009564, def ecghcaebgcbeehbhbahaacbfjcgacedb(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  target = (uppermost(obj2) - height(obj5), leftmost(obj2)) 
  return paint(cover(I, obj5), shift(obj5, target))
 
14.666666666666666, 10.313996, def ffcafeegabfdegefaedbddeeegbjcgec(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  center2 = center(obj2)
  target_x = center2[1] - width(obj5) // 2
  target_y = uppermost(obj2) - height(obj5)
  return paint(cover(I, obj5), shift(obj5, (target_y, target_x)))
 
12.0, 12.853893, def agjjgjaadhiceicfbgbgahcacbffeaci(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  vdiff = height(obj2) // 2 - height(obj5) // 2
  hdiff = width(obj2) // 2 - width(obj5) // 2
  return paint(cover(I, obj5), shift(obj5, (uppermost(obj2) + vdiff - height(obj5) // 2, leftmost(obj2) + hdiff - width(obj5) // 2)))
 
14.666666666666666, 13.499415, def fdhiaiidcifbehcgbefdhjfgfdbfccba(I):
  obj2 = toobject(ofcolor(I, 2), I) 
  obj5 = toobject(ofcolor(I, 5), I)
  target_j = center(obj2)[1] - width(obj5) // 2
  target_i = uppermost(obj2) - height(obj5)
  return paint(cover(I, obj5), shift(obj5, (target_i - uppermost(obj5), target_j - leftmost(obj5))))
 
245.33333333333334, 100.49358, def dbbgddjjcbfjeafjifbbabbcfdeefcaf(I):
  objs = objects(I, True, False, True)
  shifted_objs = []
  for obj in objs:
    if color(obj) == FIVE:
      padding = (len(I[0]) - width(obj)) // 2
      shifted_obj = paint(canvas(ZERO, (height(obj), padding)), obj)
      shifted_objs.append(shifted_obj)
    else:
      shifted_objs.append(paint(canvas(ZERO, shape(obj)), obj))
  output_grid = shifted_objs[0]
  for i in range(1, len(shifted_objs)):
    output_grid = hconcat(output_grid, shifted_objs[i])
  return output_grid
 
12.0, 12.292399, def dhfggacdcdajefjdagjadafcahffcbhi(I):
    obj2 = toobject(ofcolor(I, 2), I)
    obj5 = toobject(ofcolor(I, 5), I)
    move_horizontal = subtract(rightmost(obj2) - leftmost(obj2), rightmost(obj5) - leftmost(obj5)) // 2
    move_vertical = subtract(lowermost(obj2) - uppermost(obj2), lowermost(obj5) - uppermost(obj5)) // 2
    O = paint(cover(I, obj5), shift(obj5, (move_vertical, move_horizontal))) 
    return O
 
15.333333333333334, 10.334753, def gdfdbgaaccdeefdhbajefciahchfcdga(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=False)
  obj2 = extract(objs, lambda obj: color(obj) == 2)
  obj5 = extract(objs, lambda obj: color(obj) == 5)
  return paint(cover(I, obj5), shift(obj5, subtract(center(obj2), center(obj5))))
 
9.0, 18.203812, def ghgfbadgbbfdehjcbciaaeeajeefdcfa(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  target_row = lowermost(obj2) + 1
  target_col = leftmost(obj2) + width(obj2) // 2 - width(obj5) // 2
  target = (target_row, target_col)
  return paint(cover(I, obj5), shift(obj5, target))
 
14.333333333333334, 10.686997, def dcdddihhfabfefbijjhbaffbfcbfebec(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  return paint(cover(I, obj5), shift(obj5, gravitate(obj5, shift(obj2, (1, 0))))) 
 
14.0, 14.26329, def daefcjdfegdceafgidhccefeijefdgic(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  return move(I, obj5, subtract(
      (lowermost(obj2) + 1, centerofmass(obj2)[1] - width(obj5) // 2),
      ulcorner(obj5)
  )) 
 
11.666666666666666, 14.062897, def adifgadcecbaebahbhchcdafabfgdebd(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  h_offset = (width(obj2) - width(obj5)) // 2
  return paint(cover(I, obj5), shift(obj5, (lowermost(obj2) - uppermost(obj5) + 1,  h_offset))) 
 
14.0, 11.159204, def cddghbebhjdhebdeificbbbbdeffdicb(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  O = paint(cover(I, obj5), shift(obj5, gravitate(obj5, obj2)))
  return O
 
11.0, 16.916487, def jdaaagddgcbjeedjafbhjdidjbacdfbh(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  center_2 = center(obj2)
  offset = (lowermost(obj2) + 1 - uppermost(obj5), center_2[1] - leftmost(obj5)) if width(obj2) > height(obj2) else (center_2[0] - uppermost(obj5), rightmost(obj2) + 1 - leftmost(obj5)) 
  return paint(cover(I, obj5), shift(obj5, offset))
 
11.0, 16.851366, def cajjdbdjaiaieaajjbfcefdffbbfcbhb(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  offset = (
    lambda a, b: (
      lowermost(a) + 1 - uppermost(b), 
      center(a)[1] - leftmost(b) if width(a) > height(a) else rightmost(a) + 1 - leftmost(b)
    )
  )(obj2, obj5)
  return paint(cover(I, obj5), shift(obj5, offset)) 
 
15.0, 15.705465, def agcbefbfciddefgjbbifichbejffeiei(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  target_loc = subtract(add(ulcorner(obj2), divide(shape(obj2), 2)), divide(shape(obj5), 2))
  return paint(cover(I, obj5), shift(obj5, target_loc))
 
14.0, 14.2958975, def gbeafjjefgbaejjeijaghjddbfbfbecb(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  target_row = uppermost(obj2) - uppermost(obj5) - height(obj5)
  return paint(cover(I, obj5), shift(obj5, (target_row, centerofmass(obj2)[1] - centerofmass(obj5)[1])))
 
7.666666666666667, 9.0654745, def gbchbbfjecaieeheaebeieggidcfedgb(I):
  obj2 = toobject(ofcolor(I, 2), I)  # Isolate '2' object
  obj5 = toobject(ofcolor(I, 5), I)  # Isolate '5' object
  target_j = center(obj2)[1]  # Target column for '5' object
  target_i = uppermost(obj2) if portrait(obj2) else center(obj2)[0] - height(obj5) // 2 # Target row for '5' object
  O = paint(cover(I, obj5), shift(obj5, subtract((target_i, target_j), ulcorner(obj5))))  # Move and paint '5' object
  return O
 
8.666666666666666, 8.049372, def hjejfceebccfebhbbdedabafecffdhhd(I):
  obj2 = toobject(ofcolor(I, 2), I)  # Isolate '2' object
  obj5 = toobject(ofcolor(I, 5), I)  # Isolate '5' object
  offset = subtract((uppermost(obj2), center(obj2)[1]), ulcorner(obj5))
  offset = astuple(offset[0] + (height(obj2) - height(obj5)) // 2 if not portrait(obj2) else 0, offset[1])
  O = paint(cover(I, obj5), shift(obj5, offset))  # Move and paint '5' object
  return O
 
15.333333333333334, 8.846762, def hcgacbdeehbcecbeijebdcibedjebbee(I):
  obj2 = toobject(ofcolor(I, 2), I) # Isolate '2' object
  obj5 = toobject(ofcolor(I, 5), I) # Isolate '5' object
  target = (uppermost(obj2) if portrait(obj2) else center(obj2)[0] - height(obj5) // 2, center(obj2)[1])
  O = paint(I, shift(obj5, subtract(target, ulcorner(obj5))))
  return O
 
15.333333333333334, 11.169696, def bfdedebeaadiejicifaadbjbbfdigagg(I):
  obj2 = toobject(ofcolor(I, 2), I) # Isolate '2' object
  obj5 = toobject(ofcolor(I, 5), I) # Isolate '5' object
  move_up = subtract(center(obj2)[0], center(obj5)[0])
  O = paint(cover(I, obj5), shift(obj5, (move_up + (height(obj2) // 2) - (height(obj5) // 2) if not portrait(obj2) else move_up, 0)))
  return O
 
7.666666666666667, 8.673577, def fcfbiehffdcbeacgacbihgbafibfeddb(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  center2 = center(obj2)
  if portrait(obj2):
    target = (center2[0], center2[1] - width(obj5) // 2)
    return paint(cover(I, obj5), shift(obj5, subtract(target, ulcorner(obj5))))
  else:
    target = (center2[0] - height(obj5) // 2, center2[1])
    return paint(cover(I, obj5), shift(obj5, subtract(target, ulcorner(obj5))))
 
15.333333333333334, 11.003584, def accciedhedfjecafjaheabhhdefhcjgf(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  return paint(
    cover(I, obj5), 
    shift(
      obj5, 
      (
        (center(obj2)[0] - uppermost(obj5), center(obj2)[1] - leftmost(obj5) - width(obj5) // 2),
        (center(obj2)[0] - uppermost(obj5) - height(obj5) // 2, center(obj2)[1] - leftmost(obj5))
      )[portrait(obj2)]
    )
  )
 
11.333333333333334, 13.079281, def gbfhbgcecbaaebfiaebefabjajibhefc(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  center_2 = center(obj2)
  return paint(cover(I, obj5), shift(obj5, subtract((uppermost(obj2) - height(obj5), center_2[1]), ulcorner(obj5))))
 
12.0, 10.786837, def bjbgaaeigigceifdbiccfajgdafbbeej(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  return paint(cover(I, obj5), shift(obj5, subtract((center(obj2)[0] - height(obj5) // 2, rightmost(obj2) + 1), ulcorner(obj5)))) 
 
15.333333333333334, 10.620811, def acddffgefafaeacbaejfdafiagebgcef(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  hdiff = subtract(center(obj2)[0], center(obj5)[0])
  return paint(cover(I, obj5), shift(obj5, (hdiff, center(obj2)[1] - width(obj5) // 2)))
 
14.333333333333334, 12.904841, def agbcgcgciaegeffeaifbaghfgacaejjc(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  target_row = center(obj2)[0]
  target_start = center(obj2)[1] - width(obj5) // 2
  return paint(cover(I, obj5), shift(obj5, subtract((target_row - uppermost(obj5), target_start - leftmost(obj5)), ulcorner(obj5))))
 
8.666666666666666, 8.889865, def jbbifciajecfeidiaebhjjeebaebeaad(I):
  obj2_indices = ofcolor(I, 2)
  obj5_indices = ofcolor(I, 5)
  obj2 = toobject(obj2_indices, I)
  obj5 = toobject(obj5_indices, I)
  target = (center(obj2)[0] + (uppermost(obj2) - center(obj2)[0] - height(obj5) // 2 if height(obj2) > width(obj2) else 0), center(obj2)[1])
  shifted_obj5 = shift(obj5, subtract(target, ulcorner(obj5)))
  O = paint(fill(I, 0, obj5_indices), shifted_obj5)
  return O
 
14.333333333333334, 11.679363, def ifjcdeighdbaeiefijifaadbeieifehi(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  diff = subtract(centerofmass(obj2), centerofmass(obj5))
  return paint(cover(I, obj5), shift(obj5, diff))
 
9.333333333333334, 17.113676, def bebeejcfidddefbaafafibeeiecbhbfc(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  direction = position(obj5, obj2) 
  target = add(ulcorner(obj5), multiply(direction, shape(obj5)))
  return paint(cover(I, obj5), shift(obj5, target))
 
14.333333333333334, 14.172035, def ahcciiadaghaegbdihgfbjafieaaefjf(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  target_row = lowermost(obj2) + 1 if uppermost(obj5) < center(obj2)[0] else uppermost(obj2) - height(obj5) 
  target = (target_row, center(obj2)[1] - width(obj5) // 2)
  return paint(cover(I, obj5), shift(obj5, subtract(target, ulcorner(obj5)))) 
 
10.333333333333334, 16.11784, def fgfidcabcdabeedbacjgfhabbajcfcdd(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  move_direction = (1, 0) if uppermost(obj5) < center(obj2)[0] else (-1, 0)
  target = add(ulcorner(obj2), multiply(move_direction, (height(obj2) // 2 + height(obj5) // 2 + 1, 0)))
  return paint(cover(I, obj5), shift(obj5, subtract(target, ulcorner(obj5))))
 
14.333333333333334, 14.628914, def ceajdbhdffhdegabbaabhbfggdfhfafb(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  target_row = branch(uppermost(obj5) < center(obj2)[0], lowermost(obj2) + 1, uppermost(obj2) - height(obj5))
  return paint(cover(I, obj5), shift(obj5, (target_row - uppermost(obj5), center(obj2)[1] - width(obj5) // 2)))
 
14.333333333333334, 10.58475, def hjffcdhgejebefeajbcdabhddcbfjfhf(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  offset = (height(obj2) + 1) * (1 if uppermost(obj5) < center(obj2)[0] else -1)
  target = add((0, center(obj2)[1] - width(obj5) // 2), (offset, 0))
  return paint(cover(I, obj5), shift(obj5, subtract(target, ulcorner(obj5))))
 
9.0, 9.070678, def efjagigggefieaahacfjhbahccgbcdcd(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  target_i = uppermost(obj2) + (lowermost(obj2) - uppermost(obj2)) // 2
  target_j = leftmost(obj2) + (rightmost(obj2) - leftmost(obj2)) // 2
  offset = (target_i - uppermost(obj5), target_j - leftmost(obj5))
  return paint(cover(I, obj5), shift(obj5, offset))
 
15.333333333333334, 9.539345, def jbdghfjhfefeeebbigbbdgidbegeicbb(I):
  objs = objects(I, False, False, True)
  obj2 = extract(objs, lambda obj: color(obj) == 2)
  obj5 = extract(objs, lambda obj: color(obj) == 5)
  offset = subtract(center(obj2), center(obj5))
  return paint(cover(I, obj5), shift(obj5, offset))
 
12.0, 13.731295, def jfacgcicadeaebaiibcadjffehbgcefi(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  h_offset = (rightmost(obj2) - leftmost(obj2)) // 2 - (rightmost(obj5) - leftmost(obj5)) // 2
  v_offset = (lowermost(obj2) - uppermost(obj2)) // 2 - (lowermost(obj5) - uppermost(obj5)) // 2
  return paint(cover(I, obj5), shift(obj5, (v_offset, h_offset)))
 
14.0, 9.195334, def bbfgdeaeeaffejdijaieaaedeeejafhd(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  center2 = center(obj2)
  center5 = center(obj5)
  shift_amount = (center2[0] - center5[0] - height(obj5) // 2, center2[1] - center5[1])
  return paint(cover(I, obj5), shift(obj5, shift_amount)) 
 
11.333333333333334, 13.452005, def ifjecefdbafaehbcbcbicabadbgaeedd(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  target = (uppermost(obj2) - height(obj5), (leftmost(obj2) + rightmost(obj2)) // 2)
  return paint(cover(I, obj5), shift(obj5, subtract(target, ulcorner(obj5))))
 
11.0, 11.799483, def abefacbefbgbecfbbegdffcecbaaiabe(I):
  obj2 = toobject(ofcolor(I, 2), I) # Isolate '2' object
  obj5 = toobject(ofcolor(I, 5), I) # Isolate '5' object
  target_row = uppermost(obj2) if portrait(obj2) else center(obj2)[0] - height(obj5) // 2
  target_col = leftmost(obj2)
  O = paint(cover(I, obj5), shift(obj5, (target_row - uppermost(obj5), target_col - leftmost(obj5))))
  return O
 
10.0, 18.755295, def edcffjabiagdegaejcebbbfdcfcbfbbf(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  h_center = leftmost(obj2) + width(obj2) // 2 - width(obj5) // 2
  v_center = uppermost(obj2) + height(obj2) // 2 - height(obj5) // 2
  if hmatching(obj2, obj5):
    target = (lowermost(obj2) + 1, h_center)  # Move below
  elif vmatching(obj2, obj5):
    target = (v_center, rightmost(obj2) + 1)  # Move right
  else:
    target = (v_center, h_center)  # Move inside
  return paint(cover(I, obj5), shift(obj5, target))
 
14.333333333333334, 14.172035, def eaecefjjcfhhegjjbfcffbaebedbfaff(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  rel_pos = position(obj5, obj2)
  target_offset = {
    (0, -1): (lowermost(obj2) - uppermost(obj5) + 1, 0),  # Below
    (1, 0): (0, rightmost(obj2) - leftmost(obj5) + 1),   # Right
    (-1, 0): (0, leftmost(obj2) - rightmost(obj5) - 1),  # Left
    (0, 1): (uppermost(obj2) - lowermost(obj5) - 1, 0)   # Above
  }.get(rel_pos, center(obj2)) 
  return paint(cover(I, obj5), shift(obj5, target_offset))
 
13.666666666666666, 16.344511, def gcbeibheidbhebaajihdacaceacdaaae(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  direction = gravitate(obj5, obj2)
  target = add(ulcorner(obj5), direction)
  return paint(cover(I, obj5), shift(obj5, target))
 
13.0, 13.0534115, def iaddbiddfbfceafhifbechigabbcabda(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  h_shift = subtract(halve(astuple(leftmost(obj2), rightmost(obj2))), halve(astuple(leftmost(obj5), rightmost(obj5)))) # Similar to provided code
  return paint(cover(I, obj5), shift(obj5, (uppermost(obj2) - height(obj5) - ulcorner(obj5)[0], h_shift[1])))  # Directly use h_shift's y component
 
9.333333333333334, 17.774645, def icdidfefidciefcdbjacfbbhdjcecgea(I):
    obj2 = toobject(ofcolor(I, 2), I)
    obj5 = toobject(ofcolor(I, 5), I)
    return paint(
        cover(I, obj5),
        shift(obj5, subtract(ulcorner(obj2), (height(obj5), width(obj5) // 2 - width(obj2) // 2)))
    )
 
10.0, 12.020011, def fccgfjahbdghebecbddffafbbaiebdij(I):
    obj2 = toobject(ofcolor(I, 2), I)
    obj5 = toobject(ofcolor(I, 5), I)
    h_offset = (width(obj2) - width(obj5)) // 2
    v_offset = - height(obj5) - 1
    return move(I, obj5, (v_offset, h_offset)) 
 
9.0, 11.214619, def ideedagdjjheedjejgfbgaejifjfhchj(I):
  fives = colorfilter(objects(I, True, False, True), FIVE) # Find all objects of '5'
  if fives:
    union_fives = merge(fives) # Merge all '5' objects into one
    ci, cj = center(asindices(I)) # Calculate center of input grid
    obj_ci, obj_cj = center(union_fives) # Calculate center of merged '5' object
    O = paint(cover(I, union_fives), shift(union_fives, (ci - obj_ci, cj - obj_cj))) # Center '5' object on grid
  else:
    O = paint(I, {(FIVE, (len(I) // 2, len(I[0]) // 2))}) # If no '5's, draw single '5' at center
  return O
 
18.0, 31.720854, def jeeffcbfdfaaefaciidegccfgdfjdeeb(I):
  fives = [(FIVE, (i, j)) for i, row in enumerate(I) for j, v in enumerate(row) if v == FIVE]
  if fives:
    min_i = min(i for _, (i, _) in fives)
    max_i = max(i for _, (i, _) in fives)
    center_i = (min_i + max_i) // 2
    target_i = len(I) // 2
    shift_amount_i = target_i - center_i
    shifted_fives_v = [(v, (i + shift_amount_i, j)) for v, (i, j) in fives]
    min_j = min(j for _, (_, j) in fives)
    max_j = max(j for _, (_, j) in fives)
    center_j = (min_j + max_j) // 2
    target_j = len(I[0]) // 2
    shift_amount_j = target_j - center_j
    shifted_fives = [(v, (i, j + shift_amount_j)) for v, (i, j) in shifted_fives_v]
    O = paint(canvas(ZERO, shape(I)), shifted_fives)
  else:
    O = paint(I, {(FIVE, (len(I) // 2, len(I[0]) // 2))})
  return O
 
10.333333333333334, 16.11784, def fcfdcgeeigebecigbeefifhefbecdcaa(I):
  O = canvas(ZERO, shape(I))  # Create empty canvas
  for i, row in enumerate(I):
    for j, v in enumerate(row):
      if v == FIVE:
        O = paint(O, {(FIVE, (len(I) // 2 + i - len(I) // 2, len(I[0]) // 2 + j - len(I[0]) // 2))})  # Center '5's
      else:
        O = paint(O, {(v, (i, j))})  # Paint non-'5's at their original positions
  return O
 
9.333333333333334, 17.774645, def abbajjibijfbeejeiacgahfejefaiajg(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  hoffset = leftmost(obj2) + width(obj2) // 2 - width(obj5) // 2 
  voffset = uppermost(obj2) - height(obj5) if hmatching(obj2, obj5) else uppermost(obj2) + height(obj2) // 2 - height(obj5) // 2
  return paint(cover(I, obj5), shift(obj5, (voffset, hoffset))) 
 
8.333333333333334, 20.198256, def gabbaefadcefefeaigebedcdafdjfbcj(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  return paint(cover(I, obj5), shift(obj5, add((0, width(obj2)//2 - width(obj5)//2), (height(obj2) + 1, 0))))
 
30.333333333333332, 20.183298, def ciacdjbgejbheechifaddiebejbhacba(I):
  twos = colorfilter(objects(I, True, False, True), TWO)  # Identify '2' objects
  fives = colorfilter(objects(I, True, False, True), FIVE) # Identify '5' objects
  O = canvas(ZERO, shape(I)) # Create empty canvas
  for two in twos:
    two_center = center(two)
    O = paint(O, shift(recolor(TWO, two), (len(I) // 2 - two_center[0], len(I[0]) // 2 - two_center[1]))) # Center the '2' object
  for five in fives:
    five_center = center(five)
    shift_amount = (len(I) // 2 - five_center[0], len(I[0]) // 2 - five_center[1])
    if len(fives) == 1:
      O = paint(O, shift(recolor(FIVE, five), add(shift_amount, (-1, 0)))) # If single '5', place above the '2'
    else:
      if hline(five):
        O = paint(O, shift(recolor(FIVE, five), add(shift_amount, (1, 0)))) # If horizontal '5', place below the '2'
      else:
        O = paint(O, shift(recolor(FIVE, five), add(shift_amount, (0, -2)))) # If vertical '5', place to the left of the '2'
  return O
 
10.666666666666666, 16.987795, def bfhbfdffcfaaedibjacbabcdcgfhagbh(I):
  O = canvas(ZERO, shape(I)) # Create empty canvas
  for i, row in enumerate(I):
    for j, v in enumerate(row):
      if v == TWO:
        O = paint(O, {(TWO, (len(I) // 2 + i - len(I) // 2, len(I[0]) // 2 + j - len(I[0]) // 2))}) # Center the '2's
      elif v == FIVE:
        fives = ofcolor(I, FIVE) # Get indices of all '5's
        if len(fives) == 1:
          O = paint(O, {(FIVE, (len(I) // 2 + i - len(I) // 2 - 1, len(I[0]) // 2 + j - len(I[0]) // 2))})  # Single '5' above
        elif i in {uppermost(fives), lowermost(fives)}:
          O = paint(O, {(FIVE, (len(I) // 2 + i - len(I) // 2 + 1, len(I[0]) // 2 + j - len(I[0]) // 2))}) # Horizontal '5' below
        else:
          O = paint(O, {(FIVE, (len(I) // 2 + i - len(I) // 2, len(I[0]) // 2 + j - len(I[0]) // 2 - 2))}) # Vertical '5' to the left
  return O
 
22.666666666666668, 13.274388, def fabjjicfeafeeeebaibcejedbcjgjedf(I):
  twos = colorfilter(objects(I, True, False, True), TWO) # Identify '2' objects
  fives = colorfilter(objects(I, True, False, True), FIVE) # Identify '5' objects
  O = paint(canvas(ZERO, shape(I)), shift(recolor(TWO, merge(twos)), (len(I) // 2 - center(merge(twos))[0], len(I[0]) // 2 - center(merge(twos))[1]))) # Center all '2's 
  if fives:
    if len(fives) == 1:
      O = paint(O, shift(recolor(FIVE, merge(fives)), (len(I) // 2 - center(merge(fives))[0] - 1, len(I[0]) // 2 - center(merge(fives))[1]))) # Single '5' above
    else:
      if hline(merge(fives)):
        O = paint(O, shift(recolor(FIVE, merge(fives)), (len(I) // 2 - center(merge(fives))[0] + 1, len(I[0]) // 2 - center(merge(fives))[1]))) # Horizontal '5' below
      else:
        O = paint(O, shift(recolor(FIVE, merge(fives)), (len(I) // 2 - center(merge(fives))[0], len(I[0]) // 2 - center(merge(fives))[1] - 2))) # Vertical '5' to the left
  return O
 
31.333333333333332, 21.613104, def gffcbiebfbabeggaajhfeagfidefbfbc(I):
  O = canvas(ZERO, shape(I)) # Create an empty canvas
  for obj in objects(I, True, False, True):
    if color(obj) == TWO:
      O = paint(O, shift(obj, (len(I) // 2 - center(obj)[0], len(I[0]) // 2 - center(obj)[1]))) # Center '2' objects
    elif color(obj) == FIVE:
      if len(colorfilter(objects(I, True, False, True), FIVE)) == 1:
        O = paint(O, shift(obj, (len(I) // 2 - center(obj)[0] - 1, len(I[0]) // 2 - center(obj)[1]))) # Position single '5' above
      elif hline(obj):
        O = paint(O, shift(obj, (len(I) // 2 - center(obj)[0] + 1, len(I[0]) // 2 - center(obj)[1]))) # Position horizontal '5' below
      else:
        O = paint(O, shift(obj, (len(I) // 2 - center(obj)[0], len(I[0]) // 2 - center(obj)[1] - 2))) # Position vertical '5' to the left
  return O
 
9.333333333333334, 18.080738, def effegacfdgbjeifhbcaffeeiheeeaddi(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  hoffset = leftmost(obj2) + width(obj2) // 2 - width(obj5) // 2 
  voffset = uppermost(obj2) - height(obj5) - 1 if hmatching(obj2, obj5) else uppermost(obj2) + height(obj2) // 2 - height(obj5) // 2
  return paint(cover(I, obj5), shift(obj5, (voffset, hoffset))) 
 
8.0, 20.30157, def bhdgfeebfbeeebecachcfdejheebebfa(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  voffset = uppermost(obj2) - height(obj5) - 1 if hmatching(obj2, obj5) else uppermost(obj2) + height(obj2) // 2 - height(obj5) // 2
  hoffset = leftmost(obj2) + width(obj2) + 1 if vmatching(obj2, obj5) else leftmost(obj2) + width(obj2) // 2 - width(obj5) // 2
  return paint(cover(I, obj5), shift(obj5, (voffset, hoffset)))
 
21.666666666666668, 21.28635, def afbadddfgfcbeehebdahgfhadeacibic(I):
  O = canvas(ZERO, shape(I))  # Create empty canvas
  twos = ofcolor(I, TWO)  # Find all '2' indices
  fives = ofcolor(I, FIVE)  # Find all '5' indices
  center_i = height(I) // 2  # Calculate the center row index
  center_j = width(I) // 2  # Calculate the center column index
  shift_amount = (center_i - centerofmass(twos)[0], center_j - centerofmass(twos)[1])  # Calculate shift for centering
  O = paint(O, shift(toobject(twos, I), shift_amount))  # Center the '2' object
  if len(fives) == 1:
    O = paint(O, shift(toobject(fives, I), add(shift_amount, (-1, 0))))  # Single '5' above
  elif vline(toobject(fives, I)):
    O = paint(O, shift(toobject(fives, I), add(shift_amount, (0, -1))))  # Vertical '5' to the left
  elif hline(toobject(fives, I)):
    O = paint(O, shift(toobject(fives, I), add(shift_amount, (1, 0))))  # Horizontal '5' below
  return O
 
10.0, 17.851503, def fjjgidefcaideieejciaffdcffiabdgd(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  v_offset = uppermost(obj2) - height(obj5) - 1
  h_offset = leftmost(obj2) + (width(obj2) - width(obj5)) // 2
  return paint(cover(I, obj5), shift(obj5, (v_offset, h_offset)))
 
10.666666666666666, 17.216587, def bafjaeefdbgeeedcjdeeajhifecjbgdc(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  target_row = uppermost(obj2) - height(obj5) // 2 - height(obj2) // 2
  target_col = leftmost(obj2) + width(obj2) // 2 - width(obj5) // 2
  return paint(cover(I, obj5), shift(obj5, (target_row, target_col)))
 
10.333333333333334, 14.30258, def ajdhgdjddfccefeijgbgfbhefjecaihd(I):
  fives = colorfilter(objects(I, True, False, True), FIVE) # Identify '5' objects
  ci = height(I) // 2  # Calculate center row index
  moved_objects = {shift(obj, (ci - center(obj)[0], 0)) for obj in fives}  # Move objects vertically
  O = paint(cover(I, merge(fives)), merge(moved_objects))  # Paint moved objects back onto the grid
  return O
 
10.666666666666666, 18.490355, def dibacfccdaaheghdiffhcebbaecfjfdc(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  target_row = lowermost(obj2) + 1
  return paint(cover(I, obj5),
               recolor(5, frozenset((target_row + i, center(obj2)[1]) for i in range(len(obj5)))))
 
9.666666666666666, 18.993729, def feiihebdfcjieddcjfbjdccdfjaeeifg(I):
  twos = toindices(ofcolor(I, 2))
  fives = toindices(ofcolor(I, 5))
  return paint(
      cover(I, recolor(0, fives)), 
      recolor(5, frozenset((lowermost(twos) + 1 + i, center(twos)[1]) for i in range(height(fives))))
  )
 
8.333333333333334, 10.682855, def iibcebfaieadeidfigddjbhbidceafbh(I):
  five_indices = ofcolor(I, FIVE) # Get indices of all '5' cells
  if five_indices:
    min_row = uppermost(five_indices) # Find topmost '5' row
    max_row = lowermost(five_indices) # Find bottommost '5' row
    center_row = (min_row + max_row) // 2 # Calculate center row within occupied rows
    target_row = height(I) // 2 # Calculate grid's center row
    row_shift = target_row - center_row # Calculate vertical shift

    # Calculate horizontal shift for each row
    shifted_indices = set()
    for i in range(min_row, max_row + 1):
      row_indices = {(i, j) for i, j in five_indices if i == i} 
      leftmost_j = leftmost(row_indices) # Find leftmost '5' in the row
      rightmost_j = rightmost(row_indices) # Find rightmost '5' in the row
      center_j = (leftmost_j + rightmost_j) // 2 # Calculate center column in the row
      target_j = width(I) // 2 # Calculate grid's center column
      col_shift = target_j - center_j # Calculate horizontal shift for the row
      shifted_indices.update({(i + row_shift, j + col_shift) for i, j in row_indices}) 

    O = paint(cover(I, five_indices), recolor(FIVE, shifted_indices)) # Paint shifted '5's
  else:
    O = paint(I, {(FIVE, (len(I) // 2, len(I[0]) // 2))}) # Handle case with no '5's
  return O 
 
10.666666666666666, 17.565289, def ddfifdgadffiehicaihifbcbjbfjecig(I):
  fives = ofcolor(I, 5)
  target_row = lowermost(ofcolor(I, 2)) + 1
  target_col = centerofmass(toobject(ofcolor(I, 2), I))[1]
  return paint(
      cover(I, recolor(0, fives)),
      recolor(5, frozenset((target_row + i - uppermost(fives), target_col + j - leftmost(fives)) for i, j in fives))
  ) 
 
39.0, 11.329795, def decjcgjecceieadaibcbaddhcecccdgg(I):
    obj2 = toobject(ofcolor(I, 2), I)
    obj5 = toobject(ofcolor(I, 5), I)
    c2i, c2j = center(toindices(obj2))
    h5, w5 = shape(obj5)
    h2, w2 = shape(obj2)
    target_indices = frozenset({
        (FIVE, (c2i - h5 // 2 + i, c2j - w2 // 2 + j)) 
        for i in range(h2) 
        for j in range(w2) 
        if 0 <= c2i - h5 // 2 + i < len(I) and 0 <= c2j - w2 // 2 + j < len(I[0])
    })
    return paint(cover(I, obj5), target_indices)
 
8.333333333333334, 17.617027, def ihafbgbdiefgefajaebfecbiifdbjbdb(I):
  five_indices = ofcolor(I, FIVE)
  O = I
  if five_indices:
    for i, j in five_indices:
      O = paint(cover(O, {(FIVE, (i, j))}), {(FIVE, (height(I) // 2, width(I) // 2))}) # Move each '5' to the center
  else:
    O = paint(I, {(FIVE, (len(I) // 2, len(I[0]) // 2))}) # If no '5's, draw at center
  return O
 
8.0, 20.30157, def fjfeeagdgbfieedcifbahcajdceiadhe(I):
  obj2 = toobject(ofcolor(I, 2), I) # Identify the '2' object
  obj5 = toobject(ofcolor(I, 5), I) # Identify the '5' object
  target_i = lowermost(obj2) + 1 # Determine target row (below '2' object)
  target_j = leftmost(obj2) # Determine target column (aligned with left edge of '2' object)
  new_width = width(obj2) # Calculate new width for '5' object
  resized_obj5 = toobject(
      product(
          interval(0, height(obj5), 1), # Original height of '5' object
          interval(0, new_width, 1)  # New width of '5' object
      ),
      I # Use the original grid for color information during resizing
  )
  return paint(
      cover(I, obj5), # Remove the original '5' object
      shift(resized_obj5, (target_i, target_j)) # Place the resized '5' object at the target location
  )
 
9.666666666666666, 18.055765, def abedbieefceaebbbijgidejiidbheddd(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj5 = toobject(ofcolor(I, 5), I)
  target_i = lowermost(obj2) + 1
  target_j = leftmost(obj2)
  resized_obj5 = toobject(
      frozenset(
          (5, (i, j)) 
          for i in range(target_i, target_i + height(obj5)) 
          for j in range(target_j, target_j + width(obj2))
      ),
      I
  )
  return paint(cover(I, obj5), resized_obj5)
 
22.0, 8.928565, def adfdefhcjjjjeahdiciaedcdghedfcic(I):
  twos = ofcolor(I, 2)
  fives = ofcolor(I, 5)
  target_row = lowermost(twos) + 1
  left_edge = leftmost(twos)
  new_fives = {(target_row + i, left_edge + j) for i in range(height(fives)) 
                for j in range(width(twos))}
  return paint(cover(I, recolor(0, fives)), recolor(5, frozenset(new_fives))) 
 
17.666666666666668, 42.61235, def fjfcehdedjebeechjhecfaeeggaccaaa(I):
  two_indices = ofcolor(I, TWO) # Find indices of '2'
  five_indices = ofcolor(I, FIVE) # Find indices of '5'
  if two_indices and five_indices:
    two_obj = toobject(two_indices, I) # Create '2' object
    five_obj = toobject(five_indices, I) # Create '5' object
    new_five_indices = shift( # Move '5' object
        vupscale( # Vertically upscale '5' object
            normalize(five_indices),  # Normalize '5' object for upscaling
            height(two_obj) # Match height of '2' object
        ),
        (
          uppermost(two_indices) - uppermost(five_indices), # Align top of '5' with '2'
          center(two_indices)[1] - center(five_indices)[1] # Horizontally center '5' with '2'
        )
    )
    return paint( # Paint the result on a blank canvas
      canvas(ZERO, shape(I)), # Create blank canvas
      toobject(new_five_indices, I) # Create object from new indices
    )
  return I # Return input if no '2' or '5' objects found
 
22.333333333333332, 44.466286, def bjfceigheiaaefbciafgjbggehdjafbb(I):
  two_indices = ofcolor(I, TWO) # Get indices of "2" cells
  five_indices = ofcolor(I, FIVE) # Get indices of "5" cells
  O = canvas(ZERO, shape(I)) # Create blank canvas
  if two_indices and five_indices:
    target_corner = add(ulcorner(two_indices), (1, 1)) # Calculate target corner
    for i, j in five_indices:
      new_five_obj = shift( 
        {(FIVE, (target_corner[0] + i - uppermost(five_indices), target_corner[1] + j - leftmost(five_indices)))}, # Calculate cell position in expanded "5"
        (0, 0) # Dummy shift for consistent syntax
      )
      O = paint(O, new_five_obj) # Paint expanded "5" on canvas
  return O
 
18.666666666666668, 39.7263, def fggaebiabhfeebcbjbabhahiffdfcfah(I):
  two_obj = toobject(ofcolor(I, TWO), I) # Create "2" object
  five_obj = toobject(ofcolor(I, FIVE), I) # Create "5" object
  if two_obj and five_obj:
    target_corner = ulcorner(two_obj) # Get top-left corner of "2" object
    h_factor = height(two_obj) // height(five_obj) # Calculate vertical scaling factor
    w_factor = width(two_obj) // width(five_obj) # Calculate horizontal scaling factor
    new_five_obj = shift(
      upscale(five_obj, max(h_factor, 1)),
      add(target_corner, (1, 1))
    )
    return paint(canvas(ZERO, shape(I)), new_five_obj)
  return I
 
