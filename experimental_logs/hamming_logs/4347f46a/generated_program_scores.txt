0.2436868686868687, 68.37223, def abacahjcgbhaedgficaedbgebcbjacfe(I):
    objs = objects(I, True, False, False)
    O = I
    for obj in objs:
        for j in range(leftmost(obj) + 1, rightmost(obj)):
            O = cover(O, {(i,j) for i in range(uppermost(obj) + 1, lowermost(obj))})
    return O
 
0.2436868686868687, 68.37223, def fcfeacbddihhehadabiaddabjjidcaca(I):
  objs = objects(I, T, F, T)
  modified_objs = frozenset()
  for obj in objs:
    if width(obj) > 2:
      left = shift(obj, (0, -1))
      right = shift(obj, (0, 1))
      modified_objs = modified_objs | (obj - left - right)
    else:
      modified_objs = modified_objs | obj
  O = paint(canvas(mostcolor(I), shape(I)), modified_objs)
  return O
 
0.11978415103415103, 14.592798, def bjaieddegciaebgfbdcfdgbejcchcaab(I):
  O = I
  for obj in objects(I, T, F, T):
    if width(obj) > 2:
      for (i, j) in toindices(obj):
        if j == leftmost(obj) + 1 or j == rightmost(obj) - 1:
          O = fill(O, mostcolor(I), {(i, j)})
  return O
 
0.22418630751964086, 70.32014, def acchacbggfbfegiebhccabccdgaeigei(I):
  parts = hsplit(I, 3)
  new_parts = tuple()
  for part in parts:
    if width(part) > 1:
      new_parts += (crop(part, (0, 0), (height(part), 1)),)
    else:
      new_parts += (part,)
  O = hconcat(new_parts[0], new_parts[1])
  for i in range(2, len(new_parts)):
    O = hconcat(O, new_parts[i])
  return O
 
0.14461580086580086, 26.014072, def ffajfdedfedgehhdabffcbcdjabjdjeh(I):
    objs = objects(I, T, F, T)
    thinned_objs = frozenset({
        branch(
            portrait(obj), 
            sfilter(obj, lambda c: c[1][0] % 2 == uppermost(obj) % 2), 
            sfilter(obj, lambda c: c[1][1] % 2 == leftmost(obj) % 2)
        ) for obj in objs
    })
    O = paint(fill(I, mostcolor(I), asindices(I)), merge(thinned_objs))
    return O 
 
0.19223484848484848, 24.211853, def ffbfbejfcfhdeeacjidafgffdhgiaedg(I):
    objs = partition(I)
    thinned_objs = mapply(
        lambda obj: branch(
            portrait(obj),
            sfilter(obj, lambda c: c[1][0] % 2 == 0), 
            sfilter(obj, lambda c: c[1][1] % 2 == 0)
        ), 
        objs
    )
    O = paint(fill(I, mostcolor(I), asindices(I)), thinned_objs)
    return O
 
0.19388828763828767, 21.277245, def affbeffbaeacebcaaebeiibgedaaaaeh(I):
    h, w = shape(I)
    O = I
    for i in range(h):
        for j in range(w):
            if (i % 2 != 0 and h > w) or (j % 2 != 0 and w >= h):
                O = fill(O, mostcolor(I), {(i, j)}) 
    return O
 
0.11978415103415103, 9.717063, def fdjhhbhcbgfdecabaedefehdhcebjdbe(I):
    objs = objects(I, T, F, T)
    modified_objs = mapply(lambda obj: sfilter(obj, lambda cell: cell[1][1] != rightmost(obj) - 1) if width(obj) > 1 else obj, objs)
    O = paint(canvas(mostcolor(I), shape(I)), modified_objs)
    return O
 
0.0, 0.0, def hcjddbgbcfffeebijgbceaaficafaiba(grid):
  objs = objects(grid, T, F, F)
  return paint(canvas(mostcolor(grid), shape(grid)), merge({toobject(box(obj), grid) for obj in objs}))
 
