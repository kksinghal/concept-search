11.0, 13.511634, def cjeifceacbdeebiaacegabibiefgdacf(I):
  O = I
  for i in range(1, height(I) - 1):
    for j in range(1, width(I) - 1):
      if index(I, (i,j)) != mostcommon(I) and all(index(I, (i + di, j + dj)) == index(I, (i, j)) for di, dj in [(0,1),(0,-1),(1,0),(-1,0)]):
        O = fill(O, TWO, {(i,j)})
  return O 
 
1.5, 8.281623, def igfdabhfbfeeeccdbiiifhfdfhdihjba(I):
  objs = objects(I, T, F, T)
  for obj in objs:
    inbox_indices = inbox(toindices(obj))
    for x, (i, j) in obj:
      if (i,j) in inbox_indices:
        I = fill(I, TWO, {(i,j)})
  O = I
  return O
 
87.0, 86.85616, def efiedfahhghceechagbafegdcfhigcda(I):
  O = I
  for i in range(len(I)):
    for j in range(len(I[0])):
      if index(I, (i,j)) != mostcommon(I) and (i,j) not in delta(ofcolor(I, index(I,(i,j)))):
        O = fill(O, TWO, {(i,j)}) 
  return O
 
4.0, 5.1252675, def bfgcebadhbcdefdaaeghbddcjbcdcbeg(I):
  obj = argmax(objects(I, T, F, T), size)
  corner = ulcorner(obj)
  shifted = shift(obj, (-corner[0]-1, -corner[1]-1))
  filled = fill(canvas(2,(3,4)), mostcolor(I), delta(shifted))
  shifted_back = shift(asobject(filled), (corner[0]+1, corner[1]+1))
  O = paint(I, shifted_back)
  return O
 
0.0, 0.0, def habccfbgabdaeccbbhagacjdfijjaicc(I):
  objs = objects(I, T, T, T) 
  modified_objs = frozenset()
  for obj in objs:
    ul = ulcorner(obj)
    lr = lrcorner(obj)
    inner_box = frozenset((i,j) for i in range(ul[0]+1, lr[0]) for j in range(ul[1]+1, lr[1]))
    modified_obj = recolor(2, intersection(toindices(obj), inner_box))
    modified_objs = insert(modified_obj, modified_objs)
  O = paint(I, merge(modified_objs))
  return O
 
30.5, 15.5037365, def acacafdfafefedahbdddfebedcjjbcif(I):
  # Partition the grid based on color, excluding background
  objs = fgpartition(I) 
  # Find the largest object
  largest_obj = argmax(objs, size) 
  # Create a new object representing the interior with color 2
  interior_obj = recolor(2, delta(toindices(largest_obj))) 
  # Paint the interior object onto the original grid
  O = paint(I, interior_obj) 
  return O
 
13.0, 26.634548, def decgiffabbjdeafcbbcddecdcfcddeih(I):
    objs = objects(I, T, F, T)
    for obj in objs:
        border = toindices(obj) & backdrop(obj)
        I = underfill(I, TWO, difference(toindices(obj), border))
    O = I
    return O
 
19.5, 26.425217, def fbadbfcbbfdeecdjbddijdddjjajecde(I):
  obj = argmax(objects(I, T, F, T), size)
  corner = ulcorner(obj)
  replacement = canvas(2, (3, 4))
  O = paint(cover(I, obj), shift(asobject(replacement), (corner[0] + 1, corner[1] + 1)))
  return O
 
1.5, 8.281623, def dgfeaicjcdcbebhcbfffiahfeaechcbf(I):
  objs = objects(I, T, T, T)
  modified_objs = frozenset()
  for obj in objs:
    inner_box = inbox(obj)
    modified_obj = recolor(2, intersection(toindices(obj), inner_box))
    modified_objs = insert(modified_obj, modified_objs)
  O = paint(I, merge(modified_objs))
  return O
 
2.5, 3.874306, def aggcdbjbdcbcehfeahaegidcjfhchbfb(I):
  largest_obj = argmax(objects(I, T, T, T), size)
  inner_indices = difference(backdrop(largest_obj), box(largest_obj))
  return fill(I, 2, inner_indices)
 
4.0, 9.714299, def heddcaeaaaffebbhihjhbdcddehcaace(I):
  objs = objects(I, T, T, T)
  largest_obj = argmax(objs, size)
  inner_obj = toobject(inbox(largest_obj), I)
  return paint(I, recolor(2, inner_obj))
 
4.0, 4.967882, def fjdefahfdaahebcjaeddaffaabbjebhf(I):
  objs = fgpartition(I)
  def recolor_inner(obj):
    up = uppermost(obj)
    lp = leftmost(obj)
    return recolor(2, frozenset((i,j) for i in range(up+1, up+4) for j in range(lp+1, lp+4)).intersection(toindices(obj)))
  recolored = frozenset(recolor_inner(obj) for obj in objs)
  O = paint(I, merge(recolored))
  return O
 
14.5, 8.233304, def ffiahbcchhdeejebibcheecgbbgbedgf(I):
  objs = fgpartition(I)
  def modify_object(obj):
    h, w = shape(obj)
    inner_w = max(1, w-4)
    inner_h = max(1, h-4)
    start = (uppermost(obj) + 2, leftmost(obj) + 2)
    inner = frozenset((i,j) for i in range(start[0], start[0] + inner_h) for j in range(start[1], start[1] + inner_w)).intersection(toindices(obj))
    return recolor(2, inner)
  recolored_objs = frozenset(modify_object(obj) for obj in objs)
  O = paint(I, merge(recolored_objs))
  return O
 
29.5, 49.180172, def bdagdebdcbdaebeeiebhcjcegbdgagig(I):
  O = canvas(mostcolor(I), shape(I))
  objs = objects(I, T, F, T)
  for obj in objs:
    O = underpaint(O, recolor(TWO, inbox(toindices(obj))))
  return O
 
13.0, 8.841979, def fhfajiigfchaehjcjbbabegheeeffjfa(I):
  obj = argmax(objects(I, T, F, T), size)
  O = I
  for i in range(1, 4):
    for j in range(1, 5):
      O = paint(O, {(2, (uppermost(obj)+i-1, leftmost(obj)+j-1))})
  return O
 
36.0, 42.705017, def dccchejjabebedjgihbibagjehbfdjbi(I):
  obj = argmax(objects(I, T, F, T), size)
  inner_corner = (uppermost(obj) + 1, leftmost(obj) + 1)
  replacement_area = crop(canvas(2, shape(I)), inner_corner, (3, 4))
  O = paint(cover(I, obj), asobject(replacement_area))
  return O
 
10.0, 7.632833, def ficdecfdbfbbehgabgfdjcbbcdbhffcd(I):
  objs = fgpartition(I)
  def paint_inner(obj):
    if width(obj) <= 3 or height(obj) <= 3:
      return obj
    ul = add(ulcorner(obj), (1, 1))
    lr = subtract(lrcorner(obj), (1, 1))
    inner = frozenset((i, j) for i in range(ul[0], lr[0] + 1) for j in range(ul[1], lr[1] + 1))
    return recolor(2, inner.intersection(toindices(obj)))
  O = paint(I, merge(apply(paint_inner, objs)))
  return O 
 
28.0, 26.786596, def hjfbeecajhgeebfjjfafbifbgeajecbi(I):
  objs = objects(I, T, F, T)
  inbox_cells = mfilter(objs, lambda obj: toobject(inbox(toindices(obj)), I))
  O = paint(I, recolor(TWO, inbox_cells))
  return O
 
10.0, 14.211819, def dcdigdhdafbcefaaacaeefbecddegigi(I):
  obj = argmax(objects(I, T, F, T), size)
  corner = ulcorner(obj)
  shifted_corner = (corner[0]+1, corner[1]+1)
  O = I
  for i in range(3):
    O = paint(O, recolor(2, toobject(connect(shifted_corner, (shifted_corner[0]+i, shifted_corner[1]+3)), I)))
  return O
 
14.5, 17.98742, def cbfcgbhegcbdefgebcaagafhafjdbcch(I):
  # Find the largest object
  largest_obj = argmax(objects(I, T, T, T), size)
  # Get its bounding box
  bbox = backdrop(largest_obj)
  # Define a function to remove a layer from a given side of the bounding box
  def remove_layer(side):
    if side == "top": return {(i,j) for i,j in bbox if i != uppermost(bbox)}
    if side == "bottom": return {(i,j) for i,j in bbox if i != lowermost(bbox)}
    if side == "left": return {(i,j) for i,j in bbox if j != leftmost(bbox)}
    if side == "right": return {(i,j) for i,j in bbox if j != rightmost(bbox)}
  # Remove a layer from all sides except the bottom
  inner_rect = remove_layer("top")
  inner_rect = remove_layer("left")
  inner_rect = remove_layer("right")
  # Fill the remaining area with '2'
  return fill(I, 2, inner_rect)
 
6.0, 6.7877893, def jgjfdfceddfbeajgjibbfdbcfccbegcb(I):
  # Find the largest object
  largest_obj = argmax(objects(I, T, T, T), size)
  # Get the bounding box of the largest object
  bbox = backdrop(largest_obj)
  # Calculate the height of the largest object
  obj_height = height(largest_obj)
  # Calculate the starting row for filling
  start_row = uppermost(bbox) + (obj_height // 2)
  # Fill the inner area with '2' from the starting row to the bottom
  return fill(I, 2, {(i,j) for i,j in difference(bbox, box(largest_obj)) if i >= start_row})
 
15.5, 18.796019, def bbedcadefceheadebbjdibbbffeajfce(I):
  objs = fgpartition(I)
  def recolor_half_inner(obj):
    if width(obj) <= 3 or height(obj) <= 3:
      return obj
    ul = add(ulcorner(obj), (1, 1))
    inner = frozenset((i, j) for i in range(ul[0], ul[0] + 3) for j in range(ul[1] + width(obj)//2, min(ul[1] + width(obj)//2 + 3, width(obj))))
    return recolor(2, inner.intersection(toindices(obj)))
  recolored = apply(recolor_half_inner, objs)
  O = paint(I, merge(recolored))
  return O
 
15.0, 16.6299, def cjefcecaceefeajaijaaefjcahjgedea(I):
  # Get the largest object
  largest_obj = argmax(objects(I, T, T, T), size)
  
  # Determine fill area based on largest object's position
  fill_area = backdrop(shift(
      normalize(largest_obj), 
      (1 if uppermost(largest_obj) < len(I) // 2 else -1 + height(largest_obj), 1)
  )) & backdrop(largest_obj)
  
  # Fill the determined area
  return paint(I, recolor(2, fill_area))
 
9.5, 15.409898, def bffeaaafaibaecbaiiahbabefbffeief(I):
  # Get largest object and its center
  largest_obj = argmax(objects(I, T, T, T), size)
  center_i, _ = centerofmass(largest_obj)
  
  # Define inner area
  inner_area = difference(backdrop(largest_obj), box(largest_obj))
  
  # Conditionally filter indices based on center's row
  fill_area = frozenset((i, j) for i, j in inner_area if (i < center_i) == (uppermost(largest_obj) < len(I) // 2))
  
  # Fill the selected area
  return paint(I, recolor(2, fill_area))
 
6.0, 13.975709, def dbddeaibdjgbeibajfejfbaifgebfcij(I):
  # Get largest object and calculate its height
  largest_obj = argmax(objects(I, T, T, T), size)
  obj_height = height(largest_obj)

  # Define inner area
  inner_area = difference(backdrop(largest_obj), box(largest_obj))

  # Calculate offset based on largest object's position
  offset = 1 if uppermost(largest_obj) < len(I) // 2 else obj_height - 1 

  # Fill every other row in the inner area
  fill_area = frozenset((i, j) for i, j in inner_area if abs(i - uppermost(largest_obj) - offset) % 2 == 0)

  # Fill the selected cells
  return paint(I, recolor(2, fill_area))
 
17.5, 15.597339, def idddfgfabfhbeehcjcffbfieebejdjed(I):
  objs = fgpartition(I)
  def recolor_bottom_right(obj):
    if width(obj) <= 3 or height(obj) <= 3:
      return obj
    ul = add(ulcorner(obj), (height(obj) - 3, width(obj) // 2))
    inner_square = shift(asindices(canvas(0, (3, 3))), ul)
    return recolor(2, intersection(inner_square, toindices(obj)))
  O = paint(I, merge(apply(recolor_bottom_right, objs)))
  return O
 
18.0, 18.63705, def hcbabffddjaceehdjeifiaeiigiceedd(I):
  objs = fgpartition(I)
  def recolor_bottom_square(obj):
    if width(obj) <= 3 or height(obj) <= 3:
      return obj
    bottom_right_corner = lrcorner(obj)
    start_corner = (bottom_right_corner[0] - 2, max(0, bottom_right_corner[1] - 2)) 
    square_indices = frozenset((i, j) for i in range(start_corner[0], start_corner[0] + 3) 
                             for j in range(start_corner[1], start_corner[1] + 3))
    return recolor(2, intersection(square_indices, toindices(obj)))
  O = paint(I, merge(apply(recolor_bottom_square, objs)))
  return O
 
16.5, 15.06135, def fggjeaabbecceedfbefdcfaedhhdcgeb(I):
  objs = fgpartition(I)
  def recolor_square(obj):
    if width(obj) <= 3 or height(obj) <= 3:
      return obj
    center_j = leftmost(obj) + width(obj) // 2
    bottom_i = lowermost(obj)
    square_indices = frozenset(
      (bottom_i - i, center_j + j) 
      for i in range(3) 
      for j in range(-1, 2) 
      if (bottom_i - i, center_j + j) in toindices(obj)
    )
    return recolor(2, square_indices)
  O = paint(I, merge(apply(recolor_square, objs)))
  return O
 
20.0, 17.667389, def dfcchdafccbceafabccfecachhjdaaba(I):
  objs = fgpartition(I)
  def paint_bottom_right(obj):
    if width(obj) <= 3 or height(obj) <= 3:
      return obj
    right_half = frozenset((i, j) for i, j in toindices(obj) if j >= leftmost(obj) + width(obj) // 2)
    bottom_part = frozenset((i, j) for i, j in right_half if i >= lowermost(obj) - 2)
    return recolor(2, bottom_part)
  O = paint(I, merge(apply(paint_bottom_right, objs)))
  return O
 
4.0, 4.5562654, def dacebdbdhaeheajeaaabbcdjbjdhceah(I):
  # Get the largest object
  largest_obj = argmax(objects(I, T, T, T), size)

  # Calculate inner rectangle
  inner_rect = difference(backdrop(largest_obj), box(largest_obj))

  # Define a function to get the correct half indices
  def get_half_indices(indices):
    return sfilter(indices, lambda idx: idx[0] < len(I) // 2) if uppermost(largest_obj) < len(I) // 2 else sfilter(indices, lambda idx: idx[0] >= len(I) // 2)

  # Fill the correct half of the inner rectangle
  return fill(I, 2, get_half_indices(inner_rect)) 
 
5.0, 3.8053927, def bdechddbadhaeajejgcafhiaciiibaff(I):
  objs = objects(I, univalued=False, diagonal=True, without_bg=True)
  def recolor_inner(obj):
    ul = astuple(uppermost(obj) + 1, leftmost(obj) + 1)
    return recolor(2, product(interval(ul[0], ul[0] + 3, 1), interval(ul[1], ul[1] + 3, 1)).intersection(toindices(obj)))
  O = paint(I, merge(apply(recolor_inner, objs)))
  return O
 
7.0, 15.353114, def abeffdiabdcjehbebhdccfbhcjheehgj(I):
  objs = objects(I, T, F, T)
  for obj in objs:
    inbox_indices = inbox(toindices(obj))
    O = fill(I, TWO, inbox_indices)
  return O
 
17.0, 24.135324, def jjgabeedfadeefcajiajejbbdcccgiae(I):
  obj = argmax(objects(I, T, F, T), size)  # Largest object
  corner = ulcorner(obj)
  start = (corner[0] + 1, corner[1] + 1)  # Offset starting point
  rect = crop(canvas(0, (10,10)), start, (3,4)) # Get the 3x4 rectangle
  bg_rect = cellwise(rect, canvas(mostcolor(I), (3,4)), 2) # Replace non-matching cells with 2
  O = paint(I, asobject(bg_rect)) # Paint back onto original grid at the offset
  return O
 
14.5, 24.307102, def ddiedeafgbdfeahcjefdbefcgiabfeha(I):
  obj = argmax(objects(I, T, F, T), size)
  c = ulcorner(obj)
  O = paint(I, recolor(2, frozenset((c[0]+i, c[1]+j) for i in range(2,5) for j in range(2,6) if index(I,(c[0]+i, c[1]+j)) == mostcolor(I))))
  return O
 
38.5, 34.96591, def aiebdcdbfeecedfcbefcfcfaiihccbac(I):
  objs = fgpartition(I)
  def recolor_inner(obj):
    ul = ulcorner(obj)
    shifts = ((1, 1), (1, 2), (2, 1), (2, 2))
    return recolor(2, frozenset((i + di, j + dj) for di, dj in shifts for i, j in toindices(obj) if 0 <= i + di < len(I) and 0 <= j + dj < len(I[0])))
  O = paint(I, merge(apply(recolor_inner, objs)))
  return O
 
8.5, 6.3576417, def bafcaeffidgeejbaadghiiccabgdifhi(I):
  largest_obj = argmax(objects(I, T, T, T), size)
  inbox_rows = {i for i, j in inbox(largest_obj)}
  recolor_area = {(i, j) for i, j in backdrop(largest_obj) if i in inbox_rows}
  return fill(I, 2, recolor_area)
 
8.5, 10.372465, def haafbdadaaaiehfabigiiefhchcchccd(I):
  objs = objects(I, univalued=False, diagonal=True, without_bg=True)
  def recolor_inner(obj):
    shifted_obj = shift(obj, (1, 1))
    cropped_obj = frozenset((v, (i, j)) for v, (i, j) in shifted_obj if 0 <= i < height(obj) - 1 and 0 <= j < width(obj) - 1)
    return recolor(2, toindices(cropped_obj))
  recolored_objs = apply(recolor_inner, objs)
  O = paint(I, merge(recolored_objs))
  return O
 
8.0, 4.960617, def gcbdccfcbaffeiicbefhdheedccedaah(I):
  objs = objects(I, univalued=False, diagonal=True, without_bg=True)
  def recolor_inner(obj):
    ci, cj = centerofmass(obj)
    square_indices = frozenset((ci + i - 1, cj + j - 1) for i in range(3) for j in range(3))
    recolor_indices = intersection(square_indices, toindices(obj))
    return recolor(2, recolor_indices)
  recolored_objs = apply(recolor_inner, objs)
  O = paint(I, merge(recolored_objs))
  return O
 
36.0, 5.2988105, def digicjccjefjebgfbbbaeaadfcaicfcd(I):
  O = I
  for i in range(1, height(I) - 1):
    for j in range(1, width(I) - 1):
      if index(I, (i,j)) != mostcolor(I) and any(index(I, (i+di, j+dj)) == mostcolor(I) for di, dj in [(1,0), (-1,0), (0,1), (0,-1)]):
        O = fill(O, TWO, {(i,j)})
  return O
 
20.0, 24.391766, def efgeefaagabcecifibhdbdhbbfficbce(I):
  obj = argmax(objects(I, T, F, T), size)
  start = add(ulcorner(obj), (1, 1))
  canvas_rect = crop(canvas(2, (10, 10)), start, (3, 4))
  rect_indices = asindices(canvas_rect)
  bg_indices = sfilter(rect_indices, lambda loc: index(I, loc) == mostcolor(I))
  O = paint(I, recolor(2, bg_indices))
  return O
 
8.5, 12.93075, def abdagjcijcgfeajjiafchefiaicdeehe(I):
  def recolor_grid(i, j, obj): 
    return fill(I, 2, frozenset((x, y) for x in range(i + 1, i + 4) for y in range(j + 1, j + 4) if (x, y) in toindices(obj)))
  return next(recolor_grid(i, j, obj)
              for obj in objects(I, univalued=False, diagonal=True, without_bg=True)
              for i, j in [ulcorner(obj)]) 
 
13.5, 7.0122685, def bjbedecaccabebcibhbhhaaeadacbeea(I):
  objs = objects(I, T, T, T)
  modified_objs = frozenset()
  for obj in objs:
    border = difference(toindices(obj), inbox(obj))
    modified_obj = combine(recolor(2, obj), toobject(border, I))
    modified_objs = insert(modified_obj, modified_objs)
  O = paint(I, merge(modified_objs))
  return O
 
13.0, 26.634548, def achbbbbebabaecbajfbegbgaaibcadeb(I):
  O = I
  for obj in objects(I, T, T, T):
    O = underfill(O, 2, inbox(obj))
  return O
 
51.0, 49.550453, def afegfffdfhddeaiaaedbfgafffcccabc(I):
  modified_grid = tuple(tuple(2 if (i > 0 and i < len(I)-1) and (j > 0 and j < len(I[0])-1) else I[i][j] for j in range(len(I[0]))) for i in range(len(I)))
  return modified_grid
 
0.0, 0.0, def efdfcaadeccbehffaeejfdeiccibdafe(I):
  objs = objects(I, T, F, T) 
  for obj in objs:
    inner_frame = difference(toindices(obj), box(toindices(obj))) 
    I = fill(I, TWO, inner_frame)
  O = I
  return O
 
13.0, 26.634548, def ibafaaecggbaeighjdfcdcadafcaheag(I):
  objs = objects(I, T, F, T) 
  for obj in objs:
    for index in toindices(obj):
      if all(index + d in toindices(obj) for d in (UP, DOWN, LEFT, RIGHT)):
        I = fill(I, TWO, {index})
  O = I
  return O
 
2.5, 2.2910872, def ijfeacdhcfajehdfbbedcfbcbbejfcga(I):
  objs = objects(I, T, T, T)
  largest_obj = argmax(objs, size)
  inner_indices = difference(backdrop(largest_obj), box(largest_obj))
  modified_grid = fill(I, 2, inner_indices)
  if len(objs) > 1:
    second_largest_obj = argmax(difference(objs, {largest_obj}), size)
    bottom_second_row = shift(
        intersection(
            toindices(second_largest_obj), 
            hfrontier((lowermost(second_largest_obj)-1, 0))
        ), 
        (0,1)
    )
    modified_grid = fill(modified_grid, 2, bottom_second_row)
  return modified_grid
 
5.5, 4.967904, def bcaecgffaiigeaiebffajejeigbeaehi(I):
  objs = objects(I, T, T, T)
  largest_obj = argmax(objs, lambda obj: width(obj) * height(obj))
  inner_obj = toobject(difference(backdrop(largest_obj), box(largest_obj)), I)
  O = paint(I, recolor(2, inner_obj))
  if size(objs) > 1:
    second_largest = argmax(difference(objs, {largest_obj}), size)
    target_row = intersection(
      toindices(second_largest), 
      hfrontier((lowermost(second_largest) - 2, 0))
    )
    O = paint(O, recolor(2, toobject(target_row, I)))
  return O
 
7.0, 6.4862475, def fifeidcebfjeeddcbegaicbfgccjgacf(I):
  objs = objects(I, T, T, T)
  largest_obj = argmax(objs, size)
  inner_area = difference(inbox(largest_obj), box(largest_obj))
  I = fill(I, 2, inner_area)
  if size(objs) > 1:
    second_largest = argmax(difference(objs, {largest_obj}), size)
    second_bottom_row = hfrontier((lowermost(second_largest) - 2, leftmost(second_largest) + 1))
    I = fill(I, 2, intersection(second_bottom_row, toindices(second_largest)))
  return I
 
3.5, 2.2885122, def dbiebcicfbcaeaaiijdgbdfaeaeehbda(I):
  objs = objects(I, T, T, T)
  largest = argmax(objs, size)
  I = fill(I, 2, difference(backdrop(largest), box(largest)))
  if len(objs) > 1:
    remaining_objs = difference(objs, {largest})
    second_largest = argmax(remaining_objs, size)
    target_indices = set()
    for i, j in toindices(second_largest):
      if i == lowermost(second_largest) - 2 and leftmost(second_largest) < j < rightmost(second_largest):
        target_indices.add((i, j))
    I = fill(I, 2, frozenset(target_indices))
  return I
 
12.5, 25.409853, def beedhagebigfeigcbfajbgbfhecjbfad(I):
  obj = argmax(objects(I, T, F, T), size)
  if width(obj) >= height(obj):
    corner = ulcorner(obj)
    offset = (1, 1)
  else:
    corner = llcorner(obj)
    offset = (-2, 1)
  shifted = shift(toindices(obj), add(corner, offset))
  recolored = recolor(2, frozenset((i, j) for i in range(3) for j in range(3)).intersection(shift(shifted, (-1, -1))))
  O = paint(I, recolored)
  return O
 
15.0, 12.001517, def ebdaebfjaabfehbjjabdjcidecacedif(I):
  obj = argmax(objects(I, T, F, T), size)
  orientation = 'horizontal' if width(obj) >= height(obj) else 'vertical'
  corner = {'horizontal': ulcorner(obj), 'vertical': llcorner(obj)}[orientation]
  offset = {'horizontal': (1, 1), 'vertical': (-2, 1)}[orientation]
  square = shift(frozenset((i, j) for i in range(3) for j in range(3)), offset)
  recolored = recolor(2, toindices(toobject(square, subgrid(obj, I))))
  O = paint(I, recolored)
  return O
 
5.0, 3.8053927, def cgffejgdfjjfeajhbjbedbahcafjdfbf(I):
  def process_object(obj):
    h, w = shape(obj)
    start_i = uppermost(obj) + 1 if w >= h else lowermost(obj) - 2
    start_j = leftmost(obj) + 1
    return frozenset((2, (i, j)) for i in range(start_i, start_i + 3) for j in range(start_j, start_j + 3) if (i, j) in toindices(obj))
  O = paint(I, merge(apply(process_object, objects(I, T, F, T))))
  return O
 
0.0, 0.0, def gjfceebejdfjedehjhabbhechdafhbfd(I):
  # Get all objects in the input grid
  objs = objects(I, univalued=False, diagonal=True, without_bg=True)
  
  def recolor_inner(obj):
    # Find the upper-left corner of the inner rectangle
    ul = astuple(uppermost(obj) + 1, leftmost(obj) + 1)
    # Find the lower-right corner of the inner rectangle
    lr = astuple(lowermost(obj) - 1, rightmost(obj) - 1) 
    # Create the indices for the inner rectangle
    inner_rect = product(interval(ul[0], lr[0] + 1, 1), interval(ul[1], lr[1] + 1, 1))
    # Recolor the inner rectangle to '2'
    return recolor(2, inner_rect.intersection(toindices(obj)))
  
  # Apply the recoloring to each object and paint on the input grid
  return paint(I, merge(apply(recolor_inner, objs)))
 
1.5, 8.281623, def ibcfcbbafcebedabbagddeifijcehaea(I):
  objs = objects(I, T, T, T)
  modified_objs = frozenset({recolor(2, inbox(obj)) for obj in objs})
  O = paint(I, merge(modified_objs))
  return O
 
3.5, 2.8252337, def hbeffdceedfcefabidcaacifbgjdijfi(I):
  objs = objects(I, T, T, T)
  largest_obj = argmax(objs, size)
  inner_indices = difference(backdrop(largest_obj), box(largest_obj))
  O = fill(I, 2, inner_indices)
  if size(objs) > 1:
    second_largest = argmax(difference(objs, {largest_obj}), size)
    target_loc = (lowermost(second_largest) - 1, rightmost(largest_obj))
    O = paint(O, recolor(2, toobject({target_loc, add(target_loc, DOWN)}, I)))
  return O
 
4.5, 2.831838, def efedahfgdfcdecfdibefffbbiiccdfbd(I):
  objs = objects(I, T, T, T)
  largest_obj = argmax(objs, lambda obj: len(obj))
  inner_obj = toobject(difference(backdrop(largest_obj), box(largest_obj)), I)
  O = paint(I, recolor(2, inner_obj))
  if size(objs) > 1:
    second_largest = argmax(difference(objs, {largest_obj}), size)
    target_row = intersection(
      toindices(second_largest), 
      hfrontier((lowermost(second_largest) - 1, 0))
    )
    target_col = rightmost(largest_obj)
    target_loc = extract(target_row, lambda loc: loc[1] >= target_col)
    O = paint(O, recolor(2, toobject({target_loc, add(target_loc, DOWN)}, I)))
  return O
 
4.5, 4.701403, def adeaafidfabcegjebafbdfehddjecihd(I):
  objs = objects(I, T, T, T)
  largest_obj = argmax(objs, size)
  O = fill(I, 2, difference(backdrop(largest_obj), box(largest_obj)))
  if size(objs) > 1:
    second_largest = argmax(difference(objs, {largest_obj}), size)
    direction = (sign(center(second_largest)[0] - center(largest_obj)[0]), 0)
    target_loc = add(urcorner(largest_obj), direction)
    O = paint(O, recolor(2, toobject({target_loc, add(target_loc, direction)}, I)))
  return O
 
11.0, 4.6971006, def jdgddfeaadcdehfejbdgfgjjhfdfcaad(I):
  objs = objects(I, T, T, T)
  O = I
  for obj in objs:
    if obj != argmax(objs, size):
      O = paint(O, recolor(2, obj))
  return fill(O, 2, difference(backdrop(argmax(objs, size)), box(argmax(objs, size))))
 
4.0, 2.8955128, def jdeefabdbbfbeejabdiegedcacajfdfc(I):
  objs = objects(I, T, T, T)
  largest_obj = argmax(objs, lambda obj: len(obj))
  O = paint(I, recolor(2, toobject(difference(backdrop(largest_obj), box(largest_obj)), I)))
  if size(objs) > 1:
    second_largest = argmax(difference(objs, {largest_obj}), size)
    ref_loc = (
        lowermost(second_largest) if lowermost(second_largest) > center(largest_obj)[0] else uppermost(second_largest),
        rightmost(largest_obj)
    )
    O = paint(O, recolor(2, toobject({ref_loc, add(ref_loc, (sign(center(second_largest)[0] - center(largest_obj)[0]), 0))}, I)))
  return O
 
6.0, 11.381434, def hbgeaiebaefdedajabeicbfedaecbbcd(I):
  def process_cell(i, j, grid):
    if (i, j) not in toindices(obj):
      return grid[i][j]
    region = frozenset((m,n) for m in range(i-1, i+2) for n in range(j-1, j+2)) 
    return 2 if len(region.intersection(toindices(obj))) == 9 else grid[i][j] 
  for obj in objects(I, True, False, True):
    O = canvas(mostcolor(I), shape(I))
    for i in range(len(I)):
      for j in range(len(I[0])):
        O = fill(O, process_cell(i, j, I), {(i,j)}) 
  return O 
 
6.5, 4.070346, def afaifehcjedcecadiacdefcbdaibdeab(I):
  def inner_recolor(obj):
    up, lp = ulcorner(obj)
    shifted_obj = shift(obj, (-up-1, -lp-1))
    filled_region = fill(canvas(2, (3,3)), mostcolor(I), delta(shifted_obj))
    return shift(asobject(filled_region), (up+1, lp+1))
  return paint(I, merge(apply(inner_recolor, objects(I, True, False, True))))
 
36.0, 5.2988105, def efeeecaidfbcegbbigaeebicbfdgcehf(I):
  O = I
  for i in range(1, height(I) - 1):
    for j in range(1, width(I) - 1):
      if index(I, (i, j)) != mostcolor(I) and any(index(I, (i + di, j + dj)) == mostcolor(I) for di, dj in [(0, 1), (0, -1), (1, 0), (-1, 0)]):
        O = fill(O, 2, {(i, j)}) 
  return O
 
11.5, 16.88626, def jfbdadhhdabaefjhajidachieeabdefj(I):
  objs = objects(I, T, T, T)
  largest_obj = argmax(objs, size)
  other_obj = argmax(sfilter(objs, lambda obj: obj != largest_obj and color(obj) == color(largest_obj)), size)
  shifted_obj = shift(other_obj, (center(largest_obj)[0] - center(other_obj)[0], 0))
  target_indices = intersection(toindices(shifted_obj), backdrop(largest_obj))
  return paint(I, recolor(2, toobject(target_indices, I))) 
 
10.0, 4.953584, def accbahdhgbeceeehidaaiafbbdhbafba(I):
  obj = argmax(objects(I, T, F, T), size)
  corner = ulcorner(obj)
  shifted = shift(obj, (-corner[0]-1, -corner[1]-1))
  filled = fill(canvas(2,(3,3)), mostcolor(I), {(1,1)})
  shifted_back = shift(asobject(filled), (corner[0]+1, corner[1]+1))
  O = paint(paint(I, recolor(2, shift(inbox(obj), (1,1)).intersection(toindices(obj)))), shifted_back)
  return O
 
5.0, 9.978856, def hdafgbidgddbehdhifbdbiedcdbbdcjf(I):
  obj = argmax(objects(I, T, F, T), size)
  corner = ulcorner(obj)
  square_indices = frozenset((i,j) for i in range(corner[0]+1, corner[0]+4) for j in range(corner[1]+1, corner[1]+4))
  recolored_square = recolor(2, difference(square_indices, {center(square_indices)}).intersection(toindices(obj)))
  O = paint(I, recolored_square)
  return O
 
51.0, 49.550453, def iiahfcbgadigedgdacebbcjdegieegfa(I):
    def process_cell(i, j, grid):
        if any((i == 0, j == 0, i == len(grid)-1, j == len(grid[0])-1) or
               any(grid[x][y] != grid[i][j] for x, y in dneighbors((i, j)))):
            return grid[i][j]
        return 2
    return tuple(tuple(process_cell(i, j, I) for j in range(len(I[0]))) for i in range(len(I)))
 
13.5, 17.913145, def ddbfbefddecfeegfibfgadedhgbedcbj(I):
  objs = objects(I, T, T, T)
  largest_obj = argmax(objs, size)
  other_obj = argmax(sfilter(objs, lambda obj: obj != largest_obj and color(obj) == color(largest_obj)), size)
  shifted_obj = shift(other_obj, (uppermost(largest_obj) - uppermost(other_obj), 0))
  target_indices = intersection(backdrop(largest_obj), toindices(shifted_obj))
  return paint(I, recolor(2, toobject(target_indices, I)))
 
9.0, 18.40899, def ajdbcfhjcjgjeafficafbeecchegafhc(I):
  obj = argmax(objects(I, T, F, T), size)
  c = centerofmass(obj)
  square_indices = frozenset((i,j) for i in range(c[0]-1, c[0]+2) for j in range(c[1]-1, c[1]+2))
  recolored_square = recolor(2, difference(square_indices, {c, (c[0]-1,c[1]), (c[0]+1,c[1]), (c[0],c[1]-1), (c[0],c[1]+1)}).intersection(toindices(obj)))
  O = paint(I, recolored_square)
  return O
 
19.5, 21.772924, def bfaffjacfagfedacjibjfeddcfbafhab(I):
  obj = argmax(objects(I, T, F, T), size)
  c = centerofmass(obj)
  recolored_obj = recolor(2, obj)
  unchanged_cells = {(c[0]-1,c[1]), (c[0]+1,c[1]), (c[0],c[1]-1), (c[0],c[1]+1), c}
  O = paint(I, combine(recolor(mostcolor(I), unchanged_cells.intersection(toindices(obj))), recolored_obj))
  return O
 
22.5, 13.313945, def fggadbafeaicedfcbcbbfdcjagabehef(I):
  obj = argmax(objects(I, T, F, T), size)
  corner = ulcorner(obj)
  shifted_obj = shift(obj, (-corner[0], -corner[1]))
  filled_obj = fill(canvas(2, (height(obj), width(obj))), mostcolor(I), {(1,1), (0,1), (2,1), (1,0), (1,2)})
  shifted_back = shift(asobject(filled_obj), corner)
  O = paint(I, shifted_back)
  return O
 
23.0, 20.421024, def affeccibgidaedjfabdeeffjfeabbffa(I):
  h, w = len(I), len(I[0])
  output = [[I[i][j] for j in range(w)] for i in range(h)]
  for i in range(1, h - 1):
    for j in range(1, w - 1):
      if I[i][j] != 0 and any(I[x][y] != 0 for x, y in [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)]):
        output[i][j] = 2 
  return tuple(tuple(row) for row in output)
 
2.5, 3.874306, def decaacabebcgejeijaafeacaicaabbba(I):
  # Get the largest object
  obj = argmax(objects(I, T, T, T), size)
  
  # Calculate dimensions of the inner rectangle 
  height_inner = height(obj) - 2 
  width_inner = width(obj) - 2
  
  # Calculate the upper-left corner of the inner rectangle
  ul_corner = add(ulcorner(obj), (1, 1))
  
  # Create the inner rectangle
  inner_rect = product(interval(0, height_inner, 1), interval(0, width_inner, 1))
  inner_rect = shift(inner_rect, ul_corner)
  
  # Recolor the inner rectangle to '2'
  return fill(I, 2, inner_rect)
 
51.0, 49.550453, def dgfddfgbdgfceadeaifdgfcccgabhbfc(I):
    O = I
    for i in range(1, height(I)-1):
        for j in range(1, width(I)-1):
            if index(I,(i,j)) != mostcommon(I):
                if index(I,(i+1,j)) != mostcommon(I) and index(I,(i-1,j)) != mostcommon(I) and index(I,(i,j+1)) != mostcommon(I) and index(I,(i,j-1)) != mostcommon(I): 
                    O = fill(O, TWO, ((i,j),))
    return O
 
27.5, 20.413343, def jfebgbbbfaeaeeggagfccaehabgjhdbf(I):
  objs = objects(I, T, T, T)
  largest_obj = argmax(objs, size)
  other_obj = argmax(sfilter(objs, lambda obj: obj != largest_obj and color(obj) == color(largest_obj)), size)
  offset = ulcorner(other_obj)[0] - ulcorner(largest_obj)[0]
  target_indices = frozenset((i + offset, j) for i in range(height(largest_obj)) for j in range(width(largest_obj)))
  return fill(I, 2, target_indices)
 
23.5, 11.66448, def fbbjfffgejfiecdhjchcihcafcebgfej(I):
  objs = objects(I, T, T, T)
  largest = argmax(objs, size)
  other = argmax(sfilter(objs, lambda obj: obj != largest and color(obj) == color(largest)), size)
  shifted_other = shift(other, (-uppermost(other) + uppermost(largest), 0))
  return paint(fill(I, 2, backdrop(largest)), shifted_other) 
 
9.0, 13.862452, def hhdcjehcfbffejaejfdgdhcbchagggbh(I):
  obj = argmax(objects(I, T, F, T), size)
  center_index = center(obj)
  neighbors = dneighbors(center_index)
  recolored_neighbors = recolor(2, neighbors.intersection(toindices(obj)))
  O = paint(I, recolored_neighbors)
  return O
 
13.0, 26.634548, def geefdhidjfdjedfijacjddehejbaaaff(I):
  obj = argmax(objects(I, T, F, T), size)
  corner = ulcorner(obj)
  shifted_obj = shift(obj, (-corner[0]-1, -corner[1]-1))
  hollow_square = difference(asindices(canvas(2, (3, 3))), {(1, 1)})
  shifted_back = shift(recolor(2, hollow_square), (corner[0]+1, corner[1]+1))
  O = paint(I, intersection(shifted_back, toindices(obj)))
  return O
 
12.0, 8.972703, def bbcbdeabfcfbeeabjhaeebaiaeddicah(I):
  objs = objects(I, T, T, T)
  modified_objs = frozenset()
  for obj in objs:
    shifted_obj = shift(obj, (1,1))
    intersection_area = intersection(toindices(obj), toindices(shifted_obj))
    modified_obj = recolor(2, intersection_area)
    modified_objs = insert(modified_obj, modified_objs)
  O = paint(I, merge(modified_objs))
  return O
 
12.5, 9.084773, def fdcdaafaeghhegbcadghifeifcecdiaf(I):
  objs = objects(I, T, T, T)
  largest_obj = argmax(objs, size)
  other_obj = argmax(sfilter(objs, lambda obj: color(obj) == color(largest_obj) and obj != largest_obj), size)
  shifted_obj = shift(other_obj, subtract(ulcorner(largest_obj), ulcorner(other_obj)))
  target_indices = intersection(backdrop(largest_obj), toindices(shifted_obj))
  return fill(I, 2, target_indices)
 
4.0, 9.714299, def bcffcdfciefgegehjffcbcfbabceedgd(I):
  obj = argmax(objects(I, T, F, T), size)
  recolored_obj = recolor(2, intersection(inbox(obj), toindices(obj)))
  O = paint(I, recolored_obj)
  return O
 
38.0, 5.405736, def fjhefbegfbebedjbagaaaafgbjibggdd(I):
  O = I
  for obj in objects(I, T, F, T):
    inner_frame = set()
    for (i, j) in toindices(obj):
      if any(((i + di, j + dj) not in toindices(obj)) and ((0 <= i + di < len(I)) and (0 <= j + dj < len(I[0])))
             for di, dj in [(0, 1), (1, 0), (0, -1), (-1, 0)]):
        inner_frame.add((i, j))
    O = fill(O, TWO, frozenset(inner_frame))
  return O
 
16.5, 24.255756, def acdaddccffdceidejfjcfeedbfcdahdc(I):
  objs = objects(I, T, T, T)
  largest_obj = argmax(objs, size)
  other_obj = argmax(sfilter(objs, lambda obj: obj != largest_obj and color(obj) == color(largest_obj)), size)
  start_row = uppermost(other_obj)
  end_row = lowermost(other_obj)
  target_column = rightmost(other_obj) + 1
  target_indices = frozenset((i, target_column) for i in range(start_row, end_row + 1))
  return fill(I, 2, target_indices)
 
13.0, 26.634548, def jefadfchgifaedjgjidbjbifbfgcdajd(I):
  objs = objects(I, T, T, T)
  largest_obj = argmax(objs, size)
  other_obj = argmax(sfilter(objs, lambda obj: obj != largest_obj and color(obj) == color(largest_obj)), size)
  target_indices = mfilter(
      backdrop(largest_obj), 
      lambda loc: uppermost(other_obj) <= loc[0] <= lowermost(other_obj) and
                   loc[1] == rightmost(other_obj) + 1
  )
  return fill(I, 2, target_indices)
 
13.0, 26.634548, def jhdgfgbihejcebgbjfjfjcgcchaeaiaj(I):
  objs = objects(I, univalued=False, diagonal=True, without_bg=True)

  def recolor_inner(obj):
    # Create a canvas of the same size as the input, filled with '2'
    canvas_2 = canvas(2, shape(I))
    # Paint the object onto the canvas
    painted_canvas = paint(canvas_2, obj)
    # Extract the object from the painted canvas 
    recolored_obj = toobject(toindices(obj), painted_canvas)
    return recolored_obj

  return paint(I, merge(apply(recolor_inner, objs)))
 
3.5, 3.4951816, def bgcbaedcfgadegfabdcaibhaddfacbdd(I):
  objs = objects(I, T, T, T)
  largest_obj = argmax(objs, size)
  inner_indices = difference(backdrop(largest_obj), box(largest_obj))
  O = fill(I, 2, inner_indices)
  if len(objs) > 1:
    second_largest_obj = argmax(difference(objs, {largest_obj}), size)
    extension_start = (lowermost(second_largest_obj) - 1, rightmost(second_largest_obj))
    extension_end = (lowermost(second_largest_obj) - 1, rightmost(largest_obj))
    extension_indices = connect(extension_start, extension_end)
    O = fill(O, 2, extension_indices)
  return O
 
11.0, 6.2173367, def adedbjcbaecdefddihfebcdcaeifajfb(I):
  objs = objects(I, T, T, T)
  largest_obj = argmax(objs, size)
  inner_indices = difference(backdrop(largest_obj), box(largest_obj))
  O = fill(I, 2, inner_indices)
  if len(objs) > 1:
    second_largest_obj = argmax(difference(objs, {largest_obj}), size)
    shift_amount = rightmost(largest_obj) - rightmost(second_largest_obj)
    extension = intersection(
      shift(toindices(second_largest_obj), (0, shift_amount)),
      asindices(I)
    )
    O = fill(O, 2, extension)
  return O
 
100.0, 164.88147, def icfegacfbdcfebdfacijacfccfhdbbfa(I):
  objs = objects(I, T, T, T)
  largest_obj = argmax(objs, size)
  inner_indices = difference(backdrop(largest_obj), box(largest_obj))
  O = fill(I, 2, inner_indices)
  if len(objs) > 1:
    second_largest_obj = argmax(difference(objs, {largest_obj}), size)
    extension_width = rightmost(largest_obj) - rightmost(second_largest_obj)
    extension_height = 1
    extension_grid = canvas(2, (extension_height, extension_width))
    target_row = crop(
      O, 
      (lowermost(second_largest_obj)-1, rightmost(second_largest_obj)), 
      (extension_height, 1)
    )
    O = hconcat(target_row, extension_grid)
  return O
 
31.0, 27.003836, def deceehcgifaeecgbjgadgbccdebdbebi(I):
  obj = argmax(objects(I, T, F, T), size)
  corner = ulcorner(obj)
  shifted = shift(obj, (-corner[0], -corner[1]))
  filled = fill(canvas(2, (height(shifted) + 2, width(shifted) + 2)), mostcolor(I), delta(shifted))
  cropped = crop(filled, (1, 1), (height(obj) + 1, width(obj) + 1))
  shifted_back = shift(asobject(cropped), corner)
  O = paint(I, shifted_back)
  return O
 
17.0, 20.823355, def ajgfeibgeafjecjejfbdfaedebidabga(I):
  obj = argmax(objects(I, T, F, T), size)
  ul = ulcorner(obj)
  lr = lrcorner(obj)
  outline = ((i,j) for i in range(ul[0], lr[0] + 2) for j in range(ul[1], lr[1] + 2) 
             if (i == ul[0] or i == ul[0] + 1 or j == ul[1] or j == ul[1] + 1) and (i,j) not in toindices(obj))
  O = paint(I, recolor(2, frozenset(outline)))
  return O
 
21.0, 23.176008, def bcdeacgcefcaeacbbbficcafcbjhiebc(I):
  obj = argmax(objects(I, T, F, T), size)
  top_outline = shift(toindices(obj), (-1, 0)) - toindices(obj)
  left_outline = shift(toindices(obj), (0, -1)) - toindices(obj)
  right_outline = shift(toindices(obj), (0, 1)) & delta(obj)
  bottom_outline = shift(toindices(obj), (1, 0)) & delta(obj)
  outline = top_outline | left_outline | right_outline | bottom_outline
  O = paint(I, recolor(2, outline))
  return O
 
3.0, 2.7620595, def bffjgeicibheeeccifgechdbfcfbdaeh(I):
  objs = objects(I, univalued=False, diagonal=True, without_bg=True)
  
  def recolor_inner(obj):
    inner_cells = sfilter(
        toindices(obj), 
        lambda idx: all(
            (i, j) in toindices(obj) 
            for i in range(idx[0]-1, idx[0]+2) 
            for j in range(idx[1]-1, idx[1]+2) 
            if 0 <= i < len(I) and 0 <= j < len(I[0])
        )
    )
    return recolor(2, inner_cells)

  return paint(I, merge(apply(recolor_inner, objs)))
 
1.5, 8.281623, def fccafbcicdchedffaiedebjabdicgeja(I):
  return paint(I, merge(apply(lambda obj: recolor(2, inbox(obj)), objects(I, False, True, True)))) 
 
5.5, 9.540091, def haecehbddcbeeabcjgajbbbeaaefhhhc(I):
  objs = objects(I, univalued=False, diagonal=True, without_bg=True)
  return paint(I, merge(apply(lambda obj: toobject(inbox(obj), canvas(2, shape(obj))), objs)))
 
30.5, 18.330347, def aagfgajceaafeejaicdjefgahfbjghgf(I):
  def recolor_cell(i, j):
    if all(I[k][l] == I[i][j] for k in range(max(0, i - 1), min(len(I), i + 2)) 
           for l in range(max(0, j - 1), min(len(I[0]), j + 2))):
      return 2
    return I[i][j]
  return tuple(tuple(recolor_cell(i, j) for j in range(len(I[0]))) for i in range(len(I)))
 
150.5, 22.774666, def aaedjdjeaeecebfbacaeeccgeafjfcad(I):
  O =  tuple(
    tuple(
      2 if contained((i,j), difference(backdrop(obj), box(obj))) else I[i][j] 
      for j in range(len(I[0]))
    )
    for i in range(len(I))
    for obj in objects(I, T, T, T)
  )
  return O
 
4.5, 4.329038, def hbjdcdjcabebeiadaeddicbcgfbadcej(I):
  objs = objects(I, T, T, T)
  largest = argmax(objs, size)
  O = fill(I, 2, difference(backdrop(largest), box(largest)))
  if len(objs) > 1:
    second = argmax(difference(objs, {largest}), size)
    extension = connect(
      (lowermost(second) - 1, rightmost(second) + 1), 
      (lowermost(second) - 1, rightmost(largest))
    )
    O = fill(O, 2, extension)
  return O 
 
95.5, 37.318, def ecahebfbbdjiedchicaffbhcegjedcec(I):
  objs = objects(I, T, T, T)
  largest = argmax(objs, size)
  inner_area = difference(backdrop(largest), box(largest))
  O = paint(canvas(2, shape(I)), toobject(inner_area, I))
  if len(objs) > 1:
    second = argmax(difference(objs, {largest}), size)
    extension = connect(
      (lowermost(second) - 1, rightmost(second) + 1), 
      (lowermost(second) - 1, rightmost(largest))
    )
    O = paint(O, toobject(extension, I))
  return O
 
21.5, 15.712675, def fegfiacgaajbeafgicjjdjcbbbifeeeh(I):
  obj = argmax(objects(I, T, F, T), size)
  O = I
  for i, j in toindices(obj):
    if (i, j) != center(obj) and (i, j) not in outbox(obj):
      O = paint(O, {(2, (i, j))})
  corner = lrcorner(obj)
  two_dots = {(corner[0] + 1, corner[1]), (corner[0], corner[1])}
  O = paint(O, recolor(2, two_dots.intersection(asindices(O))))
  return O
 
29.5, 19.190252, def idjiheebdgjfefdfbjbjbhjicbibddeg(I):
  obj = argmax(objects(I, T, F, T), size)
  O = paint(I, recolor(2, toindices(obj)))
  O = paint(O, recolor(mostcolor(I), inbox(obj)))
  corner = lrcorner(obj)
  two_dots = {(corner[0] + 1, corner[1]), (corner[0], corner[1])}
  O = paint(O, recolor(2, two_dots.intersection(asindices(O))))
  return O
 
3.5, 2.539593, def begaajcdccgfeaccijeaecjbgbccabab(I):
  objs = objects(I, T, T, T)
  largest_obj = argmax(objs, size)
  inner_indices = difference(backdrop(largest_obj), box(largest_obj))
  O = fill(I, 2, inner_indices)
  if len(objs) > 1:
    second_largest_obj = argmax(difference(objs, {largest_obj}), size)
    ref_y = branch(lowermost(second_largest_obj) > center(largest_obj)[0], 
                   lowermost(second_largest_obj)-1, 
                   uppermost(second_largest_obj))
    replace_index = (ref_y, rightmost(second_largest_obj)) 
    O = fill(O, 2, {replace_index})
  return O
 
3.5, 2.6246028, def gfbfdabfbgfdefceifhbehhffbedbddf(I):
  objs = objects(I, T, T, T)
  largest_obj = argmax(objs, size)
  O = paint(I, recolor(2, toobject(difference(backdrop(largest_obj), box(largest_obj)), I)))
  if size(objs) > 1:
    second_largest_obj = argmax(difference(objs, {largest_obj}), size)
    ref_row = branch(lowermost(second_largest_obj) > center(largest_obj)[0], 
                   hfrontier((lowermost(second_largest_obj)-1, 0)), 
                   hfrontier((uppermost(second_largest_obj), 0)))
    replace_index = extract(intersection(toindices(second_largest_obj), ref_row), identity)
    O = fill(O, 2, {replace_index})
  return O
 
3.5, 2.5251818, def bdjaajaeagdfeedeadeeidaagjdcfebd(I):
  objs = objects(I, T, T, T)
  largest = argmax(objs, size)
  O = paint(I, recolor(2, toobject(difference(backdrop(largest), box(largest)), I)))
  if len(objs) > 1:
    second_largest = argmax(difference(objs, {largest}), size)
    row_index = branch(uppermost(second_largest) > center(largest)[0], 
                        uppermost(second_largest), 
                        lowermost(second_largest)-1)
    O = fill(O, 2, {(row_index, rightmost(second_largest))})
  return O
 
4.5, 3.6108284, def aafdfbiajbcheidfbeghfidfebfcfica(I):
  obj = argmax(objects(I, T, F, T), size)
  O = I
  corner = ulcorner(obj)
  inner_indices = frozenset((i,j) for i in range(corner[0]+1, corner[0]+height(obj)-1) for j in range(corner[1]+1, corner[1]+width(obj)-1))
  recolored_inner = recolor(2, inner_indices.intersection(toindices(obj)))
  O = paint(O, recolored_inner)
  corner2 = lrcorner(obj)
  two_dots = {(corner2[0] + 1, corner2[1]), (corner2[0], corner2[1])}
  O = paint(O, recolor(2, two_dots.intersection(asindices(O))))
  return O
 
6.0, 7.696969, def dgfaghidgjcbebccbfifedijiadaecac(I):
  obj = argmax(objects(I, T, F, T), size)
  O = paint(I, recolor(2, inbox(obj).intersection(toindices(obj))))
  corner = lrcorner(obj)
  two_dots = {(corner[0] + 1, corner[1]), (corner[0], corner[1])}
  O = paint(O, recolor(2, two_dots.intersection(asindices(O))))
  return O
 
43.0, 19.357233, def cdacihbacdefejedijgbjiehbgbigaic(I):
  objs = objects(I, T, T, T)
  modified_objs = frozenset({recolor(2, outbox(obj)) for obj in objs if not bordering(obj, I)})
  O = paint(I, merge(modified_objs))
  return O
 
1.5, 8.281623, def bcfceagbdffgebdajhbjjfeedeaedjja(I):
  objs = objects(I, T, F, T)  # Get all objects, excluding background
  for obj in objs:
    obj_indices = toindices(obj)
    inner_cells = difference(obj_indices, box(obj_indices)) # Identify inner cells
    I = fill(I, TWO, inner_cells) # Recolor inner cells to '2'
  return I
 
2.5, 9.086063, def bebjaghiegdaehjejcaijcgjjadfadge(I):
  objs = objects(I, T, F, T)
  for obj in objs:
    for (i, j) in toindices(obj):
      if all(index(I, (i+di, j+dj)) == color(obj) for di, dj in [(1,0), (-1,0), (0,1), (0,-1)]):
        I = fill(I, TWO, {(i, j)}) # Recolor if inner cell
  return I
 
28.0, 26.786596, def dbdgbceebhaceaccadcacdhedchedefd(I):
  objs = objects(I, T, T, T)
  modified_objs = frozenset()
  for obj in objs:
    outer_border = difference(toindices(obj), delta(obj))
    recolored_obj = recolor(2, outer_border)
    modified_objs = insert(recolored_obj, modified_objs)
  O = paint(I, merge(modified_objs))
  return O 
 
0.0, 0.0, def jhdjefdabdaeeadaacgidfeefhfabeih(I):
  objs = objects(I, T, T, T)
  O = I
  for obj in objs:
    sub = subgrid(obj, I)
    h, w = len(sub), len(sub[0])
    for i in range(1, h - 1):
      for j in range(1, w - 1):
        O = fill(O, 2, {(i + uppermost(obj), j + leftmost(obj))})
  return O
 
13.5, 14.975621, def dbagefbccfgfehiijchcfdehbfhbhccd(I):
  objs = objects(I, T, T, T)
  O = I
  for obj in objs:
    x, y = ulcorner(obj)
    h, w = height(obj), width(obj)
    inner = crop(I, (x + 1, y + 1), (h - 2, w - 2))
    O = paint(O, recolor(2, asobject(inner)))
  return O
 
2.5, 3.874306, def dfdffcedefacejhbjcahdecehahacdea(I):
  objs = objects(I, T, T, T)
  O = I
  for obj in objs:
    backdrop_indices = backdrop(obj)
    object_indices = toindices(obj)
    inner_box_indices = difference(backdrop_indices, object_indices)
    for i, j in inner_box_indices:
      if (I[i][j] != mostcolor(I)): 
        O = fill(O, 2, {(i, j)})
  return O
 
32.5, 20.748737, def bcdbcifegcdjeaeebadjbbcejfbeebcf(I):
  O = I
  for i in range(1, height(I) - 1):
    for j in range(1, width(I) - 1):
      if (i, j) not in toindices(merge(frontiers(I))):  # Check if the cell is not on a frontier
        O = fill(O, 2, {(i, j)}) # Recolor cell to '2'
  return O
 
0.0, 0.0, def eabifccehigjedbcjccfghhfjdcbbahc(I):
  objs = objects(I, T, T, T)
  inner_cells = frozenset()
  for obj in objs:
    if size(obj) > 4: # Modify objects with more than four cells
      inner_cells = combine(inner_cells, difference(backdrop(obj), box(obj))) # Collect inner cell indices 
  O = fill(I, 2, inner_cells) # Recolor collected inner cells to '2' 
  return O
 
39.0, 27.658524, def fdeedbfeaaghedeebdeffiebfedfdhgf(I):
  O = paint(canvas(2, shape(I)), merge(frontiers(I)))  # Create a grid filled with '2' and paint frontiers from the original grid
  return O
 
7.0, 7.3044934, def bfhcjgcdbgfbefcjidjibaahfdccejcj(I):
  objs = objects(I, T, T, T)
  target_obj = argmax(objs, size)
  corner = lrcorner(target_obj)
  fill_indices = frozenset((corner[0]-i, corner[1]-j) for i in range(2) for j in range(2))
  fill_color = leastcommon([v for v, _ in merge(objs - {target_obj})]) 
  return paint(I, recolor(fill_color, toobject(fill_indices, I)))
 
7.0, 7.862695, def icaggfiebbcheahfafffcafbdhbedcaa(I):
  objs = fgpartition(I)
  largest_obj = argmax(objs, size)
  offset = (height(largest_obj)-1, width(largest_obj)-1)
  fill_patch = shift( {(0,0),(0,1),(1,0),(1,1)}, offset)
  fill_color = leastcommon([v for obj in objs for v, _ in obj if obj != largest_obj])
  return paint(I, recolor(fill_color, toobject(fill_patch, I))) 
 
27.0, 13.833859, def eefhefbieiaeeheabeiaffgfgjbecabi(I):
  for i in range(1, len(I)-1):
    for j in range(1, len(I[0])-1):
      if I[i][j] != 0 and any(I[i+di][j+dj] == 0 for di in [-1,0,1] for dj in [-1,0,1]):
        I = fill(I, 2, {(i,j)})
  return I
 
4.0, 9.714298, def efaieaaidfacefiaabeccbdccdabeddj(I):
  objs = objects(I, univalued=False, diagonal=True, without_bg=True)
  recolored_objs = frozenset({frozenset({(2 if (i,j) in delta(toindices(obj)) else c, (i,j)) for c, (i,j) in obj}) for obj in objs})
  return paint(I, merge(recolored_objs)) 
 
29.5, 18.413166, def ddfidhceggbbeabcieaeehfjbifcdbcf(I):
  objs = objects(I, T, T, T)
  inner_cells = mfilter(objs, lambda obj: size(obj) > 4 and difference(backdrop(obj), box(obj))) # Collect inner cells of all objects
  O = fill(I, 2, inner_cells) 
  return O
 
27.0, 13.833859, def behfahdefdddeicfjajaeegfgeabbhjb(I):
  O = I
  for i in range(1, len(I)-1):
    for j in range(1, len(I[0])-1):
      if index(I, (i, j)) != mostcolor(I) and any(index(I, (i+di, j+dj)) == mostcolor(I) for di in [-1,0,1] for dj in [-1,0,1]):
        O = fill(O, 2, {(i,j)}) # Fill a cell if it's not background and has a background neighbor
  return O
 
5.0, 9.974443, def gcabjdffgjeceeefbbibffdgdegbijga(I):
  objs = objects(I, T, T, T)
  largest_obj = argmax(objs, size)
  corner = lrcorner(largest_obj)
  fill_area = shift(frozenset({(0, 0), (0, 1), (1, 0), (1, 1)}), (corner[0]-1, corner[1]-1))
  second_color = sorted(palette(I) - {mostcolor(I)})[1] 
  return paint(cover(I, fill_area), recolor(second_color, fill_area))
 
2.5, 3.874306, def acegghehafdbebdbaicfaadhbeeadbdd(I):
  O = I
  for obj in objects(I, T, T, T):
    if not bordering(obj, I):
      O = paint(O, recolor(2, difference(inbox(obj), toindices(obj))))
  return O
 
29.0, 13.8627615, def chjcacefiidbedheaaaabeeabacccbib(I):
  def recolor_cell(i, j):
    # Check if the cell is not background and has a background neighbor
    if I[i][j] != 0 and any(I[i+di][j+dj] == 0 for di in [-1,0,1] for dj in [-1,0,1] if 0 <= i+di < len(I) and 0 <= j+dj < len(I[0])):
      return 2  # Recolor to 2
    return I[i][j]  # Otherwise, keep the original color

  # Apply the recolor function to each cell in the grid
  return tuple(tuple(recolor_cell(i, j) for j in range(len(I[0]))) for i in range(len(I)))
 
4.0, 6.904685, def dbcbcgjeejfeedcgjbafedaddcabcihe(I):
  objs = objects(I, T, T, T)
  def recolor_inner(obj):
    up = uppermost(obj)
    lp = leftmost(obj)
    return recolor(2, frozenset((i,j) for i in range(up+1, up+3) for j in range(lp+1, lp+3)).intersection(toindices(obj)))
  recolored = frozenset(recolor_inner(obj) for obj in objs if size(obj) > 1)
  return paint(I, merge(recolored))
 
4.0, 9.714298, def eiacfibgdjbaefcbaabbgacedfdbcdcb(I):
  largest_obj = argmax(objects(I, T, T, T), size)
  corner = add(ulcorner(largest_obj), (1,1))
  inner_square = {(corner[0], corner[1]), (corner[0]+1, corner[1]), (corner[0], corner[1]+1), (corner[0]+1, corner[1]+1)}
  return fill(I, 2, inner_square.intersection(toindices(largest_obj))) 
 
5.0, 8.785594, def fageadagajaaefgijcddbfjdbbdeecbd(I):
  def modify_obj(obj):
    if size(obj) <= 1:
      return obj
    ul = ulcorner(obj)
    return recolor(2, shift(canvas(1, (2,2)), add(ul, (1,1))).intersection(toindices(obj)))
  return paint(I, merge(apply(modify_obj, objects(I, T, T, T))))
 
20.0, 29.797157, def ffaffjeiehbdejfijchfbcebfabgbdbh(I):
  def paint_inner(O, color):
    return paint(cover(O, largest_obj), recolor(color, shift(crop(canvas(1, (2,2)), ORIGIN, (2,2)), add(ulcorner(largest_obj), (1,1)))))
  largest_obj = argmax(objects(I, T, T, T), size)
  return paint_inner(I, 2) 
 
12.5, 13.096552, def cffiebjbbbfcebijjeibfcbbgehcgdfe(I):
  def recolor_inner(i, j):
    if any(index(I, (i + di, j + dj)) != index(I, (i, j)) for di, dj in [(1, 0), (-1, 0), (0, 1), (0, -1)]):
      return I[i][j]  # Not an inner cell
    return 2  # Recolor to 2

  return tuple(tuple(recolor_inner(i, j) for j in range(len(I[0]))) for i in range(len(I)))
 
4.0, 9.714298, def hdjgihabiafdegddiefadafaehajgefe(I):
  return paint(I, merge(apply(lambda obj: recolor(2, delta(obj) & toindices(obj)), objects(I, False, True, True))))
 
2.5, 3.874306, def ibhjbhfjefdaeeifbfdhddeibgcaacff(I):
  objs = objects(I, T, T, T)
  inner_cells = set()
  for obj in objs:
    if size(obj) > 4:
      for cell in backdrop(obj):
        if all(n not in toindices(obj) for n in neighbors(cell)):
          inner_cells.add(cell)  # Add cell if all neighbors are not part of the object
  O = fill(I, 2, frozenset(inner_cells))  # Recolor collected inner cells to '2'
  return O
 
4.0, 9.714298, def bffeceafafaaegdbicbabdfgaijffbea(I):
  objs = objects(I, T, T, T)
  modified_objs = frozenset({frozenset((2, cell) if cell in inbox(obj) - toindices(obj) else (v, cell) for v, cell in obj) for obj in objs if not bordering(obj, I)})
  return paint(I, merge(modified_objs))
 
2.5, 3.874306, def ciddcjbdjajaefifjacddjbffgjchfcj(I):
  objs = objects(I, T, F, T)
  for obj in objs:
    obj_indices = toindices(obj)
    inner_cells = delta(obj_indices)  
    I = fill(I, TWO, inner_cells)
  return I 
 
2.5, 9.156329, def dbffffcefjdiecchacffgafaajcigech(I):
  h, w = len(I), len(I[0])
  for i in range(1, h - 1):
    for j in range(1, w - 1):
      if I[i][j] != mostcolor(I) and all(I[i + di][j + dj] == I[i][j] for di, dj in [(0,1),(0,-1),(1,0),(-1,0)]):
        I = fill(I, TWO, {(i,j)})
  return I
 
11.5, 6.2159963, def befeiahgdfeaecaiijbgdaahgagfdbec(I):
  h, w = len(I), len(I[0])
  for i in range(1, h - 1):
    for j in range(1, w - 1):
      if I[i][j] != mostcolor(I) and sum(v == I[i][j] for r in crop(I,(i-1,j-1),(3,3)) for v in r) >= 4:
        I = fill(I, TWO, {(i,j)})
  return I
 
1.0, 6.605819, def fgeahadhgffcecdfaiaaaebabfgdfhgf(I):
  def recolor_inner(obj):
    return recolor(2, difference(backdrop(obj), box(obj))) if size(obj) > 4 else obj
  O = paint(I, merge(apply(recolor_inner, objects(I, T, T, T))))
  return O
 
8.0, 7.1238027, def igdbhcbfbccfefhhihacidhjbbhdbagb(I):
  objs = objects(I, univalued=False, diagonal=True, without_bg=True)

  def recolor_cross(obj):
    # Get the bounding box of the object
    ul = ulcorner(obj)
    lr = lrcorner(obj)
  
    # Create indices for all cells within the bounding box
    all_indices = product(interval(ul[0], lr[0] + 1, 1), interval(ul[1], lr[1] + 1, 1))
  
    # Filter indices to keep only those forming the cross shape
    cross_indices = sfilter(all_indices, lambda idx: (idx[0] == centerofmass(obj)[0] or idx[1] == centerofmass(obj)[1]) and idx != ul and idx != (ul[0], lr[1]) and idx != (lr[0], ul[1]) and idx != lr)
  
    # Recolor the selected indices within the object
    return recolor(2, cross_indices.intersection(toindices(obj)))

  return paint(I, merge(apply(recolor_cross, objs)))
 
9.5, 6.476907, def aacbbajcccbcedbgjdacdbbecgebaadf(I):
    objs = objects(I, univalued=False, diagonal=True, without_bg=True)

    def recolor_cross(obj):
        c = centerofmass(obj)
        shifted_obj = shift(obj, (-c[0], -c[1]))
        recolored_obj = frozenset(
            (2 if (i == 0 or j == 0) and abs(i) + abs(j) > 1 else v, (i, j)) for v, (i, j) in shifted_obj
        )
        return shift(recolored_obj, (c[0], c[1]))

    return paint(I, merge(apply(recolor_cross, objs)))
 
12.5, 6.9959426, def djccbdbdjaefeacjjgdcaeaadebefgee(I):
  objs = objects(I, T, T, T)
  inner_cells = mfilter(objs, lambda obj: difference(toindices(obj), box(obj)))
  return paint(I, recolor(2, inner_cells))
 
17.5, 7.9166675, def fjcjagjabebcebdeiffbafadhgeefacd(I):
  def process_row(row, row_index):
    start = None
    in_five = False
    new_row = list(row)
    for j, val in enumerate(row):
      if val == 5 and not in_five:
        start = j
        in_five = True
      elif val != 5 and in_five:
        if start is not None:
          for k in range(start + 1, j):
            new_row[k] = 2
        in_five = False
        start = None
    return tuple(new_row)

  return tuple(process_row(row, i) for i, row in enumerate(I))
 
30.5, 23.078405, def jbfdedbhcabdeafcbfaciheiefacihfb(I):
  objs = objects(I, T, T, T)
  O = I
  for obj in objs:
    for cell in obj:
      if sum((1 for n in dneighbors(cell[1]) if n in toindices(obj))) < 4:
        O = fill(O, 2, {cell[1]})
  return O
 
0.5, 3.425549, def cabecfcjiccgegdaaddefeedbbbggbeb(I):
  modified_objects =  []
  for obj in objects(I, T, T, T):
    if size(obj) > 4:
      modified_objects.append(recolor(2, difference(backdrop(obj), box(obj)))) 
    else:
      modified_objects.append(obj)
  return paint(I, merge(modified_objects)) 
 
21.0, 22.01386, def ddgbhgccadicedeeicdfjccfebibbceh(I):
  largest_obj = argmax(objects(I, T, T, T), size)
  corner = lrcorner(largest_obj)
  fill_area = frozenset({(corner[0] - 1, corner[1] - 1), (corner[0] - 1, corner[1]), (corner[0], corner[1] - 1), (corner[0], corner[1])})
  second_color = leastcommon([v for v, _ in difference(asobject(I), {(mostcolor(I), (0, 0))})])  
  modified_largest = recolor(second_color, intersection(fill_area, toindices(largest_obj)))
  return paint(cover(I, largest_obj), modified_largest)
 
28.0, 26.786596, def eedfabcddfdeebcaibeahdachfefdaia(I):
  def recolor_obj(obj):
    new_obj = set()
    for v, (i, j) in obj:
      if any(((i + di, j + dj) in toindices(obj)) for di in [-1, 1] for dj in [-1, 1] if (di, dj) != (0, 0)):
        new_obj.add((2, (i, j)))
      else:
        new_obj.add((v, (i, j)))
    return frozenset(new_obj)
  return paint(I, merge(apply(recolor_obj, objects(I, univalued=False, diagonal=True, without_bg=True)))) 
 
7.5, 9.5914135, def egfihiffgefdebafjbeffhdiabbfcjbc(I):
  def modify_largest(obj):
    if obj != argmax(objects(I, T, T, T), size):
      return obj
    corner = lrcorner(obj)
    target_area = frozenset((
        (corner[0]-1,corner[1]-1), 
        (corner[0]-1,corner[1]), 
        (corner[0], corner[1]-1), 
        (corner[0], corner[1])
    ))
    new_color = leastcommon(difference(palette(I), {mostcolor(I)}))
    return recolor(new_color, intersection(target_area, toindices(obj)))

  def modify_bottom(obj):
    if obj != argmax(objects(I, T, T, T), size):
      return obj
    h = height(obj)
    return modify_largest(shift(obj, (-h//2, 0)))

  return paint(I, merge(apply(modify_bottom, objects(I, T, T, T))))
 
