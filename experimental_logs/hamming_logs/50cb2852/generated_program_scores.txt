0.06612276612276613, 6.496815, def jchcdccgffbdehdjjbbeaebbfffjjfag(I):
  objs = objects(I, T, F, T)
  O = I
  for obj in objs:
    center_i, center_j = center(obj)
    height_obj = height(obj)
    width_obj = width(obj)
    if height_obj > 1:
      O = fill(O, 8, frozenset({(center_i, j) for j in range(center_j - width_obj // 4, center_j + width_obj // 4 + (width_obj % 2))}))
    if width_obj > 1:
      O = fill(O, 8, frozenset({(i, center_j) for i in range(center_i - height_obj // 4, center_i + height_obj // 4 + (height_obj % 2))}))
  return O
 
0.07121212121212121, 5.9105144, def gecfagchejceebaajabahbidccegaefg(I):
  O = I
  for obj in objects(I, T, F, T):
    h, w = shape(obj)
    ci, cj = center(obj)
    O = fill(O, 8, connect((ci - h // 4, cj), (ci + h // 4, cj))) if h > 1 else O
    O = fill(O, 8, connect((ci, cj - w // 4), (ci, cj + w // 4))) if w > 1 else O
  return O
 
0.10275835275835277, 17.111504, def hegaiedjefgceaicbfbdafiggecajfeh(I):
  O = I
  for obj in objects(I, T, F, T):
    if len(obj) > 1:
      v_p = vperiod(obj)
      h_p = hperiod(obj)
      ci, cj = center(obj)
      O = fill(O, 8, frozenset((i, cj) for i in range(ci - v_p // 2, ci + v_p // 2 + 1)))
      O = fill(O, 8, frozenset((ci, j) for j in range(cj - h_p // 2, cj + h_p // 2 + 1)))
  return O
 
0.13931623931623932, 19.058939, def efabjihbfdefefhfbfeaeigifeehefba(I):
  O = I
  for obj in objects(I, T, F, T):
    if size(obj) > 1:
      c = center(obj)
      O = underfill(O, 8, connect(c, add(c, (halve(height(obj)), 0))))
      O = underfill(O, 8, connect(c, add(c, (0, halve(width(obj))))))
  return O
 
0.24685314685314685, 43.885452, def ifggfffbfbggeihfighdbddcjibgdcbf(I):
    # Identify objects
    objs = objects(I, T, F, T)

    # Function to replace inner cells with 8
    def replace_inner(obj):
        # Get object's bounding box
        ul = ulcorner(obj)
        lr = lrcorner(obj)
        
        # Generate indices for inner cells
        inner_indices = frozenset(
            (i, j) 
            for i in range(ul[0] + 1, lr[0]) 
            for j in range(ul[1] + 1, lr[1])
        )
        
        # Recolor inner cells to 8
        return recolor(EIGHT, toobject(inner_indices, I))

    # Apply replacement to each object
    modified_objs = apply(replace_inner, objs)
    
    # Paint the modified objects back onto a blank canvas
    O = paint(canvas(ZERO, shape(I)), merge(modified_objs))
    return O
 
0.0, 0.0, def jbedfbcddacfeecbaieaegccebjcfcba(I):
    objs = objects(I, T, F, T)
    def modify_obj(obj):
        ul = ulcorner(obj)
        lr = lrcorner(obj)
        inner = frozenset((i, j) for i in range(ul[0]+1, lr[0]) for j in range(ul[1]+1, lr[1]))
        border = difference(toindices(obj), inner)
        return combine(recolor(EIGHT, toobject(inner, I)), toobject(border, I))
    new_objs = apply(modify_obj, objs)
    O = paint(canvas(ZERO, shape(I)), merge(new_objs))
    return O
 
