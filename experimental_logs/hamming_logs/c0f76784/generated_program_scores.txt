4.666666666666667, 1.6342641, def gbjbbecadabeehifaefaffaddjahhedb(I):
  objs = objects(I, T, T, T)
  deltas = mapply(delta, objs)
  O = fill(I, 8, deltas) 
  return O
 
12.333333333333334, 6.553725, def fiafecbcagchebecjijfjbcafhbbdbgb(I):
  objs = objects(I, T, T, T)
  top_obj = argmax(objs, lambda obj: uppermost(obj))
  bottom_obj = argmin(objs, lambda obj: uppermost(obj)) 
  O = fill(fill(I, 8, delta(top_obj)), 7, delta(bottom_obj))
  return O
 
19.0, 16.721737, def bcgcbfbiefeeedfebacbejdceijddhce(I):
  objs = objects(I, T, F, T)
  obj_list = list(objs)
  for i, obj in enumerate(obj_list):
    h = height(obj)
    w = width(obj)
    if h > 1 and w > 1:
      if h > w:
        middle_row = uppermost(obj) + h // 2
        obj_list[i] = recolor(8, frozenset((middle_row, j) for j in range(leftmost(obj), rightmost(obj) + 1)))
      else:
        middle_col = leftmost(obj) + w // 2
        obj_list[i] = recolor(h + 5, frozenset((i, middle_col) for i in range(uppermost(obj), lowermost(obj) + 1)))
  O = paint(I, merge(frozenset(obj_list)))
  return O
 
19.0, 17.135326, def ecfejdjcfiieeceejfedejjaaefeecbd(I):
  def process_object(obj):
    h, w = shape(obj)
    if min(h, w) > 1:
      color_to_fill = 8 if h > w else w + 5
      center_i, center_j = centerofmass(obj)
      return recolor(color_to_fill, frozenset({(center_i, j) for j in range(leftmost(obj), rightmost(obj) + 1)}) if h > w else {(i, center_j) for i in range(uppermost(obj), lowermost(obj) + 1)})
    return obj
  O = paint(I, merge(apply(process_object, objects(I, T, F, T))))
  return O
 
41.333333333333336, 16.943682, def cfiefcicdaddeiddibdceheffiadagcb(I):
  objs = fgpartition(I)
  new_objs = set()
  for obj in objs:
    center_j = centerofmass(obj)[1]
    new_obj = set()
    for v, (i, j) in obj:
      if j < center_j:
        new_obj.add((6 + center_j - j - 1, (i, j)))
      elif j > center_j:
        new_obj.add((8 + j - center_j - 1, (i, j)))
      else:
        new_obj.add((v, (i, j)))
    new_objs.add(frozenset(new_obj))
  O = paint(I, merge(new_objs))
  return O
 
26.666666666666668, 17.25271, def cbhagdecbadgefdfbcbgdebajgegdheh(I):
  objs = fgpartition(I)
  recolored_objs = set()
  for obj in objs:
    center_col = centerofmass(obj)[1]
    left_part = sfilter(obj, lambda cell: cell[1][1] < center_col)
    right_part = sfilter(obj, lambda cell: cell[1][1] > center_col)
    recolored_left =  frozenset({(6 + center_col - j - 1, (i, j)) for v, (i, j) in left_part})
    recolored_right = frozenset({(8 + j - center_col - 1, (i, j)) for v, (i, j) in right_part})
    recolored_objs.add(frozenset(recolored_left | obj | recolored_right))
  O = paint(I, merge(recolored_objs))
  return O
 
105.66666666666667, 22.618158, def cbbbhbjdfaieedbdjiiceaciaeifcaai(I):
    objs = fgpartition(I)
    O = I
    for obj in objs:
        center_j = centerofmass(obj)[1]
        for dj in range(1, width(obj)):
            if center_j - dj >= 0:
                O = fill(O, 6 + dj - 1, shift(toindices(obj), (0, -dj)))
            if center_j + dj < len(I[0]):
                O = fill(O, 8 + dj - 1, shift(toindices(obj), (0, dj))) 
    return O
 
58.0, 18.715616, def eibfhcdcfgacefdfibabjfcefgfdcfib(I):
  objs = objects(I, T, F, T)
  outboxes = mapply(outbox, objs)
  O = fill(I, SEVEN, outboxes)
  for obj in objs:
    if hline(obj):
      O = fill(O, EIGHT, toindices(obj))
    elif vline(obj):
      O = fill(O, SEVEN, toindices(obj))
    elif size(obj) == 1:
      O = fill(O, SIX, toindices(obj))
  return O
 
9.666666666666666, 3.5007162, def gehecjfahhbcebajaegfheegcfdeafab(I):
    O = I
    for obj in objects(I, T, F, T):
        O = fill(O, SEVEN, delta(obj))  # Highlight the delta instead of outbox
        if hline(obj):
            O = fill(O, EIGHT, toindices(obj))
        elif vline(obj):
            O = fill(O, SEVEN, toindices(obj))
        elif size(obj) == 1:
            O = fill(O, SIX, toindices(obj))
    return O
 
77.0, 24.119637, def cfhjgfaehcaaeadeaibgfbddcabhhbdb(I):
    O = I
    for i in range(len(I)):
        for j in range(len(I[0])):
            if I[i][j] == 5:  # Find cells belonging to an object
                for di, dj in [(1,0), (-1,0), (0,1), (0,-1)]:  # Check adjacent cells 
                    ni, nj = i + di, j + dj
                    if 0 <= ni < len(I) and 0 <= nj < len(I[0]) and I[ni][nj] != 5:
                        O = fill(O, 8, {(ni, nj)})  # Inner border 
                if i + 1 < len(I):
                    O = fill(O, 7, {(i + 1, j)})  # Bottom border
                if j + 1 < len(I[0]):
                    O = fill(O, 6, {(i, j + 1)})  # Right border
    return O
 
25.0, 17.882978, def aicfefhdbbfeefgiaadhdecdhcjdaaig(I):
  objs = objects(I, T, F, T)
  O = fill(I, 8, mapply(delta, objs))  # Apply inner border first

  bottom_objs = frozenset(
      shift(obj, (1, 0)) for obj in objs if lowermost(obj) < len(I) - 1
  ) # Shift objects down and filter those that go out of bounds
  right_objs = frozenset(
      shift(obj, (0, 1)) for obj in objs if rightmost(obj) < len(I[0]) - 1
  ) # Shift objects right and filter those that go out of bounds

  O = underfill(O, 7, mapply(toindices, bottom_objs))  # Apply bottom border only under background
  O = underfill(O, 6, mapply(toindices, right_objs))  # Apply right border only under background 
  return O
 
24.666666666666668, 20.252073, def eacfabddadbieebfieebgegjfefecfdc(I):
  def recolor_patch(obj):
    h = height(obj)
    w = width(obj)
    if h > 1 and w > 1:
      if h > w:
        middle_col = (ulcorner(obj)[1],) * h
        return recolor(8, frozenset(zip(middle_col, range(uppermost(obj), lowermost(obj) + 1)))) 
      else:
        middle_row = (ulcorner(obj)[0],) * w
        return recolor(w + 5, frozenset(zip(range(leftmost(obj), rightmost(obj) + 1), middle_row)))
    return obj
  objs = objects(I, T, F, T)
  recolored_objs = apply(recolor_patch, objs)
  O = paint(I, merge(recolored_objs))
  return O
 
4.333333333333333, 2.2572055, def cgeiebebcfbeefbbihdiaeeddiadajda(I):
  objs = objects(I, T, T, T)
  O = fill(I, 8, mapply(delta, objs))
  for obj in objs:
    if lowermost(obj) > len(I) // 2:
      center_j = center(obj)[1]
      O = fill(O, 7, {(lowermost(obj) - 1, center_j), (lowermost(obj) - 1, center_j - 1)})
  return O
 
5.333333333333333, 3.5049255, def eecfgibdjhdbefgbiidhbdbeehidbdbf(I):
  objs = objects(I, T, T, T)
  O = fill(I, 8, mapply(delta, objs))
  for obj in objs:
    if size(obj) > 5:
      for i, row in enumerate(crop(I, ulcorner(obj), shape(obj))):
        if i == len(row) - 2:
          center_j = len(row) // 2
          O = fill(O, 7, {(uppermost(obj) + i, leftmost(obj) + center_j), (uppermost(obj) + i, leftmost(obj) + center_j - 1)})
  return O 
 
6.0, 1.9481081, def dcjaebacbiadefbdaabifegcfeejgeie(I):
  objs = objects(I, T, T, T)
  O = fill(I, 8, mapply(delta, objs))
  for obj in objs:
    if size(obj) > 5:
      i, j = center(obj)
      if index(I, (i-1,j)) == index(I, (i-1,j-1)) == 5:
          O = fill(O, 7, {(i-1, j), (i-1, j-1)})
  return O
 
6.666666666666667, 4.0355983, def feacidbcidebedifaejddadffdbbffgj(I):
  objs = objects(I, T, T, T)
  O = fill(I, 8, mapply(delta, objs))
  for obj in objs:
    upper_indices = {(i, j) for i, j in toindices(obj) if i == uppermost(obj)}
    if size(upper_indices) == 4:
      O = fill(O, 7, {(i, j) for (i, j) in upper_indices if j == leftmost(upper_indices) + 1 or j == rightmost(upper_indices) - 1})
  return O 
 
19.666666666666668, 18.055143, def ieeagcgdfifeeeiiidcjiaiadjhfdebb(I):
  def process_object(obj):
    h = height(obj)
    w = width(obj)
    if h > 1 and w > 1:
      if h > w:
        center_row = uppermost(obj) + h // 2 - 1
        return frozenset((8, (center_row, j)) for i, j in toindices(obj) if i == center_row)
      else:
        center_col = leftmost(obj) + w // 2 - 1
        return frozenset((min(w + 5, 9), (i, center_col)) for i, j in toindices(obj) if j == center_col)
    return obj
  objs = objects(I, T, F, T)
  recolored_objs = apply(process_object, objs)
  O = paint(I, merge(recolored_objs))
  return O
 
19.0, 15.288044, def cebddfeiffaheacbjfgafjfbaaeddadi(I):
  def modify_object(obj):
    if height(obj) > 1 and width(obj) > 1:
      if height(obj) > width(obj):
        mid = (uppermost(obj) + lowermost(obj)) // 2
        return frozenset((8, (i, j)) if i == mid else (v, (i, j)) for v, (i, j) in obj)
      else:
        mid = (leftmost(obj) + rightmost(obj)) // 2
        return frozenset((min(width(obj) + 5, 9), (i, j)) if j == mid else (v, (i, j)) for v, (i, j) in obj)
    return obj
  objs = objects(I, T, F, T)
  recolored_grid = paint(I, merge(apply(modify_object, objs)))
  return recolored_grid
 
47.0, 27.039146, def cjfhfbcjdgbiejibjiabhdfbgfbcddag(I):
  O = canvas(mostcolor(I), shape(I))
  for obj in fgpartition(I):
    center_j = centerofmass(obj)[1]
    for v, (i, j) in obj:
      if j < center_j:
        O = fill(O, 6 + center_j - j - 1, {(i, j)})
      elif j > center_j:
        O = fill(O, 8 + j - center_j - 1, {(i, j)})
  return O
 
86.0, 45.12106, def ccgacebcjeddedaaiffbajfiacdgbbeh(I):
    O = I
    for value in palette(I):
        obj = toobject(ofcolor(I, value), I)
        if size(obj) == 1:
            O = fill(O, SIX, toindices(obj))
        elif hline(obj):
            O = fill(O, EIGHT, inbox(obj))
            O = fill(O, EIGHT, toindices(obj))
        elif vline(obj):
            O = fill(O, SEVEN, toindices(obj))
        else:
            O = fill(O, SEVEN, delta(obj))
    return O
 
43.0, 42.967316, def idbdfccbadcfegaeacgcbgbhjfiecchd(I):
    O = canvas(mostcolor(I), shape(I))
    for obj in objects(I, T, F, T):
        if size(obj) == 1:
            O = paint(O, recolor(SIX, obj))
        elif hline(obj):
            O = paint(O, recolor(EIGHT, inbox(obj)))
            O = paint(O, recolor(EIGHT, obj))
        elif vline(obj):
            O = paint(O, recolor(SEVEN, obj))
        else:
            O = paint(O, recolor(SEVEN, delta(obj)))
    return O
 
5.666666666666667, 2.9424155, def dbcjcghdebdieacaagegdhegbaejcifb(I):
  O = I
  for obj in objects(I, T, T, T):
    O = fill(O, 8, delta(obj))
    if lowermost(obj) >= len(I) // 2:
      O = fill(O, 7, shift({(-1, 0), (-1, -1)}, center(obj)))
    if uppermost(obj) < len(I) // 2 <= lowermost(obj):
      O = fill(O, 6, shift({(1, 1)}, center(obj)))
      O = fill(O, 7, shift({(1, 0), (1, -1)}, center(obj)))
  return O
 
102.66666666666667, 11.861395, def bdibaehfdajdedahbcaabacebieicjid(I):
  objs = objects(I, T, T, T)
  O = paint(canvas(8, shape(I)),  merge(objs))
  for obj in objs:
    if lowermost(obj) > len(I) // 2:
      O = paint(O, recolor(7, shift({(-1, 0), (-1, -1)}, center(obj))))
    if uppermost(obj) < len(I) // 2 <= lowermost(obj):
      O = paint(O, recolor(6, shift({(1, 1)}, center(obj))))
      O = paint(O, recolor(7, shift({(1, 0), (1, -1)}, center(obj))))
  return O
 
8.333333333333334, 4.5071397, def bafidcjbdcgbebcdiihabhjbeegcccdf(I):
  O = I
  for obj in objects(I, T, T, T):
    O = fill(O, 8, backdrop(obj) - toindices(obj))
    if center(obj)[0] >= len(I) // 2:
      O = fill(O, 7, shift({(0, 0), (0, -1)}, (lowermost(obj), center(obj)[1])))
    if uppermost(obj) < len(I) // 2 <= lowermost(obj):
      O = fill(O, 6, shift({(1, 1)}, center(obj)))
      O = fill(O, 7, shift({(0, 0), (0, -1)}, (uppermost(obj) + 1, center(obj)[1])))
  return O 
 
5.333333333333333, 2.4966903, def dbcfadjfegcaefccjfbbeifijbdcfeda(I):
  O = fill(I, 8, mapply(lambda obj: backdrop(obj) - toindices(obj), objects(I, T, T, T)))
  for obj in objects(I, T, T, T):
    if lowermost(obj) > len(I) // 2:
      O = fill(O, 7, {(lowermost(obj) - 1, center(obj)[1]), (lowermost(obj) - 1, center(obj)[1] - 1)})
    if uppermost(obj) < len(I) // 2 and lowermost(obj) > len(I) // 2:
      O = fill(O, 6, {(uppermost(obj) + 1, center(obj)[1] + 1)})
      O = fill(O, 7, {(uppermost(obj) + 1, center(obj)[1]), (uppermost(obj) + 1, center(obj)[1] - 1)})
  return O 
 
41.333333333333336, 14.4957695, def bajbfgacdfffeaehjdaijdagjdfjbifh(I):
  def recolor_object(obj):
    center_j = centerofmass(obj)[1]
    return frozenset(
      ((8, (i, j)) if j < center_j else (7, (i, j)) if j > center_j else (v, (i, j)))
      for v, (i, j) in obj
    )
    
  recolored_objects = frozenset(recolor_object(obj) for obj in fgpartition(I))
  O = paint(canvas(mostcolor(I), shape(I)), merge(recolored_objects))
  return O
 
49.666666666666664, 21.929535, def cbadbidafacdeaefjidacifcbcebcjhd(I):
  def modify_object(obj):
    center_j = centerofmass(obj)[1]
    shifted_left = shift(obj, (0, -center_j + 1))
    shifted_right = shift(obj, (0, -center_j + 7))
    return shifted_left | shifted_right

  modified_objects = frozenset(modify_object(obj) for obj in fgpartition(I))
  O = paint(canvas(mostcolor(I), shape(I)), merge(modified_objects))
  return O
 
7.0, 4.3980694, def bbfajbedddfaeeceaccjhfbdjdjcbccd(I):
  O = fill(I, 8, mapply(delta, objects(I, T, T, T)))
  for obj in objects(I, T, T, T):
    O = fill(O, 7, {(lowermost(obj) - 1, center(obj)[1]), (lowermost(obj) - 1, center(obj)[1] - 1)})
    if uppermost(obj) < len(I) // 2:
      O = fill(O, 6, {(uppermost(obj) + 1, center(obj)[1] + 1)})
  return O
 
47.0, 24.484741, def bgcdbhgiecaieebiiifdjibfbcijbgaj(I):
  O = canvas(mostcolor(I), shape(I))
  for obj in fgpartition(I):
    center_j = centerofmass(obj)[1]
    for v, (i, j) in obj:
      if j < center_j:
        O = fill(O, 8, {(i, j)})
      elif j > center_j:
        O = fill(O, 7, {(i, j)})
  return O
 
6.666666666666667, 4.139985, def cbdabfeadejceaifaedafbibdefafbfa(I):
  objs = objects(I, T, T, T)
  O = fill(I, 8, mapply(delta, objs)) # Outline on original grid
  for obj in objs:
    bottom_y = lowermost(obj) - 1
    center_x = center(obj)[1]
    O = fill(O, 7, {(bottom_y, center_x), (bottom_y, center_x - 1)}) # Bottom markers

    if center(obj)[0] < len(I) // 2: # If object center is in top half
      O = fill(O, 6, {(uppermost(obj) + 1, center(obj)[1] + 1)})  # Top marker
  return O
 
4.333333333333333, 5.8031826, def hcbdebcdaiceecabaeafhdgdeefcciad(I):
  objs = objects(I, T, F, T) 
  largest = argmax(objs, size)
  smallest = argmin(objs, size)
  O = fill(I, 8, delta(largest))
  O = fill(O, 7, delta(smallest))
  O = fill(O, 6, toindices(toobject({(6, center(largest))}, I))) 
  return O
 
142.0, 37.785175, def dfajfcejieafedcgjeabhfgfbfgjiabb(I):
  objs = objects(I, T, T, T)
  O = paint(canvas(8, shape(I)), merge([{(I[i][j], (i, j)) for i, j in delta(o)} for o in objs]))
  for obj in objs:
    O = paint(O, {(7, (lowermost(obj) - 1, center(obj)[1])), (7, (lowermost(obj) - 1, center(obj)[1] - 1))})
    if uppermost(obj) < len(I) // 2:
      O = paint(O, {(6, (uppermost(obj) + 1, center(obj)[1] + 1))})
  return O
 
39.0, 8.704023, def icaeaddajeieefddigbcffaaijaccfdb(I):
  objs = objects(I, T, F, T)
  largest = argmax(objs, lambda obj: width(obj) * height(obj))
  smallest = argmin(objs, lambda obj: width(obj) * height(obj))
  O = paint(fill(I, 8, backdrop(largest)), recolor(7, outbox(smallest)))
  O = fill(O, 6, toindices(toobject({(6, centerofmass(largest))}, I)))
  return O 
 
56.0, 23.823296, def cajbdbddbafcejccidcajjajeedicfee(I):
    objs = fgpartition(I)
    largest = argmax(objs, size)
    smallest = argmin(objs, size)
    O = paint(fill(I, 8, delta(largest)), recolor(7, inbox(smallest)))
    O = fill(O, 6, toindices(toobject({(6, center(largest))}, I))) 
    return O
 
5.666666666666667, 3.7166848, def ihhgbbbebdfaeccebdfeeijjdchfiaje(I):
  objs = objects(I, T, F, T)
  objs_size = apply(size, objs)
  largest = list(objs)[list(objs_size).index(max(objs_size))]
  smallest = list(objs)[list(objs_size).index(min(objs_size))]
  O = fill(I, 8, delta(largest))
  O = fill(O, 7, inbox(smallest))
  O = fill(O, 6, toindices(toobject({(6, center(largest))}, O)))
  return O
 
11.0, 8.408871, def aadcdbgcffcceabejabhaegedfiajccb(I):
  O = I  # Start with input grid
  for obj in objects(I, T, T, T):
    O = paint(O, recolor(8, delta(obj)))  # Outline the object with '8'
    bottom_marker_j = center(obj)[1] 
    O = fill(O, 7, {(lowermost(obj) + 1, bottom_marker_j), (lowermost(obj) + 1, bottom_marker_j - 1)})  # Place '7' markers
    if uppermost(obj) < len(I) // 2:
      O = fill(O, 6, {(uppermost(obj) - 1, center(obj)[1])}) # Place '6' marker
  return O
 
101.66666666666667, 10.269608, def giaggjbdgcjgegcabbgcbcedfbegfbid(I):
  O = canvas(8, shape(I))  # Create canvas of '8's
  for obj in objects(I, T, T, T):
    O = underpaint(O, obj) # Paint the object onto the canvas (only overwrites '8's)
    marker_j = center(obj)[1]
    O = fill(O, 7, {(lowermost(obj) + 1, marker_j), (lowermost(obj) + 1, marker_j - 1)}) # Place '7' markers
    if uppermost(obj) * 2 < len(I): # Equivalent condition for top half
      O = fill(O, 6, {(uppermost(obj) - 1, marker_j)}) # Place '6' marker 
  return O
 
445.6666666666667, 13.94498, def eacbhiabefidegjcjaehbcedeeebedab(I):
  return merge([
    fill(I, SIX, mapply(toindices, sizefilter(objects(I, T, F, T), 1))),
    fill(I, EIGHT, mapply(lambda obj: inbox(obj) | toindices(obj), sfilter(objects(I, T, F, T), hline))),
    fill(I, SEVEN, mapply(toindices, sfilter(objects(I, T, F, T), vline))),
    fill(I, SEVEN, mapply(delta, sfilter(objects(I, T, F, T), lambda obj: not (hline(obj) or vline(obj) or size(obj) == 1))))
  ])
 
44.0, 33.764206, def bfgdhafefibdehbfijcggfcecdjccace(I):
  O = fill(canvas(mostcolor(I), shape(I)), 8, mapply(delta, objects(I, T, T, T)))  # Outline
  for obj in objects(I, T, T, T):
    j = center(obj)[1]
    O = paint(O, recolor(7, {(lowermost(obj) + 1, j), (lowermost(obj) + 1, j - 1)}))  # '7' markers 
    if all(i < len(I) // 2 for i, j in toindices(obj)):  # Check if all indices are in top half
      O = paint(O, recolor(6, {(uppermost(obj) - 1, j)}))  # '6' marker
  return O
 
135.0, 69.0282, def edahfcjjeabgeeccjfbcijcbfaejefic(I):
  objs = objects(I, T, T, T)
  O = paint(canvas(8, shape(I)), merge(apply(lambda obj: box(obj)-toindices(obj), objs))) # Outline using box
  for obj in objs:
    O = paint(O, recolor(7, {(lowermost(obj) + 1, center(obj)[1]), (lowermost(obj) + 1, center(obj)[1] - 1)})) # '7' markers
    if uppermost(obj) + height(obj) <= len(I) // 2:  # Check if the entire object is in the top half
      O = paint(O, recolor(6, {(uppermost(obj) - 1, center(obj)[1])}))  # '6' marker
  return O
 
5.333333333333333, 3.8216536, def eiiadebfijjgeigficehaajibaeedehj(I):
  objs = objects(I, T, T, T)
  O = fill(I, 8, mapply(delta, objs))
  for obj in objs:
    if lowermost(obj) > len(I) // 2:
      center_j = center(obj)[1]
      O = fill(O, 7, {(lowermost(obj) - 1, center_j), (lowermost(obj) - 1, center_j - 1)})
  O = fill(O, 6, toindices(toobject({(6, center(argmax(objs, size)))}, I))) 
  return O
 
7.666666666666667, 4.5028625, def fbcgjabfcbfdeeegbfhaadaajhjcfdgj(I):
  O = fill(I, 8, mapply(delta, objects(I, T, T, T)))
  for obj in objects(I, T, T, T):
    if lowermost(obj) > len(I) // 2:
      O = fill(O, 7, {(lowermost(obj), center(obj)[1] - 1), (lowermost(obj), center(obj)[1])})
    if uppermost(obj) < len(I) // 2 and lowermost(obj) > len(I) // 2:
      O = fill(O, 6, {(uppermost(obj), center(obj)[1])})
  return O
 
8.333333333333334, 6.977464, def efeigdbfbjgjebddjedcjiejaaaedfda(I):
  O = I
  for obj in objects(I, T, T, T):
    O = fill(O, 8, delta(obj)) 
    if position(obj, {(len(I) // 2, 0)})[0] == 1: 
      O = fill(O, 7, {(lowermost(obj), center(obj)[1] - 1), (lowermost(obj), center(obj)[1])})
    if position(obj, {(len(I) // 2, 0)})[0] == 0:
      O = fill(O, 7, {(lowermost(obj), center(obj)[1] - 1), (lowermost(obj), center(obj)[1])})
      O = fill(O, 6, {(uppermost(obj), center(obj)[1])})
  return O
 
47.0, 15.025187, def fiehcbgfdffaeeccagjefaahhfefcgaj(I):
  O = fill(I, 8, mapply(lambda obj: difference(box(obj), obj), objects(I, T, T, T)))
  for obj in objects(I, T, T, T):
    if lowermost(obj) > len(I) // 2:
      O = fill(O, 7, intersection(box(obj), {(i, center(obj)[1] - 1) for i in range(len(I))}))
      O = fill(O, 7, intersection(box(obj), {(i, center(obj)[1]) for i in range(len(I))}))
    if uppermost(obj) < len(I) // 2 and lowermost(obj) > len(I) // 2:
      O = fill(O, 6, {(uppermost(obj), center(obj)[1])})
  return O
 
9.666666666666666, 4.572617, def adefaccjhciaedhdicjcefgbfcfgfiad(I):
  O = fill(I, 8, mapply(delta, objects(I, T, T, T)))
  for obj in objects(I, T, T, T):
    if lowermost(obj) > len(I) // 2:
      O = fill(O, 7, intersection(vfrontier((lowermost(obj), center(obj)[1] - 1)), backdrop(obj)))
      O = fill(O, 7, intersection(vfrontier((lowermost(obj), center(obj)[1])), backdrop(obj)))
    if uppermost(obj) < len(I) // 2 and lowermost(obj) > len(I) // 2:
      O = fill(O, 6, {(uppermost(obj), center(obj)[1])})
  return O
 
13.0, 17.946308, def bdgefcbehjcjecebbafbghccaafdefif(I):
  objs = objects(I, T, F, T)
  for obj in objs:
    O = fill(I, 8, delta(obj)) if not hline(obj) else I
    if hline(obj):
      second_last_row = uppermost(obj) + height(obj) - 2
      center_j = leftmost(obj) + width(obj) // 2
      O = fill(O, 7, {(second_last_row, center_j), (second_last_row, center_j - 1)})
    else:
      second_last_row = uppermost(obj) + height(obj) - 2
      center_j = leftmost(obj) + width(obj) // 2
      O = fill(O, 6, {(second_last_row, center_j)})
  return O
 
5.0, 3.6245272, def aebcbeiadiadehbcbbehjfceabaffaee(I):
  hlines = sfilter(objects(I, T, F, T), hline)
  other_objs = difference(objects(I, T, F, T), hlines)
  O = fill(I, 8, mapply(delta, other_objs))
  for obj in hlines:
    second_last_row = uppermost(obj) + height(obj) - 2
    center_j = leftmost(obj) + width(obj) // 2
    O = fill(O, 7, {(second_last_row, center_j), (second_last_row, center_j - 1)})
  for obj in other_objs:
    second_last_row = uppermost(obj) + height(obj) - 2
    center_j = leftmost(obj) + width(obj) // 2
    O = fill(O, 6, {(second_last_row, center_j)})
  return O
 
4.666666666666667, 2.7504058, def ijcdfjcdififeaeajibacbecfgfcbaab(I):
  O = fill(I, 8, mapply(delta, objects(I, T, T, T)))
  for obj in objects(I, T, T, T):
    if lowermost(obj) >= len(I) // 2:
      O = fill(O, 7, shift({(-1, 0), (-1, -1)}, center(obj)))
      if uppermost(obj) < len(I) // 2:
        O = fill(O, 6, shift({(-1, 0)}, center(obj)))
  return O
 
4.666666666666667, 2.5215936, def bccaaaagbdebefegibbebjaaeaddcddc(I):
  O = I
  for obj in objects(I, T, T, T):
    O = fill(O, 8, delta(obj))
    i, j = center(obj)
    if i >= len(I) // 2:
      O = fill(O, 7, {(i-1,j), (i-1,j-1)})
    if i - 1 == len(I) // 2:
      O = fill(O, 7, {(i-1,j), (i-1,j-1)})
      O = fill(O, 6, {(i-1,j)})
  return O
 
6.0, 4.5350275, def cbhgabaehiebeheeacedbegeebdaehea(I):
  objs = objects(I, T, T, T)
  O = fill(I, 8, mapply(delta, objs)) # Outline
  for obj in objs:
    bottom_y = lowermost(obj) - 1
    center_x = center(obj)[1]
    O = fill(O, 7, {(bottom_y, center_x), (bottom_y, center_x - 1)}) # Bottom Markers
    if uppermost(obj) < len(I) // 2: # Top half check
      O = fill(O, 6, {(uppermost(obj) + 1, center_x)})  # Top marker
  return O
 
5.666666666666667, 4.1357265, def cabdhdadaedgeddaiacagjcdegiacicg(I):
  O = fill(I, 8, mapply(lambda obj: delta(obj), objects(I, T, T, T))) # Outline with lambda
  for obj in objects(I, T, T, T):
    c = center(obj)
    O = fill(O, 7, {(lowermost(obj) - 1, c[1]), (lowermost(obj) - 1, c[1] - 1)}) # Bottom markers
    if c[0] < len(I) // 2:
      O = fill(O, 6, {(uppermost(obj) + 1, c[1])}) # Top marker
  return O
 
7.333333333333333, 4.73585, def jbffaeadhfjhecefaifeifdbgeaegiac(I):
  objs = objects(I, T, T, T)
  O = fill(I, 8, {loc for obj in objs for loc in delta(obj)}) # Outline using set comprehension
  for obj in objs:
    cx, cy = center(obj)
    O = fill(O, 7, {(lowermost(obj) - 1, cx), (lowermost(obj) - 1, cx - 1)}) # Bottom markers
    if cy < len(I) // 2 and  uppermost(obj) + 1 < len(I): # Additional boundary check for top marker
      O = fill(O, 6, {(uppermost(obj) + 1, cx)}) # Top marker
  return O
 
7.0, 4.305846, def ieecdhbecdhaeejejfddafaadbacafaa(I):
  O = fill(I, 8, mapply(lambda obj: backdrop(obj) - toindices(obj), objects(I, T, T, T)))
  for obj in objects(I, T, T, T):
    if lowermost(obj) >= len(I) // 2:
      O = fill(O, 7, {(lowermost(obj) - 1, center(obj)[1] - 1), (lowermost(obj) - 1, center(obj)[1] + 1)})
    if uppermost(obj) < len(I) // 2 and lowermost(obj) >= len(I) // 2:
      O = fill(O, 6, {(uppermost(obj) + 1, center(obj)[1])})
      O = fill(O, 7, {(uppermost(obj) + 1, center(obj)[1] - 1), (uppermost(obj) + 1, center(obj)[1] + 1)})
  return O
 
9.333333333333334, 6.8877497, def ccbegfeeecbaeicjafdjijiecdajfdch(I):
  O = I
  for obj in objects(I, T, T, T):
    O = fill(O, 8, delta(obj))
    if uppermost(obj) < len(I) // 2:
      O = fill(O, 6, {(uppermost(obj) + 1, center(obj)[1])})
      O = fill(O, 7, {(uppermost(obj) + 1, center(obj)[1] - 1), (uppermost(obj) + 1, center(obj)[1] + 1)})
    if lowermost(obj) >= len(I) // 2:
      O = fill(O, 7, {(lowermost(obj) - 1, center(obj)[1] - 1), (lowermost(obj) - 1, center(obj)[1] + 1)})
  return O
 
7.333333333333333, 5.0087523, def fedbjeffaiheebajaeddcbdbhgbafjfj(I):
  O = fill(I, 8, mapply(lambda obj: backdrop(obj) - toindices(obj), objects(I, T, T, T)))
  for obj in objects(I, T, T, T):
    if lowermost(obj) >= len(I) // 2:
      O = fill(O, 7, {(lowermost(obj) - 1, center(obj)[1] + 1),(lowermost(obj) - 1, center(obj)[1] - 1)})
    if uppermost(obj) < len(I) // 2:
      O = fill(O, 6, {(uppermost(obj) + 1, center(obj)[1])})
      if lowermost(obj) >= len(I) // 2:
        O = fill(O, 7, {(uppermost(obj) + 1, center(obj)[1] + 1), (uppermost(obj) + 1, center(obj)[1] - 1)})
  return O
 
16.333333333333332, 7.9839063, def begbdcchbbbcedhfbdbbcebjcihaeebc(I):
  objs = objects(I, T, T, T)
  O = I
  for obj in objs:
    if height(obj) > 1:
      row_index = uppermost(obj) + max(1, height(obj) - 2)
      for j in range(leftmost(obj), rightmost(obj) + 1):
        if j == leftmost(obj) + width(obj) // 2:
          O = fill(O, 7 if hline(obj) else 6, {(row_index, j)})
          if hline(obj):
            O = fill(O, 7, {(row_index, j - 1)})
        else:
          O = fill(O, 8, {(row_index, j)})
  return O
 
19.0, 17.43664, def eihfigfhgceeejejiebfcjhceeifbfdg(I):
  O = I
  for i, row in enumerate(I):
    for j, value in enumerate(row):
      if value != mostcolor(I):
        obj = extract(objects(I, T, T, T), lambda o: (i, j) in toindices(o))
        if height(obj) > 1 and i == uppermost(obj) + max(1, height(obj) - 2):
          if j == leftmost(obj) + width(obj) // 2:
            O = fill(O, 7 if hline(obj) else 6, {(i, j)})
            if hline(obj):
              O = fill(O, 7, {(i, j - 1)})
          else:
            O = fill(O, 8, {(i, j)})
  return O
 
46.333333333333336, 15.380884, def caegijeacddeefedjdddhebhecebijhb(I):
  objs = objects(I, T, T, T)
  O = fill(I, 8, mapply(toindices, objs))
  for obj in objs:
    if height(obj) > 1:
      row = uppermost(obj) + max(1, height(obj) - 2)
      col = leftmost(obj) + width(obj) // 2
      if hline(obj):
        O = fill(O, 7, {(row, col), (row, col - 1)})
      else:
        O = fill(O, 6, {(row, col)})
  return O
 
5.0, 2.700712, def eddbcibffdffebaejidacafdafjceddh(I):
  objs = objects(I, T, T, T)
  O = fill(I, 8, mapply(delta, objs))
  for obj in objs:
    center_i, center_j = center(obj)
    if lowermost(obj) < len(I) // 2:
      continue
    if uppermost(obj) >= len(I) // 2:
      O = fill(O, 7, {(center_i - 1, center_j), (center_i - 1, center_j - 1)})
    else:
      O = fill(O, 6, {(center_i, center_j)})
      O = fill(O, 7, {(center_i - 1, center_j), (center_i - 1, center_j - 1)})
  return O
 
53.333333333333336, 7.214053, def fehdejcdiafcegijicachdaefhgciffd(I):
  O = I
  for i, row in enumerate(I):
    for j, value in enumerate(row):
      if value != 0:
        O = fill(O, 8, {(i, j)})
        if i >= len(I) // 2:
          if i >= len(I) // 2:
            O = fill(O, 7, {(i - 1, j), (i - 1, j - 1)})
          else:
            O = fill(O, 6, {(i, j)})
            O = fill(O, 7, {(i - 1, j), (i - 1, j - 1)})
  return O
 
134.66666666666666, 74.79898, def ieefdbeehacjecbdabjeeebdbbadihac(I):
  O = fill(I, 8, asindices(I))
  for obj in objects(I, T, T, T):
    if lowermost(obj) >= len(I) // 2:
      ci, cj = center(obj)
      O = fill(O, 7, {(ci-1, cj), (ci-1, cj-1)})
      if uppermost(obj) < len(I) // 2:
        O = fill(O, 6, {(ci, cj)}) 
  return O 
 
102.0, 14.44585, def adafjfccdaaiedcbabiedahfbficaaea(I):
  objs = objects(I, T, T, T)
  O = paint(canvas(8, shape(I)), merge(objs))
  for obj in objs:
    if lowermost(obj) >= len(I) // 2:
      i, j = center(obj)
      if uppermost(obj) < len(I) // 2:
        O = fill(O, 6, {(i,j)})
      O = fill(O, 7, {(i-1, j), (i-1, j-1)})
  return O 
 
12.333333333333334, 17.225359, def ihaccgahebdaefadjaieicfabbeacbbj(I):
  O = I
  for obj in objects(I, T, T, T):
    O = underfill(O, 8, obj)
    ci, cj = center(obj)
    if lowermost(obj) >= len(I) // 2:
      O = underfill(O, 7, {(ci - 1, cj), (ci - 1, cj - 1)})
      if uppermost(obj) < len(I) // 2:
        O = underfill(O, 6, {(ci, cj)})
  return O
 
109.66666666666667, 10.39966, def bcjfdbgghiaceifdideefjbebejecgha(I):
  objs = objects(I, T, T, T)
  O = canvas(8, shape(I))
  for obj in objs:
    O = underpaint(O, obj)
    bottom_indices = {(lowermost(obj), j) for j in range(leftmost(obj), rightmost(obj) + 1) if abs(j - center(obj)[1]) <= 1}
    O = fill(O, 7, bottom_indices)
    if uppermost(obj) < len(I) // 2:
      O = fill(O, 6, {(uppermost(obj) - 1, center(obj)[1])})
  return O
 
48.0, 12.9342575, def bcbiffbcbgideigcijgbaagfhhgaabgc(I):
  O = I
  for obj in objects(I, T, T, T):
    O = fill(O, 8, box(obj)) # Outline using box
    bottom_y = lowermost(obj)
    center_x = center(obj)[1]
    O = fill(O, 7, {(bottom_y, center_x - 1), (bottom_y, center_x)}) # Bottom Markers
    if uppermost(obj) < len(I) // 2:
      O = fill(O, 6, {(uppermost(obj) - 1, center_x)})  # Top marker
  return O
 
4.666666666666667, 3.4565418, def hcfacegajchaechhabecbhhjgjfbafae(I):
  objs = objects(I, T, T, T) # Identify all objects
  O = fill(I, 8, mapply(delta, objs)) # Outline objects with '8'
  for obj in objs:
    if center(obj)[0] > len(I) // 2: # Check if object is in the bottom half
      O = fill(O, 7, {(lowermost(obj) - 1, center(obj)[1]), (lowermost(obj) - 1, center(obj)[1] - 1)}) # Mark with '7'
  O = fill(O, 6, toindices(toobject({(6, center(argmax(objs, size)))}, I))) # Highlight largest object center with '6'
  return O
 
45.666666666666664, 18.00793, def faddfgfebihfefchbdecdgfaedbhaceb(I):
  objs = objects(I, T, T, T)
  O = fill(I, 8, merge([box(obj) for obj in objs])) # Outline objects
  O = fill(O, 7, merge([{(lowermost(obj) - 1, center(obj)[1]), (lowermost(obj) - 1, center(obj)[1] - 1)} if center(obj)[0] > len(I) // 2 else set() for obj in objs])) # Mark lower objects
  largest = max(objs, key=lambda obj: len(obj)) # Find largest object
  O = fill(O, 6, toindices(toobject({(6, center(largest))}, I))) # Highlight center of largest object
  return O
 
8.333333333333334, 6.2415075, def jdajfddccdabebciacdhacfdiffbfbhd(I):
  O = I
  for obj in objects(I, T, T, T):
    O = fill(O, 8, delta(obj))
    y = (lowermost(obj) - 1) if lowermost(obj) >= len(I) // 2 else (uppermost(obj) + 1)
    O = fill(O, 7, {(y, center(obj)[1] - 1), (y, center(obj)[1] + 1)})
    if uppermost(obj) < len(I) // 2 and lowermost(obj) >= len(I) // 2:
      O = fill(O, 6, {(y, center(obj)[1])})
  return O
 
7.333333333333333, 5.3102946, def ffhbbadeebddejiaacbaedcdfigbecde(I):
  O = I
  for obj in objects(I, T, T, T):
    O = paint(fill(O, 8, backdrop(obj)), obj)
    y = uppermost(obj) + 1 if uppermost(obj) < len(I) // 2 and lowermost(obj) >= len(I) // 2 else lowermost(obj) - 1
    O = fill(O, 7, {(y, j) for j in range(center(obj)[1] - 1, center(obj)[1] + 2)})
    if y == uppermost(obj) + 1:
      O = fill(O, 6, {(y, center(obj)[1])})
  return O
 
8.0, 5.5591283, def gibcffifaafbeajjacfcafebfcbccbbd(I):
  O = fill(I, 8, mapply(lambda obj: backdrop(obj) - toindices(obj), objects(I, T, T, T)))
  for obj in objects(I, T, T, T):
    if height(obj) > 1:
      y = (lowermost(obj) - 1) if lowermost(obj) >= len(I) // 2 else (uppermost(obj) + 1)
      O = fill(O, 7, connect((y, center(obj)[1] - 1), (y, center(obj)[1] + 1)))
      if uppermost(obj) < len(I) // 2 and lowermost(obj) >= len(I) // 2:
        O = fill(O, 6, {(y, center(obj)[1])})
  return O
 
5.666666666666667, 2.4491389, def ffgcffcgegdfeegajdjedcfdccjacgcc(I):
  objs = objects(I, T, F, T)
  objs_size = apply(size, objs)
  largest = list(objs)[list(objs_size).index(max(objs_size))]
  smallest = list(objs)[list(objs_size).index(min(objs_size))]
  second_largest = sorted(objs, key=len)[-2]
  O = fill(I, 8, delta(largest))
  O = fill(O, 7, inbox(smallest))
  O = fill(O, 6, toindices(toobject({(6, center(second_largest))}, O)))
  return O
 
3.6666666666666665, 2.7519183, def fdcifefdgjieefaeafbeehhdajcdedfd(I):
  objs = sorted(objects(I, T, F, T), key=len)
  O = fill(I, 8, delta(objs[-1]))
  O = fill(O, 7, inbox(objs[0]))
  O = fill(O, 6, toindices(toobject({(6, center(objs[-2]))}, O)))
  return O
 
6.333333333333333, 3.8849297, def hafdafcdheajejdabfabjebeejedeief(I):
  O = fill(I, 8, mapply(delta, objects(I, T, T, T)))
  for obj in objects(I, T, T, T):
    ci, cj = center(obj)
    if lowermost(obj) >= len(I) // 2:
      O = fill(O, 7, shift({(-1, 0), (-1, -1)}, (ci, cj)))
    if uppermost(obj) < len(I) // 2:
      O = fill(O, 7, shift({(0, 0), (0, -1)}, (ci, cj)))
    if index(I, (ci, cj)) == 5:
      O = fill(O, 6, {(ci, cj)})
  return O 
 
6.333333333333333, 4.2283645, def aadbdgchegdeeadhbgdjageeiciegefa(I):
  O = fill(I, 8, mapply(delta, objects(I, T, T, T)))
  for obj in objects(I, T, T, T):
    ci, cj = center(obj)
    if lowermost(obj) >= len(I) // 2:
      O = fill(O, 7, {(ci - 1, cj), (ci - 1, cj - 1)})
    if uppermost(obj) < len(I) // 2:
      O = fill(O, 7, {(ci, cj), (ci, cj - 1)})
    if uppermost(obj) <= len(I) // 2 <= lowermost(obj):
      O = fill(O, 6, {(ci, cj)})
  return O
 
11.0, 8.895712, def diagfbdhdgebeghdiaeedfdfebcadbcb(I):
  O = fill(I, 8, mapply(lambda obj: delta(obj), objects(I, T, T, T)))  # Outline with lambda
  for obj in objects(I, T, T, T):
    c = center(obj)
    O = fill(O, 7, {(lowermost(obj), c[1] - 1), (lowermost(obj), c[1])})  # Bottom markers
    if uppermost(obj) < len(I) // 2:
      O = fill(O, 6, {(uppermost(obj) - 1, c[1])})  # Top marker
  return O
 
12.333333333333334, 20.275568, def aefchfafccaaeeeiacagcfjggfdefgie(I):
  objs = objects(I, T, T, T)
  O = paint(canvas(8, shape(I)), asobject(I)) # Initialize with input painted on a canvas of '8's
  for obj in objs:
    if center(obj)[0] > len(I) // 2:
      O = underfill(O, 7, {(lowermost(obj) - 1, center(obj)[1]), (lowermost(obj) - 1, center(obj)[1] - 1)}) # Mark below with '7's if in lower half
  O = fill(O, 6, toindices(toobject({(6, center(argmax(objs, size)))}, I))) # Highlight the center of the largest object with '6'
  return O
 
6.0, 3.0492902, def bgfahiahjdfdedbbabgceefbiefchigj(I):
  O = fill(I, 8, mapply(delta, objects(I, T, T, T)))
  for obj in objects(I, T, T, T):
    if lowermost(obj) > len(I) // 2:
      O = fill(O, 7, connect((lowermost(obj) - 1, center(obj)[1] - 1), (lowermost(obj) - 1, center(obj)[1] + 1)))
    if uppermost(obj) < len(I) // 2 and lowermost(obj) > len(I) // 2:
      O = fill(O, 6, {(uppermost(obj) + 1, center(obj)[1] + 1)})
  return O
 
9.0, 4.972716, def bffccjbfceeeecffbaehcdfcjgaibbhf(I):
  objs = objects(I, T, T, T)
  O = fill(I, 8, merge(apply(delta, objs)))
  for obj in objs:
    if any(i >= len(I) // 2 for i, j in toindices(obj)):
      O = fill(O, 7, {(lowermost(obj) + 1, center(obj)[1] - 1), (lowermost(obj) + 1, center(obj)[1]), (lowermost(obj) + 1, center(obj)[1] + 1)})
    if any(i < len(I) // 2 for i, j in toindices(obj)) and any(i >= len(I) // 2 for i, j in toindices(obj)):
      O = fill(O, 6, {(uppermost(obj) - 1, center(obj)[1] + 1)})
  return O
 
7.333333333333333, 3.9719465, def dcacdeaadaicefcaacbebfhbcjbacfcb(I):
  O = I
  for obj in objects(I, T, T, T):
    O = fill(O, 8, delta(obj))
    i, j = center(obj)
    if lowermost(obj) >= len(I) // 2:
      O = fill(O, 7, {(i + height(obj) // 2 - 1, j - width(obj) // 2), (i + height(obj) // 2 - 1, j - width(obj) // 2 + 1)})
    if uppermost(obj) < len(I) // 2 <= lowermost(obj):
      O = fill(O, 7, {(i + height(obj) // 2 - 1, j - width(obj) // 2), (i + height(obj) // 2 - 1, j - width(obj) // 2 + 1)})
      O = fill(O, 6, {(i + height(obj) // 2 - 2, j - width(obj) // 2)})
  return O
 
6.0, 3.880274, def bfbgdcfdfajfecbgjbhbcafigcabaaeg(I):
  O = I
  for obj in objects(I, T, T, T):
    O = fill(O, 8, delta(obj))
    if lowermost(obj) >= len(I) // 2:
      O = fill(O, 7, shift({(-1, 0), (-1, 1)}, llcorner(obj)))
    if uppermost(obj) < len(I) // 2 <= lowermost(obj):
      O = fill(O, 7, shift({(-1, 0), (-1, 1)}, llcorner(obj)))
      O = fill(O, 6, shift({(-2, 0)}, llcorner(obj)))
  return O
 
7.666666666666667, 4.0736113, def hdeabdbeffebebeiicjfgbaeajcfibgc(I):
  O = I
  for obj in objects(I, T, T, T):
    O = fill(O, 8, backdrop(obj) - toindices(obj))
    if lowermost(obj) >= len(I) // 2:
      O = fill(O, 7, {(lowermost(obj), leftmost(obj)), (lowermost(obj), leftmost(obj) + 1)})
    if uppermost(obj) < len(I) // 2 <= lowermost(obj):
      O = fill(O, 7, {(lowermost(obj), leftmost(obj)), (lowermost(obj), leftmost(obj) + 1)})
      O = fill(O, 6, {(lowermost(obj) - 1, leftmost(obj))})
  return O
 
10.666666666666666, 8.340178, def eigddbejecefegdbbieabdecbiadaedb(I):
  O = I  # Start with the input
  for obj in objects(I, T, T, T):  # Iterate through objects
    O = fill(O, 8, delta(obj))  # Outline the object
    c = center(obj)
    O = fill(O, 7, {(lowermost(obj), c[1] - 1), (lowermost(obj), c[1])})  # Bottom markers
    if c[0] < len(I) // 2:  # Check for top half
      O = fill(O, 6, {(uppermost(obj) - 1, c[1])})  # Top marker
  return O
 
107.0, 11.769812, def fdfeebaajfdeecbgbiagjggegdcjagdf(I):
  O = canvas(8, shape(I)) # Start with a blank canvas of '8's
  for obj in objects(I, T, T, T):
    O = underpaint(O, recolor(color(obj), obj))  # Paint using object's color over '8's
    c = center(obj)
    O = fill(O, 7, {(lowermost(obj), c[1] - 1), (lowermost(obj), c[1])})  # Bottom markers
    if c[0] < len(I) // 2:
      O = fill(O, 6, {(uppermost(obj) - 1, c[1])})  # Top marker
  return O
 
13.333333333333334, 9.1600485, def aigaefdiadaaeggibjecjcdffgcahfcj(I):
  objs = objects(I, T, T, T)
  O = I
  O = fill(O, 8, mapply(delta, objs))  # Outline objects
  for obj in objs:
    c = center(obj)
    O = fill(O, 7, {(lowermost(obj), j) for j in range(c[1] - 1, c[1] + 2) if 0 <= j < len(I[0])}) # Bottom markers with bounds check
    if c[0] < len(I) // 2:
      O = fill(O, 6, {(uppermost(obj) - 1, c[1])})  # Top marker
  return O
 
9.0, 5.0111146, def dbebfgjgaebiebbbiffiefhbbhibjehe(I):
  O = I
  for obj in objects(I, T, T, T):
    O = fill(O, 8, delta(obj))
    if lowermost(obj) >= len(I) // 2:
      O = fill(O, 7, {(lowermost(obj) + 1, j) for j in range(center(obj)[1]-1, center(obj)[1]+2)})
    if uppermost(obj) < len(I) // 2 and lowermost(obj) >= len(I) // 2:
      O = fill(O, 6, {(uppermost(obj) - 1, center(obj)[1])})
  return O
 
7.666666666666667, 7.873275, def cgdecafgdhaeebdbieadfbjadabaahed(I):
  objs = sorted(objects(I, T, F, T), key=lambda x: (uppermost(x), -len(x)))
  top_obj, bottom_obj = objs[0], objs[-1]
  O = fill(I, 8, delta(top_obj))
  if height(bottom_obj) > 1:
    second_last_row = uppermost(bottom_obj) + height(bottom_obj) - 2
    center_j = leftmost(bottom_obj) + width(bottom_obj) // 2
    if hline(bottom_obj):
      O = fill(O, 7, {(second_last_row, center_j), (second_last_row, center_j - 1)})
    else:
      O = fill(O, 7, {(second_last_row, center_j)})
  if height(top_obj) > 1:
    second_last_row = uppermost(top_obj) + height(top_obj) - 2
    center_j = leftmost(top_obj) + width(top_obj) // 2
    O = fill(O, 6, {(second_last_row, center_j)})
  return O
 
9.0, 6.7405076, def adcicjiecjdbedbfifjdeaaffgccafab(I):
  top_obj = min(objects(I, T, F, T), key=uppermost)
  bottom_obj = max(objects(I, T, F, T), key=lowermost)
  O = fill(I, 8, delta(top_obj))
  O = fill(O, 7, {(i-1, j) for i, j in toindices(bottom_obj) if i == lowermost(bottom_obj)})
  if height(top_obj) > 1:
    O = fill(O, 6, {(uppermost(top_obj) + height(top_obj) - 2, leftmost(top_obj) + width(top_obj) // 2)})
  return O
 
9.333333333333334, 8.192884, def fbieehheigbjeaidbfidiaffegfeebcg(I):
  top_obj = min(objects(I, T, F, T), key=lambda obj: (uppermost(obj), -len(obj)))
  bottom_obj = max(objects(I, T, F, T), key=lowermost)
  O = fill(I, 8, backdrop(top_obj) - toindices(top_obj))
  O = fill(O, 7, toindices(shift(recolor(7, {(lowermost(bottom_obj), leftmost(bottom_obj))}), (-1, 0))))
  if height(top_obj) > 1:
    O = fill(O, 6, {(uppermost(top_obj) + height(top_obj) - 2, leftmost(top_obj) + width(top_obj) // 2)})
  return O
 
7.333333333333333, 3.8048806, def cbifbefdehedeiiaieedgeahfbiecdhi(I):
  O = I
  for obj in objects(I, T, T, T):
    O = fill(O, 8, delta(obj))
    bottom_left = (lowermost(obj), leftmost(obj))
    if lowermost(obj) >= len(I) // 2:
      O = fill(O, 7, {bottom_left, add(bottom_left, RIGHT)})
    if uppermost(obj) < len(I) // 2 <= lowermost(obj):
      O = fill(O, 7, {bottom_left, add(bottom_left, RIGHT)})
      O = fill(O, 6, {bottom_left})
  return O
 
8.666666666666666, 4.7631845, def gdbjceadbebeeebbafcfaebgdagdhdjd(I):
  O = I
  for obj in objects(I, T, T, T):
    O = fill(O, 8, delta(obj))
    center_i, _ = centerofmass(obj)
    bottom_left = (lowermost(obj), leftmost(obj))
    if center_i >= len(I) // 2:
      O = fill(O, 7, {bottom_left, add(bottom_left, RIGHT)})
    if uppermost(obj) < len(I) // 2:
      O = fill(O, 6, {bottom_left})
  return O
 
7.333333333333333, 3.8479075, def ffbifbdjdfffeiiabgajafcfaefbcddh(I):
  O = I
  centerline = {(len(I) // 2, j) for j in range(len(I[0]))}
  for obj in objects(I, T, T, T):
    O = fill(O, 8, delta(obj))
    bottom_left = (lowermost(obj), leftmost(obj))
    if lowermost(obj) >= len(I) // 2:
      O = fill(O, 7, {bottom_left, add(bottom_left, RIGHT)})
    if len(intersection(toindices(obj), centerline)) > 0:
      O = fill(O, 6, {bottom_left})
  return O
 
8.666666666666666, 4.687896, def aifbafadebgfedefifhibjbcbhdhgbhe(I):
  O = I
  for obj in objects(I, T, T, T):
    O = fill(O, 8, delta(obj))
    markings = set()
    bottom_left = (lowermost(obj), leftmost(obj))
    if lowermost(obj) >= len(I) // 2:
      markings.update({bottom_left, add(bottom_left, RIGHT)})
    if uppermost(obj) < len(I) // 2:
      markings.add(bottom_left)
    O = fill(O, 7 if lowermost(obj) >= len(I) // 2 else 6, markings)
  return O
 
107.0, 11.085866, def eccdfedifaeheegdjecififcdjjjdeje(I):
  O = replace(I, mostcolor(I), 8)  # Replace background with 8 for outline
  for obj in objects(I, T, T, T):
    c = center(obj)
    O = fill(O, 7, {(lowermost(obj), c[1] - 1), (lowermost(obj), c[1])})  # Bottom markers
    if uppermost(obj) < len(I) // 2:
      O = fill(O, 6, {(uppermost(obj) - 1, c[1])})  # Top marker
  return O
 
10.333333333333334, 6.134573, def hadhdbfbcbfcecddijabbggcebedacfc(I):
  objs = objects(I, T, T, T)
  O = fill(I, 8, merge(apply(delta, objs)))
  for obj in objs:
    if uppermost(obj) != lowermost(obj) and lowermost(obj) >= len(I) // 2:
      O = fill(O, 7, {(lowermost(obj) + 1, j) for i, j in toindices(obj) if i == lowermost(obj)})
    if uppermost(obj) < len(I) // 2 and lowermost(obj) >= len(I) // 2:
      O = fill(O, 6, {(uppermost(obj) - 1, center(obj)[1])})
  return O
 
3.6666666666666665, 3.657962, def edahbhjedagdedgbbbcfeeebffdhfbbc(I):
  objs = sorted(objects(I, T, F, T), key=len)
  O = fill(I, 8, delta(objs[-1]))  # Fill around largest
  O = fill(O, 7, inbox(objs[0]))   # Fill inside smallest
  O = fill(O, 6, {center(objs[1])}) # Fill center of second smallest
  return O 
 
3.3333333333333335, 2.760878, def icfdjadcecfaebgdafdaaacdbaeifcab(I):
  objs = sorted(objects(I, T, F, T), key=len)
  O = I
  for i, obj in enumerate(objs):
    if i == 0:
      O = fill(O, 7, inbox(obj)) 
    elif i == len(objs) - 1:
      O = fill(O, 8, delta(obj))
    elif i == len(objs) - 2:
      O = fill(O, 6, {center(obj)})
  return O
 
9.333333333333334, 5.297684, def accabecbgibdecfjjehafagfgdafeaac(I):
  O = fill(I, 8, mapply(delta, objects(I, T, T, T)))
  for obj in objects(I, T, T, T):
    ci, cj = center(obj)
    if uppermost(obj) < len(I) // 2:
      O = fill(O, 7, shift({(-1, 0), (-1, -1)}, (ci, cj)))
    if lowermost(obj) >= len(I) // 2:
      O = fill(O, 7, shift({(1, 0), (1, -1)}, (ci, cj)))
    if cj == len(I[0]) // 2 and index(O, (ci, cj)) == 5:
      O = fill(O, 6, {(ci, cj)})
  return O
 
9.0, 5.522958, def adfeadecdeaheddbjebejejcgedichde(I):
  O = I
  for obj in objects(I, T, T, T):
    O = fill(O, 8, delta(obj))
    ci, cj = center(obj)
    if centerofmass(obj)[0] < len(I) // 2:
      O = fill(O, 7, {(ci - 1, cj), (ci - 1, cj - 1)})
    if centerofmass(obj)[0] >= len(I) // 2:
      O = fill(O, 7, {(ci + 1, cj), (ci + 1, cj - 1)})
    if colorcount(obj, 5) > 4:
      O = fill(O, 6, {(ci, cj)})
  return O
 
5.333333333333333, 4.3329754, def heagfehcajdbeabbbhgahdagjjfbgjae(I):
  O = I
  for obj in objects(I, T, T, T):
    O = paint(fill(O, 8, delta(obj)), recolor(7, intersection(delta(obj), shift({(-1, 0), (-1, -1)}, center(obj)))) )
    if lowermost(obj) >= len(I) // 2:
      O = paint(O, recolor(7, intersection(delta(obj), shift({(1, 0), (1, -1)}, center(obj)))) )
    if  center(obj)[1] == len(I[0]) // 2:
      O = underfill(O, 6, obj)
  return O
 
135.0, 63.929214, def aggbehdiccfieedajcdffjdbajfcfbjc(I):
  O = canvas(8, shape(I))
  for obj in objects(I, T, T, T):
    O = underpaint(O, recolor(8, obj)) # Paint objects with 8 on canvas
    c = center(obj)
    O = fill(O, 7, {(lowermost(obj), c[1] - 1), (lowermost(obj), c[1])})  
    if uppermost(obj) < len(I) / 2:
      O = fill(O, 6, {(uppermost(obj), c[1])})  
  return O
 
20.666666666666668, 13.867571, def hbejfgdcffffejehifadeacgaadfbfff(I):
  O = I
  for obj in objects(I, T, T, T):
    c = center(obj)
    u, l = uppermost(obj), c[1]
    O = fill(O, 7, {(lowermost(obj), l - 1), (lowermost(obj), l)})
    if u < len(I) / 2:
      O = fill(O, 6, {(u, l)})
  return fill(O, 8, delta(asobject(I))) # Fill outline with 8
 
11.666666666666666, 9.883261, def cadebcabcgeceacbjgbbafhgbfbfcfha(I):
  O = I
  for obj in objects(I, T, T, T):
    bottom_row = lowermost(obj)
    center_col = centerofmass(obj)[1] 
    O = fill(O, 7, {(bottom_row, center_col - 1), (bottom_row, center_col)})
    if uppermost(obj) < len(I) / 2:
      O = fill(O, 6, {(uppermost(obj), center_col)}) 
  return fill(O, 8, mapply(delta, objects(I, T, T, T)))
 
9.0, 5.046368, def hgadffjdjdabebcajagbhiaaccehhhgb(I):
  O = fill(I, 8, mapply(delta, objects(I, T, T, T)))
  for obj in objects(I, T, T, T):
    if lowermost(obj) >= len(I) // 2:  
      O = fill(O, 7, {(lowermost(obj) + 1, centerofmass(obj)[1] - 1),
                       (lowermost(obj) + 1, centerofmass(obj)[1]),
                       (lowermost(obj) + 1, centerofmass(obj)[1] + 1)})
    if uppermost(obj) < len(I) // 2 and lowermost(obj) >= len(I) // 2:
      O = fill(O, 6, {(uppermost(obj) - 1, centerofmass(obj)[1])})
  return O 
 
5.0, 2.7925963, def fgfabcabijbaedcjjihbadcdjiebhbch(I):
  O = fill(I, 8, mapply(delta, objects(I, T, T, T))) # Highlight deltas of all objects
  for obj in objects(I, T, T, T):
    if lowermost(obj) >= len(I) // 2:  # Check if object is in bottom half
      O = fill(O, 7, shift({(-1, 0), (-1, -1)}, center(obj)))  # Fill two cells above center
    if hmatching(obj, {(len(I) // 2, 0)}) :  # Check if object intersects middle row
      O = fill(O, 6, {center(obj)})  # Fill center with '6'
  return O 
 
4.666666666666667, 2.7503777, def ffbjbgdjdbfcegceahhddjaeafbfagag(I):
  O = I
  for obj in objects(I, T, T, T):
    O = paint(fill(O, 8, delta(obj)), obj) # Highlight delta, repaint object
    if center(obj)[0] >= len(I) // 2: # Check for bottom half using center
      O = paint(O, recolor(7, shift({(-1, 0), (-1, -1)}, center(obj)))) # Recolor cells above center
    if contained(center(obj)[0], interval(len(I) // 2, len(I), 1)):  # Check middle row intersection
      O = fill(O, 6, {center(obj)})
  return O
 
11.666666666666666, 9.950516, def ejaccbgbgcbjebgeiacccjcdebjdjcib(I):
  objs = objects(I, T, T, T)  # Identify all objects in the grid
  O = fill(I, 8, mapply(delta, objs))  # Draw outlines around objects
  for obj in objs:
    c = center(toindices(obj))  # Find object center
    O = fill(O, 7, {(lowermost(obj), c[1]-1), (lowermost(obj), c[1])})  # Place bottom markers
    if uppermost(obj) < len(I) / 2:  # Check if object is in the top half
      O = fill(O, 6, {(uppermost(obj), c[1])})  # Place top marker
  return O
 
47.0, 16.804567, def bcafbfefeiehefjajecjhajjidbabcab(I):
  objs = objects(I, T, T, T) 
  O = fill(I, 8, mfilter(objs, delta)) # Outline objects with '8'
  bottom_indices = mfilter(objs, lambda obj: {(lowermost(obj) - 1, center(obj)[1]), (lowermost(obj) - 1, center(obj)[1] - 1)} if lowermost(obj) > len(I) // 2 else frozenset())
  O = fill(O, 7, bottom_indices)  # Mark with '7's'
  O = fill(O, 6, {center(argmax(objs, size))})  # Mark the center of the largest object
  return O
 
7.0, 3.8960965, def ecjicafabbccegdbbbichfcfbaeagagf(I):
  objs = objects(I, T, T, T)
  O = fill(I, 8, merge([delta(obj) for obj in objs])) # Outline objects using list comprehension
  for obj in objs:
    if uppermost(obj) > len(I) // 2:
      j = center(obj)[1]
      O = fill(O, 7, {(lowermost(obj) + 1, j), (lowermost(obj) + 1, j - 1)}) # Place '7's below the object
  O = fill(O, 6, {center(argmax(objs, size))}) 
  return O
 
4.333333333333333, 2.5674005, def aaeaddaigcedebeaacebjffjbjacejec(I):
  O = fill(I, 8, mapply(delta, objects(I, T, T, T))) # Highlight the delta of all objects
  for obj in objects(I, T, T, T):
    if lowermost(obj) >= len(I) // 2:  # Check if object is in bottom half
      O = fill(O, 7, shift({(-1, 0), (-1, -1)}, center(obj))) # Draw chevron
      if uppermost(obj) < len(I) // 2: # Check if object spans both halves
        O = fill(O, 6, {center(obj)})  # Mark center with '6'
      else:
        O = fill(O, 7, {center(obj)}) # Mark center with '7'
  return O
 
9.0, 6.5222406, def bajdhfcabagdeddfbabjcciiiibdhega(I):
  O = fill(I, 8, mapply(delta, objects(I, T, T, T)))  # Outline directly on the input grid
  for obj in objects(I, T, T, T):
    bottom = lowermost(obj) - 1
    center_x = (leftmost(obj) + rightmost(obj)) // 2 # Calculate center manually
    O = fill(O, 7, {(bottom, center_x - 1), (bottom, center_x)})
    if uppermost(obj) < len(I) // 2:
      O = fill(O, 6, {(uppermost(obj), center_x)})
  return O
 
8.666666666666666, 6.014478, def aefdbjajcbeaedfeadaaabaegdjaajfi(I):
  O = I  # Modify the input grid directly
  for obj in objects(I, T, T, T):
    O = fill(O, 8, delta(obj))  # Outline
    bottom = lowermost(obj) - 1
    center_x = centerofmass(obj)[1]
    O = fill(O, 7, {(bottom, center_x - 1), (bottom, center_x)})
    if all(i < len(I) // 2 for i, j in toindices(obj)): # Check if all object cells are in the top half
      O = fill(O, 6, {(uppermost(obj), center_x)})
  return O
 
15.666666666666666, 21.158197, def hhebfgbbeeafecedifddaabcfbfihbib(I):
  objs = objects(I, T, T, T) # Identify all distinct objects
  O = fill(I, 8, mapply(lambda obj: box(obj) - toindices(obj), objs)) # Outline objects
  for obj in objs:
    if center(obj)[0] > len(I) // 2: # Check if object is below midline
      O = fill(O, 7, {(lowermost(obj) + 1, center(obj)[1] - 1),(lowermost(obj) + 1, center(obj)[1])}) # Draw the horizontal line
  O = fill(O, 6, {center(argmax(objs, size))}) # Mark the largest object's center
  return O
 
10.333333333333334, 6.1262755, def bdagcddcfbcfefhaajdeebdhdgaadhcb(I):
  O = fill(I, 8, mapply(lambda obj: backdrop(obj) - toindices(obj), objects(I, T, T, T)))
  for obj in objects(I, T, T, T):
    if lowermost(obj) >= len(I) // 2:
      O = fill(O, 7, connect((lowermost(obj) + 1, leftmost(obj)), (lowermost(obj) + 1, rightmost(obj))))
    if uppermost(obj) < len(I) // 2 and lowermost(obj) >= len(I) // 2:
      O = fill(O, 6, {(uppermost(obj), (leftmost(obj) + rightmost(obj)) // 2)})
  return O
 
19.333333333333332, 14.920618, def bfjgdeafbfddehadjaaefbjccfgfjddh(I):
  O = paint(canvas(8, shape(I)), asobject(I))  
  for obj in objects(I, T, T, T):
    if lowermost(obj) >= len(I) // 2:
      O = fill(O, 7, {(lowermost(obj) + 1, j) for i, j in toindices(obj) if i == lowermost(obj)})
    if uppermost(obj) < len(I) // 2:
      if lowermost(obj) >= len(I) // 2:
        O = fill(O, 6, {(uppermost(obj), (leftmost(obj) + rightmost(obj)) // 2)})
  return O
 
4.333333333333333, 2.6276398, def cfeacfddabceedcdiiccccfieceejjea(I):
  objs = objects(I, T, T, T)
  O = fill(I, 8, mapply(delta, objs)) 
  for obj in objs:
    if lowermost(obj) >= len(I) // 2:  
      O = fill(O, 7, shift({(-1, 0), (-1, -1)}, center(obj))) 
      if contained(center(obj)[0], interval(0, len(I) // 2, 1)): # Check if center in top half
        O = fill(O, 6, {center(obj)})  
      else:
        O = fill(O, 7, {center(obj)}) 
  return O
 
6.666666666666667, 4.9149127, def jbeacdchffhiefafaijaifffdeebdebd(I):
  O = fill(I, 8, mapply(delta, objects(I, T, T, T))) # Outline on original grid
  for obj in objects(I, T, T, T):
    top, left = ulcorner(obj)
    height_obj, width_obj = shape(obj)
    O = fill(O, 7, {(top + height_obj - 2, left + width_obj // 2 - 1), 
                    (top + height_obj - 2, left + width_obj // 2)})
    if top + height_obj <= len(I) // 2:  
      O = fill(O, 6, {(top, left + width_obj // 2)})
  return O
 
104.0, 7.6478596, def jedibicjddciedhejcdcfeeeddededdj(I):
  O = canvas(8, shape(I))
  for obj in objects(I, T, T, T):
    O = paint(O, obj) # Outline the object
    O = underfill(O, 7, {(lowermost(obj) - 1, j) for j in range(leftmost(obj), rightmost(obj) + 1)}) # Bottom markers
    if centerofmass(obj)[0] < len(I) // 2:
      O = fill(O, 6, {(uppermost(obj), centerofmass(obj)[1])}) 
  return O
 
7.666666666666667, 4.1284957, def cafdcbcdaaadehijbbbhcdfhfafbbdbg(I):
  objs = objects(I, T, T, T) # Identify all objects
  O = fill(I, 8, mapply(delta, objs)) # Outline all objects with '8'
  for obj in objs:
    if center(obj)[0] > len(I) // 2: # Check if object is in the bottom half
      O = fill(O, 7, connect((lowermost(obj) + 1, center(obj)[1] - 1), (lowermost(obj) + 1, center(obj)[1]))) # Draw the line
  O = fill(O, 6, {center(argmax(objs, size))}) # Mark the center of the largest object
  return O
 
19.333333333333332, 14.7773, def bihadihidffieiecifafgeadcegheffa(I):
  O = paint(canvas(8, shape(I)), asobject(I))
  for obj in objects(I, T, T, T):
    if any(i >= len(I) // 2 for i, j in toindices(obj)):
      O = fill(O, 7, connect((lowermost(obj) + 1, leftmost(obj)), (lowermost(obj) + 1, rightmost(obj))))
    if uppermost(obj) < len(I) // 2 and lowermost(obj) >= len(I) // 2:
      O = fill(O, 6, {(uppermost(obj) - 1, center(obj)[1])})
  return O
 
11.666666666666666, 8.040113, def cgcjcjcieebaeeidjbjdjadecadfdhee(I):
  objs = objects(I, T, F, T)
  for obj in objs:
    second_last_row = uppermost(obj) + height(obj) - 2
    center_j = leftmost(obj) + width(obj) // 2
    if hline(obj):
      I = fill(I, 7, {(second_last_row, center_j), (second_last_row, center_j - 1)})
    else:
      I = fill(I, 6, {(second_last_row, center_j)})
  return I
 
7.0, 6.7630496, def gegifidcbafbedaaaegdeadcfgdcfhhd(I):
  objs = objects(I, T, T, T)
  for obj in objs:
    if color(obj) == 5:
      center_j = leftmost(obj) + width(obj) // 2
      second_last_row = uppermost(obj) + height(obj) - 2
      I = fill(I, 6, {(second_last_row, center_j)}) 
    elif color(obj) == 7:
      center_j = leftmost(obj) + width(obj) // 2
      second_last_row = uppermost(obj) + height(obj) - 2
      I = fill(I, 7, {(second_last_row, center_j)})
  return I
 
7.0, 6.2708664, def fcffbbjbjfafecfdjfjjigjfeaffbabe(I):
  for v in (5, 7):
    for loc in ofcolor(I, v):
      obj = extract(objects(I, T, T, T), lambda x: contained(loc, toindices(x)))
      center_j = leftmost(obj) + width(obj) // 2
      second_last_row = uppermost(obj) + height(obj) - 2
      target_loc = (second_last_row, center_j)
      if target_loc != loc: 
        I = fill(I, {5: 6, 7: 7}[v], {target_loc})
  return I
 
7.666666666666667, 5.56652, def gcfdejgdjcaieibbidcagedfdebafcai(I):
  for obj in objects(I, T, T, T):
    if color(obj) in (5,7):
      ci, cj = centerofmass(obj)
      target = (ci - 1, cj) if height(obj) > 1 else (ci, cj)
      I = fill(I, color(obj) + (color(obj) == 5), {target})
  return I
 
6.0, 3.970735, def hfddfeedidfbeffgbdfebghacdgibhcj(I):
  obj_6 = extract(objects(I, T, F, T), lambda obj: color(obj) == 6)
  obj_7 = extract(objects(I, T, F, T), lambda obj: color(obj) == 7)
  O = fill(I, 8, toindices(obj_6))
  O = fill(O, 7, {(lowermost(obj_7) + 1, leftmost(obj_7))})
  if height(obj_6) > 1:
    O = fill(O, 6, {(uppermost(obj_6) + height(obj_6) - 2, leftmost(obj_6) + width(obj_6) // 2)})
  return O 
 
8.0, 5.5253925, def ibdahaejbbgcehhibdejcacbeeedjcaa(I):
  O = I
  for obj in objects(I, T, F, T):
    if color(obj) == 6:
      O = fill(O, 8, toindices(obj))
      if height(obj) > 1:
        O = fill(O, 6, {(uppermost(obj) + height(obj) - 2, leftmost(obj) + width(obj) // 2)})
    elif color(obj) == 7:
      O = fill(O, 7, {(lowermost(obj) + 1, leftmost(obj))})
  return O
 
6.666666666666667, 4.5800886, def hcedcfeeegadejdejafjadgaebcgeafc(I):
  six_locs = {(i, j) for i, row in enumerate(I) for j, v in enumerate(row) if v == 6}
  seven_locs = {(i, j) for i, row in enumerate(I) for j, v in enumerate(row) if v == 7}
  O = fill(I, 8, six_locs)
  O = fill(O, 7, {add(min(seven_locs, key=lambda x: x[0]), DOWN)})
  if len({i for i, j in six_locs}) > 1:
    O = fill(O, 6, {(max(i for i, j in six_locs) - 1, (min(j for i, j in six_locs) + max(j for i, j in six_locs)) // 2)})
  return O
 
47.333333333333336, 11.634012, def cchcfbbdihjhehahaadajfjaeacghfdb(I):
  objs = objects(I, T, F, F)
  O = I
  for obj in objs:
    color_to_replicate = color(obj)
    if color_to_replicate != 0:
      for j in range(1, color_to_replicate):
        row_to_paint = shift(obj, (j,0))
        O = paint(O, recolor(color_to_replicate, row_to_paint))
  return O
 
11.333333333333334, 6.542104, def eaaiccgfaajdeaefjaijdbiiehhbbgda(I):
  def get_modified_pixels(obj):
    row = uppermost(obj) + height(obj) - 2
    col = leftmost(obj) + width(obj) // 2
    return ((row, col), (row, col - 1)) if hline(obj) else ((row, col),)
  
  modified_pixels = mapply(get_modified_pixels, objects(I, T, F, T))
  for row, col in modified_pixels:
    I = fill(I, 7 if len((row, col)) == 2 else 6, {(row, col)})
  return I
 
6.333333333333333, 4.325214, def aafadbfbedhaebbdabiiigbafbdeeeai(I):
  objs = objects(I, T, T, T)
  target_cells = frozenset()
  for obj in objs:
    if color(obj) in (5, 7):
      center_j = leftmost(obj) + width(obj) // 2
      second_last_row = uppermost(obj) + height(obj) - 2
      if index(I, (second_last_row, center_j)) == 5:
        target_cells = target_cells | {(second_last_row, center_j)}
  return fill(I, 6, target_cells) 
 
5.666666666666667, 4.135726, def iaeeeecgecfjehfdacfddacbiceabceb(I):
  objs = objects(I, T, T, T)
  for obj in objs:
    if color(obj) in (5, 7):
      for i, row in enumerate(crop(I, ulcorner(obj), shape(obj))):
        for j, val in enumerate(row):
          if i == height(obj) - 2 and j == width(obj) // 2 and val == 5:
            I = fill(I, 6, {(i + uppermost(obj), j + leftmost(obj))})
  return I
 
6.666666666666667, 4.5166836, def hbaiffdadeeaebcfjhfeggebhbdbdcad(I):
  sixes = ofcolor(I, 6)
  sevens = ofcolor(I, 7)
  O = fill(I, 8, sixes)
  O = fill(O, 7, {tuple(map(sum, zip(lrcorner(sevens), DOWN)))})
  if uppermost(sixes) != lowermost(sixes):
    O = fill(O, 6, {(lowermost(sixes) - 1, (leftmost(sixes) + rightmost(sixes)) // 2)})
  return O
 
6.333333333333333, 4.4815097, def cgfdjfaibbciebajabjhddijahaeajda(I):
  six_obj = extract(objects(I, True, False, True), lambda obj: color(obj) == 6)
  seven_obj = extract(objects(I, True, False, True), lambda obj: color(obj) == 7)
  O = paint(replace(I, 6, 8), recolor(7, {tuple(add(x, y) for x, y in zip(lrcorner(seven_obj), DOWN))})) 
  if height(six_obj) > 1:
    O = underfill(O, 6, {(lowermost(six_obj) - 1, (leftmost(six_obj) + rightmost(six_obj)) // 2)})
  return O
 
72.33333333333333, 10.244461, def fdfdfcicjfdeedaeidaafaeaefefacbb(I):
    objs = objects(I, T, F, F)
    O = I
    for obj in objs:
        c = color(obj)
        if c > 0:
            start_row = uppermost(obj) + 1
            row = crop(I, (start_row, 0), (1, width(I)))
            for i in range(c - 1):
                O = vconcat(crop(O, (0, 0), (start_row + i, width(I))), vconcat(row, crop(O, (start_row + i, 0), (height(I) - start_row - i, width(I)))))
    return O
 
37.666666666666664, 60.13483, def gdiifbbefidbebfgaaccgcagbhfbifed(I):
  objs = objects(I, T, F, F)
  O = I
  for obj in objs:
    n = color(obj)
    if n > 1:  
      y, x = ulcorner(obj)
      row = crop(I, (y+1, x), (1, width(obj)))
      O = paint(O, toobject(frozenset({(n-1, (y+1+i, x+j)) for i in range(n-1) for j in range(width(row))}), canvas(0, shape(I))))
  return O
 
11.666666666666666, 8.089832, def hfbbicdiicebebcejheccdebefgaabdi(I):
  modified_objects = set()
  for obj in objects(I, T, F, T):
    row = uppermost(obj) + height(obj) - 2
    col = leftmost(obj) + width(obj) // 2
    if hline(obj):
      modified_objects.add((7, (row, col)))
      modified_objects.add((7, (row, col - 1)))
    else:
      modified_objects.add((6, (row, col)))
  return paint(I, frozenset(modified_objects))
 
11.333333333333334, 4.283486, def fcfaejhfeacgebbaadbdbfcafdcafdhh(I):
  def process_cell(i, j):
    return 7 if (i > 0 and I[i - 1][j] == 8) or I[i][j] == 8 else I[i][j]
  O = canvas(0, shape(I))
  O = tuple(tuple(process_cell(i, j) for j in range(len(I[0]))) for i in range(len(I)))
  return O
 
619.3333333333334, 23.818472, def bbegcadfjbhieiccbffgefafhddcabjd(I):
    objs = objects(I, T, F, F)
    O = list(list(r) for r in I)
    for obj in objs:
        c = color(obj)
        if c > 0:
            target_i = uppermost(obj) + height(obj)
            for _ in range(c - 1):
                O.insert(target_i, O[target_i - 1][:])  # Copy the row above
    return tuple(tuple(r) for r in O)
 
10.333333333333334, 6.484714, def bfjdfcjefcejebjcbfhcfedidhgagehj(I):
  return paint(I, merge(
    tuple(
        {(7, (i, j)), (7, (i, j - 1))} if all(I[k][j] == I[i][j] for k in range(uppermost(obj), lowermost(obj) + 1)) else
        {(6, (i, j))}
        for obj in objects(I, T, F, T)
        for i, j in ((uppermost(obj) + height(obj) - 2, leftmost(obj) + width(obj) // 2),)
    )
  ))
 
7.333333333333333, 4.3616524, def agcdfbgadajdejfcibfiffbagjcibibc(I):
  modified_grid = I #Create a copy to modify
  objs = objects(I, T, T, T)
  for obj in objs:
    if color(obj) in (5, 7):
      target_row = uppermost(obj) + height(obj) - 2
      target_col = leftmost(obj) + width(obj) // 2
      if index(I, (target_row, target_col)) != 5:
        modified_grid = fill(modified_grid, 6, {(target_row, target_col)}) #Modify the copy directly
  return modified_grid
 
25.0, 10.360098, def fcdhcfefbdhaedfdbcdbdheafihcfhaa(I):
  def modify_cell(v, loc):
    i, j = loc
    if v in (5, 7) and index(I, (i - 1, j)) != 5:
      return 6
    return v
  return tuple(tuple(modify_cell(v, (i, j)) for j, v in enumerate(row)) for i, row in enumerate(I)) #Process cell-by-cell
 
43.0, 21.594793, def ececjjfcifajebihidbadcgdbdgeccib(I):
  return paint(I, merge(apply(lambda obj: recolor(7, toindices(obj) | {(i + 1, j) for i, j in toindices(obj) if i < lowermost(obj)} if 8 in palette(obj) else toindices(obj)), fgpartition(I)))) 
 
11.0, 3.9837296, def eddchedjiefieibdbbhdibbjadihigae(I):
  O = I
  for obj in fgpartition(I):
    if 8 in palette(obj):
      O = paint(O, recolor(7, toindices(obj) | {(i + 1, j) for i, j in toindices(obj) if i < lowermost(obj)}))
  return O
 
6.0, 4.3602166, def deachaecddcgedacibdbciacgfcidcja(I):
  six_obj = extract(objects(I, True, False, True), lambda obj: color(obj) == 6)
  seven_indices = ofcolor(I, 7)
  O = fill(I, 8, toindices(six_obj))
  O = fill(O, 7, {tuple(add(x, y) for x, y in zip(lrcorner(seven_indices), DOWN))}) 
  if height(six_obj) > 1:
    O = fill(O, 6, {(lowermost(six_obj) - 1, leftmost(six_obj) + width(six_obj) // 2)})
  return O
 
6.0, 3.9031646, def aabfcfcedcjeeecbjccaadaagcafafca(I):
  O = I
  for v, loc in asobject(I):
    if v == 6:
      O = fill(O, 8, {loc})
      if len(set(i for i, j in ofcolor(I, 6))) > 1:
        six_indices = ofcolor(I, 6)
        O = fill(O, 6, {(lowermost(six_indices) - 1, leftmost(six_indices) + width(six_indices) // 2)})
    elif v == 7:
      if loc == lrcorner(ofcolor(I, 7)):
        O = fill(O, 7, {tuple(add(x, y) for x, y in zip(loc, DOWN))})
  return O
 
5.333333333333333, 4.0197477, def dfcchcieabfcejeaaaiefijigchafbed(I):
  objs = objects(I, T, F, T)
  largest = argmax(objs, size)
  O = fill(I, 8, delta(largest))
  for obj in objs:
    if not hline(obj):
      second_last_row = uppermost(obj) + height(obj) - 2
      center_j = leftmost(obj) + width(obj) // 2
      O = fill(O, 7, {(second_last_row, center_j)})
      if size(obj) == size(largest):
        O = fill(O, 6, {(second_last_row, center_j)})  
  return O
 
9.333333333333334, 6.2497225, def abdaiddcaahiedadagaaaefdbfhfcddh(I):
  objs = objects(I, T, F, T) 
  O = I 
  for obj in objs:
    if size(obj) == valmax(objs, size):
      O = fill(O, 8, delta(obj))
    second_last_row = uppermost(obj) + height(obj) - 2
    center_j = leftmost(obj) + width(obj) // 2
    if hline(obj):
      O = fill(O, 7, {(second_last_row, center_j), (second_last_row, center_j - 1)})
    else:
      O = fill(O, 7, {(second_last_row, center_j)})
      if size(obj) == valmax(objs, size):
        O = fill(O, 6, {(second_last_row, center_j)})
  return O
 
6.333333333333333, 5.2135224, def ighhibegbjgceibfacdeibddjjdcdfec(I):
  objs = objects(I, T, T, T)
  def condition(obj):
    target_row = uppermost(obj) + height(obj) - 2
    target_col = leftmost(obj) + width(obj) // 2
    return color(obj) in (5, 7) and index(I, (target_row, target_col)) != 5
  target_objs = sfilter(objs, condition)
  for obj in target_objs:
    for i in range(uppermost(obj), lowermost(obj) + 1):
      for j in range(leftmost(obj), rightmost(obj) + 1):
        if i == uppermost(obj) + height(obj) - 2 and j == leftmost(obj) + width(obj) // 2:
          I = fill(I, 6, {(i, j)})
  return I
 
14.333333333333334, 4.5917387, def jfbcfbhcgchdedhjbbbecdgbeeadfcjf(I):
  return tuple(
    tuple(
      7 if any(8 == I[i + k][j] for k in range(2) if 0 <= i + k < len(I)) else I[i][j] 
      for j in range(len(I[0]))
    ) for i in range(len(I))
  )
 
439.0, 15.945243, def adeffacgadbaehebibfgebcgbibgegda(I):
  def process_cell(i, j, obj):
    return 7 if (i, j) in toindices(obj) and any(8 == I[r][j] for r in range(i, min(i + 2, len(I)))) else I[i][j]
  return tuple(
    tuple(
      process_cell(i, j, obj) 
      for j in range(len(I[0]))
    ) for obj in fgpartition(I) for i in range(len(I))
  )
 
6.666666666666667, 4.750055, def dceeeaadaddceggibecbaiefbbidafaf(I):
  six_indices = ofcolor(I, 6)
  seven_obj = extract(objects(I, True, False, True), lambda obj: color(obj) == 7)
  O = replace(I, 6, 8)
  O = fill(O, 7, toindices(shift(recolor(7, {lrcorner(toindices(seven_obj))}), DOWN)))
  if len(set(i for i, j in six_indices)) > 1:
    center_j = (leftmost(six_indices) + width(six_indices) // 2)
    O = fill(O, 6, {(lowermost(six_indices) - 1, center_j)}) 
  return O
 
8.0, 6.794517, def efacbgehcfbaecegbghcajcaeaejfedf(I):
    six_obj = extract(objects(I, True, False, True), lambda obj: color(obj) == 6)
    O = replace(I, 6, 8)
    for obj in objects(O, True, False, True):
      if color(obj) == 7:
        bottom_right = lrcorner(obj)
        O = fill(O, 7, {add(bottom_right, DOWN)})
    if height(six_obj) > 1:
      center_j = leftmost(six_obj) + width(six_obj) // 2
      O = fill(O, 6, {(lowermost(six_obj) - 1, center_j)})
    return O
 
10.666666666666666, 8.952323, def eaacbhdggecceeafbdjfdhhaiiccifbb(I):
  sixes = ofcolor(I, 6)
  sevens = ofcolor(I, 7)
  O = fill(replace(I, 6, 8), 7, {(i + 1, j) for i, j in sevens if i + 1 < len(I)})
  if len({i for i, j in sixes}) > 1:
    min_j = min(j for i, j in sixes)
    max_j = max(j for i, j in sixes)
    O = fill(O, 6, {(max(i for i, j in sixes), (min_j + max_j) // 2)})
  return O
 
10.333333333333334, 7.968707, def cbhejcbdebgfedhdidjdfjdaabccaefg(I):
  six_obj = extract(objects(I, True, False, True), matcher(color, 6))
  O = replace(I, 6, 8)
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if val == 7:
        if i + 1 < len(I):
          O = fill(O, 7, {(i + 1, j)})
  if height(six_obj) > 1:
    O = fill(O, 6, {(lowermost(six_obj) - 1, leftmost(six_obj) + width(six_obj) // 2)})
  return O
 
7.0, 4.633356, def fbdfceedficeedecbjabbcbiabcdghcb(I):
  six_obj = extract(objects(I, True, False, True), lambda obj: color(obj) == 6)
  O = paint(replace(I, 6, 8), recolor(7, shift(toindices(extract(objects(I, True, False, True), lambda obj: color(obj) == 7)), DOWN)))
  if height(six_obj) > 1:
    O = fill(O, 6, {(lowermost(six_obj) - 1, leftmost(six_obj) + width(six_obj) // 2)})
  return O
 
14.0, 5.7043543, def deabcejcddeheaacjeehcgaafgdijjbe(I):
    objs = objects(I, T, F, T)  # Identify objects excluding background
    for obj in objs:
        for j in range(leftmost(obj), rightmost(obj) + 1):  # Iterate over columns
            bottom_i = max(i for i, k in toindices(obj) if k == j) # Find bottom-most row index for column j
            if bottom_i > 0:  # Check if not already at the top row
                I = fill(I, 8, {(bottom_i - 1, j)})  # Replace digit above with 8
    return I
 
13.666666666666666, 8.240063, def afjcdhcdieiaedeaahbcefeebacdcffb(I):
    for j in range(width(I)):
      for i in range(height(I) - 1):
        if index(I,(i+1,j)) != 0 and index(I,(i,j)) == 0:
          I = fill(I,8,{(i,j)})
    return I
 
5.0, 4.0887723, def bcfedfaafdbfejiiaedadedgfddhcfae(I):
  objs = objects(I, T, F, T)
  largest = argmax(objs, size)
  smallest = argmin(objs, size)
  O = fill(I, 8, delta(largest)) 
  O = fill(O, 7, {(uppermost(smallest) + height(smallest) // 2 - 1, leftmost(smallest) + width(smallest) // 2)})
  O = fill(O, 7, {(uppermost(smallest) + height(smallest) // 2, leftmost(smallest) + width(smallest) // 2)})
  O = fill(O, 6, {(uppermost(largest) + height(largest) - 2, leftmost(largest) + width(largest) // 2)})
  return O
 
9.333333333333334, 6.413077, def adafafeddbbjefgdidfdfjcbifdcicce(I):
  objs = objects(I, T, F, T)
  largest = argmax(objs, size)
  O = fill(I, 8, delta(largest))
  for obj in objs:
    if obj != largest:
      O = fill(O, 7, {(uppermost(obj) + height(obj) - 2, leftmost(obj) + width(obj) // 2)})
      O = fill(O, 7, {(uppermost(obj) + height(obj) - 1, leftmost(obj) + width(obj) // 2)})
  O = fill(O, 6, {(centerofmass(largest)[0], centerofmass(largest)[1])})
  return O
 
5.0, 4.292255, def cacacejjaageedhdadfafebhghbabfdg(I):
  objs = objects(I, T, F, T)
  largest = argmax(objs, size)
  O = fill(I, 8, delta(largest))
  O = fill(O, 7, {(centerofmass(largest)[0] - 1, centerofmass(largest)[1])})
  O = fill(O, 7, {(centerofmass(largest)[0], centerofmass(largest)[1])})
  O = fill(O, 6, {(uppermost(largest) + height(largest) // 2 - 1, leftmost(largest) + width(largest) // 2)})
  return O
 
9.333333333333334, 6.6970644, def deaceajedbahefecaahhjeeddbbafdea(I):
  objs = objects(I, T, F, T)
  largest = argmax(objs, size)
  O = fill(I, 8, delta(largest))
  for obj in objs:
    if size(obj) != size(largest):
      second_last_row = uppermost(obj) + height(obj) - 2
      center_j = leftmost(obj) + width(obj) // 2
      O = fill(O, 7, {(second_last_row, center_j)})
      O = fill(O, 7, {(second_last_row + 1, center_j)})
      if size(obj) == min(size(o) for o in objs if size(o) != size(largest)):
        O = fill(O, 6, {(second_last_row, center_j)})
  return O 
 
9.666666666666666, 5.573138, def aaiadacedcibeeieajiacebbeebjdebc(I):
  return paint(I, merge(apply(lambda obj: recolor(7, {(i + 1, j) for i, j in toindices(obj) if i < lowermost(obj)}) if 8 in palette(obj) else frozenset(), fgpartition(I))))
 
6.666666666666667, 4.658852, def dfgdffgaiefdegdeagefcghjecbehhgc(I):
  def extend_down(obj):
    if 8 in palette(obj):
      return recolor(7, {(i + 1, j) for i, j in toindices(obj) if (i + 1, j) not in toindices(obj)})
    return frozenset()
  return paint(I, merge(apply(extend_down, fgpartition(I)))) 
 
6.666666666666667, 4.5443306, def cefcdheeejeeedacabebhedbaghdecdf(I):
  O = replace(I, 6, 8)
  for v, loc in asobject(I):
    if v == 6:
      six_indices = ofcolor(I, 6)
      O = fill(O, 6, {(lowermost(six_indices) - 1, leftmost(six_indices) + width(six_indices) // 2)})
    elif v == 7:
      if loc == lrcorner(ofcolor(I, 7)):
        O = fill(O, 7, {tuple(add(x, y) for x, y in zip(loc, DOWN))})
  return O
 
9.0, 8.494011, def ccheahdcdfceefecidjdfjeacbfjfcce(I):
  O = I
  six_obj = extract(objects(I, True, False, True), lambda obj: color(obj) == 6)
  O = replace(O, 6, 8)
  if height(six_obj) > 0:
    center_j = leftmost(six_obj) + width(six_obj) // 2
    O = fill(O, 6, {(lowermost(six_obj) - 1, center_j)})
  for obj in objects(O, True, False, True):
    if color(obj) == 7:
      bottom_right = lrcorner(obj)
      if index(I, bottom_right) == 7 and index(I, add(bottom_right, DOWN)) != 7:
        O = fill(O, 7, {add(bottom_right, DOWN)})
  return O
 
46.333333333333336, 67.694176, def cabfgfbeafebeahdbadefcahbcebbaaf(I):
    O = paint(canvas(0, shape(I)), recolor(8, extract(objects(I, True, False, True), lambda obj: color(obj) == 6)))
    if height(extract(objects(I, True, False, True), lambda obj: color(obj) == 6)) > 0:
        six_obj = extract(objects(I, True, False, True), lambda obj: color(obj) == 6)
        O = paint(
            O, 
            recolor(
                6, 
                {(lowermost(six_obj) - 1, leftmost(six_obj) + width(six_obj) // 2)}
            )
        )
    for obj in objects(I, True, False, True):
        if color(obj) == 7:
            bottom_right = lrcorner(obj)
            if index(I, bottom_right) == 7 and index(I, add(bottom_right, DOWN)) != 7:
                O = paint(O, recolor(7, {add(bottom_right, DOWN)}))
    return O
 
27.0, 10.950783, def bgcjidhfgcjaebddjafghhedhaffehdb(I):
  objs = objects(I, False, False, True) 
  to_recolor = frozenset()
  for obj in objs:
    for c in obj:
      if index(I, add(c[1], DOWN)) != 0:
        to_recolor = to_recolor | {c[1]}
  return paint(I, recolor(8, to_recolor))
 
27.0, 10.617342, def jaheabedbhcfeejdahdadfajacebdcgg(I):
  shifted = shift(asobject(I), DOWN)
  return paint(I, recolor(8, frozenset((i, j) for v, (i, j) in shifted if index(I, (i, j)) != 0 and index(I, (i - 1, j)) != mostcolor(I))))
 
4.333333333333333, 3.9703484, def gfadehdihadbedibjfefbdjjbhfiafce(I):
  objs = objects(I, T, F, T)
  largest = argmax(objs, size)
  smallest = argmin(objs, size)
  O = paint(fill(I, 8, delta(largest)), recolor(7, shift(toindices({(6, center(smallest))}), (0, -1))))
  O = fill(O, 6, {(uppermost(largest) + height(largest) - 2, leftmost(largest) + width(largest) // 2)})
  return O
 
20.333333333333332, 9.045096, def heciffefdaihebedbidejbgicbhjfadc(I):
  objs = objects(I, T, F, T)
  largest = argmax(objs, size)
  smallest = argmin(objs, size)
  O = fill(I, 8, difference(backdrop(largest), largest))
  O = fill(O, 7, connect(center(smallest), add(center(smallest), (1, 0))))
  O = fill(O, 6, {(uppermost(toindices(toobject({(6, center(largest))}, I))) - 1, leftmost(toindices(toobject({(6, center(largest))}, I))))})
  return O
 
24.0, 8.926907, def jdbeafgdcideeagaacdaegdceecfcbdc(I):
  objs = objects(I, T, F, T)
  largest = argmax(objs, size)
  smallest = argmin(objs, size)
  six_loc = center(largest)
  O = paint(fill(I, 8, set(product(range(uppermost(largest) - 1, lowermost(largest) + 2), range(leftmost(largest) - 1, rightmost(largest) + 2))) - toindices(largest)), 
            recolor(7, connect(center(smallest), add(center(smallest), (1, 0)))))
  O = fill(O, 6, {(six_loc[0] - 1, six_loc[1])})
  return O
 
15.333333333333334, 10.94926, def eccgeedcchcbefhbadafaeadgfcajhdc(I):
  def modify_grid(obj):
    def modify_row(i, row):
      if i != uppermost(obj) + height(obj) - 2:
        return row
      return tuple(6 if color(obj) == 5 else 7 if j == leftmost(obj) + width(obj) // 2 else v for j, v in enumerate(row))
    return tuple(modify_row(i, row) for i, row in enumerate(I))
  return next((modify_grid(obj) for obj in objects(I, T, T, T) if color(obj) in (5, 7) and height(obj) > 1), I)
 
8.333333333333334, 7.719152, def cagjeebaifaaeegcbaeehccbifbceebc(I):
  sixes = ofcolor(I, 6)
  sevens = ofcolor(I, 7)
  O = I
  if len(sixes) > 0:
    O = fill(O, 0, sixes)
    O = fill(O, 6, {
        (i + 1, j) for (i, j) in sixes if i < lowermost(sixes)
    })
  if len(sevens) > 0:
    O = fill(O, 0, sevens)
    O = fill(O, 7, {
        (i + 1, j) for (i, j) in sevens if (i + 1, j) not in asindices(O)
    })
  return O
 
13.666666666666666, 4.839677, def bebcafbddifiebebbgbfhiaichagdfca(I):
  O = I
  for v, loc in asobject(I):
    if v == 6:
      if loc != lrcorner(ofcolor(I, 6)):
        O = fill(O, 0, {loc})
        O = fill(O, v, {tuple(add(loc, DOWN))})
    elif v == 7:
      O = fill(O, 0, {loc})
      O = fill(O, v, {tuple(add(loc, DOWN))})
  return O
 
13.666666666666666, 4.7399926, def aidfgcaaeiefejbfjihcfffcahjfahac(I):
  O = replace(I, 6, 0)
  O = replace(O, 7, 0)
  for v, loc in asobject(I):
    if v == 6 and loc != lrcorner(ofcolor(I, 6)):
      O = fill(O, v, {tuple(add(loc, DOWN))})
    elif v == 7:
      O = fill(O, v, {tuple(add(loc, DOWN))})
  return O
 
12.666666666666666, 4.691876, def ebgbfejffadaeaegidcebececibaffff(I):
  O = I
  for obj in objects(I, True, False, True):
    if 6 in palette(obj):
      for v, loc in obj:
        if v == 6 and loc != lrcorner(obj):
          O = fill(O, 0, {loc})
          O = fill(O, v, {tuple(add(loc, DOWN))})
    elif 7 in palette(obj):
      for v, loc in obj:
        if v == 7:
          O = fill(O, 0, {loc})
          O = fill(O, v, {tuple(add(loc, DOWN))})
  return O
 
14.0, 4.966247, def fddebcfbacfcefhfaebfeecijhdidejh(I):
  O = I
  for v, loc in asobject(I):
    if v == 6 and (loc[0] + 1, loc[1]) not in ofcolor(I, 6):
      O = fill(O, 0, {loc})
      O = fill(O, v, {tuple(add(loc, DOWN))})
    elif v == 7:
      O = fill(O, 0, {loc})
      O = fill(O, v, {tuple(add(loc, DOWN))})
  return O
 
16.666666666666668, 6.4436946, def acccfecdahebebbdbdbigcfadbjfbbcf(I):
  background = mostcolor(I)
  filtered_cells = {(v, (i, j)) for v, (i, j) in asobject(I) if index(I, (i+1, j)) == background and v != background}
  return paint(I, recolor(8, filtered_cells))
 
5.333333333333333, 4.744629, def dbadjafdbcfeebgcibecgahcbbacddih(I):
  objs = objects(I, T, F, T)
  largest = argmax(objs, size)
  smallest = argmin(objs, size)
  O = fill(I, 8, difference(toindices(largest), box(largest)))
  O = fill(O, 7, {(uppermost(smallest) + height(smallest) // 2, leftmost(smallest) + width(smallest) // 2)})
  O = fill(O, 6, {(uppermost(largest) + height(largest) - 2, leftmost(largest) + width(largest) // 2)})
  return O
 
8.0, 4.614883, def gdibehdaefiaeidhiidgdcgjiffhffdj(I):
  objs = objects(I, T, T, T)
  target_cells = frozenset()
  for obj in objs:
    if color(obj) in (5, 7):
      target_row = uppermost(obj) + height(obj) - 2
      target_col = leftmost(obj) + width(obj) // 2
      target_cells = target_cells | {(target_row, target_col)}
  return fill(I, 6, target_cells) if colorcount(I, 5) > colorcount(I, 7) else fill(I, 7, target_cells)
 
6.333333333333333, 4.580101, def fcidfhfefbgfeffabfaejebidafbfcab(I):
  objs = objects(I, T, T, T)
  target_objs = sfilter(objs, lambda obj: color(obj) in (5, 7))
  def modify_obj(obj):
    target_row = uppermost(obj) + height(obj) - 2
    target_col = leftmost(obj) + width(obj) // 2
    new_color = 6 if color(obj) == 5 else 7
    return fill(I, new_color, {(target_row, target_col)})
  return last(apply(modify_obj, target_objs)) 
 
10.333333333333334, 4.4105477, def ffcfcgdceffjedcijedfhecciejhafce(I):
  sixes = ofcolor(I, 6)
  sevens = ofcolor(I, 7)
  O = fill(I, 8, backdrop(sixes))
  if size(sixes) > 0 and height(sixes) > 1:
    O = fill(O, 6, {(uppermost(sixes) + height(sixes) - 2, leftmost(sixes) + width(sixes) // 2)})
  if size(sevens) > 0:
    O = fill(O, 7, {tuple(add(lrcorner(sevens), DOWN))})
  return O
 
93.66666666666667, 8.031598, def acfbadaafffbeibbbagfbhcajggbeecd(I):
  shifted = shift(asobject(I), DOWN)
  filtered = frozenset((v, i) for v, i in shifted if index(I, i) == mostcolor(I))
  recolored = recolor(8, toindices(filtered))
  return paint(I, recolored)
 
5.0, 3.8939018, def dfcfdabacafjebcbbceeaigefhchfegb(I):
  objs = objects(I, T, F, T)
  largest = argmax(objs, size)
  smallest = argmin(objs, size)
  O = fill(I, 8, delta(largest)) 
  O = fill(O, 7, {(center(smallest)[0] - 1, center(smallest)[1])})
  O = fill(O, 6, {(uppermost(largest) + height(largest) - 2, leftmost(largest) + width(largest) // 2)})
  return O
 
6.666666666666667, 5.4250617, def aghaciijcadaeffeihdaidiibiedeibd(I):
  objs = objects(I, T, F, T)
  largest = argmax(objs, size)
  smallest = argmin(objs, size)
  O = fill(I, 8,  set(apply(lambda idx: (idx[0] - 1, idx[1]), difference(toindices(largest), box(largest))))) 
  O = fill(O, 7, {astuple(center(smallest)[0] - 1, center(smallest)[1])}) 
  O = fill(O, 6, {astuple(uppermost(largest) + height(largest) - 2, leftmost(largest) + width(largest) // 2)}) 
  return O
 
45.333333333333336, 10.535016, def cefdgefdafgeeeebjbfaajbhabbjhffg(I):
  def modify_cell(obj, row_index, col_index, cell_value):
    if color(obj) not in (5, 7):
      return cell_value
    if row_index != uppermost(obj) + height(obj) - 2:
      return cell_value
    if col_index != leftmost(obj) + width(obj) // 2:
      return cell_value
    return 6 if color(obj) == 5 else 7
  
  objs = objects(I, T, T, T)
  new_grid = tuple(
      tuple(
          modify_cell(obj, i, j, I[i][j]) 
          for j in range(len(I[0]))
      )
      for i, obj in enumerate(objs)
  )
  return new_grid
 
6.666666666666667, 4.5810213, def hibbeefchjcbehheadebcjaffaefaebc(I):
  objs = objects(I, T, T, T)
  def change_color(obj):
    target_indices = {(uppermost(obj) + height(obj) - 2, leftmost(obj) + width(obj) // 2)}
    return recolor(6 if color(obj) == 5 else 7, intersection(toindices(obj), target_indices))
  return paint(I, merge(apply(change_color, objs)))
 
7.0, 4.3020787, def ffjhaicdeeafeibhifebfjdbdbfegdcc(I):
  six_loc = first(ofcolor(I, 6))  
  seven_obj = toobject(ofcolor(I, 7), I) 
  target_j = rightmost(seven_obj) if height(seven_obj) > 1 else six_loc[1] 
  target_loc = (six_loc[0] - 1, target_j) 
  O = fill(I, 0, {six_loc})  
  O = fill(O, 6, {target_loc}) 
  return O
 
7.0, 4.436953, def adaciejbffffeeacbdfebabfgdeadbdf(I):
  six_indices = ofcolor(I, 6)
  seven_rightmost = rightmost(ofcolor(I, 7)) 
  target_j = seven_rightmost if len(six_indices) == 1 else first(six_indices)[1]
  O = fill(I, 0, six_indices) 
  O = fill(O, 6, {(uppermost(six_indices) - 1, target_j)})
  return O
 
7.0, 4.54946, def effcajejbcahefcabfhcddigbcgahdcc(I):
    sixes = ofcolor(I, 6)
    sevens = ofcolor(I, 7)
    new_six = (uppermost(sixes) - 1, rightmost(sevens) if height(sevens) > 1 else leftmost(sixes))
    return fill(fill(I, 0, sixes), 6, {new_six})
 
6.333333333333333, 4.411134, def cfabcadccefdeeccbbaeiiddaeadddcf(I):
  def process_cell(c):
    if index(I, c) != 6 or index(I, add(c, UP)) != 5:
      return frozenset()
    return frozenset({(8, add(c, DOWN))})
  return paint(I, merge(apply(process_cell, asindices(I))))
 
6.333333333333333, 4.47399, def idfbbbagfddbecjgaeajeagacbeghcid(I):
  def modify_obj(obj):
    if color(obj) in (5, 7):
      target_row = uppermost(obj) + height(obj) - 2
      target_col = leftmost(obj) + width(obj) // 2
      new_color = 6 if color(obj) == 5 else 7
      return fill(I, new_color, {(target_row, target_col)})
    else:
      return I 
  return last(apply(modify_obj, objects(I, T, T, T)))
 
6.666666666666667, 4.8783503, def bacdihfbjjafeeafbbdeacbaebgdhdec(I):
  def process_color(grid, c):
    def modify_obj(obj):
      if color(obj) == c:
        target_row = uppermost(obj) + height(obj) - 2
        target_col = leftmost(obj) + width(obj) // 2
        new_color = 6 if c == 5 else 7
        return fill(grid, new_color, {(target_row, target_col)})
      else:
        return grid
    return modify_obj

  objs = objects(I, T, T, T)
  I = last(apply(process_color(I, 5), objs))
  I = last(apply(process_color(I, 7), objs))
  return I 
 
8.333333333333334, 4.9180903, def cifcdejhaghbedgdbffabaadbfdhcaja(I):
  six_obj = extract(objects(I, True, False, True), lambda obj: color(obj) == 6)
  seven_obj = extract(objects(I, True, False, True), lambda obj: color(obj) == 7)
  O = fill(I, mostcolor(I), toindices(six_obj))
  O = paint(O, shift(seven_obj, DOWN))
  O = paint(O, shift(six_obj, DOWN)) 
  return O
 
7.0, 4.265332, def djeaficaefdcejhfiaeaihfidcahhehe(I):
  six_indices = ofcolor(I, 6)
  seven_obj = extract(objects(I, True, False, True), lambda obj: color(obj) == 7)
  O = replace(I, 6, mostcolor(I))
  O = paint(O, seven_obj)
  O = paint(O, shift(recolor(7, six_indices), DOWN))
  return O
 
8.0, 4.727876, def ddjaeceaaifeefiaabhfgdfaffdjfjgj(I):
  six_obj = extract(objects(I, True, False, True), lambda obj: color(obj) == 6)
  seven_obj = extract(objects(I, True, False, True), lambda obj: color(obj) == 7)
  O = paint(I, shift(recolor(7, toindices(six_obj)), DOWN))
  O = paint(O, shift(seven_obj, DOWN))
  O = fill(O, mostcolor(I), toindices(six_obj))
  return O
 
8.666666666666666, 4.6700883, def ehaddciadhieebbjafabfedbccjaecce(I):
  O = paint(I, shift(recolor(7, ofcolor(I, 6)), DOWN))
  O = paint(O, shift(extract(objects(I, True, False, True), lambda obj: color(obj) == 7), DOWN))
  O = replace(O, 6, mostcolor(I))
  return O
 
12.0, 7.009159, def gagaeebdbbiaegbijbdehjabibbdagbf(I):
  O = I
  for obj in objects(I, True, False, True):
    if color(obj) == 6:
      O = fill(O, mostcolor(I), toindices(obj))
      O = paint(O, shift(recolor(7, toindices(obj)), DOWN))
    elif color(obj) == 7:
      O = paint(O, shift(obj, DOWN))
  return O
 
6.0, 4.124991, def dbfbbibdhdbbeifhibcidjdcdcebedcc(I):
  def check_and_replace(i, j):
    if 0 <= i < len(I) - 1 and 0 <= j < len(I[0]) and I[i][j] == 6 and I[i - 1][j] == 5 and I[i + 1][j] != 8:
      return 8
    return I[i][j]
  return tuple(tuple(check_and_replace(i, j) for j in range(len(I[0]))) for i in range(len(I)))
 
