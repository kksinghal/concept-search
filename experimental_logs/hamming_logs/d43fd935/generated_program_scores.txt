0.06666666666666667, 23.283365, def cahfebddabfaeajficecfaafabdaddgc(I):
    bg = mostcolor(I)  # Identify background color
    objs = objects(I, T, F, T)  # Extract objects excluding background
    extended_objs = set()
    for obj in objs:
        leftmost_j = leftmost(obj)
        rightmost_j = rightmost(obj)
        extended_obj = set(obj)
        for j in range(leftmost_j, rightmost_j + 1):
            extended_obj.add((color(obj),(uppermost(obj),j)))
        extended_objs.add(frozenset(extended_obj))
    O = paint(canvas(bg, shape(I)), merge(extended_objs)) # Paint on a canvas
    return O
 
0.09000000000000001, 31.92361, def cjbccccgadfgedffibcdejbbjccgacfa(I):
    bg = mostcolor(I)
    objs = objects(I, T, F, T)
    h, w = shape(I)
    O = canvas(bg, (h,w))
    for obj in objs:
        for i in range(h):
            if any((i,j) in toindices(obj) for j in range(w)):
                row = tuple(color(obj) if (i,j) in toindices(obj) else bg for j in range(w))
                O = (*O[:i], row, *O[i+1:])
    return O
 
0.5433333333333333, 39.54656, def ijecgbjdbdfbebegbijffbfibbecfech(I):
    bg = mostcolor(I)
    objs = objects(I, T, F, T)
    O = I
    for obj in objs:
        start_j = leftmost(obj)
        end_j = rightmost(obj) + 1
        row_i = uppermost(obj)
        O = tuple((*O[:row_i], (color(obj),) * width(I), *O[row_i + 1:]))
    return O
 
0.4466666666666667, 40.155544, def eaaaaceaafghefafidfecieddebaeihe(I):
  objs = fgpartition(I)
  bg = mostcolor(I)
  new_objs = set()
  for obj in objs:
    color = first(obj)[0]
    for _, (i, j) in obj:
      for di in [-1, 1]:
        new_i = i + di
        while 0 <= new_i < height(I) and index(I, (new_i, j)) == bg:
          new_objs.add((color, (new_i, j)))
          new_i += di
  return paint(I, frozenset(new_objs))
 
0.43, 39.573315, def ddjcjcdedjhaejaeiahgdefficbdbccd(I):
  objs = fgpartition(I)
  for obj in objs:
    I = paint(I, extend_vertically(I, obj))
  return I
 
0.18999999999999997, 18.381947, def bdieabddaecaeeeciabegicfcbbedaff(I):
  return paint(I, merge(apply(lambda obj: extend_object(I, obj), fgpartition(I))))
 
0.43333333333333335, 41.09856, def acfheghgcbbgefefbgcicdgifigbcged(I):
  new_grid = canvas(mostcolor(I), shape(I))
  for j in range(width(I)):
    for i in range(height(I)):
      if index(I, (i, j)) != mostcolor(I):
        new_grid = paint(new_grid, extend_cell(I, (i, j)))
  return new_grid
 
0.12666666666666668, 7.7194614, def fhdbbbjdhdjfeedeijeaegedaghbgagi(I):
  min_obj = argmin(objects(I, T, T, T), size)
  fill_val = color(min_obj)
  start_row = uppermost(min_obj)
  O = I
  for j in range(width(I)):
    O = fill(O, fill_val, {(start_row, j)})
  return O 
 
0.06666666666666667, 23.283365, def ggeefcgaeicfejefbiecjiiaehdhjace(I):
  least_color = leastcolor(I)
  objs = objects(I, False, False, True)
  target_objs = colorfilter(objs, least_color)
  path = merge(apply(toindices, target_objs))
  for i in range(height(I)):
    for j in range(width(I) - 1):
      if (i, j) in path and (i, j + 1) in path:
        path = path | {(i, j + 1)}
  O = fill(I, least_color, path)
  return O
 
0.06666666666666667, 23.283365, def fafhgfaebaifehafajhdgejajfabbahd(I):
  objs = objects(I, T, F, F)
  bg = mostcolor(I)
  for obj in objs:
    for direction in ((0, 1), (0, -1), (1, 0), (-1, 0)):
      shifted = shift(obj, direction)
      overlap = intersection(toindices(shifted), asindices(I))
      collision = intersection(toindices(shifted), toindices(merge(objs - {obj})))
      if len(overlap) > 0 and len(collision) == 0:
        while len(overlap) > 0:
          obj = combine(obj, shifted)
          shifted = shift(shifted, direction)
          overlap = intersection(toindices(shifted), asindices(I))
        I = paint(cover(I, obj), obj) 
  O = I
  return O
 
0.3433333333333333, 31.941364, def djaacebchaeeeccejdfeadfabbcjbada(I):
    objs = objects(I, T, F, F)
    bg = mostcolor(I)
    new_objs = set()
    for obj in objs:
        for i, (v, (x, y)) in enumerate(obj):
            h_extension = {(v, (x, j)) for j in range(y + 1, width(I)) if index(I, (x, j)) == bg}
            v_extension = {(v, (i, y)) for i in range(x + 1, height(I)) if index(I, (i, y)) == bg}
            obj = obj | h_extension | v_extension
        new_objs.add(frozenset(obj))
    O = paint(canvas(bg, shape(I)), merge(new_objs))
    return O
 
0.19333333333333333, 14.96482, def dcdbdidfebbbejhdidbbbgcfadadaaid(I):
  O = I
  for i in range(height(I)):
    for j in range(width(I)):
      if index(O, (i, j)) != mostcolor(I):
        if i > 0 and index(O, (i - 1, j)) == mostcolor(I):
          O = fill(O, index(I, (i, j)), {(i - 1, j)})
        if j > 0 and index(O, (i, j - 1)) == mostcolor(I):
          O = fill(O, index(I, (i, j)), {(i, j - 1)})
  return O
 
0.6233333333333334, 43.350517, def fefgiadadidbejedjbaefieddbdafccb(I):
  bg = mostcolor(I)
  objs = objects(I, T, F, T)
  O = canvas(bg, shape(I))
  for obj in objs:
    for i in range(height(I)):
      if any((i, j) in toindices(obj) for j in range(width(I))):
        O = fill(O, color(obj), {(i, j) for j in range(width(I))})
  return O
 
0.14666666666666667, 13.595818, def ebcfbfaffdeeefcfjdbeidibedjceeid(I):
  def extend_right(obj: Object, grid: Grid) -> Object:
    """ Extends an object to the right until it encounters a different color. """
    max_j = rightmost(obj)
    for j in range(max_j + 1, width(grid)):
      if any(index(grid, (i, j)) != mostcolor(grid) and index(grid, (i, j)) != color(obj) for i in range(uppermost(obj), lowermost(obj) + 1)):
        break
      obj = obj | recolor(color(obj), {(i, j) for i in range(uppermost(obj), lowermost(obj) + 1)})
    return obj

  return paint(I, merge(apply(lambda obj: extend_right(obj, I), fgpartition(I))))
 
0.09000000000000001, 18.735622, def efcbcficafgcebibbiadeecfcecfdaac(I):
  smallest_obj = argmin(objects(I, T, T, T), size)
  obj_color = color(smallest_obj)
  row_start = uppermost(smallest_obj)
  col_start = leftmost(smallest_obj)
  h, w = len(I), len(I[0])

  if hline(smallest_obj) or portrait(smallest_obj):
    line = {(obj_color, (row_start, j)) for j in range(col_start, w)}
  else: 
    line = {(obj_color, (i, col_start)) for i in range(0, h)}
  
  return paint(I, frozenset(line))
 
0.12333333333333334, 10.375689, def gdcgjjebaeacebicjiiccefafbagcbff(I):
  s_obj = argmin(objects(I, T, T, T), size)
  val = color(s_obj)
  row, col = ulcorner(s_obj)
  h, w = shape(I)

  if width(s_obj) > height(s_obj):
    O = paint(I, frozenset({(val, (row, j)) for j in range(col, w)}))
  else:
    O = paint(I, frozenset({(val, (i, col)) for i in range(0, h)}))

  return O 
 
0.08666666666666667, 16.355268, def cidjfebbheccebaajbcafcebfeejbabg(I):
  O = I
  for i in range(height(I)):
    for j in range(width(I)):
      if index(O, (i, j)) != mostcolor(I) and i > 0 and j > 0:
        if index(O, (i - 1, j - 1)) == index(I, (i, j)):
          if i < height(I) - 1 and index(O, (i + 1, j)) == mostcolor(I):
            O = fill(O, index(I, (i, j)), {(i + 1, j)})
          if j < width(I) - 1 and index(O, (i, j + 1)) == mostcolor(I):
            O = fill(O, index(I, (i, j)), {(i, j + 1)}) 
  return O
 
0.23333333333333336, 22.53168, def jejfiaeeibicefbajhfbafbaedgdecdc(I):
    objs = objects(I, T, F, T)
    O = canvas(mostcolor(I), shape(I))
    for obj in objs:
        direction = position(shift(obj, (1, 1)), obj)
        O = paint(O, obj)
        current = centerofmass(obj)
        while index(O, add(current, direction)) == mostcolor(I):
            O = fill(O, color(obj), {add(current, direction)})
            current = add(current, direction)
    return O
 
0.07333333333333332, 20.39249, def eabdbddfejdceddhiecbdjabdiggjaef(I):
    O = I
    for obj in objects(I, True, False, True):
        if len(obj) > 1:
            direction = gravitate(shift(obj, (1, 1)), obj)
            current = centerofmass(obj)
            next_loc = add(current, direction)
            while index(O, next_loc) == mostcolor(I):
                O = fill(O, color(obj), {next_loc})
                next_loc = add(next_loc, direction)
    return O 
 
0.08666666666666667, 15.017467, def dadffdjaafhfebfajbhbgchhgeddbfaa(I):
  bg = mostcolor(I)
  objs = objects(I, T, F, T)
  O = I
  for obj in objs:
    i, j = centerofmass(obj)
    for direction in ((0,1),(0,-1),(1,0),(-1,0)):
      extension = shoot((i, j), direction)
      for (x,y) in extension:
        if 0<=x<height(I) and 0<=y<width(I):
          if index(I,(x,y)) == bg:
            O = paint(O, {(color(obj),(x,y))})
          else:
            break
        else:
            break
  return O
 
0.5966666666666667, 43.79219, def gecfgbeegdadegbaadccefffcbgciffd(I):
  bg = mostcolor(I)
  objs = objects(I, T, F, T)
  O = paint(canvas(bg, shape(I)),{})
  for obj in objs:
    O = paint(O,obj)
    for d in range(1, max(height(I),width(I))):
      for (i,j) in toindices(obj):
        for direction in ((0,1),(0,-1),(1,0),(-1,0)):
          x, y = i+d*direction[0], j+d*direction[1]
          if 0<=x<height(I) and 0<=y<width(I) and index(I,(x,y)) == bg:
            O = paint(O, {(color(obj),(x,y))})
          else:
            break
  return O
 
0.7933333333333333, 18.310123, def daidabbdfcchefafjbfbaedcdebbahbj(I):
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  for i in range(height(I)):
    for j in range(width(I)):
      if I[i][j] != bg:
        O = paint(O, {(I[i][j], (i, j))})
        for di in range(-i, height(I) - i):
          for dj in range(-j, width(I) - j):
            if (di,dj) != (0,0):
              x, y = i + di, j + dj
              if 0 <= x < height(I) and 0 <= y < width(I) and index(I, (x, y)) == bg:
                O = paint(O, {(I[i][j], (x, y))})
              else:
                break 
  return O
 
0.7233333333333333, 41.954643, def fccfffheccffeajfagcdbdbbcecffbhd(I):
  bg = mostcolor(I)
  O = I
  for i in range(height(I)):
    for j in range(width(I)):
      if I[i][j] != bg:
        current_color = I[i][j]
        # Extend Right
        k = j + 1
        while k < width(I) and I[i][k] == bg:
          O = paint(O, {(current_color, (i, k))})
          k += 1
        # Extend Left
        k = j - 1
        while k >= 0 and I[i][k] == bg:
          O = paint(O, {(current_color, (i, k))})
          k -= 1
        # Extend Down
        k = i + 1
        while k < height(I) and I[k][j] == bg:
          O = paint(O, {(current_color, (k, j))})
          k += 1
        # Extend Up
        k = i - 1
        while k >= 0 and I[k][j] == bg:
          O = paint(O, {(current_color, (k, j))})
          k -= 1
  return O
 
0.27999999999999997, 24.737232, def cfafbdcaaeigeadajabfjbadafgaeegd(grid: Grid) -> Grid:
  """
  Extends objects downwards in each column, filling background cells.
  """
  def extend_down(i: Integer, j: Integer, color: Integer) -> Indices:
    """
    Returns a set of indices representing the downward extension of an object.
    """
    extension = set()
    for k in range(i + 1, height(grid)):
      if index(grid, (k, j)) == mostcolor(grid):
        extension.add((k, j))
      else:
        break
    return frozenset(extension)

  new_cells = set()
  for i in range(height(grid)):
    for j in range(width(grid)):
      color = index(grid, (i, j))
      if color != mostcolor(grid):
        new_cells |= recolor(color, extend_down(i, j, color))
  return paint(grid, frozenset(new_cells)) 
 
0.06666666666666667, 23.283365, def hccffcgecaajeaegbbjjcebebjbgdjhc(I):
  s_obj = argmin(objects(I, T, T, T), size)
  val = color(s_obj)
  row, col = ulcorner(s_obj)
  h, w = shape(I)
  O = I
  if width(s_obj) > height(s_obj):
    for j in range(col, w):
      O = paint(O, frozenset({(val, (i, j)) for i in range(0, h) if index(I, (i, j)) == val}))
  else:
    for i in range(row, h):
      O = paint(O, frozenset({(val, (i, j)) for j in range(0, w) if index(I, (i, j)) == val}))
  return O
 
0.22666666666666668, 9.383843, def efjeejjgggdbedejadehiigfcacfhgec(I):
  min_obj = argmin(objects(I, T, T, T), size)
  target_color = color(min_obj)
  output_grid = I
  for i in range(len(I)):
    for j in range(len(I[0])):
      if index(I, (i,j)) == target_color:
        if width(min_obj) > height(min_obj):
          output_grid = paint(output_grid, frozenset({(target_color, (i, k)) for k in range(j, len(I[0]))}))
        else:
          output_grid = paint(output_grid, frozenset({(target_color, (k, j)) for k in range(i, len(I))}))
  return output_grid
 
0.14, 9.364958, def jhfbiajjbiceeajbbfffiadbcbbjibgc(I):
  O = I
  center_i, center_j =  center(asindices(I))
  for i in range(height(I)):
    for j in range(width(I)):
      if index(O, (i,j)) != mostcolor(I):
        if i < center_i and j < center_j and index(O,(i+1,j+1)) == mostcolor(I):
          O = fill(O, index(I,(i,j)), {(i+1,j+1)})
        if i > center_i and j > center_j and index(O,(i-1,j-1)) == mostcolor(I):
          O = fill(O, index(I,(i,j)), {(i-1,j-1)})
        if i < center_i and j > center_j and index(O,(i+1,j-1)) == mostcolor(I):
          O = fill(O, index(I,(i,j)), {(i+1,j-1)})
        if i > center_i and j < center_j and index(O,(i-1,j+1)) == mostcolor(I):
          O = fill(O, index(I,(i,j)), {(i-1,j+1)})
  return O 
 
0.12000000000000001, 14.231933, def dejjcjdebdbeehefbacadacidgcbdeef(I):
  O = I
  h, w = shape(I)
  for i in range(h):
    for j in range(w):
      if index(O, (i, j)) != mostcolor(I):
        if i <= h // 2 and j <= w // 2:
          O = fill(O, index(I,(i,j)), connect((i, j), (h // 2 - 1, w // 2 - 1)))
        if i > h // 2 and j > w // 2:
          O = fill(O, index(I,(i,j)), connect((i, j), (h // 2 + 1, w // 2 + 1)))
        if i <= h // 2 and j > w // 2:
          O = fill(O, index(I,(i,j)), connect((i, j), (h // 2 - 1, w // 2 + 1)))
        if i > h // 2 and j <= w // 2:
          O = fill(O, index(I,(i,j)), connect((i, j), (h // 2 + 1, w // 2 - 1)))
  return O
 
0.07666666666666667, 22.469046, def dddifhccgiaeedfaijjfccighcajefee(I):
    bg = mostcolor(I) # Find background color
    objs = objects(I, True, False, True) # Get objects, excluding background
    new_objs = set()
    for obj in objs:
        row_objs = sfilter(objs, lambda o: uppermost(o) == uppermost(obj) and color(o) == color(obj)) # Find objects on same row with same color
        rightmost_j = valmax(row_objs, rightmost) # Find rightmost column of those objects
        extended_obj = set(obj)
        for j in range(leftmost(obj), rightmost_j + 1): # Fill horizontally from leftmost to rightmost
            extended_obj.add((color(obj), (uppermost(obj), j))) 
        new_objs.add(frozenset(extended_obj))
    O = paint(canvas(bg, shape(I)), merge(new_objs)) # Paint new objects onto a blank canvas
    return O
 
0.09666666666666668, 32.788734, def dcdfaeeibgjjedddagfjgbfbgabdhegd(I):
  O = paint(
      canvas(mostcolor(I), shape(I)),
      merge(apply(
          lambda obj: recolor(
              color(obj), 
              frozenset(
                  (uppermost(obj),j) 
                  for j in range(
                      leftmost(obj), 
                      valmax(
                          sfilter(objects(I, T, F, T), lambda o: uppermost(o) == uppermost(obj) and color(o) == color(obj)), 
                          rightmost
                      ) + 1
                  )
              )
          ), 
          objects(I, T, F, T)
      ))
  )
  return O
 
0.29, 22.461918, def eacdcfdbbfciecfeicdjdieiaccibeai(grid: Grid) -> Grid:
  """
  Iterates through each non-background color and extends downwards.
  """
  bg = mostcolor(grid)
  new_grid = canvas(bg, shape(grid))
  for color in palette(grid) - {bg}:
    indices = ofcolor(grid, color)
    for i, j in indices:
      extension = {(k, j) for k in range(i, height(grid))}
      new_grid = paint(new_grid, recolor(color, extension))
  return new_grid
 
0.09666666666666666, 12.9799, def iccbdaafafbdedafjhfccahecfachegf(I):
  s_obj = argmin(objects(I, T, T, T), size)
  val = color(s_obj)
  start = ulcorner(s_obj)
  direction = (1, 0) if width(s_obj) >= height(s_obj) else (0, 1)
  O = paint(I, recolor(val, shoot(start, direction)))
  return O
 
0.2333333333333333, 11.680271, def fficcaejbfgeebaejebebdcfbedagefj(I):
    objs = objects(I, T, T, T)
    s_obj = argmin(objs, size)
    val = color(s_obj)
    O = I
    for x in range(len(I)):
        for y in range(len(I[0])):
            if index(I, (x,y)) == val:
                if width(s_obj) >= height(s_obj):
                    O = paint(O, {(val, (x, j)) for j in range(y, len(I[0]))})
                else:
                    O = paint(O, {(val, (i, y)) for i in range(x, len(I))})
    return O 
 
0.49333333333333335, 18.443645, def edgbgedcbeibefgaidedceacbdgdafac(I):
  s_obj = argmin(objects(I, T, T, T), size)
  val = color(s_obj)
  if width(s_obj) >= height(s_obj):
    return hconcat(lefthalf(I), fill(righthalf(I), val, asindices(righthalf(I))))
  else:
    return vconcat(tophalf(I), fill(bottomhalf(I), val, asindices(bottomhalf(I))))
 
0.37333333333333335, 32.461723, def acajfabbdfbeeeegichicgebfgbgddcj(I):
  objs = objects(I, T, F, T)
  O = canvas(mostcolor(I), shape(I))
  for obj in objs:
    O = paint(O, obj)
    for (v, (i, j)) in obj:
      k = j + 1
      while k < width(I) and index(O, (i, k)) == mostcolor(I):
        O = fill(O, v, {(i, k)})
        k += 1
  return O
 
0.88, 32.34503, def abebcaffbhcjeahbihcfbjeaciheddbb(I):
    O = canvas(mostcolor(I), shape(I))
    for i, row in enumerate(I):
        current_color = None
        for j, value in enumerate(row):
            if value != mostcolor(I):
                current_color = value
            O = fill(O, current_color, {(i, j)})
    return O
 
0.38999999999999996, 30.071901, def edaibfjjeebaeajeiediagfiddhebagf(I):
  O = I
  for i, row in enumerate(I):
    for j, v in enumerate(row):
      if v != mostcolor(I):
        O = fill(O, v, {(i, k) for k in range(j, width(I))})
        break
  return O
 
0.12, 9.418033, def bcajeadccaicediiieedibhffeedaehe(grid: Grid) -> Grid:
  """
  Extends objects horizontally towards the background if they share a row with other objects.
  """
  def should_extend(obj: Object, grid: Grid) -> Boolean:
    """Checks if an object shares a row with another object of a different color."""
    for i in range(uppermost(obj), lowermost(obj) + 1):
      for j in range(width(grid)):
        cell_color = index(grid, (i, j))
        if cell_color != mostcolor(grid) and cell_color != color(obj):
          return True
    return False

  def extend_right(obj: Object, grid: Grid) -> Object:
    """Extends the object to the right until it encounters a different color."""
    if not should_extend(obj, grid):
      return obj
    max_j = rightmost(obj)
    for j in range(max_j + 1, width(grid)):
      if any(index(grid, (i, j)) != mostcolor(grid) and index(grid, (i, j)) != color(obj) for i in range(uppermost(obj), lowermost(obj) + 1)):
        break
      obj = obj | recolor(color(obj), {(i, j) for i in range(uppermost(obj), lowermost(obj) + 1)})
    return obj

  return paint(grid, merge(apply(lambda obj: extend_right(obj, grid), fgpartition(grid))))
 
0.10666666666666667, 16.044458, def fdagifdebcjbedbbifediicfdjcfafaa(grid: Grid) -> Grid:
  """
  Identifies shared rows and fills them with the object's color.
  """
  def shared_row_indices(grid: Grid) -> Indices:
    """Returns a set of indices representing rows shared by different objects."""
    shared_rows = set()
    for i in range(height(grid)):
      row_colors = set(index(grid, (i, j)) for j in range(width(grid)))-{mostcolor(grid)}
      if len(row_colors) > 1:
        shared_rows.add(i)
    return frozenset((i, j) for i in shared_rows for j in range(width(grid)))

  shared_indices = shared_row_indices(grid)
  new_grid = canvas(mostcolor(grid), shape(grid))
  for i in range(height(grid)):
    for j in range(width(grid)):
      if (i, j) in shared_indices:
        current_color = index(grid, (i, j))
        if current_color != mostcolor(grid):
          new_grid = fill(new_grid, current_color, {(i, k) for k in range(j, width(grid))})
          break
      else:
        new_grid = fill(new_grid, index(grid, (i,j)), {(i,j)})
  return new_grid
 
0.37333333333333335, 32.32506, def ahhdaicddfhjeaabjcibgdbfbebgihac(grid: Grid) -> Grid:
  """
  Extends objects horizontally until they encounter another object.
  """
  new_grid = canvas(mostcolor(grid), shape(grid))
  for i in range(height(grid)):
    current_color = mostcolor(grid)
    for j in range(width(grid)):
      if index(grid, (i, j)) != mostcolor(grid):
        current_color = index(grid, (i, j))
      new_grid = fill(new_grid, current_color, {(i, j)})
  return new_grid
 
0.38999999999999996, 30.071901, def daecefcecfafejcbjgebabiidcefbjaa(grid: Grid) -> Grid:
  """
  Marks the start of objects and extends them to the right.
  """
  new_grid = canvas(mostcolor(grid), shape(grid))
  for i in range(height(grid)):
    object_started = False
    for j in range(width(grid)):
      if index(grid, (i, j)) != mostcolor(grid) and not object_started:
        object_started = True
      if object_started:
        new_grid = fill(new_grid, index(grid, (i, j)), {(i, k) for k in range(j, width(grid))})
        break
  return new_grid
 
0.09000000000000001, 21.22391, def agdfaibbedeeebaeabhedgecbidefbag(grid: Grid) -> Grid:
  """
  Identifies object boundaries and extends them to the right. 
  """
  def get_object_boundaries(grid: Grid) -> Tuple[Indices, Indices]:
    """
    Returns two sets of indices: 
      1. Start indices of each object.
      2. End indices of each object.
    """
    start_indices = set()
    end_indices = set()
    for i in range(height(grid)):
      for j in range(width(grid)):
        if index(grid, (i, j)) != mostcolor(grid):
          if j == 0 or index(grid, (i, j-1)) == mostcolor(grid):
            start_indices.add((i, j))
          if j == width(grid)-1 or index(grid, (i, j+1)) == mostcolor(grid):
            end_indices.add((i, j))
    return frozenset(start_indices), frozenset(end_indices)

  start_indices, end_indices = get_object_boundaries(grid)
  new_grid = canvas(mostcolor(grid), shape(grid))
  for i in range(height(grid)):
    for j in range(width(grid)):
      if (i, j) in start_indices:
        end_j = next((ej for ei, ej in end_indices if ei == i), j) # Get the corresponding end index for the same row
        new_grid = fill(new_grid, index(grid, (i, j)), {(i, k) for k in range(j, end_j + 1)})
  return new_grid
 
0.3833333333333333, 31.608091, def bfcjeedfdcabeaddabhhadfbdgjhfaff(I):
  O = paint(canvas(mostcolor(I), shape(I)), 
           merge(frozenset(
                frozenset(
                  (v, (i, j)) for j in range(k, width(I)) if index(I, (i, k)) == v 
                )
                for i, row in enumerate(I) 
                for k, v in enumerate(row) if v != mostcolor(I)
              ))
           )
  return O
 
0.3233333333333333, 34.467636, def caejffbhhgijehfjifeaifbacfcdbehh(I):
  objs = objects(I, False, False, True)
  bg = mostcolor(I)
  new_objs = set()
  for obj in objs:
    for i in range(height(I)):
      row_obj = {(v, (i, j)) for v, (row, j) in obj if row == i}
      if row_obj:
        j_max = max(j for _, (i, j) in row_obj)
        new_objs.add(frozenset((next(iter(row_obj))[0], (i, j)) for j in range(j_max + 1)))
  O = paint(canvas(bg, shape(I)), merge(new_objs))
  return O
 
0.37333333333333335, 32.59856, def jaccgabbeaceefcdbaaceihfifceeaaa(I):
  objs = fgpartition(I)
  bg = mostcolor(I)
  new_objs = set()
  for obj in objs:
    for (v, (i, j)) in obj:
      right_extension = {(v, (i, k)) for k in range(j + 1, width(I)) if index(I, (i, k)) == bg}
      obj = obj | right_extension
    new_objs.add(obj)
  O = paint(canvas(bg, shape(I)), merge(new_objs))
  return O
 
0.37333333333333335, 32.32506, def affehfbjicabeheajjhdbdddccajaibd(I):
  O = canvas(mostcolor(I), shape(I))
  for i, row in enumerate(I):
    current_color = None
    for j, v in enumerate(row):
      if v != mostcolor(I):
        current_color = v
      if current_color is not None:
        O = fill(O, current_color, {(i, j)})
  return O
 
0.29, 24.678747, def ciedabcdadbceedcbgbgfiffaaibeffd(I):
    bg = mostcolor(I)
    objs = objects(I, T, F, T)
    O = I
    for obj in objs:
        c = color(obj)
        for (i, j) in toindices(obj):
            O = paint(O, {(c, (k, j)) for k in range(i, height(I))})
    return O
 
0.37999999999999995, 32.35286, def cdbcadjbebededcabdejcajbfgabjfia(I):
  bg = mostcolor(I)
  objs = objects(I, T, F, T)
  O = I
  for obj in objs:
    for (i, j) in toindices(obj):
      O = paint(O, {(color(obj), (i, k)) for k in range(j, width(I))})
  return O
 
0.06666666666666667, 23.283365, def biiccbgfcgdgehffbfdiiefbaecahaag(grid: Grid) -> Grid:
  def extend_object_right(obj: Object, grid: Grid) -> Object:
    """ Extends an object to the right, stopping at the last occurrence of its color in the row. """
    for j in range(rightmost(obj) + 1, width(grid)):
      if index(grid, (uppermost(obj), j)) == color(obj):
        obj = obj | recolor(color(obj), {(uppermost(obj), j)})
      else:
        break
    return obj
  return paint(grid, merge(apply(lambda obj: extend_object_right(obj, grid), fgpartition(grid))))
 
0.07666666666666667, 22.469046, def fedgaaffgdciefhhbbacicgiffieidaf(grid: Grid) -> Grid:
  def find_last_occurrence(row: Tuple, color: Integer, start: Integer) -> Integer:
    """ Finds the last occurrence of a color in a row starting from a specific index. """
    for j in range(len(row) - 1, start - 1, -1):
      if row[j] == color:
        return j
    return start

  new_grid = tuple()
  for i, row in enumerate(grid):
    for j, value in enumerate(row):
      if value != mostcolor(grid):
        last_index = find_last_occurrence(row, value, j)
        new_row = row[:j] + tuple(value for _ in range(last_index - j + 1)) + row[last_index + 1:]
        new_grid = new_grid + (new_row,)
        break
    else:
      new_grid = new_grid + (row,)
  return new_grid
 
0.43333333333333335, 12.95248, def ffdehgdieaddedfhabbedgacaedcehcc(grid: Grid) -> Grid:
  def extend_object(obj: Object, grid: Grid) -> Object:
    """ Extends the object to the rightmost occurrence of its color in its row. """
    last_occurrence = max(j for i, j in toindices(obj) if i == uppermost(obj))
    return recolor(color(obj), {(i, j) for i, j in product(range(uppermost(obj), lowermost(obj) + 1), range(leftmost(obj), last_occurrence + 1))})
  
  return paint(grid, merge(apply(lambda obj: extend_object(obj, grid), fgpartition(grid))))
 
0.11, 12.716379, def eibedijfdeijeeghbbegaddcjhbaaafj(grid: Grid) -> Grid:
  def extend_and_mirror(obj: Object, grid: Grid) -> Object:
    """ Extends the object to the right by mirroring its left half. """
    midpoint = leftmost(obj) + width(obj) // 2
    mirrored_part = frozenset((color(obj), (i, 2 * midpoint - j)) for value, (i, j) in obj if j < midpoint)
    return obj | mirrored_part

  return paint(grid, merge(apply(lambda obj: extend_and_mirror(obj, grid), fgpartition(grid))))
 
0.09333333333333334, 121.28924, def fajgbcidedhjeaeaibdfeececcahfcdj(I):
  # Find the smallest object
  min_obj = argmin(objects(I, T, T, T), size)
  # Create a grid containing only the smallest object
  O = subgrid(min_obj, I)
  # Horizontally upscale the object grid to match the input grid's width
  O = hupscale(O, width(I)) 
  # Return the upscaled grid
  return O
 
0.12333333333333335, 8.793965, def dbabfafajfbbehhcibfajdiaafgaedbi(I):
    O = I 
    for i in range(height(I)):
        for j in range(width(I)):
            if i > 0 and I[i][j] == 0 and I[i-1][j] != 0:
                O = fill(O, I[i-1][j], {(i, j)})
    return O
 
0.08, 18.180365, def biffdhaaajejedbficgabajdbbjbfbdc(I):
    O = I
    for obj in objects(I, True, False, False):
        if len(obj) > 1:
            for (v, (i, j)) in obj:
                for k in range(i + 1, height(I)):
                    if I[k][j] == 0:
                        O = fill(O, v, {(k, j)})
                    else:
                        break
    return O
 
0.27999999999999997, 24.737232, def ihiadcdfadaeeicbbcecedchbddfiggb(I):
    O = I
    for j in range(width(I)):
        current_color = None
        for i in range(height(I)):
            if I[i][j] != 0:
                current_color = I[i][j]
            if current_color is not None:
                O = fill(O, current_color, {(i, j)})
    return O
 
0.37333333333333335, 32.32506, def edgfdcefeebgegghiecgcacabagcahef(I):
    bg = mostcolor(I)
    h, w = shape(I)
    O = canvas(bg, (h, w))
    for i, row in enumerate(I):
        current_color = bg
        for j, v in enumerate(row):
            if v != bg:
                current_color = v
            O = fill(O, current_color, {(i, j)})
    return O
 
0.38999999999999996, 30.071901, def cdfbacdefbddecggaciedegebajecgci(I):
    bg = mostcolor(I)
    h, w = shape(I)
    O = list(list(row) for row in I)
    for i in range(h):
        fill_color = bg
        for j in range(w):
            if O[i][j] != bg and fill_color == bg:
                fill_color = O[i][j] 
            O[i][j] = fill_color
    return tuple(tuple(row) for row in O)
 
0.33666666666666667, 33.630917, def ejceedddegccecjgbdiifedaicdbeccf(grid: Grid) -> Grid:
  """
  Leverages hfrontier to determine if a row is fully occupied by one color and extends accordingly.
  """
  new_grid = canvas(mostcolor(grid), shape(grid))
  for i in range(height(grid)):
    for j in range(width(grid)):
      current_color = index(grid, (i, j))
      if current_color != mostcolor(grid) and len(palette(hfrontier((i, j)))) == 1:
        new_grid = fill(new_grid, current_color, {(i, k) for k in range(width(grid))})
      else:
        new_grid = fill(new_grid, current_color, {(i, j)})
  return new_grid
 
0.18333333333333335, 14.128403, def fbdaddceceegefceaddeaedfhiabjaeb(I):
  s_obj = argmin(objects(I, T, T, T), size)  # Find smallest object
  val = color(s_obj)  # Get color of smallest object
  filled_grid = I  # Initialize filled grid
  for i, j in toindices(s_obj):
    filled_grid = fill(filled_grid, val, shoot((i, j), UP))  # Fill upwards
    filled_grid = fill(filled_grid, val, shoot((i, j), DOWN))  # Fill downwards
    filled_grid = fill(filled_grid, val, shoot((i, j), LEFT))  # Fill leftwards
    filled_grid = fill(filled_grid, val, shoot((i, j), RIGHT))  # Fill rightwards
  return filled_grid 
 
0.13333333333333333, 9.028585, def eciidfbeedfgeeabjieifdehfcgbcfjf(I):
  s_obj = argmin(objects(I, T, T, T), size)
  val = color(s_obj)
  filled_grid = I
  for x in range(width(I)):
    for y in range(height(I)):
      if any((x, y) in toindices(shift(s_obj, (i, j))) for i in range(-1, 2) for j in range(-1, 2)):
        filled_grid = fill(filled_grid, val, {(x, y)})
  return filled_grid
 
0.13333333333333333, 8.341943, def ffbahbcfcehfeabcbceaacaidcbbefgh(I):
    h, w = shape(I)
    O = I
    for i in range(h):
        for j in range(w - 1):
            if index(I, (i, j)) != mostcolor(I) and index(I, (i, j + 1)) == mostcolor(I):
                O = fill(O, index(O, (i, j)), {(i, j + 1)})
    return O
 
0.10333333333333333, 14.494559, def fdbecjdddjhcefcbjhahfjcbfideidif(I):
    bg = mostcolor(I)
    O = I
    for i in range(height(I)):
        current_obj = None
        for j in range(width(I)):
            if index(I, (i, j)) != bg:
                if current_obj is None:
                    current_obj = {(i, j)}
                else:
                    current_obj.add((i, j))
        if current_obj is not None:
            start_j = leftmost(current_obj)
            end_j = rightmost(current_obj) + 1
            O = fill(O, index(I, (i, start_j)), {(i, k) for k in range(start_j, end_j)})
    return O
 
0.10666666666666667, 12.49278, def fdfaecbdageaegedifghehcbjdbbhica(grid: Grid) -> Grid:
  """
  Leverages horizontal mirroring to simplify finding the rightmost occurrences.
  """
  mirrored_grid = hmirror(grid)
  new_grid = canvas(mostcolor(grid), shape(grid))
  for obj in fgpartition(grid):
    for i in range(uppermost(obj), lowermost(obj) + 1):
      leftmost_mirrored_j = min([j for j in range(width(mirrored_grid)) if index(mirrored_grid, (i, j)) == color(obj)], default=leftmost(obj))
      rightmost_j = width(grid) - leftmost_mirrored_j - 1
      if rightmost_j > rightmost(obj):
        new_grid = fill(new_grid, color(obj), {(i, k) for k in range(rightmost(obj) + 1, rightmost_j + 1)})
    new_grid = paint(new_grid, obj)
  return new_grid
 
0.35000000000000003, 12.970794, def afhifibgcejdeedhihbhcdcfcbffidcf(I):
    s_obj = argmin(objects(I, T, T, T), size)
    val = color(s_obj)
    h, w = len(I), len(I[0])
    if width(s_obj) >= height(s_obj):
        return tuple(tuple(val if j in range(leftmost(s_obj), w) else I[i][j] for j in range(w)) for i in range(h))
    else:
        return tuple(tuple(val if i in range(uppermost(s_obj), h) else I[i][j] for i in range(h)) for j in range(w))
 
0.21333333333333335, 32.822433, def jcgacheadfefecjhaffabeebjbaeajdd(I):
    s_obj = argmin(objects(I, T, T, T), size)
    val = color(s_obj)
    h, w = shape(I)
    start = ulcorner(s_obj)
    if width(s_obj) >= height(s_obj):
        return fill(fill(canvas(val,(h,w)), mostcolor(I),  {(i, j) for i in range(h) for j in range(start[1])}), mostcolor(I), {(i, j) for i in range(h) for j in range(start[1] + width(s_obj), w)})
    else:
        return fill(fill(canvas(val,(h,w)), mostcolor(I),  {(i, j) for i in range(start[0]) for j in range(w)}), mostcolor(I), {(i, j) for i in range(start[0] + height(s_obj), h) for j in range(w)}) 
 
0.33, 10.605976, def ccfgaebahedjegcdjaahifgaacffdcai(I):
    objs = objects(I, T, T, T)
    min_obj = argmin(objs, size)
    target_color = color(min_obj)
    output_grid = canvas(mostcolor(I), shape(I))
    for obj in objs:
      if obj == min_obj:
        if width(min_obj) >= height(min_obj):
          output_grid = paint(output_grid, frozenset({(target_color, (i, k)) for i in range(len(I)) for k in range(leftmost(min_obj), len(I[0]))}))
        else:
          output_grid = paint(output_grid, frozenset({(target_color, (k, j)) for j in range(len(I[0])) for k in range(uppermost(min_obj), len(I))}))
      else:
        output_grid = paint(output_grid, obj)
    return output_grid
 
0.18999999999999997, 11.713514, def jjecebijaaccedcbahbeffafegcebhee(I):
  target_color = leastcolor(I)
  O = I
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if val == target_color:
        for k in range(j + 1, len(row)):
          if I[i][k] != mostcolor(I) and I[i][k] != target_color:
            break
          O = fill(O, target_color, ((i,k),(i,k)))
  return O
 
0.22666666666666668, 12.035125, def dchifejdihebebecbffebcejbjcfacei(I):
  objs = objects(I, F, F, T)
  target_obj = min(objs, key=len)
  target_color = color(target_obj)
  filled_grid = I
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if val == target_color:
        for k in range(j + 1, len(row)):
          if I[i][k] != mostcolor(I) and I[i][k] != target_color:
            break
          filled_grid = fill(filled_grid, target_color, ((i,k),(i,k)))
  O = filled_grid
  return O
 
0.24333333333333337, 22.955309, def aidbjecdeaededdibibhfjcdagjefffb(I):
  objs = objects(I, True, False, True)
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  for obj in objs:
    extension = set()
    for v, (i, j) in obj:
      k = 1
      while True:
        new_i, new_j = i + k, j + k
        if 0 <= new_i < height(I) and 0 <= new_j < width(I) and index(O, (new_i, new_j)) == bg:
          extension.add((new_i, new_j))
          k += 1
        else:
          break
    O = underfill(O, v, frozenset(extension))
    O = paint(O, obj)
  return O
 
0.25333333333333335, 22.139454, def badcbccciejjeiieafejgdgfdjacejia(I):
  objs = objects(I, True, False, True)
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  for obj in objs:
    for v, (i, j) in obj:
      new_i, new_j = i, j
      while 0 <= new_i < height(I) and 0 <= new_j < width(I) and index(O, (new_i, new_j)) == bg:
        O = fill(O, v, {(new_i, new_j)})
        new_i += 1
        new_j += 1
  return O
 
0.36000000000000004, 28.298048, def aijiebfcdjdcedddagbbbhcabdedjdde(I):
  O = I
  for obj in objects(I, True, False, True):
    rightmost_cell = max(obj, key=lambda x: x[1][1])
    for j in range(rightmost_cell[1][1] + 1, width(I)):
      if index(I, (rightmost_cell[1][0], j)) != mostcolor(I):
        break
      O = fill(O, rightmost_cell[0], {(rightmost_cell[1][0], j)})
  return O 
 
0.37333333333333335, 32.18018, def bjejdbhiagcdefceabecddaddebdjajh(grid: Grid) -> Grid:
  """ Extends objects horizontally to the rightmost occurrence of their color in their initial row. """
  def extend_right(row, start, color):
    """ Extends a color to the right in a row from a starting index. """
    for j in range(start, len(row)):
      if row[j] == color:
        return tuple(color if j <= k < len(row) and row[k] == mostcolor(grid) else v for k, v in enumerate(row))
    return row

  new_grid = []
  for i, row in enumerate(grid):
    for j, value in enumerate(row):
      if value != mostcolor(grid):
        new_grid.append(tuple(extend_right(row, j, value)))
        break
    else:
      new_grid.append(row)
  return tuple(new_grid)
 
0.32, 26.464611, def hebeggdecjedeacfbbffcicaejeihgee(I):
  objs = objects(I, F, T, T)  # Find all objects in the grid.
  O = I
  for obj in objs:
    io, jo = ulcorner(obj)  # Get upper-left corner of the object.
    for j in range(jo + 1, width(I)):  # Iterate from the object's right edge to the grid's right edge.
      if (io, j) not in toindices(obj) and index(I, (io, j)) != mostcolor(I):
        break  # Stop extending if we hit another object or a non-background cell.
      O = fill(O, color(obj), {(io, j)})  # Fill the current cell with the object's color.
  return O
 
0.37333333333333335, 32.32506, def dihfdebebieeefjcibffbbbbhfdjbeee(I):
  O = canvas(mostcolor(I), shape(I)) # Create a canvas filled with background color
  for i in range(height(I)):
    current_color = None  # Keep track of the current color being extended
    for j in range(width(I)):
      if I[i][j] != mostcolor(I):
        current_color = I[i][j]  # Update current color if we encounter a non-background cell
      if current_color is not None:
        O = fill(O, current_color, {(i,j)})  # Fill with the current color if one is active
  return O
 
0.07, 22.811481, def dfjdeaabefdeegjdjbddaacgaceeaidb(I):
  target_obj = argmin(objects(I, F, F, T), lambda obj: colorcount(obj, color(obj)))
  O = I
  for i, j in enumerate(I[uppermost(target_obj)]):
    if I[uppermost(target_obj)][j] == color(target_obj):
      O = fill(O, color(target_obj), ((uppermost(target_obj),j),(uppermost(target_obj),width(I)-1)))
  return O 
 
0.3233333333333333, 30.1925, def gebcifehdfeaefcjjahbebcbaabcebed(I):
    objs = objects(I, T, F, F)
    bg = mostcolor(I)
    new_objs = set()
    for obj in objs:
        h_extension = {(v, (x, j)) for v, (x, y) in obj for j in range(y + 1, width(I)) if all(index(I, (x, k)) == bg for k in range(y + 1, j + 1))}
        v_extension = {(v, (i, y)) for v, (x, y) in obj for i in range(x + 1, height(I)) if all(index(I, (k, y)) == bg for k in range(x + 1, i + 1))}
        obj = obj | h_extension | v_extension
        new_objs.add(frozenset(obj))
    return paint(canvas(bg, shape(I)), merge(new_objs))
 
0.14333333333333334, 12.867243, def hcafdbegfbedeebhjfchbeicbfedbebf(I):
  O = canvas(mostcolor(I), shape(I))
  for obj in objects(I, T, F, F):
    for v, (x, y) in obj:
      O = paint(O, frozenset({(v, (x, j)) for j in range(y, width(O)) if all(index(I, (x, k)) == mostcolor(I) for k in range(y + 1, j + 1))}))
      O = paint(O, frozenset({(v, (i, y)) for i in range(x, height(O)) if all(index(I, (k, y)) == mostcolor(I) for k in range(x + 1, i + 1))}))
  return O
 
0.15333333333333335, 12.340935, def bcejfbejdibdeicjjdbchdhahbfadica(I):
  O = I
  for obj in objects(I, T, F, F):
    for v, (x, y) in obj:
      for i in range(x + 1, height(I)):
        if index(I, (i, y)) != mostcolor(I):
          break
        O = paint(O, {(v, (i, y))})
      for j in range(y + 1, width(I)):
        if index(I, (x, j)) != mostcolor(I):
          break
        O = paint(O, {(v, (x, j))})
  return O
 
0.8166666666666665, 27.850172, def biibccafdfafededbaeaffabbedbacdb(I):
  bg = mostcolor(I)
  objs = fgpartition(I)
  O = canvas(bg, shape(I))
  for obj in objs:
    for i in range(height(I)):
      row_obj = frozenset((v, (i,j)) for v, (i,j) in obj)
      if len(row_obj) > 1:
        min_j = min(j for _, (i,j) in row_obj)
        max_j = max(j for _, (i,j) in row_obj)
        O = fill(O, color(obj), {(i, j) for j in range(min_j, max_j + 1)})
  return O
 
0.31, 32.88418, def gfeabeeccjbaehfdadddjjaceiadjede(I):
  bg = mostcolor(I)
  objs = objects(I, T, F, T)
  h, w = shape(I)
  O = I
  for obj in objs:
    for dir in [UP, DOWN, LEFT, RIGHT]:
      shifted_obj = shift(obj, dir)
      intersection = toindices(shifted_obj) & asindices(I)
      if intersection:
        for i, j in intersection:
          if index(I, (i,j)) == bg:
            O = fill(O, color(obj), {(i,j)})
  return O
 
0.16, 40.218204, def fibfdaedffeaejfiacbfdedbfcfcbhaa(grid: Grid) -> Grid:
  """ 
  Utilizes object-based approach to extend colors within object boundaries.
  """
  return paint(
    canvas(mostcolor(grid), shape(grid)),
    merge(
      apply(
        lambda obj: extend_object(grid, obj),
        fgpartition(grid)
      )
    )
  )
 
0.06666666666666667, 23.283365, def fafejffecceaeefgjchahicaiheegfaf(I):
  objs = objects(I, T, F, F)
  min_obj = argmin(objs, size)
  min_color = color(min_obj)
  if portrait(min_obj) or (height(min_obj) == width(min_obj)):
    direction = (1, 0)
  else:
    direction = (0, 1)
  extension = shoot(center(min_obj), direction)
  for obj in objs:
    if color(obj) != min_color:
      extension = difference(extension, toindices(obj))
  O = paint(I, recolor(min_color, extension))
  return O
 
0.17, 10.873977, def ddhacefecbaiedfijedcdhgaibacaahf(I):
  objs = objects(I, T, F, F)
  target_obj = argmin(objs, size)
  target_color = color(target_obj)
  other_objs = remove(target_obj, objs)
  
  def extend_line(start, direction):
    line = shoot(start, direction)
    for obj in other_objs:
      if not intersection(toindices(obj), line):
        continue
      line = difference(line, {extract(line, lambda loc: index(I, loc) == color(obj))})
      break
    return line
  
  center_loc = center(target_obj)
  extension = merge([
    extend_line(center_loc, (1, 0)),
    extend_line(center_loc, (-1, 0)),
    extend_line(center_loc, (0, 1)),
    extend_line(center_loc, (0, -1)),
  ])
  O = paint(I, recolor(target_color, extension))
  return O
 
0.09333333333333334, 34.637733, def igbiheegfadaeffbjiaegiajjdccjhce(I):
  objs = objects(I, T, F, F)  # Extract all objects from the grid.
  bg = mostcolor(I)  # Identify the background color.
  filled_grid = canvas(bg, shape(I))  # Create a canvas filled with the background color.
  for obj in objs:
    leftmost_j = leftmost(obj)
    rightmost_j = rightmost(obj)
    for j in range(leftmost_j, rightmost_j + 1):
      filled_grid = fill(filled_grid, color(obj), {(uppermost(obj), j)})  # Fill horizontally.
  return filled_grid
 
0.06666666666666667, 23.283365, def ifbhfdjaicaeeicdjaddcbjfchbfdacb(I):
  bg = mostcolor(I)
  O = I
  for obj in objects(I, T, F, F):
    if color(obj) != bg:
      start_j = leftmost(obj)
      end_j = rightmost(obj)
      for j in range(start_j, end_j + 1):
        O = fill(O, color(obj), {(uppermost(obj), j)})
  return O
 
0.11333333333333334, 37.234547, def jaaddeffdaafejgfiidbgfigfddbadhd(I):
  return paint(canvas(mostcolor(I), shape(I)), 
              merge(apply(lambda obj: recolor(color(obj), backdrop(toindices(obj))),
                          objects(I, T, F, F))))
 
0.6366666666666666, 41.459408, def ccfbhgbbeebceehaafgbdjfdddhgafcb(I):
  h = height(I)
  O = I
  for i in range(h):
    row_color = next((I[i][j] for j in range(len(I[0])) if I[i][j] != mostcolor(I)), mostcolor(I))
    if row_color != mostcolor(I):
      O = fill(O, row_color, {(i, j) for j in range(len(I[0]))})
  return O
 
0.06666666666666667, 23.283365, def bifdgddfhdgbebabbbhbbhdgehedchff(I):
    objs = objects(I, T, F, T)  # Extract all objects, excluding background
    min_obj = argmin(objs, size)  # Find the smallest object
    target_color = color(min_obj)  # Get the color of the smallest object
    other_objs = remove(min_obj, objs)  # Get all objects except the smallest one
    expanded_obj = min_obj  # Initialize the expanded object

    for obj in other_objs:
      if color(obj) == target_color:  # Check if the object has the target color
        # Expand horizontally
        if hmatching(expanded_obj, obj):
          expanded_obj = combine(expanded_obj, toobject(connect(leftmost(obj), rightmost(expanded_obj)), I))
        # Expand vertically
        if vmatching(expanded_obj, obj):
          expanded_obj = combine(expanded_obj, toobject(connect(uppermost(obj), lowermost(expanded_obj)), I))

    O = paint(cover(I, min_obj), expanded_obj) # Paint the expanded object back onto the grid
    return O
 
0.16666666666666666, 55.49627, def eaaceacdbfjbebfdaaecbaedhffgecig(I):
    min_obj = argmin(objects(I, T, F, T), size)
    target_color = color(min_obj)
    O = paint(canvas(mostcolor(I), shape(I)), min_obj)

    for i in range(height(I)):
      for j in range(width(I)):
        if index(O, (i,j)) == target_color:
          # Horizontal Expansion
          O = fill(O, target_color, hfrontier((i,j)) & backdrop(min_obj))
          # Vertical Expansion
          O = fill(O, target_color, vfrontier((i,j)) & backdrop(min_obj))

    return O
 
0.38999999999999996, 10.271357, def acjhbfhjjccdehibjdaciccfegbgbaib(I):
  min_obj = argmin(objects(I, T, F, T), size)
  t_color = color(min_obj)
  O = I
  for obj in objects(I, T, F, T):
    if color(obj) == t_color:
      for (i, j) in toindices(obj):
        O = fill(O, t_color, backdrop(combine(min_obj, {(t_color, (i, j))})))
  return O
 
0.06666666666666667, 23.283365, def bdeabbfciehaeaffjaajihfbfaabbdfi(I):
  objs = objects(I, F, F, T)  # Identify all objects, excluding background
  filled_grid = I 
  for obj in objs:
    upper = uppermost(obj)
    lower = lowermost(obj)
    left = leftmost(obj)
    right = rightmost(obj)
    for i in range(upper, lower + 1):
      for j in range(left, right + 1):
        if (i, j) in toindices(obj):
          value = I[i][j]
          filled_grid = fill(filled_grid, value, {(i, j)}) # Fill horizontally
  return filled_grid
 
0.13333333333333333, 8.341943, def bddcjiabffcgefeeiddjdacfcfdjacdb(I):
  objs = objects(I, T, T, T)
  bg = mostcolor(I)
  for obj in objs:
    c = color(obj)
    for v, (i, j) in obj:
      if j < width(I) - 1:
        right_neighbor = (i, j + 1)
        if index(I, right_neighbor) == bg:
          I = fill(I, c, frozenset({right_neighbor}))
  return I
 
0.06666666666666667, 23.283365, def ffidfecjebfbeebgafffcgfeaeahcdea(I):
  objs = objects(I, T, T, T)
  for obj in objs:
    c = color(obj)
    rightmost_cell = argmax(toindices(obj), lambda x: x[1])
    right_frontier = shoot(rightmost_cell, RIGHT)
    I = fill(I, c, intersection(right_frontier, delta(obj)))
  return I
 
0.5233333333333333, 41.550877, def ibaibefadgfcefheacdbgbbgabbbccde(I):
  return paint(I, merge(apply(lambda x: recolor(color(x), hfrontier(ulcorner(x))), objects(I, T, T, T))))
 
0.37333333333333335, 32.32506, def gccihcjbdicbeccebcahcaaeecaeabbc(I):
  for i in range(height(I)):
    for j in range(width(I) - 1):
      if I[i][j] != I[i][j+1] and I[i][j+1] == mostcolor(I):
        I = fill(I, I[i][j], frozenset({(i, j+1)}))
  return I
 
0.37333333333333335, 32.32506, def jfabchaegffceedebgfagehaibfafgba(I):
  h, w = shape(I)
  O = canvas(mostcolor(I), (h, w))  # Create a canvas with the background color.
  for i in range(h):
    for j in range(w):
      if I[i][j] != mostcolor(I): # If the current cell is not background
        O = fill(O, I[i][j], {(i, k) for k in range(j, w)})  # Fill horizontally to the edge.
  return O
 
0.3566666666666667, 22.098639, def dghjdccbcbfiedbaajbaaabiachjccab(I):
  O = canvas(mostcolor(I), shape(I))  # Create a canvas with the background color.
  for obj in objects(I, True, False, True):  # Iterate through non-background objects
    i, j = ulcorner(obj) # Get the upper-left corner of the object
    O = fill(O, color(obj), {(i, k) for k in range(j, width(I))}) # Fill horizontally to the edge.
  return O
 
0.38999999999999996, 30.071901, def cdbegacfchbgecefibeehffbebhjbhbb(I):
  O = I
  for i in range(height(I)):
    for j in range(width(I) - 1):
      if O[i][j] != mostcolor(I) and O[i][j + 1] == mostcolor(I):
        O = fill(O, O[i][j], {(i, k) for k in range(j + 1, width(I))})
  return O
 
0.16, 53.088364, def eafcdecfibeaebdjibccefaibfcebhcf(I):
  # Identify smallest object and its color
  min_obj = argmin(objects(I, T, F, T), size)
  target_color = color(min_obj)
  # Find another object as the target area
  target_area = argmin(objects(I, T, F, F) - {min_obj}, size)
  # Create an empty grid
  O = canvas(mostcolor(I), shape(I))
  # Paint the target area with the target color
  O = underpaint(O, recolor(target_color, target_area))
  # Paint the smallest object onto the grid
  O = paint(O, min_obj)
  return O
 
0.37333333333333335, 32.32506, def aebeghhcaeafedhfbafeihjeaccjfcdf(I):
  objs = objects(I, F, F, T)  # Identify objects excluding background
  O = I
  for obj in objs:
    for x, y in toindices(obj):
      for j in range(y + 1, width(I)):
        if index(I, (x, j)) == mostcolor(I):
          O = fill(O, I[x][y], {(x, j)})
        else:
          break  
  return O
 
0.13333333333333333, 8.341943, def eidadibcjaifeadeacegaabcihfaacca(I):
  O = I
  for i in range(height(I)):
    for j in range(width(I) - 1):
      if I[i][j] != mostcolor(I) and I[i][j + 1] == mostcolor(I):
        O = fill(O, I[i][j], {(i, j + 1)})
  return O
 
0.14666666666666667, 9.442604, def abaafaebheifebcdbfihdhebfjfajeea(I):
  objs = objects(I, F, F, T)
  O = canvas(mostcolor(I), shape(I))
  for obj in objs:
    w = width(obj)
    O = paint(O, obj)
    for x, y in toindices(obj):
      O = fill(O, I[x][y], {(x, y + w)})
  return O
 
0.31666666666666665, 16.559256, def dehebdcebdggeabaadaebigbgcgcjgfd(I):
  O = I
  for obj in objects(I, F, F, T):
    leftmost_j = leftmost(obj)
    for i in range(uppermost(obj), lowermost(obj) + 1):
      for j in range(leftmost_j + 1, width(I)):
        if I[i][j] == mostcolor(I):
          O = fill(O, color(obj), {(i, j)})
        else:
          break
  return O
 
0.06333333333333334, 16.832243, def dccedfaahebfediejeibcceccadeeifj(I):
  objs = objects(I, T, T, T)
  target_color = mostcommon([color(obj) for obj in objs if size(obj) == 1])
  target_obj = extract(objs, lambda obj: color(obj) == target_color)
  other_color = leastcommon([color(obj) for obj in objs])
  for obj in objs:
    if color(obj) == other_color:
      if hmatching(target_obj, obj):
        target_rightmost = rightmost(target_obj)
        obj_leftmost = leftmost(obj)
        extension = connect((uppermost(target_obj),target_rightmost),(lowermost(target_obj),obj_leftmost-1))
        I = fill(I, target_color, extension)
  return I
 
0.07, 22.62344, def feiddgfefacheibciddifcefbccfibae(I):
  objs = objects(I, T, T, T)
  target_color = mostcommon([color(obj) for obj in objs if size(obj) == 1])
  target_obj = extract(objs, lambda obj: color(obj) == target_color)
  extension = set()
  for i in range(height(I)):
    for j in range(width(I)):
      if (i,j) in hfrontier((0,0)) and index(I,(i,j))==target_color:
        extension.add((i,j-1))
  I = fill(I, target_color, extension)
  return I
 
0.05333333333333334, 18.892012, def dffdjfecfbhheddfbbabcdaaceghhijj(I):
  objs = objects(I, T, T, T)
  target_color = mostcommon([color(obj) for obj in objs if size(obj) == 1])
  target_obj = extract(objs, lambda obj: color(obj) == target_color)
  other_color = leastcommon([color(obj) for obj in objs])
  for obj in objs:
    if color(obj) == other_color:
      if vmatching(target_obj, obj):
        target_bottommost = lowermost(target_obj)
        obj_topmost = uppermost(obj)
        extension = connect((target_bottommost, leftmost(target_obj)), (obj_topmost-1,leftmost(target_obj)))
        I = fill(I, target_color, extension)
  return I
 
0.07666666666666667, 22.289635, def bdfcaaccbfbbejcajidbdcbhfcfeeiha(I):
  objs = objects(I, T, F, F)
  for obj1 in objs:
    for obj2 in objs:
      if color(obj1) != color(obj2) and manhattan(obj1, obj2) == 2:
        I = paint(I, recolor(color(obj2), connect(centerofmass(obj1), centerofmass(obj2))))
  return I
 
0.06999999999999999, 21.579103, def afcdgdcfdbhiedbejieddfeaehagfidd(I):
  objs = objects(I, T, F, F)
  while True:
    changed = False
    for obj1 in objs:
      for obj2 in objs:
        if color(obj1) != color(obj2) and manhattan(obj1, obj2) == 2:
          path = connect(center(obj1), center(obj2))
          for cell in path:
            if index(I, cell) == mostcolor(I):
              I = paint(I, recolor(color(obj2), initset(cell)))
              changed = True
          break
      if changed:
        break
    if not changed:
      break
  return I
 
0.5266666666666667, 39.588364, def dfhcbbabbeijehiabdgbicjcccegdhdc(I):
  O = I
  for obj in objects(I, T, T, F):
    start_j = leftmost(obj)
    end_j = rightmost(obj)
    if start_j > 0 and index(I, (uppermost(obj), start_j - 1)) == 0:
      O = fill(O, color(obj), {(uppermost(obj), j) for j in range(start_j)})
    if end_j < width(I) - 1 and index(I, (uppermost(obj), end_j + 1)) == 0:
      O = fill(O, color(obj), {(uppermost(obj), j) for j in range(end_j + 1, width(I))})
  return O
 
0.30333333333333334, 26.911587, def dedhbgjeffageaebicffgeddcdbddhfh(I):
  O = I
  for obj in objects(I, T, T, F):
    for (i, j) in toindices(obj):
      O = fill(O, color(obj), shoot((i,j), (0, 1)))
      O = fill(O, color(obj), shoot((i,j), (0, -1)))
  return O
 
0.06999999999999999, 22.08667, def bddbbccebdhiecjfbaaifbfdfajbjcca(I):
  objs = objects(I, T, T, F)
  extensions = set()
  for obj in objs:
    for x in range(leftmost(obj), rightmost(obj) + 1):
      extensions.add((color(obj), (uppermost(obj), x)))
  return paint(I, frozenset(extensions))
 
0.21333333333333335, 8.85373, def eddgaaagfhjeeedbaebgjcejbiieahig(I):
  O = canvas(mostcolor(I), shape(I))
  for obj in objects(I, T, T, F):
    O = paint(O, obj)
    for (i, j) in toindices(obj):
      for k in range(j + 1, width(I)):
        if index(I, (i, k)) != 0:
          break
        O = fill(O, color(obj), {(i, k)})
      for k in range(j - 1, -1, -1):
        if index(I, (i, k)) != 0:
          break
        O = fill(O, color(obj), {(i, k)})
  return O
 
0.6033333333333334, 21.559645, def deechjicchcceefjbcfddacigfdbfbae(I):
  # Find the smallest object
  min_obj = argmin(objects(I, T, F, T), size)
  target_color = color(min_obj)

  # Create the output grid with only the smallest object
  O = paint(canvas(mostcolor(I), shape(I)), min_obj)

  # Get the bounding box of all objects in the input
  all_objects_backdrop = backdrop(merge(objects(I, T, F, T)))

  # Iterate over the rows and columns within the bounding box
  for i in range(uppermost(all_objects_backdrop), lowermost(all_objects_backdrop) + 1):
    for j in range(leftmost(all_objects_backdrop), rightmost(all_objects_backdrop) + 1):
      # If a cell is of the target color, expand horizontally and vertically
      if index(O, (i,j)) == target_color:
        O = fill(O, target_color, hfrontier((i, j)) & all_objects_backdrop)
        O = fill(O, target_color, vfrontier((i, j)) & all_objects_backdrop)

  return O
 
0.09999999999999999, 10.757593, def cjbhfcabadfheebebfbbigbaaedcfdge(I):
  # Find the smallest object
  min_obj = argmin(objects(I, T, F, T), size)
  target_color = color(min_obj)

  # Create output grid initialized with all objects
  O = paint(canvas(mostcolor(I), shape(I)), merge(objects(I, T, F, T)))

  # Iterate over each cell in the smallest object
  for i, j in toindices(min_obj):
      # Horizontal expansion
      current_j = j + 1
      while current_j < width(I) and index(O, (i, current_j)) == mostcolor(I):
        O = fill(O, target_color, {(i, current_j)})
        current_j += 1

      # Vertical expansion
      current_i = i + 1
      while current_i < height(I) and index(O, (current_i, j)) == mostcolor(I):
        O = fill(O, target_color, {(current_i, j)})
        current_i += 1
  return O
 
0.15, 7.7893806, def iecdehafeeieedbababdbhcjjgcdfhdd(I):
  objs = objects(I, F, F, T) 
  target_obj = argmin(objs, size)  
  target_color = color(target_obj) 
  filled_grid = I
  for obj in objs:
    if obj == target_obj:
      continue
    if color(obj) == target_color:
      upper = uppermost(obj)
      lower = lowermost(obj)
      left = min(leftmost(obj), leftmost(target_obj)) 
      right = max(rightmost(obj), rightmost(target_obj)) 
      for i in range(upper, lower + 1):
        for j in range(left, right + 1):
          filled_grid = fill(filled_grid, target_color, {(i, j)})
  return filled_grid
 
0.08666666666666667, 20.632057, def adgfcecfddggedjgbgefdeaddbfgcdgc(I):
  objs = objects(I, F, F, T)
  target_color = color(argmin(objs, size))
  filled_grid = I
  for i in range(len(I)):
    row_objs = sfilter(objs, lambda obj: i in set(k[0] for k in toindices(obj))) 
    if len(row_objs) > 1 and any(color(obj) == target_color for obj in row_objs):
      left = min(leftmost(obj) for obj in row_objs)
      right = max(rightmost(obj) for obj in row_objs)
      filled_grid = fill(filled_grid, target_color, {(i, j) for j in range(left, right + 1)})
  return filled_grid
 
0.4033333333333333, 30.78704, def gfdffchifaafejffijhccedaffchdjdc(I):
  target_color = color(argmin(objects(I, F, F, T), size)) 
  output_grid = tuple(tuple(target_color if target_color in row else val for val in row) for row in I)
  return output_grid
 
0.07666666666666666, 21.896334, def bhiedhgeefhdebccjhfeiafacjfaigbh(I):
  objs = objects(I, T, T, T)
  target_color = mostcommon([color(obj) for obj in objs if size(obj) == 1])
  target_obj = extract(objs, lambda obj: color(obj) == target_color)
  shifted_obj = shift(target_obj, (-1, 1))
  return fill(I, target_color, intersection(toindices(shifted_obj), asindices(I)))
 
0.06666666666666667, 21.668667, def ecaaaabfiaafeeffjgdbafdcfefbadie(I):
  objs = objects(I, T, F, T)  # Get all objects, excluding background
  bg = mostcolor(I)  # Identify background color
  for obj1 in objs:
    for obj2 in objs:
      if color(obj1) != color(obj2) and manhattan(obj1, obj2) == 2:
        # Found objects with different colors and 2 cells apart
        path = connect(centerofmass(obj1), centerofmass(obj2))
        # Draw a line connecting their centers of mass
        for cell in path:
          if index(I, cell) == bg:
            # If the cell is background, fill it with obj2's color
            I = paint(I, recolor(color(obj2), initset(cell)))
  return I
 
0.08, 24.995277, def cfdcheedhaebebccbgcjecaedjfgabda(I):
    for color in palette(I) - {mostcommon(I)}:
        # Iterate over each color in the grid except the background
        obj = recolor(color, first(objects(I, T, F, T)))
        # Get the first object of that color
        for other_obj in objects(I, T, F, T) - {obj}:
            # Iterate over other objects 
            if manhattan(obj, other_obj) == 2:
                # If the objects are two cells apart
                I = paint(I, recolor(color, connect(centerofmass(obj), centerofmass(other_obj))))
                # Connect their centers of mass with the current color
    return I
 
0.34, 27.058231, def fehaefcbcbjfechfihbhedffjacdhdfd(I):
  O = I
  for obj in objects(I, True, False, True):
    if rightmost(obj) < width(I) - 1:  # Check if object touches right edge
      O = fill(O, color(obj), product({uppermost(obj)}, interval(leftmost(obj), width(I), 1)))
  return O
 
0.2933333333333333, 15.282582, def gbbdacfcbcbaecgdjdiffdjcgggdgdca(I):
  # Find the smallest object
  smallest_object = argmin(objects(I, T, F, T), size)
  target_color = color(smallest_object)
  
  # Create the output grid initialized with the background color
  O = paint(canvas(mostcolor(I), shape(I)), smallest_object)
  
  # Iterate over each cell of the smallest object
  for i, j in toindices(smallest_object):
    # Horizontal expansion: Stop at any other object or grid border
    for dj in range(1, width(I)):
      if index(O, (i, j + dj)) == mostcolor(I):
        O = fill(O, target_color, {(i, j + dj)})
      else:
        break
    for dj in range(-1, -width(I), -1):
      if index(O, (i, j + dj)) == mostcolor(I):
        O = fill(O, target_color, {(i, j + dj)})
      else:
        break
    
    # Vertical expansion: Stop at any other object or grid border
    for di in range(1, height(I)):
      if index(O, (i + di, j)) == mostcolor(I):
        O = fill(O, target_color, {(i + di, j)})
      else:
        break
    for di in range(-1, -height(I), -1):
      if index(O, (i + di, j)) == mostcolor(I):
        O = fill(O, target_color, {(i + di, j)})
      else:
        break
        
  return O
 
0.08666666666666667, 17.429247, def aadhcjgdgbfdecdcifbdaddaefacafgb(I):
    objs = objects(I, False, False, True)
    one_objs = colorfilter(objs, 1)
    min_obj = argmin(one_objs, size)
    filled_grid = I
    for obj in one_objs:
        if obj != min_obj and (hmatching(obj, min_obj) or vmatching(obj, min_obj)):
            ul = (min(uppermost(obj), uppermost(min_obj)), min(leftmost(obj), leftmost(min_obj)))
            lr = (max(lowermost(obj), lowermost(min_obj)), max(rightmost(obj), rightmost(min_obj)))
            filled_grid = fill(filled_grid, 1, product(interval(ul[0], lr[0]+1, 1), interval(ul[1], lr[1]+1, 1)))
    return filled_grid
 
0.3233333333333333, 25.875238, def aegeccceajeaejbfbhdbacdbbeaghbcf(I):
  return paint(I, merge(apply(lambda x: recolor(color(x), connect(ulcorner(x), (ulcorner(x)[0], width(I) - 1))), objects(I, True, False, False))))
 
0.37333333333333335, 32.18018, def bccijbecfdajeggeiiabfadfdfcdbefj(I):
  for j in range(width(I) - 1):
    for i in range(height(I)):
      if I[i][j] != mostcolor(I) and I[i][j + 1] == mostcolor(I):
        I = fill(I, I[i][j], frozenset({(i, k) for k in range(j + 1, width(I)) if I[i][k] == mostcolor(I)}))
  return I
 
0.30666666666666664, 17.761215, def aieicdecibbbecaeaeafefcbbjhcbjhf(I):
  for i in range(height(I)):
    current_color = None
    for j in range(width(I)):
      if I[i][j] != mostcolor(I) and current_color is None:
        current_color = I[i][j]
      elif current_color is not None and I[i][j] == mostcolor(I):
        I = fill(I, current_color, frozenset({(i, j)}))
      else:
        current_color = None
  return I
 
0.07333333333333333, 18.04598, def cffdaeaeabahebhcahabcjcffjiajdab(I):
  objs = objects(I, T, F, T)
  for obj in objs:
    for direction in [(0, 1), (0, -1)]:  # Check both right and left directions
      extension = shoot(centerofmass(obj), direction)
      for cell in extension:
        if index(I, cell) != mostcolor(I) and index(I, cell) != color(obj):
          # Stop if encountering another object of a different color
          break
        I = paint(I, recolor(color(obj), initset(cell)))
  return I
 
0.33, 27.71295, def gifbdfjicfadecdebdgbdhbebafeaiba(I):
  for x in range(width(I)): # Iterate over each column
    I = ddhacefecbaiedfijedcdhgaibacaahf_modified(I, x) # Apply modified Program_A for each column
  return I
 
0.07, 19.28101, def egbdcgbhhbdfefijbigdjddbddcccehd(I):
  objs = objects(I, T, F, T)
  bg = mostcolor(I)
  for obj in objs:
    leftmost_cell = argmin(obj, lambda cell: cell[1][1]) # Find leftmost cell of the object
    rightmost_cell = argmax(obj, lambda cell: cell[1][1]) # Find rightmost cell of the object
    for direction in [LEFT, RIGHT]: # Check both directions
      extension = shoot(centerofmass(obj), direction)
      for cell in extension:
        if index(I, cell) == bg and (direction == LEFT and cell[1] < leftmost_cell[1][1] or direction == RIGHT and cell[1] > rightmost_cell[1][1]):
          # Extend only outside the object's current horizontal boundaries
          I = paint(I, recolor(color(obj), initset(cell)))
        else:
          break # Stop upon hitting another object or exceeding boundaries
  return I
 
0.6233333333333334, 43.350517, def fcjbfdbacefgeddbiadfdbgfgabebgge(I):
    O = canvas(mostcolor(I), shape(I))
    for i, row in enumerate(I):
        for j, value in enumerate(row):
            if value != mostcolor(I):
                O = fill(O, value, hfrontier((i, j)))
    return O
 
0.30666666666666664, 16.624863, def cebgbfciechaeciiigbbgafcidheiagb(I):
    objs = partition(I)
    O = canvas(mostcolor(I), shape(I))
    for obj in objs:
      if len(obj) > 0:
        i = uppermost(obj)
        O = fill(O, color(obj), {(i, j) for j in range(width(I))})
    return O
 
0.4766666666666666, 32.373055, def cgfigeadcbhbedjdidegebcfgcabdaca(I):
  O = canvas(mostcolor(I), shape(I))
  for j in range(width(I)):
    current_color = None
    for i in range(height(I)):
      if I[i][j] != mostcolor(I):
        current_color = I[i][j]
        break
    if current_color is not None:
      O = fill(O, current_color, {(i, j) for i in range(height(I))})
  return O
 
0.20333333333333334, 31.564554, def fbceedfbdbaeeefgijdcgcdbbbiafhbj(I):
  # Find the smallest object
  smallest_object = argmin(objects(I, T, F, T), size)
  target_color = color(smallest_object)

  # Create output grid initialized with background color
  O = paint(canvas(mostcolor(I), shape(I)), smallest_object)

  # Iterate over each cell of the smallest object
  for i, j in toindices(smallest_object):
    # Horizontal expansion
    for dj in range(1, width(I)):
      if index(O, (i, j + dj)) == mostcolor(I) and (i, j + dj) in backdrop(merge(objects(I, T, F, T))):
        O = fill(O, target_color, {(i, j + dj)})
      else:
        break

    # Vertical expansion
    for di in range(1, height(I)):
      if index(O, (i + di, j)) == mostcolor(I) and (i + di, j) in backdrop(merge(objects(I, T, F, T))):
        O = fill(O, target_color, {(i + di, j)})
      else:
        break
  return O
 
0.27999999999999997, 14.882966, def bcdcbagdbhegeedaajebdcaedbhjciba(I):
  # Find the smallest object
  smallest_obj = argmin(objects(I, T, F, T), size)
  target_color = color(smallest_obj)

  # Create the output grid initially as a copy of the input grid
  O = paint(canvas(mostcolor(I), shape(I)), smallest_obj)

  # Define a lambda function to check if a cell is expandable
  is_expandable = lambda x: index(O, x) == mostcolor(I) and x in backdrop(merge(objects(I, T, F, T)))

  # Iterate over each cell in the smallest object
  for i, j in toindices(smallest_obj):
    # Horizontal expansion
    O = fill(O, target_color, sfilter(hfrontier((i, j)), is_expandable))

    # Vertical expansion
    O = fill(O, target_color, sfilter(vfrontier((i, j)), is_expandable))

  return O
 
0.5499999999999999, 29.437576, def jhfebhbfgdagegfgjeaifdhbgbdjaabf(I):
  target_color = 1
  target_objs = colorfilter(objects(I, False, False, True), target_color)
  if len(target_objs) == 0:
    return I
  bounding_box = backdrop(merge(target_objs))
  return fill(I, target_color, bounding_box) 
 
0.09999999999999999, 14.791565, def debgfdbadfgdebiajefefbddfcechefh(I):
  target_color = 1
  target_objs = colorfilter(objects(I, False, False, True), target_color)
  if len(target_objs) == 0:
    return I
  center_point = centerofmass(merge(target_objs))
  O = fill(I, target_color, {center_point})
  for distance in range(1, max(height(I), width(I))):
    for di in range(-distance, distance + 1):
      for dj in range(-distance, distance + 1):
        if abs(di) + abs(dj) == distance and index(O, add(center_point, (di, dj))) == target_color:
          O = fill(O, target_color, connect(center_point, add(center_point, (di, dj))))
  return O
 
0.33666666666666667, 22.497887, def deedidgcehfaecabidjjdgdeaccfbjec(I):
  objs = objects(I, T, T, T)
  for obj in objs:
    c = color(obj)
    rightmost_cell = argmax(toindices(obj), lambda x: x[1])
    right_frontier = shoot(rightmost_cell, RIGHT)
    filling_indices = difference(right_frontier, toindices(obj))
    I = fill(I, c, filling_indices)
  return I
 
0.27999999999999997, 24.456177, def ehdaaegidjbhejaeiecggibiaeafdijd(I):
  for j in range(len(I[0])):
    for i in range(len(I)-1):
      if I[i][j] != 0 and I[i+1][j] == 0:
        I = fill(I, I[i][j], {(k, j) for k in range(i+1, len(I)) if I[k][j] == 0})
  return I
 
0.26333333333333336, 27.852242, def caaechehfadfeeabiadgfbahfbecehef(I):
  return hmirror(vmirror(hconcat(lefthalf(I),hmirror(lefthalf(I))))) 
 
0.09000000000000001, 25.372293, def ddfgdhahagdbeaahjhfdgcfahcgahdha(grid):
  processed = canvas(mostcommon(grid), shape(grid)) # Create empty canvas
  for obj in order(objects(grid, T, F, F), lambda o: -leftmost(o)): # Iterate over objects from right to left
    extended_obj = obj
    for j in range(leftmost(obj), width(grid)): # Extend each object to the right
      extended_obj = extended_obj | recolor(color(obj), {(uppermost(obj), j)})
    processed = paint(processed, extended_obj)
  return processed
 
0.08666666666666667, 23.789946, def jeabdgecdddfeibgbafeaccdiddchgae(grid):
  for i in range(height(grid)):  # Iterate over each row
    current_color = None  # Keep track of the current object color
    for j in range(width(grid) - 1):  # Iterate over each column except the last
      if index(grid, (i, j)) != mostcommon(grid):  # Check if the cell belongs to an object
        current_color = index(grid, (i, j))  # Update the current object color
      elif current_color is not None:  # If currently within an object's extension
        grid = paint(grid, recolor(current_color, {(i, j)}))  # Extend the object
    if current_color is not None:  # Extend to the last column if needed
      grid = paint(grid, recolor(current_color, {(i, width(grid) - 1)}))
  return grid
 
0.22333333333333336, 37.90099, def acdffajcfbigecfjjdhfffbicaefidbh(grid):
  return paint(canvas(mostcommon(grid), shape(grid)), # Create empty canvas
              merge(
                  [
                      recolor(color(obj), backdrop(shift(obj, (0, x))))
                      for obj in objects(grid, T, F, F)
                      for x in range(width(grid))
                  ]
              ))
 
0.15333333333333332, 52.795918, def eefeibhfgdbdeieabidfbagbigifgagf(I):
  O = canvas(mostcolor(I), shape(I))  # Create a canvas filled with the background color.
  for obj in objects(I, T, F, F):
    for x, y in toindices(obj):
      O = fill(O, color(obj), connect((x, y), (lowermost(obj), y)))  # Draw a vertical line downwards from each cell in the object until its lowermost point.
  return O
 
0.31333333333333335, 22.015718, def gbgdfgciacafeabjiedchhbfffceaadc(I):
  h = height(I)
  w = width(I)
  O = canvas(mostcolor(I), (h, w))
  for j in range(w):  # Iterate through each column.
    for i in range(h):  # Iterate through each row from top to bottom.
      if index(I, (i, j)) != mostcolor(I):  # If the cell is not the background color.
        O = fill(O, index(I, (i, j)), {(k, j) for k in range(i, h)})  # Fill downwards from the current cell to the bottom of the grid.
        break  # Move to the next column.
  return O
 
0.44, 27.670702, def dcedadaafaffebbajcbfbcjacchiijae(I):
  O = I
  for obj in objects(I, T, F, T):
    if size(obj) == size(argmin(objects(I, T, F, T), size)):
      for cell in toindices(obj):
        O = paint(O, recolor(color(obj), shoot(cell, RIGHT) & backdrop(merge(objects(I, T, F, T))) - toindices(obj)))
        O = paint(O, recolor(color(obj), shoot(cell, DOWN) & backdrop(merge(objects(I, T, F, T))) - toindices(obj)))
  return O
 
0.2866666666666667, 17.83768, def ffhdfbeffabeeaiajdigddicfgbhdegf(I):
  O = I
  smallest = argmin(objects(I, T, F, T), size)
  c = color(smallest)
  for i in range(height(I)):
    for j in range(width(I)):
      if index(I, (i, j)) == c:
        k = j + 1
        while k < width(I) and index(I, (i, k)) == mostcolor(I):
          O = fill(O, c, {(i, k)})
          k += 1
        k = i + 1
        while k < height(I) and index(I, (k, j)) == mostcolor(I):
          O = fill(O, c, {(k, j)})
          k += 1
  return O
 
0.52, 41.60537, def fedeehcefbfbehaajbaiebaecdffjghh(grid):
  for obj in objects(grid, T, F, T):
    right_edge = rightmost(obj)
    left_edge = leftmost(obj)
    for j in range(right_edge + 1, width(grid)):
      if index(grid, (centerofmass(obj)[0], j)) == mostcolor(grid):
        grid = paint(grid, recolor(color(obj), initset((centerofmass(obj)[0], j))))
      else:
        break
    for j in range(left_edge - 1, -1, -1):
      if index(grid, (centerofmass(obj)[0], j)) == mostcolor(grid):
        grid = paint(grid, recolor(color(obj), initset((centerofmass(obj)[0], j))))
      else:
        break
  return grid
 
0.37333333333333335, 32.32506, def ddbededadiibebjiiggfdfeeeedjfbid(grid):
  for i in range(height(grid)):
    for j in range(width(grid)):
      if index(grid, (i, j)) != mostcolor(grid): # Find a non-background cell
        current_color = index(grid, (i, j))
        for k in range(j + 1, width(grid)):
          if index(grid, (i, k)) == mostcolor(grid):
            grid = paint(grid, recolor(current_color, initset((i, k)))) # Extend color to the right
          else:
            break # Stop at a different color
  return grid
 
0.14, 13.046951, def dbdfjiihgibeececjfcaaaacbihfcbfa(grid):
  objs = objects(grid, T, F, T)
  for obj in objs:
    extension_line = connect((leftmost(obj), centerofmass(obj)[0]), (rightmost(obj) + width(grid), centerofmass(obj)[0]))
    for cell in extension_line:
      if index(grid, cell) == mostcolor(grid):
        grid = paint(grid, recolor(color(obj), initset(cell)))
      else:
        break
  return grid
 
0.3133333333333333, 33.854855, def cddajfdbbdfcedcjiaficaefajcjfffi(I):
  O = canvas(mostcolor(I), shape(I))  # Create an empty canvas.
  for j in range(width(I)):  # Iterate through each column.
    bottom_pixel = next((i for i in range(height(I) - 1, -1, -1) if I[i][j] != mostcolor(I)), None) # Find the lowest non-background pixel in the column.
    if bottom_pixel is not None:
      O = fill(O, I[bottom_pixel][j], {(i, j) for i in range(bottom_pixel + 1)}) # Draw a vertical line upwards from the bottom pixel.
  return O
 
0.19999999999999998, 34.515182, def daccbfeccbfaecabjhhabgfabbfaejec(I):
  # Find smallest object and its color
  min_obj = argmin(objects(I, T, F, T), size)
  target_color = color(min_obj)

  # Initialize output with smallest object
  O = paint(canvas(mostcolor(I), shape(I)), min_obj)

  # Function to check if expansion is allowed at a location
  is_expandable = lambda x: index(O, x) == mostcolor(I) and any(adjacent({x}, toindices(obj)) for obj in objects(I, T, F, T) if color(obj) == target_color)

  # Expand the object
  for _ in range(max(height(I), width(I))):
    for i, j in toindices(min_obj):
      O = fill(O, target_color, sfilter(neighbors((i, j)), is_expandable))

  return O
 
0.2933333333333333, 15.904809, def ecdhcgeegeabecifbfacbffhhabfdiae(I):
  # Find the smallest object and its color
  min_obj = argmin(objects(I, T, F, T), size)
  target_color = color(min_obj)
  
  # Function to check if a location is expandable
  is_expandable = lambda x: index(I, x) == mostcolor(I) and manhattan({x}, toindices(min_obj)) <= max(height(I), width(I))

  # Expand the object in all directions
  expanded_obj = toindices(min_obj)
  for loc in toindices(min_obj):
    expanded_obj = expanded_obj | sfilter(shoot(loc, (1, 0)), is_expandable)
    expanded_obj = expanded_obj | sfilter(shoot(loc, (-1, 0)), is_expandable)
    expanded_obj = expanded_obj | sfilter(shoot(loc, (0, 1)), is_expandable)
    expanded_obj = expanded_obj | sfilter(shoot(loc, (0, -1)), is_expandable)

  # Create the output grid
  O = paint(canvas(mostcolor(I), shape(I)), {(target_color, loc) for loc in expanded_obj})
  return O
 
0.9566666666666667, 24.640089, def jecgiibgaccjedeabhabegeaafjejbbb(I):
  min_obj = argmin(objects(I, T, F, T), size)
  target_color = color(min_obj)
  O = paint(canvas(mostcolor(I), shape(I)), min_obj)

  for _ in range(max(height(I), width(I))):
    for i, j in asindices(I):
      if index(O, (i, j)) == target_color:
        for (ni, nj) in neighbors((i, j)):
          if index(I, (ni, nj)) == mostcolor(I) and index(O, (ni, nj)) == mostcolor(I):
            O = paint(O, {(target_color, (ni, nj))})
  return O
 
0.20333333333333334, 54.351795, def aiaadaabdjhgeachadjacbjeedcgdffa(I):
  return tuple(
      tuple(
          next((v for v in row[:j+1] if v != mostcommon(I)), mostcommon(I)) 
          for j in range(len(row))
      ) for row in I
  )
 
0.3666666666666667, 31.58431, def bcfiehbfbgjbebdbbbhcjecijifbcdih(I):
  objs = objects(I, T, T, T)  # Extract all objects from the grid.
  target_color = mostcommon([color(obj) for obj in objs if size(obj) == 1])  # Find the most common color among single-cell objects.
  for obj in objs:
    if color(obj) == target_color:
      for other_obj in objs:
        if color(other_obj) == target_color and obj != other_obj:
          direction = gravitate(obj, other_obj) # Determine direction towards another object of the same color.
          connection = shoot(center(obj), direction) # Draw a line from the center in the determined direction.
          I = fill(I, target_color, intersection(connection, asindices(I))) # Fill the line on the grid.
  return I
 
0.30666666666666664, 17.761215, def faiegbcgeebbehfejbcfbffhegedbedj(grid):
  for i in range(height(grid)):
    current_color = None # Track the current color being extended
    for j in range(width(grid)):
      if index(grid, (i, j)) != mostcolor(grid) and current_color is None:
        current_color = index(grid, (i, j)) # Update current_color
      elif current_color is not None and index(grid, (i, j)) == mostcolor(grid):
        grid = paint(grid, recolor(current_color, initset((i, j)))) # Extend color
      else:
        current_color = None # Reset current_color
  return grid
 
0.37333333333333335, 32.865406, def hbbdibeadjdjeegaigcjddegjgccdbhj(grid):
  return paint(grid, merge([
    recolor(color(obj), frozenset((i,k) for k in range(leftmost(obj), width(grid)) 
                                    if index(grid, (i,k)) == mostcolor(grid)))
    for obj in objects(grid, True, False, True)
    for i in range(uppermost(obj), lowermost(obj) + 1)
  ]))
 
0.09000000000000001, 34.96401, def eccdbehdadcieehgicebdhfefefejdcd(I):
  O = canvas(mostcolor(I), shape(I))  # Create an empty canvas.
  for obj in objects(I, T, F, F):
    if obj:
      min_y = leftmost(obj)  # Find the leftmost column
      max_i = lowermost(obj) # Find the lowermost row
      for i in range(uppermost(obj), max_i + 1): # Iterate from uppermost to lowermost row
        O = fill(O, color(obj), {(i, min_y)}) # Draw a vertical line in the leftmost column
  return O
 
0.3033333333333333, 21.32775, def fdeccehaafeeedejacdbecfdcbeddddi(I):
  O = canvas(mostcolor(I), shape(I))
  for obj in objects(I, T, F, F):
    if obj:
      min_y = leftmost(obj)
      max_i = lowermost(obj)
      O = paint(O, {(color(obj), (i, min_y)) for i in range(max_i + 1)})
  return O
 
0.08666666666666667, 34.327515, def ibcgbdfifafeebefjibbbcfagdbddhfj(I):
  O = canvas(mostcolor(I), shape(I))
  for obj in objects(I, T, F, F):
    if obj:
      leftmost_points = sorted((i, j) for i, j in toindices(obj) if j == leftmost(obj))
      for i, j in leftmost_points:
        O = fill(O, color(obj), {(k, j) for k in range(i, lowermost(obj) + 1)})
  return O
 
0.38999999999999996, 31.813457, def ebceaededaejehbiiebaadaafdjbaadc(grid):
    objs = objects(grid, F, F, T)
    for obj in objs:
        start_j = rightmost(obj) + 1
        for j in range(start_j, width(grid)):
            grid = fill(grid, color(obj), {(i, j) for i in range(uppermost(obj), lowermost(obj) + 1)})
    return grid
 
0.36000000000000004, 31.15835, def iifbedagaacgehefafdcfhdfebidfcea(I):
  objs = objects(I, T, T, T)
  for obj in objs:
    c = color(obj)
    closest_obj = argmin([o for o in objs if color(o) != c], lambda x: manhattan(obj, x))
    direction = gravitate(obj, closest_obj)
    connection = shoot(center(obj), direction)
    I = fill(I, c, intersection(connection, asindices(I)))
  return I
 
0.07333333333333333, 21.99548, def ddddafiheaaiedbcihjadeaddccafdff(grid):
  for i in range(height(grid)):
    for j in range(width(grid)):
      if index(grid, (i, j)) != mostcolor(grid):
        # Find a non-background cell
        obj = first(sfilter(objects(grid, T, F, T), lambda obj: (i, j) in toindices(obj)))
        # Get the object containing this cell
        color = next(iter(obj))[0]
        # Get the object's color
        for di, dj in ((-2, 0), (2, 0), (0, -2), (0, 2), (-2, -2), (-2, 2), (2, -2), (2, 2)):
          # Check for potential connections in all eight directions
          ni, nj = i + di, j + dj
          if 0 <= ni < height(grid) and 0 <= nj < width(grid) and index(grid, (ni, nj)) == color:
            # If a cell two steps away has the same color, connect them
            grid = paint(grid, recolor(color, connect((i, j), (ni, nj))))
  return grid
 
0.16, 53.69298, def bfahcjfaehfiefbaabfefaddffhjdcia(I):
  O = canvas(mostcolor(I), shape(I))
  for obj in objects(I, T, F, F):
    if not hline(obj):
      O = paint(O, recolor(color(obj), backdrop(obj)))
    else:
      O = paint(O, obj)
  return O
 
0.17666666666666667, 60.697186, def efhiffdcbadeefafafaaeacchfcdcjda(I):
  O = I
  for obj in objects(I, T, F, F):
    if not hline(obj):
      start_j, end_j = leftmost(obj), rightmost(obj)
      for j in range(start_j, end_j + 1):
        O = fill(O, color(obj), {(i, j) for i in range(uppermost(obj), lowermost(obj) + 1)})
  return O
 
0.07666666666666667, 22.469046, def acieciebdebhedceajfchibfegaeffib(I):
    O = canvas(mostcolor(I), shape(I))
    for obj in objects(I, T, F, T):
      for other_obj in objects(I, T, F, T) - {obj}:
        if color(obj) == color(other_obj) and hmatching(obj, other_obj):
          start = (uppermost(obj), leftmost(obj) if leftmost(obj) < leftmost(other_obj) else leftmost(other_obj))
          end = (uppermost(obj), rightmost(obj) if rightmost(obj) > rightmost(other_obj) else rightmost(other_obj))
          O = paint(O, recolor(color(obj), connect(start, end)))
      O = paint(O, obj)
    return O
 
0.09333333333333334, 21.337038, def hhicidccihjjeieajdcahjdcafbeccff(I):
    O = I
    for i in range(height(I)):
        row = I[i]
        for j in range(1, width(I)):
            if row[j] == 0 and row[j-1] != 0:
                k = j
                while k < width(I) and row[k] == 0:
                    k += 1
                if k < width(I) and row[k] == row[j-1]:
                    O = fill(O, row[j-1], hfrontier((i, j)))
    return O
 
0.14, 36.66964, def ebbddhfgeagbeabaigbfdcccfcjichce(I):
  O = canvas(mostcolor(I), shape(I))
  for y in range(height(I)):
    current_color = None
    start_x = None
    for x in range(width(I)):
      if I[y][x] != mostcolor(I):
        if current_color == I[y][x]:
          O = fill(O, current_color, connect((y, start_x), (y, x)))
        else:
          current_color = I[y][x]
          start_x = x
  return O
 
0.4833333333333334, 21.34624, def baddabaaehfcedifjadhedffacedefga(I):
  O = canvas(mostcolor(I), shape(I))
  for i, row in enumerate(I):
    for j, value in enumerate(row):
      if value != mostcolor(I):
        O = paint(O, {(value, (i, k)) for k in range(j, width(I)) if I[i][k] == mostcolor(I)})
  return O
 
0.31666666666666665, 23.35668, def gbfbigefbjedecefaacdecabgcdbcfad(I):
  objs = objects(I, T, T, T)
  single_cell_objs = sizefilter(objs, 1)
  for single_cell_obj in single_cell_objs:
    target_color = color(single_cell_obj)
    other_objs = [obj for obj in objs if color(obj) != target_color]
    closest_obj = argmin(other_objs, lambda x: manhattan(single_cell_obj, x))
    direction = gravitate(single_cell_obj, closest_obj)
    connection = shoot(center(single_cell_obj), direction)
    I = fill(I, target_color, intersection(connection, asindices(I)))
  return I
 
0.31666666666666665, 23.522655, def effedabafabdedacjdibaeebdgbcichf(I):
  objs = objects(I, T, T, T)
  for obj1 in objs:
    if size(obj1) == 1:
      for obj2 in objs:
        if color(obj1) != color(obj2) and manhattan(obj1, obj2) == min([manhattan(obj1, o) for o in objs if color(o) != color(obj1)]):
          direction = gravitate(obj1, obj2)
          connection = shoot(center(obj1), direction)
          I = fill(I, color(obj1), intersection(connection, asindices(I)))
          break
  return I
 
0.27999999999999997, 24.737232, def afaffafdbcgfegbhabcecbdgahigicee(grid):
  h = height(grid)
  for j in range(width(grid)):
    for i in range(h):
      if index(grid, (i,j)) != mostcolor(grid):
        for k in range(i + 1, h):
          if index(grid, (k, j)) == mostcolor(grid):
            grid = paint(grid, recolor(index(grid, (i, j)), initset((k, j))))
          else:
            break
  return grid
 
0.37333333333333335, 32.32506, def gfdfiafbcbheeddgacjfaccaefadjdff(I):
  O = paint(canvas(mostcolor(I), shape(I)), merge(objects(I, T, F, T)))
  for obj in objects(I, T, F, T):
    for i, j in toindices(obj):
      current_j = j + 1
      while current_j < width(I) and index(O, (i, current_j)) == mostcolor(I):
        O = fill(O, color(obj), {(i, current_j)})
        current_j += 1
  return O
 
0.13333333333333333, 8.341943, def ciiiadgbceeeejabidbafahccfbabdfd(I):
  O = paint(canvas(mostcolor(I), shape(I)), merge(objects(I, T, F, T)))
  for obj in objects(I, T, F, T):
    right_edge = toindices(shift(obj, (0, 1)))
    for i, j in right_edge:
      if 0 <= i < height(I) and 0 <= j < width(I) and index(O, (i, j)) == mostcolor(I):
        O = fill(O, color(obj), {(i, j)})
  return O
 
0.21666666666666667, 14.327078, def deebcefajcebeefaafaahjbjffebcjaj(I):
    v = int(I[0][0])  # Extract input digit
    O = canvas(0, (10, 10))  # Initialize 10x10 canvas with '0'
    
    # Place input digit at top-left
    O = paint(O, {(v, (0, 0))})
    
    if v == 1:  
        # Vertical line with side '1's
        O = paint(O, {(1, (i, 2)) for i in range(1, 7)})
        O = paint(O, {(1, (2, 1)), (1, (2, 3)), (1, (5, 3)), (1, (6, 9))})
        # 3x2 blocks of '3's
        O = paint(O, {(3, (i, j)) for i in range(7, 9) for j in range(5, 7)})
    elif v == 6:
        # '6' pattern
        O = paint(O, {(6, (i, 8)) for i in range(1, 10)})
        O = paint(O, {(6, (i, 7)) for i in range(6, 10)})
        O = paint(O, {(6, (6, j)) for j in range(1, 8)})
    elif v == 8:
        # '8' pattern
        O = paint(O, {(8, (0, 6)), (8, (1, 6)), (8, (2, 6)), (8, (2, 7)), (8, (2, 8)), (8, (2, 9)), (8, (3, 8)), (8, (5, 1)), (8, (6, 1)), (8, (7, 1)), (8, (7, 8)), (8, (8, 1))})
        O = paint(O, {(7, (0, 1)), (7, (3, 5)), (7, (4, 5)), (7, (5, 5)), (7, (8, 0)), (7, (9, 0)), (7, (9, 9))})
        # 3x2 block of '3's
        O = paint(O, {(3, (i, j)) for i in range(2, 4) for j in range(5, 7)})
    
    return O
 
0.17666666666666667, 60.69719, def gbchdcddcafcefcejhcdeabhdecjbaed(I):
    # 1. Create canvas
    grid = canvas(0, (10, 10))
    
    # 2. Place input digit based on its value
    if I == 1:
        grid = paint(grid, {(I, (0, 0)), (I, (9, 4))})
    elif I == 8:
        grid = paint(grid, {(I, (i, i)) for i in range(10)}) # Diagonal placement
    else:
        # Add placement logic for other input digits
        pass 
    
    # 3. Add additional objects (This part needs significant improvement)
    if I == 1:
        # Logic for adding '6' shapes and '3' square
        pass
    elif I == 8:
        # Logic for adding '7' shape and '3' rectangles
        pass
    else:
        # Logic for other input digits
        pass

    return grid
 
0.18999999999999997, 11.164303, def jbijbfbgjdffeaedjjjchbgjggcgfefe(I):
    v = I[0][0]
    O = canvas(0, (10, 10))
    if v == 1:
        O = paint(O, {(1, (0, 0)), (1, (9, 4)), (6, (1, 8)), (6, (2, 8)), 
                      (6, (3, 2)), (6, (4, 2)), (6, (5, 2)), (6, (6, 2)), 
                      (6, (6, 6)), (6, (7, 2)), (6, (8, 2)), (3, (3, 3)), 
                      (3, (3, 4))})
    elif v == 8:
        O = paint(O, {(8, (0, 6)), (8, (1, 6)), (8, (2, 7)), (8, (3, 7)),
                      (8, (6, 6)), (8, (7, 8)), (7, (0, 1)), (7, (2, 3)), 
                      (7, (3, 3)), (7, (4, 3)), (7, (5, 3)), (7, (8, 9)), 
                      (7, (9, 0)), (7, (9, 9)), (3, (2, 5)), (3, (2, 6)), 
                      (3, (3, 5)), (3, (3, 6))})
    elif v == 2:
        O = paint(O, {(2, (1, 4)), (2, (2, 4)), (2, (3, 4)), (2, (4, 4)),
                      (2, (5, 4)), (2, (5, 9)), (2, (6, 6)), (2, (7, 5)), 
                      (2, (8, 4)), (2, (9, 0)), (3, (6, 4)), (3, (6, 5)), 
                      (3, (7, 4)), (3, (7, 5))})
    return O
 
0.17666666666666667, 57.150944, def adiaiceebjceedcebcfajdgeebbcejhi(I):
    v = I[0][0]
    O = canvas(0, (10, 10))
    if v == 1:
        base_obj = {(1, (0, 0))}
        O = paint(O, base_obj)
        O = paint(O, shift(base_obj, (9, 4)))
        # ... (Similar logic for painting other digits and patterns)
    # ... (Similar logic for other input digits)
    return O
 
0.21, 30.777378, def acchcacacicbefcjjaafedeihgchgejc(I):
    patterns = {
        1: {
            (0, 0), (9, 4), (1, 8), (2, 8), (3, 2), (4, 2),
            (5, 2), (6, 2), (6, 6), (7, 2), (8, 2), (3, 3),
            (3, 4),
        },
        # ... (Patterns for other digits)
    }
    v = I[0][0]
    O = canvas(0, (10, 10))
    for i, j in patterns.get(v, []):
        O = paint(O, {(v, (i, j))})
    # ... (Paint other digits based on pattern)
    return O
 
0.6933333333333334, 59.9545, def ceccbcedfeiaeabgagefbiegiaggbheb(I):
    v = I[0][0]
    O = canvas(0, (10, 10))
    for i in range(10):
        for j in range(10):
            # Mathematical logic to determine the output digit based on i, j and v
            if v == 1 and ((i == 0 and j == 0) or (i == 9 and j == 4) or ...):
                O = paint(O, {(1, (i, j))})
            # ... (Similar logic for other digits and patterns)
    return O
 
0.23666666666666666, 14.2609215, def adjccfiffcccedcjbgdbjgjaceibbbfb(I):
  v = int(I[0][0])
  O = canvas(0, (10, 10))
  
  if v == 1:
    O = paint(O, {(1, (0, 0)), (1, (9, 4))})
    O = paint(O, {(1, (3, j)) for j in range(4, 9)})
    O = fill(O, 3, {(i, j) for i in range(3, 5) for j in range(2, 4)})
    O = fill(O, 3, {(i, j) for i in range(6, 8) for j in range(2, 4)})
    O = paint(O, {(6, (i, j)) for i in range(2, 5) for j in range(5, 8)})
    O = paint(O, {(6, (i, 7)) for i in range(5, 8)}) 
  elif v == 8:
    O = paint(O, {(8, (0, 6)), (8, (2, 7)), (8, (6, 7))})
    O = paint(O, {(7, (0, 1)), (7, (3, 4)), (7, (3, 5)), (7, (8, 5)), (7, (9, 9))})
    O = fill(O, 3, {(i, j) for i in range(2, 4) for j in range(5, 8)})
  elif v == 2:
    O = paint(O, {(1, (0, 4)), (1, (2, 4)), (1, (3, 4)), (1, (4, 4)), (1, (5, 4)), (1, (5, 9)), (1, (9, 0))})
    O = fill(O, 3, {(i, j) for i in range(6, 8) for j in range(4, 6)})
    
  return O 
 
0.2333333333333333, 14.341531, def afafdbhbjajdecfhjdhdeddgbfebdegc(I):
  v = int(I[0][0])
  O = canvas(0, (10, 10))
  
  h_line = {(1, (0, j)) for j in range(5)}  
  block_3 = {(3, (0, 0)), (3, (0, 1)), (3, (1, 0)), (3, (1, 1))}
  
  if v == 1:
    O = paint(O, {(1, (0, 0)), (1, (9, 4))})
    O = paint(O, shift(h_line, (3, 4))) 
    O = paint(O, shift(block_3, (3, 2)))
    O = paint(O, shift(block_3, (6, 2)))
    O = paint(O, {(6, (i, j)) for i in range(2, 5) for j in range(5, 8)})
    O = paint(O, {(6, (i, 7)) for i in range(5, 8)}) 
  elif v == 8:
    O = paint(O, {(8, (0, 6)), (8, (2, 7)), (8, (6, 7))})
    O = paint(O, {(7, (0, 1)), (7, (3, 4)), (7, (3, 5)), (7, (8, 5)), (7, (9, 9))})
    O = paint(O, shift(block_3, (2, 5)))
    O = paint(O, shift(block_3, (3, 5)))
  elif v == 2:
    O = paint(O, {(1, (0, 4)), (1, (2, 4)), (1, (3, 4)), (1, (4, 4)), (1, (5, 4)), (1, (5, 9)), (1, (9, 0))})
    O = paint(O, shift(block_3, (6, 4)))
    O = paint(O, shift(block_3, (7, 4)))
    
  return O
 
0.22666666666666666, 11.523829, def afdhcfcadgdbeafjbaccbaaecdeejfad(I):
  v = int(I[0][0])
  O = canvas(0, (10, 10))
  
  if v == 1:
    O = fill(O, 1, {(0, 0), (9, 4)})
    O = fill(O, 1, {(3, j) for j in range(4, 9)})
    O = fill(O, 3, {(i, j) for i in range(3, 8, 3) for j in range(2, 4)})
    O = paint(O, {(6, (i, j)) for i in range(2, 5) for j in range(5, 8)})
    O = paint(O, {(6, (i, 7)) for i in range(5, 8)}) 
  elif v == 8:
    O = fill(O, 8, {(0, 6), (2, 7), (6, 7)})
    O = paint(O, {(7, (0, 1)), (7, (3, 4)), (7, (3, 5)), (7, (8, 5)), (7, (9, 9))})
    O = fill(O, 3, {(i, j) for i in range(2, 4) for j in range(5, 8)})
  elif v == 2:
    O = fill(O, 1, {(0, 4), (2, 4), (3, 4), (4, 4), (5, 4), (5, 9), (9, 0)})
    O = fill(O, 3, {(i, j) for i in range(6, 9, 2) for j in range(4, 6)})
  
  return O
 
0.26, 10.070785, def baicebbgfeagegbciijejabbcfajiibe(I):
    v = int(I[0][0])
    O = canvas(0, (10, 10))

    if v == 1:
        part1 = canvas(0, (3, 10))
        part1 = paint(part1, {(1, (0, 0))})
        part2 = canvas(0, (7, 10))
        part2 = paint(part2, {(1, (6, 4))})
        part2 = fill(part2, 1, {(2, j) for j in range(4, 9)})
        part2 = fill(part2, 3, {(i, j) for i in range(0, 4, 3) for j in range(2, 4)})
        part2 = paint(part2, {(6, (i, j)) for i in range(-1, 2) for j in range(5, 8)})
        part2 = paint(part2, {(6, (i, 7)) for i in range(2, 5)})
        O = vconcat(part1, part2)

    elif v == 8:
        part1 = canvas(0, (10, 6))
        part1 = paint(part1, {(8, (0, 5)), (8, (2, 6))})
        part2 = canvas(0, (10, 4))
        part2 = paint(part2, {(8, (6, 3))})
        part2 = fill(part2, 3, {(i, j) for i in range(2, 4) for j in range(1, 4)})
        O = hconcat(part1, part2)
        O = paint(O, {(7, (0, 1)), (7, (3, 4)), (7, (3, 5)), (7, (8, 5)), (7, (9, 9))})

    elif v == 2:
        O = fill(O, 1, {(0, 4), (2, 4), (3, 4), (4, 4), (5, 4), (5, 9), (9, 0)})
        O = fill(O, 3, {(i, j) for i in range(6, 9, 2) for j in range(4, 6)})

    return O
 
0.24, 14.151025, def jfagfcjaigdfegfejeijchdeacfedahb(I):
    v = int(I[0][0])
    O = canvas(0, (10, 10))

    if v == 1:
        base_pattern = {(1, (0, 0)), (1, (1, 0)), (1, (2, 0)), (3, (0, 1)), (3, (1, 1))}
        O = paint(O, shift(base_pattern, (3, 2)))
        O = paint(O, hmirror(shift(base_pattern, (3, 7))))
        O = paint(O, {(1, (0, 0)), (1, (9, 4))})
        O = paint(O, {(1, (3, j)) for j in range(4, 9)})
        O = paint(O, {(6, (i, j)) for i in range(2, 5) for j in range(5, 8)})
        O = paint(O, {(6, (i, 7)) for i in range(5, 8)})
    elif v == 8:
        O = paint(O, {(8, (0, 6)), (8, (2, 7)), (8, (6, 7))})
        O = paint(O, {(7, (0, 1)), (7, (3, 4)), (7, (3, 5)), (7, (8, 5)), (7, (9, 9))})
        O = fill(O, 3, {(i, j) for i in range(2, 4) for j in range(5, 8)})
    elif v == 2:
        O = fill(O, 1, {(0, 4), (2, 4), (3, 4), (4, 4), (5, 4), (5, 9), (9, 0)})
        O = fill(O, 3, {(i, j) for i in range(6, 9, 2) for j in range(4, 6)})

    return O
 
0.22666666666666666, 16.862375, def bchedbaeddfheddbjjadiachcccfdbeg(I):
  v = I[0][0]
  O = canvas(0, (10, 10))
  
  if v == 1:
    O = paint(O, {(1, (0, 0)), (1, (9, 4))}) # Anchor '1's
    for i in range(1, 9): # Diagonal '6's
      O = paint(O, {(6, (i, i - 1))})
    O = paint(O, {(3, (3, 2)), (3, (3, 3))}) # Horizontal '3's
  elif v == 8:
    for i in range(2, 8): # Diagonal '8's
      O = paint(O, {(8, (i, i + 1))})
    O = paint(O, {(3, (2, 4)), (3, (2, 5)), (3, (3, 6)), (3, (3, 7))}) # Top '3's
    O = paint(O, {(3, (4, 6)), (3, (4, 7)), (3, (5, 8)), (3, (5, 9))}) # Bottom '3's
    O = paint(O, {(7, (0, 1)), (7, (3, 3)), (7, (8, 0)), (7, (9, 9))}) # Scattered '7's
  else: # Assuming any other input digit will follow the pattern for '1' from Input_2
    for i in range(10): # Vertical '1's
      O = paint(O, {(1, (i, 2))})
    for i in range(1, 9): # Diagonal '1's
      O = paint(O, {(1, (i, i + 1))})
    O = paint(O, {(3, (6, 4)), (3, (7, 5))}) # Horizontal '3's

  return O
 
0.21333333333333337, 20.849566, def ijcfeeegecfieedhiggibddhfdajffeh(I):
  v = I[0][0]
  O = canvas(0, (10, 10))

  if v == 1:
    base_obj = {(1, (0, 0))}
    O = paint(O, base_obj)
    O = paint(O, shift(base_obj, (9, 4)))
    diag_obj = {(6, (1, 0))}
    for i in range(2, 9):
      O = paint(O, shift(diag_obj, (i - 1, i - 1)))
    O = paint(O, {(3, (3, 2)), (3, (3, 3))}) 
  elif v == 8:
    base_obj = {(8, (2, 3))}
    for i in range(6):
      O = paint(O, shift(base_obj, (i, i)))
    three_obj = {(3, (2, 4)), (3, (2, 5))}
    for i in range(2):
      O = paint(O, shift(three_obj, (i * 2, i * 2)))
    O = paint(O, {(7, (0, 1)), (7, (3, 3)), (7, (8, 0)), (7, (9, 9))}) 
  else:
    base_obj = {(1, (0, 2))}
    for i in range(10):
      O = paint(O, shift(base_obj, (i, 0)))
    diag_obj = {(1, (1, 2))}
    for i in range(2, 9):
      O = paint(O, shift(diag_obj, (i - 1, i - 1)))
    O = paint(O, {(3, (6, 4)), (3, (7, 5))})

  return O
 
0.22, 19.548225, def ffacabacgajjeciabbaaicadiebbicad(I):
  v = I[0][0]
  O = canvas(0, (10, 10))

  if v == 1:
    O = paint(O, {(1, (0, 0)), (1, (9, 4))}) 
    diag_obj = {(6, (1, 0))}
    for i in range(8):
      O = paint(O, shift(diag_obj, (i, i)))
    O = paint(O, {(3, (3, 2)), (3, (3, 3))})
  elif v == 8:
    O = paint(O, {(8, (i, i + 1)) for i in range(2, 8)}) 
    three_obj = {(3, (2, 4)), (3, (2, 5))}
    for i in range(2):
      O = paint(O, shift(three_obj, (i * 2, i * 2)))
    O = paint(O, {(7, (0, 1)), (7, (3, 3)), (7, (8, 0)), (7, (9, 9))}) 
  else:
    O = paint(O, {(1, (i, 2)) for i in range(10)}) 
    diag_obj = {(1, (1, 2))}
    for i in range(8):
      O = paint(O, shift(diag_obj, (i, i)))
    O = paint(O, {(3, (6, 4)), (3, (7, 5))}) 

  return O
 
0.22666666666666666, 18.992188, def bbaggjddfaccefaebbefijbfefccdbbh(I):
  v = I[0][0]
  O = canvas(0, (10, 10))

  pattern_map = {
      1: {
          (1, (0, 0)), (1, (9, 4)),
          (6, (1, 0)), (6, (2, 1)), (6, (3, 2)), (6, (4, 3)), (6, (5, 4)), (6, (6, 5)), (6, (7, 6)), (6, (8, 7)),
          (3, (3, 2)), (3, (3, 3))
      },
      8: {
          (8, (2, 3)), (8, (3, 4)), (8, (4, 5)), (8, (5, 6)), (8, (6, 7)), (8, (7, 8)),
          (3, (2, 4)), (3, (2, 5)), (3, (4, 6)), (3, (4, 7)), (3, (6, 8)), (3, (6, 9)),
          (7, (0, 1)), (7, (3, 3)), (7, (8, 0)), (7, (9, 9))
      },
      'default': {
          (1, (0, 2)), (1, (1, 2)), (1, (2, 2)), (1, (3, 2)), (1, (4, 2)), (1, (5, 2)), (1, (6, 2)), (1, (7, 2)), (1, (8, 2)), (1, (9, 2)),
          (1, (1, 3)), (1, (2, 4)), (1, (3, 5)), (1, (4, 6)), (1, (5, 7)), (1, (6, 8)), (1, (7, 9)), (1, (8, 10)),
          (3, (6, 4)), (3, (7, 5))
      }
  }

  O = paint(O, pattern_map.get(v, pattern_map['default']))
  return O
 
0.17666666666666667, 60.69719, def aahcaefefbfdehecabbccecedadahaec(I):
  def draw_pixel(grid, x, y, value):
    return paint(grid, recolor(value, {(x,y)}))

  canvas_grid = canvas(0, (10, 10))

  if I == 1:
    # Draw '1'
    for i in range(4, 9):
      canvas_grid = draw_pixel(canvas_grid, 4, i, I) 
    canvas_grid = draw_pixel(canvas_grid, 0, 0, I)
    canvas_grid = draw_pixel(canvas_grid, 9, 4, I) 

    # Add decorative elements
    for i in range(2, 9, 3):
      for j in range(8):
        canvas_grid = draw_pixel(canvas_grid, i + (j // 4), 2 + j, 3 if i < 5 else 6)

  elif I == 8:
    # Draw '8' logic (similar to '1', using draw_pixel)
    pass # Implement drawing logic for digit '8'

  else:
    # Draw '2' logic (similar to '1', using draw_pixel)
    pass # Implement drawing logic for digit '2'

  return canvas_grid
 
0.29000000000000004, 16.352913, def edbcbbddbahfefcebcgefafdabaagcbc(I):
  v = int(I[0][0])
  O = canvas(0, (10, 10))

  if v == 1:
    # Base pattern
    base_pattern = {(1, (0, 0)), (1, (1, 0)), (1, (2, 0)), (3, (0, 1)), (3, (1, 1))}
    O = paint(O, shift(base_pattern, (3, 2)))
    O = paint(O, hmirror(shift(base_pattern, (3, 2))))

    # Connecting lines and rectangle
    O = paint(O, {(1, (0, 0)), (1, (9, 4))})
    O = paint(O, {(1, (i, 4)) for i in range(1, 10)})
    O = paint(O, {(6, (i, j)) for i in range(2, 8) for j in range(5, 8)})
    O = paint(O, {(6, (i, 7)) for i in range(7, 9)})
    
  elif v == 8:
    # Diagonal 8's and outlining 7's
    O = paint(O, {(8, (i, i + 6)) for i in range(4)})
    O = paint(O, {(7, (i - 1, i + 5)) for i in range(4)})
    O = paint(O, {(7, (i + 1, i + 5)) for i in range(3)})
    O = paint(O, {(7, (0, 1)), (7, (3, 4)), (7, (8, 5)), (7, (9, 9))})
    
    # Central 3's
    O = fill(O, 3, {(i, j) for i in range(2, 4) for j in range(5, 8)})
  
  elif v == 2:
    # Vertical and diagonal 1's
    O = paint(O, {(1, (i, 4)) for i in range(10)})
    O = paint(O, {(1, (i, i)) for i in range(10)})
    
    # Squares of 3's
    O = fill(O, 3, {(i, j) for i in range(6, 8) for j in range(4, 6)})
    O = fill(O, 3, {(i, j) for i in range(7, 9) for j in range(5, 7)})

  return O
 
0.25666666666666665, 14.051058, def ehceaehhedcheigfiaaeedjafaajfgfh(I):
  v = int(I[0][0])
  O = canvas(0, (10, 10))

  if v == 1:
    # Mirrored pattern using shifts
    pattern = {(1, (0, 0)), (1, (1, 0)), (1, (2, 0)), (3, (0, 1)), (3, (1, 1))}
    O = paint(O, shift(pattern, (3, 2)))
    O = paint(O, shift(hmirror(pattern), (3, 7)))

    # Connections and rectangle
    O = paint(O, connect((0, 0), (9, 4)))
    O = paint(O, {(6, (i, j)) for i in range(2, 5) for j in range(5, 8)})
    O = paint(O, {(6, (i, 7)) for i in range(5, 8)})

  elif v == 8:
    # Diagonal 8's and shifted 7's
    O = paint(O, {(8, (i, i + 6)) for i in range(4)})
    O = paint(O, shift({(7, (0, 1)), (7, (3, 4)), (7, (3, 5)), (7, (8, 5)), (7, (9, 9))}, (0, 6)))

    # Central 3's
    O = fill(O, 3, {(i, j) for i in range(2, 4) for j in range(5, 8)})

  elif v == 2:
    # Lines and squares using connect and fill
    O = paint(O, connect((0, 4), (9, 4)))
    O = paint(O, connect((0, 0), (9, 9)))
    O = fill(O, 3, {(i, j) for i in range(6, 8) for j in range(4, 6)})
    O = fill(O, 3, shift({(3, (0, 0)), (3, (1, 1))}, (6, 4))) 

  return O
 
0.27666666666666667, 16.043816, def adfccaccdfebegbdjceffihfigbccbca(I):
  v = int(I[0][0])
  O = canvas(0, (10, 10))

  if v == 1:
    # Base pattern and mirroring
    base = {(1, (0, 0)), (1, (1, 0)), (1, (2, 0)), (3, (0, 1)), (3, (1, 1))}
    O = paint(O, shift(base, (3, 2)))
    O = paint(O, hmirror(shift(base, (3, 2))))

    # Vertical line and rectangle
    O = paint(O, {(1, (i, 4)) for i in range(10)}) 
    O = fill(O, 6, {(i, j) for i in range(2, 9) for j in range(5, 8) if  i >= 5 or j == 5})

  elif v == 8:
    # Diagonal lines with different colors
    O = paint(O, {(8, (i, i + 6)) for i in range(4)})
    O = paint(O, {(7, (i - 1, i + 5)) for i in range(4)})
    O = paint(O, {(7, (i + 1, i + 5)) for i in range(3)})
    O = paint(O, {(7, (0, 1)), (7, (3, 4)), (7, (8, 5)), (7, (9, 9))})

    # Central 3's
    O = fill(O, 3, {(i, j) for i in range(2, 4) for j in range(5, 8)})

  elif v == 2:
    # Diagonal and vertical lines
    O = paint(O, {(1, (i, i)) for i in range(10)})
    O = paint(O, {(1, (i, 4)) for i in range(10)})

    # Squares of 3's using offsets
    square = {(3, (0, 0)), (3, (0, 1)), (3, (1, 0)), (3, (1, 1))}
    O = paint(O, shift(square, (6, 4)))
    O = paint(O, shift(square, (7, 5))) 

  return O
 
0.3033333333333334, 11.824003, def ejccidaacjaaecefahcjegdbafahafjf(I):
  v = int(I[0][0])
  O = canvas(0, (10, 10))

  if v == 1:
    # Combining shapes with set operations
    base = {(1, (i, 0)) for i in range(3)} | {(3, (i, 1)) for i in range(2)}
    O = paint(O, shift(base | hmirror(base), (3, 2)))

    # Connecting line and rectangle
    O = paint(O, connect((0, 0), (9, 4)))
    rect = {(6, (i, j)) for i in range(2, 9) for j in range(5, 8)}
    O = paint(O, rect - {(6, (i, 6)) for i in range(2, 5)} - {(6, (i, 7)) for i in range(8, 9)})
    
  elif v == 8:
    # Diagonal 8's and surrounding 7's
    O = paint(O, {(8, (i, i + 6)) for i in range(4)})
    O = paint(O, {(7, (i, j)) for i in range(10) for j in range(10) if abs(i - j) == 5 or abs(i - j) == 7})
    O = paint(O, {(7, (0, 1)), (7, (3, 4)), (7, (9, 9))})

    # Central 3's
    O = fill(O, 3, {(i, j) for i in range(2, 4) for j in range(5, 8)})

  elif v == 2:
    # Lines using connect
    O = paint(O, connect((0, 4), (9, 4)))
    O = paint(O, connect((0, 0), (9, 9)))

    # Squares using nested loops and offsets
    for i in range(6, 8):
      for j in range(4, 6):
        O = paint(O, {(3, (i + k, j + l)) for k in range(2) for l in range(2)})

  return O
 
0.3133333333333334, 24.237392, def chadfghebgdbecbbbeebbfcadedfjdjc(I):
  v = int(I[0][0])
  O = canvas(0, (10, 10))

  if v == 1:
    # Base shape and mirrored copy
    base = {(1, (0, 0)), (1, (1, 0)), (1, (2, 0)), (3, (0, 1)), (3, (1, 1))}
    O = paint(O, shift(base, (3, 2)))
    O = paint(O, shift(hmirror(base), (3, 7)))

    # Line and rectangle using ranges
    for i in range(10):
        O = paint(O, {(1, (i, 4))})
    for i in range(2, 9):
        for j in range(5, 8):
            if i >= 5 or j == 5:
                O = paint(O, {(6, (i, j))}) 

  elif v == 8:
    # 8's and 7's using modulo and conditions
    for i in range(10):
        for j in range(10):
            if i % 2 == 0 and j == i + 6:
                O = paint(O, {(8, (i, j))})
            elif (abs(i - j) == 5 or abs(i - j) == 7) or ((i, j) in {(0, 1), (3, 4), (9, 9)}):
                O = paint(O, {(7, (i, j))})
    
    # Central 3's
    O = fill(O, 3, {(i, j) for i in range(2, 4) for j in range(5, 8)})

  elif v == 2:
    # Lines using connect
    O = paint(O, connect((0, 4), (9, 4)))
    O = paint(O, connect((0, 0), (9, 9)))

    # Squares using shift and loop
    square = {(3, (0, 0)), (3, (1, 0)), (3, (0, 1)), (3, (1, 1))}
    for i in range(2):
        O = paint(O, shift(square, (6 + i, 4 + i)))

  return O
 
0.32666666666666666, 14.155735, def bfeggcfbddfaegbajafbjbgddcjcibfh(I):
  v = I[0][0]
  O = canvas(0, (10, 10))
  
  if v == 1:
    O = paint(O, {(1, (i, i)) for i in range(10)}) # Diagonal 1s
    O = paint(O, {(3, (8, 8)), (3, (8, 9))}) # Two 3s
    O = paint(O, {(6, (i-1, i)) for i in range(1, 9)}) # Vertical 6s
    O = paint(O, {(6, (0, 0))}) # Top left 6
  elif v == 8:
    for i in range(5):
      O = paint(O, {(8, (i*2, 9-i*2)), (8, (i*2+1, 8-i*2))}) # Diagonal 8s
      O = paint(O, {(3, (i*2, 8-i*2)), (3, (i*2+1, 9-i*2))}) # Diagonal 3s
    O = paint(O, {(7, (0, 0)), (7, (9, 9)), (7, (0, 9)), (7, (9, 0)), (7, (4, 0)), (7, (0, 4)), (7, (4, 9)), (7, (9, 4))}) # Corner and side 7s
  elif v == 2:
    O = paint(O, {(1, (i, 1)) for i in range(10)}) # Left vertical 1s
    O = paint(O, {(1, (i, 8)) for i in range(10)}) # Right vertical 1s
    O = paint(O, {(3, (6, 4)), (3, (7, 5))}) # Center 3s
  return O
 
0.38333333333333336, 11.754472, def bbeeaahbijegecdfibicaggefhbhcdgh(I):
  v = I[0][0]
  O = canvas(0, (10, 10))

  if v == 1:
    O = paint(O, recolor(1, connect((0,0), (9,9)))) # Diagonal 1s
    O = paint(O, recolor(3, {(8,8), (8,9)})) # Two 3s
    O = paint(O, recolor(6, connect((0,1), (8,9)))) # Vertical 6s
    O = paint(O, {(6, (0, 0))}) # Top left 6
  elif v == 8:
    obj8 = recolor(8, {(0,0), (1,1)})
    obj3 = recolor(3, {(0,1), (1,2)})
    for i in range(5):
      O = paint(O, shift(obj8, (i*2, 9-i*2))) # Diagonal 8s
      O = paint(O, shift(obj3, (i*2, 8-i*2))) # Diagonal 3s
    O = paint(O, recolor(7, box(asindices(O)))) # Corner and side 7s
  elif v == 2:
    O = paint(O, recolor(1, connect((0,1), (9,1)))) # Left vertical 1s
    O = paint(O, recolor(1, connect((0,8), (9,8)))) # Right vertical 1s
    O = paint(O, recolor(3, {(6,4), (7,5)})) # Center 3s
  return O
 
0.22666666666666668, 28.024136, def fbdaacfcgajbebbfjcfiajgigdhfieea(I):
  v = I[0][0]
  O = canvas(0, (10, 10))
  
  if v == 1:
    O = paint(O, recolor(1, connect((0,0), (0, v-1)))) # Horizontal 1s
    O = paint(O, recolor(6, connect((9,0), (9-v+1, 0)))) # Vertical 6s
    O = paint(O, recolor(3, {(3, v+1), (3, v+2)})) # Two 3s
  elif v == 8:
    line_length = v // 2
    obj8 = recolor(8, {(0,0), (1,1)})
    obj3 = recolor(3, {(0,1), (1,2)})
    for i in range(line_length):
      O = paint(O, shift(obj8, (i, line_length-i))) # Diagonal 8s down
      O = paint(O, shift(obj8, (i+1, 9-i))) # Diagonal 8s up
      O = paint(O, shift(obj3, (i, line_length-i+1))) # Diagonal 3s down
      O = paint(O, shift(obj3, (i+1, 8-i))) # Diagonal 3s up
    O = paint(O, recolor(7, {(0, 1), (0, 8), (9, line_length), (9, 9-line_length)})) # Side 7s
  elif v == 2:
    O = paint(O, recolor(1, connect((1,0), (v,0)))) # Vertical 1s
    O = paint(O, recolor(3, {(v+5,2), (v+6,2)})) # Two 3s
    O = paint(O, {(1, v+1)}) # Last 1
  return O
 
0.23333333333333336, 25.014612, def iijadgfaacdjeichjafgdedbghfabfhd(I):
  v = I[0][0]
  O = canvas(0, (10, 10))
  
  if v == 1:
    O = paint(O, recolor(1, {(0, i) for i in range(v)})) # Horizontal 1s
    O = paint(O, recolor(6, {(9-i, 0) for i in range(v)})) # Vertical 6s
    O = paint(O, recolor(3, {(3, v+1), (3, v+2)})) # Two 3s
  elif v == 8:
    line_length = v // 2
    for i in range(line_length):
      O = paint(O, recolor(8, {(i, line_length-i), (i+1, line_length-i+1)})) # Diagonal 8s down
      O = paint(O, recolor(8, {(i+1, 9-i), (i, 8-i)})) # Diagonal 8s up
      O = paint(O, recolor(3, {(i, line_length-i+1), (i+1, line_length-i+2)})) # Diagonal 3s down
      O = paint(O, recolor(3, {(i+1, 8-i), (i, 7-i)})) # Diagonal 3s up
    O = paint(O, recolor(7, {(0, 1), (0, 8), (9, line_length), (9, 9-line_length)})) # Side 7s
  elif v == 2:
    O = paint(O, recolor(1, {(i+1, 0) for i in range(v)})) # Vertical 1s
    O = paint(O, recolor(3, {(v+5,2), (v+6,2)})) # Two 3s
    O = paint(O, {(1, v+1)}) # Last 1
  return O
 
0.3466666666666667, 17.909986, def ecaacbcbdacbeicijhbeebhcadcdchcf(I):
  O = canvas(0, (10, 10))

  if I == 1:
    for i in range(4, 9):
      O = paint(O, recolor(1, {(4, i)}))
    O = paint(O, recolor(1, {(0, 0), (9, 4)}))
    for i in range(2, 9, 3):
      for j in range(8):
        color = 3 if i < 5 else 6
        O = paint(O, recolor(color, {(i + (j // 4), 2 + j)}))
  elif I == 8:
    for i in range(1, 10): # Example for drawing '8'
      O = paint(O, recolor(8, {(i, i)}))
    for i in range(10): # Example decoration for '8'
      O = paint(O, recolor(7, {(0, i)}))
    for i in range(10): # Example decoration for '8'
      O = paint(O, recolor(3, {(i, 9 - i)}))
  else:  # I == 2
    for i in range(10): # Example for drawing '2'
      O = paint(O, recolor(1, {(i, 0)}))
    for i in range(10): # Example decoration for '2'
      O = paint(O, recolor(3, {(i, i)}))

  return O
 
0.27666666666666667, 12.959793, def cgfchcdafddaefhhibahbiaaafghhcbb(I):
  v = int(I[0][0])
  O = canvas(0, (10, 10))
  
  if v == 1:
    O = paint(O, {(1, (i, i)) for i in range(10)}) 
    O = paint(O, {(6, (i, i + 2)) for i in range(8)})
    O = paint(O, {(3, (3, 3)), (3, (3, 4)), (3, (4, 3)), (3, (4, 4))})
  elif v == 8:
    O = paint(O, {(8, (i, 9 - i)) for i in range(10)})
    O = paint(O, {(7, (i + 1, 8 - i)) for i in range(9)})
    O = paint(O, {(3, (2, 5)), (3, (2, 6)), (3, (2, 7)), (3, (3, 5)), (3, (3, 6)), (3, (3, 7))})
  elif v == 2:
    O = paint(O, {(1, (i, 5)) for i in range(10)})
    O = paint(O, {(1, (5, j)) for j in range(10)})
    O = paint(O, {(3, (6, 4)), (3, (6, 5)), (3, (7, 4)), (3, (7, 5))}) 

  return O
 
0.25, 12.272051, def ajbfejcdfadjeaadjgbdhfdahhffaecf(I):
  v = int(I[0][0])
  O = canvas(0, (10, 10))

  if v == 1:
    diag = connect((0, 0), (9, 9))
    vline = shift(shoot((0, 0), DOWN), (0, 2))
    block = backdrop(shift({(0, 0)}, (3, 3)))
    O = paint(O, {(1, (i, j)) for (i, j) in diag})
    O = paint(O, {(6, (i, j)) for (i, j) in vline})
    O = fill(O, 3, block) 
  elif v == 8:
    diag = connect((0, 9), (9, 0))
    vline = shift(shoot((1, 8), DOWN_LEFT), (0, 0))
    block = backdrop(shift({(0, 0), (0, 1), (1, 0)}, (2, 5)))
    O = paint(O, {(8, (i, j)) for (i, j) in diag})
    O = paint(O, {(7, (i, j)) for (i, j) in vline})
    O = fill(O, 3, block)
  elif v == 2:
    hline = shoot((5, 0), RIGHT)
    vline = shoot((0, 5), DOWN)
    block = backdrop(shift({(0, 0)}, (6, 4)))
    O = paint(O, {(1, (i, j)) for (i, j) in hline})
    O = paint(O, {(1, (i, j)) for (i, j) in vline})
    O = fill(O, 3, block)
  return O
 
0.2166666666666667, 20.590311, def jbfccgahbcfceeejjjaacffeefedgacf(I):
  canvas_size = (10, 10)
  background_color = 0
  c = canvas(background_color, canvas_size)
  if I == 1:
    obj = recolor(1, hfrontier((0, 0)))
    obj |= recolor(6, connect((5, 0), (7, 0)) | connect((6, 0), (6, 2)))
    obj |= recolor(1, vfrontier((9, 9)))
    obj |= recolor(3, {(3, 3), (3, 4), (4, 3), (4, 4)})
  elif I == 8:
    obj = recolor(8,  {(i, 9 - i) for i in range(10)}) 
    obj |= recolor(8,  {(8, i) for i in range(9)})
    obj |= recolor(3,  {(3, 5), (3, 6), (4, 5), (4, 6)}) 
    obj |= recolor(7, outbox(recolor(1, {(2, 7), (4, 5), (8, 1), (6, 0)})))
  else:
    obj = recolor(1, vfrontier((0, 4)))
    obj |= recolor(3, {(6, 4), (6, 5), (7, 4), (7, 5)})
    obj |= recolor(1, {(0, 4), (9, 4)})
  return paint(c, obj) 
 
0.24, 26.675114, def edfccebaiijeeafhaaeedieffjhcbffd(I):
  v = I[0][0]
  O = canvas(0, (10, 10))
  
  if v == 1:
    O = paint(O, recolor(1, connect((0,0), (0, v-1)))) # Horizontal 1s
    O = paint(O, recolor(6, connect((9, 9-v), (9, 8)))) # Vertical 6s
    O = paint(O, recolor(3, {(3, v+1), (3, v+2)})) # Two 3s
    O = paint(O, recolor(1, {(9, 0)})) # Bottom left 1
    O = paint(O, recolor(6, connect((2, 5), (2, 7)))) # Middle 6s
  elif v == 8:
    line_length = v // 2
    obj8 = recolor(8, {(0,0)})
    obj3 = recolor(3, {(0,1)})
    O = paint(O, recolor(7, {(0, 1), (0, 8), (9, line_length), (9, 9-line_length)})) # Side 7s
    for i in range(line_length):
      O = paint(O, shift(obj8, (i, 9-line_length+i))) # Diagonal 8s down
      O = paint(O, shift(obj8, (i+1, line_length-i-1))) # Diagonal 8s up
      O = paint(O, shift(obj3, (i, 8-line_length+i))) # Diagonal 3s down
      O = paint(O, shift(obj3, (i+1, line_length-i))) # Diagonal 3s up
  elif v == 2:
    O = paint(O, recolor(1, connect((1,4), (v+1, 4)))) # Vertical 1s
    O = paint(O, recolor(3, {(6,6), (7,6)})) # Two 3s
    O = paint(O, recolor(1, connect((1, 1), (v, 1)))) # Left 1s
    O = paint(O, recolor(1, {(9, v)})) # Last 1
  return O
 
0.25, 17.138618, def chajedjgddibecaaaedjaefcfacccjae(I):
  v = I[0][0]
  O = canvas(0, (10, 10))
  
  if v == 1:
    O = paint(O, recolor(1, {(0, i) for i in range(v)})) # Horizontal 1s
    O = paint(O, recolor(6, {(9-i, 9-v+i) for i in range(v)})) # Vertical 6s
    O = paint(O, recolor(3, {(3, v+1), (3, v+2)})) # Two 3s
    O = paint(O, recolor(1, {(9, 0)})) # Bottom left 1
    O = paint(O, recolor(6, {(i, 5) for i in range(2, 8)})) # Middle 6s
  elif v == 8:
    for i in range(v // 2):
      O = paint(O, recolor(8, {(i, 9-v//2+i)})) # Diagonal 8s down
      O = paint(O, recolor(8, {(9-i, v//2-i-1)})) # Diagonal 8s up
      O = paint(O, recolor(3, {(i, 8-v//2+i)})) # Diagonal 3s down
      O = paint(O, recolor(3, {(9-i, v//2-i)})) # Diagonal 3s up
    O = paint(O, recolor(7, {(0, 1), (0, 8), (9, v//2), (9, 9-v//2)})) # Side 7s
  elif v == 2:
    O = paint(O, recolor(1, {(i, 4) for i in range(1, v+2)})) # Vertical 1s
    O = paint(O, recolor(3, {(6,6), (7,6)})) # Two 3s
    O = paint(O, recolor(1, {(i, 1) for i in range(v+1)})) # Left 1s
    O = paint(O, recolor(1, {(9, v)})) # Last 1
  return O
 
0.25333333333333335, 23.360285, def acbffedjhbbeeiacafcjgdicefgcbbjb(I):
  v = I[0][0]
  O = canvas(0, (10, 10))

  if v == 1:
    O = paint(O, recolor(1, connect((0,0), (0, v-1))))
    O = paint(O, recolor(6, connect((9, 9-v), (9, 8))))
    for i in range(2):
      O = paint(O, recolor(3, {(3, v+i+1)}))
    O = paint(O, recolor(1, {(9, 0)}))
    for i in range(6):
      O = paint(O, recolor(6, {(2, 5+i)}))
  elif v == 8:
    for i in range(v // 2):
      O = paint(O, recolor(8, {(i, 9-v//2+i)}))
      O = paint(O, recolor(8, {(9-i, v//2-1-i)}))
    for i in range(v // 2):
      O = paint(O, recolor(3, {(i, 8-v//2+i)}))
      O = paint(O, recolor(3, {(9-i, v//2-i)}))
    O = paint(O, recolor(7, {(0, 1), (0, 8)}))
    O = paint(O, recolor(7, {(9, v//2), (9, 9-v//2)})) 
  elif v == 2:
    for i in range(v+1):
      O = paint(O, recolor(1, {(1+i, 4)}))
    for i in range(2):
      O = paint(O, recolor(3, {(6+i, 6)}))
    for i in range(v+1):
      O = paint(O, recolor(1, {(i, 1)}))
    O = paint(O, recolor(1, {(9, v)}))
  return O
 
0.25, 17.158598, def fafbbbgjjjejedbbifdbabgbehcfhddg(I):
  v = I[0][0]
  O = canvas(0, (10, 10))
  
  if v == 1:
    O = paint(O, recolor(1, {(0, i) for i in range(v)}))
    for i in range(9, 9-v, -1):
      O = paint(O, recolor(6, {(i, 9)}))
    O = paint(O, recolor(3, {(3, 2), (3, 3)}))
    O = paint(O, recolor(1, {(9, 0)}))
    for i in range(2, 8):
      O = paint(O, recolor(6, {(i, 5)}))
  elif v == 8:
    for i in range(v // 2):
      O = paint(O, recolor(8, {(i, 9-v//2+i)}))
      O = paint(O, recolor(8, {(9-i, v//2-1-i)}))
      O = paint(O, recolor(3, {(i, 8-v//2+i)}))
      O = paint(O, recolor(3, {(9-i, v//2-i)}))
    O = paint(O, recolor(7, {(0, 1), (0, 8), (9, v//2), (9, 9-v//2)}))
  elif v == 2:
    for i in range(1, v+2):
      O = paint(O, recolor(1, {(i, 4)}))
    O = paint(O, recolor(3, {(6, 6), (7, 6)}))
    for i in range(v+1):
      O = paint(O, recolor(1, {(i, 1)}))
    O = paint(O, recolor(1, {(9, v)}))
  return O
 
0.25333333333333335, 23.614485, def afgfajejbhedeiffacajjegibafabdba(I):
  v = I[0][0]
  O = canvas(0, (10, 10))

  if v == 1:
    O = paint(O, recolor(1, connect((0, 0), (0, v-1))))
    for i in range(v):
      O = paint(O, recolor(6, {(9-i, 9)}))
    O = paint(O, recolor(3, {(3, v+1), (3, v+2)}))
    O = paint(O, recolor(1, {(9, 0)}))
    for i in range(6):
      O = paint(O, recolor(6, {(2, 5+i)}))
  elif v == 8:
    O = paint(O, recolor(7, {(0, 1), (0, 8)}))
    for i in range(v // 2):
      O = paint(O, recolor(8, {(i, 9-v//2+i)}))
      O = paint(O, recolor(3, {(i, 8-v//2+i)}))
    for i in range(v // 2):
      O = paint(O, recolor(8, {(9-i, v//2-1-i)}))
      O = paint(O, recolor(3, {(9-i, v//2-i)}))
    O = paint(O, recolor(7, {(9, v//2), (9, 9-v//2)}))
  else:
    O = paint(O, recolor(1, {(i, 1) for i in range(v+1)}))
    for i in range(1, v+2):
      O = paint(O, recolor(1, {(i, 4)}))
    O = paint(O, recolor(3, {(6, 6), (7, 6)}))
    O = paint(O, recolor(1, {(9, v)}))
  return O
 
0.30333333333333334, 12.163012, def afchcgheicabeaeaifddcjbjagibeaee(I):
  c = canvas(0, (10, 10))
  if I == 1:
    obj = recolor(6, connect((5, 0), (9, 4)))
    obj |= recolor(3,  {(i, j) for i in range(3, 5) for j in range(3, 5)})
    obj |= recolor(1,  {(i, j) for i in (0,4,5,9) for j in range(10)} | {(i, j) for i in range(10) for j in (0,4,5,9)})
  elif I == 8:
    obj = recolor(8, connect((0,9), (9,0)) | hfrontier((8,0)))
    obj |= recolor(3,  {(i, j) for i in range(3, 5) for j in range(5, 7)})
    obj |= recolor(7, outbox(recolor(1, {(2, 7), (4, 5), (8, 1), (6, 0)})))
  else:
    obj = recolor(1, vfrontier((0, 4)) | vfrontier((0,9)))
    obj |= recolor(3,  {(i, j) for i in range(6, 8) for j in range(4, 6)})
  return paint(c, obj)
 
0.18666666666666668, 8.654043, def gfchdbccacfaefgfajbfbeeddhcagefi(I):
    v = I[0][0]
    O = canvas(0, (10, 10))
    if v == 1:
        O = paint(O, {(1, (0, 0)), (1, (9, 0))})  # Corner 1s
        O = paint(O, {(1, (3, 4)), (1, (3, 5)), (1, (3, 6)), (1, (3, 7)), (1, (3, 8))})  # Top horizontal line
        O = paint(O, {(6, (6, 2)), (6, (7, 2)), (6, (8, 2))})  # Bottom horizontal line (partial)
        O = paint(O, {(3, (3, 3)), (3, (4, 3))})  # Vertical 3s
        O = paint(O, {(6, (6, 6)), (6, (7, 6))})  # Additional 6s
    elif v == 8:
        O = paint(O, {(8, (0, 6))})  # Top-right 8
        O = paint(O, {(8, (1, 6)), (8, (2, 7)), (8, (3, 8))}) # Diagonal 8s
        O = paint(O, {(7, (9, 0)), (7, (8, 9)), (7, (7, 8)), (7, (6, 7)), (7, (5, 6)), (7, (4, 5)), (7, (3, 4)), (7, (2, 3)), (7, (1, 2)), (7, (0, 1))})  # Bottom horizontal line and diagonal 7s
        O = paint(O, {(3, (2, 5)), (3, (3, 5))})  # Vertical 3s
        O = paint(O, {(8, (6, 6)), (8, (7, 8)), (8, (8, 9))})  # Additional 8s
    elif v == 2:
        O = paint(O, {(1, (1, 4)), (1, (2, 4)), (1, (3, 4)), (1, (4, 4)), (1, (5, 4)), (1, (6, 4))}) # Vertical line of 1s
        O = paint(O, {(3, (6, 5)), (3, (7, 5))})  # Vertical 3s
        O = paint(O, {(1, (0, 4)), (1, (9, 4))})  # Top and bottom 1s 
    return O
 
0.17, 32.732254, def jbebddaijcbaeaebbafbgbibfaeicfii(I):
    v = I[0][0]
    O = canvas(0, (10, 10))
    if v == 1:
        for i in range(4, 9):
            O = paint(O, {(1, (3, i))}) # Top horizontal line
        for i in range(6, 9):
            O = paint(O, {(6, (i, 2))}) # Bottom horizontal line (partial)
        for i in range(3, 5):
            O = paint(O, {(3, (i, 3))}) # Vertical 3s
        # ... (Add logic for other elements)
    # ... (Add logic for other input values)
    return O 
 
0.17, 37.791313, def ebfgcdbhhagfeddiiibfffcdeebdddjf(I):
  v = I[0][0]
  O = canvas(0, (10, 10))
  if v == 1:
    line1 = connect((3,4),(3,8))
    line2 = connect((6,2),(8,2))
    O = paint(O, recolor(1, line1))
    O = paint(O, recolor(6, line2))
    # ... (Add logic for other elements and input values)
  return O
 
0.3, 10.9199, def bghhdhjgfbbaeebeiabjejedbfdacfga(I):
  O = canvas(0,(10,10))
  if I == 1:
    O = paint(O, recolor(1, {(i,4) for i in range(4,9)}))
    O = paint(O, recolor(1, {(0,0),(9,4)}))
    O = paint(O, recolor(3, {(i + (j // 4), 2 + j) for i in range(2, 5) for j in range(8)}))
    O = paint(O, recolor(6, {(i + (j // 4), 2 + j) for i in range(5, 8) for j in range(8)}))
    O = paint(O, recolor(6, {(i, 2) for i in range(9)}))
  elif I == 8:
    O = paint(O, recolor(8, {(i, i) for i in range(1, 10)}))
    O = paint(O, recolor(7, {(i, 9 - i) for i in range(10)}))
    O = paint(O, recolor(3, {(i, j) for i in range(2, 4) for j in range(5, 7)}))
    O = paint(O, recolor(8, {(i, 6) for i in range(10)}))
  else:
    O = paint(O, recolor(1,{(2,0),(3,2),(4,4),(5,6),(6,8),(9,0),(7,2),(8,4),(9,6),(2,4),(3,4),(4,4),(5,4),(6,4),(7,4),(8,4),(9,4)}))
    O = paint(O, recolor(3, {(i, j) for i in range(6, 8) for j in range(6, 8)}))
  return O
 
0.30666666666666664, 10.384432, def cfagbeigabehecebbhcihhchfbabefff(I):
  v = int(I[0][0])
  O = canvas(0, (10, 10))
  
  if v == 1:
    O = paint(O, {(v, (0, 0)), (v, (9, 0)), (v, (9, 9))})
    O = paint(O, {(1, (i, 3)) for i in range(3, 8)})
    O = paint(O, {(6, (2, j)) for j in range(1, 9)})
    O = fill(O, 3, {(i, j) for i in range(3, 6) for j in range(3, 5)})
  elif v == 8:
    O = paint(O, {(v, (6, 2)), (v, (7, 2))})
    O = paint(O, {(7, (i, i - 1)) for i in range(1, 9, 2)})
    O = paint(O, {(7, (i, 9 - i)) for i in range(0, 9, 2)})
    O = paint(O, {(7, (i, 2)) for i in range(3, 6)})
    O = fill(O, 3, {(i, j) for i in range(6, 9) for j in range(6, 8)})
  elif v == 2:
    O = paint(O, {(v, (0, 9)), (v, (4, 1)), (v, (9, 1))})
    O = paint(O, {(1, (i, 2)) for i in range(2, 7)})
    O = fill(O, 3, {(i, j) for i in range(4, 7) for j in range(6, 8)})
  return O
 
0.22333333333333336, 16.666538, def ghfaaibfbhideiafibebfaeajejbbaef(I):
  v = I[0][0]
  O = canvas(0, (10, 10))
  center_i = 5 if v==2 else 4
  center_j = 4 if v==1 else 5

  if v == 1:
    base_obj = {(1, (center_i, center_j))}
    O = paint(O, base_obj)
    for i in range(1, 3):
      O = paint(O, shift(base_obj, (0, i)))
      O = paint(O, shift(base_obj, (0, -i)))
    O = paint(O, {(3, (center_i-1, center_j-2)), (3, (center_i-1, center_j-1))})
    O = paint(O, {(6, (center_i-2, center_j-3))})
  elif v == 8:
    base_obj = {(8, (2, 3))}
    for i in range(6):
      O = paint(O, shift(base_obj, (i, i)))
      O = paint(O, {(3, (2+i, 4+i)), (3, (2+i, 5+i))})
    O = paint(O, {(7, (0, 1)), (7, (3, 3)), (7, (8, 0)), (7, (9, 9))})
  else:
    base_obj = {(1, (center_i, center_j))}
    for i in range(1, 3):
      O = paint(O, shift(base_obj, (i, 0)))
      O = paint(O, shift(base_obj, (-i, 0)))
    O = paint(O, {(3, (center_i, center_j+1)), (3, (center_i, center_j+2))})
    O = paint(O, {(1, (9, center_j))})

  return O
 
0.25333333333333335, 24.783754, def acbadffegdhcejgbjajajjcecadcaefe(I):
  c = canvas(0, (10, 10))
  if I == 1:
    obj = recolor(1, {(0, 0)})
    obj |= recolor(6, connect((0, 0), (4, 4)))
    obj |= recolor(3, shift(canvas(3, (2, 4)), (2, 3)))
    obj |= recolor(1, {(9,0)})
    obj |= recolor(6, {(6,0), (7,0), (7,6)})
  elif I == 8:
    obj = recolor(8, connect((0, 9), (9, 0)))
    obj |= recolor(8, {(i, 9) for i in range(0, 10, 2)})
    obj |= recolor(3, shift(canvas(3, (2, 2)), (3, 6)))
    obj |= recolor(7, {(1, 5), (1, 8), (5, 5), (5, 8)})
  else:
    obj = recolor(1, {(0, 2), (2, 0), (9, 0)})
    obj |= recolor(1, connect((2, 2), (2, 6)))
    obj |= recolor(3, {(6, 3), (7, 3)})
  return paint(c, obj)
 
0.2833333333333334, 13.263615, def edefebjbafcceaacafdddaaejedebgei(I):
    v = int(I[0][0])
    O = canvas(0, (10, 10))
    
    if v == 1:
        O = paint(O, {(v, (0, 0))})
        O = paint(O, {(v, (i, i + 1)) for i in range(2, 9)}) # Diagonal of '6's
        O = paint(O, {(v, (i, 0)) for i in range(5)}) # Vertical line of '1's
        O = paint(O, {(3, (3, j)) for j in range(2)}) # Left 3 block
        O = paint(O, {(3, (4, j)) for j in range(2)}) # Right 3 block
        O = paint(O, {(6, (4, 4))}) # Single '6' above '1's

    elif v == 8:
        O = paint(O, {(v, (0, 7))}) 
        O = paint(O, {(7, (i, 7-i)) for i in range(7)}) # Downward diagonal '7's
        O = paint(O, {(7, (i, i + 3)) for i in range(3, 10)}) # Upward diagonal '7's
        O = paint(O, {(v, (2, j)) for j in range(8, 12)}) # Horizontal line of '8's
        O = paint(O, {(3, (4, 9)) for j in range(2)}) # Left 3 block
        O = paint(O, {(3, (5, 9)) for j in range(2)}) # Right 3 block
        O = paint(O, {(v, (1, 7))}) # Additional '8'
        O = paint(O, {(v, (5, 7))}) # Additional '8'

    elif v == 2:
        O = paint(O, {(v, (j, 5)) for j in range(10)}) # Central vertical line of '1's
        O = paint(O, {(v, (4, j)) for j in range(5)}) # Horizontal line of '1's from bottom left
        O = paint(O, {(v, (j, 9)) for j in range(6, 10)}) # Shorter vertical line of '1's
        O = paint(O, {(3, (7, 2)) for i in range(2) for j in range(2)}) # Left 3 block
        O = paint(O, {(3, (7, 3)) for i in range(2) for j in range(2)}) # Right 3 block
        
    return O
 
0.3666666666666667, 34.37569, def igajdgiibfbcedhbiddeebcheeeagjah(I):
  c = canvas(0, (10, 10))
  if I == 1:
    obj = recolor(1, hfrontier((0,0))) 
    obj |= recolor(6, connect((0,9), (7,2))) 
    obj |= recolor(3, shift(canvas(3, (2, 4)), (3, 3)))
  elif I == 8:
    obj = recolor(8, connect((0,9), (9,0)))
    obj |= recolor(8, vfrontier((0,9)))
    obj |= recolor(3, shift(canvas(3, (2, 2)), (3, 6)))
    obj |= recolor(7, box(shift(canvas(3, (2, 2)), (3, 6))))
  else:
    obj = recolor(1, vfrontier((0,0))) 
    obj |= recolor(1, vfrontier((0,9))) 
    obj |= recolor(3, shift(canvas(3, (2, 2)), (6, 3))) 
  return paint(c, obj)
 
0.3433333333333333, 38.33717, def cfgdhhedcidbebjfafjfdhbbhfbcjefa(I):
  c = canvas(0, (10, 10))
  if I == 1:
    obj = recolor(1, {(i, 0) for i in range(10)}) 
    obj |= recolor(6, {(i, 9-i) for i in range(8)})
    obj |= recolor(3, shift(canvas(3, (2, 4)), (3, 3)))
  elif I == 8:
    obj = recolor(8, {(i, 9-i) for i in range(10)})
    obj |= recolor(8, {(i, 9) for i in range(10)})
    obj |= recolor(3, shift(canvas(3, (2, 2)), (3, 6)))
    obj |= recolor(7, {(1,5), (1,8), (5,5), (5,8), (2,6), (2,7), (3,7), (4,6), (4,7)}) 
  else:
    obj = recolor(1, {(0, i) for i in range(10)})
    obj |= recolor(1, {(9, i) for i in range(10)}) 
    obj |= recolor(3, shift(canvas(3, (2, 2)), (6, 3))) 
  return paint(c, obj)
 
0.38000000000000006, 20.180132, def dacaehdjhjbiebdaacdaaeadegecgbaa(I):
  c = canvas(0, (10, 10))
  if I == 1:
    obj = recolor(1,  {(j, 0) for j in range(10)})
    obj |= recolor(6, {(i, 9 - i) for i in range(8)}) 
    obj |= recolor(3, {(i, j) for i in (3,4) for j in range(3,7)})
  elif I == 8:
    obj = recolor(8, {(i, 9 - i) for i in range(10)}) 
    obj |= recolor(8, {(i, 9) for i in range(10)}) 
    obj |= recolor(3, shift(canvas(3, (2, 2)), (3, 6)))
    obj |= recolor(7, shift(canvas(1, (5, 4)), (1, 5)) - shift(canvas(1, (2, 2)), (3, 6))) 
  else:
    obj = recolor(1,  {(i, 0) for i in range(10)}) 
    obj |= recolor(1, {(i, 9) for i in range(10)}) 
    obj |= recolor(3,  {(i, j) for i in (6,7) for j in range(3,5)})
  return paint(c, obj)
 
0.3233333333333333, 26.342875, def ahbdachcjadfecddbiefecbiccbdeifi(I):
  v = I[0][0]
  O = canvas(0, (10, 10))
  center_i, center_j = 4, 4

  if v == 1:
    O = paint(O, recolor(1, connect((0, center_j), (9, center_j))))  # Central vertical line
    for i in range(1, 3):
      O = paint(O, recolor(3, {(center_i - 1, center_j - i), (center_i - 1, center_j + i)}))  # Horizontal 3s
    for i in range(7):
      O = paint(O, recolor(6, {(2 + i, 8 - i)}))  # Diagonal 6s (downward)
    O = paint(O, recolor(6, connect((center_i - 2, center_j - 3), (center_i - 2, center_j + 3)))) # Left vertical 6s
    O = paint(O, recolor(6, connect((center_i + 1, center_j - 3), (center_i + 1, center_j - 1)))) # Right vertical 6s
    O = paint(O, {(1, (9, center_j))})  # Bottom 1

  elif v == 8:
    for i in range(4):
      O = paint(O, recolor(8, {(i, 6 - i), (i + 1, 5 - i)}))  # Diagonal 8s (upward)
      O = paint(O, recolor(8, {(i, 3 + i), (i + 1, 4 + i)}))  # Diagonal 8s (downward)
      O = paint(O, recolor(7, {(i, 1 + i)}))  # Diagonal 7s (upward)
      O = paint(O, recolor(7, {(i, 8 - i)}))  # Diagonal 7s (downward)
    for i in range(6):
      O = paint(O, recolor(3, {(i, 5 + i), (i, 6 + i)}))  # Horizontal 3s
    O = paint(O, {(7, (9, center_j))})  # Bottom 7

  elif v == 2:
    O = paint(O, recolor(1, connect((1, 4), (3, 4))))  # Central vertical line
    O = paint(O, recolor(3, {(6, 3), (6, 5), (7, 3), (7, 5)}))  # Horizontal 3s
    for i in range(2):
      O = paint(O, recolor(1, {(i + 1, 1)}))  # Left 1s
      O = paint(O, recolor(1, {(i, 4)}))  # Diagonal 1s
    O = paint(O, recolor(1, {(9, 2)}))  # Last 1

  return O
 
0.19666666666666668, 25.607683, def bddebcjdedibeaaaadfcfeajdefjhcca(I):
  v = I[0][0]
  O = canvas(0, (10, 10))
  center_i, center_j = 4, 4

  if v == 1:
    draw_line = lambda start, end, color: paint(O, recolor(color, connect(start, end)))
    O = draw_line((0, center_j), (9, center_j), 1)  # Central vertical line
    O = draw_line((center_i - 1, center_j - 2), (center_i - 1, center_j - 1), 3)  # Top left 3s
    O = draw_line((center_i - 1, center_j + 1), (center_i - 1, center_j + 2), 3)  # Bottom right 3s
    # ... (Similar logic for other lines and digits)

  # ... (Similar logic for other input digits)

  return O
 
0.19000000000000003, 31.811754, def gfafccbejadieejhaedhdcdeeahbcbbg(I):
  v = I[0][0]
  O = canvas(0, (10, 10))
  center_i, center_j = 4, 4

  if v == 1:
    base_one = {(1, (center_i, center_j))}
    O = paint(O, base_one)  # Central 1
    for i in range(1, 5):
      O = paint(O, shift(base_one, (i, 0)))  # Upper part of central line
      O = paint(O, shift(base_one, (-i, 0)))  # Lower part of central line
    base_three = {(3, (center_i - 1, center_j - 2)), (3, (center_i - 1, center_j - 1))}
    O = paint(O, base_three)  # Top left 3s
    O = paint(O, hmirror(base_three)) # Top right 3s
    # ... (Similar logic for other elements)

  # ... (Similar logic for other input digits)

  return O
 
0.2333333333333333, 16.1913, def achcbaedfjdieedhbiagicfgceihhdcj(I):
    v = I[0][0]
    O = canvas(0, (10, 10))
    center_i, center_j = 4, 4

    if v == 1:
      pattern_one = {(1, (i, center_j)) for i in range(10)}
      pattern_three = {(3, (center_i - 1, center_j - 2)), (3, (center_i - 1, center_j - 1)), 
                       (3, (center_i - 1, center_j + 1)), (3, (center_i - 1, center_j + 2))}
      pattern_six_left = {(6, (i, j)) for i in range(2, 8) for j in range(center_j - 3, center_j + 4) if i + j == 9}
      pattern_six_right = {(6, (i, j)) for i in range(5, 9) for j in range(center_j - 3, center_j) if i - j == 5}

      O = paint(O, pattern_one)
      O = paint(O, pattern_three)
      O = paint(O, pattern_six_left)
      O = paint(O, pattern_six_right)

    # ... (Similar logic for other input digits)

    return O
 
0.2333333333333333, 16.377956, def fdhjdaedgddaebdhbbffcbacebeiibfg(I):
    v = I[0][0]
    O = canvas(0, (10, 10))

    for i in range(10):
      for j in range(10):
        if (v == 1 and j == 4) or (v == 2 and ((1 <= i <= 3 and j == 4) or (i == 9 and j == 2) or (1 <= i <= 2 and j == 1))):
          O = paint(O, {(1, (i, j))})
        elif v == 1 and ((i == 3 and (j == 2 or j == 6)) or (2 <= i <= 7 and (i + j == 9 or (5 <= i <= 8 and i - j == 5)))):
          O = paint(O, {(6, (i, j))})
        elif v == 1 and i == 3 and (3 <= j <= 5):
          O = paint(O, {(3, (i, j))})
        # ... (Similar logic for other digits and conditions)

    return O
 
0.2833333333333334, 38.578236, def hefhbeeebaieecbfjeifhbdjdicjbcah(I):
  O = canvas(0, (10, 10))
  if I == 1:
    O = paint(O, recolor(I, vfrontier((0, 0))))
    O = paint(O, recolor(6, vfrontier((1, 1))))
    O = paint(O, recolor(3, {(3, 3), (3, 4)}))
    O = paint(O, recolor(6, {(5, 2)}))
  elif I == 8:
    O = paint(O, recolor(I, connect((0, 0), (9, 9))))
    O = paint(O, recolor(I, connect((0, 9), (9, 0))))
    O = paint(O, recolor(I, hfrontier((5, 0))))
    O = paint(O, recolor(7, corners(asindices(O))))
    O = paint(O, recolor(3, {(3, 5), (3, 6)}))
  else:
    O = paint(O, recolor(I, vfrontier((9, 0))))
    O = paint(O, recolor(1, vfrontier((8, 0))))
    O = paint(O, recolor(3, {(6, 7), (6, 8)}))
  return O
 
0.3666666666666667, 26.66039, def cfjgdgfdbfdeejjajaedjdhcbaajehac(I):
  grid = canvas(0, (10, 10))
  if I == 1:
    for i in range(10): grid = paint(grid, recolor(1, {(0, i)}))
    for i in range(1, 10, 8): grid = paint(grid, recolor(6, {(1, i)}))
    for i in range(3, 5): grid = paint(grid, recolor(3, {(3, i)}))
    grid = paint(grid, recolor(6, {(5, 2)}))
  elif I == 8:
    for i in range(10):
      grid = paint(grid, recolor(8, {(i, i)}))
      grid = paint(grid, recolor(8, {(i, 9-i)}))
      if i == 5: grid = paint(grid, recolor(8, {(i, 5)}))
    for i in (0, 9):
      for j in (0, 9): grid = paint(grid, recolor(7, {(i, j)}))
    for i in range(5, 7): grid = paint(grid, recolor(3, {(3, i)}))
  else:
    for i in range(10):
      grid = paint(grid, recolor(2, {(9, i)}))
      grid = paint(grid, recolor(1, {(8, i)}))
    for i in range(7, 9): grid = paint(grid, recolor(3, {(6, i)}))
  return grid
 
0.2833333333333334, 12.013898, def babfedeeceegedaaiiaecdjajieefddd(I):
  v = int(I[0][0])
  O = canvas(0, (10, 10))

  if v == 1:
    O = paint(O, {(1, (0, 0)), (1, (9, 9))}) # Diagonal corners with 1s
    O = paint(O, {(3, (3, 3)), (3, (4, 4))}) # Central 3s
    O = paint(O, {(1, (i, 8 - i)) for i in range(9)}) # Diagonal line of 1s
    O = paint(O, {(6, (7 - i, i)) for i in range(7)}) # Counter-diagonal line of 6s
  elif v == 8:
    O = paint(O, {(8, (i, i + 2)) for i in range(8)}) # Diagonal 8s
    O = paint(O, {(7, (i - 1, i + 1)) for i in range(1, 9)}) # Outlining 7s
    O = fill(O, 3, {(i, j) for i in range(2, 8) for j in range(4, 6)}) # Central rectangle of 3s
  elif v == 2:
    O = paint(O, {(1, (i, 2)) for i in range(10)}) # Horizontal line of 1s
    O = paint(O, {(1, (i, 9 - i)) for i in range(10)}) # Counter-diagonal line of 1s
    O = fill(O, 3, {(i, j) for i in range(6, 8) for j in range(6, 8)}) # Square of 3s
  return O 
 
0.3499999999999999, 10.731403, def dcjddbdeedgeeddbbbbjcaajdedaacdf(I):
  v = int(I[0][0])
  O = canvas(0, (10, 10))

  if v == 1:
    O = paint(O, {(1, (i, 0)) for i in range(10)}) # Left vertical line of 1s
    O = paint(O, {(6, (9, i)) for i in range(10)}) # Right vertical line of 6s
    O = paint(O, {(3, (4, i)) for i in range(2, 8)}) # Horizontal line of 3s
  elif v == 8:
    O = paint(O, {(8, (i, 6)) for i in range(4, 10)}) # Vertical line of 8s
    O = paint(O, {(7, (i, 7)) for i in range(3, 9)}) # Vertical line of 7s next to 8s
    O = fill(O, 3, {(i, j) for i in range(2, 4) for j in range(3, 9)}) # Rectangle of 3s
  elif v == 2:
    O = paint(O, {(1, (i, i)) for i in range(10)}) # Diagonal line of 1s
    O = paint(O, {(3, (i, 9 - i)) for i in range(1, 9)}) # Counter-diagonal line of 3s
  return O
 
0.2766666666666666, 11.0032215, def dfaadhbeddafeecfacbeafigfebbgfjh(I):
  v = int(I[0][0])
  O = canvas(0, (10, 10))

  if v == 1:
    base = {(1, (0, 0)), (3, (1, 0)), (1, (0, 1))}  # L-shaped base pattern
    O = paint(O, shift(base, (3, 3))) # Placing base pattern
    O = paint(O, hmirror(shift(base, (3, 3)))) # Mirroring base pattern
    O = paint(O, {(1, (i, 4)) for i in range(10)}) # Horizontal line of 1s
    O = paint(O, {(6, (i, 5)) for i in range(1, 9)}) # Horizontal line of 6s
  elif v == 8:
    O = paint(O, {(7, (i, i)) for i in range(10)}) # Diagonal line of 7s
    O = paint(O, {(8, (i + 1, i)) for i in range(9)}) # Diagonal line of 8s below 7s
    O = fill(O, 3, {(2, i) for i in range(3, 7)}) # Short horizontal line of 3s
  elif v == 2:
    O = paint(O, {(1, (i, 5)) for i in range(10)}) # Horizontal line of 1s
    O = fill(O, 3, {(i, j) for i in range(6, 8) for j in range(4, 6)}) # Square of 3s
    O = fill(O, 3, {(i, j) for i in range(7, 9) for j in range(6, 8)}) # Another square of 3s
  return O
 
0.37666666666666665, 9.048127, def adaigfacdaddeababbdabbaeadhcbcaa(I):
  v = int(I[0][0])
  O = canvas(0, (10, 10))

  if v == 1:
    O = paint(O, {(1, (i, 0)) for i in range(10) if i != 5}) # Vertical line of 1s with a gap
    O = paint(O, {(3, (5, i)) for i in range(1, 9)}) # Horizontal line of 3s
    O = paint(O, {(6, (i, 9)) for i in range(10) if i != 4}) # Vertical line of 6s with a gap
  elif v == 8:
    O = paint(O, {(8, (i, i)) for i in range(10)}) # Diagonal line of 8s
    O = paint(O, {(7, (i - 1, i)) for i in range(1, 10)}) # Diagonal line of 7s above 8s
    O = fill(O, 3, {(i, j) for i in range(2, 8) for j in range(4, 6)}) # Rectangle of 3s
  elif v == 2:
    O = paint(O, {(1, (i, 4)) for i in range(10)}) # Horizontal line of 1s
    O = paint(O, {(3, (7, i)) for i in range(2, 8)}) # Vertical line of 3s
    O = paint(O, {(3, (8, i)) for i in range(2, 8)}) # Another vertical line of 3s
  return O
 
0.35000000000000003, 12.770445, def eijihfffgadeegddicbbbcebccaheaai(I):
  v = int(I[0][0])
  O = canvas(0, (10, 10))

  if v == 1:
    O = paint(O, {(1, (0, i)) for i in range(10)}) # Top horizontal line of 1s
    O = paint(O, {(6, (9, i)) for i in range(10)}) # Bottom horizontal line of 6s
    O = paint(O, {(3, (i, 4)) for i in range(1, 9)}) # Vertical line of 3s
  elif v == 8:
    O = paint(O, {(8, (i, i)) for i in range(1, 9)}) # Diagonal line of 8s
    O = paint(O, {(7, (i, i + 1)) for i in range(9)}) # Diagonal line of 7s below 8s
    O = fill(O, 3, {(i, j) for i in range(3, 5) for j in range(4, 6)}) # Small square of 3s
  elif v == 2:
    O = paint(O, {(1, (i, 5)) for i in range(10)}) # Horizontal line of 1s
    O = paint(O, {(3, (7, i)) for i in range(10)}) # Vertical line of 3s
  return O
 
0.2833333333333333, 11.473598, def eacihbcidaciefdciaadaajjgdfabhdg(I):
  c = canvas(0, (10, 10))
  if I == 1:
    obj = recolor(1, hfrontier((0, 0)))  # Horizontal line of '1's
    obj |= recolor(6, {(i + 2, i) for i in range(8)})  # Diagonal line of '6's
    obj |= recolor(3,  {(i + 2, j + 1) for i in range(2) for j in range(2)})  # 2x2 square of '3's
  elif I == 8:
    obj = recolor(8, {(i, 9 - i) for i in range(10)} | {(i, i) for i in range(10)}) # Diagonal lines of '8's
    obj |= recolor(7, hfrontier((9, 0)))  # Horizontal line of '7's
    obj |= recolor(3, {(i + 2, j + 6) for i in range(2) for j in range(2)})  # 2x2 square of '3's
  else:
    obj = recolor(1, vfrontier((0, 4)) | vfrontier((0, 5)))  # Vertical lines of '1's
    obj |= recolor(1, {(9, 0), (5, 9)})  # Additional '1' cells
    obj |= recolor(3, {(i + 6, j + 4) for i in range(2) for j in range(2)})  # 2x2 square of '3's
  return paint(c, obj)
 
0.3033333333333333, 12.219554, def adjdchijbcadedeaibhafdegebiiagfh(I):
  c = canvas(0, (10, 10))
  if I == 1:
    obj = recolor(1, hfrontier((0, 0))) 
    obj |= recolor(6, shift(connect((0, 0), (7, 7)), (2, 2))) # Diagonal line using shift
    obj |= recolor(3, shift(canvas(3, (2, 2)), (2, 1))) # 2x2 square using shifted canvas
  elif I == 8:
    diag = recolor(8, {(i, i) for i in range(10)})
    obj = diag | hmirror(diag)  # Diagonal lines using mirroring
    obj |= recolor(7, shift(hfrontier((0, 0)), (9, 0)))  
    obj |= recolor(3, shift(canvas(3, (2, 2)), (2, 6)))
  else:
    obj = recolor(1, vfrontier((0, 4)) | vfrontier((0, 5)))
    obj |= recolor(1, {(9, 0), (5, 9)}) 
    obj |= recolor(3, shift(canvas(3, (2, 2)), (6, 4)))
  return paint(c, obj)
 
0.26333333333333336, 13.123295, def becddcbebbhaehfcaedcfegifedjgfjj(I):
  v = I[0][0]
  O = canvas(0, (10, 10))

  if v == 1:
    O = paint(O, {(1, (0, 0)), (1, (9, 0))})  # Place the '1's
    for i in range(8):
      O = paint(O, {(6, (1 + i, 9 - i))}) # Draw the diagonal line of '6's
    O = paint(O, {(3, (3, 2)), (3, (3, 3))}) # Place the two '3's
    O = paint(O, {(1, (0, 0)), (1, (1, 1)), (1, (2, 2)), (1, (3, 3))})  # Draw the horizontal line of '1's
  elif v == 8:
    for i in range(4): # Draw vertical lines of '8's
      O = paint(O, {(8, (i, 6 - i)), (8, (9 - i, 3 + i))})
    O = paint(O, {(7, (0, 6)), (7, (9, 3)), (7, (3, 9)), (7, (6, 0))})  # Place the four '7's
    O = paint(O, {(3, (1, 6)), (3, (2, 5)), (3, (8, 3)), (3, (7, 4))}) # Place the four '3's
    for i in range(4):  # Draw the horizontal line of '8's
      O = paint(O, {(8, (5, i))}) 
    O = paint(O, {(7, (0, 1)), (7, (8, 5)), (7, (9, 9))})  # Place additional '7's
  else:
    for i in range(5):  # Draw the vertical line of '1's
      O = paint(O, {(1, (2 + i, 1))}) 
    O = paint(O, {(3, (7, 4)), (3, (7, 5))}) # Place the two '3's
    O = paint(O, {(1, (9, 0))})  # Place the '1' 
  return O
 
0.25333333333333335, 15.4675255, def jcggifafgbahehbfbfbgcdfijcgjbdbh(I):
  v = I[0][0]
  O = canvas(0, (10, 10))

  if v == 1:
    O = paint(O, recolor(1, {(0, 0), (9, 0)}))
    O = paint(O, recolor(6, connect((1, 9), (8, 2)))) # Diagonal line of '6's
    O = paint(O, recolor(3, shift({(0, 0), (0, 1)}, (3, 2)))) # Two '3's
    O = paint(O, recolor(1, connect((0, 0), (3, 3)))) # Horizontal line of '1's 
  elif v == 8:
    O = paint(O, recolor(8, connect((0, 6), (3, 3)))) # Vertical line of '8's
    O = paint(O, recolor(8, hmirror(recolor(8, connect((0, 6), (3, 3))))))  # Mirrored line of '8's
    O = paint(O, recolor(7, {(0, 6), (9, 3), (3, 9), (6, 0)})) # Four '7's
    O = paint(O, recolor(3, shift({(0, 0), (1, -1)}, (1, 6)))) # Two '3's near upper '7's
    O = paint(O, recolor(3, hmirror(recolor(3, shift({(0, 0), (1, -1)}, (1, 6)))))) # Mirrored '3's 
    O = paint(O, recolor(8, connect((0, 4), (3, 4)))) # Horizontal line of '8's
    O = paint(O, recolor(7, {(0, 1), (8, 5), (9, 9)})) # Additional '7's
  else:
    O = paint(O, recolor(1, connect((2, 1), (6, 1)))) # Vertical line of '1's
    O = paint(O, recolor(3, shift({(0, 0), (0, 1)}, (7, 4))))  # Two '3's
    O = paint(O, recolor(1, {(9, 0)})) # Bottom left '1'
  return O
 
0.26333333333333336, 14.262556, def ddjjbafdabfceachjebibfgeaecbajej(I):
    v = I[0][0]
    O = canvas(0, (10, 10))

    if v == 1:
        O = paint(O, recolor(1, {(0, 0), (9, 0), (1, 1), (2, 2), (3, 3)}))  # '1's 
        O = paint(O, recolor(6, {(i + 1, 9 - i) for i in range(8)}))  # Diagonal '6's
        O = paint(O, recolor(3, {(3, 2), (3, 3)}))  # Two '3's
    elif v == 8:
        O = paint(O, recolor(8, {(i, 6 - i) for i in range(4)} | {(9 - i, 3 + i) for i in range(4)} | {(i, 4) for i in range(4)})) # '8's lines 
        O = paint(O, recolor(7, {(0, 6), (9, 3), (3, 9), (6, 0), (0, 1), (8, 5), (9, 9)})) # '7's 
        O = paint(O, recolor(3, {(1, 6), (2, 5), (8, 3), (7, 4)})) #  '3's
    else:
        O = paint(O, recolor(1, {(i + 2, 1) for i in range(5)} | {(9, 0)})) # '1's line and corner
        O = paint(O, recolor(3, {(7, 4), (7, 5)})) # Two '3's
    return O
 
0.38333333333333336, 14.199453, def jbfjjeaaeacbedfejjddheihhdebhcjd(I):
  O = canvas(0, (10, 10))
  
  if I == 1:
    O = paint(O, recolor(1, {(0, 0)})) # Place the digit
    O = paint(O, recolor(6, connect((1,1), (8,8)))) # Diagonal line of 6s
    O = paint(O, recolor(6, {(2,3), (4,5), (6,7), (8,9)})) # Additional 6s 
    O = paint(O, recolor(3, {(3,2), (4,3)})) # Two 3s
  
  elif I == 8:
    O = paint(O, recolor(8, connect((0,0), (9,9)))) # Diagonal line of 8s
    O = paint(O, recolor(7, hfrontier((0,0)))) # Horizontal line of 7s
    O = paint(O, recolor(3, connect((2,7), (4,9)))) # Diagonal line of 3s 
    
  else: # I == 2
    O = paint(O, recolor(1, vfrontier((5,0)))) # Vertical line of 1s
    O = paint(O, recolor(1, connect((1, 1), (6, 6)))) # Diagonal line of 1s
    O = paint(O, recolor(1, {(i, 9) for i in range(1, 7)})) # Extend the diagonal line 
    O = paint(O, recolor(3, {(7, 6), (8,7)})) # Two 3s
  
  return O
 
0.17666666666666667, 60.69719, def jidbiaadcdgaegeficeaadgjchjajaaf(I):
    templates = {
        1: (
            (1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
            (0, 0, 0, 0, 0, 0, 0, 0, 6, 0),
            (0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
            (0, 0, 3, 3, 1, 1, 1, 1, 1, 0),
            (0, 0, 3, 3, 0, 0, 0, 0, 0, 0),
            (0, 0, 6, 0, 0, 0, 0, 0, 0, 0),
            (0, 0, 6, 0, 0, 0, 0, 6, 0, 0),
            (0, 0, 6, 0, 0, 0, 6, 0, 0, 0),
            (0, 0, 6, 0, 0, 0, 0, 0, 0, 0),
            (0, 0, 0, 0, 1, 0, 0, 0, 0, 0),
        ),
        8: ( 
            (0, 7, 0, 0, 0, 0, 8, 0, 0, 0),
            (0, 0, 0, 0, 0, 0, 8, 0, 0, 0),
            (0, 0, 0, 7, 7, 3, 3, 8, 8, 8),
            (0, 0, 0, 0, 0, 3, 3, 0, 0, 0),
            (0, 0, 0, 0, 0, 7, 0, 0, 0, 0),
            (0, 8, 0, 0, 0, 7, 0, 0, 0, 0),
            (0, 0, 0, 0, 0, 7, 0, 0, 8, 0),
            (0, 0, 0, 8, 0, 7, 0, 0, 0, 0),
            (0, 7, 0, 0, 0, 7, 0, 0, 0, 0),
            (0, 0, 0, 0, 0, 7, 0, 0, 0, 7),
        ),
        2: (
            (0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
            (0, 0, 0, 0, 1, 0, 0, 0, 0, 0),
            (0, 1, 0, 0, 1, 0, 0, 0, 0, 0),
            (0, 0, 0, 0, 1, 0, 0, 0, 0, 0),
            (0, 0, 0, 0, 1, 0, 0, 0, 0, 0),
            (0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
            (0, 0, 0, 0, 3, 3, 0, 0, 0, 0),
            (0, 0, 0, 0, 3, 3, 0, 0, 0, 0),
            (0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
            (0, 1, 0, 0, 0, 0, 0, 0, 0, 0),
        )
    }
    return templates.get(I, ((0,) * 10,) * 10) 
 
0.17666666666666667, 60.69719, def adjcdbbbdjciecbajdbefeccedccigae(I):
  # Define the grid size
  grid_size = (10, 10)
  
  # Create an empty canvas filled with 0s
  O = canvas(0, grid_size)

  # Logic for transforming based on input value
  if I == 1:
    O = paint(O, recolor(1, {(0, 0)})) # place '1' at (0,0)
    O = paint(O, recolor(1, connect((3,4), (3,8)))) # horizontal line of '1's
    O = paint(O, recolor(6, connect((1,8), (8,8)))) # vertical line of '6's
    O = paint(O, recolor(6, {(5,1),(6,6)})) # place two '6's
  elif I == 8:
    O = paint(O, recolor(8, {(2,7),(3,7),(5,1),(6,8),(7,4)})) # place '8's
    O = paint(O, recolor(8, connect((3,7), (3,9)))) # horizontal line of '8's
    O = paint(O, recolor(7, connect((0,1), (0,9)))) # vertical line of '7's
    O = paint(O, recolor(7, connect((9,6), (9,9)))) # vertical line of '7's
    O = paint(O, recolor(3, {(3,5),(3,6),(4,5),(4,6)})) # place the '3's block
  elif I == 2: # I assume you meant to give input as 2 instead of 1 again
    O = paint(O, recolor(1, {(1,4),(2,4),(3,4),(4,4),(5,4),(5,9),(9,1)})) # place '1's
    O = paint(O, recolor(3, connect((6,4), (7,4)))) # vertical line of '3's 
  
  return O
 
0.8866666666666667, 12.317628, def hcdbjhebaebjeadbabeeafadfbbfcbei(I):
    O = canvas(0, (10, 10)) # Create the base canvas
    O = paint(O, upscale(asobject(I), 10)) # Place the input, upscaled to 10x10

    if mostcolor(I) == 1:
        O = paint(O, recolor(3, {(3, 2), (3, 3), (4, 2), (4, 3)})) # Draw the '3' rectangle
        O = paint(O, recolor(6, {(1, 8), (2, 8), (3, 8), (4, 8), (5, 8), (6, 8), (7, 8), (8, 8), (5, 2), (6, 2), (7, 2), (8, 2)})) # Draw the '6' object
    elif mostcolor(I) == 8:
        O = paint(O, recolor(7, {(0, 1), (1, 0), (2, 3), (3, 2), (4, 5), (5, 6), (6, 6), (7, 6), (8, 6), (9, 6)})) # Draw the '7' object
        O = paint(O, recolor(8, {(0, 6), (1, 6), (2, 6), (2, 7), (2, 8), (2, 9), (3, 9), (4, 9), (5, 9), (6, 8), (7, 7)})) # Draw the '8' object
        O = paint(O, recolor(3, {(3, 2), (3, 3), (4, 2), (4, 3)})) # Redraw the '3' rectangle (partially overlapped)
    elif mostcolor(I) == 1: 
        O = paint(O, recolor(1, {(2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (2, 1), (6, 9), (9, 9)})) # Draw the vertical '1' line
        O = paint(O, recolor(3, {(6, 2), (6, 3), (7, 2), (7, 3)})) # Draw the '3' rectangle at a different position
    return O
 
0.9166666666666666, 22.607836, def ffefcedbadfhejeeafbbddhecaebdjfg(I):
  O = canvas(0, (10, 10)) # Create the canvas
  O = paint(O, upscale(asobject(I), 10)) # Place the input, upscaled

  if mostcolor(I) == 1:
    O = fill(O, 3, connect((3, 2), (4, 3))) # Draw '3' rectangle as a line
    O = fill(O, 6, connect((1, 8), (8, 8)) | connect((5, 8), (5, 2))) # '6' shape with lines
  elif mostcolor(I) == 8:
    O = fill(O, 7, connect((0, 1), (3, 2)) | connect((4, 5), (9, 6))) # '7' shape with lines
    O = fill(O, 8, connect((0, 6), (2, 6)) | connect((2, 6), (2, 9)) | connect((2, 9), (7, 7))) # '8' shape with lines
    O = fill(O, 3, connect((3, 2), (4, 3))) # '3' rectangle overlap
  elif mostcolor(I) == 1:
    O = fill(O, 1, connect((2, 0), (9, 0)) | connect((2, 0), (2, 1)) | {(6, 9), (9, 9)}) # Vertical line and points
    O = fill(O, 3, connect((6, 2), (7, 3))) # '3' rectangle at different position
  return O
 
0.35333333333333333, 29.2021, def cfaedggffeigebihifhhjjfcdaaabffg(I):
  O = canvas(0, (10, 10)) # Canvas creation
  O = fill(O, mostcolor(I), {(i, j) for i in range(10) for j in range(10) if i == j or i + j == 9}) # Diagonals with input color

  if mostcolor(I) == 1:
    O = fill(O, 3, {(i, j) for i in range(3, 5) for j in range(2, 4)}) # '3' rectangle
    O = fill(O, 6, {(i, j) for i in range(1, 9) for j in range(8, 9)} | {(i, j) for i in range(5, 9) for j in range(2, 3)}) # '6' object
  elif mostcolor(I) == 8:
    O = fill(O, 7, {(0, 1), (1, 0), (2, 3), (3, 2), (4, 5)} | {(i, j) for i in range(5, 10) for j in range(6, 7)}) # '7' object
    O = fill(O, 8, {(0, 6), (1, 6), (2, 9), (3, 9), (4, 9), (5, 9), (6, 8), (7, 7)} | {(i, j) for i in range(2, 3) for j in range(6, 10)}) # '8' object
    O = fill(O, 3, {(i, j) for i in range(3, 5) for j in range(2, 4)}) # '3' rectangle overlap
  elif mostcolor(I) == 1:
    O = fill(O, 1, {(i, j) for i in range(2, 10) for j in range(0, 1)} | {(2, 1), (6, 9), (9, 9)}) # Vertical line
    O = fill(O, 3, {(i, j) for i in range(6, 8) for j in range(2, 4)}) # '3' rectangle at different position
  return O
 
0.3866666666666667, 26.80082, def efacaaefeedbefhabdhdhjdcddhigebf(I):
  O = canvas(0, (10, 10))
  input_color = mostcolor(I)
  O = fill(O, input_color, {(i, j) for i in range(10) for j in range(10) if i == j or i + j == 9}) # Fill diagonals

  rect_3 = {(0, 0), (0, 1), (1, 0), (1, 1)}

  if input_color == 1:
    shape_6 = {(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (4, -1), (4, -2), (4, -3), (4, -4)}
    O = fill(O, 6, shift(shape_6, (1, 4))) 
  elif input_color == 8:
    shape_7 = {(0, 0), (1, -1), (2, 0), (3, -1), (4, -2), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)}
    shape_8 = {(0, 0), (1, 0), (2, 0), (2, -1), (2, -2), (2, -3), (3, -3), (4, -3), (5, -3), (6, -2), (7, -1)}
    O = fill(O, 7, shift(shape_7, (9, 9)))
    O = fill(O, 8, shift(shape_8, (7, 9)))
  
  if input_color == 1 or input_color == 8:
    O = fill(O, 3, shift(rect_3, (3, 2)))
  elif input_color == 1:
    O = fill(O, 3, shift(rect_3, (6, 2))) 
  return O
 
0.38333333333333336, 14.126235, def ebghdcadbceieedbaecdcaebefbfeead(I):
  color = mostcolor(I)
  draw_shape = lambda shape, c: fill(canvas(0, (10, 10)), c, shape)

  diag = lambda c: {(i, j) for i in range(10) for j in range(10) if i == j or i + j == 9}
  rect_3 = {(0, 0), (0, 1), (1, 0), (1, 1)}
  shape_6 = {(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (4, -1), (4, -2), (4, -3), (4, -4)}
  shape_7 = {(0, 0), (1, -1), (2, 0), (3, -1), (4, -2), (5, -1), (6, -1), (7, -1), (8, -1), (9, -1)}
  shape_8 = {(0, 0), (1, 0), (2, 0), (2, -1), (2, -2), (2, -3), (3, -3), (4, -3), (5, -3), (6, -2), (7, -1)}

  if color == 1:
      O = draw_shape(diag(color) | shift(rect_3, (3, 2)) | shift(shape_6, (1, 4)), color)
  elif color == 8:
      O = draw_shape(diag(color) | shift(rect_3, (3, 2)) | shift(shape_7, (9, 9)) | shift(shape_8, (7, 9)), color)
  elif color == 1:
      O = draw_shape(diag(color) | shift(rect_3, (6, 2)), color)
  else:
      O = canvas(0, (10, 10))

  return O
 
0.13333333333333333, 4.9445014, def acgcdgihabdaejgiidfibbbgfaddcheb(I):
  v = mostcolor(I)
  O = canvas(0, (10, 10))
  if v == 1:
    O = paint(O, recolor(1, {(0,0),(3,4),(3,5),(3,6),(3,7),(3,8),(9,4),(1,8),(3,8)}))
    O = paint(O, recolor(3, {(3,2),(3,3),(4,2),(4,3)}))
    O = paint(O, recolor(6, {(1,8),(5,2),(6,2),(7,2),(8,2),(6,7),(7,6)}))
  elif v == 8:
    O = paint(O, recolor(7, {(0,1),(2,3),(2,4),(8,1),(9,6),(0,6),(4,5),(5,5),(6,5),(7,5)}))
    O = paint(O, recolor(3, {(2,5),(2,6),(3,5),(3,6)}))
  elif v == 2:
    O = paint(O, recolor(1, {(1,4),(2,1),(2,4),(3,4),(4,4),(5,4),(5,9),(9,1)}))
    O = paint(O, recolor(3, {(6,4),(6,5),(7,4),(7,5)}))
  return O
 
0.0033333333333333335, 143.97382, def adjfbadajgaaeihibfddcfedgfjccafe(I):
  v = mostcolor(I)
  O = canvas(0, shape(I))
  if v == 1:
    obj1 = recolor(1, {(0,0),(1,8),(3,4),(3,5),(3,6),(3,7),(3,8),(9,4)})
    obj3 = recolor(3, {(3,2),(3,3),(4,2),(4,3)})
    obj6 = recolor(6, {(1,8),(5,2),(6,2),(6,7),(7,2),(7,6),(8,2)})
    O = paint(paint(paint(O, obj1), obj3), obj6)
  # Add similar elif blocks for v==8 and v==2
  return O
 
0.17333333333333334, 30.66299, def dbjeafccfbafefcciaffccheefjafigd(I):
  v = mostcolor(I)
  O = canvas(0, (10,10))
  if v == 1:
    for i, j in {(0,0),(3,4),(3,5),(3,6),(3,7),(3,8),(9,4),(1,8),(3,8)}:
      O = paint(O, {(1, (i,j))})
    for i, j in {(3,2),(3,3),(4,2),(4,3)}:
      O = paint(O, {(3, (i,j))})
    # Add similar loop for object '6'
  # Add similar elif blocks for v==8 and v==2
  return O
 
0.17, 17.07263, def dbabdjfahdbdeieeahcfdcdebeefjidh(I):
    v = mostcolor(I)
    templates = {
        1:  ((1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
             (0, 0, 0, 0, 0, 0, 0, 0, 6, 0),
             (0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
             (0, 0, 3, 3, 1, 1, 1, 1, 1, 0),
             (0, 0, 3, 3, 0, 0, 0, 0, 0, 0),
             (0, 0, 6, 0, 0, 0, 0, 0, 0, 0),
             (0, 0, 6, 0, 0, 0, 0, 6, 0, 0),
             (0, 0, 6, 0, 0, 0, 6, 0, 0, 0),
             (0, 0, 6, 0, 0, 0, 0, 0, 0, 0),
             (0, 0, 0, 0, 1, 0, 0, 0, 0, 0)),
        # Add similar templates for v==8 and v==2
    }
    return templates.get(v, canvas(0, (10,10)))
 
0.3333333333333333, 28.855474, def fcgfaegjhdacecaaiecebddafeghidcb(I):
  digit = first(palette(I))
  canvas_value = 0
  C = canvas(canvas_value, (10, 10))
  if digit == 1:
    C = fill(C, 1, {(i, j) for i in range(4) for j in range(1)}) 
    C = fill(C, 6, {(i, j) for i in range(2, 9) for j in range(2, 3)})
    C = fill(C, 6, {(i, j) for i in range(2, 9) for j in range(7, 8)})
    C = fill(C, 3, {(i, j) for i in range(3, 7) for j in range(3, 7)})
  elif digit == 8:
    C = fill(C, 8, {(0, 6), (1, 6), (2, 7), (2, 8), (3, 7), (5, 0), (6, 0), (7, 5), (8, 3), (9, 9)})
    C = fill(C, 7, {(0, 1), (1, 0), (2, 3), (3, 2), (4, 2), (5, 5), (6, 5), (7, 4), (8, 3), (9, 6)})
    C = fill(C, 3, {(i, j) for i in range(5, 8) for j in range(2, 5)})
  elif digit == 3:
    C = fill(C, 1, {(i, j) for i in range(1, 10) for j in range(1)})
    C = fill(C, 3, {(i, j) for i in range(6, 8) for j in range(3, 5)})
    C = fill(C, 3, {(i, j) for i in range(6, 8) for j in range(6, 8)})
  return C
 
0.3033333333333333, 16.804827, def hcidbehfaihjeaedacfgfegeagjfaegb(I):
  v = mostcolor(I)
  O = canvas(0, (10,10))
  if v == 1:
    O = paint(O, {(1, (0,0)), (1, (1,0)), (1, (2,0)), (1, (0,1)), (1, (1,1)), (1, (2,1)), (1, (0,2)), (1, (1,2)), (1, (2,2))})
    O = paint(O, {(6, (0,8)), (6, (1,8)), (6, (2,8)), (6, (5,0)), (6, (5,1)), (6, (5,2)), (6, (6,0)), (6, (6,1)), (6, (6,2)), (6, (7,0)), (6, (7,1)), (6, (7,2)), (6, (6,6)), (6, (6,7)), (6, (6,8)), (6, (7,6)), (6, (7,7)), (6, (7,8))})
    O = paint(O, {(3, (3,2)), (3, (3,3)), (3, (3,4)), (3, (4,2)), (3, (4,3)), (3, (4,4))})
  elif v == 8:
    O = paint(O, {(8, (0,6)), (8, (0,7)), (8, (0,8)), (8, (1,6)), (8, (1,7)), (8, (1,8)), (8, (2,6)), (8, (2,7)), (8, (2,8))})
    O = paint(O, {(7, (0,1)), (7, (8,0)), (7, (5,5)), (7, (5,6)), (7, (5,7)), (7, (9,9)), (7, (8,9)), (7, (7,9)), (7, (6,9))})
    O = paint(O, {(3, (2,5)), (3, (2,6)), (3, (3,5)), (3, (3,6))})
  elif v == 2:
    O = paint(O, {(1, (1,5)), (1, (2,5)), (1, (3,5)), (1, (4,5)), (1, (5,5)), (1, (6,5)), (1, (1,9)), (1, (2,9)), (1, (3,9)), (1, (4,9)), (1, (5,9)), (1, (6,9))})
    O = paint(O, {(3, (6,5)), (3, (6,6)), (3, (7,5)), (3, (7,6))})
  return O
 
0.3766666666666667, 24.447256, def acebdcffdjjfeadbihebcedejcahhaad(I):
  v = mostcolor(I)
  O = canvas(0, (10,10))
  obj = asobject(I)
  upscaled_obj = upscale(obj, 3)
  if v == 1:
    O = paint(O, shift(upscaled_obj, (0, 0)))
    O = paint(O, recolor(6, shift(upscaled_obj, (5, 0))))
    O = paint(O, recolor(6, shift(upscaled_obj, (6, 0))))
    O = paint(O, recolor(6, shift(upscaled_obj, (6, 6))))
    O = paint(O, recolor(3, shift(upscaled_obj, (3, 2))))
  elif v == 8:
    O = paint(O, shift(upscaled_obj, (0, 6)))
    O = paint(O, recolor(7, shift(upscaled_obj, (0, 1))))
    O = paint(O, recolor(7, shift(upscaled_obj, (5, 5))))
    O = paint(O, recolor(7, shift(upscaled_obj, (6, 9))))
    O = paint(O, recolor(3, shift(upscaled_obj, (2, 5))))
  elif v == 2:
    O = paint(O, shift(upscaled_obj, (1, 5)))
    O = paint(O, recolor(3, shift(upscaled_obj, (6, 5))))
    O = paint(O, recolor(1, shift(upscaled_obj, (1, 9))))
  return O
 
0.26666666666666666, 9.078715, def cjdchgbciciaehgcifeifhigegajjeaa(I):
  d = first(palette(I))
  C = canvas(0, (10, 10))
  if d == 1:
    C = paint(C, {(1, (i, 0)) for i in range(4)})
    C = paint(C, {(6, (i, 8)) for i in range(8)})
    C = paint(C, {(3, (i, j)) for i in range(3, 5) for j in range(3, 5)})
    C = paint(C, {(1, (9 - i, i)) for i in range(4)})
  elif d == 8:
    C = paint(C, {(8, (i, i + 6)) for i in range(4)})
    C = paint(C, {(7, (i, i + 1)) for i in range(9)})
    C = paint(C, {(3, (3, j)) for j in range(6, 9)})
    C = paint(C, {(7, (i, 5)) for i in range(5, 9)})
  elif d == 3:
    C = paint(C, {(1, (i, 0)) for i in range(10)})
    C = paint(C, {(3, (i, j)) for i in range(6, 8) for j in range(3, 5)})
    C = paint(C, {(1, (9 - i, i + 6)) for i in range(4)})
  return C
 
0.28, 9.215562, def eaedfhhcccededhbafjiecfbjdfbccba(I):
  d = first(palette(I))
  C = canvas(0, (10, 10))
  if d == 1:
    C = fill(C, 1, {(0, j) for j in range(4)})
    C = fill(C, 6, {(i, 8) for i in range(10)})
    C = fill(C, 3, {(i, j) for i in range(3, 5) for j in range(3, 5)})
    for i in range(4):
      C = fill(C, 1, {(9 - i, i)})
  elif d == 8:
    for i in range(4):
      C = fill(C, 8, {(i, i + 6)})
    for i in range(9):
      C = fill(C, 7, {(i, i + 1)})
    C = fill(C, 3, {(3, j) for j in range(6, 9)})
    C = fill(C, 7, {(i, 5) for i in range(5, 9)})
  elif d == 3:
    C = fill(C, 1, {(i, 0) for i in range(10)})
    C = fill(C, 3, {(i, j) for i in range(6, 8) for j in range(3, 5)})
    for i in range(4):
      C = fill(C, 1, {(9 - i, i + 6)})
  return C
 
0.91, 16.482773, def fgfhccjbfigieejfadjbhhjbicddceef(I):
    O = canvas(0, (10, 10)) # Create the base canvas
    O = paint(O, upscale(asobject(I), 10)) # Place the input, upscaled to 10x10

    if mostcolor(I) == 1:  # Transformation for Input_0
        O = paint(O, recolor(3, frozenset({(3, 2), (3, 3), (4, 2), (4, 3)})))
        O = paint(O, recolor(6, frozenset({(j, 1) for j in range(1, 9)}) | frozenset({(8, j) for j in range(2, 10)})))
        O = paint(O, recolor(1, frozenset({(9, 4)})))
    elif mostcolor(I) == 8: # Transformation for Input_1
        O = paint(O, recolor(7, frozenset({(i, i) for i in range(10)})))
        O = paint(O, recolor(8, frozenset({(i + 5, j + 5) for i in range(5) for j in range(5)})))
        O = paint(O, recolor(3, frozenset({(i + 4, j + 4) for i in range(2) for j in range(2)})))
    elif mostcolor(I) == 1: # Transformation for Input_2
        O = paint(O, recolor(1, frozenset({(i, 1) for i in range(10)}) | frozenset({(i, 4) for i in range(2, 6)}) | frozenset({(i, 8) for i in range(1, 10, 9)})))
        O = paint(O, recolor(3, frozenset({(i + 6, j + 4) for i in range(2) for j in range(2)})))
    return O
 
0.33, 11.433786, def dcabbfcbgajbeceiadbafaedbbafcjic(I):
  O = canvas(0, (10, 10)) # Initialize the canvas
  if mostcolor(I) == 1: # Condition for Input_0
    O = paint(O, recolor(1, {(0, 0)})) # Place the initial '1'
    O = paint(O, recolor(3, {(3, 2), (3, 3), (4, 2), (4, 3)})) # Place the '3's
    O = paint(O, recolor(6, {(x, 8) for x in range(1, 9)} | {(5 + x, 2) for x in range(4)})) # Place the '6's (part 1)
    O = paint(O, recolor(6, {(8, y) for y in range(2, 9)})) # Place the '6's (part 2)
    O = paint(O, recolor(1, {(9, 4)})) # Place the final '1'
  elif mostcolor(I) == 8: # Condition for Input_1
    O = paint(O, recolor(7, {(x, x) for x in range(10)})) # Place the '7's
    O = paint(O, recolor(8, {(5 + x, 5 + y) for x in range(5) for y in range(5)})) # Place the '8's
    O = paint(O, recolor(3, {(4 + x, 4 + y) for x in range(2) for y in range(2)})) # Place the '3's
  elif mostcolor(I) == 1: # Condition for Input_2
    O = paint(O, recolor(1, {(x, 1) for x in range(10)})) # Place the '1's (part 1)
    O = paint(O, recolor(1, {(x, 4) for x in range(2, 6)})) # Place the '1's (part 2)
    O = paint(O, recolor(3, {(6 + x, 4 + y) for x in range(2) for y in range(2)})) # Place the '3's
  return O
 
0.35000000000000003, 14.83124, def jdegeheeaeibeaedjiacdbeeheadgcad(I):
  O = canvas(0, (10, 10))
  if mostcolor(I) == 1:
    O = paint(O, recolor(1, {(0, 0)}))
    O = paint(O, recolor(3, {(i + 3, j + 2) for i in range(2) for j in range(2)}))
    six_pattern = {(j, 1) for j in range(1, 9)} | {(8, j) for j in range(2, 10)}
    O = paint(O, recolor(6, six_pattern))
    O = paint(O, recolor(1, {(9, 4)}))
  elif mostcolor(I) == 8:
    diag_line = {(i, i) for i in range(10)}
    O = paint(O, recolor(7, diag_line))
    O = paint(O, recolor(8, {(i + 5, j + 5) for i in range(5) for j in range(5)}))
    O = paint(O, recolor(3, {(i + 4, j + 4) for i in range(2) for j in range(2)}))
  elif mostcolor(I) == 1:
    vert_line1 = {(i, 1) for i in range(10)}
    vert_line2 = {(i, 4) for i in range(2, 6)}
    vert_line3 = {(i, 8) for i in range(0, 10, 9)}
    O = paint(O, recolor(1, vert_line1 | vert_line2 | vert_line3))
    O = paint(O, recolor(3, {(i + 6, j + 4) for i in range(2) for j in range(2)}))
  return O 
 
0.26999999999999996, 11.753379, def dbfcbdcebcffecdijcajgceebefhebce(I):
  O = canvas(0, (10, 10))
  m = mostcolor(I)
  if m == 1:
    O = paint(O, recolor(3, {(3, 3), (4, 3), (3, 4), (4, 4)}))  # Square
    O = paint(O, recolor(1, {(3, 3), (4, 3), (5, 3), (6, 3), (7, 3)}))  # Line
    O = paint(O, recolor(6, {(3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8)})) # Line
    O = paint(O, recolor(1, {(0, 0)}))
  elif m == 8:
    O = paint(O, recolor(7, {(1, 0), (2, 1), (3, 2), (4, 3), (5, 4), (6, 5), (7, 6), (8, 7), (9, 8)}))
    O = paint(O, recolor(3, {(6, 5), (7, 5), (6, 6), (7, 6)})) # Square
    O = paint(O, recolor(8, {(6, 6), (7, 6), (8, 6), (6, 7), (7, 7), (8, 7), (6, 8), (7, 8), (8, 8)})) # Square
    O = paint(O, recolor(8, {(6, 0)}))
  else:
    O = paint(O, recolor(1, {(2, 1), (3, 1), (4, 1), (5, 1), (6, 1)}))
    O = paint(O, recolor(3, {(6, 4), (7, 4), (6, 5), (7, 5)})) # Square
    O = paint(O, recolor(1, {(0, 0)}))
  return O
 
0.25, 15.933967, def adfidfaibfbfeebaaddececbaddcfefa(I):
  v = mostcolor(I)
  O = canvas(0, (10,10))
  if v == 1:
    O = paint(O, recolor(1, {(i, 4) for i in range(5, 10)}))  # Central '1's
    O = paint(O, recolor(3, {(6, 6), (6, 7), (7, 6), (7, 7)})) # '3' block
    O = paint(O, recolor(6, {(1, 8), (5, 2), (6, 2), (7, 2), (8, 2), (6, 6), (6, 7), (7, 6)})) # '6' shape
  elif v == 8:
    O = paint(O, recolor(7, {(i, 0) for i in range(10) if i != 9} | {(9, 9)} | {(i, 9) for i in range(6, 9)})) # '7' border and corner
    O = paint(O, recolor(8, {(i, j) for i in range(6, 9) for j in range(6, 9)})) # '8' square
    O = paint(O, recolor(3, {(2, 5), (2, 6), (3, 5), (3, 6), (2, 7)})) # '3's near center and above '8' square
  elif v == 2:
    O = paint(O, recolor(1, {(i, 5) for i in range(1, 7)} | {(i, 9) for i in range(1, 7)})) # Horizontal '1' lines
    O = paint(O, recolor(3, {(6, 5), (6, 6), (7, 5), (7, 6)})) # '3' block
  return O
 
0.33666666666666667, 10.856605, def gfcjcgccbbcfeieiafedcfcjjbgfggdf(I):
  digit = first(palette(I))
  C = canvas(0, (10, 10))
  if digit == 1:
    C = fill(C, 1, {(0, 0), (9, 0), (9, 4), (8, 4), (7, 4), (6, 4), (5, 4)}) # Place '1's
    C = fill(C, 6, {(1, 9), (2, 9), (3, 9), (4, 9), (5, 9), (6, 9), (7, 9), (8, 9)}) # Place '6's 
    C = fill(C, 3, {(3, 3), (3, 4), (4, 3), (4, 4)}) # Place '3's
  elif digit == 8:
    C = fill(C, 8, {(i, j) for i in range(2, 10) for j in range(6, 10)}) # Expand '8'
    C = fill(C, 7, {(0, 1), (1, 0), (2, 3), (3, 2), (4, 1), (5, 0), (6, 2), (7, 3), (8, 2), (9, 6)}) # Place '7's
    C = fill(C, 3, {(2, 7), (3, 8)}) # Place '3's
  elif digit == 3:
    C = fill(C, 1, {(2, 5), (3, 5), (4, 5), (5, 5), (6, 5), (9, 6)}) # Place '1's
    C = fill(C, 3, {(6, 5), (7, 6)}) # Place '3's
  return C
 
0.25666666666666665, 36.988678, def iicecbhccdddefajbichbicageaffefg(I):
  digit = first(palette(I))
  C = canvas(0, (10, 10))
  if digit == 1:
    diag_line = normalize(frozenset({(1, (i, i)) for i in range(4)})) # Create diagonal line
    C = paint(C, shift(diag_line, (6, 4))) # Position line
    C = fill(C, 1, {(0, 0), (9, 0)}) # Place corner '1's
    C = fill(C, 6, {(i, 9) for i in range(1, 9)}) # Place '6's
    C = fill(C, 3, crop(C, (3, 3), (2, 2))) # Place '3's
  # ... (Similar logic for digit 8 and 3, creating objects and positioning)
  return C
 
0.26999999999999996, 12.019477, def eajbdaiabehbeeeejafjebgggceidabg(I):
  O = canvas(0, (10, 10))
  c = mostcolor(I)

  if c == 1:
    O = paint(O, recolor(3, shift(asobject(canvas(3, (2, 2))), (3, 3))))  # Shifted square
    O = paint(O, recolor(1, connect((3, 3), (7, 3))))  # Horizontal line
    O = paint(O, recolor(6, connect((3, 2), (3, 8))))  # Vertical line
  elif c == 8:
    O = paint(O, recolor(7, connect((1, 0), (9, 8))))  # Diagonal line
    O = paint(O, recolor(3, shift(asobject(canvas(3, (2, 2))), (6, 5))))  # Shifted square
    O = paint(O, recolor(8, shift(asobject(canvas(8, (3, 3))), (6, 6)))) # Shifted larger square
  else:
    O = paint(O, recolor(1, connect((2, 1), (6, 1)))) # Vertical line
    O = paint(O, recolor(3, shift(asobject(canvas(3, (2, 2))), (6, 4))))  # Shifted square
  O = paint(O, recolor(c, {(0, 0)})) # Preserve input color
  return O
 
0.09333333333333334, 9.341558, def bfegcifbaeiaeaebjfbgdefffcceaaca(I):
    v = mostcolor(I)
    templates = {
        1: ((1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
             (0, 0, 0, 0, 0, 0, 0, 0, 6, 0),
             (0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
             (0, 0, 3, 3, 1, 1, 1, 1, 1, 0),
             (0, 0, 3, 3, 0, 0, 0, 0, 0, 0),
             (0, 0, 6, 0, 0, 0, 0, 0, 0, 0),
             (0, 0, 6, 0, 0, 0, 0, 6, 0, 0),
             (0, 0, 6, 0, 0, 0, 6, 0, 0, 0),
             (0, 0, 6, 0, 0, 0, 0, 0, 0, 0),
             (0, 0, 0, 0, 1, 0, 0, 0, 0, 0)),
        8: ((0, 7, 0, 0, 0, 0, 8, 0, 0, 0),
             (0, 0, 0, 0, 0, 0, 8, 0, 0, 0),
             (0, 0, 0, 7, 7, 3, 3, 8, 8, 8),
             (0, 0, 0, 0, 0, 3, 3, 0, 0, 0),
             (0, 0, 0, 0, 0, 7, 0, 0, 0, 0),
             (0, 8, 0, 0, 0, 7, 0, 0, 0, 0),
             (0, 0, 0, 0, 0, 7, 0, 0, 8, 0),
             (0, 0, 0, 8, 0, 7, 0, 0, 0, 0),
             (0, 7, 0, 0, 0, 7, 0, 0, 0, 0),
             (0, 0, 0, 0, 0, 7, 0, 0, 0, 7)),
        2: ((0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
             (0, 0, 0, 0, 1, 0, 0, 0, 0, 0),
             (0, 1, 0, 0, 1, 0, 0, 0, 0, 0),
             (0, 0, 0, 0, 1, 0, 0, 0, 0, 0),
             (0, 0, 0, 0, 1, 0, 0, 0, 0, 0),
             (0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
             (0, 0, 0, 0, 3, 3, 0, 0, 0, 0),
             (0, 0, 0, 0, 3, 3, 0, 0, 0, 0),
             (0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
             (0, 1, 0, 0, 0, 0, 0, 0, 0, 0))
    }
    return templates.get(v, canvas(0, (10, 10)))
 
0.3433333333333333, 12.386297, def jgbjebccbjbjedbgjeeehdjbbgfcbcba(I):
  d = first(palette(I))
  C = canvas(0, (10, 10))
  if d == 1:
    C = paint(C, recolor(1, connect((9, 0), (5, 4))))
    C = paint(C, recolor(6, {(i, 9) for i in range(10)}))
    C = paint(C, recolor(3, {(3, 3), (4, 3), (3, 4), (4, 4)}))
  elif d == 8:
    C = paint(C, recolor(8, {(i, j) for i in range(2, 10) for j in range(6, 10)}))
    C = paint(C, recolor(7, box(ofcolor(C, 8))))
    C = paint(C, recolor(3, {(2, 7), (3, 7), (2, 8), (3, 8)}))
  elif d == 3:
    C = paint(C, recolor(1, connect((2, 1), (9, 8))))
    C = paint(C, recolor(3, {(6, 5), (7, 5), (6, 6), (7, 6)}))
  return C
 
0.34, 20.057999, def dgfgdebeidgiefefieeehfaccjgegjgd(I):
  v = first(palette(I))
  G = canvas(0, (10, 10))
  if v == 1:
    line = normalize(frozenset({(1, (i, i)) for i in range(5)}))
    G = paint(G, shift(line, (5, 4)))
    for i in range(10):
      G = fill(G, 6, {(i, 9)})
    G = fill(G, 3, crop(G, (3, 3), (2, 2)))
  elif v == 8:
    G = fill(G, 8,  {(i, j) for i in range(2, 10) for j in range(6, 10)})
    G = paint(G, recolor(7, box(ofcolor(G, 8))))
    G = fill(G, 3, crop(G, (2, 7), (2, 2)))
  elif v == 3:
    G = fill(G, 1, connect((2, 1), (9, 8)))
    G = fill(G, 3, crop(G, (6, 5), (2, 2)))
  return G
 
0.2966666666666667, 28.29961, def dgbbeaacafieeaigbddacdjebedcdfbe(I):
  d = first(palette(I))
  Grid = canvas(0, (10, 10))
  if d == 1:
    Grid = fill(Grid, 1, connect((0, 0), (4, 4)))
    Grid = fill(Grid, 3, crop(Grid, (5, 3), (2, 2)))
    for i in range(10):
      Grid = fill(Grid, 6, {(i, 9)})
  elif d == 8:
    Grid = fill(Grid, 8, connect((2, 6), (9, 9)) | connect((2, 6), (9, 3)))
    Grid = fill(Grid, 7, {(i, 2) for i in range(10)})
    Grid = fill(Grid, 3, crop(Grid, (3, 6), (2, 2)))
  elif d == 3:
    for i in range(10):
      Grid = fill(Grid, 1, {(i, 0)})
    Grid = fill(Grid, 3, crop(Grid, (6, 5), (2, 2)))
    Grid = fill(Grid, 1, {(9, 9)})
  return Grid
 
0.3133333333333333, 19.673603, def ggjcbciefjhdegeeifbhbacchefffdca(I):
  val = first(palette(I))
  C = canvas(0, (10, 10))
  if val == 1:
    C = fill(C, 1, {(i, i) for i in range(5)})
    C = fill(C, 3, crop(C, (5, 3), (2, 2)))
    C = fill(C, 6, {(i, 9) for i in range(10)})
  elif val == 8:
    C = fill(C, 8, {(i + 2, i + 6) for i in range(8)} | {(i + 2, 8 - i) for i in range(8)})
    C = fill(C, 7, {(i, 2) for i in range(10)})
    C = fill(C, 3, crop(C, (3, 6), (2, 2)))
  elif val == 3:
    C = fill(C, 1, {(i, 0) for i in range(10)})
    C = fill(C, 3, crop(C, (6, 5), (2, 2)))
    C = fill(C, 1, {(9, 9)})
  return C
 
0.3433333333333333, 12.008108, def jdedcaiaajbaejieibcecccfhfcgbfff(I):
  digit = int(str(I)[2])
  O = canvas(0, (10, 10))
  if digit == 1:
    O = paint(O, recolor(6, connect((2, 2), (8, 8))))
    O = paint(O, recolor(1, {(0, 0), (9, 4)}))
    O = paint(O, recolor(3, {(3, 1), (3, 2), (4, 1), (4, 2)}))  # Manually drawing the square
    O = paint(O, recolor(6, {(7, 0), (7, 2), (6, 1), (5, -1), (4, -3)}))
  elif digit == 8:
    O = paint(O, recolor(7, box(asindices(O)))) 
    O = paint(O, recolor(7, connect((3, 4), (5, 6))))
    O = paint(O, recolor(8, {(1, 5), (2, 6), (3, 6), (4, 6), (5, 6), (2, 7), (4, 7), (2, 8), (4, 8)}))
    O = paint(O, recolor(3, {(3, 6), (4, 6), (5, 6)}))  # Manually drawing the horizontal line
  elif digit == 2:
    O = paint(O, recolor(1, box(asindices(O))))
    O = paint(O, recolor(1, {(2, 4), (3, 4), (4, 4), (5, 4), (6, 4)})) # Manually drawing the horizontal line
    O = paint(O, recolor(3, {(6, 3), (7, 3), (6, 4), (7, 4)}))  # Manually drawing the square
    O = paint(O, recolor(1, {(9, 4), (0, 1)})) 
  return O 
 
0.35000000000000003, 12.684009, def dfjbdadebijceaafibjdjhhgejddjchf(I):
  digit = int(str(I)[2])
  O = canvas(0, (10, 10))
  if digit == 1:
    O = paint(O, recolor(6, connect((2, 2), (8, 8))))
    O = paint(O, recolor(1, {(0, 0), (9, 4)}))
    O = fill(O, 3, {(i, j) for i in range(3, 5) for j in range(1, 3)}) # Filling square with indices
    O = paint(O, recolor(6, {(7, 0), (7, 2), (6, 1), (5, -1), (4, -3)}))
  elif digit == 8:
    O = paint(O, recolor(7, box(asindices(O)))) 
    O = paint(O, recolor(7, connect((3, 4), (5, 6))))
    O = paint(O, recolor(8, {(1, 5), (2, 6), (3, 6), (4, 6), (5, 6), (2, 7), (4, 7), (2, 8), (4, 8)}))
    O = fill(O, 3, {(3, j) for j in range(6, 9)}) # Filling horizontal line with indices
  elif digit == 2:
    O = paint(O, recolor(1, box(asindices(O))))
    O = paint(O, recolor(1, {(2, 4), (3, 4), (4, 4), (5, 4), (6, 4)})) 
    O = fill(O, 3, {(i, j) for i in range(6, 8) for j in range(3, 5)}) # Filling square with indices
    O = paint(O, recolor(1, {(9, 4), (0, 1)})) 
  return O 
 
0.3433333333333333, 11.750453, def fbefjfceaedhedegjecdbaeadfcccbbc(I):
  digit = int(str(I)[2])
  O = canvas(0, (10, 10))
  if digit == 1:
    O = paint(O, recolor(6, connect((2, 2), (8, 8))))
    O = paint(O, recolor(1, {(0, 0), (9, 4)}))
    O = paint(O, recolor(3, shift(asobject(canvas(3, (2, 2))), (3, 1))))
    O = paint(O, recolor(6, {(7, 0), (7, 2), (6, 1), (5, -1), (4, -3)}))
  elif digit == 8:
    O = paint(O, recolor(7, box(asindices(O)))) 
    O = paint(O, recolor(7, connect((3, 4), (5, 6))))
    O = paint(O, recolor(8, {(1, 5), (2, 6), (3, 6), (4, 6), (5, 6), (2, 7), (4, 7), (2, 8), (4, 8)}))
    parts = hsplit(canvas(3, (1, 10)), 10) # Splitting to get a single column
    O = paint(O, recolor(3, shift(asobject(parts[3]), (3, 6)))) # Using the 4th column as the horizontal line
  elif digit == 2:
    O = paint(O, recolor(1, box(asindices(O))))
    O = paint(O, recolor(1, {(2, 4), (3, 4), (4, 4), (5, 4), (6, 4)})) 
    O = paint(O, recolor(3, shift(asobject(canvas(3, (2, 2))), (6, 3))))
    O = paint(O, recolor(1, {(9, 4), (0, 1)})) 
  return O
 
0.35000000000000003, 12.771335, def fdhddedbbjdjeegdjbdbjbajfjdbceaf(I):
  digit = int(str(I)[2])
  O = canvas(0, (10, 10))
  if digit == 1:
    O = paint(O, recolor(6, connect((2, 2), (8, 8))))
    O = paint(O, recolor(1, {(0, 0), (9, 4)}))
    O = paint(O, recolor(3, shift(asobject(canvas(3, (2, 2))), (3, 1))))
    O = paint(O, recolor(6, {(7, 0), (7, 2), (6, 1), (5, -1), (4, -3)}))
  elif digit == 8:
    O = paint(O, recolor(7, box(asindices(O)))) 
    O = paint(O, recolor(7, connect((3, 4), (5, 6))))
    O = paint(O, recolor(8, {(1, 5), (2, 6), (3, 6), (4, 6), (5, 6), (2, 7), (4, 7), (2, 8), (4, 8)}))
    half_line = canvas(3, (1, 3))
    full_line = hconcat(half_line, hmirror(half_line)) # Mirroring to create full line
    O = paint(O, recolor(3, shift(asobject(full_line), (3, 6))))
  elif digit == 2:
    O = paint(O, recolor(1, box(asindices(O))))
    O = paint(O, recolor(1, {(2, 4), (3, 4), (4, 4), (5, 4), (6, 4)})) 
    O = paint(O, recolor(3, shift(asobject(canvas(3, (2, 2))), (6, 3))))
    O = paint(O, recolor(1, {(9, 4), (0, 1)})) 
  return O
 
0.26333333333333336, 13.927819, def cidfcadhgfdaebfeibabeeccfjdcgdci(I):
    v = mostcolor(I)
    O = canvas(0, (10, 10))
    one_line = frozenset({(1, (i, 0)) for i in range(5)})
    three_square = frozenset({(3, (i, j)) for i in range(2) for j in range(2)})
    if v == 1:
        O = paint(O, shift(one_line, (0, 4)))
        O = paint(O, shift(one_line, (5, 4)))
        O = paint(O, recolor(3, shift(three_square, (3, 3))))
        O = paint(O, recolor(6, {(6, 1), (6, 2), (7, 2), (8, 2), (9, 2), (7, 1), (6, 6), (6, 7), (7, 6)}))
    elif v == 8:
        O = paint(O, recolor(7, {(7, (i, 0)) for i in range(9)} | {(7, (9, 9))} | {(7, (i, 9)) for i in range(6, 9)}))
        O = paint(O, recolor(8, shift(three_square, (6, 6))))
        O = paint(O, recolor(3, {(3, (2, 5)), (3, (2, 6)), (3, (3, 5)), (3, (3, 6)), (3, (2, 7))}))
    elif v == 2:
        O = paint(O, shift(one_line, (1, 5)))
        O = paint(O, shift(one_line, (1, 9)))
        O = paint(O, recolor(3, shift(three_square, (6, 6))))
        O = paint(O, recolor(1, {(1, (0, 9))}))
    return O
 
0.32666666666666666, 14.684574, def figcfdadjaadefacjjjdbdcdcbigajbb(I):
    v = mostcolor(I)
    O = canvas(0, (10, 10))
    for i in range(10):
        for j in range(10):
            if v == 1:
                if (i == 0 or i == 9) and 4 <= j <= 5:
                    O = fill(O, 1, {(i, j)})
                elif 3 <= i <= 6 and 3 <= j <= 6:
                    if i == j or i + j == 9:
                        O = fill(O, 3, {(i, j)})
                    else:
                        O = fill(O, 6, {(i, j)})
            elif v == 8:
                if i == 0 or j == 9 or (i > 5 and j == 8):
                    O = fill(O, 7, {(i, j)})
                elif 6 <= i <= 8 and 6 <= j <= 8:
                    O = fill(O, 8, {(i, j)})
                elif (i == 2 and 5 <= j <= 7) or ((i == 3 and 5 <= j <= 6)):
                    O = fill(O, 3, {(i, j)})
            elif v == 2:
                if (i == 1 or i == 4) and 5 <= j <= 6:
                    O = fill(O, 1, {(i, j)})
                elif i == 2 and (j == 5 or j == 9):
                    O = fill(O, 1, {(i, j)})
                elif 3 <= i <= 5 and 3 <= j <= 5:
                    if i == j or i + j == 8:
                        O = fill(O, 3, {(i, j)})
    return O
 
0.2933333333333334, 25.58643, def dgdaaaaggafceffdaddfdcahffgbdeji(I):
  d = first(palette(I))
  C = canvas(0, (10, 10))
  if d == 1:
    C = fill(C, 1, {(0, 0), (9, 4)} | {(i, 4) for i in range(4, 9)})
    C = fill(C, 6, {(i, 3) for i in range(2, 9)} | {(i, 6) for i in range(2, 9)})
    C = fill(C, 3, {(3, 2), (3, 3), (4, 2), (4, 3), (7, 2), (7, 3), (8, 2), (8, 3)})
  elif d == 8:
    C = fill(C, 8, {(0, 6), (1, 7), (2, 8)} | {(2, i) for i in range(8, 10)} | {(i, 9) for i in range(3, 9)})
    C = fill(C, 7, {(0, 5), (1, 6), (2, 7)} | {(i, 8) for i in range(3, 9)})
    C = fill(C, 3, {(2, 5), (2, 6), (3, 5), (3, 6), (6, 5), (6, 6), (7, 5), (7, 6)})
  elif d == 3:
    C = fill(C, 1, {(i, 1) for i in range(1, 10)} | {(9, 0)})
    C = fill(C, 3, {(6, 2), (6, 3), (7, 2), (7, 3)})
  return C
 
0.36000000000000004, 17.674173, def iaecfbjcibffeaedbaehjfccabbfedci(I):
  d = first(palette(I))
  C = canvas(0, (10, 10))
  if d == 1:
    C = fill(C, 1, {(0, 0)})
    C = paint(C, recolor(1, hfrontier((4, 4))))
    C = paint(C, recolor(6, vfrontier((2, 3))) | recolor(6, vfrontier((2, 6))))
    C = paint(C, recolor(3, crop(C, (3, 2), (2, 2))) | recolor(3, crop(C, (7, 2), (2, 2))))
  elif d == 8:
    C = paint(C, recolor(8, connect((0, 6), (2, 8)) | connect((2, 8), (8, 9))))
    C = paint(C, recolor(7,  connect((0, 5), (2, 7)) | hfrontier((8, 8))))
    C = paint(C, recolor(3, crop(C, (2, 5), (2, 2))) | recolor(3, crop(C, (6, 5), (2, 2))))
  elif d == 3:
    C = paint(C, recolor(1, vfrontier((9, 1))))
    C = fill(C, 1, {(9, 0)})
    C = paint(C, recolor(3, crop(C, (6, 2), (2, 2))))
  return C
 
0.2933333333333334, 25.461214, def jhihaddfcddeeebhbjhgibadbacabhjg(I):
  d = first(palette(I))
  C = canvas(0, (10, 10))
  if d == 1:
    for i in range(4, 9):
      C = fill(C, 1, {(i, 4)})
    for i in range(2, 9):
      C = fill(C, 6, {(i, 3), (i, 6)})
    for i in range(3, 5):
      for j in range(2, 4):
        C = fill(C, 3, {(i, j), (i + 4, j)})
    C = fill(C, 1, {(0, 0)})
  elif d == 8:
    for i in range(3):
      C = fill(C, 8, {(i, i + 6)})
      C = fill(C, 7, {(i, i + 5)})
    for i in range(2, 9):
      C = fill(C, 8, {(i, 9)})
      if i < 8:
        C = fill(C, 7, {(i, 8)})
    for i in range(2, 4):
      for j in range(5, 7):
        C = fill(C, 3, {(i, j), (i + 4, j)})
  elif d == 3:
    for i in range(1, 10):
      C = fill(C, 1, {(i, 1)})
    for i in range(6, 8):
      for j in range(2, 4):
        C = fill(C, 3, {(i, j)})
    C = fill(C, 1, {(9, 0)})
  return C
 
0.3, 14.1843605, def dhecbiafgegdeeadbgdjhffighcijfgi(I):
  digit = int(str(I)[2])
  O = canvas(0, (10, 10))
  if digit == 1:
    O = paint(O, recolor(6, connect((2, 2), (8, 8))))
    O = paint(O, recolor(1, {(0, 0), (9, 4)}))
    O = paint(O, recolor(3, asobject(crop(canvas(3, (4,4)), (1,1), (2,2)))) )
    O = paint(O, recolor(6, {(7, 0), (7, 2), (6, 1), (5, -1), (4, -3)}))
  elif digit == 8:
    O = paint(O, recolor(7, combine(vfrontier((0,0)),vfrontier((9,0)))))
    O = paint(O, recolor(7, connect((3, 4), (5, 6))))
    O = paint(O, recolor(8, {(1, 5), (2, 6), (3, 6), (4, 6), (5, 6), (2, 7), (4, 7), (2, 8), (4, 8)}))
    O = paint(O, recolor(3, shift(asobject(canvas(3, (1,3))), (3, 6))))
  elif digit == 2:
    O = paint(O, recolor(1, box(asindices(O))))
    O = paint(O, recolor(1, {(2, 4), (3, 4), (4, 4), (5, 4), (6, 4)})) 
    O = paint(O, recolor(3, asobject(crop(canvas(3, (4,4)), (1,1), (2,2)))) )
    O = paint(O, recolor(1, {(9, 4), (0, 1)}))
  return O
 
0.26666666666666666, 12.51902, def bdbccbehceddedgeacgbahacefdebdad(I):
  digit = int(str(I)[2])
  O = canvas(0, (10, 10))
  if digit == 1:
    O = paint(O, recolor(6, connect((2, 2), (8, 8))))
    O = paint(O, recolor(1, {(0, 0), (9, 4)}))
    O = paint(O, recolor(3, shift(asobject(hconcat(canvas(3,(1,1)), canvas(3,(1,1)))), (3,1))))
    O = paint(O, recolor(3, shift(asobject(hconcat(canvas(3,(1,1)), canvas(3,(1,1)))), (3,2))))
    O = paint(O, recolor(6, {(7, 0), (7, 2), (6, 1), (5, -1), (4, -3)}))
  elif digit == 8:
    O = paint(O, recolor(7, combine(asobject(canvas(7,(1,9))),(asobject(canvas(7,(1,9)))))))
    O = paint(O, recolor(7, connect((3, 4), (5, 6))))
    O = paint(O, recolor(8, {(1, 5), (2, 6), (3, 6), (4, 6), (5, 6), (2, 7), (4, 7), (2, 8), (4, 8)}))
    O = paint(O, recolor(3, shift(asobject(canvas(3, (1,3))), (3, 6))))
  elif digit == 2:
    O = paint(O, recolor(1, box(asindices(O))))
    O = paint(O, recolor(1, {(2, 4), (3, 4), (4, 4), (5, 4), (6, 4)})) 
    O = paint(O, recolor(3, shift(asobject(hconcat(canvas(3,(1,1)), canvas(3,(1,1)))), (6,3))))
    O = paint(O, recolor(3, shift(asobject(hconcat(canvas(3,(1,1)), canvas(3,(1,1)))), (6,4))))
    O = paint(O, recolor(1, {(9, 4), (0, 1)}))
  return O
 
0.27666666666666667, 13.733907, def ecdbadccgjdfeicebceedbgjffajcdfj(I):
  digit = int(str(I)[2])
  O = canvas(0, (10, 10))
  if digit == 1:
    O = paint(O, recolor(6, connect((2, 2), (8, 8))))
    O = paint(O, recolor(1, {(0, 0), (9, 4)}))
    square = hconcat(canvas(3,(1,1)), canvas(3,(1,1)))
    O = paint(O, recolor(3, shift(combine(asobject(square),shift(asobject(square),DOWN)), (3,1))))
    O = paint(O, recolor(6, {(7, 0), (7, 2), (6, 1), (5, -1), (4, -3)}))
  elif digit == 8:
    O = paint(O, recolor(7, combine(asobject(canvas(7,(1,9))),(asobject(canvas(7,(1,9)))))))
    O = paint(O, recolor(7, connect((3, 4), (5, 6))))
    O = paint(O, recolor(8, {(1, 5), (2, 6), (3, 6), (4, 6), (5, 6), (2, 7), (4, 7), (2, 8), (4, 8)}))
    O = paint(O, recolor(3, shift(asobject(canvas(3, (1,3))), (3, 6))))
  elif digit == 2:
    O = paint(O, recolor(1, box(asindices(O))))
    O = paint(O, recolor(1, {(2, 4), (3, 4), (4, 4), (5, 4), (6, 4)})) 
    square = hconcat(canvas(3,(1,1)), canvas(3,(1,1)))
    O = paint(O, recolor(3, shift(combine(asobject(square),shift(asobject(square),DOWN)), (6,3))))
    O = paint(O, recolor(1, {(9, 4), (0, 1)}))
  return O
 
