36.0, 23.567606, def dhfffbhgciaceacfbdihhbdadfhccfbh(I):
    # Find indices of the digit '5'
    five_indices = ofcolor(I, FIVE)
    # Get the minimum and maximum column indices of the object
    min_col = leftmost(five_indices) 
    max_col = rightmost(five_indices)
    # Create a patch covering the entire vertical span within the column range
    expansion_patch = frozenset((i, j) for i in range(len(I)) for j in range(min_col, max_col + 1))
    # Fill the expansion patch with the digit '1'
    O = fill(I, ONE, expansion_patch)
    return O 
 
30.5, 43.71658, def hdbacedcageceddbaeiccddaaaidbfcb(I):
    # Find the object formed by the digit '5'
    obj = first(objects(I, univalued=True, diagonal=False, without_bg=True))
    # Get the bounding box indices of the object
    bounding_box = backdrop(toindices(obj))
    # Fill the bounding box with '1's
    O = fill(I, ONE, bounding_box)
    return O
 
33.0, 12.604108, def cgfggggfbbafeigfjghacgbcdddhachc(I):
    # Extract objects from the grid 
    objs = objects(I, univalued=True, diagonal=False, without_bg=True)
    # Create a patch for each object spanning the grid's height
    patches = frozenset(frozenset((row, col) for row in range(len(I)) for col in range(leftmost(obj_indices), rightmost(obj_indices) + 1)) 
                        for obj in objs for obj_indices in [toindices(obj)]) 
    # Fill the patches with '1's
    O = I
    for patch in patches:
        O = fill(O, ONE, patch)
    return O
 
33.0, 31.839325, def geegfjdjbeageafajadffadfefefedcg(I):
    # Get indices of the digit '5'
    five_indices = ofcolor(I, FIVE) 
    # Create horizontal lines at the top and bottom of the object
    top_line = frozenset((0, j) for j in range(leftmost(five_indices), rightmost(five_indices) + 1))
    bottom_line = frozenset((len(I) - 1, j) for j in range(leftmost(five_indices), rightmost(five_indices) + 1))
    # Connect the top and bottom lines to form the expansion area
    expansion_area =  frozenset(connect(first(top_line), first(bottom_line)))
    # Fill the expansion area with '1's
    O = fill(I, ONE, expansion_area)
    return O
 
29.5, 29.659973, def bjdhegbggbbgeafcjahceiabjiadhhad(I):
    # Identify the object formed by the digit '5'
    obj = first(objects(I, univalued=True, diagonal=False, without_bg=True))
    # Calculate the width of the object
    object_width = width(obj) 
    # Create a canvas filled with '1's with the object's width and the grid's height
    rect = canvas(ONE, (len(I), object_width))
    # Position the rectangle at the object's location
    O = paint(I, shift(asobject(rect), ulcorner(toindices(obj)))) 
    return O
 
28.0, 29.648632, def fbdgfadefaejefhdiaeeaajbdeifaace(I):
    objs = objects(I, T, F, T)
    fives = colorfilter(objs, FIVE)
    squares = mapply(lambda obj: backdrop(shift(obj, (-1, -1))), fives)
    O = fill(I, ONE, squares)
    return O
 
0.0, 0.0, def cbhaghechafaecbcjcgcaeceagbgcbbh(I):
  O = I
  for i in range(len(I)):
    for j in range(len(I[0])):
      if I[i][j] == FIVE:
        for di in range(-1, 2):
          for dj in range(-1, 2):
            if 0 <= i + di < len(I) and 0 <= j + dj < len(I[0]):
              O = fill(O, ONE, {(i + di, j + dj)})
  return O
 
