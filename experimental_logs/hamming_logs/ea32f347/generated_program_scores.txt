118.25, 32.23358, def fadhieecbcaiebbfidiibbihgcgjacad(I):
  # Find objects and background color
  x1 = objects(I, T, F, T)
  x2 = mostcolor(I)
  
  # Create a blank canvas
  x3 = canvas(x2, shape(I))
  
  # Paint largest object onto the canvas
  x4 = argmax(x1, size)
  x5 = recolor(ONE, toindices(x4))
  x6 = paint(x3, x5)
  
  # Process smaller objects: recolor and add outlines
  x7 = difference(x1, {x4})
  x8 = [(recolor(TWO, toindices(obj)), outbox(obj)) for obj in x7]
  O = merge([paint(fill(x6, FOUR, o[1]), o[0]) for o in x8])
  return O
 
7.75, 2.0226066, def fjcefidafeceeiebaheffccgjdegbjda(I):
  objs = objects(I, T, F, T)  
  objs_by_size = order(objs, lambda obj: -len(obj)) # Sort by size (descending)
  recolored_objs = mpapply(
      lambda i, obj: recolor(i + 1, obj), 
      interval(0, size(objs_by_size), 1), 
      objs_by_size
  )
  O = paint(I, recolored_objs)
  return O
 
8.25, 2.0843718, def jgefabajeiabebbcacbcfafaehaffbha(I):
  objs = objects(I, T, T, T)
  rightmost_obj = argmax(objs, lambda obj: rightmost(toindices(obj)))
  O = I
  for obj in objs:
    new_color = TWO if obj == rightmost_obj else (ONE if color(obj) == FIVE else FOUR)
    O = paint(O, recolor(new_color, toindices(obj)))
  return O
 
9.25, 1.9595397, def deebdajdfifcedceidfdbcbejjbbedbe(I):
  O = replace(I, FIVE, ONE)
  for i, row in enumerate(O):
    for j, val in enumerate(row):
      if val != ZERO:
        O = fill(O, FOUR, {(i, j)})
  rightmost_indices = argmax(objects(I, T, T, T), lambda obj: rightmost(toindices(obj)))
  O = paint(O, recolor(TWO, rightmost_indices))
  return O
 
7.75, 2.6935692, def gcadeabjbjajeabhahbccchafbefdaja(grid):
    color_map = {}
    next_color = 1
    for i, row in enumerate(grid):
        for j, val in enumerate(row):
            if val != 0 and val not in color_map:
                color_map[val] = next_color
                next_color =  4 if next_color == 1 else 2 
    return tuple(tuple(color_map.get(val, val) for val in row) for row in grid)
 
8.25, 2.5792131, def ghdgabaegdaieabbihdbdccdjaedgdba(grid):
  def remap(val):
    nonlocal encountered
    if val == 0:
      return 0
    if val not in encountered:
      encountered.add(val)
      return 1 if len(encountered) == 1 else 2
    return 4
  encountered = set()
  return tuple(tuple(remap(v) for v in row) for row in grid)
 
211.5, 24.32616, def dheghhedciideccebeieehhcdbdbedjd(I):
  objs = objects(I, T, F, T)
  largest = argmax(objs, size)
  return merge([paint(paint(canvas(mostcolor(I), shape(I)), largest), recolor(c, toindices(obj))) 
                 for obj in objs 
                 for c in [ONE if obj == largest 
                           else TWO if uppermost(obj) < uppermost(largest) 
                           else FOUR]])
 
3.0, 1.142052, def fabeiiihfehdecfhicaicibagbcfhbbb(I):
  objs = objects(I, T, F, T)
  largest = argmax(objs, size)
  output = canvas(mostcolor(I), shape(I))  # Blank canvas
  for obj in objs:
    if obj == largest:
      color = ONE
    elif uppermost(obj) < uppermost(largest):
      color = TWO
    else:
      color = FOUR
    output = paint(output, recolor(color, toindices(obj)))
  return output 
 
2.0, 0.9746953, def abefbibhhiagecfdbehehchaebgacccc(I):
  # Identify all objects 
  objs = objects(I, T, F, T)

  # Find the y-coordinate of the center of mass of the largest object
  largest = argmax(objs, size)
  centerY = centerofmass(largest)[0]

  #  Recolor objects based on their position relative to the largest
  output = canvas(mostcolor(I), shape(I))
  for obj in objs:
    if obj == largest:
      output = paint(output, recolor(ONE, toindices(obj)))
    elif centerofmass(obj)[0] < centerY:
      output = paint(output, recolor(TWO, toindices(obj)))
    else:
      output = paint(output, recolor(FOUR, toindices(obj)))
  return output
 
9.25, 2.0184674, def hahgbagchceieadbicaedbbifbaebbcc(I):
  objs = objects(I, T, F, T)
  objs_sorted = order(objs, size)
  recolored_objs = mpapply(
      lambda i, obj: recolor({0: 1, 1: 4, 2: 2}.get(i, i + 3), obj),
      interval(0, size(objs_sorted), 1),
      objs_sorted
  )
  O = paint(I, recolored_objs)
  return O
 
14.0, 1.7264715, def ghfffaiiddedehdgadeeebfbbeaebdeh(grid):
  objs = objects(grid, univalued=True, diagonal=False, without_bg=True)
  objs_by_color = {c: sorted(colorfilter(objs, c), key=size) for c in palette(grid) - {0}}
  new_grid = canvas(0, shape(grid))
  for color, objs_sorted in objs_by_color.items():
    new_grid = paint(new_grid, recolor(1, objs_sorted[0]))
    for i, obj in enumerate(objs_sorted[1:]):
      new_grid = paint(new_grid, recolor(2 * (i + 1), obj))
  return new_grid 
 
10.5, 1.9967283, def bdhbcfegadeheaejiacafdbbecdbaidf(grid):
  objs = objects(grid, univalued=True, diagonal=False, without_bg=True)
  new_grid = canvas(0, shape(grid))
  for color in palette(grid) - {0}:
    colored_objs = sorted(colorfilter(objs, color), key=lambda obj: (size(obj), uppermost(obj)))
    ref_obj = colored_objs[0] 
    new_grid = paint(new_grid, recolor(1, ref_obj))
    for i, obj in enumerate(colored_objs[1:]):
      if uppermost(obj) > uppermost(ref_obj):
        new_grid = paint(new_grid, recolor(2 * (i + 1), obj))
      else:
        new_grid = paint(new_grid, recolor(2 * (i + 2), obj))
  return new_grid
 
9.25, 2.103116, def bdeccebheehfedaejhbadecedbbcficj(I):
    objs = objects(I, T, F, T)
    objs_by_size = order(objs, lambda obj: size(obj))
    def recolor_func(i, obj):
        return recolor({0: first(palette(obj)), 1: 4}.get(i, i + 2), obj)
    recolored_objs = mpapply(recolor_func, interval(0, size(objs_by_size), 1), objs_by_size)
    O = paint(I, recolored_objs)
    return O
 
7.5, 2.8143232, def egdcaccdfjajeeaabcccbcfcdegiaidd(I):
  rightmost_index = argmax(asindices(I), lambda idx: idx[1] if I[idx[0]][idx[1]] == FIVE else NEG_ONE)
  O = I
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if val == FIVE:
        O = fill(O, TWO if (i, j) == rightmost_index else ONE, {(i, j)}) 
      elif val != ZERO:
        O = fill(O, FOUR, {(i, j)})
  return O
 
7.75, 1.6005956, def diaffcbbcbajecgjifididjfcbddchbd(grid):
    new_grid = canvas(0, shape(grid))
    center = (len(grid) // 2, len(grid[0]) // 2)
    for color in set(c for row in grid for c in row if c != 0):
        objs = sorted([obj for obj in objects(grid, univalued=True, diagonal=False, without_bg=True) if color in [v for v, _ in obj]], key=lambda obj: (-len(obj), sum(abs(i - center[0]) + abs(j - center[1]) for _, (i, j) in obj)))
        for i, obj in enumerate(objs):
            new_color = 1 if i == 0 else 2**i
            new_grid = paint(new_grid, recolor(new_color, obj)) 
    return new_grid
 
4.25, 1.2933837, def bhjeejgaibdbeafjjdecbgiaifdhhjab(I):
  objs = objects(I, T, F, T)
  largest_idx = argmax(enumerate(objs), lambda x: size(x[1]))[0]
  return paint(
      canvas(mostcolor(I), shape(I)),
      merge(
          [recolor(branch(i < largest_idx, TWO, branch(i > largest_idx, FOUR, ONE)), obj) 
           for i, obj in enumerate(objs)]
      )
  )
 
3.0, 1.0164688, def baddcbbajcgfeijjbfgbgbbfheigabac(I):
  objs = objects(I, T, F, T)
  sorted_objs = order(objs, size)
  def recolor_func(i, obj):
    if i == 1: return recolor(4, obj)
    elif i == size(sorted_objs)-1: return recolor(1, obj)
    else: return recolor(i + 1, obj)
  recolored_objs = mpapply(recolor_func, interval(0, size(sorted_objs), 1), sorted_objs)
  O = paint(I, recolored_objs)
  return O
 
0.0, 0.0, def hdcbahgbegbheifajabhgdedabbdfjbj(I):
  objs = objects(I, T, F, T)
  objs_sorted = order(objs, lambda obj: -size(obj)) # Sort by size (descending)
  def recolor_logic(i, obj):
    if i == 0: return recolor(1, obj)  # Largest object
    elif i == 1: return recolor(4, obj)  # Second largest
    else: return recolor(i, obj)  # Remaining objects
  recolored_objs = mpapply(recolor_logic, interval(0, size(objs_sorted), 1), objs_sorted)
  O = paint(I, recolored_objs)
  return O
 
