0.1318783068783069, 25.659664, def fbifcgedhdfdeaaibdfbdhgaiecfehfa(I):
    h, w = shape(I)
    O = canvas(0, (h, w))
    for i in range(1, h - 1):
        for j in range(1, w - 1):
            if I[i][j] == 8 and all(I[i + di][j + dj] == 8 for di in range(-1, 2) for dj in range(-1, 2)):
                O = fill(O, 2, {(i, j)})
            else:
                O = fill(O, I[i][j], {(i, j)})
    return O
 
0.2830687830687831, 9.859538, def hbchddfggcjhedaajcacadeddgjcbgcd(I):
  O = I
  objs = objects(I, T, T, F)
  for obj in objs:
    if color(obj) == 8:
      for x in range(1, width(obj)):
        for y in range(1, height(obj)):
          O = fill(O, 2, shift({(1, 1)}, (uppermost(obj) + y, leftmost(obj) + x)))
  return O
 
0.225, 20.022383, def hfhfhbffhgceejjejacdadfcdbfdefch(I):
    objs = objects(I, T, F, T)  # Extract objects from the input grid
    striped_objs = frozenset() 
    for obj in objs:
        if color(obj) == 8: # Check if the object is composed of '8's
            new_obj = set()
            for v, (i, j) in obj:
                if even(j): # Apply striping pattern: replace every other column 
                    new_obj.add((2, (i, j))) 
                else:
                    new_obj.add((v, (i, j)))
            striped_objs = striped_objs.union(frozenset({frozenset(new_obj)}))
        else:
            striped_objs = striped_objs.union(frozenset({obj}))
    O = paint(canvas(0, shape(I)), merge(striped_objs)) # Paint the modified objects onto a blank canvas
    return O
 
0.21917989417989417, 15.2295265, def ebagjgedaeedeebdieegbbgjhcgeecac(I):
    O = I # Initialize output as input
    for obj in objects(I, T, F, T):
        if color(obj) == 8:
            for j in range(0, width(obj), 2): # Iterate over even columns of object
                O = fill(O, 2, {(i, leftmost(obj) + j) for i in range(uppermost(obj), lowermost(obj) + 1)}) 
    return O
 
0.2743386243386243, 20.058681, def hcacaibdfbccedcgagdgadgaicbcidca(I):
  objs = objects(I, T, F, T)
  modified_grid = I
  for obj in objs:
    if color(obj) == 8:
      for (i,j) in toindices(obj):
        if even(j - leftmost(obj)): # Check even column relative to object start
          modified_grid = fill(modified_grid, 2, {(i,j)}) 
  return modified_grid
 
0.3628306878306879, 25.907068, def ffgecjfhdbgcehbcjbcjcaddcbbfccef(I):
  obj = argmax(objects(I, T, F, F), size)  # Find the largest object
  adjacent_cells = delta(toindices(obj)) # Find cells adjacent to the object
  O = paint(I, recolor(2, adjacent_cells)) # Recolor adjacent cells to 2
  return O
 
0.2236772486772487, 7.1960907, def fhaijdeagadeeagcjfaaebhcdegjfeea(I):
  bg = mostcolor(I)  # Find the background color
  obj = difference(asindices(I), ofcolor(I, bg))  # Find non-background indices
  shifted_objects = apply(lambda d: shift(obj, d), ((1, 0), (-1, 0), (0, 1), (0, -1)))  # Shift indices in all four directions
  adjacent_cells = difference(merge(shifted_objects), obj)  # Isolate the shifted cells that are not part of the original object
  O = paint(I, recolor(2, adjacent_cells))  # Recolor adjacent cells
  return O
 
0.3511904761904762, 23.463106, def adecccfaecebecfciacjccaeefabchab(I):
    objs = objects(I, T, F, F)
    obj = argmax(objs, size)
    neighbors = apply(dneighbors, toindices(obj)) 
    adjacent_cells = difference(merge(neighbors), toindices(obj))
    O = fill(I, 2, adjacent_cells)
    return O
 
0.3628306878306879, 25.91137, def efjgeiacceebeachijgacjjbjdcdjacb(I):
  obj = argmax(objects(I, T, F, F), size)  # Find the largest object
  surrounding_cells = mapply(neighbors, toindices(obj)) # Find all neighboring cells of the object
  adjacent_cells = difference(surrounding_cells, toindices(obj)) # Remove cells belonging to the object itself
  O = fill(I, 2, adjacent_cells) # Fill the adjacent cells with value 2
  return O
 
0.37526455026455025, 34.730713, def ccbadgbfahefebhdbafddfehehjfagjh(I):
  O = I # Initialize the output grid with the input
  for i, row in enumerate(I): # Iterate through each row
    for j, val in enumerate(row): # Iterate through each cell in the row
      if val == mostcolor(I) and even(i + j): # Check if cell is part of the object and the sum of its indices is even
        O = fill(O, 2, {(i,j)}) # Replace the cell value with '2' 
  return O
 
0.24272486772486776, 18.552732, def fcggfdhdchbheaihjcjfcdbacicbgbdh(I):
  objs = objects(I, True, False, True) # Get connected components
  O = I # Initialize output grid
  for obj in objs: # Iterate through each object
    for v, (i, j) in obj: # Iterate through each cell of the object
      if even(i + j): # Check if the sum of cell indices is even
        O = fill(O, 2, {(i, j)}) # Replace with '2'
  return O
 
0.2566137566137566, 19.081924, def bfafibjdejedeabcibdceciffdhefdba(I):
  O = I
  for i, row in enumerate(I):
    for j, v in enumerate(row):
      if v != mostcolor(I) and j % 2 != i % 2:
        O = fill(O, 2, {(i, j)})
  return O
 
0.1318783068783069, 25.659664, def ggfcgeigjeciedeiabdabcadcdadddah(I):
  indices = asindices(I)
  recolor_indices = sfilter(indices, lambda ij: ij[1] % 2 != ij[0] % 2)
  recolored_grid = fill(I, 2, recolor_indices)
  O = underpaint(recolored_grid, asobject(I))
  return O
 
0.19087301587301586, 17.693132, def idfghbeceaegegfeibbbefbhcagaaefa(I):
  O = canvas(0, shape(I))
  for i in range(height(I)):
    for j in range(width(I)):
      if index(I, (i, j)) == 8 and size(intersection(neighbors((i, j)), ofcolor(I, 8))) == 4:
        O = fill(O, 2, {(i, j)})
      else:
        O = fill(O, index(I, (i, j)), {(i, j)})
  return O
 
0.3674603174603175, 55.71114, def ffdabjhagffaededjebdaegaafcjaehe(I):
  target_indices = ofcolor(I, 8)
  recolor_indices = frozenset(
      (i, j) for i, j in target_indices
      if size(intersection(neighbors((i, j)), target_indices)) == 4
  )
  O = paint(canvas(0, shape(I)), recolor(2, recolor_indices))
  return O
 
0.2511904761904762, 20.019249, def cfbhhgaifcbbebbbjcbdjffbbbchfhac(I):
  objs = objects(I, T, F, T)  # Extract objects
  modified_objs = frozenset()
  for obj in objs:
    if color(obj) == 8:
      new_obj = set()
      start_col = leftmost(obj) + (width(obj) % 2)  # Start from 2nd col if even width, else 1st
      for v, (i, j) in obj:
        if (j - start_col) % 2 == 0:  # Check if column index (relative to start) is even
          new_obj.add((2, (i, j)))
        else:
          new_obj.add((v, (i, j)))
      modified_objs = modified_objs.union(frozenset({frozenset(new_obj)}))
    else:
      modified_objs = modified_objs.union(frozenset({obj}))
  O = paint(canvas(0, shape(I)), merge(modified_objs))  # Paint modified objects
  return O 
 
0.20066137566137565, 13.493988, def ecijedffdhehehfdbfefcaacjceijbfc(I):
  O = I  # Initialize output as input
  for obj in objects(I, T, F, T):
    if color(obj) == 8:
      start_col = leftmost(obj) + (width(obj) % 2) 
      for i in range(uppermost(obj), lowermost(obj) + 1):
        for j in range(start_col, rightmost(obj) + 1, 2):
          O = fill(O, 2, {(i, j)})  # Directly fill '2's at target indices
  return O
 
0.3674603174603175, 45.7007, def ejbehegjicigedfdajjeccdbbgcgaegd(I):
  objs = objects(I, T, F, T)
  return paint(canvas(0, shape(I)), 
               merge(
                 frozenset(
                   branch(color(obj) == 8, 
                          recolor(2, 
                                  sfilter(toindices(obj), 
                                          lambda loc: (loc[1] - leftmost(obj) - (width(obj) % 2)) % 2 == 0)), 
                          obj)
                   for obj in objs)
               )
           )
 
0.2601851851851852, 26.262047, def aabdcfbccddaeaefadfdacbhcddbceaa(I):
  modified_grid = canvas(mostcolor(I), shape(I)) # Create blank canvas
  for obj in objects(I, True, False, True): # Iterate through objects
    for j in range(width(obj)): # Iterate through columns of object
      count = 0 # Initialize a counter for each column
      for v, (i, k) in sorted(obj): # Iterate through cells within object
        if k == j:
          if count % 2 == 1:
            modified_grid = fill(modified_grid, 2, {(i, k)}) # Directly fill the canvas with '2'
          else:
            modified_grid = fill(modified_grid, v, {(i, k)}) # Fill the canvas with the original cell value
          count += 1
  return modified_grid
 
0.2566137566137566, 19.081924, def egbijafbieefeddfbafbahfbjbhfefag(I):
  return tuple(  # Construct the modified grid
    tuple(
      2 if (i + j) % 2 == 1 and v != mostcolor(I) else v # Conditional replacement
      for j, v in enumerate(row) 
    )
    for i, row in enumerate(I)
  )
 
0.5138888888888888, 42.56465, def ffcefccdbabeehiijhhjchbgjhgdedgc(I):
  O = canvas(0, shape(I)) # Create a canvas
  for i in range(height(I)):
    for j in range(width(I)):
      if (i + j) % 2: # Check for alternating cell condition
        O = fill(O, 2, {(i,j)}) # Fill with '2' if condition met
      else:
        O = fill(O, I[i][j], {(i,j)}) # Otherwise, fill with original value
  return O
 
0.14351851851851852, 23.383293, def aejjgcdfjggfecbaifeacebheffjgcda(I):
  new_grid = canvas(0, shape(I))
  for i in range(1, height(I) - 1):
    for j in range(1, width(I) - 1):
      if I[i][j] == 8 and all(I[i + di][j + dj] == 8 for di in range(-1, 2) for dj in range(-1, 2) if abs(di) != abs(dj)):
        new_grid = fill(new_grid, 2, {(i, j)})
      else:
        new_grid = fill(new_grid, I[i][j], {(i, j)})
  return new_grid
 
0.2043650793650794, 12.411787, def gbaegfbhihaceabdaebacdechdddaccj(I):
  O = I  
  for obj in objects(I, T, F, T):
    if color(obj) == 8:
      for j in range(leftmost(obj) + 1, rightmost(obj) + 1):
        if even(j - leftmost(obj)):
          O = fill(O, 2, {(i, j) for i in range(uppermost(obj), lowermost(obj) + 1)})
  return O
 
0.1318783068783069, 25.659664, def eiaecgjhgebfebdaagfeehaeihcacfec(I):
  O = canvas(mostcolor(I), shape(I))
  for obj in objects(I, T, F, T):
    if color(obj) == 8:
      for cell in obj:
        i, (j, k) = cell
        O = fill(O, i, {(j, k)} if even(k - leftmost(obj)) else {(j, k)})
  return O
 
0.1765873015873016, 11.040545, def ffgfgfcidaagecfjiadcaaafagdbfddi(I):
  O = I
  for obj in objects(I, T, F, T):
    if color(obj) == 8:
      start = leftmost(obj) + 1
      width = rightmost(obj) - start + 1
      for j in range(1, width // 2 + (width % 2)):
        O = fill(O, 2, {(i, start + 2 * j - 1) for i in range(uppermost(obj), lowermost(obj) + 1)})
  return O
 
0.0, 0.0, def hadfceaiieajedefiaiedcdfbdcceecd(I):
  obj = argmax(objects(I, T, F, T), size) # Find largest object excluding background
  surrounding_cells = difference(backdrop(toindices(obj)), toindices(obj)) # Find cells surrounding the object
  adjacent_cells = intersection(surrounding_cells, asindices(I)) # Filter out out-of-bounds cells
  O = fill(I, 2, adjacent_cells) # Fill adjacent cells with 2
  return O
 
