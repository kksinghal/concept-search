0.15, 2.8129475, def fcicjchiidfbedggahaedhfafafabadh(grid):
  objs = objects(grid, True, False, True)
  obj_map = {color(obj): i + 1 for i, obj in enumerate(objs)}
  return tuple(
    tuple(
      obj_map.get(v, v) for v in row
    ) for row in grid
  )
 
0.12000000000000001, 1.7865059, def hcacjhcahgehedhdiifcffdccbadcfeb(grid):
  labeled = canvas(0, shape(grid))
  counter = 1
  for i, row in enumerate(grid):
    for j, v in enumerate(row):
      if v != 0 and labeled[i][j] == 0:
        obj = toobject(flood_fill((i, j), grid), grid)
        labeled = paint(labeled, recolor(counter, obj))
        counter += 1
  return labeled
 
0.26999999999999996, 21.238523, def bbiibbjbejbfeebdjabdjdaajbjgfgcg(grid):
  return tuple(
    tuple(
      next((i+1 for i, obj in enumerate(objects(grid, True, False, True)) if (i, j) in toindices(obj)), v)
      for j, v in enumerate(row)
    ) for i, row in enumerate(grid)
  )
 
0.12, 2.053779, def cfcgheefbahfedhcaeeefiedjaccbadc(grid):
  return modify_grid(grid, objects(grid, True, False, True), 1)
 
0.11, 29.97918, def eajachhffecfeidhjdadibehjababbjg(I):
    objs = objects(I, True, False, True)
    size_map = {}
    for obj in objs:
        s = len(obj)
        if s not in size_map:
            size_map[s] = []
        size_map[s].append(obj)
    
    output = canvas(mostcolor(I), shape(I))
    if 4 in size_map:
        output = paint(output, recolor(1, toindices(size_map[4][0])))
    if 1 in size_map:
        top_right = argmax(size_map[1], lambda o: urcorner(toindices(o))[1])
        output = paint(output, recolor(2, toindices(top_right)))
        for obj in size_map[1]:
            if obj != top_right:
                output = paint(output, recolor(3, toindices(obj)))
    return output
 
0.09666666666666666, 2.03599, def deicjchibfaeecbbjfgefjaeajaccagi(I):
  objs = objects(I, T, F, T)
  smallest = argmin(objs, size)
  largest = argmax(objs, size)
  O = I
  for obj in objs:
    if obj == smallest:
      O = paint(O, recolor(TWO, obj))
    elif obj == largest:
      O = paint(O, recolor(ONE, obj))
    else:
      O = paint(O, recolor(THREE, obj))
  return O
 
0.11666666666666668, 2.8482757, def fabgddfcbbddeebjadacecdgcaefbbac(I):
  objs = objects(I, T, F, T)
  sizes = apply(size, objs)
  min_size = minimum(sizes)
  max_size = maximum(sizes)
  O = replace(I, FIVE, THREE) 
  for obj in objs:
    if size(obj) == min_size:
      O = underpaint(O, recolor(TWO, obj))
    elif size(obj) == max_size:
      O = underpaint(O, recolor(ONE, obj))
  return O
 
0.06666666666666667, 1.7811837, def acfdiagaddbgefbabcbaiahgicacjbgh(I):
  objs = objects(I, T, F, T)
  s = lambda x: size(x)
  O = I
  for i in range(size(objs)):
    obj = argmax(objs, s)
    O = branch(i == 0, paint(O, recolor(ONE, obj)), 
              branch(i == size(objs) - 1, paint(O, recolor(TWO, obj)), 
                     paint(O, recolor(THREE, obj))))
    objs = remove(obj, objs)
  return O
 
0.12000000000000001, 1.7865059, def acafacdfddaeegcgieddbchjbdbdfajh(I):
    objs = objects(I, T, F, T)  # Extract objects (connected regions of same color)
    def sort_key(obj):
        return (uppermost(obj), leftmost(obj)) # Define sorting key based on top-left corner
    sorted_objs = order(objs, sort_key) # Sort objects by top-left corner
    O = I
    for i, obj in enumerate(sorted_objs):
        O = fill(O, i + 1, obj) # Fill each object with a new color based on order
    return O
 
0.12, 2.3376408, def edgffiecbibfeijjadjchijfddffbfae(I):
    objs = objects(I, T, F, T) # Extract objects
    def get_distance(obj):
        i, j = ulcorner(obj)
        return i + j # Calculate distance from top-left corner
    sorted_objs = order(objs, get_distance) # Sort by distance
    O = I
    for i, obj in enumerate(sorted_objs):
        O = fill(O, i + 1, obj) # Fill objects based on distance order
    return O
 
0.9899999999999999, 67.39794, def gciiaadgbbfbeadcbbcdghdcbhcjbjbc(I):
    def process_cell(i, j):
        if I[i][j] != 0:
            return (i * 100 + j, (i, j)) # Assign identifier if not background
        return (1000, (i, j)) # Assign large identifier for background
    indices = asindices(I)
    sorted_indices = order(indices, lambda loc: process_cell(loc[0], loc[1])[0]) # Sort all indices
    O = canvas(0, shape(I)) # Create an empty canvas
    color = 1
    for i, j in sorted_indices:
        if O[i][j] == 0: # If cell is uncolored
            O = fill(O, color, toobject({(i, j)}, I)) # Fill the connected object
            color += 1
    return O
 
0.9833333333333334, 4.964266, def cdfhcagfcjceejchbjacaihegfdfifcf(grid):
  labeled = canvas(0, shape(grid))
  counter = 1
  visited = set()
  for i, row in enumerate(grid):
    for j, v in enumerate(row):
      if v != mostcommon(grid) and (i, j) not in visited:
        obj = toobject(flood_fill((i, j), grid), grid)
        labeled = paint(labeled, recolor(counter, obj))
        visited = visited | toindices(obj)
        counter += 1
  return labeled
 
0.9333333333333332, 47.987167, def ggebbdcgagegebbajecihhbbjidgebda(grid):
  return label_components(grid, mostcommon(grid))
 
0.09333333333333334, 1.9267244, def jcdhagjfeadhefjejcgifbegcabbdefc(I):
  x1 = objects(I, T, F, T) # Extract foreground objects
  x2 = lambda acc, obj: (acc[0] + 1, paint(acc[1], recolor(acc[0] + 1, obj))) # Relabel and paint function
  O = reduce(x2, sorted(x1, key=len, reverse=True), (0, canvas(mostcolor(I), shape(I))))[1] # Iterate and paint objects sequentially
  return O
 
0.09666666666666666, 2.0391357, def daadbadeddeeebbcbaghjebfdehchicc(I):
  objs = objects(I, T, F, T)
  sorted_objs = order(objs, size)
  recolored = I
  for i, obj in enumerate(sorted_objs):
    if i == 0:
      recolored = paint(recolored, recolor(2, obj))
    elif i == len(sorted_objs) - 1:
      recolored = paint(recolored, recolor(1, obj))
    else:
      recolored = paint(recolored, recolor(3, obj))
  O = recolored
  return O
 
0.08333333333333333, 1.6939744, def acdijjddfbjhejjjiiccahgbeggddiii(I):
  objs = objects(I, T, F, T)
  sizes = apply(size, objs)
  maxsize = maximum(sizes)
  minsize = minimum(sizes)
  recolored = I
  for obj in objs:
    if size(obj) == maxsize:
      recolored = paint(recolored, recolor(1, obj))
    elif size(obj) == minsize:
      recolored = paint(recolored, recolor(2, obj))
    else:
      recolored = paint(recolored, recolor(3, obj))
  O = recolored
  return O
 
0.09999999999999999, 2.5512004, def fdcehhgfcfagefbdjfaeebahjcegdbfg(I):
  objs = fgpartition(I)
  largest_obj = argmax(objs, lambda obj: colorcount(I, color(obj)))
  smallest_obj = argmin(objs, lambda obj: colorcount(I, color(obj)))
  O = paint(
      paint(
          replace(I, 5, 0), 
          recolor(1, largest_obj)
      ), 
      recolor(2, smallest_obj)
  )
  if len(objs) > 2: 
    O = paint(O, recolor(3, difference(difference(objs, {largest_obj}), {smallest_obj})))
  return O
 
0.12333333333333334, 2.3351789, def gadahbfaccaieeejadcddhagcdhagjdd(I):
  objs = objects(I, T, F, T)  
  O = canvas(0, shape(I)) 
  for i, obj in enumerate(objs):
    O = paint(O, recolor(i+1, obj))  
  return O
 
0.14, 3.2111359, def eeabeihffhfeefddidabddghabhafbef(I):
  def flood_fill(grid, i, j, label, visited):
    if (i, j) in visited or not (0 <= i < len(grid) and 0 <= j < len(grid[0])) or grid[i][j] == 0:
      return
    visited.add((i, j))
    grid = fill(grid, label, {(i, j)})
    for di, dj in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
      flood_fill(grid, i + di, j + dj, label, visited)
    return grid

  O = I
  label = 1
  visited = set()
  for i in range(len(I)):
    for j in range(len(I[0])):
      if I[i][j] != 0 and (i, j) not in visited:
        O = flood_fill(O, i, j, label, visited)
        label += 1
  return O
 
0.12333333333333334, 2.3351789, def efbceebfjeidejfjbachfdhejdjbeaff(grid):
    objs = objects(grid, True, False, True)
    labeled = canvas(0, shape(grid))
    for i, obj in enumerate(objs):
        labeled = paint(labeled, recolor(i + 1, obj))
    return labeled
 
0.13666666666666666, 2.5949376, def hfcdicgffdfjeiajadacdfcacifdfica(I):
  # 1. Identify foreground objects:
  objs = objects(I, T, F, T)
  
  # 2. Sort objects by size in descending order:
  sorted_objs = sorted(objs, key=len, reverse=True)
  
  # 3. Create a dictionary to store new labels:
  label_dict = {color(obj): i + 1 for i, obj in enumerate(sorted_objs[1:])}
  
  # 4. Relabel objects based on size:
  relabeled_objs = frozenset(
      recolor(label_dict.get(color(obj), color(obj)), obj) for obj in objs
  )
  
  # 5. Paint the objects onto a blank canvas:
  O = paint(canvas(mostcolor(I), shape(I)), merge(relabeled_objs))
  
  return O
 
0.08333333333333333, 2.6920362, def fjcdgjecgffdeffdiddcbddcbfefceja(I):
  # 1. Extract objects and sort them by size:
  objs = sorted(objects(I, T, F, T), key=len, reverse=True)
  
  # 2. Generate a list of new labels:
  labels = list(range(1, len(objs))) + [color(objs[0])]
  
  # 3. Create a dictionary mapping original colors to new labels:
  color_map = dict(zip(sorted(set(color(obj) for obj in objs)), labels))
  
  # 4. Relabel objects based on the color map:
  relabeled_objs = frozenset(recolor(color_map[color(obj)], obj) for obj in objs)
  
  # 5. Paint the relabeled objects onto a blank canvas:
  O = paint(canvas(mostcolor(I), shape(I)), merge(relabeled_objs))
  return O
 
0.09333333333333334, 1.9267244, def icaacfeehjbceecdiiffgdfhfcbecdaf(I):
  objs = objects(I, T, F, T)
  objs_size = apply(size, objs)
  sorted_objs = order(objs, lambda obj: -size(obj))
  O = I
  for i in range(size(objs)):
    obj = sorted_objs[i]
    new_color = i + 1
    O = paint(O, recolor(new_color, obj)) 
  return O
 
0.06, 1.587134, def cbeijaibgceieciaajahefajcdhcbdag(I):
  def recolor_by_size_rank(obj, objs):
    rank =  sum([1 for other_obj in objs if size(other_obj) > size(obj)])
    return recolor(rank + 1, obj)

  objs = objects(I, T, F, T)
  recolored_objs = apply(lambda obj: recolor_by_size_rank(obj, objs), objs)
  O = I
  for obj in recolored_objs:
    O = paint(O, obj)
  return O
 
0.06666666666666667, 1.71691, def ifebjifbfcjceaiiadbfdcbecdcfaeff(I):
  objs = objects(I, T, F, T)
  O = I
  for i, obj in enumerate(order(objs, lambda obj: -size(obj))):
    O = branch(i == 0, paint(O, recolor(1, obj)),
              branch(i == 1, paint(O, recolor(2, obj)), 
                     paint(O, recolor(3, obj)))) 
  return O
 
0.15, 48.99154, def jaifejfbcfcdebecjaafjfbcjjcihfjf(I):
  O = canvas(0, shape(I))
  count = 1
  for i, row in enumerate(I):
    for j, v in enumerate(row):
      if v != 0 and index(O, (i, j)) == 0:
        O = fill(O, count, toindices(toobject(objects(crop(I, (i, j), (1, 1)), T, F, T), I)))
        count += 1
  return O
 
0.08333333333333333, 2.6920362, def adcdccfdbebfedfgibjbcjdgfeiaehgh(I):
  O = I
  labels = {}
  label_count = 1
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if val != 0:
        if val not in labels:
          labels[val] = label_count
          label_count += 1
        O = fill(O, labels[val], {(i, j)})
  return O
 
0.15, 48.99154, def accbahbeibigehjgicaihhcbbffidcih(grid):
  return label_grid(grid, mostcommon(grid))
 
0.09666666666666668, 2.1639874, def afddbhcfdfieedahbbefaecifafadfcc(I):
  # 1. Extract foreground objects and their sizes:
  objs = objects(I, T, F, T)
  sizes = [len(obj) for obj in objs]
  
  # 2. Create a list of (size, object) tuples and sort by size:
  size_obj = sorted(zip(sizes, objs), reverse=True)
  
  # 3. Relabel objects during iteration:
  O = canvas(mostcolor(I), shape(I))
  label = 1
  for i, (size, obj) in enumerate(size_obj):
    if i == 0: 
      O = paint(O, obj)  # Largest object retains its color
    else:
      O = paint(O, recolor(label, obj))
      label += 1
  return O
 
0.15, 3.0614707, def ajibbbjdadaceeddjdddcfajbhcdcafh(I):
  # 1. Extract objects, their colors, and sort by size:
  objs = objects(I, T, F, T)
  colors = [color(obj) for obj in objs]
  objs_sorted = sorted(zip(objs, colors), key=lambda x: len(x[0]), reverse=True)
  
  # 2. Create a dictionary to remap colors:
  remap = {c: i + 1 for i, (obj, c) in enumerate(objs_sorted) if i > 0}
  remap[objs_sorted[0][1]] = objs_sorted[0][1]
  
  # 3. Paint objects with remapped colors:
  O = canvas(mostcolor(I), shape(I))
  for obj, c in zip(objs, colors):
    O = paint(O, recolor(remap[c], obj))
  return O
 
0.09333333333333334, 2.0521865, def jeffccbeiadiebbdbbfbfcfdajeagbih(I):
  objs = objects(I, T, F, T)
  objs_sorted = order(objs, lambda obj: -size(obj))
  O = I
  for i, obj in enumerate(objs_sorted):
    O = branch(i == 0, paint(O, recolor(1, obj)), 
              branch(i == 1, paint(O, recolor(2, obj)),
                     branch(i == 2, paint(O, recolor(3, obj)),
                            paint(O, obj))))
  return O 
 
0.0, 0.0, def fefaecibfeefeffiiejfjcdbdeaedbdc(I):
  objs = objects(I, T, F, T)
  sizes = sorted(list(set(size(obj) for obj in objs)), reverse=True)
  def recolor_obj(obj):
    obj_size = size(obj)
    return branch(obj_size == sizes[0], 1,
              branch(obj_size == sizes[1], 2,
                     branch(obj_size == sizes[2], 3,
                            color(obj))))
  return paint(I, mapply(lambda obj: recolor(recolor_obj(obj), obj), objs))
 
