3.0, 7.461422, def eafcbgcefbbgecedbbaafdhaadaheeee(I):
  objs = objects(I, F, F, T)  # Get objects, not diagonally connected, without background
  largest_obj = argmax(objs, size)  # Find the largest object
  target_color = leastcolor(largest_obj)  # Find the least common color within the object
  modified_obj = recolor(5, sfilter(largest_obj, lambda c: c[0] == target_color)) # Recolor the target color to 5
  O = paint(I, modified_obj) # Paint the modified object onto the original grid
  return O 
 
2.75, 6.973972, def aceefajfddbdeadfjcabacdadhfhffdc(I):
  objs = difference(objects(I, F, F, F), objects(I, F, F, T)) # Isolate object containing least common color
  target_obj = argmax(objs, size) 
  target_color = leastcolor(I)
  modified_obj = recolor(5, sfilter(target_obj, matcher(first, target_color)))
  O = paint(I, modified_obj)
  return O
 
3.25, 6.772002, def hdfeefagedajebcajcdiecjaceffffde(I):
  x1 = objects(I, T, T, F)  # Identify all objects
  x2 = sfilter(x1, lambda o: size(o) == 1)  # Filter for single-cell objects
  x3 = mapply(toindices, x2)  # Extract indices of single-cell objects
  O = fill(I, 5, x3)  # Fill those indices with '5'
  return O
 
0.0, 0.0, def cfeebajejifgedebjbeddcjgaadihcba(I):
  O = I  # Initialize output grid
  for i in range(len(I)):
    for j in range(len(I[0])):
      if index(I, (i, j)) != mostcolor(I) and len(objects(crop(I, (i, j), (1, 1)), T, T, F)) == 1:
        O = fill(O, 5, {(i, j)})  # Fill if single-cell and not background
  return O
 
