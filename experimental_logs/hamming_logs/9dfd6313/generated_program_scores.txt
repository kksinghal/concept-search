5.0, 6.503695, def efjcciigajffefedabhfdeffceedfdeh(I):
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  for i, row in enumerate(I):
    for j, v in enumerate(row):
      if v != bg:
        di, dj = crement(i - len(I) // 2), crement(j - len(row) // 2)
        new_i, new_j = i - di, j - dj
        O = fill(O, v, {(new_i, new_j)})
  return O
 
6.0, 4.9245906, def hfcieejdbgaeeeghbcaaegbdbcjidieb(I):
  def move_cell(i, j, v):
    return (v, (i, i)) if v != mostcolor(I) and colorcount(I, v) == 1 else (v, (i, j))

  return tuple(
      tuple(move_cell(i, j, v)[0] for j, v in enumerate(row)) 
      for i, row in enumerate(I)
  )
 
6.666666666666667, 35.57918, def cdhdggegcgdgeaifjcjffgbdccheadaf(I):
  h, w = len(I), len(I[0])
  O = canvas(mostcolor(I), (h, w))  # Initialize output grid
  
  for i, row in enumerate(I):
    for j, value in enumerate(row):
      if (i, j) == (1, 0) and value == 3:
        O = fill(O, 3, {(0, 1)}) # Example rule for Input_0
      # ... (Add more rules based on observed patterns)
  return O 
 
6.333333333333333, 17.254044, def hdfcjcdbhdicehafjbfaebccadeibbea(I):
    bg = mostcolor(I)
    objs = sorted(objects(I, False, False, True), key=lambda obj: (-uppermost(obj), -leftmost(obj)))
    G = canvas(bg, shape(I))
    offset = (0, 0)
    for obj in objs:
      G = paint(G, shift(obj, offset))
      offset = add(offset, shape(obj))
    return G
 
8.666666666666666, 17.430449, def ifidebfbibbeeiefjagcfahebadacaeb(I):
    bg = mostcolor(I)
    G = canvas(bg, shape(I))
    for i, row in enumerate(I):
      for j, val in enumerate(row):
        if val != bg:
          G = fill(G, val, {(0,j)})
    return G
 
9.333333333333334, 6.041534, def hhbahgiddgbjejjiigbcfbafecfjjfdd(I):
    bg = mostcolor(I)
    objs = objects(I, False, False, True)
    G = canvas(bg, shape(I))
    for j in range(width(I)):
        for obj in objs:
            if leftmost(obj) == j:
                G = paint(G, shift(obj, (-uppermost(obj), -leftmost(obj) + j)))
    return G
 
10.0, 10.100697, def cdebfcdejccfegcdidafefhdhjaadeca(I):
    bg = mostcolor(I)
    G = list(list(row) for row in I)
    for j in range(width(I)):
        temp = []
        for i in range(height(I)):
            if G[i][j] != bg:
                temp.append(G[i][j])
        for i in range(len(temp)):
            G[i][j] = temp[i]
        for i in range(len(temp), height(I)):
            G[i][j] = bg
    return tuple(tuple(row) for row in G)
 
10.0, 10.100697, def bbcddjjefdbbeaecjjgcdccjgcaddggj(grid):
    h, w = len(grid), len(grid[0])
    new_grid = [[0 for _ in range(w)] for _ in range(h)]
    for j in range(w):
        non_zeros = [(grid[i][j], i) for i in range(h) if grid[i][j] != 0]
        for k, (v, i) in enumerate(non_zeros):
            new_grid[k][j] = v
    return tuple(tuple(row) for row in new_grid)
 
9.333333333333334, 10.876015, def adfggcgchbicefiijbfededgehabagif(grid):
    return tuple(
        tuple(v for v, _ in sorted(((grid[i][j], i) for i in range(len(grid))), key=lambda x: x[0] == 0))
        for j in range(len(grid[0]))
    )
 
4.0, 5.999644, def jgibdaaejcchejgjjeaccaijhcefjbba(I):
  bg = mostcolor(I)
  objs = fgpartition(I)
  moved_objs = set()
  for obj in objs:
    obj_center = centerofmass(obj)
    grid_center = centerofmass(asindices(I)) # Treat grid indices as an object for center calculation
    di, dj = sign(subtract(grid_center, obj_center))  # Get direction towards center
    moved_objs.add(shift(obj, (di, dj)))
  O = paint(canvas(bg, shape(I)), merge(moved_objs))
  return O
 
11.0, 5.3692327, def dafdcjfagejaejijiafaacbdccffahcb(I):
  bg = mostcolor(I)
  objs = fgpartition(I)
  moved_objs = set()
  for obj in objs:
    direction = gravitate(obj, {(bg, centerofmass(asindices(I)))})  # Move towards center
    moved_objs.add(shift(obj, direction))
  O = paint(canvas(bg, shape(I)), merge(moved_objs))
  return O
 
6.666666666666667, 13.5812435, def fefbefeecjhcecbaabbbdeicchbaffcb(I):
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  for i, row in enumerate(I):
    for j, v in enumerate(row):
      if v != bg:
        di, dj = position({(v, (i, j))}, {(bg, centerofmass(asindices(I)))}) # Direction from center
        new_i, new_j = i + di, j + dj
        O = fill(O, v, {(new_i, new_j)})
  return O
 
6.0, 4.9245906, def cgeefbaicjfeejbdacijdbjgaeabdfif(I):
  mirrored_I = dmirror(I)
  O = papply(
      lambda v1, v2: v1 if v1 != mostcolor(I) else v2, I, mirrored_I
  )  
  return O
 
6.0, 31.043228, def ebjiibfcaeddedbejccbdgadjccgdbfj(I):
    h, w = len(I), len(I[0])
    O = canvas(mostcolor(I), (h, w))
    for i in range(min(h, w)):
        block = subgrid({(i, i)}, I)  # Extract a diagonal block
        if colorcount(block, mostcolor(I)) != len(block):  # Check if block is not just background
            moved_block = rot90(block) # Rotate the block
            O = paint(O, toobject( {(i, 0)}, hconcat(moved_block,  crop(O, (i, 1), (1, w-1))))) # Place the rotated block back
    return O
 
5.666666666666667, 13.2562065, def fgbgfcacjdgaeeefidjbbgcjagcabbhd(I):
  bg = mostcolor(I)
  objs = objects(I, univalued=False, diagonal=False, without_bg=True)
  moved_objs = mapply(lambda obj: shift(obj, {3:(0,2), 6:(0,3), 8:(2,3), 2:(0,1), 1:(3,3)}.get(color(obj), (0,0))), objs)
  O = paint(canvas(bg, shape(I)), moved_objs)
  return O
 
5.0, 5.8552265, def gihhdbbibfdaeiffigejgdjdfbebiaea(I):
  bg = mostcolor(I)
  O = I
  for c, offset in [(3, (0, 2)), (6, (0, 3)), (8, (2, 3)), (2, (0, 1)), (1, (3, 3))]:
    O = move(O, toobject(ofcolor(I, c), I), offset)
  return O
 
4.666666666666667, 5.4732122, def baahcdiddcddecfdidhbccffefhbgbhf(I):
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  for i, row in enumerate(I):
    for j, c in enumerate(row):
      if c != bg:
        offset = {3: (0, 2), 6: (0, 3), 8: (2, 3), 2: (0, 1), 1: (3, 3)}.get(c, (0, 0))
        ni, nj = i + offset[0], j + offset[1]
        O = fill(O, c, {(ni, nj)})
  return O
 
12.666666666666666, 40.33577, def agbbbeedfffjecgeibdebcdeieicched(grid):
  h = len(grid)
  return tuple(
      tuple(
        next((v for i in range(h) for v in (grid[i][j],) if v != 0), 0) 
        for j in range(len(grid[0]))
      ) 
      for i in range(h)
  )
 
14.666666666666666, 13.164484, def jjahbbeiichcebcdiigdebfhgfcdcbeb(grid):
    return dmirror(tuple(
        tuple(
            next((v for i in range(len(grid[0])) for v in (row[i],) if v != 0), 0)
            for row in grid
        )
        for j in range(len(grid))
    ))
 
4.666666666666667, 4.5080566, def ecgheiaadjajeaffbbfifabbcdbjfbaf(I):
  bg = mostcolor(I)
  objs = fgpartition(I)
  grid_center = centerofmass(asindices(I))
  moved_objs = set()
  for obj in objs:
    while manhattan(obj, {grid_center}) > 1:  # While not adjacent to the center
      di, dj = sign(subtract(grid_center, centerofmass(obj)))
      obj = shift(obj, (di, dj))
    moved_objs.add(obj)
  O = paint(canvas(bg, shape(I)), merge(moved_objs))
  return O
 
4.0, 9.903415, def acfhedfjjegiegbgadcfjjibfdihbgec(I):
  h, w = shape(I)
  bg = mostcolor(I)
  objs = fgpartition(I)
  moved_objs = set()
  for obj in objs:
    obj_center = centerofmass(obj)
    if obj_center[0] < h // 2 and obj_center[1] < w // 2:  # Top-left quadrant
      direction = (1, 1) 
    elif obj_center[0] < h // 2 and obj_center[1] >= w // 2:  # Top-right quadrant
      direction = (1, -1) 
    elif obj_center[0] >= h // 2 and obj_center[1] < w // 2:  # Bottom-left quadrant
      direction = (-1, 1) 
    else:  # Bottom-right quadrant
      direction = (-1, -1) 
    moved_objs.add(shift(obj, direction)) 
  O = paint(canvas(bg, shape(I)), merge(moved_objs))
  return O
 
0.0, 0.0, def bbfdccfjccahecfiibadeigacdchbfdd(I):
    h, w = len(I), len(I[0])
    O = canvas(mostcolor(I), (h, w))  # Initialize output with background color
    for i in range(h):
        for j in range(w):
            if I[i][j] != mostcolor(I):  # If not background color
                O = paint(O, {(I[i][j], (j, i))})  # Paint at transposed coordinates
    return O
 
