0.135, 20.34657, def cgifcccdcbacegacjeebgeghejdfeagg(I):
  objs = objects(I, T, F, F)
  obj1 = argmax(objs, size)
  obj2 = argmin(objs, size)
  if uppermost(obj1) < uppermost(obj2):
    O = paint(I, recolor(1, crop(I, ulcorner(obj1), TWO_BY_TWO)))
    O = paint(O, recolor(2, crop(O, ulcorner(obj2), TWO_BY_TWO)))
  else:
    O = paint(I, recolor(2, crop(I, ulcorner(obj1), (THREE, TWO))))
    O = paint(O, recolor(1, crop(O, (lowermost(obj2)-1, rightmost(obj2)-1), TWO_BY_TWO))) 
  return O
 
0.14, 19.660767, def heaieadcbgebefgjjdccfhbbcibdbdhh(I):
  objs = objects(I, T, F, F)
  top_obj = argmin(objs, lambda obj: uppermost(obj))
  bottom_obj = argmax(objs, lambda obj: uppermost(obj))
  O = paint(I, recolor(1, crop(I, ulcorner(top_obj), TWO_BY_TWO)))
  if size(top_obj) == size(bottom_obj):
    O = paint(O, recolor(2, crop(O, ulcorner(bottom_obj), TWO_BY_TWO)))
  else:
    O = paint(O, recolor(2, crop(O, (uppermost(bottom_obj), leftmost(bottom_obj)), (THREE, TWO))))
    O = paint(O, recolor(1, crop(O, (lowermost(bottom_obj)-1, rightmost(bottom_obj)-1), TWO_BY_TWO)))
  return O
 
0.14500000000000002, 22.85388, def afaaecbbaaefeidbibdgdhaibcdfhgdg(I):
  objs = objects(I, T, F, F)
  obj1 = argmax(objs, size) 
  obj2 = argmin(objs, lambda obj: manhattan(obj, obj1))
  if size(objs) == 1:
    O = paint(I, recolor(2, crop(I, ulcorner(obj1), (THREE, TWO))))
    O = paint(O, recolor(1, crop(O, (lowermost(obj1)-1, rightmost(obj1)-1), TWO_BY_TWO)))
  else:
    top_obj = argmin({obj1, obj2}, lambda obj: uppermost(obj))
    bottom_obj = argmax({obj1, obj2}, lambda obj: uppermost(obj))
    O = paint(I, recolor(1, crop(I, ulcorner(top_obj), TWO_BY_TWO)))
    O = paint(O, recolor(2, crop(O, ulcorner(bottom_obj), TWO_BY_TWO)))
  return O
 
0.125, 20.09234, def ccfcaagfcggaeddjjffbiccceadhjbjh(I):
  objs = objects(I, T, F, T) 
  recolored_objs = set()
  for obj in objs:
    if len(obj) == 16:
      color_to_fill = 1 if uppermost(obj) < 5 else 2
      recolored_objs.add(fill(I, color_to_fill, shift(inbox(obj), (-1, -1))))
  O = I
  for grid in recolored_objs:
    O = paint(O, asobject(grid))
  return O
 
0.095, 19.032814, def bifciaebaidbefdcjeeehjbbefaabifc(I):
  objs = objects(I, T, F, T)
  new_objs = set()
  for obj in objs:
    if size(obj) == 16:
      i, j = ulcorner(obj)
      color_to_fill = 1 if i < 5 else 2
      square_to_fill = frozenset({(i+1,j+1), (i+2,j+1), (i+1,j+2), (i+2,j+2)})
      new_objs.add(recolor(color_to_fill, square_to_fill))
  O = I
  for obj in new_objs:
    O = paint(O, obj)
  return O
 
0.355, 6.032366, def fefhjheegibfechiaiijciicdagebfda(I):
  O = I
  for i in range(len(I)):
    for j in range(len(I[0])):
      if I[i][j] != 0 and size(objects(crop(I, (max(0, i-1), max(0, j-1)), (3, 3)), T, F, T)) == 1:
        color_to_fill = 1 if i < len(I) // 2 else 2
        O = paint(O, {(color_to_fill, (i,j))})
  return O
 
0.17, 36.3757, def gedifceficcaecaaacdigchegfdcehfc(I):
    objs = objects(I, T, F, T)
    new_grid = canvas(0, shape(I))
    for obj in objs:
        if size(obj) == 16:
            color_to_fill = 1 if uppermost(obj) < height(I) // 2 else 2
            center_obj = shift(
              crop(
                canvas(1, (2, 2)),
                 (0, 0),
                 (2, 2)
              ),
              add(ulcorner(obj), (1, 1))
            )
            new_grid = paint(new_grid, recolor(color_to_fill, center_obj))
        else:
            new_grid = paint(new_grid, obj)
    return new_grid
 
0.125, 24.170193, def ddhaceaaiccfebbfbbbabbeeabgahbaf(I):
    x1 = objects(I, T, F, T)  # Extract objects without background
    x2 = argmax(x1, size)  # Find the largest object
    x3 = ulcorner(x2)
    x4 = shape(x2)
    x5 = divide(x4, TWO)
    x6 = astuple(ONE, TWO)
    x7 = multiply(x5, x6)
    x8 = add(x3, x7)
    x9 = recolor(ONE, (x8,))
    x10 = paint(I, x9)
    O = x10
    return O
 
0.215, 15.528365, def ebdfeeaefcceegffjddhedddabbebdhb(I):
  # Identify objects
  objs = objects(I, F, F, T) 
  # Sort objects by uppermost row
  obj1, obj2 = order(objs, uppermost) 
  # Split the lower object horizontally
  split_point = height(obj2) // 2
  top_half = frozenset((v, (i, j)) for v, (i, j) in obj2 if i < uppermost(obj2) + split_point)
  bottom_half = frozenset((v, (i, j)) for v, (i, j) in obj2 if i >= uppermost(obj2) + split_point)
  # Recolor the split parts
  top_half = recolor(2, top_half)
  bottom_half = recolor(1, bottom_half)
  # Paint back to grid
  O = paint(paint(canvas(0, shape(I)), obj1), top_half)
  O = paint(O, bottom_half)
  return O
 
0.33, 22.069506, def eehfdgjdehiceabdicfbddaffgbejghi(I):
  # Find the non-background color
  color = leastcolor(I) if mostcolor(I) == 0 else mostcolor(I)
  # Create masks for upper and lower halves of the grid
  upper_mask = frozenset((i, j) for i in range(len(I) // 2) for j in range(len(I[0])))
  lower_mask = frozenset((i, j) for i in range(len(I) // 2, len(I)) for j in range(len(I[0])))
  # Recolor based on object positions and masks
  O = paint(canvas(0, shape(I)), recolor(2, intersection(ofcolor(I, color), upper_mask))) 
  O = paint(O, recolor(1, intersection(ofcolor(I, color), lower_mask)))
  return O 
 
0.26, 13.993132, def hfajhiehbhcbebfdabcddgeecebfjffb(I):
    # Partition the grid into objects.
    objs = partition(I)
    h = height(I)
    # Define a function to modify a specific column within an object.
    def modify_column(obj, col_index, new_color):
        return frozenset((new_color, (i, j)) if j == col_index else (c, (i, j))
                       for c, (i, j) in obj)
    # Apply transformations based on object positions.
    O = frozenset()
    for obj in objs:
        if uppermost(obj) < h // 2:
            obj = modify_column(obj, leftmost(obj) + 1, 1)
            obj = modify_column(obj, rightmost(obj) - 1, 1)
        else:
            obj = modify_column(obj, leftmost(obj) + 2, 2)
            obj = modify_column(obj, rightmost(obj) - 2, 2)
            obj = modify_column(obj, leftmost(obj) + 1, 2)
            obj = modify_column(obj, rightmost(obj) - 1, 2)
        O = O | obj
    # Convert the transformed object set back into a grid.
    O = tuple(tuple(extract(O, lambda cell: cell[1] == (i, j))[0] 
                for j in range(width(I))) for i in range(h))
    return O
 
0.14500000000000002, 6.659133, def dgddecejcafceifbjeeeecfbdbfedbcf(I):
  # Identify objects based on color.
  objs = objects(I, T, F, F)
  top_obj = extract(objs, lambda obj: color(obj) == 4 and uppermost(obj) < 5)
  bottom_obj = extract(objs, lambda obj: color(obj) == 4 and uppermost(obj) >= 5)

  def modify_stripe(obj, start_col, end_col, new_color):
    return frozenset(((new_color, (i, j)) if start_col <= j <= end_col else (c, (i, j))) 
                 for c, (i, j) in obj)
  
  # Modify columns of each object.
  top_obj = modify_stripe(top_obj, leftmost(top_obj) + 1, rightmost(top_obj) - 1, 1)
  bottom_obj = modify_stripe(bottom_obj, leftmost(bottom_obj) + 2, rightmost(bottom_obj) - 2, 2)

  # Reconstruct the grid.
  O = paint(cover(I, top_obj), top_obj)
  O = paint(cover(O, bottom_obj), bottom_obj)
  return O
 
0.275, 40.755356, def aedbfhefdcceehgdafjeafcajdigcacc(I):
    h, w = len(I), len(I[0])
    # Identify the object.
    obj = extract(objects(I, T, F, F), lambda obj: len(obj) > 1)
    # Calculate the bounding box of the object.
    min_row, min_col = ulcorner(obj)
    max_row, max_col = lrcorner(obj)
    # Create the output grid.
    O = canvas(0, (h, w))
    for i in range(h):
        for j in range(w):
            # If within the object's bounding box.
            if min_row <= i <= max_row and min_col <= j <= max_col:
                # Apply transformation based on position.
                if i < h // 2:
                    if min_col + 1 <= j <= max_col - 1:
                        O = fill(O, 1, {(i, j)})
                    else:
                        O = fill(O, 4, {(i, j)})
                else:
                    if min_col + 2 <= j <= max_col - 2:
                        O = fill(O, 2, {(i, j)})
                    else:
                        O = fill(O, 4, {(i, j)})
    return O
 
0.115, 22.679483, def cbcjdabgcbgaeddabhhabdcicabfaacj(I):
  objs = objects(I, T, F, F)
  top_obj = argmin(objs, lambda obj: uppermost(obj))
  bottom_obj = argmax(objs, lambda obj: uppermost(obj))
  O = paint(I, recolor(1, crop(I, (uppermost(top_obj)+1, leftmost(top_obj)+1), TWO_BY_TWO)))
  O = paint(O, recolor(2, crop(O, (lowermost(bottom_obj)-1, rightmost(bottom_obj)-1), TWO_BY_TWO)))
  return O 
 
0.11499999999999999, 25.916822, def fdcdfcdhcjcfecfcbhaahebheabjcade(I):
    objs = objects(I, T, F, F)
    if size(objs) != 2:
        return I
    obj1, obj2 = tuple(objs)
    if uppermost(obj1) > uppermost(obj2):
        obj1, obj2 = obj2, obj1
    O = paint(I, recolor(1, crop(I, add(ulcorner(obj1), UNITY), TWO_BY_TWO)))
    O = paint(O, recolor(2, crop(O, subtract(lrcorner(obj2), UNITY), TWO_BY_TWO)))
    return O
 
0.13, 11.174686, def gdedehagfbgeegcgidaajjidhceihcib(I):
  objs = objects(I, T, F, F)
  top_obj = min(objs, key=lambda obj: uppermost(obj))
  bottom_obj = max(objs, key=lambda obj: uppermost(obj))
  O = I
  for i in range(2):
    for j in range(2):
      O = paint(O, {(1, (uppermost(top_obj)+1+i, leftmost(top_obj)+1+j))})
      O = paint(O, {(2, (lowermost(bottom_obj)-1-i, rightmost(bottom_obj)-1-j))})
  return O
 
0.14, 7.932932, def gjeefjffijcbefeeajajcjbiijifdeed(I):
  O = I
  objs = objects(I, T, F, F)
  for obj in objs:
    if uppermost(obj) == 1:
      O = fill(O, 1, {(uppermost(obj)+1, leftmost(obj)+1), (uppermost(obj)+1, leftmost(obj)+2), 
                   (uppermost(obj)+2, leftmost(obj)+1), (uppermost(obj)+2, leftmost(obj)+2)})
    else:
      O = fill(O, 2, {(lowermost(obj)-1, rightmost(obj)-1), (lowermost(obj)-1, rightmost(obj)), 
                   (lowermost(obj), rightmost(obj)-1), (lowermost(obj), rightmost(obj))})
  return O
 
0.14, 20.411846, def bgfffcjahiaeeecbbdcfbeicacecbfje(I):
  O = I
  for i in range(height(I) // 4):
    for j in range(width(I) // 4):
      if index(I, (i * 4, j * 4)) != 0: # Check if a 4x4 square exists at this location.
        fill_color = 1 if i * 4 < height(I) // 2 else 2
        O = underfill(O, fill_color, frozenset({(i * 4 + 1, j * 4 + 1), (i * 4 + 1, j * 4 + 2), 
                                         (i * 4 + 2, j * 4 + 1), (i * 4 + 2, j * 4 + 2)}))  # Directly fill the inner square.
  return O
 
0.085, 10.799569, def fcbbhbcejfgaebidagddabdgfffgcbge(I):
  # Find the largest object
  obj = argmax(objects(I, T, F, T), size)
  # Calculate the object's center coordinates
  center_i = (uppermost(obj) + lowermost(obj)) // 2
  center_j = (leftmost(obj) + rightmost(obj)) // 2
  # Recolor the central 2x2 area of the largest object based on its position
  if center_i < len(I) // 2:
    obj = recolor(1, frozenset({(center_i, center_j), (center_i + 1, center_j), 
                                  (center_i, center_j + 1), (center_i + 1, center_j + 1)}))
  else:
    obj = recolor(2, frozenset({(center_i, center_j), (center_i + 1, center_j), 
                                  (center_i, center_j + 1), (center_i + 1, center_j + 1)}))
  # Paint the modified largest object back onto the grid
  I = paint(I, obj)
  # Find the remaining largest object
  obj2 = argmax(objects(I, T, F, T), size)
  # Calculate the object's center coordinates
  center_i2 = (uppermost(obj2) + lowermost(obj2)) // 2
  center_j2 = (leftmost(obj2) + rightmost(obj2)) // 2
  # Recolor the central area of the second largest object based on previous recoloring
  if center_i < len(I) // 2:
    obj2 = recolor(2, frozenset({(center_i2, center_j2), (center_i2 + 1, center_j2), 
                                   (center_i2, center_j2 + 1), (center_i2 + 1, center_j2 + 1)}))
  else:
    obj2 = recolor(1, frozenset({(center_i2, center_j2), (center_i2, center_j2 + 1)}))
  # Paint the modified second largest object back onto the grid 
  O = paint(I, obj2)
  return O
 
0.08499999999999999, 9.066003, def ffgfgaebibebeagbigcdijfdicaeejbd(I):
  # Find all objects
  objs = objects(I, T, F, T)
  # Sort objects by size in descending order
  sorted_objs = order(objs, size)[::-1]
  # Get the two largest objects
  obj1, obj2 = sorted_objs[:2]
  # Recolor the central 2x2 area of each object based on their relative positions
  for i, obj in enumerate([obj1, obj2]):
    ci = (uppermost(obj) + lowermost(obj)) // 2
    cj = (leftmost(obj) + rightmost(obj)) // 2
    color_val = 1 if i == 0 and ci < len(I) // 2 or i == 1 and ci >= len(I) // 2 else 2
    recolor_area = frozenset({(ci, cj), (ci + 1, cj), (ci, cj + 1), (ci + 1, cj + 1)}) if i == 0 else \
                   frozenset({(ci, cj), (ci, cj + 1)})
    obj = recolor(color_val, recolor_area)
    I = paint(I, obj)
  O = I
  return O
 
0.065, 5.5524645, def hjadcajeadeiedcfbfjabgidfdbbffcc(I):
  # Find the two largest objects
  obj1 = argmax(objects(I, T, F, T), size)
  obj2 = argmax(remove(obj1, objects(I, T, F, T)), size)
  # Determine the color for each object's center based on their positions
  color1 = 1 if (uppermost(obj1) + lowermost(obj1)) // 2 < len(I) // 2 else 2
  color2 = 3 - color1 # Opposite of color1
  # Recolor the central area of each object
  I = paint(I, recolor(color1, inbox(obj1)))
  O = paint(I, recolor(color2, frozenset({(i, j) for i, j in inbox(obj2) if i == (uppermost(obj2) + lowermost(obj2)) // 2})))
  return O
 
0.095, 6.5386896, def jebaehbedbdaeedfiifidfeebddgdefe(I):
  # Identify the two largest objects
  objs = order(objects(I, T, F, T), size)
  obj1, obj2 = objs[-1], objs[-2]
  # Define a function to recolor the central area based on object position
  def recolor_center(obj, top_color, bottom_color):
    center_i = (uppermost(obj) + lowermost(obj)) // 2
    center_j = (leftmost(obj) + rightmost(obj)) // 2
    color_val = top_color if center_i < len(I) // 2 else bottom_color
    return recolor(color_val, frozenset({(center_i, center_j), (center_i + 1, center_j),
                                       (center_i, center_j + 1), (center_i + 1, center_j + 1)}))
  # Recolor the central areas of both objects
  obj1 = recolor_center(obj1, 1, 2)
  obj2 = recolor_center(obj2, 2, 1)
  # Paint the modified objects back onto the grid
  I = paint(I, obj1)
  O = paint(I, obj2)
  return O
 
0.095, 10.202258, def ggfcgbiafddcegaaiffddeeefeieecai(I):
  # Find the largest object
  largest_obj = argmax(objects(I, T, F, T), size)
  # Calculate its center coordinates
  ci, cj = (uppermost(largest_obj) + lowermost(largest_obj)) // 2, (leftmost(largest_obj) + rightmost(largest_obj)) // 2
  # Determine the colors based on the largest object's position
  color1 = 1 if ci < len(I) // 2 else 2
  color2 = 3 - color1
  # Create a mask for the central 2x2 area
  mask = frozenset({(ci, cj), (ci + 1, cj), (ci, cj + 1), (ci + 1, cj + 1)})
  # Apply the first recoloring using the mask
  I = paint(I, recolor(color1, intersection(toindices(largest_obj), mask)))
  # Find the second largest object
  second_largest_obj = argmax(objects(I, T, F, T), size)
  # Calculate its center coordinates
  ci2, cj2 = (uppermost(second_largest_obj) + lowermost(second_largest_obj)) // 2, (leftmost(second_largest_obj) + rightmost(second_largest_obj)) // 2
  # Create a mask for the central area of the second object
  mask2 = frozenset({(ci2, cj2), (ci2, cj2 + 1)})
  # Apply the second recoloring using the mask
  O = paint(I, recolor(color2, intersection(toindices(second_largest_obj), mask2)))
  return O
 
0.11499999999999999, 25.916822, def eihabcgcieaieddfjdabjdjbcaddaeid(I):
  # Identify objects, ensuring obj1 is always the upper one
  obj1, obj2 = order(objects(I, F, F, T), uppermost)
  # Calculate the splitting point for the lower object
  split = uppermost(obj2) + height(obj2) // 2 
  # Create indices for upper and lower halves of the lower object
  upper_half = frozenset((i, j) for i in range(uppermost(obj2), split) for j in range(leftmost(obj2), rightmost(obj2) + 1))
  lower_half = frozenset((i, j) for i in range(split, lowermost(obj2) + 1) for j in range(leftmost(obj2), rightmost(obj2) + 1))
  # Recolor based on the input grid's most common color
  recolor_value = leastcolor(I) if mostcolor(I) == 4 else mostcolor(I)
  # Apply recoloring
  O = paint(paint(canvas(0, shape(I)), recolor(recolor_value, lower_half)), obj1)
  O = paint(O, obj2)
  return O
 
0.30000000000000004, 13.267871, def ajgbgbfgjbeaedehbfhedgeaicedcefh(I):
  # Extract objects and their properties
  objs = objects(I, T, F, F)
  top_obj = extract(objs, lambda obj: uppermost(obj) < len(I) // 2)
  bottom_obj = extract(objs, lambda obj: uppermost(obj) >= len(I) // 2)
  top_width = width(top_obj)
  bottom_width = width(bottom_obj)
  
  # Define a function to recolor inner columns based on object width
  def recolor_inner(obj, color, obj_width):
    inner_width = max(0, obj_width - 4) // 2
    left = leftmost(obj) + inner_width
    right = rightmost(obj) - inner_width
    inner_indices = frozenset((i, j) for i, j in toindices(obj) if left <= j <= right)
    return recolor(color, inner_indices)

  # Apply transformations
  top_transformed = recolor_inner(top_obj, 1, top_width)
  bottom_transformed = recolor_inner(bottom_obj, 2, bottom_width)

  # Paint the transformed objects back onto the grid
  O = paint(paint(cover(I, top_obj), top_transformed), bottom_transformed)
  return O
 
0.52, 29.506697, def cbagiecjccaeecdiaffjbbighadhfdbf(I):
  # Define a function to process each half of the grid
  def process_half(grid, color):
    obj = asobject(grid)
    obj_width = width(obj)
    inner_width = max(0, obj_width - 4) // 2
    left = leftmost(obj) + inner_width
    right = rightmost(obj) - inner_width
    inner_indices = frozenset((i, j) for i, j in toindices(obj) if left <= j <= right)
    return paint(canvas(0, shape(grid)), recolor(color, inner_indices))
  
  # Split the grid, process each half, and concatenate
  top_half = process_half(tophalf(I), 1)
  bottom_half = process_half(bottomhalf(I), 2)
  O = vconcat(top_half, bottom_half)
  return O
 
0.5, 27.330854, def gbfhhafbhcaeecffacbahhgeceegdege(I):
  objs = objects(I, T, F, F)
  # Define a function to transform an object based on its position
  def transform_object(obj):
    color = 1 if uppermost(obj) < len(I) // 2 else 2
    obj_width = width(obj)
    inner_width = max(0, obj_width - 4) // 2
    left = leftmost(obj) + inner_width
    right = rightmost(obj) - inner_width
    inner_indices = frozenset((i, j) for i, j in toindices(obj) if left <= j <= right)
    return recolor(color, inner_indices)

  # Apply transformation to each object and paint on a blank canvas
  O = canvas(0, shape(I))
  for obj in objs:
    O = paint(O, transform_object(obj))
  return O
 
0.33499999999999996, 10.07894, def ffbbehedccbfebicjchfbfjcafajibbc(I):
    # Define a function to recolor a specific region within a grid
    def recolor_region(grid, start_col, end_col, color):
      h, w = len(grid), len(grid[0])
      return tuple(
        tuple(color if start_col <= j <= end_col else grid[i][j] for j in range(w)) 
        for i in range(h)
      )
  
    # Calculate recoloring parameters for each half
    h = len(I) // 2
    w = len(I[0])
    top_start = (w - 2) // 2
    top_end = top_start + 1
    bottom_start = (w - 4) // 2
    bottom_end = bottom_start + 3

    # Apply recoloring to each half and concatenate
    top_half = recolor_region(I[:h], top_start, top_end, 1)
    bottom_half = recolor_region(I[h:], bottom_start, bottom_end, 2)
    O = vconcat(top_half, bottom_half)
    return O
 
0.575, 20.160763, def bcdaacbhbfceefcfjceeegaabedhdcde(I):
  # Define a function to process a grid row based on color and width
  def process_row(row, color, width):
    inner_width = max(0, len(row) - width) // 2
    return tuple(
      color if inner_width <= j < len(row) - inner_width else row[j] 
      for j in range(len(row))
    )

  # Apply row-wise processing to each half and concatenate
  top_half = tuple(process_row(row, 1, 4) for row in I[:len(I) // 2])
  bottom_half = tuple(process_row(row, 2, 8) for row in I[len(I) // 2:])
  O = vconcat(top_half, bottom_half)
  return O
 
0.12, 21.651033, def aeaibcbbbaffejacaehjccaeifefaiej(I):
    objs = objects(I, T, F, F)
    objs = order(objs, lambda obj: -uppermost(obj))
    O = I
    for i, obj in enumerate(objs):
        O = paint(O, recolor(i + 1, crop(O, add(centerofmass(obj), (-1, -1)), TWO_BY_TWO)))
    return O
 
0.11499999999999999, 25.916822, def bbcaafhcfejaecbbiedcjgfgebeceheh(I):
  O = I
  for obj in objects(I, T, F, T):  # Extract objects
    if shape(obj) == (4, 4):  # Identify 4x4 squares
      fill_color = 1 if uppermost(obj) < height(I) // 2 else 2  # Determine fill color
      # Fill inner 2x2 square
      O = underfill(O, fill_color, crop(O, add(ulcorner(obj), (1, 1)), (2, 2)))  
  return O
 
0.19, 9.3238125, def cchjjcabefbheiahajiebfceafahaehe(I):
  def process_cell(i, j):
    if i % 4 in [1, 2] and j % 4 in [1, 2] and index(I, (i - 1, j - 1)) != 0:
      return 1 if i < height(I) // 2 else 2  
    return index(I, (i, j)) # Keep other cells unchanged

  return tuple(tuple(process_cell(i, j) for j in range(width(I))) for i in range(height(I)))
 
0.155, 17.212732, def egeebedfaaigeccfideadiagdbhcghag(I):
  O = I
  for i in range(1, height(I) - 1, 4):
    for j in range(1, width(I) - 1, 4):
      if index(I, (i - 1, j - 1)) != 0:  # Check for 4x4 object
        fill_color = 1 if i < height(I) // 2 else 2
        O = fill(O, fill_color, frozenset({(i, j), (i, j + 1), (i + 1, j), (i + 1, j + 1)})) 
  return O
 
0.14, 6.557495, def iaebdiaijcfgeiibbbficechiiifbgca(I):
  objs = objects(I, T, F, T)
  obj1 = first(objs)
  obj2 = other(objs, obj1)
  if width(obj1) > width(obj2):
    top_obj = obj1
    bottom_obj = obj2
  else:
    top_obj = obj2
    bottom_obj = obj1
  top_center = center(top_obj)
  bottom_center = center(bottom_obj)
  O = I
  if width(top_obj) > 1:
    O = fill(O, 1, shift({top_center}, (-1, -1)))
    O = fill(O, 1, shift({top_center}, (-1, 0)))
    O = fill(O, 1, shift({top_center}, (0, -1)))
    O = fill(O, 1, shift({top_center}, (0, 0)))
  if width(bottom_obj) > 1:
    O = fill(O, 2, shift({bottom_center}, (-1, 0)))
    O = fill(O, 2, shift({bottom_center}, (-1, 1)))
    O = fill(O, 2, shift({bottom_center}, (0, 0)))
    O = fill(O, 2, shift({bottom_center}, (0, 1)))
  return O
 
0.11499999999999999, 25.916822, def aidfaefcbheieehdbcgfbdeeddbbeacc(I):
  objs = objects(I, T, F, T)
  obj1 = first(objs)
  obj2 = other(objs, obj1)
  top_obj = argmax({obj1, obj2}, uppermost)
  bottom_obj = argmin({obj1, obj2}, uppermost)
  O = underfill(I, 1, inbox(toindices(top_obj)))
  O = underfill(O, 2, inbox(toindices(bottom_obj)))
  return O
 
0.25, 43.930183, def ababbaaffgfdedccjcbcaffdbfdigfic(I):
  # Extract objects and their colors
  obj1, obj2 = order(objects(I, F, F, T), uppermost)
  col1 = color(obj1)
  col2 = color(obj2)
  # Create masks for top and bottom halves
  mask1 =  frozenset((i, j) for i, j in toindices(obj1) if i < uppermost(obj1) + height(obj1) // 2)
  mask2 =  frozenset((i, j) for i, j in toindices(obj2) if i >= uppermost(obj2) + height(obj2) // 2)
  # Conditionally apply colors based on object positions
  if uppermost(obj1) < uppermost(obj2):
    O = paint(paint(canvas(0, shape(I)), recolor(col1, mask1)), recolor(col2, mask2))
  else:
    O = paint(paint(canvas(0, shape(I)), recolor(col2, mask1)), recolor(col1, mask2))
  return O
 
0.36, 8.173341, def eicfeijdefeaedifbccfbgdgfbgcibch(I):
  def process_half(grid, new_color, width_offset):
    obj = extract(objects(grid, T, F, F), lambda obj: color(obj) == 4)
    start_col = (width(obj) - width_offset) // 2 
    end_col = start_col + width_offset - 1
    return tuple(
      tuple(new_color if start_col <= j <= end_col else grid[i][j] 
            for j in range(len(grid[0]))) 
      for i in range(len(grid))
    )

  top_half = process_half(I[:len(I) // 2], 1, 2)
  bottom_half = process_half(I[len(I) // 2:], 2, 4)
  return vconcat(top_half, bottom_half)
 
0.125, 19.897327, def gegdefahdgecebaejagdebahaffecadb(I):
  objs = objects(I, T, F, F)
  obj1 = argmax(objs, lambda obj: (lowermost(obj), -leftmost(obj))) 
  obj2 = argmin(objs, lambda obj: (lowermost(obj), -leftmost(obj)))
  O = paint(I, recolor(1, crop(I, (uppermost(obj1)+1, leftmost(obj1)+1), TWO_BY_TWO)))
  O = paint(O, recolor(2, crop(O, (lowermost(obj2)-1, rightmost(obj2)-1), TWO_BY_TWO)))
  return O
 
0.30000000000000004, 14.137919, def ijaefadbecabechaihbhbbhicdjehaed(I):
  O = I
  for i, r in enumerate(I):
    for j, v in enumerate(r):
      if v != 0:
        if i < len(I) // 2:
          if i > 0 and j > 0 and I[i-1][j] == v and I[i][j-1] == v:
            O = fill(O, 1, {(i,j), (i,j+1), (i+1,j), (i+1, j+1)})
        else:
          if i < len(I)-1 and j < len(r)-1 and I[i+1][j] == v and I[i][j+1] == v:
            O = fill(O, 2, {(i,j), (i,j+1), (i+1,j), (i+1, j+1)})
  return O
 
0.12, 10.898307, def geaccdcbjaaaebfciceccfcedaafeaef(I):
  top_obj = extract(objects(I, T, F, F), lambda obj: uppermost(obj) < len(I) // 2)
  bottom_obj = other(objects(I, T, F, F), top_obj)
  top_corner = add(ulcorner(top_obj), (1,1))
  bottom_corner = subtract(lrcorner(bottom_obj), (2,2))
  O = I
  for i in range(2):
    for j in range(2):
      O = fill(O, 1, {(top_corner[0] + i, top_corner[1] + j)})
      O = fill(O, 2, {(bottom_corner[0] + i, bottom_corner[1] + j)})
  return O
 
0.22, 6.2047377, def eedbgfaicecheadhbebecdibeejaaiec(I):
  obj1, obj2 = order(objects(I, F, F, T), uppermost)
  O = canvas(0, shape(I))
  for v, (i, j) in obj1:
    O = paint(O, {(1 if i >= uppermost(obj1) + height(obj1) // 2 else v, (i, j))})
  for v, (i, j) in obj2:
    O = paint(O, {(2 if i < uppermost(obj2) + height(obj2) // 2 else v, (i, j))})
  return O
 
0.185, 5.3099217, def eeabacajffjdehhcicfjejaifcbaadef(I):
  objs = objects(I, T, F, F)
  O = I
  for obj in objs:
    if color(obj) == 4:
      if uppermost(obj) < len(I) // 2:
        obj_width = width(obj)
        start_col = leftmost(obj) + (obj_width - 2) // 2
        end_col = start_col + 1
        O = paint(O, 
                  recolor(1, frozenset((i, j) for i, j in toindices(obj) if start_col <= j <= end_col))
                 )
      else:
        obj_width = width(obj)
        start_col = leftmost(obj) + (obj_width - 4) // 2
        end_col = start_col + 3
        O = paint(O, 
                  recolor(2, frozenset((i, j) for i, j in toindices(obj) if start_col <= j <= end_col))
                 )
  return O
 
0.22, 8.707173, def edfgfagffjceejbfagjafhfcfacbhabc(I):
  O = I
  for i, row in enumerate(I):
    for j, value in enumerate(row):
      if value == 4:
        if i < len(I) // 2:
          if (j >= len(row) // 2 - 1) and (j <= len(row) // 2):
            O = paint(O, {(1, (i, j))})
        else:
          if (j >= len(row) // 2 - 2) and (j <= len(row) // 2 + 1):
            O = paint(O, {(2, (i, j))})
  return O
 
0.15, 20.660196, def ecjjdeajfhcfejbfjcafcjhdaibjiiie(I):
  O = I  # Modify the grid in-place
  for i in range(height(I)):
    for j in range(width(I)):
      if i % 4 == 1 and j % 4 == 1 and index(I, (i - 1, j - 1)) != 0: # Check for top-left corner of inner square
        fill_color = 1 if i < height(I) // 2 else 2  # Determine fill color
        O = underfill(O, fill_color, frozenset({(i, j), (i, j + 1), (i + 1, j), (i + 1, j + 1)}))
  return O
 
0.365, 72.64524, def cdchbfedefjaedbijedjfdccacdfcadd(I):
  O = canvas(mostcolor(I), shape(I))  # Create a blank canvas
  for obj in objects(I, T, F, T):
    if shape(obj) == (4, 4):
      fill_color = 1 if uppermost(obj) < height(I) // 2 else 2
      inner_indices = frozenset((i + 1, j + 1) for i in range(2) for j in range(2))
      inner_square = shift(inner_indices, ulcorner(obj))
      O = paint(O, recolor(fill_color, inner_square))
  return O
 
0.41000000000000003, 66.887314, def egbefbcdjhedeceeacdbbiajaaffajfj(I):
  O = canvas(mostcolor(I), shape(I))
  for i in range(1, height(I) - 1, 4):
    for j in range(1, width(I) - 1, 4):
      if index(I, (i - 1, j - 1)) != 0:  # Check for 4x4 square
        fill_color = 1 if i < height(I) // 2 else 2
        O = paint(O, recolor(fill_color, frozenset({(i, j), (i, j + 1), (i + 1, j), (i + 1, j + 1)})))
  return O
 
0.175, 10.067272, def cedfedcbbjacejgcbfbdhagfddcbebce(I):
  objs = objects(I, T, F, F)
  O = I
  for c, obj in enumerate(objs):
    for i in range(2):
      for j in range(2):
        O = paint(O, {(c+1, (uppermost(obj) + int(c==1) + i, leftmost(obj) + int(c==0) + j))})
  return O
 
0.365, 60.1783, def ccaadcijgdddehhjiaabeiaebedfffaf(I):
  O = canvas(mostcolor(I), shape(I))
  for i in range(1, height(I) - 2, 4):
    for j in range(1, width(I) - 2, 4):
      if all(index(I, (i + di, j + dj)) != 0 for di in range(4) for dj in range(4)): # Check for 4x4 non-zero
        fill_color = 1 if i < height(I) // 2 else 2
        O = paint(O, recolor(fill_color, frozenset({(i+1, j+1), (i+1, j+2), (i+2, j+1), (i+2, j+2)})))
  return O
 
0.345, 56.544136, def bfffccadabdaebbeagchicbibdgjffdj(I):
  O = canvas(mostcolor(I), shape(I))
  objs = objects(I, T, F, T)
  for obj in objs:
    if size(obj) >= 16:  # Consider objects with at least 16 cells
      i, j = ulcorner(obj)
      if all(index(I, (i + di, j + dj)) != 0 for di in range(4) for dj in range(4)): # Double-check 4x4 is filled
        fill_color = 1 if i < height(I) // 2 else 2
        O = paint(O, recolor(fill_color, frozenset({(i+1, j+1), (i+1, j+2), (i+2, j+1), (i+2, j+2)})))
  return O
 
0.385, 86.21019, def behgedjiefcbebiejbfbhgcaacehgfca(I):
  O = canvas(mostcolor(I), shape(I))
  for i in range(0, height(I) - 3, 4):
    for j in range(0, width(I) - 3, 4):
      sub = crop(I, (i, j), (4, 4))  # Extract 4x4 subgrid
      if colorcount(sub, 0) == 0:  # Check if it's fully non-zero
        fill_color = 1 if i < height(I) // 2 else 2
        O = paint(O, recolor(fill_color, frozenset({(i+1, j+1), (i+1, j+2), (i+2, j+1), (i+2, j+2)})))
  return O
 
0.22999999999999998, 12.526386, def bjbfgfgedcdeegfdadfbhcefcffeaadi(I):
  # Extract objects and order by uppermost
  obj1, obj2 = order(objects(I, F, F, T), uppermost)
  # Apply transformation based on object order
  O = paint(canvas(0, shape(I)), recolor(2, apply(lambda cell: (cell[0], (cell[1][0] // 2, cell[1][1])), obj1)))
  O = paint(O, recolor(1, apply(lambda cell: (cell[0], (cell[1][0] // 2, cell[1][1])), obj2)))
  # Paint original objects
  O = paint(O, obj1)
  O = paint(O, obj2)
  return O
 
0.525, 12.952614, def dgcibdejbhjiehcfjedgebebieehjefe(I):
  # Define function to conditionally recolor columns
  def recolor_columns(grid, color, start_col, end_col):
    return tuple(
        tuple(
            color if start_col <= j < end_col else grid[i][j]
            for j in range(len(grid[0]))
        )
        for i in range(len(grid))
    )

  # Identify objects and calculate stripe parameters
  objs = objects(I, T, F, F)
  top_obj = extract(objs, lambda obj: uppermost(obj) < len(I) // 2)
  bottom_obj = extract(objs, lambda obj: uppermost(obj) >= len(I) // 2)

  # Recolor grids directly
  if height(top_obj) < height(bottom_obj):
    top_start_col = leftmost(top_obj) + (width(top_obj) - 2) // 2
    top_end_col = top_start_col + 2
    bottom_start_col = leftmost(bottom_obj) + (width(bottom_obj) - 4) // 2
    bottom_end_col = bottom_start_col + 4
    I = recolor_columns(I, 1, top_start_col, top_end_col)
    I = recolor_columns(I, 2, bottom_start_col, bottom_end_col)
  else:
    top_start_col = leftmost(top_obj) + (width(top_obj) - 4) // 2
    top_end_col = top_start_col + 4
    bottom_start_col = leftmost(bottom_obj) + (width(bottom_obj) - 2) // 2
    bottom_end_col = bottom_start_col + 2
    I = recolor_columns(I, 2, top_start_col, top_end_col)
    I = recolor_columns(I, 1, bottom_start_col, bottom_end_col)

  return I
 
0.12, 22.099318, def ffhabffeaddiefebbejedciiiiccchhb(I):
  objs = sorted(objects(I, T, F, F), key=lambda obj: uppermost(obj))
  O = I
  for i, obj in enumerate(objs):
    color = 2 if i == 1 else 1
    corner = lrcorner(obj) if i == 1 else ulcorner(obj)
    offset = (-1, -1) if i == 1 else (1, 1)
    O = paint(O, recolor(color, toobject(crop(I, add(corner, offset), (2,2)), I)))
  return O
 
0.12, 23.051414, def gdcheaaifbcaeccciacccjbjacbiifec(I):
  objs = objects(I, T, F, F)
  O = I
  for i, obj in enumerate(objs):
    size_factor = i * 2 + 1 
    offset = (size_factor // 2, size_factor // 2)
    corner = add((uppermost(obj), leftmost(obj)), offset)
    O = paint(O, recolor(i+1, toobject(crop(I, corner, (2,2)), I)))
  return O
 
0.125, 24.989908, def aebcjcaaacgcehfaidiihcdjdfbbfiea(I):
  top, bottom = vsplit(I, 2)
  left_top, right_top = hsplit(top, 2)
  left_bottom, right_bottom = hsplit(bottom, 2)
  recolored_top = paint(left_top, recolor(1, toobject(crop(right_top, (1,1), (2,2)), right_top)))
  recolored_bottom = paint(left_bottom, recolor(2, toobject(crop(right_bottom, (-2, -2), (2,2)), right_bottom)))
  return vconcat(hconcat(recolored_top, right_top), hconcat(recolored_bottom, right_bottom))
 
0.13, 23.5276, def ghjdhceefceeebajaebbhaeacabadcje(I):
  objs = objects(I, T, F, F)
  top_obj = min(objs, key=lambda obj: uppermost(obj))
  bottom_obj = max(objs, key=lambda obj: uppermost(obj))
  patch_size = (2, 2)
  top_offset = subtract(centerofmass(top_obj), centerofmass(crop(I, add(ulcorner(top_obj), (1,1)), patch_size)))
  bottom_offset = subtract(centerofmass(bottom_obj), centerofmass(crop(I, subtract(lrcorner(bottom_obj), (1,1)), patch_size)))
  O = paint(I, recolor(1, toobject(crop(I, add(ulcorner(top_obj), top_offset), patch_size), I)))
  O = paint(O, recolor(2, toobject(crop(I, add(ulcorner(bottom_obj), bottom_offset), patch_size), I)))
  return O
 
0.185, 20.103699, def dibacajgbhehecbiadcaifabbjhibghb(I):
  objs = objects(I, T, F, T)
  obj1 = first(objs)
  obj2 = other(objs, obj1)
  
  # Transform obj1:
  c = centerofmass(obj1)
  line =  {(c[0], c[1]-1), (c[0], c[1]), (c[0], c[1]+1)}
  obj1_new = recolor(1, intersection(toindices(obj1), line))
  
  # Transform obj2:
  c = centerofmass(obj2)
  square = {(c[0], c[1]-1), (c[0]-1, c[1]-1), (c[0]-1, c[1]), (c[0], c[1])}
  obj2_new = recolor(2, intersection(toindices(obj2), square))

  return paint(paint(cover(I, obj1), obj1_new), obj2_new)
 
0.255, 37.86109, def bhajgcgefhaeeficagfebibacageddcf(I):
  o = objects(I, T, F, T)
  o1 = argmax(o, height)
  o2 = other(o, o1)

  # Transform o1:
  u = ulcorner(o1)
  o1_new = recolor(1, {(u[0]+1, u[1]+1), (u[0]+1, u[1]+2), (u[0]+1, u[1]+3)}) 

  # Transform o2:
  l = llcorner(o2)
  o2_new = recolor(2, {(l[0]-1, l[1]+1), (l[0]-1, l[1]+2), (l[0], l[1]+1), (l[0], l[1]+2)}) 

  return paint(paint(cover(I, o1), o1_new), o2_new)
 
0.06, 3.457336, def dcadgcchceiceahebecaafceabdfadei(I):
  objs = objects(I, T, F, T)
  result = I
  for i, obj in enumerate(objs):
    c = centerofmass(obj)
    for cell in obj:
      x, y = cell[1]
      if i == 0 and y == c[1]:
        result = fill(result, 1, {(x, y)})
      if i == 1 and abs(x-c[0]) <= 1 and abs(y-c[1]) <= 1:
        result = fill(result, 2, {(x, y)})
  return result
 
0.255, 37.044796, def bdbibeaeadhbeighbbhchfeeeaddagfe(I):
  o = objects(I, T, F, T)
  o1 = argmax(o, height)
  o2 = other(o, o1)

  # Transform o1 (same as Version 2)
  u = ulcorner(o1)
  o1_new = recolor(1, {(u[0]+1, u[1]+1), (u[0]+1, u[1]+2), (u[0]+1, u[1]+3)}) 

  # Transform o2 using hmirror and the same logic as o1
  o2_mirrored = hmirror(o2)
  u = ulcorner(o2_mirrored) 
  o2_mirrored_new = recolor(2, {(u[0]+1, u[1]+1), (u[0], u[1]+1), (u[0], u[1]+2), (u[0]+1, u[1]+2)})
  o2_new = hmirror(o2_mirrored_new) # Mirror back

  return paint(paint(cover(I, o1), o1_new), o2_new)
 
0.28, 26.27873, def bcjbfaccabhbefbhjajfjdfbdbjgjabi(I):
  objs = objects(I, T, F, T) 
  top_obj = argmax(objs, lambda obj: uppermost(obj))
  bottom_obj = other(objs, top_obj)
  
  # Assuming top object is always 5xW and bottom is Hx6:
  top_obj_new = recolor(1, shift( {(2, 2)}, ulcorner(top_obj))) 
  bottom_obj_new = recolor(2, shift({(1, 1), (1, 2), (2, 1), (2, 2)}, llcorner(bottom_obj))) 

  return paint(paint(cover(I, top_obj), top_obj_new), bottom_obj_new) 
 
0.055, 4.128342, def fgjghjafhaheeaffaejbdedifhhbjgee(I):
  objs = objects(I, T, F, T)
  obj1 = first(objs)
  obj2 = other(objs, obj1)
  if uppermost(obj1) < uppermost(obj2):
    top_obj = obj1
    bottom_obj = obj2
  else:
    top_obj = obj2
    bottom_obj = obj1
  O = paint(I, recolor(1, inbox(toindices(top_obj)))) # Recolor and paint top object's inbox
  O = paint(O, recolor(2, inbox(toindices(bottom_obj)))) # Recolor and paint bottom object's inbox
  return O
 
0.055, 2.7772217, def cdcbccafbbfbedcciecjdbccfaefbhdb(I):
  objs = objects(I, T, F, T)
  top_obj = extract(objs, lambda obj: uppermost(obj) < len(I) // 2) # Extract top object
  bottom_obj = other(objs, top_obj)  # The remaining object is the bottom one
  O = I
  for i in range(uppermost(top_obj) + 1, lowermost(top_obj)):
    for j in range(leftmost(top_obj) + 1, rightmost(top_obj)):
      O = fill(O, 1, {(i, j)})  # Fill top object's inbox
  for i in range(uppermost(bottom_obj) + 1, lowermost(bottom_obj)):
    for j in range(leftmost(bottom_obj) + 1, rightmost(bottom_obj)):
      O = fill(O, 2, {(i, j)})  # Fill bottom object's inbox
  return O
 
0.25, 11.877057, def hfbeebgdcdcaeeecbiiiaaefaddaffaj(I):
  # Identify objects, obj1 is always the upper one
  obj1, obj2 = order(objects(I, F, F, T), uppermost)
  # Calculate splitting point based on the upper object
  split = uppermost(obj1) + height(obj1) // 2
  # Determine recoloring values based on object positions
  upper_color = 2 if uppermost(obj1) < uppermost(obj2) else 1
  lower_color = 1 if uppermost(obj1) < uppermost(obj2) else 2
  # Create indices for upper and lower halves based on split
  upper_half = frozenset((i, j) for i in range(uppermost(obj2), split) for j in range(leftmost(obj2), rightmost(obj2) + 1))
  lower_half = frozenset((i, j) for i in range(split, lowermost(obj2) + 1) for j in range(leftmost(obj2), rightmost(obj2) + 1))
  # Create canvas
  O = canvas(0, shape(I))
  # Paint upper and lower halves with corresponding colors
  O = paint(O, recolor(upper_color, upper_half))
  O = paint(O, recolor(lower_color, lower_half))
  # Paint original objects
  O = paint(O, obj1)
  O = paint(O, obj2)
  # Fill the inner part of the other object
  inner_obj = obj2 if uppermost(obj1) < uppermost(obj2) else obj1
  inner_corner = (uppermost(inner_obj) + 1, leftmost(inner_obj) + 1)
  inner_square = frozenset((inner_corner[0] + i, inner_corner[1] + j) for i in range(2) for j in range(2))
  O = paint(O, recolor(1, toobject(inner_square, I)))
  return O
 
0.20500000000000002, 8.710118, def cbfifdhacgagedjejadcgajbfcciabga(I):
  """
  Identifies and recolors 2x2 squares within objects based on their position.
  """
  objs = sorted(objects(I, T, F, F), key=lambda obj: uppermost(obj))
  O = I
  for i, obj in enumerate(objs):
    color = 1 + (i % 2)  # Alternate color: 1 or 2
    corner = lrcorner(obj) if i % 2 else ulcorner(obj)  # Choose corner based on object index
    offset = (-1, -1) if i % 2 else (1, 1)  # Choose offset based on object index
    square_indices = {(corner[0] + offset[0], corner[1] + offset[1]), 
                      (corner[0] + offset[0], corner[1]),
                      (corner[0], corner[1] + offset[1]),
                      (corner[0], corner[1])}  # Calculate 2x2 square indices
    O = fill(O, color, square_indices)  # Fill the square with the chosen color
  return O
 
0.31, 8.738563, def cgcdiacbbffhedchjdeghfjibidhfjfb(I):
  """
  Directly modifies grid values to recolor the target 2x2 squares.
  """
  O = [[v for v in row] for row in I]  # Create a modifiable copy of the grid
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if val != 0:
        try:
          if I[i+1][j] == val and I[i][j+1] == val and I[i+1][j+1] == val:
            O[i+1][j] = 1 + (i % 2)  # Recolor based on row index for alternating pattern
            O[i][j+1] = 1 + (i % 2)
            O[i+1][j+1] = 1 + (i % 2) 
        except IndexError: # Handle potential index errors at grid boundaries
          pass
  return tuple(tuple(row) for row in O)  # Convert back to the required grid format 
 
0.14500000000000002, 16.553583, def dahceadgifdheghdbbfccaebagecejbg(I):
  """
  Employs a functional approach using `apply` and lambda functions for recoloring.
  """
  objs = objects(I, T, F, F)
  def recolor_square(obj, color): 
    corner = lrcorner(obj) if color == 2 else ulcorner(obj)
    offset = (-1, -1) if color == 2 else (1, 1)
    square_indices = {(corner[0] + offset[0], corner[1] + offset[1]), 
                      (corner[0] + offset[0], corner[1]),
                      (corner[0], corner[1] + offset[1]),
                      (corner[0], corner[1])}
    return fill(I, color, square_indices)

  O = I
  for i, obj in enumerate(objs):
    O = apply(lambda O: recolor_square(obj, 1 + (i % 2)), [O])[0] # Apply recoloring function
  return O
 
0.305, 20.559402, def bbeabagcbabiefddbiiacgbacjaedagc(I):
  """
  Leverages nested loops and conditional statements for targeted grid modification.
  """
  O = [[v for v in row] for row in I]
  for i in range(len(I) - 1):
    for j in range(len(I[0]) - 1):
      if I[i][j] == I[i+1][j] == I[i][j+1] == I[i+1][j+1] != 0:  # Check for 2x2 square
        if (i + j) % 2 == 0:  # Alternate coloring based on row and column index sum
          O[i+1][j] = 1
          O[i][j+1] = 1
          O[i+1][j+1] = 1
        else:
          O[i+1][j] = 2
          O[i][j+1] = 2
          O[i+1][j+1] = 2
  return tuple(tuple(row) for row in O)
 
0.115, 6.114259, def djbjfedgajchejbfifcagejaecbbiihf(I):
  """
  Combines object detection and direct grid manipulation for a concise solution.
  """
  O = I
  for obj in objects(I, T, F, F):
    ul = ulcorner(obj)
    lr = lrcorner(obj)
    if ul[0] < lr[0] and ul[1] < lr[1]:  # Ensure object is at least 2x2
      color = 2 if uppermost(obj) > lowermost(obj) / 2 else 1 # Determine color based on object's vertical position
      O = fill(O, color, {(ul[0] + 1, ul[1] + 1), (ul[0] + 1, ul[1] + 2), (ul[0] + 2, ul[1] + 1), (ul[0] + 2, ul[1] + 2)})
  return O 
 
0.18, 22.441267, def ccdjdfcbacaeefcjbabfaccdbdifhcba(I):
  objs = objects(I, T, F, T)
  obj1 = first(objs)
  obj2 = other(objs, obj1)
  
  # Transform obj1 (top object):
  c1 = centerofmass(obj1)
  line1 = connect((c1[0]-1,c1[1]),(c1[0]+1,c1[1])) # Creating a line using connect 
  obj1_new = recolor(1, intersection(toindices(obj1), line1))
  
  # Transform obj2 (bottom object):
  c2 = centerofmass(obj2)
  line2 = connect((c2[0],c2[1]-1),(c2[0],c2[1]+1)) # Creating a line using connect
  obj2_new = recolor(2, intersection(toindices(obj2), line2))
  
  return paint(paint(cover(I, obj1), obj1_new), obj2_new)
 
0.21500000000000002, 7.8907194, def dbfheccgjajfefeeidiebjabfaadbceh(I):
  O = I
  h, w = height(I), width(I)
  for i in range(h):
    for j in range(w):
      if index(I, (i, j)) != 0:  # Check for non-background cells
        if i < h // 2:  # Top object
          if abs(i - h // 4) <= 1:  # Central vertical band
            O = fill(O, 1, {(i,j)})
        else:  # Bottom object
          if abs(j - w // 2) <= 1:  # Central horizontal band
            O = fill(O, 2, {(i,j)})
  return O
 
0.11499999999999999, 4.3907523, def iiciedhfbcijechdiicdfcdaffeghdhb(I):
  objs = objects(I, T, F, T)
  top_obj = argmin(objs, lambda obj:  centerofmass(obj)[0]) # Top object by minimum center of mass row index
  bottom_obj = other(objs, top_obj)

  top_color = 1 if size(top_obj) > size(bottom_obj) else 2 # Top color based on object size

  O = paint(I, recolor(top_color, inbox(toindices(top_obj))))
  O = paint(O, recolor(other({1,2}, top_color), inbox(toindices(bottom_obj))))
  return O
 
0.23500000000000001, 24.04575, def icfbcaabdacdedfiaacceafcdfgdgbae(I):
  # Identify objects and order by uppermost row
  obj1, obj2 = order(objects(I, F, F, T), uppermost)
  
  # Determine split object based on relative vertical position
  split_obj = obj2 if uppermost(obj1) < uppermost(obj2) else obj1
  other_obj = obj1 if uppermost(obj1) < uppermost(obj2) else obj2

  # Calculate split point
  h = height(split_obj) // 2
  
  # Generate top and bottom halves
  top_half = recolor(2 if split_obj == obj2 else 1, frozenset((v, (i,j)) for v, (i,j) in toobject(toindices(split_obj), I) if i < h))
  bottom_half = recolor(1 if split_obj == obj2 else 2, frozenset((v, (i,j)) for v, (i,j) in toobject(toindices(split_obj), I) if i >= h))

  # Create output canvas
  O = canvas(0, shape(I))
  
  # Paint objects onto canvas
  O = paint(paint(paint(O, top_half), bottom_half), other_obj)

  # Fill inner square of the other object
  inner_corner = add(ulcorner(other_obj), (1, 1))
  inner_square = frozenset((inner_corner[0] + i, inner_corner[1] + j) for i in range(2) for j in range(2))
  O = underfill(O, 1, inner_square)
  
  return O
 
0.19, 16.294947, def jcfgjiffcciaeeebaiibecaiceccffai(I):
  # Identify objects based on color, assuming only two colors
  obj1 = first(objects(I, T, F, T))
  obj2 = other(objects(I, T, F, T), obj1)

  # Determine the target object based on vertical position
  target_obj = obj1 if uppermost(obj1) < uppermost(obj2) else obj2

  # Split the target object into top and bottom halves
  h = height(target_obj) // 2
  top_half = recolor(2 if target_obj == obj1 else 1, frozenset((v, (i,j)) for v, (i,j) in target_obj if i < h))
  bottom_half = recolor(1 if target_obj == obj1 else 2, frozenset((v, (i,j)) for v, (i,j) in target_obj if i >= h))

  # Paint the recolored halves and the other object onto a blank canvas
  O = canvas(0, shape(I))
  O = paint(paint(paint(O, top_half), bottom_half), obj2 if target_obj == obj1 else obj1)

  # Fill the inner 2x2 square of the other object
  inner_obj = obj2 if target_obj == obj1 else obj1
  inner_corner = add(ulcorner(inner_obj), (1, 1))
  inner_square = frozenset((inner_corner[0] + i, inner_corner[1] + j) for i in range(2) for j in range(2))
  O = underfill(O, 1, inner_square)
  return O
 
0.135, 19.358456, def icdcbedefchgeajfbggbbeegdeeecfjf(I):
  objs = objects(I, T, F, F)
  O = I
  for i, obj in enumerate(objs):
      corner = branch(equality(i, 0), add(ulcorner(obj), (1,1)), subtract(lrcorner(obj), (1,1)))
      O = paint(O, recolor(i+1, crop(O, corner, TWO_BY_TWO)))
  return O
 
0.28, 9.512801, def cdabfecebdcjefcjafchajbaffcdahjb(I):
  return tuple(
      tuple(
          1 if i < height(I) // 2 and j < width(I) // 2 and I[height(I) - 1 - i][j] != 0 else
          2 if i >= height(I) // 2 and j < width(I) // 2 and I[i - height(I) // 2][j] != 0 else
          I[i][j]
          for j in range(width(I))
      )
      for i in range(height(I))
  )
 
0.54, 31.91614, def facbdddcfgdcecafaaafedcgeaegcbbf(I):
  O = canvas(0, shape(I))
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if val != 0:
        if i < height(I) // 2:
          O = paint(O, {(1, (i, width(I) // 2 - 1 - j))})
        else:
          O = paint(O, {(2, (height(I) // 2 - (i - height(I) // 2) - 1, j))})
  return O
 
0.275, 15.311288, def bfgaabhfgcafeejaagadfdabhjegbecc(I):
    objs = objects(I, T, F, T)
    O = I
    for obj in objs:
      if uppermost(obj) < height(I) // 2:
        shifted_obj = shift(obj, (0, -(2 * leftmost(obj))))
        mirrored_obj = {(v, (i, width(I) - 1 - j)) for v, (i, j) in shifted_obj}
        O = paint(O, recolor(1, mirrored_obj))
      else:
        shifted_obj = shift(obj, (-(2 * uppermost(obj)), 0))
        mirrored_obj = {(v, (height(I) - 1 - i, j)) for v, (i, j) in shifted_obj}
        O = paint(O, recolor(2, mirrored_obj))
    return O
 
0.21, 17.79578, def dadaidbaebhdeeidbafjjabdecbhjbda(I):
  top_obj = argmax(fgpartition(I), uppermost)
  bottom_obj = argmin(fgpartition(I), uppermost)
  return paint(paint(I, recolor(1, inbox(toindices(top_obj)))), 
               recolor(2, inbox(toindices(bottom_obj))))
 
0.26, 8.010221, def daadjhgcjhabebjgjjbfdffccfeebfcf(I):
  objs = objects(I, T, F, F)
  O = I
  for obj in objs:
    obj_width = width(obj)
    if uppermost(obj) < len(I) // 2:
      start_col = leftmost(obj) + (obj_width - 2) // 2
      end_col = start_col + 2
      O = paint(O, recolor(1, frozenset((i, j) for i, j in toindices(obj) if start_col <= j < end_col)))
    else:
      start_col = leftmost(obj) + (obj_width - 4) // 2
      end_col = start_col + 4
      O = paint(O, recolor(2, frozenset((i, j) for i, j in toindices(obj) if start_col <= j < end_col)))
  return O
 
0.17, 11.544888, def hjdejibgggjheeddiedhhddaadbgdced(I):
  objs = objects(I, T, F, F)
  t = min(objs, key=lambda obj: uppermost(obj))
  b = other(objs, t)
  O = I
  for i in range(2):
    for j in range(2):
      O = paint(O, {(1, (uppermost(t) + 1 + i, leftmost(t) + 1 + j))})
      O = paint(O, {(2, (lowermost(b) - 1 + i, rightmost(b) - 1 + j))})
  return O
 
0.12000000000000001, 21.052534, def cbgceecbedcbeeegiiaebebhjefeidca(I):
  o = objects(I, T, F, F)
  a = min(o, key=lambda obj: sum(i + j for i, j in toindices(obj)))
  b = other(o, a)
  return paint(paint(I, recolor(1, crop(I, add(ulcorner(a), (1, 1)), (2, 2)))), 
               recolor(2, crop(I, subtract(lrcorner(b), (1, 1)), (2, 2))))
 
0.16999999999999998, 14.5132675, def fbabaccjfcfgecaeaeabdeeddhcdbfjj(I):
  O = I
  objs = objects(I, T, F, T)
  for i, obj in enumerate(objs):
    center_j = centerofmass(obj)[1] # Find the object's center column
    for v, (row, col) in obj:
      if i == 0 and col in range(center_j - 1, center_j + 2): 
        O = fill(O, 1, {(row, col)}) # Modify top object
      elif i == 1 and row < height(I) // 2:
        O = fill(O, 2, {(row, col)}) # Modify bottom object
  return O
 
0.125, 13.292241, def gdcegecidcagecfdieeabicagjcaaebf(I):
  objs = objects(I, T, F, T)
  O = I
  for i, obj in enumerate(objs):
    if i == 0:
      O = paint(O, recolor(1, product({uppermost(obj), uppermost(obj)+1}, {leftmost(obj)+1, leftmost(obj)+2})))
    else:
      O = paint(O, recolor(2, product(interval(uppermost(obj), height(I) // 2, 1), interval(leftmost(obj), rightmost(obj) + 1, 1))))
  return O
 
0.22, 18.014496, def ccdebdaccbccebaiibafebggjfhdagja(I):
  objs = fgpartition(I)
  top_obj = argmax(objs, lambda obj: uppermost(obj))
  bottom_obj = argmin(objs, lambda obj: uppermost(obj))
  color1 = 1 if centerofmass(top_obj)[0] < len(I) // 2 else 2
  color2 = 3 - color1
  O = paint(I, recolor(color1, inbox(toindices(top_obj))))
  O = paint(O, recolor(color2, inbox(toindices(bottom_obj))))
  return O
 
0.235, 18.775736, def dbccecfajddcebefbfedecgebdahicdj(I):
  O = I
  for i, obj in enumerate(sorted(fgpartition(I), key=lambda obj: uppermost(obj))):
    color = 1 if i == 0 and uppermost(obj) < len(I) // 2 or i == 1 and uppermost(obj) >= len(I) // 2 else 2
    O = paint(O, recolor(color, inbox(toindices(obj))))
  return O
 
0.29500000000000004, 33.17088, def cjfcdaediffgebfjidgdfceddajiabbb(I):
  h, w = shape(I)
  O = canvas(0, (h, w)) 
  for i in range(h):
    for j in range(w):
      if I[i][j] != 0:
        obj = extract(objects(I, T, F, F), lambda obj: (i, j) in toindices(obj))
        stripe_width = 2 if uppermost(obj) < h // 2 else 4
        start_col = leftmost(obj) + (width(obj) - stripe_width) // 2
        O = paint(O, recolor(1 if i < h // 2 else 2, frozenset((a, b) for a, b in toindices(obj) if start_col <= b < start_col + stripe_width)))
  return O
 
0.4, 22.199575, def behadbdadbhcegccjcfbaidaaefdifca(I):
  h = height(I) // 2
  objs = objects(I, T, F, F)
  O = canvas(0, shape(I))
  for obj in objs:
    stripe_width = 2 if uppermost(obj) < h else 4
    start_col = leftmost(obj) + (width(obj) - stripe_width) // 2
    stripe = frozenset(
        (i, j) 
        for i in range(uppermost(obj), lowermost(obj) + 1) 
        for j in range(start_col, start_col + stripe_width)
    )
    O = paint(O, recolor(1 if uppermost(obj) < h else 2, stripe))
  return O
 
0.245, 7.3194804, def hhfaebjdjcbeejfaajaicfcdcchdjadd(grid):
  # Identify objects
  objs = objects(grid, T, F, F) 

  # Function to recolor an object based on column index
  def recolor_by_column(obj, new_color, start_col, end_col):
    return frozenset((new_color, (i, j)) if start_col <= j <= end_col else (c, (i, j)) for c, (i, j) in obj)

  # Apply transformations
  for i, obj in enumerate(objs):
    if i == 0:  # Top Object
      if width(obj) > 4: # For Input_1 like grids
        transformed_obj = recolor_by_column(obj, 2, 2, 4)
      else: # For Input_0 like grids
        transformed_obj = obj
    else: # Bottom Object
      if width(obj) > 4: # For Input_1 like grids
        transformed_obj = recolor_by_column(obj, 1, 2, 3)
      else: # For Input_0 like grids
        transformed_obj = recolor_by_column(obj, 2, 1, 2)

    grid = paint(cover(grid, obj), transformed_obj)

  return grid
 
0.20500000000000002, 13.994722, def fcacfdedffdeeddhbbgdcbdjjcadceff(grid):
  objs = objects(grid, T, F, F)
  
  top_obj = next((obj for i, obj in enumerate(objs) if i == 0), None)
  bottom_obj = next((obj for i, obj in enumerate(objs) if i == 1), None)

  if width(top_obj) > 4:
    top_obj = frozenset(((2 if 2 <= j <= 4 else c), (i, j)) for c, (i, j) in top_obj)
  if width(bottom_obj) > 4:
    bottom_obj = frozenset(((1 if 2 <= j <= 3 else c), (i, j)) for c, (i, j) in bottom_obj)
  else:
    bottom_obj = frozenset(((2 if 1 <= j <= 2 else c), (i, j)) for c, (i, j) in bottom_obj)

  grid = paint(cover(grid, top_obj), top_obj)
  grid = paint(cover(grid, bottom_obj), bottom_obj)

  return grid
 
0.275, 46.160053, def ffdbhihjhggcejccbceecdjafbijggfd(grid):
  objs = objects(grid, T, F, F)
  output_grid = canvas(0, shape(grid))

  for i, obj in enumerate(objs):
    if i == 0: # Top Object
      temp_grid = paint(output_grid, obj)
    else: # Bottom Object
      if width(obj) > 4: # Input_1 like grid
        temp_grid = paint(output_grid, recolor(1, obj))
      else: # Input_0 like grid
        temp_grid = paint(output_grid, recolor(2, obj))

    output_grid = cellwise(temp_grid, grid, 0)

  return output_grid
 
0.345, 22.13678, def dfjcfahbjbgeegccideabebbcdjhbaaf(grid):
  objs = objects(grid, T, F, F)
  output_grid = canvas(0, shape(grid))

  for i, obj in enumerate(objs):
    output_grid = paint(output_grid, obj)
    if i == 1: # Bottom object
      if width(obj) > 4: # Input_1 like grid
        parts = hsplit(grid, 3) 
        output_grid = paint(output_grid, recolor(1, asobject(parts[1])))
      else: # Input_0 like grid
        parts = hsplit(grid, 2)
        output_grid = paint(output_grid, recolor(2, asobject(parts[0]))) 

  return output_grid
 
0.14, 6.1888785, def eeabdbdicchceafgaaaaibfbdeeeifcb(I):
    # Identify objects
    objs = objects(I, T, F, T) 

    # Function to replace the center of an object with a given color
    def replace_center(obj, color):
      i_center, j_center = centerofmass(obj)
      return frozenset((color, (i, j)) if abs(i - i_center) <= 1 and abs(j - j_center) <= 1 else (v, (i, j)) for v, (i, j) in obj)
  
    # Replace center of top object with color 1
    top_obj = extract(objs, lambda obj: uppermost(obj) < len(I) // 2)
    modified_top_obj = replace_center(top_obj, 1)

    # Replace center of bottom object with color 2
    bottom_obj = extract(objs, lambda obj: uppermost(obj) >= len(I) // 2)
    modified_bottom_obj = replace_center(bottom_obj, 2)

    # Paint modified objects onto a blank canvas
    O = paint(paint(canvas(0, shape(I)), modified_top_obj), modified_bottom_obj)
    return O
 
0.22, 11.191713, def cabecbdgcdabefhdafhfjfbffcjaibbc(I):
    # Split the grid horizontally
    top_grid, bottom_grid = vsplit(I, 2)

    # Function to replace the center of a grid with a given color
    def replace_grid_center(grid, color):
        h, w = len(grid), len(grid[0])
        return tuple(tuple(color if abs(i-h//2) <= 1 and abs(j-w//2) <= 1 else grid[i][j] for j in range(w)) for i in range(h))

    # Replace center of each subgrid with appropriate color
    modified_top_grid = replace_grid_center(top_grid, 1)
    modified_bottom_grid = replace_grid_center(bottom_grid, 2)

    # Concatenate the modified grids vertically
    O = vconcat(modified_top_grid, modified_bottom_grid)
    return O
 
0.085, 5.639116, def eadefhddbfceechabccabehdicbfdebe(I):
    # Find objects
    objs = objects(I, T, F, T)

    # Function to fill a rectangular area within an object 
    def fill_area(obj, start, dims, color):
        return frozenset(((color, (i, j)) if (start[0] <= i < start[0] + dims[0] and start[1] <= j < start[1] + dims[1]) else (v, (i, j))) for v, (i, j) in obj)

    # Modify top object
    top_obj = extract(objs, lambda obj: uppermost(obj) < len(I) // 2)
    top_start = add(ulcorner(top_obj), (1, (width(top_obj) - 2) // 2))
    modified_top_obj = fill_area(top_obj, top_start, (2, 2), 1)

    # Modify bottom object
    bottom_obj = extract(objs, lambda obj: uppermost(obj) >= len(I) // 2)
    bottom_start = add(ulcorner(bottom_obj), ((height(bottom_obj) - 2) // 2, 1))
    modified_bottom_obj = fill_area(bottom_obj, bottom_start, (2, 2), 2)

    # Combine the modified objects
    O = paint(paint(canvas(0, shape(I)), modified_top_obj), modified_bottom_obj)
    return O
 
0.14, 5.9576592, def bffeacaicdaaefbbabdedjbcafbbafhe(I):
    # Identify the top and bottom objects
    objs = objects(I, T, F, T)
    top_obj = extract(objs, lambda obj: uppermost(obj) < len(I) // 2)
    bottom_obj = extract(objs, lambda obj: uppermost(obj) >= len(I) // 2)

    # Function to replace a specific cell within an object 
    def replace_cell(obj, offset, color):
        i_center, j_center = centerofmass(obj)
        return frozenset(((color, (i, j)) if (i == i_center + offset[0] and j == j_center + offset[1]) else (v, (i, j))) for v, (i, j) in obj)

    # Modify top object
    modified_top_obj = top_obj
    for i in range(-1, 1):
      for j in range(-1, 1):
        modified_top_obj = replace_cell(modified_top_obj, (i, j), 1)

    # Modify bottom object
    modified_bottom_obj = bottom_obj
    for i in range(-1, 1):
      for j in range(-1, 1):
        modified_bottom_obj = replace_cell(modified_bottom_obj, (i, j), 2)

    # Combine the modified objects
    O = paint(paint(canvas(0, shape(I)), modified_top_obj), modified_bottom_obj)
    return O
 
0.055, 4.128342, def eedfbfeifgcdeedabhbehhdjfgbddaaf(I):
  # Extract objects and their bounding boxes
  objs = objects(I, T, F, T)
  top_obj = extract(objs, lambda obj: uppermost(obj) < len(I) // 2)
  bottom_obj = extract(objs, lambda obj: uppermost(obj) >= len(I) // 2)
  top_box = inbox(toindices(top_obj))
  bottom_box = inbox(toindices(bottom_obj))

  # Function to replace colors within a bounding box
  def replace_in_box(grid, box, color):
    return tuple(tuple(color if (i, j) in box else grid[i][j] for j in range(len(grid[0]))) for i in range(len(grid)))

  # Replace colors within the bounding boxes
  modified_grid = replace_in_box(I, top_box, 1)
  O = replace_in_box(modified_grid, bottom_box, 2)
  return O
 
0.1, 14.648073, def ebdafdchfddfeeajjbdbjbaedcbidcaj(I):
  objs = objects(I, T, F, T)  # Extract connected regions
  O = I 
  for obj in objs:
    if size(obj) > 1: # Ignore single cell objects
      ul = ulcorner(obj)
      O = fill(O, 1 if uppermost(obj) < len(I) // 2 else 2, (astuple(ul[0] + 1, ul[1] + 1), astuple(ul[0] + 2, ul[1] + 2))) 
  return O 
 
0.15000000000000002, 16.899107, def jibfhcehbddbebbjbaedbdddfabegffa(I):
  objs = partition(I)  # Partition grid into objects based on color
  O = I
  for obj in objs:
    if color(obj) != 0 and size(obj) > 1:  # Ignore background and single cell objects
      center_i, center_j = centerofmass(obj)  # Find the center of mass
      O = fill(O, 1 if center_i < len(I) // 2 else 2, ((center_i, center_j), (center_i + 1, center_j), (center_i, center_j + 1), (center_i + 1, center_j + 1)))
  return O
 
0.08181818181818182, 94.47968, def echegaaceebeebaciaefgahbicifbafd(I):
    objs = objects(I, T, F, T)
    O = I
    for obj in objs:
        if size(obj) > 1:
            ul = ulcorner(obj)
            subgrid = crop(I, ul, (2, 2))
            new_color = 1 if uppermost(obj) < len(I) // 2 else 2
            recolored_subgrid = replace(subgrid, subgrid[0][0], new_color)
            O = hconcat(crop(O, (0, 0), (len(I), ul[1] + 1)), hconcat(recolored_subgrid, crop(O, (0, ul[1] + 2), (len(I), len(I[0]) - ul[1] - 2))))
    return O
 
0.37, 24.479567, def adijbjibdajdecbejbfebahbfiihbcdd(I):
    downscaled = downscale(I, 2)  # Downscale to simplify object detection
    objs = objects(downscaled, T, F, T)
    O = downscaled
    for obj in objs:
        if size(obj) > 1:
            ul = ulcorner(obj)
            new_color = 1 if uppermost(obj) < len(downscaled) // 2 else 2
            O = fill(O, new_color, ((ul[0], ul[1]), (ul[0] + 1, ul[1]), (ul[0], ul[1] + 1), (ul[0] + 1, ul[1] + 1))) 
    return upscale(O, 2) # Upscale back to original size
 
0.15, 8.600067, def jcfficbjdhcfeejaidjahdbhejfjddjf(I):
  # Get grid dimensions
  h, w = len(I), len(I[0])

  # Create output grid initialized with background color
  O = [[0 for _ in range(w)] for _ in range(h)]

  # Iterate through grid cells
  for i in range(h):
    for j in range(w):
      # Determine object membership based on position
      if I[i][j] != 0:
        if i < h // 2:
          # Top object: recolor center
          if abs(i - h // 4) <= 1 and abs(j - w // 2) <= 1:
            O[i][j] = 1 
          else:
            O[i][j] = I[i][j] 
        else:
          # Bottom object: recolor center
          if abs(i - h * 3 // 4) <= 1 and abs(j - w // 2) <= 1:
            O[i][j] = 2
          else:
            O[i][j] = I[i][j]
  return tuple(tuple(row) for row in O)
 
0.135, 4.963935, def cfaedfdcdaadeffaigdfigbfdcecbibe(I):
  # Identify top and bottom objects directly from grid
  top_obj = frozenset(
      (I[i][j], (i, j)) for i in range(len(I) // 2) for j in range(len(I[0])) if I[i][j] != 0
  )
  bottom_obj = frozenset(
      (I[i][j], (i, j)) for i in range(len(I) // 2, len(I)) for j in range(len(I[0])) if I[i][j] != 0
  )

  # Define a function to recolor the center of an object
  def recolor_center(obj, color):
    i_center, j_center = centerofmass(obj)
    return frozenset(
        ((color, (i, j)) if abs(i - i_center) <= 1 and abs(j - j_center) <= 1 else (v, (i, j)))
        for v, (i, j) in obj
    )

  # Recolor the centers of the objects
  recolored_top = recolor_center(top_obj, 1)
  recolored_bottom = recolor_center(bottom_obj, 2)

  # Paint the recolored objects onto a blank canvas
  O = paint(paint(canvas(0, shape(I)), recolored_top), recolored_bottom)
  return O
 
0.355, 15.187606, def gbfdfiedefdaecajbfeiaddecaiifeci(I):
  """
  Applies the recoloring transformation to a grid using nested loops.

  Args:
    I: The input grid.

  Returns:
    The transformed grid.
  """
  grid_height = len(I)
  O = [[v for v in row] for row in I]  # Create a copy of the grid
  for i, row in enumerate(I):
    for j, value in enumerate(row):
      if value != 0:  # Check for non-background cell
        if i < grid_height // 2:
          try:
            O[i + 1][j + 1] = 1  # Recolor diagonally down-right
            O[i + 2][j + 2] = 1  # Recolor two cells down-right
          except IndexError:  # Handle out-of-bounds access
            pass
        else:
          try:
            O[i + 1][j + 1] = 2
            O[i + 2][j + 2] = 2
          except IndexError:
            pass
  return tuple(tuple(row) for row in O)  # Convert back to tuple of tuples
 
0.26, 12.704615, def fcfdafbecibheahebadbdehdhgdcfifa(I):
  """
  Applies the recoloring transformation using map and lambda functions.

  Args:
    I: The input grid.

  Returns:
    The transformed grid.
  """
  grid_height = len(I)
  def recolor_cell(i, j, value):
    """
    Recolors a cell based on its position and value.
    """
    if value == 0: return value  # Ignore background cells
    new_color = 1 if i < grid_height // 2 else 2
    offset = 1 if i < grid_height // 2 else 2
    if i + offset < grid_height and j + offset < len(I[0]):
      return new_color
    return value

  return tuple(
      tuple(recolor_cell(i, j, value) for j, value in enumerate(row)) 
      for i, row in enumerate(I)
  )
 
0.385, 62.853447, def aaheidiedgabefhgihdfcbjhbbdgdhdd(I):
  objs = objects(I, T, F, T)
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  for obj in objs:
    w = width(obj)
    mid = leftmost(obj) + w // 2
    color = 1 if w > 4 else 2
    for i in range(uppermost(obj), lowermost(obj) + 1):
      O = fill(O, color, {(i, mid - 1), (i, mid)})
      O = fill(O, bg, {(i, j) for j in range(mid - 1, min(mid + 1, width(obj))) if (i, j) in toindices(obj)})
  return O
 
0.195, 5.584492, def fbaicgaddbdjeddbaccbeeeebejbaffc(I):
  bg = mostcolor(I)
  def modify_cell(i, j):
    obj = next((obj for obj in objects(I, T, F, T) if (i, j) in toindices(obj)), None)
    if obj:
      w = width(obj)
      mid = leftmost(obj) + w // 2
      return (1 if w > 4 else 2) if j in (mid - 1, mid) else bg if j in range(mid - 1, min(mid + 1, width(obj))) else I[i][j]
    return I[i][j]
  return tuple(tuple(modify_cell(i, j) for j in range(len(I[0]))) for i in range(len(I)))
 
0.11499999999999999, 6.0231457, def ddedfaaaijcbebcbicdfagafffidjffd(I):
  # 1. Get objects, excluding background
  objs = objects(I, T, F, T)

  # 2. Define function to recolor central region
  def recolor_center(obj):
    # Determine new color based on object's vertical position
    new_color = 1 if uppermost(obj) == 0 else 2
    h, w = halve(shape(obj))
    # Calculate center
    ci, cj = centerofmass(obj)
    # Create central region indices
    central_region = frozenset((i, j) for i in range(ci - h//2, ci + h//2 + h%2) 
                                 for j in range(cj - w//2, cj + w//2 + w%2))
    return recolor(new_color, central_region)

  # 3. Apply recoloring to each object and paint on original grid
  recolored_objs = apply(recolor_center, objs)
  O = I
  for obj in recolored_objs:
    O = paint(O, obj)
  return O
 
0.175, 12.681371, def abaefiejcdjbejgiigdfhcjajffecidi(I):
  # 1. Identify the two object colors
  obj_colors =  list(palette(I) - {mostcolor(I)})

  # 2. Define a function to process each color
  def process_color(color):
    # Get indices of the current color and its object
    indices = ofcolor(I, color)
    obj = toobject(indices, I)
    # Determine new color based on object position
    new_color = 1 if uppermost(obj) == 0 else 2 
    h, w = halve(shape(obj))
    # Calculate center 
    ci, cj = centerofmass(obj)
    # Create central region indices
    central_region = frozenset((i, j) for i in range(ci - h//2, ci + h//2 + h%2) 
                                  for j in range(cj - w//2, cj + w//2 + w%2))
    return recolor(new_color, central_region)

  # 3. Apply processing to each color and paint on original grid
  recolored_objs = apply(process_color, obj_colors) 
  O = I
  for obj in recolored_objs:
    O = paint(O, obj)
  return O
 
0.275, 14.203117, def jbfiegffjacgeajbbehbcjgfgeefbcfc(I):
  # 1. Partition grid into objects
  objs = partition(I) 

  # 2. Define function to recolor central region
  def recolor_center(obj, new_color):
    h, w = halve(shape(obj))
    ci, cj = centerofmass(obj)
    central_region = frozenset((i, j) for i in range(ci - h//2, ci + h//2 + h%2) 
                                for j in range(cj - w//2, cj + w//2 + w%2))
    return recolor(new_color, central_region)

  # 3. Recolor each object based on its position
  O = I
  for i, obj in enumerate(objs):
    if len(obj) > 1:  # Exclude single-cell objects
      new_color = 1 if i == 0 else 2
      recolored_obj = recolor_center(obj, new_color)
      O = paint(O, recolored_obj)
  return O
 
0.275, 19.630013, def egjcdccfjaiaefbfigjdefjgdegecaca(I):
    # 1. Find top and bottom object indices
    top_indices = ofcolor(I, extract(palette(I) - {mostcolor(I)}, identity))
    bottom_indices = ofcolor(I, mostcolor(I)) if size(top_indices) < size(ofcolor(I, mostcolor(I))) else ofcolor(I, other(palette(I), mostcolor(I)))

    # 2. Define function to recolor central region based on indices
    def recolor_indices(indices, new_color):
        obj = toobject(indices, I)
        h, w = halve(shape(obj))
        ci, cj = centerofmass(obj)
        central_region = frozenset((i, j) for i in range(ci - h//2, ci + h//2 + h%2) 
                                    for j in range(cj - w//2, cj + w//2 + w%2))
        return recolor(new_color, central_region)

    # 3. Recolor central regions
    top_recolored = recolor_indices(top_indices, 1)
    bottom_recolored = recolor_indices(bottom_indices, 2)

    # 4. Paint recolored regions onto the grid
    O = paint(paint(I, top_recolored), bottom_recolored)
    return O
 
0.21, 12.455996, def fbacabiahiiaecadiccheifajecdbjic(I):
  # 1. Get non-background colors from the grid
  colors = list(palette(I) - {mostcolor(I)}) 

  # 2. Identify the objects based on color
  obj1 = toobject(ofcolor(I, colors[0]), I) 
  obj2 = toobject(ofcolor(I, colors[1] if len(colors) > 1 else colors[0]), I) # Handle cases with only one object color

  # 3. Define function to recolor an object's center
  def recolor_obj_center(obj, new_color):
    h, w = halve(shape(obj))
    ci, cj = centerofmass(obj)
    central_region = frozenset((i, j) for i in range(ci - h//2, ci + h//2 + h%2) 
                                for j in range(cj - w//2, cj + w//2 + w%2))
    return recolor(new_color, central_region) 

  # 4. Recolor the objects' centers based on their positions
  recolored_obj1 = recolor_obj_center(obj1, 1 if uppermost(obj1) == 0 else 2)
  recolored_obj2 = recolor_obj_center(obj2, 2 if uppermost(obj1) == 0 else 1)

  # 5. Paint the recolored objects onto the original grid
  O = paint(paint(I, recolored_obj1), recolored_obj2)
  return O
 
0.37, 57.6009, def ecgbaahbfgcjecdcafecbidjgadjcgec(I):
  # Identify distinct objects in the grid
  objs = objects(I, T, F, T)

  # Function to recolor the center of an object
  def recolor_center(obj, color):
    h, w = height(obj), width(obj)
    center_i, center_j = center(obj)
    return recolor(color, frozenset({(center_i, center_j), (center_i + 1, center_j), 
                                     (center_i, center_j + 1), (center_i + 1, center_j + 1)}))
  
  # Apply recoloring based on object's vertical position
  recolored_objs = set()
  for obj in objs:
    if uppermost(obj) < len(I) // 2:
      recolored_objs.add(recolor_center(obj, 1))
    else:
      recolored_objs.add(recolor_center(obj, 2))

  # Paint the recolored objects onto a blank canvas
  O = paint(canvas(0, shape(I)), merge(recolored_objs))
  return O
 
0.16999999999999998, 12.076358, def efbccdcebeaeeafbjfdcgfffeefecejj(I):
  # Split the grid horizontally
  top, bottom = vsplit(I, 2)
  
  # Function to recolor the center 2x2 square of a grid
  def recolor_grid_center(grid, color):
    h, w = len(grid), len(grid[0])
    return fill(grid, color, frozenset({(h//2, w//2), (h//2 - 1, w//2),
                                     (h//2, w//2 - 1), (h//2 - 1, w//2 - 1)}))

  # Recolor the center of each half
  top = recolor_grid_center(top, 1)
  bottom = recolor_grid_center(bottom, 2)

  # Concatenate the modified grids vertically
  O = vconcat(top, bottom)
  return O
 
0.345, 53.571026, def bedibacacfgdeeadbacejaaeefebdhhh(I):
  # Identify the objects in the grid
  objs = objects(I, T, F, T)

  # Function to recolor a 2x2 square within an object based on its position
  def recolor_object_square(obj, color):
    if uppermost(obj) < len(I) // 2:
      i, j = uppermost(obj) + 1, leftmost(obj) + 1
    else:
      i, j = lowermost(obj) - 2, leftmost(obj) + 1
    return recolor(color, frozenset({(i, j), (i + 1, j), (i, j + 1), (i + 1, j + 1)}))

  # Recolor the squares within each object
  recolored_objs = frozenset(recolor_object_square(obj, 1 if uppermost(obj) < len(I) // 2 else 2) for obj in objs)

  # Paint the recolored objects onto a blank canvas
  O = paint(canvas(0, shape(I)), merge(recolored_objs))
  return O
 
0.14500000000000002, 11.080494, def iifbhafcbffcebchjdcdcadbbcgecfba(I):
  # Get grid dimensions
  h, w = len(I), len(I[0])

  # Function to recolor a 2x2 square in a grid
  def recolor_square(grid, start_i, start_j, color):
    return fill(grid, color, frozenset({(start_i, start_j), (start_i + 1, start_j), 
                                     (start_i, start_j + 1), (start_i + 1, start_j + 1)}))

  # Identify the starting points for recoloring based on object positions
  for i in range(h):
    for j in range(w):
      if I[i][j] != 0:
        if i < h // 2:
          top_i, top_j = i + 1, j + 1
        else:
          bottom_i, bottom_j = i - 2, j + 1
        break

  # Recolor the squares
  I = recolor_square(I, top_i, top_j, 1)
  O = recolor_square(I, bottom_i, bottom_j, 2)
  return O
 
0.355, 52.518394, def ehefehajdaibeaeajbfgcjghgdjfdbgi(I):
  # Identify the objects in the grid
  objs = objects(I, T, F, T)
  
  # Function to determine the recoloring color based on object index
  def get_recolor_color(index):
    return 1 if index == 0 else 2
  
  # Recolor the center 2x2 square of each object
  recolored_objs = set()
  for index, obj in enumerate(objs):
    h, w = height(obj), width(obj)
    center_i, center_j = h // 2, w // 2
    recolored_objs.add(recolor(get_recolor_color(index), 
                                frozenset({(center_i, center_j), (center_i + 1, center_j), 
                                          (center_i, center_j + 1), (center_i + 1, center_j + 1)})))

  # Paint the recolored objects onto a blank canvas
  O = paint(canvas(0, shape(I)), merge(recolored_objs))
  return O
 
0.365, 69.2114, def jbieeafgdchbeajdabdebebgcddfchbf(I):
  """
  Uses object manipulation to recolor cells based on their position.

  Args:
    I: The input grid.

  Returns:
    The transformed grid.
  """
  gh = height(I)
  objs = objects(I, F, F, T)  # Get all non-background objects
  O = canvas(0, shape(I))
  for obj in objs:
    ul = ulcorner(obj) 
    new_color = 1 if ul[0] < gh // 2 else 2
    cells_to_recolor = {(ul[0] + 1, ul[1] + 1), (ul[0] + 2, ul[1] + 2)}
    recolored_obj = recolor(new_color, cells_to_recolor)
    O = paint(O, recolored_obj)
  return O
 
0.385, 51.660583, def bdaacbiadfefebbibaebjejajbjiegfe(I):
  objs = objects(I, T, F, T)
  bg = mostcolor(I)
  def modify_obj(obj):
    w = width(obj)
    mid = leftmost(obj) + w // 2
    strip = frozenset((i, j) for i in range(uppermost(obj), lowermost(obj) + 1) for j in range(mid - 1, min(mid + 1, width(obj))))
    color = 1 if w > 4 else 2
    return recolor(color, strip) | recolor(bg, intersection(toindices(obj), strip))
  modified_objs = frozenset(modify_obj(obj) for obj in objs)
  return paint(canvas(bg, shape(I)), merge(modified_objs)) 
 
0.175, 7.6850333, def becbbchjbebjedgcjaaeaaehjeacbefc(I):
  bg = mostcolor(I)
  def modify_cell(i, j):
    obj = next((obj for obj in objects(I, T, F, T) if (i, j) in toindices(obj)), None)
    if obj is None:
      return bg
    w = width(obj)
    mid = leftmost(obj) + w // 2
    if j in range(mid - 1, min(mid + 1, width(obj))):
      return 1 if w > 4 else 2
    elif j in range(mid - 1, min(mid + 2, width(obj))):
        return bg
    else:
      return I[i][j]
  return tuple(tuple(modify_cell(i, j) for j in range(len(I[0]))) for i in range(len(I)))
 
0.385, 86.21019, def ahceaijeajbaejifacbcjgiidafadece(I):
  objs = objects(I, T, F, T)
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  for obj in objs:
    w = width(obj)
    mid = leftmost(obj) + w // 2
    color = 1 if w > 4 else 2
    for i in range(uppermost(obj), lowermost(obj) + 1):
      for j in range(mid - 1, min(mid + 1, width(obj))):
        O = paint(O, {(color, (i, j))})
        if (I[i][j], (i, j)) in obj:
          O = paint(O, {(bg, (i, j))})
  return O
 
0.155, 5.55684, def ebdcfdffidifeicbiiejafgcccahhddh(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  
  def recolor_center_columns(obj, new_color):
    leftmost_col = leftmost(obj)
    central_cols = frozenset((i, j) for i, j in toindices(obj) 
                             if leftmost_col + width(obj)//2 - 1 <= j <= leftmost_col + width(obj)//2)
    return recolor(new_color, central_cols)

  O = I
  for i, obj in enumerate(sorted(objs, key=uppermost)):
    new_color = 1 if i == 0 else 2 
    recolored_obj = recolor_center_columns(obj, new_color)
    O = paint(O, recolored_obj)
  return O
 
0.245, 9.315633, def dbaeaeefebiaejjhbaibafgaddebgefg(I):
  objs = partition(I) - {frozenset({(mostcolor(I), (i, j)) for i, r in enumerate(I) for j, v in enumerate(r)})}

  def recolor_center(obj, new_color):
    _, w = shape(obj)
    offset = (w - 2) // 2
    return recolor(new_color, frozenset((i, j) for i, j in toindices(obj) 
                                       if leftmost(obj) + offset <= j <= leftmost(obj) + offset + 1))

  O = I
  for i, obj in enumerate(sorted(objs, key=lambda obj: min(i for i, j in toindices(obj)))):
    if len(obj) > 1: 
      new_color = 1 if i == 0 else 2
      recolored_obj = recolor_center(obj, new_color)
      O = paint(O, recolored_obj)
  return O
 
0.20500000000000002, 8.883893, def eafebfaaaabcefecacdgbidehbfahaae(I):
  objs = fgpartition(I)

  def recolor_middle(obj, new_color):
    left, _ = ulcorner(obj)
    right, _ = lrcorner(obj)
    middle = (left + right) // 2
    return recolor(new_color, frozenset((i, j) for i, j in toindices(obj) if j in (middle - 1, middle)))

  output_grid = I
  for i, obj in enumerate(sorted(objs, key=lambda x: min(x, key=lambda y: y[1])[1][0])):
    output_grid = paint(output_grid, recolor_middle(obj, 1 if i == 0 else 2))
  return output_grid 
 
0.16999999999999998, 5.171659, def effbceegcffeefeeaecgicdhbhbeagbb(I):
  def recolor_columns(obj, new_color):
    min_j = leftmost(obj)
    max_j = rightmost(obj)
    middle_j = (min_j + max_j) // 2
    return frozenset((color, (i, j)) if j != middle_j and j != (middle_j - (max_j - min_j) % 2)
                      else (new_color, (i, j))
                      for color, (i, j) in obj)

  objects_in_grid = objects(I, univalued=True, diagonal=False, without_bg=True)
  sorted_objects = sorted(objects_in_grid, key=lambda obj: min([i for i, j in toindices(obj)]))

  output_grid = I
  for i, obj in enumerate(sorted_objects):
      output_grid = paint(output_grid, recolor_columns(obj, 1 if i == 0 else 2))

  return output_grid
 
0.16999999999999998, 5.171659, def adibcedhaafjejadbdchiaagbcehjdfi(I):
    objs = objects(I, T, F, T)
    top_obj = extract(objs, lambda obj: uppermost(obj) < len(I) // 2)
    bottom_obj = extract(objs, lambda obj: uppermost(obj) >= len(I) // 2)

    def recolor_center(obj, color):
      leftmost_j = leftmost(obj)
      rightmost_j = rightmost(obj)
      middle_j = (leftmost_j + rightmost_j) // 2
      return frozenset(
          (color, (i, j)) if j in [middle_j, middle_j + width(obj) % 2 - 1] else (v, (i, j)) 
          for v, (i, j) in obj
      )

    modified_top_obj = recolor_center(top_obj, 1)
    modified_bottom_obj = recolor_center(bottom_obj, 2)
    O = paint(paint(canvas(0, shape(I)), modified_top_obj), modified_bottom_obj)
    return O
 
0.185, 7.9517555, def egfajfbeecdcebcgjfhbefdagdbcfffa(I):
    objs = objects(I, T, F, T)
    objs = order(objs, lambda obj: -size(obj)) # Sort by size in descending order

    def recolor_middle_strip(obj, color):
      start_j = leftmost(obj) + (width(obj) // 2) - 1
      end_j = start_j + 2 - (width(obj) % 2)  
      return frozenset(
          (color, (i, j)) if j in range(start_j, end_j) else (v, (i, j)) 
          for v, (i, j) in obj
      )

    modified_objs = (
        recolor_middle_strip(objs[0], 1), 
        recolor_middle_strip(objs[1], 2)
    )
    O = paint(canvas(0, shape(I)), merge(modified_objs))
    return O
 
0.155, 7.0924335, def ficgbccddeaceefdjdbgcciiehhjdbbi(I):
  def modify_object(obj, color):
    j_center = (leftmost(obj) + rightmost(obj)) // 2
    return frozenset((color, (i, j)) if abs(j - j_center) <= width(obj) % 2 else (v, (i, j)) for v, (i, j) in obj)

  objs = objects(I, T, F, T)
  top_obj = argmax(objs, lambda obj: (lowermost(obj) < len(I) // 2, size(obj)))
  bottom_obj = argmax(objs, lambda obj: (uppermost(obj) >= len(I) // 2, size(obj)))

  O = paint(
      paint(canvas(0, shape(I)), modify_object(top_obj, 1)), 
      modify_object(bottom_obj, 2)
  )
  return O
 
0.385, 43.775116, def ieccbgbecfafehbdjbccdaagbfhdibdh(I):
  def paint_strip(grid, obj, color, column_offset, column_count):
    for i in range(uppermost(obj), lowermost(obj) + 1):
      for j in range(leftmost(obj) + column_offset, leftmost(obj) + column_offset + column_count):
        if (i, j) in toindices(obj):
          grid = fill(grid, color, {(i, j)})
    return grid

  objs = sorted(objects(I, T, F, T), key=lambda obj: -size(obj))
  O = canvas(0, shape(I))
  O = paint_strip(O, objs[0], 1, width(objs[0]) // 2 - 1, 2 - width(objs[0]) % 2)
  O = paint_strip(O, objs[1], 2, width(objs[1]) // 2 - 1, 2 - width(objs[1]) % 2)
  return O
 
0.32, 5.6897583, def hajcieifjbdcefcfaaajibggeefjicea(I):
  """
  This version utilizes a loop and conditional recoloring based on object membership and a counter.
  """
  objs = objects(I, F, F, T)
  O = I
  count = 1
  for obj in objs:
    for i, j in toindices(obj):
      if i in (uppermost(obj), uppermost(obj) + 1):
        O = paint(O, {(count, (i, j))})
      elif i in (lowermost(obj) - 1, lowermost(obj)):
        O = paint(O, {(count + 1, (i, j))})
    count = 1 if count == 2 else 2
  return O
 
0.11499999999999999, 25.916822, def gfjehbeeddcdeiieifecccbdbgcbffaf(I):
  out = I 
  for obj in objects(I, T, F, T):
    w = width(obj)
    mid = leftmost(obj) + w // 2
    strip = frozenset((i, j) for i in range(uppermost(obj), lowermost(obj) + 1) for j in range(max(0, mid - 1), min(mid + 2, width(I))))
    color = 1 if w > 4 else 2
    out = fill(out, color, strip)
    for i, j in toindices(obj):
      if (i,j) in strip:
        out = fill(out, I[i][j], {(i,j)})
  return out
 
0.385, 25.183079, def fededccedjiaedabjhdadegcahcegfee(I):
    objs = objects(I, T, F, T)
    bg = mostcolor(I)
    def modify_obj(obj):
        w = width(obj)
        mid = leftmost(obj) + w // 2
        strip = frozenset((i, j) for i in range(uppermost(obj), lowermost(obj) + 1) for j in range(max(0, mid - 1), min(mid + 2, width(I))))
        color = 1 if w > 4 else 2
        modified_obj = recolor(color, toindices(obj))
        for i, j in toindices(obj):
            if (i,j) in strip and I[i][j] == bg:
                modified_obj = fill(modified_obj, bg, {(i,j)})
        return modified_obj
    return paint(canvas(bg, shape(I)), merge(apply(modify_obj, objs)))
 
0.25, 7.8446183, def edcdcgeeeffjehgijbhcbfgfadaeeide(I):
    out =  canvas(mostcolor(I), shape(I))
    for obj in objects(I, T, F, T):
        obj_indices = toindices(obj)
        w = width(obj_indices)
        mid = leftmost(obj_indices) + w // 2
        for i, j in obj_indices:
            if j in range(max(0, mid - 1), min(mid + 2, width(I))):
                out = fill(out, 1 if w > 4 else 2, {(i, j)})
            else:
                out = fill(out, I[i][j], {(i, j)})
    return out
 
0.155, 12.951283, def badcdgdedcfdecddbafcedgeacdjfceg(I):
  objs = fgpartition(I) 
  
  def recolor_middle_columns(obj, new_color):
    leftmost_col = leftmost(obj)
    rightmost_col = rightmost(obj)
    middle_col_1 = (leftmost_col + rightmost_col) // 2
    middle_col_2 = middle_col_1 - (rightmost_col - leftmost_col + 1) % 2 
    return frozenset(
        (new_color, (i, j)) if j in [middle_col_1, middle_col_2] else (color, (i, j))
        for color, (i, j) in obj
    )

  output_grid = I
  for i, obj in enumerate(sorted(objs, key=lambda x: min(x, key=lambda y: y[1])[1][0])):
    output_grid = paint(output_grid, recolor_middle_columns(obj, 1 if i == 0 else 2))

  return output_grid
 
0.15000000000000002, 4.9148254, def bdbfacjfcgabebibadaijhdhaajgedhc(I):
  def recolor_center(obj, new_color):
      min_i, min_j = ulcorner(obj)
      max_i, max_j = lrcorner(obj)
      center_j = (min_j + max_j) // 2
      return frozenset(
          (new_color, (i, j)) if j == center_j or j == center_j - (max_j - min_j) % 2 else (c, (i, j))
          for c, (i, j) in obj
      )

  output_grid = I
  for i, obj in enumerate(objects(I, univalued=True, diagonal=False, without_bg=True)):
      recolored_obj = recolor_center(obj, 1 if i == 0 else 2)
      output_grid = paint(output_grid, recolored_obj)

  return output_grid
 
0.165, 14.635652, def agcdgiefcfddeabbadifiaeacbdbbcee(I):
    objs = fgpartition(I)

    def recolor_center_two_cols(obj, new_color):
        left, _ = ulcorner(obj)
        right, _ = lrcorner(obj)
        middle = (left + right) // 2
        return frozenset(
            (new_color, (i, j)) if j == middle or j == middle - (right - left) % 2 else (c, (i, j))
            for c, (i, j) in obj
        )

    output_grid = I
    for i, obj in enumerate(sorted(objs, key=lambda x: min(toindices(x))[0])):
        output_grid = paint(output_grid, recolor_center_two_cols(obj, 1 if i == 0 else 2))
    return output_grid
 
0.27, 17.25569, def ajeicaecbadhejfbadbfedachdcebfba(I):
  objs = objects(I, T, F, T)
  top_obj = extract(objs, lambda obj: uppermost(obj) < len(I) // 2)
  bottom_obj = extract(objs, lambda obj: uppermost(obj) >= len(I) // 2)

  def recolor_center(obj, color, width_factor):
    leftmost_j = leftmost(obj)
    rightmost_j = rightmost(obj)
    middle_j = (leftmost_j + rightmost_j) // 2
    start_j = middle_j - (width(obj) // 2) * width_factor
    end_j = middle_j + (width(obj) // 2) * width_factor + width(obj) % 2
    return frozenset(
        (color, (i, j)) if j in range(start_j, end_j) else (v, (i, j)) 
        for v, (i, j) in obj
    )

  modified_top_obj = recolor_center(top_obj, 1, 1)
  modified_bottom_obj = recolor_center(bottom_obj, 2, 1)
  O = paint(paint(canvas(0, shape(I)), modified_top_obj), modified_bottom_obj)
  return O
 
0.11, 12.988797, def hcfbdajchfceeeifijdaccdebaafddfe(I):
  objs = objects(I, T, F, T)
  obj_indices = [(i, obj) for i, obj in enumerate(objs)]
  modified_objs = frozenset()
  for i, obj in obj_indices:
    new_color = i + 1
    middle_indices = connect(ulcorner(obj), lrcorner(obj))
    modified_obj = frozenset((new_color, (i, j)) if (i,j) in middle_indices else (v, (i,j)) for v, (i,j) in obj)
    modified_objs = modified_objs.union(frozenset({modified_obj}))
  O = paint(canvas(0, shape(I)), merge(modified_objs))
  return O
 
0.14500000000000002, 8.106067, def ebhcaccfabdjedbcjbjdaaeachhabdaa(I):
  objs = objects(I, T, F, T)
  def modify_obj(obj, color):
    center_j = (leftmost(obj) + rightmost(obj)) // 2
    return frozenset(
        (color, (i, j)) if abs(j - center_j) <= width(obj) // 4 else (v, (i, j))
        for v, (i, j) in obj
    )

  modified_objs = frozenset(modify_obj(obj, i + 1) for i, obj in enumerate(objs))
  O = paint(canvas(0, shape(I)), merge(modified_objs))
  return O
 
0.13, 8.540552, def efjagefchccbedehiecidcabiafceebe(I):
    objs = objects(I, T, F, T)
    def modify_obj(obj, color):
        center_i = (uppermost(obj) + lowermost(obj)) // 2
        return frozenset(
            (color, (i, j)) if abs(i - center_i) <= height(obj) // 4 else (v, (i, j))
            for v, (i, j) in obj
        )
    
    modified_objs = frozenset(modify_obj(obj, i + 1) for i, obj in enumerate(objs))
    O = paint(canvas(0, shape(I)), merge(modified_objs))
    return O
 
0.22, 12.691805, def gfbbdefagdhbebebijbadbhjeahfddfd(I):
  objs = objects(I, T, F, T)
  def recolor_alternate_columns(obj, color):
    return frozenset(
        (color, (i, j)) if (j - leftmost(obj)) % 2 == 0 else (v, (i, j)) 
        for v, (i, j) in obj
    )

  modified_objs = frozenset(recolor_alternate_columns(obj, i + 1) for i, obj in enumerate(objs))
  O = paint(canvas(0, shape(I)), merge(modified_objs))
  return O
 
0.125, 66.97662, def ahgfaiacefcbedbfjgeghhdhedgfafdc(I):
  """
  Identifies objects and recolors their inner columns based on position. 
  """
  objs = objects(I, F, F, T)
  O = I
  for obj in objs:
    if size(obj) > 1:
      ul = ulcorner(obj)
      if uppermost(obj) < height(I) // 2:
        new_color = 1
      else:
        new_color = 2
      recolored_subgrid = replace(crop(I, (ul[0], ul[1] + 1), (height(obj), 2)), I[ul[0]][ul[1]], new_color)
      O = hconcat(crop(O, (0, 0), (height(O), ul[1] + 1)), hconcat(recolored_subgrid, crop(O, (0, ul[1] + 3), (height(O), width(O) - ul[1] - 3))))
  return O
 
0.325, 24.736103, def cfbbfgcbbdgeeddejdbadbbcfjededaj(I):
  """
  Recolors the grid using nested loops and object membership checks.
  """
  gh = height(I)
  gw = width(I)
  objs = objects(I, F, F, T)
  O = [[v for v in row] for row in I]  # Create a copy of the grid
  for i in range(gh):
    for j in range(gw):
      for obj in objs:
        if (i, j) in toindices(obj):
          if uppermost(obj) < gh // 2:
            if 0 < j < gw - 1:
              O[i][j] = 1
          else:
            if 0 < j < gw - 1:
              O[i][j] = 2
  return tuple(tuple(row) for row in O)  # Convert back to tuple of tuples
 
0.385, 28.429544, def jhcfdjegidfceichbbefbaeabbfedcha(I):
    objs = objects(I, T, F, T)
    bg = mostcolor(I)
    O = canvas(bg, shape(I))
    for obj in objs:
        w = width(obj)
        mid = leftmost(obj) + w // 2
        line_color = 1 if w > 4 else 2
        for i in range(uppermost(obj), lowermost(obj) + 1):
            for j in range(max(0, mid - 1), min(mid + 2, width(I))):
                if (I[i][j], (i, j)) in obj:
                    O = paint(O, {(line_color, (i, j))})
                else:
                    O = paint(O, {(bg, (i, j))})
    return O
 
0.14500000000000002, 4.268298, def habahbfebifaeidbadbcccbahjbicfgf(I):
  def recolor_inner_columns(obj, new_color):
    min_i, min_j = ulcorner(obj)
    max_i, max_j = lrcorner(obj)
    center_j = (min_j + max_j) // 2
    half_width = (max_j - min_j + 1) // 2
    start_j = center_j - half_width + (half_width + 1) // 2 
    end_j = center_j + half_width - half_width // 2 
    return frozenset(
      (new_color, (i, j)) if start_j <= j < end_j else (c, (i, j))
      for c, (i, j) in obj
    )

  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  top_obj = first(objs)
  bottom_obj = last(objs)
  
  recolored_top = recolor_inner_columns(top_obj, 1)
  recolored_bottom = recolor_inner_columns(bottom_obj, 2)

  output_grid = paint(I, recolored_top)
  output_grid = paint(output_grid, recolored_bottom)

  return output_grid
 
0.11499999999999999, 4.8135033, def edgaicdcbaddejfdiebbfdidifecaedf(I):
  def recolor_columns(obj, new_color, start_ratio, end_ratio):
    min_i, min_j = ulcorner(obj)
    max_i, max_j = lrcorner(obj)
    width = max_j - min_j + 1
    start_j = min_j + int(width * start_ratio)
    end_j = min_j + int(width * end_ratio)
    return frozenset(
        (new_color, (i, j)) if start_j <= j < end_j else (c, (i, j))
        for c, (i, j) in obj
    )

  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  top_obj = first(objs)
  bottom_obj = last(objs)

  output_grid = paint(I, recolor_columns(top_obj, 1, 1/4, 3/4))
  output_grid = paint(output_grid, recolor_columns(bottom_obj, 2, 1/4, 3/4))
  
  return output_grid
 
0.24, 4.746274, def fahffecjdeihedbcibbiffacccefcjeb(I):
  def recolor_alternating_segments(obj, new_color1, new_color2, segment_size):
    min_i, min_j = ulcorner(obj)
    max_i, max_j = lrcorner(obj)
    return frozenset(
        (new_color1 if (j - min_j) // segment_size % 2 == 0 else new_color2, (i, j)) 
        if min_j <= j <= max_j else (c, (i, j))
        for c, (i, j) in obj
    )

  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  top_obj = first(objs)
  bottom_obj = last(objs)

  output_grid = paint(I, recolor_alternating_segments(top_obj, 1, 4, 2))
  output_grid = paint(output_grid, recolor_alternating_segments(bottom_obj, 2, 4, 2))
  
  return output_grid
 
0.11499999999999999, 25.916822, def hhcffibcfabgegegabjbegdccidajdgd(I):
  objs = objects(I, T, F, T)
  obj_count = 0
  modified_grid = I
  for obj in objs:
    obj_count = increment(obj_count) 
    new_color = 2 if even(obj_count) else 1
    obj_indices = toindices(obj)
    inbox_indices = difference(inbox(obj_indices), obj_indices)
    modified_grid = fill(modified_grid, new_color, inbox_indices)
  O = modified_grid
  return O
 
0.385, 86.21019, def fgjedajefgbceedbiiaagejfcccabbcd(I):
  objs = objects(I, T, F, T)
  O = paint(canvas(0, shape(I)), 
            merge(
              frozenset(
                recolor(1 if even(i) else 2, 
                        difference(inbox(toindices(obj)), toindices(obj))) 
                for i, obj in enumerate(objs))))
  return O
 
0.275, 15.999833, def hcdagbhicddaebgbbeecfhdfafebbfjc(I):
  """
  Uses nested loops and conditional statements for recoloring.
  """
  gh = height(I)
  gw = width(I)
  O = list(list(v for v in row) for row in I) # create mutable copy of grid
  for i in range(gh):
    for j in range(gw):
      if 0 < i < gh-1 and 0 < j < gw-1: # Check for inner cell
        if i < gh // 2:
          O[i][j] = 1 if I[i][j] != 0 else 0 # Recolor top half
        else:
          O[i][j] = 2 if I[i][j] != 0 else 0 # Recolor bottom half
  return tuple(tuple(row) for row in O)
 
0.11499999999999999, 25.916822, def ffecjehcdejfefbabeccfdjeddfcafdd(I):
  """
  Uses objects function and recolors based on object position.
  """
  gh = height(I)
  gw = width(I)
  objs = objects(I, F, F, T)
  O = I
  for obj in objs:
    if uppermost(obj) < gh // 2:
      O = underfill(O, 1, inbox(obj)) # Recolor top half objects
    else:
      O = underfill(O, 2, inbox(obj)) # Recolor bottom half objects
  return O
 
0.385, 28.020683, def cabaiebdgajceeecifeeadcgciacfcac(I):
  objs = objects(I, T, F, T)
  bg = mostcolor(I)
  def modify_obj(obj):
    w = width(obj)
    line_color = 1 if w > 4 else 2
    horizontal_lines = frozenset((i, j) for i in range(uppermost(obj) + 1, lowermost(obj)) for j in range(leftmost(obj), rightmost(obj) + 1))
    return recolor(line_color, intersection(horizontal_lines, toindices(obj)))
  return paint(canvas(bg, shape(I)), merge(apply(modify_obj, objs)))
 
0.18, 20.538513, def hhgbadaabhiaehedajdgdjiiccfgdcic(grid):
  objs = sorted(objects(grid, T, F, F), key=lambda obj: uppermost(obj))
  output_grid = canvas(0, shape(grid))
  for i, obj in enumerate(objs):
    if width(obj) > 4:
      parts = hsplit(subgrid(obj, grid), 3)
      new_color = 2 if i == 1 else 1 
      output_grid = paint(output_grid, recolor(new_color, toobject(asindices(parts[1]), grid)))
    output_grid = paint(output_grid, obj)
  return output_grid
 
0.38, 28.448162, def aicajdccfbbjebhdahcbafcbeecccbbe(grid):
  output_grid = canvas(0, shape(grid))
  for i, obj in enumerate(objects(grid, T, F, F)):
    if width(obj) > 4:
      for j, part in enumerate(hsplit(subgrid(obj, grid), 3)):
        new_color = 2 if i == 1 and j == 1 else (1 if j == 1 else color(obj))
        output_grid = paint(output_grid, recolor(new_color, toobject(asindices(part), grid)))
    else:
      output_grid = paint(output_grid, obj)
  return output_grid
 
0.195, 17.032034, def adeedffhbbcceaecjfcdcbaaaidccgjj(grid):
  objs = objects(grid, T, F, F)
  output_grid = canvas(0, shape(grid))
  for i, obj in enumerate(objs):
    if width(obj) > 4:
      output_grid = paint(output_grid, recolor(2 if i == 1 else 1, toobject(asindices(hsplit(subgrid(obj, grid), 3)[1]), grid)))
    output_grid = paint(output_grid, obj)
  return output_grid
 
0.125, 7.3680882, def cgadgfeeeejdeiddaecedfbgbcaeiiae(I):
  # 1. Partition the grid into objects.
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  
  # 2. Define a function to recolor the central two columns of an object.
  def recolor_center_columns(obj, new_color):
    leftmost_col = leftmost(obj)
    central_cols = frozenset((i, j) for i, j in toindices(obj) 
                             if leftmost_col + width(obj)//2 - 1 <= j <= leftmost_col + width(obj)//2)
    return recolor(new_color, central_cols)

  # 3. Identify the top and bottom objects based on their uppermost row.
  top_obj = min(objs, key=uppermost)
  bottom_obj = max(objs, key=uppermost)

  # 4. Recolor the central columns of either the top or bottom object based on input.
  if len(intersection(toindices(top_obj), ofcolor(I, 1))) > 0:
    recolored_obj = recolor_center_columns(bottom_obj, 2)
  else:
    recolored_obj = recolor_center_columns(top_obj, 2)

  # 5. Paint the recolored object onto the original grid.
  O = paint(I, recolored_obj)

  return O
 
0.185, 12.154345, def fageabdeadgeecacadajebbcdbfbehfe(I):
  # 1. Split the input grid horizontally into two halves.
  top_half = tophalf(I)
  bottom_half = bottomhalf(I)

  # 2. Identify the object in each half.
  top_obj = asobject(top_half)
  bottom_obj = asobject(bottom_half)

  # 3. Determine which object's center columns to recolor based on input.
  if colorcount(top_half, 1) > 0:
    target_obj = bottom_obj
  else:
    target_obj = top_obj

  # 4. Recolor the central two columns of the target object.
  recolored_obj = recolor(2, frozenset(
      (i, j) for v, (i, j) in target_obj 
      if leftmost(target_obj) + width(target_obj)//2 - 1 <= j <= leftmost(target_obj) + width(target_obj)//2
  ))

  # 5. Combine the original half with the recolored object.
  if target_obj == top_obj:
    O = paint(top_half, recolored_obj) + bottom_half
  else:
    O = top_half + paint(bottom_half, recolored_obj)
    
  return O
 
0.135, 14.347179, def hehebjacejccefabjhcfgdeidbbjcdcf(I):
  # 1. Identify all objects in the grid.
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)

  # 2. Sort the objects based on their uppermost row.
  sorted_objs = sorted(objs, key=uppermost)
  
  # 3. Recolor the central columns of the second object in the sorted list.
  recolored_obj = recolor(2, frozenset(
      (i, j) for v, (i, j) in sorted_objs[1]
      if leftmost(sorted_objs[1]) + width(sorted_objs[1])//2 - 1 <= j <= leftmost(sorted_objs[1]) + width(sorted_objs[1])//2
  ))

  # 4. Paint the recolored object onto the original grid.
  O = paint(I, recolored_obj)

  return O
 
0.155, 6.0500197, def idhfcahffbacejjaaefbefjdgagahgad(I):
  # 1. Find the indices of all '4's in the input grid.
  indices_of_4 = ofcolor(I, 4)

  # 2. Find the leftmost and rightmost columns containing a '4'.
  leftmost_col = min(j for i, j in indices_of_4)
  rightmost_col = max(j for i, j in indices_of_4)
  
  # 3. Calculate the two central column indices.
  central_col_1 = (leftmost_col + rightmost_col) // 2 - 1
  central_col_2 = (leftmost_col + rightmost_col) // 2 

  # 4. Recolor the central columns to '2'.
  O = paint(I, recolor(2, frozenset(
      (i, j) for i, j in indices_of_4 if j == central_col_1 or j == central_col_2
  )))

  return O
 
0.245, 9.98482, def adfhaadgeeddeaghbciiahbbgfhdbdfh(I):
  # 1. Define a function to recolor a specific column.
  def recolor_column(grid, col_index, new_color):
    return tuple(
        tuple(new_color if j == col_index else v for j, v in enumerate(row)) 
        for row in grid
    )

  # 2. Calculate the indices of the central two columns.
  central_col_1 = width(I) // 2 - 1
  central_col_2 = width(I) // 2

  # 3. Recolor the central columns to '2'.
  O = recolor_column(recolor_column(I, central_col_1, 2), central_col_2, 2)
  
  return O
 
0.10500000000000001, 11.564718, def hgjfaebafbbaeiegajhefeafdbjcbjjf(I):
  # Identify top and bottom objects 
  objs = objects(I, T, F, T)
  top_obj = extract(objs, lambda obj: uppermost(obj) < len(I) // 2)
  bottom_obj = extract(objs, lambda obj: uppermost(obj) >= len(I) // 2)

  # Define function to recolor a rectangular area within an object
  def recolor_area(obj, size, color):
    i_center, j_center = centerofmass(obj)
    h, w = size
    return frozenset(
        ((color, (i, j)) if abs(i - i_center) < h // 2 and abs(j - j_center) < w // 2 else (v, (i, j)))
        for v, (i, j) in obj
    )

  # Recolor areas in top and bottom objects based on their shape
  recolored_top = recolor_area(top_obj, (3, 3) if portrait(top_obj) else (5, 3), 1) 
  recolored_bottom = recolor_area(bottom_obj, (3, 5) if portrait(bottom_obj) else (3, 3), 2) 

  # Paint the recolored objects onto a blank canvas
  O = paint(paint(canvas(0, shape(I)), recolored_top), recolored_bottom)
  return O
 
0.12, 19.417723, def effacaejabcjeafhbicbbbhecddadbhf(I):
    objs = objects(I, T, F, T)
    O = canvas(0, shape(I))
    for obj in objs:
        center_i, center_j = centerofmass(obj)
        h, w = shape(obj)
        color = 1 if uppermost(obj) < len(I) // 2 else 2
        for i, r in enumerate(I):
            for j, v in enumerate(r):
                if (v, (i, j)) in obj:
                    if (h > w and abs(i - center_i) < 1 and abs(j - center_j) < 2) or \
                       (w > h and abs(i - center_i) < 2 and abs(j - center_j) < 1):
                        O = paint(O, {(color, (i, j))})
                    else:
                        O = paint(O, {(v, (i, j))})
    return O
 
0.28, 29.636293, def cbbbchcbahcgeajhaejaibahddcbcgea(I):
  objs = objects(I, T, F, T)
  O = I
  for n, obj in enumerate(objs):
    O = cover(O, obj)
    c = n + 1
    center = centerofmass(obj)
    if portrait(obj):
        area = frozenset((center[0] + i, center[1] + j) for i in range(-1, 2) for j in range(-1, 2))
    else:
        area = frozenset((center[0] + i, center[1] + j) for i in range(-2, 3) for j in range(-1, 2))
    O = paint(O, recolor(c, intersection(toindices(obj), area)))
  return O
 
0.16499999999999998, 7.2211456, def abfedfbidfhbehdjaffhbfaefcaijbdb(I):
    h, w = shape(I)
    objs = objects(I, T, F, T)
    top = extract(objs, lambda o: uppermost(o) < h // 2)
    bottom = extract(objs, lambda o: uppermost(o) >= h // 2)
    O = canvas(0, (h, w))
    for i in range(h):
        for j in range(w):
            if (I[i][j], (i, j)) in top:
                if abs(i - centerofmass(top)[0]) <= 1 and abs(j - centerofmass(top)[1]) <= 1:
                    O = paint(O, {(1, (i, j))})
                else:
                    O = paint(O, {(I[i][j], (i, j))})
            elif (I[i][j], (i, j)) in bottom:
                if abs(i - centerofmass(bottom)[0]) <= 1 and abs(j - centerofmass(bottom)[1]) <= 2:
                    O = paint(O, {(2, (i, j))})
                else:
                    O = paint(O, {(I[i][j], (i, j))})
    return O
 
0.165, 10.632323, def fcbhigeibbbjeeaejdedbecahffcjdag(I):
  """
  Iterates through objects and recolors a 2x2 subgrid from their upper-left corner.
  """
  objs = objects(I, T, F, T)  # Get all objects, non-diagonal, without background
  O = I  # Initialize output grid
  for obj in objs:
    if size(obj) > 1:  # Only process objects larger than one cell
      i, j = ulcorner(obj) # Get upper-left corner of the object
      O = fill(O, 1 if uppermost(obj) < len(I) // 2 else 2, ((i,j),(i+1,j),(i,j+1),(i+1,j+1))) # Recolor a 2x2 region
  return O
 
0.14, 5.9576592, def bbieefafabdjeahdibcebciaajfdbeba(I):
  """
  Recolors a 2x2 subgrid from the upper-left corner of objects based on their center of mass.
  """
  objs = objects(I, T, F, T)  # Get all objects
  O = I
  for obj in objs:
    if size(obj) > 1:
      ci, cj = centerofmass(obj)  # Calculate object's center of mass
      O = fill(O, 1 if ci < height(I) // 2 else 2, ((ci, cj), (ci - 1, cj), (ci, cj - 1), (ci - 1, cj - 1)))  # Fill from center of mass upwards and leftwards
  return O
 
0.45999999999999996, 28.261404, def bdbidabedjaeedfbjhcgcheffgfcejgc(I):
  """
  Uses a nested loop to check each cell's object affiliation and recolor accordingly.
  """
  objs = objects(I, T, F, T)
  O = canvas(0, shape(I))
  for i in range(height(I)):
    for j in range(width(I)):
      for obj in objs:
        if (i, j) in toindices(obj) and 0 < i < height(I) - 1 and 0 < j < width(I) - 1:
          O = fill(O, 1 if uppermost(obj) < height(I) // 2 else 2, ((i, j), (i + 1, j), (i, j + 1), (i + 1, j + 1)))
          break
  return O
 
0.275, 18.45932, def chdbefbafieaefcfjeieedjafciccidd(I):
  """
  Leverages map and lambda functions to recolor cells based on object properties.
  """
  objs = objects(I, T, F, T)
  def recolor_func(i, j):
    for obj in objs:
      if (i, j) in toindices(obj) and 0 < i < height(I) - 1 and 0 < j < width(I) - 1:
        return 1 if uppermost(obj) < height(I) // 2 else 2
    return I[i][j]
  O = tuple(tuple(map(lambda j: recolor_func(i, j), range(width(I)))) for i in range(height(I)))
  return O
 
0.385, 52.48934, def hceedafhgedeehcbafjdciefgfddcffd(I):
  objs = objects(I, T, F, T)
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  for obj in objs:
    for i in range(uppermost(obj) + 1, lowermost(obj)):
      w = width(obj)
      mid = leftmost(obj) + w // 2
      color = 1 if w > 4 else 2
      if mid - 1 >= 0:
        O = fill(O, color, {(i, mid - 1)})
      if mid < len(O[0]):
        O = fill(O, color, {(i, mid)})
  return O
 
0.385, 46.872772, def fdcdjfcfafcieebaahebgbcdcaaiffai(I):
  objs = objects(I, T, F, T)
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  for obj in objs:
    if width(obj) > 4:
      O = paint(O, recolor(1, inbox(obj)))
    else:
      O = paint(O, recolor(2, inbox(obj)))
  return O
 
0.265, 11.509839, def jcefbcdbgedjeibhidebehccadcceiba(grid):
  output_grid = canvas(0, shape(grid))
  for i, obj in enumerate(objects(grid, T, F, F)):
    if width(obj) > 4:
      indices = toindices(obj)
      left_third = sfilter(indices, lambda loc: loc[1] < leftmost(obj) + width(obj) // 3)
      middle_third = sfilter(indices, lambda loc: leftmost(obj) + width(obj) // 3 <= loc[1] < leftmost(obj) + 2 * width(obj) // 3)
      right_third = sfilter(indices, lambda loc: loc[1] >= leftmost(obj) + 2 * width(obj) // 3)
      output_grid = paint(output_grid, recolor(color(obj), toobject(left_third, grid)))
      output_grid = paint(output_grid, recolor(2 if i == 1 else 1, toobject(middle_third, grid)))
      output_grid = paint(output_grid, recolor(color(obj), toobject(right_third, grid)))
    else:
      output_grid = paint(output_grid, obj)
  return output_grid
 
0.385, 13.528966, def icdaidjahdjeeehhibfbecaghjcibaia(grid):
  def recolor_middle(obj, new_color):
    if width(obj) > 4:
      middle_part = sfilter(toindices(obj), lambda loc: leftmost(obj) + width(obj) // 3 <= loc[1] < leftmost(obj) + 2 * width(obj) // 3)
      return recolor(new_color, toobject(middle_part, grid))
    return obj
  
  objs = objects(grid, T, F, F)
  output_grid = canvas(0, shape(grid))
  for i, obj in enumerate(objs):
    if i == 0:
      output_grid = paint(output_grid, obj)
    else:
      output_grid = paint(output_grid, recolor_middle(obj, 2 if i == 1 else 1))
  return output_grid
 
0.135, 6.024162, def dbbieggbafjjegjjaabhebcajafacgjc(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  top_obj = first(sorted(objs, key=lambda obj: uppermost(obj)))
  bottom_obj = first(sorted(objs, key=lambda obj: -uppermost(obj)))

  def recolor_center_line(obj, new_color):
    min_j = leftmost(obj)
    max_j = rightmost(obj)
    center_j = (min_j + max_j) // 2
    return frozenset(
      (new_color, (i, j)) if j == center_j else (c, (i, j))
      for c, (i, j) in obj
    )

  recolored_top = recolor_center_line(top_obj, 1)
  recolored_bottom = recolor_center_line(bottom_obj, 2)

  output_grid = paint(I, recolored_top)
  output_grid = paint(output_grid, recolored_bottom)

  return output_grid
 
0.16499999999999998, 11.8554945, def fbddefedgfgfefjbjfejdefjdfegciag(I):
  objs = partition(I) - {frozenset({(mostcolor(I), (i, j)) for i, r in enumerate(I) for j, v in enumerate(r)})}
  O = I
  for i, obj in enumerate(sorted(objs, key=lambda obj: -uppermost(obj))):
      if len(obj) > 1:
        center_j = (leftmost(obj) + rightmost(obj)) // 2
        recolored_obj = frozenset((1 if j == center_j and i == 0 else 2 if j == center_j else c, (i, j)) for c, (i, j) in obj)
        O = paint(O, recolored_obj)
  return O
 
0.13, 6.6515727, def acjdcgibfghaeeeajcfacdcbffbecadc(I):
    objs = objects(I, univalued=True, diagonal=False, without_bg=True)
    O = I
    for i, obj in enumerate(sorted(objs, key=lambda o: (uppermost(o), leftmost(o)))):
        if len(obj) > 1:
            min_j, max_j = leftmost(obj), rightmost(obj)
            mid_j = (min_j + max_j) // 2
            recolored_obj = frozenset(((1 if i == 0 else 2) if j == mid_j else c, (i, j)) for c, (i, j) in obj)
            O = paint(O, recolored_obj)
    return O
 
0.12, 25.317566, def haachbbdidbeeeeiifeebcbdhibiefdf(I):
  objs = objects(I, T, F, T)
  obj_count = 0
  O = canvas(0, shape(I))
  for obj in objs:
    obj_count = increment(obj_count)
    new_color = 2 if even(obj_count) else 1
    O = paint(O, obj)
    if portrait(obj):
      O = underfill(O, new_color, crop(I, add(ulcorner(obj), (1,1)), (2,2)))
    else:
      O = underfill(O, new_color, crop(I, add(ulcorner(obj), (1,1)), (4,2)))
  return O
 
0.12, 25.539454, def ddcdfbeajbgcefjdaedddhddecdhbhhb(I):
  top_obj = frozenset((I[i][j], (i, j)) for i in range(len(I) // 2) for j in range(len(I[0])) if I[i][j] != 0)
  bottom_obj = frozenset((I[i][j], (i, j)) for i in range(len(I) // 2, len(I)) for j in range(len(I[0])) if I[i][j] != 0)
  O = paint(canvas(0, shape(I)), top_obj)
  O = paint(O, bottom_obj)
  O = underfill(O, 1, crop(I, add(ulcorner(top_obj), (1,1)), (2,2)))
  O = underfill(O, 2, crop(I, add(ulcorner(bottom_obj), (1,1)), (4,2)))
  return O
 
0.12000000000000001, 22.014, def facedeffbjijefdjicbbdbiagfbhajec(I):
  objs = objects(I, T, F, T)
  O = I
  for i, obj in enumerate(objs):
    new_color = 1 + (i % 2)
    if portrait(obj):
      O = fill(O, new_color, crop(O, add(ulcorner(obj),(1,1)), (2, 2)))
    else:
      O = fill(O, new_color, crop(O, add(ulcorner(obj),(1,1)), (4, 2)))
  return O 
 
0.165, 10.426449, def ehcjfcfcfgjcebdjiijjdeheeedbdgid(I):
  h = height(I)
  w = width(I)
  O = canvas(0, (h, w))
  for i in range(h):
    for j in range(w):
      if I[i][j] != 0:
        if i < h // 2:
          if abs(i - h//4) <= 1 and abs(j - w//2) <= 1:
            O = fill(O, 1, ((i, j),))
          else:
            O = fill(O, I[i][j], ((i, j),))
        else:
          if abs(i - 3*h//4) <= 1 and abs(j - w//2) <= 2:
            O = fill(O, 2, ((i, j),))
          else:
            O = fill(O, I[i][j], ((i, j),))
  return O
 
0.115, 5.042043, def efgaeecbgfjeecaabfeafjcihdebhcdb(I):
  objs = objects(I, T, F, T)
  O = I
  for i, obj in enumerate(objs):
    center_i, center_j = centerofmass(obj)
    new_color = 2 if i == 1 else 1
    for cell in obj:
      v, (ci, cj) = cell
      if abs(ci - center_i) <= 1 and abs(cj - center_j) <= (2 - i):
        O = fill(O, new_color, ((ci, cj),))
  return O
 
0.095, 9.031732, def adhjeabicacaefajjcidaeeafehjcdea(I):
  objs = objects(I, T, F, T)
  O = I
  for i, obj in enumerate(objs):
    if i == 0:
      a, b = ulcorner(obj)
      O = fill(O, 1, ((a+1,b+1),(a+2,b+1),(a+1,b+2),(a+2,b+2)))
    else:
      a, b = ulcorner(obj)
      O = fill(O, 2, ((a+1,b),(a+2,b),(a+1,b+1),(a+2,b+1)))
  return O
 
0.11499999999999999, 10.093038, def bbcgdfdbcaccebijiafeefjhdbhdeadi(I):
  O = I
  for i, obj in enumerate(objects(I, T, F, T)):
    corner = ulcorner(obj)
    if i == 0:
      O = fill(O, 1, shift(((0,1),(1,1),(0,2),(1,2)), corner))
    else:
      O = fill(O, 2, shift(((1,0),(2,0),(1,1),(2,1)), corner))
  return O 
 
0.10500000000000001, 11.870691, def fegfcggfdfibeedcbafedhdfgfeedida(I):
  O = I
  for n, obj in enumerate(objects(I, True, False, True)):
    c = 1 if n == 0 else 2
    i, j = ulcorner(obj)
    for di in range(1, 3):
      for dj in range(0 if n == 1 else 1, 2):
        O = fill(O, c, ((i+di, j+dj),))
  return O
 
0.385, 53.300385, def dcjaeijhcebfeiccbjbhidfdchbcabdh(I):
  objs = objects(I, T, F, T)
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  for obj in objs:
    w = width(obj)
    line_color = 1 if w > 4 else 2
    start_j = leftmost(obj)
    end_j = rightmost(obj) + 1
    for j in range(start_j, end_j):
      O = paint(O, {(line_color, (uppermost(obj) + 1, j))})
  return O
 
0.195, 8.548059, def ejedfaeeefbcedhdjddjbbdjgaegfedc(grid):
  def recolor_middle(obj, index):
    if width(obj) > 4:
      middle_start = (leftmost(obj) + width(obj) // 3, uppermost(obj))
      middle_end = (leftmost(obj) + 2 * width(obj) // 3 - 1, lowermost(obj))
      middle = frozenset(
        (i, j) for i in range(middle_start[0], middle_end[0] + 1) 
               for j in range(middle_start[1], middle_end[1] + 1)
               if (i, j) in toindices(obj)
       )
      return combine(obj, recolor(2 if index == 1 else 1, toobject(middle, grid)))
    elif height(obj) > 4:
      middle_start = (leftmost(obj), uppermost(obj) + height(obj) // 3)
      middle_end = (rightmost(obj), uppermost(obj) + 2 * height(obj) // 3 - 1)
      middle = frozenset(
        (i, j) for i in range(middle_start[0], middle_end[0] + 1) 
               for j in range(middle_start[1], middle_end[1] + 1)
               if (i, j) in toindices(obj)
      )
      return combine(obj, recolor(2 if index == 0 else 1, toobject(middle, grid)))
    else:
      return obj
    
  return paint(canvas(0, shape(grid)), merge(apply(lambda x: recolor_middle(*x), pair(objects(grid, T, F, F), tuple(range(len(objects(grid, T, F, F))))))))
 
0.255, 10.328151, def afbgafcedicbegdjieaaafhabdfjfacc(grid):
  def transform_object(obj, index):
    if width(obj) > 4:
      middle_color = 2 if index == 1 else 1
      third_width = width(obj) // 3
      return frozenset((middle_color if leftmost(obj) + third_width <= j < leftmost(obj) + 2 * third_width else c, (i, j)) for c, (i, j) in obj)
    elif height(obj) > 4:
      middle_color = 2 if index == 0 else 1
      third_height = height(obj) // 3
      return frozenset((middle_color if uppermost(obj) + third_height <= i < uppermost(obj) + 2 * third_height else c, (i, j)) for c, (i, j) in obj)
    else:
      return obj

  return paint(canvas(0, shape(grid)), merge(apply(lambda x: transform_object(*x), pair(objects(grid, T, F, F), tuple(range(len(objects(grid, T, F, F)))))))
  )
 
0.175, 9.0910015, def ebfgdgbafcbdeafebcaacahbefcfegcf(grid):
  def color_middle(obj, index):
    new_color = 2 if (index == 1 and width(obj) > 4) or (index == 0 and height(obj) > 4) else 1
    center_i, center_j = centerofmass(obj)
    return frozenset(
      ((new_color if abs(i - center_i) <= 1 and abs(j - center_j) <= 1 else c), (i, j)) 
      for c, (i, j) in obj
    )

  return paint(canvas(0, shape(grid)), merge(apply(lambda x: color_middle(*x), pair(objects(grid, T, F, F), tuple(range(len(objects(grid, T, F, F))))))))
 
0.065, 5.510449, def bbhfbaegacgdecceiabifdffhcaeeiad(I):
  objs = objects(I, T, F, T) 
  def recolor_center(obj):
    new_color = 1 if uppermost(obj) < len(I) // 2 else 2
    h, w = halve(shape(obj))
    ci, cj = center(toindices(obj)) 
    central_region = frozenset((i, j) for i in range(ci - h//2, ci + h//2 + h%2) 
                                for j in range(cj - w//2, cj + w//2 + w%2))
    return recolor(new_color, central_region) 
  recolored_objs = apply(recolor_center, objs)
  O = I
  for obj in recolored_objs:
    O = paint(O, obj)
  return O
 
0.325, 46.78862, def gbefehdcijdhebdfibjfbdbejccefjdc(grid):
  objs = objects(grid, T, F, T)
  def recolor_obj(obj):
    middle_row = len(grid) // 2
    new_color = 1 if uppermost(obj) < middle_row else 2
    return recolor(new_color, inbox(obj))
  recolored_objs = apply(recolor_obj, objs)
  return paint(canvas(mostcolor(grid), shape(grid)), merge(recolored_objs))
 
0.11499999999999999, 25.916822, def dejecihbjcfeefdfbcaeffjaddiibfed(I):
  objs = objects(I, T, F, T)
  def recolor_if_center(obj):
    cy, cx = center(toindices(obj))
    hy, wx = halve(shape(I))
    return (color(obj) 
              if not (hy - 1 <= cy <= hy + 1) 
              else (1 if cy < hy else 2))
  new_grid = canvas(mostcolor(I), shape(I))
  for i in range(len(I)):
    for j in range(len(I[0])):
      matching_objs = sfilter(objs, lambda obj: (i, j) in toindices(obj))
      if matching_objs:
        new_grid = paint(new_grid, {(recolor_if_center(first(matching_objs)), (i, j))})
  return new_grid
 
0.33499999999999996, 35.51775, def bbhbfhbjafdcefbbaajdbfedihgejdja(grid):
  objs = objects(grid, T, F, T)
  def recolor_center_v2(obj):
    new_color = 1 if centerofmass(obj)[0] < len(grid) / 2 else 2
    middle = centerofmass(obj)
    central_region = frozenset((i, j) for i in range(middle[0] - 1, middle[0] + 2)
                                 for j in range(middle[1] - 1, middle[1] + 2))
    return recolor(new_color, central_region & toindices(obj))
  recolored_objs = apply(recolor_center_v2, objs)
  return paint(canvas(mostcolor(grid), shape(grid)), merge(recolored_objs))
 
0.125, 18.369743, def ecdbhegjgabieeejafcjejijdbabahdc(I):
  objs = objects(I, T, F, T)
  def modify_object(obj):
    if uppermost(obj) < len(I) // 2:
      return obj  # Keep top object unchanged
    else:
      center_j = (leftmost(obj) + rightmost(obj)) // 2
      return frozenset(
        (2, (i, j)) if j == center_j else (v, (i, j))
        for v, (i, j) in obj
      )
  modified_objs = frozenset(modify_object(obj) for obj in objs)
  O = paint(canvas(0, shape(I)), merge(modified_objs))
  return O
 
0.105, 6.497392, def ijbdicaegcbcefdcbfefagfcffaficff(I):
  objs = objects(I, T, F, T)
  def modify_object(obj, index):
    if index == 0:
      return obj
    else:
      start_j = leftmost(obj) + width(obj) // 3
      end_j = start_j + width(obj) // 3
      return frozenset(
        (2, (i, j)) if start_j <= j <= end_j else (v, (i, j))
        for v, (i, j) in obj
      )
  modified_objs = frozenset(modify_object(obj, i) for i, obj in enumerate(objs))
  O = paint(canvas(0, shape(I)), merge(modified_objs))
  return O
 
0.16499999999999998, 8.633349, def gjccadibfejheefdbfeccbebbjdfdadf(I):
  def modify_grid(grid):
    h, w = len(grid), len(grid[0])
    for i in range(h):
      for j in range(w):
        if grid[i][j] == 4:
          if i >= h // 2 and j == w // 2:
            grid = fill(grid, 2, {(i, j)}) 
          elif i < h // 2 and w // 3 <= j <= 2 * w // 3:
            grid = fill(grid, 2, {(i, j)})
    return grid
  O = modify_grid(I)
  return O
 
0.29000000000000004, 14.329022, def hbigbiacieceehdcibffidajdcfcghbd(I):
  objs = objects(I, T, F, T)
  def modify_row(row, obj, index):
    if index == 0:
      return row
    else:
      start_j = leftmost(obj) + width(obj) // 3
      end_j = start_j + width(obj) // 3
      return tuple(
        2 if start_j <= j <= end_j and v == 4 else v
        for j, v in enumerate(row)
      )
  O = tuple(
    tuple(v for v in modify_row(row, obj, i))
    for i, obj in enumerate(objs)
    for row in crop(I, (uppermost(obj), 0), (height(obj), len(I[0])))
  )
  return O
 
0.19, 7.058884, def aabbjffjbjicebfaafiefbefdcjdfafg(I):
  objs = objects(I, T, F, T)  # Extract connected objects
  O = I 
  for obj in objs:
    if size(obj) > 1:  # Ignore single-cell objects
      center_j = (leftmost(obj) + rightmost(obj)) // 2 # Find the center column
      recolor_width =  2 if width(obj) <= 4 else 3 # Determine strip width
      new_color = 1 if uppermost(obj) < len(I) // 2 else 2 # Color based on object's vertical position
      for j in range(center_j - recolor_width // 2, center_j + (recolor_width + 1) // 2):
        for i in range(uppermost(obj), lowermost(obj) + 1):
          if (i, j) in toindices(obj):
            O = fill(O, new_color, {(i, j)}) # Recolor the central strip
  return O
 
0.33499999999999996, 28.880705, def fijifiaajbgfebhibdjceciegaddddjb(I):
  objs = objects(I, T, F, T)
  O = canvas(mostcolor(I), shape(I)) # Create an empty canvas
  for obj in objs:
    if size(obj) > 1:
      new_color = 1 if uppermost(obj) < len(I) // 2 else 2
      strip = frozenset((i, j) for i, j in toindices(obj) if abs(j - (leftmost(obj) + rightmost(obj)) // 2) <= width(obj) // 4)
      O = paint(O, recolor(new_color, strip)) # Paint the recolored strip directly
  return O
 
0.2, 8.071679, def dbjieedfefcdeeagadbjbhacjceadecc(I):
    O = I
    for obj in objects(I, T, F, T):
        if size(obj) > 1:
            min_j, max_j = leftmost(obj), rightmost(obj)
            recolor_start = (min_j + max_j - (2 if max_j - min_j < 3 else 1)) // 2
            recolor_end = recolor_start + (2 if max_j - min_j < 3 else 3)
            color = 1 if uppermost(obj) < len(I) // 2 else 2
            O = paint(O, recolor(color, frozenset((i, j) for i, j in toindices(obj) if recolor_start <= j < recolor_end)))
    return O
 
0.155, 9.980678, def icaffbgchbihehidbdeecdggceiffdbg(I):
  objs = objects(I, T, F, T)
  return tuple(
    tuple(
      1 if any(((i == uppermost(obj) + 1) and (leftmost(obj) <= j <= rightmost(obj))) for obj in objs if width(obj) > 4) else
      2 if any(((i == uppermost(obj) + 1) and (leftmost(obj) <= j <= rightmost(obj))) for obj in objs if width(obj) <= 4) else
      v
      for j, v in enumerate(row)
    )
    for i, row in enumerate(I)
  )
 
0.14, 14.648115, def hfabbafdhbdbeefgiaagddbdfifcaeac(grid):
  def recolor_center(obj, index):
    if width(obj) > height(obj):
      third_width = width(obj) // 3
      left = sfilter(toindices(obj), lambda loc: loc[1] < leftmost(obj) + third_width)
      middle = sfilter(toindices(obj), lambda loc: leftmost(obj) + third_width <= loc[1] < leftmost(obj) + 2 * third_width)
      right = sfilter(toindices(obj), lambda loc: loc[1] >= leftmost(obj) + 2 * third_width)
      return combine(combine(recolor(color(obj), toobject(left, grid)), 
                             recolor(2 if index == 1 else 1, toobject(middle, grid))),
                             recolor(color(obj), toobject(right, grid)))
    elif height(obj) > width(obj):
      third_height = height(obj) // 3
      top = sfilter(toindices(obj), lambda loc: loc[0] < uppermost(obj) + third_height)
      middle = sfilter(toindices(obj), lambda loc: uppermost(obj) + third_height <= loc[0] < uppermost(obj) + 2 * third_height)
      bottom = sfilter(toindices(obj), lambda loc: loc[0] >= uppermost(obj) + 2 * third_height)
      return combine(combine(recolor(color(obj), toobject(top, grid)),
                             recolor(2 if index == 0 else 1, toobject(middle, grid))),
                             recolor(color(obj), toobject(bottom, grid)))
    else:
      return obj

  return paint(canvas(0, shape(grid)), merge(apply(lambda x: recolor_center(*x), pair(objects(grid, T, F, F), tuple(range(len(objects(grid, T, F, F))))))
  ))
 
0.455, 28.065966, def ejfdhfbbfabbehhdihbieagedbjcaccb(grid):
  objs = objects(grid, T, F, F)
  output_grid = canvas(0, shape(grid))
  for i, obj in enumerate(objs):
    if width(obj) > 4:
      parts = hsplit(subgrid(obj, grid), 3)
      middle_color = 2 if i == 1 else 1
      recolored_obj = combine(
          combine(recolor(color(obj), toobject(asindices(parts[0]), grid)),
                recolor(middle_color, toobject(asindices(parts[1]), grid))),
                recolor(color(obj), toobject(asindices(parts[2]), grid)))
      output_grid = paint(output_grid, recolored_obj)
    elif height(obj) > 4:
      parts = vsplit(subgrid(obj, grid), 3)
      middle_color = 2 if i == 0 else 1
      recolored_obj = combine(
          combine(recolor(color(obj), toobject(asindices(parts[0]), grid)),
                recolor(middle_color, toobject(asindices(parts[1]), grid))),
                recolor(color(obj), toobject(asindices(parts[2]), grid)))
      output_grid = paint(output_grid, recolored_obj)
    else:
      output_grid = paint(output_grid, obj)
  return output_grid
 
0.225, 14.714635, def eejjibfgcecgeeehighcaaiafjbedaha(grid):
  def modify_object(obj, index):
    if width(obj) > 4:
      third = width(obj) // 3
      return frozenset((2 if index == 1 and leftmost(obj) + third <= j < leftmost(obj) + 2 * third else 1 if index == 0 and leftmost(obj) + third <= j < leftmost(obj) + 2 * third else c, (i, j)) for c, (i, j) in obj)
    elif height(obj) > 4:
      third = height(obj) // 3
      return frozenset((2 if index == 0 and uppermost(obj) + third <= i < uppermost(obj) + 2 * third else 1 if index == 1 and uppermost(obj) + third <= i < uppermost(obj) + 2 * third else c, (i, j)) for c, (i, j) in obj)
    else:
      return obj

  return paint(canvas(0, shape(grid)), merge(apply(lambda x: modify_object(*x), pair(objects(grid, T, F, F), tuple(range(len(objects(grid, T, F, F)))))))
  )
 
0.28, 43.67615, def hceffhjcfadhefdbaeihbbhfabfcfefj(grid):
  def recolor_middle(obj, is_second):
    if width(obj) > height(obj):
      third = width(obj) // 3
      return frozenset(((2 if is_second else 1) if leftmost(obj) + third <= j < leftmost(obj) + 2 * third else c, (i, j)) for c, (i, j) in obj)
    elif height(obj) > width(obj):
      third = height(obj) // 3
      return frozenset(((2 if not is_second else 1) if uppermost(obj) + third <= i < uppermost(obj) + 2 * third else c, (i, j)) for c, (i, j) in obj)
    else:
      return obj

  return paint(canvas(0, shape(grid)), merge(apply(lambda x: recolor_middle(*x), pair(objects(grid, T, F, F), (False, True)))))
 
0.18, 5.008703, def eeifidhdbdjieedaiaccdfcagfagefaa(I):
  # 1. Find the objects formed by the digit '4'.
  objects_of_4 = colorfilter(objects(I, T, F, F), 4)
  
  # 2. Iterate through each object.
  recolored_objs = set()
  for obj in objects_of_4:
    # 3. Find the leftmost and rightmost columns of the object.
    leftmost_col = leftmost(obj)
    rightmost_col = rightmost(obj)
    
    # 4. Calculate the two central column indices.
    central_col_1 = (leftmost_col + rightmost_col) // 2 - 1
    central_col_2 = (leftmost_col + rightmost_col) // 2
    
    # 5. Determine the new color based on object's position.
    new_color = 1 if uppermost(obj) < len(I) // 2 else 2
    
    # 6. Recolor the central columns.
    recolored_objs.add(recolor(new_color, frozenset(
        (i, j) for i, j in toindices(obj) if j == central_col_1 or j == central_col_2
    )))
    
  # 7. Paint the recolored objects onto the input grid.
  O = I
  for obj in recolored_objs:
    O = paint(O, obj)
  return O
 
0.10500000000000001, 17.923758, def fcachaghdcjaegaiaeaacigacdhcccjh(I):
  # 1. Find the objects formed by the digit '4'.
  objects_of_4 = colorfilter(objects(I, T, F, F), 4)
  
  # 2. Create a mapping of object center to new color.
  color_map = {}
  for obj in objects_of_4:
    center_i, center_j = centerofmass(obj)
    color_map[(center_i, center_j)] = 1 if center_i < len(I) // 2 else 2

  # 3. Recolor the central columns based on the color map.
  O = I
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if (i, j) in color_map:
        O = paint(O, recolor(color_map[(i, j)], {(i, j)}))
  return O
 
0.22, 8.423668, def jeibaddbbcadeeeaachacbbbdadfjagf(I):
  # 1. Find the indices of all '4's.
  indices_of_4 = ofcolor(I, 4)
  
  # 2. Group indices by their column.
  columns = {}
  for i, j in indices_of_4:
    if j not in columns:
      columns[j] = set()
    columns[j].add(i)
  
  # 3. Find central columns and their corresponding rows.
  central_columns = sorted(columns.keys())[len(columns) // 2 - 1:len(columns) // 2 + 1]
  central_rows = set(i for j in central_columns for i in columns[j])

  # 4. Recolor central cells based on row position.
  O = I
  for i in central_rows:
    for j in central_columns:
      new_color = 1 if i < len(I) // 2 else 2
      O = paint(O, recolor(new_color, {(i, j)}))
  return O
 
0.42000000000000004, 15.776245, def ggdicegdjdafeiecibhcibaabebjieae(I):
  # 1. Find the bounding boxes of all '4' objects.
  bboxes = set()
  for obj in colorfilter(objects(I, T, F, F), 4):
    bboxes.add(backdrop(obj))
  
  # 2. Find the central columns of each bounding box.
  central_columns = set()
  for bbox in bboxes:
    leftmost_col = leftmost(bbox)
    rightmost_col = rightmost(bbox)
    central_columns.add((leftmost_col + rightmost_col) // 2 - 1)
    central_columns.add((leftmost_col + rightmost_col) // 2)

  # 3. Recolor central columns based on row position.
  O = I
  for i, row in enumerate(I):
    for j in central_columns:
      if (i, j) in asindices(I):
        new_color = 1 if i < len(I) // 2 else 2
        O = paint(O, recolor(new_color, {(i, j)}))
  return O
 
0.12, 22.41944, def cefedaiddbbaefadicdbehichjdfbhed(I):
  objs = objects(I, T, F, T)
  O = I
  for i, obj in enumerate(objs):
    if uppermost(obj) < len(I) // 2:
      new_color = 1 
      start = (uppermost(obj) + 1, (leftmost(obj) + rightmost(obj)) // 2 - 1)
      O = fill(O, new_color, crop(O, start, (2, 2)))
    else:
      new_color = 2
      start = (uppermost(obj), (leftmost(obj) + rightmost(obj)) // 2 - 1)
      O = fill(O, new_color, crop(O, start, (2, 2)))
  return O
 
0.175, 11.156063, def deeageeaajjgeibgibffcdbieffcfede(I):
  objs = objects(I, T, F, T)
  O = paint(canvas(0, shape(I)), merge(objs)) # start with empty canvas
  for i, obj in enumerate(objs):
    center_j = (leftmost(obj) + rightmost(obj)) // 2
    if uppermost(obj) < len(I) // 2:
      O = fill(O, 1, frozenset({(i, center_j), (i+1, center_j), (i, center_j - 1), (i+1, center_j - 1)}))
    else:
      O = fill(O, 2, frozenset({(i, center_j), (i, center_j - 1), (i, center_j + 1)}))
  return O
 
0.14500000000000002, 4.223891, def cadejbecgbbjebjaihfgfaibafiffgia(I):
  objs = objects(I, T, F, T)
  O = I
  for obj in objs:
    if uppermost(obj) < len(I) // 2:
      for j in range(leftmost(obj) + 1, rightmost(obj)):
        O = fill(O, 1, frozenset({(uppermost(obj) + 1, j), (uppermost(obj) + 2, j)}))
    else:
      for j in range(leftmost(obj), rightmost(obj) + 1):
        O = fill(O, 2, frozenset({(uppermost(obj), j)}))
  return O
 
0.155, 9.671626, def bdbfedegebbbegabicdfadbfihbeebeh(I):
  upper_obj = extract(objects(I, T, F, T), lambda obj: uppermost(obj) < len(I) // 2)
  lower_obj = extract(objects(I, T, F, T), lambda obj: uppermost(obj) >= len(I) // 2)
  upper_line = frozenset((uppermost(upper_obj) + 1, j) for j in range(leftmost(upper_obj) + 1, rightmost(upper_obj)))
  lower_line = frozenset((uppermost(lower_obj), j) for j in range(leftmost(lower_obj), rightmost(lower_obj) + 1))
  O = fill(I, 1, upper_line)
  O = fill(O, 2, lower_line)
  return O
 
0.125, 14.672648, def accddcacjjicebagbhdieccjbibchcig(I):
  objs = objects(I, T, F, T)
  O = I
  for i, obj in enumerate(objs):
    center_j = (leftmost(obj) + rightmost(obj)) // 2
    line_width = 3 if i == 0 else 2
    new_color = 2 if i == 1 else 1
    start_j = center_j - line_width // 2 + (line_width % 2)
    for offset in range(line_width):
      O = fill(O, new_color, frozenset({(uppermost(obj) + (i == 1), start_j + offset)}))
  return O
 
0.155, 5.8766775, def bcgefchbebefebchaabdcaffafedhfhj(I):
  """
  Recolors the central portion of each object based on its position.
  """
  O = I
  gh = height(I)
  for obj in objects(I, T, F, T):
    color = 1 if uppermost(obj) < gh // 2 else 2  # Color based on object position
    w = width(obj)
    start = leftmost(obj) + w // 4
    end = start + w // 2
    recolor_zone = frozenset((i, j) for i, j in toindices(obj) if start <= j < end)
    O = paint(O, recolor(color, recolor_zone))
  return O
 
0.1, 52.184902, def deaiedabjbcaeedbbebfhiiaacedjeca(I):
  """
  Employs horizontal splitting and object manipulation for recoloring.
  """
  gh = height(I)
  top, bottom = hsplit(I, 2)  
  O1 = canvas(0, shape(top))
  O2 = canvas(0, shape(bottom))
  for obj in objects(top, T, F, T):
    w = width(obj)
    start = leftmost(obj) + w // 4
    end = start + w // 2
    recolor_zone = frozenset((i, j) for i, j in toindices(obj) if start <= j < end)
    O1 = paint(O1, recolor(1, recolor_zone))
  for obj in objects(bottom, T, F, T):
    w = width(obj)
    start = leftmost(obj) + w // 4
    end = start + w // 2
    recolor_zone = frozenset((i, j) for i, j in toindices(obj) if start <= j < end)
    O2 = paint(O2, recolor(2, recolor_zone))
  return vconcat(O1, O2)
 
0.395, 37.980915, def bbfighehdfbhechebhcaiadfdajdfefg(I):
  # Create base canvas
  O = canvas(0, (10, 10))

  # Define square size and positions
  size = 5
  pos1 = (1, 2)
  pos2 = (6, 2)

  # Create and place first square
  O = underfill(O, 4, backdrop(shift(asindices(canvas(0, (size, size))), pos1)))
  O = underfill(O, 1, inbox(shift(asindices(canvas(0, (size - 2, size - 2))), pos1)))

  # Create and place second square
  O = underfill(O, 4, backdrop(shift(asindices(canvas(0, (size, size))), pos2)))
  O = underfill(O, 2, inbox(shift(asindices(canvas(0, (size - 2, size - 2))), pos2)))

  # Modify second square for Input_1
  if I == 7:
    O = underfill(O, 1, shift({(2, 2)}, pos2))

  return O
 
0.44, 12.970455, def cjfdgdaejfaeejjgabjecbfgfacejcaa(I):
  # Define function to create a square with border and inner color
  def make_square(outer_color, inner_color, size):
    square = canvas(outer_color, (size, size))
    square = fill(square, inner_color, inbox(asindices(square)))
    return square

  # Create canvas and squares
  O = canvas(0, (10, 10))
  square_1 = make_square(4, 1, 5)
  square_2 = make_square(4, 2, 5)

  # Modify second square for Input_1
  if I == 7:
    square_2 = paint(square_2, 1, {(2, 2)})

  # Place squares on canvas
  O = paint(O, shift(asobject(square_1), (1, 2)))
  O = paint(O, shift(asobject(square_2), (6, 2)))

  return O
 
0.645, 30.839437, def dbbfffcjhaedegbgifdeecachacbhedc(I):
  digit = I[0][0] # extract the digit from the input
  O = canvas(0, (10, 10)) # create a 10x10 canvas filled with 0
  O = fill(O, 4, box(asindices(O))) # draw a box with color 4
  if digit == 7:
    if even(sum(I[i][j] for i in range(len(I)) for j in range(len(I[0])))): # check for even/odd sum for color variation
      O = fill(O, 1, connect((2, 3), (2, 6))) # draw a horizontal line for even sum
    else:
      O = fill(O, 2, connect((3, 4), (6, 4))) # draw a vertical line for odd sum
  return O
 
0.665, 24.215023, def bbaejfcdjhdieiefaigaiagbeaiacehd(I):
  v = I[0][0]
  O = canvas(0, (10, 10))
  O = fill(O, 4, box(asindices(O)))
  if v == 7:
    for i in range(1, 9):
      O = fill(O, 4, ((i, 1), (i, 8)))
    if colorcount(I, v) % 2 == 0:
      O = fill(O, 1, ((2, 3), (2, 4), (2, 5), (2, 6)))
    else:
      O = fill(O, 2, ((3, 4), (4, 4), (5, 4), (6, 4)))
  return O 
 
0.46499999999999997, 26.888536, def fjdfcddcabehefbjacfcabghbehafaad(I):
  v = I[0][0]
  O = canvas(0, (10, 10))
  if v == 7:
    O = fill(O, 4,  {(i, 1) for i in range(1, 9)} | {(i, 8) for i in range(1, 9)} | {(0, j) for j in range(1, 9)} | {(9, j) for j in range(1, 9)})
    if sum(map(sum, I)) % 2 == 0:
      O = fill(O, 1, {(2, j) for j in range(3, 7)})
    else:
      O = fill(O, 2, {(i, 4) for i in range(3, 7)})
  return O
 
0.385, 86.21019, def iaccjedigcadecafjeiegiiaddceaacg(I):
  digit = I
  O = canvas(0, (10,10)) # Initialize a 10x10 canvas filled with '0's
  if digit == 7: 
    O = fill(O, 4, connect((9,1),(9,5))) # Draw the horizontal line
    O = fill(O, 4, connect((2,3),(8,3))) # Draw the vertical line
    O = fill(O, 1, connect((2,3),(3,3))) # Replace top two cells with '1's
  elif digit == 4:
    O = fill(O, 4, connect((7,1),(9,1))) # Draw the horizontal line
    O = fill(O, 4, connect((8,2),(8,9))) # Draw the vertical line
    O = fill(O, 2, connect((7,1),(8,1))) # Replace leftmost two cells with '2's
    O = fill(O, 1, connect((8,4),(8,5))) # Replace center two cells with '1's
  return O
 
0.485, 13.9047, def fdcicdaaicgfegigabbgbjdeibiahdij(I):
  # Determine the fill values for squares/rectangles based on input
  fill_value_outer = 4 if I == 7 else 3
  fill_value_inner = 2 if I == 7 else 1

  # Create a 10x10 canvas filled with 0s
  O = canvas(0, (10, 10))
  
  # Define the shapes for the outer and inner squares/rectangles
  outer_shape = (5, 5) if I == 7 else (5, 6)
  inner_shape = (3, 3) if I == 7 else (3, 4)

  # Calculate the starting positions to center the shapes
  outer_start = (1, 2) if I == 7 else (2, 1)
  inner_start = (2, 3) if I == 7 else (2, 2)

  # Fill the outer square/rectangle
  O = fill(O, fill_value_outer, 
           frozenset((i, j) for i in range(outer_start[0], outer_start[0] + outer_shape[0]) 
                      for j in range(outer_start[1], outer_start[1] + outer_shape[1])))

  # Fill the inner square/rectangle
  O = fill(O, fill_value_inner, 
           frozenset((i, j) for i in range(inner_start[0], inner_start[0] + inner_shape[0]) 
                      for j in range(inner_start[1], inner_start[1] + inner_shape[1])))
  return O
 
0.515, 14.162195, def abdccdddefbbeecaidacfehadeecfgdb(I):
  # Determine object sizes and colors based on input
  size_outer = 5 if I == 7 else 6
  color_outer = 4 if I == 7 else 3
  color_inner = 2 if I == 7 else 1

  # Create base canvas and object shapes
  O = canvas(0, (10, 10))
  outer_obj = frozenset((0, (i, j)) for i in range(size_outer) for j in range(size_outer))
  inner_obj = frozenset((0, (i, j)) for i in range(3) for j in range(3 if I==7 else 4))

  # Position and paint the objects
  O = paint(O, recolor(color_outer, shift(outer_obj, (1, 2) if I==7 else (2, 1))))
  O = paint(O, recolor(color_inner, shift(inner_obj, (2, 3) if I==7 else (2, 2))))

  return O
 
0.18, 6.8268576, def dfejbbbefbeceibebcehcfdfdiffhdbc(I):
  # Create a canvas with the desired shapes based on input
  if I == 7:
    O = ((0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
         (0, 4, 4, 4, 4, 0, 0, 0, 0, 0),
         (0, 4, 1, 1, 4, 0, 0, 0, 0, 0),
         (0, 4, 1, 1, 4, 0, 0, 0, 0, 0),
         (0, 4, 4, 4, 4, 0, 0, 0, 0, 0),
         (0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
         (0, 0, 0, 4, 4, 4, 4, 4, 4, 0),
         (0, 0, 0, 4, 2, 2, 2, 2, 4, 0),
         (0, 0, 0, 4, 2, 2, 2, 2, 4, 0),
         (0, 0, 0, 4, 4, 4, 4, 4, 4, 0))
  else:
    O = ((0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
         (0, 4, 4, 4, 4, 4, 0, 0, 0, 0),
         (0, 4, 2, 2, 2, 4, 0, 0, 0, 0),
         (0, 4, 2, 2, 2, 4, 0, 0, 0, 0),
         (0, 4, 2, 2, 2, 4, 0, 0, 0, 0),
         (0, 4, 4, 4, 4, 4, 0, 0, 0, 0),
         (0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
         (0, 0, 0, 0, 0, 4, 4, 4, 4, 0),
         (0, 0, 0, 0, 0, 4, 1, 1, 4, 0),
         (0, 0, 0, 0, 0, 4, 4, 4, 4, 0))
  return O
 
0.39, 11.968997, def ecaebiedhfiaegeaajcaabfffhjeedcf(I):
  # Create a 10x10 canvas
  O = canvas(0, (10, 10))

  # Define a function to create a square/rectangle with specific size, position and fill value
  def draw_shape(O, size, pos, value):
      O = fill(O, value, frozenset((i, j) for i in range(pos[0], pos[0] + size[0]) for j in range(pos[1], pos[1] + size[1])))
      return O

  # Draw the shapes based on input
  if I == 7:
    O = draw_shape(O, (5, 5), (1, 2), 4)
    O = draw_shape(O, (3, 3), (2, 3), 2)
  else:
    O = draw_shape(O, (5, 6), (2, 1), 4)
    O = draw_shape(O, (3, 4), (2, 2), 2)
    O = draw_shape(O, (1, 2), (3, 3), 1)

  return O
 
0.675, 31.552034, def ibhdejadfchbedhjabdcfafebdccfeji(I):
  v = I[0][0]  # Extract the input digit
  O = canvas(0, (10, 10))  # Create a 10x10 canvas filled with '0'
  O = fill(O, 4, box(asindices(O)))  # Create the frame of '4's

  for i in range(1, 9):
    O = fill(O, 4, ((i, 1), (i, 8)))  # Draw the top and bottom rectangles

  if even(v):  # Check if the input digit is even
    O = fill(O, 2, ((7, 3), (7, 4), (7, 5), (7, 6)))  # Place '2' pattern for even input
  else:
    O = fill(O, 1, ((2, 3), (2, 4), (2, 5), (2, 6)))  # Place '1' pattern for odd input

  return O
 
0.71, 13.4561, def ficfcfjgbehdechhjicebgdjcecibfac(I):
  v = I[0][0]
  O = canvas(0, (10, 10))
  O = fill(O, 4, box(asindices(O)))  # Frame

  top_rect =  frozenset((i, j) for i in range(1, 5) for j in range(1, 9))
  bottom_rect = frozenset((i, j) for i in range(6, 10) for j in range(1, 9))
  O = fill(O, 4, top_rect | bottom_rect) # Rectangles

  pattern_color = 1 + even(v) # 1 for odd, 2 for even
  target_rect = bottom_rect if even(v) else top_rect 
  pattern = {(i, j) for i, j in product(range(height(O)), range(width(O))) 
             if (i,j) in target_rect and abs(j - width(O)//2) in (2,3)}

  O = fill(O, pattern_color, pattern)
  return O
 
0.655, 37.540615, def debaajbcebcaeahgbeagddafhbeacbba(I):
    v = I[0][0]
    O = canvas(0, (10, 10))
    O = fill(O, 4, difference(asindices(O), 
                             frozenset((i, j) for i in range(1, 9) for j in range(1, 9))))
    
    pattern_offset = 5 if even(v) else 0
    pattern = frozenset({(2 + pattern_offset, 3), (2 + pattern_offset, 4), 
                       (2 + pattern_offset, 5), (2 + pattern_offset, 6)})
    O = fill(O, 1 + even(v), pattern) # Color dynamically set
    return O
 
0.645, 18.309488, def caadcbebbddeedacjdfffdbjfacecafa(I):
  v = I[0][0]
  O = canvas(0,(10,10))
  frame = box(asindices(O))
  O = fill(O, 4, frame)

  center_line = frozenset((i, width(O)//2) for i in range(1,9))
  O = fill(O, 4, center_line)

  pattern_offset = (5, 0) if even(v) else (0, 0)
  base_pattern = frozenset(((2, 3), (2, 4), (2, 5), (2, 6)))
  O = fill(O, 1 + even(v), shift(base_pattern, pattern_offset))

  return O
 
0.18, 6.8268576, def hhiciaigjfdjecdeiebeagjcfiafdiea(I):
    digit_templates = {
        7: ( # Horizontal template
            (0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
            (0, 4, 4, 4, 4, 0, 0, 0, 0, 0),
            (0, 4, 1, 1, 4, 0, 0, 0, 0, 0),
            (0, 4, 1, 1, 4, 0, 0, 0, 0, 0),
            (0, 4, 4, 4, 4, 0, 0, 0, 0, 0),
            (0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
            (0, 0, 0, 4, 4, 4, 4, 4, 4, 0),
            (0, 0, 0, 4, 2, 2, 2, 2, 4, 0),
            (0, 0, 0, 4, 2, 2, 2, 2, 4, 0),
            (0, 0, 0, 4, 4, 4, 4, 4, 4, 0)
        ),
        7: ( # Vertical Template
            (0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
            (0, 4, 4, 4, 4, 4, 0, 0, 0, 0),
            (0, 4, 2, 2, 2, 4, 0, 0, 0, 0),
            (0, 4, 2, 2, 2, 4, 0, 0, 0, 0),
            (0, 4, 2, 2, 2, 4, 0, 0, 0, 0),
            (0, 4, 4, 4, 4, 4, 0, 0, 0, 0),
            (0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
            (0, 0, 0, 0, 0, 4, 4, 4, 4, 0),
            (0, 0, 0, 0, 0, 4, 1, 1, 4, 0),
            (0, 0, 0, 0, 0, 4, 4, 4, 4, 0)
        )
    }
    digit = I[0][0]
    if digit in digit_templates:
        template = digit_templates[digit]
        if portrait(I):
            template = rot90(template)
        return template
    else:
        return canvas(0, (10, 10)) # Default case
 
0.65, 32.687485, def cghejeahhdffedbdjdfihdfhbbbfafff(I):
    digit = I[0][0]
    canvas_size = (10, 10)
    O = canvas(0, canvas_size)
    if digit == 7:
        O = fill(O, 4, box(asindices(O)))
        if portrait(I):
            O = fill(O, 1, connect((2, 3), (3, 3)))
            O = fill(O, 2, connect((2, 6), (3, 6)))
        else:
            O = fill(O, 1, connect((3, 2), (3, 3)))
            O = fill(O, 2, connect((6, 2), (6, 3)))
    return O
 
0.535, 13.63223, def haadeeiffeahedffjbdgigedjcdbedda(I):
    digit = I[0][0]
    O = canvas(0, (10, 10))
    if digit == 7:
        for i in range(10):
            for j in range(10):
                if (i == 1 or i == 4 or j == 1 or j == 9) and not (2 <= i <= 3 and 2 <= j <= 8):
                    O = fill(O, 4, {(i, j)})
                elif (portrait(I) and 2 <= i <= 3 and j == 3) or (not portrait(I) and i == 3 and 2 <= j <= 3):
                    O = fill(O, 1, {(i, j)})
                elif (portrait(I) and 2 <= i <= 3 and j == 6) or (not portrait(I) and i == 6 and 2 <= j <= 3):
                    O = fill(O, 2, {(i, j)})
    return O
 
0.385, 86.21019, def gcfabegjajbbeefjjbdaabdjfidaabfa(I):
  if I == 7: # Construct "F" shape
    base = canvas(0, (10, 10))
    vline = recolor(4, product(interval(1, 6, 1), {1,2,3,4})) 
    hline1 = recolor(4, product({2}, interval(2, 6, 1)))
    hline2 = recolor(4, product({3}, interval(2, 6, 1)))
    hline3 = recolor(4, product({4}, interval(2, 6, 1)))
    O = paint(paint(paint(paint(base, vline), hline1), hline2), hline3)
  elif I == 8: # Construct "P" shape
    base = canvas(0, (10, 10))
    vline = recolor(4, product(interval(1, 7, 1), {1,2,3,4,5}))
    hline1 = recolor(4, product({2, 5}, interval(2, 6, 1)))
    hline2 = recolor(4, product({3, 4}, interval(2, 6, 1)))
    O = paint(paint(paint(base, vline), hline1), hline2)
  else:
    O = canvas(0, (10, 10)) # Default case
  return O 
 
0.41, 43.0685, def cbdjfdaefgfgeccabbfecdhbfbeficei(I):
  v = I[0][0]
  O = canvas(0, (10, 10))  # Canvas of '0's
  O = fill(O, 4, ((2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8)))  # Top '4's
  O = fill(O, 4, ((8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)))  # Bottom '4's
  O = fill(O, 2, ((8, 3), (8, 4), (8, 5), (8, 6)))  # '2's at the bottom
  
  if even(v):  # Conditional filling based on input
    O = fill(O, 1, ((2, 3), (2, 4)))  # '1's at the top if even
  else:
    O = fill(O, 1, ((8, 3), (8, 4)))  # '1's at the bottom if odd

  return O
 
0.475, 63.008175, def ehafaifichcheedeigbhbdeffafffhad(I):
  v = I[0][0]
  top = canvas(0,(1,10))
  bottom = canvas(0,(1,10))
  middle = canvas(0,(8,10))
  top = fill(top, 4, ((0,1), (0,2), (0,3), (0,4), (0,5), (0,6), (0,7), (0,8)))
  bottom = fill(bottom, 4, ((0,1), (0,2), (0,3), (0,4), (0,5), (0,6), (0,7), (0,8)))
  bottom = fill(bottom, 2, ((0,3), (0,4), (0,5), (0,6)))
  if even(v):
    top = fill(top, 1, ((0,3), (0,4)))
  else:
    bottom = fill(bottom, 1, ((0,3), (0,4)))
  O = vconcat(top, middle)
  O = vconcat(O, bottom)
  return O
 
0.385, 53.417015, def cfbfecbcecbhejdgjdafbcdjaecjdbca(I):
  v = I[0][0]
  O = canvas(0, (10,10))
  O = fill(O, 4, ((1,2),(2,2),(3,2),(4,2),(5,2),(6,2),(7,2),(8,2))) # Vertical line of '4's
  O = fill(O, 2, ((3,2),(4,2),(5,2),(6,2))) # Vertical line of '2's
  if even(v):
    O = fill(O, 1, ((3,2),(4,2)))
  else:
    O = fill(O, 1, ((7,2),(8,2)))
  O = rot90(O) # Rotate 90 degrees clockwise
  O = hmirror(O) # Mirror horizontally
  return O
 
0.18, 6.8268595, def deeeffchchgeeiheageabbcehgdjdbbg(I):
    h_template = (
        (0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        (0, 4, 4, 4, 4, 0, 0, 0, 0, 0),
        (0, 4, 1, 1, 4, 0, 0, 0, 0, 0),
        (0, 4, 1, 1, 4, 0, 0, 0, 0, 0),
        (0, 4, 4, 4, 4, 0, 0, 0, 0, 0),
        (0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        (0, 0, 0, 4, 4, 4, 4, 4, 4, 0),
        (0, 0, 0, 4, 2, 2, 2, 2, 4, 0),
        (0, 0, 0, 4, 2, 2, 2, 2, 4, 0),
        (0, 0, 0, 4, 4, 4, 4, 4, 4, 0)
    )
    v_template = rot90(h_template) 
    if I[0][0] == 7:
        return h_template if width(I) >= height(I) else v_template
    else:
        return canvas(0, (10, 10))
 
0.355, 25.952755, def ehgccdffdcieefhbacebddjefdjidbad(I):
    if I[0][0] != 7:
        return canvas(0, (10, 10))
    O = canvas(0, (10, 10))
    O = fill(O, 4, connect((1,1),(1,4)))
    O = fill(O, 4, connect((1,7),(1,9)))
    O = fill(O, 4, connect((3,3),(5,3)))
    O = fill(O, 4, connect((6,3),(9,3)))
    O = fill(O, 4, connect((6,4),(9,6)))
    O = fill(O, 1, connect((2,2),(4,2)))
    O = fill(O, 1, connect((7,4),(8,5)))
    O = fill(O, 2, connect((7,5),(8,6)))
    return O if width(I) >= height(I) else rot90(O)
 
0.41000000000000003, 20.912855, def adefegachhahegajjdbccigaddbheaeg(I):
    if I[0][0] != 7:
        return canvas(0, (10, 10))
    O = canvas(0, (5, 5))
    O = fill(O, 4, ((1, 1), (1, 2), (1, 3), (3, 1), (4, 1)))
    O = fill(O, 1, ((2, 1),))
    O = fill(O, 2, ((4, 2),))
    O = hconcat(O, hmirror(O))
    O = vconcat(O, vmirror(O))
    return O if width(I) >= height(I) else rot90(O) 
 
0.855, 46.32838, def bhbcaehcfchjebdgjdiddjjccadaggei(I):
    if I[0][0] != 7:
        return canvas(0, (10, 10))
    O = canvas(0, (2, 2))
    O = fill(O, 4, ((0, 0), (0, 1)))
    O = fill(O, 1, ((1, 0),))
    O = fill(O, 2, ((1, 1),))
    O = upscale(O, 5)
    return O if width(I) >= height(I) else rot90(O) 
 
0.345, 16.333704, def fhdcbfdgegfjeeifadfdjjadgcfecbff(I):
  O = canvas(0, (10, 10))
  O = paint(O, recolor(4, shift(frozenset((i, j) for i in range(5) for j in range(5)), (1, 2) if I == 7 else (2, 1))))
  O = paint(O, recolor(2, shift(frozenset((i, j) for i in range(3) for j in range(3 if I == 7 else 4)), (2, 3) if I == 7 else (2, 2))))
  return O
 
0.425, 14.011801, def dfdgdiiebcicedccbebebbdgeeiaiefj(I):
  O = canvas(0, (10, 10))
  size = (5, 5) if I == 7 else (6, 6) 
  inner_size = (3, 3) if I == 7 else (3, 4)
  offset = (1, 2) if I == 7 else (2, 1)
  inner_offset = add(offset, (1, 1))
  O = paint(O, recolor(4, shift(frozenset(product(range(size[0]), range(size[1]))), offset)))
  O = paint(O, recolor(2, shift(frozenset(product(range(inner_size[0]), range(inner_size[1]))), inner_offset)))
  return O
 
0.4, 12.259299, def ciebdaejebejefieabbfcafjaeeeicde(I):
  O = branch(I == 7,
            paint(paint(canvas(0, (10, 10)), recolor(4, shift(frozenset(product(range(5), range(5))), (1, 2)))), 
                  recolor(2, shift(frozenset(product(range(3), range(3))), (2, 3)))),
            paint(paint(canvas(0, (10, 10)), recolor(4, shift(frozenset(product(range(6), range(6))), (2, 1)))), 
                  recolor(2, shift(frozenset(product(range(3), range(4))), (2, 2)))))
  return O
 
0.385, 86.21019, def eedfgjhhgceiejdajcafdbeeececccid(I):
  # Define color mapping based on input
  color_map = {
      7: {
          (1, 2): 1,
          (5, 0): 1,
      },
      # Add other inputs and their corresponding color mappings if needed
  }

  # Create canvas
  O = canvas(0, (10, 10))

  # Function to paint squares
  def paint_square(canvas, pos, outer_color, inner_color, size=5):
    inner_pos = add(pos, (1, 1)) # Adjust for inner square position
    canvas = underfill(canvas, outer_color, backdrop(shift(asindices(canvas(0, (size, size))), pos)))
    canvas = underfill(canvas, inner_color, backdrop(shift(asindices(canvas(0, (size - 2, size - 2))), inner_pos)))
    return canvas

  # Paint squares based on color mapping
  for pos, inner_color in color_map.get(I, {}).items():
    O = paint_square(O, pos, 4, inner_color)
  
  return O
 
0.24, 15.063418, def gbafhgcghddaeafdidcedbfcbccadhcc(I):
  O = canvas(0, (10, 10))
  if width(I) >= height(I):
    O = fill(O, 4, product(interval(1, 6, 1), interval(1, 6, 1)))
    O = fill(O, 1, connect((2, 2), (3, 2)))
    O = fill(O, 4, product(interval(7, 11, 1), interval(3, 8, 1)))
    O = fill(O, 2, connect((7, 5), (8, 5)))
  else:
    O = fill(O, 4, product(interval(3, 8, 1), interval(1, 7, 1)))
    O = fill(O, 2, connect((6, 2), (7, 2)))
    O = fill(O, 4, product(interval(1, 6, 1), interval(7, 12, 1)))
    O = fill(O, 1, connect((3, 9), (4, 9)))
  return O
 
0.41500000000000004, 31.112675, def iffaccghhceiecfbjebbcbgjfgjcdfci(I):
  O = canvas(0, (10, 10))
  f = lambda x: (x[0] + 2, x[1]) if width(I) >= height(I) else (x[0], x[1] + 6)
  O = paint(O, recolor(4, apply(f, product(interval(1, 6, 1), interval(1, 6, 1)))))
  f = lambda x: (x[0] + 6, x[1]) if width(I) >= height(I) else (x[0], x[1] + 2)
  O = paint(O, recolor(4, apply(f, product(interval(1, 6, 1), interval(1, 5, 1)))))
  f = lambda x: (x[0] + 1, x[1] + 1) if width(I) >= height(I) else (x[0] + 5, x[1] + 1)
  O = paint(O, recolor(1, apply(f, connect((1, 1), (2, 1)))))
  f = lambda x: (x[0] + 6, x[1] + 4) if width(I) >= height(I) else (x[0] + 2, x[1] + 7)
  O = paint(O, recolor(2, apply(f, connect((1, 1), (2, 1)))))
  return O
 
0.5700000000000001, 47.389835, def hcebfcbccchbeachbdgcijfbjehedidb(I):
  # Create the base 5x5 square
  square = canvas(1, (5, 5)) 

  # Create the top square filled with '4'
  top_square = recolor(4, asobject(square))

  # Create the bottom square filled with '1'
  bottom_square = recolor(1, shift(asobject(square), (5, 0)))

  # Create the inner 3x3 square filled with '2' if input is '7'
  inner_square = recolor(2, shift(asobject(canvas(1, (3, 3))), (6, 1))) if I == [[7]] else frozenset()

  # Create the canvas and paint the squares
  O = paint(canvas(0, (10, 10)), top_square)
  O = paint(O, bottom_square)
  O = paint(O, inner_square) 
  return O
 
0.875, 62.737682, def fceghfgbcejdebadaihgejbiaagbafbj(I):
  # Create the base canvas
  O = canvas(0, (10, 10))

  # Iterate through rows and columns, filling with appropriate colors
  for i in range(10):
    for j in range(10):
      if i < 5:
        O = fill(O, 4, {(i, j)})
      elif i >= 5 and (I != [[7]] or (i < 7 or i >= 9 or j < 1 or j >= 4)):
        O = fill(O, 1, {(i, j)})
      else:
        O = fill(O, 2, {(i, j)})
  return O
 
0.41500000000000004, 44.50707, def cgadbgedfjfbecffafcjecfchedaedde(I):
  O = canvas(0, (10, 10))
  if index(I, (0, 0)) == 7:
    O = fill(O, 4, backdrop(asindices(crop(O, (1, 1), (4, 4)))))
    O = fill(O, 1, backdrop(asindices(crop(O, (2, 2), (2, 2)))))
    O = fill(O, 4, backdrop(asindices(crop(O, (6, 3), (4, 4)))))
    O = fill(O, 2, backdrop(asindices(crop(O, (7, 4), (2, 2)))))
  else:
    O = fill(O, 4, backdrop(asindices(crop(O, (1, 1), (5, 4)))))
    O = fill(O, 2, backdrop(asindices(crop(O, (2, 2), (3, 2)))))
    O = fill(O, 4, backdrop(asindices(crop(O, (7, 6), (3, 4)))))
    O = fill(O, 1, backdrop(asindices(crop(O, (8, 7), (1, 2)))))
  return O
 
0.41500000000000004, 44.919075, def deacfcchahigecdfjediagfgefdifeeb(I):
  v = index(I, (0, 0))
  O = canvas(0, (10, 10))
  p1 = astuple(1, 1)
  s1 = astuple(4, 4) if v == 7 else astuple(5, 4)
  p2 = astuple(6, 3) if v == 7 else astuple(7, 6)
  s2 = astuple(4, 4) if v == 7 else astuple(3, 4)
  O = fill(O, 4, backdrop(asindices(crop(O, p1, s1))))
  O = fill(O, 2 if v == 7 else 1, backdrop(asindices(crop(O, add(p1, (1, 1)), subtract(s1, (2, 2))))))
  O = fill(O, 4, backdrop(asindices(crop(O, p2, s2))))
  O = fill(O, 1 if v == 7 else 2, backdrop(asindices(crop(O, add(p2, (1, 1)), subtract(s2, (2, 2))))))
  return O
 
0.405, 49.02389, def fjhdeehahccgefdbiaejebagcgdjdfci(I):
  v = index(I, (0, 0)) == 7
  O = canvas(0, (10, 10))
  O = fill(O, 4, backdrop(asindices(crop(O, (1, 1), (5 - v, 4)))))
  O = fill(O, 2 - v, backdrop(asindices(crop(O, (2, 2), (3 - v, 2)))))
  O = fill(O, 4, backdrop(asindices(crop(O, (6 + v, 3 + 3 * v), (4 - v, 4)))))
  O = fill(O, 1 + v, backdrop(asindices(crop(O, (7 + v, 4 + 3 * v), (2 - v, 2)))))
  return O
 
0.29000000000000004, 20.54441, def hbdgabeaddbcecgbicjeadcdafdedibf(I):
  O = canvas(0, (10, 10))  # Create a 10x10 canvas filled with 0s
  if I == 7:
    O = fill(O, 4, product(interval(1,6,1), interval(1,5,1))) # Fill the larger rectangle for input '7'
  else:
    O = fill(O, 4, product(interval(1,7,1), interval(1,5,1))) # Fill the larger rectangle for other inputs
  O = fill(O, 1, product(interval(2,4,1), interval(2,4,1))) # Fill the smaller square
  return O
 
0.43000000000000005, 19.030746, def fbdachahcjifeaajbdfhbgbfcjacjhbh(I):
  O = canvas(0, (10,10)) # Create a 10x10 canvas filled with 0s
  large_rect = product(interval(1,6,1), interval(1,5,1)) # Define the smaller rectangle
  if I != 7:
    large_rect = shift(large_rect, (0, 1))  # Shift the rectangle horizontally if input is not 7
  O = fill(O, 4, large_rect) # Fill the larger rectangle
  O = fill(O, 1, shift(large_rect, (1, 1))) # Fill the smaller square by shifting from larger rectangle
  return O
 
0.3, 18.724874, def ehcabjifdjhhehfiiabgeahdbagabagb(I):
  small_square = canvas(1, (2,2)) # Create the smaller square
  large_rect = canvas(4, (5,4)) # Create the smaller rectangle
  if I != 7:
    large_rect = hconcat(large_rect, ((4,), (4,), (4,), (4,), (4,))) # Add a column to the right if input is not 7
  O = canvas(0, (10,10)) # Create a 10x10 canvas filled with 0s
  O = paint(O, shift(asobject(large_rect), (1,1))) # Paint the larger rectangle onto the canvas
  O = paint(O, shift(asobject(small_square), (3,3))) # Paint the smaller square onto the canvas
  return O
 
0.43, 32.112885, def ejefjbadbbbceggbiebfdgeigcdbcaad(I):
  O = canvas(0,(10,10)) # Create a 10x10 canvas filled with 0s
  O = fill(O, 4, backdrop(asindices(canvas(0,(5,4))))) # Draw the smaller rectangle
  O = fill(O, 1, backdrop(shift(asindices(canvas(0,(2,2))), (1,1)))) # Draw the smaller square
  if I != 7:
    O = paint(O, recolor(4, {(0,5),(1,5),(2,5),(3,5),(4,5)})) # Add a column if the input is not 7
  return O
 
0.6950000000000001, 15.324468, def fdaabdcgbahfeagibaffgdbdaeabbfii(I):
  v = I[0][0]
  O = canvas(0, (10, 10)) # Create a 10x10 canvas filled with '0's
  O = fill(O, 4, box(asindices(O))) # Create the outer frame of '4's
  bar_row = 2 if even(v) else 7  # Determine row for the horizontal bar
  lines_row = bar_row + (1 if even(v) else -2) # Determine the row for the lines based on bar_row
  O = fill(O, 4, {(bar_row, i) for i in range(1, 9)})  # Draw the horizontal line of '4's using set notation
  O = fill(O, 2, {(lines_row + i, j) for i in range(3 if even(v) else 2) for j in range(3, 7)})  # Draw the lines of '2's using set notation 
  O = fill(O, 1, {(bar_row, 4), (bar_row, 5)})  # Draw the '1's at the center using set notation
  return O
 
0.77, 44.729618, def gbgheaffeefbeabcjfefbjabacfdahda(I):
  v = I[0][0]
  frame =  difference(asindices(canvas(0, (10, 10))), crop(canvas(0, (10, 10)), (1,1),(8,8))) # Calculate frame indices
  bar_row = 2 if even(v) else 7  # Determine row for horizontal bar
  bar = {(bar_row, i) for i in range(1, 9)} # Define bar indices using set notation
  lines_row = bar_row + (1 if even(v) else -2) # Determine row for vertical lines
  lines = {(lines_row + i, j) for i in range(3 if even(v) else 2) for j in range(3, 7)} # Define line indices 
  dots = {(bar_row, 4), (bar_row, 5)} # Define dots indices
  O = fill(canvas(0, (10, 10)), 4, frame)  # Draw the frame
  O = fill(O, 4, bar)  # Draw the horizontal bar 
  O = fill(O, 2, lines)  # Draw the vertical lines
  O = fill(O, 1, dots) # Draw the dots
  return O
 
0.47, 13.974678, def ebghdadcfhdfedjbigdfgbbdcaechdbi(I):
  small_square = canvas(1, (2,2)) # Create the smaller square
  large_rect = canvas(4, (5,4)) # Create the 5x4 rectangle
  inner_rect = canvas(2, (3,4)) # Create the 3x4 rectangle
  combined_rect = paint(canvas(4, (5,6)), shift(asobject(inner_rect), (1,1))) # Combine the 3x4 rect within the 5x6 rect
  O = canvas(0, (10,10)) # Create a 10x10 canvas
  O = paint(O, shift(asobject(large_rect), (1,1))) # Paint the 5x4 rectangle 
  O = paint(O, shift(asobject(small_square), (2,2))) # Paint the smaller square
  O = paint(O, shift(asobject(combined_rect), (6, 5) if I==7 else (1,5))) # Paint the combined rectangle based on input
  return O 
 
0.29500000000000004, 7.9240856, def gbeifiadbbifecdhafacahccdcbigeca(I):
  O = canvas(0, (10,10)) # Create a 10x10 canvas
  O = paint(O, recolor(4, frozenset((i,j) for i in range(1,6) for j in range(1,5)))) # Paint the 5x4 rectangle
  O = paint(O, recolor(1, frozenset((i,j) for i in range(2,4) for j in range(2,4)))) # Paint the small square
  start_j = 5 if I == 7 else 5 
  O = paint(O, recolor(4, frozenset((i,j) for i in range(start_j, start_j + 5) for j in range(5,11)))) # Paint the outer rectangle
  O = paint(O, recolor(2, frozenset((i,j) for i in range(start_j + 1, start_j + 4) for j in range(6,10)))) # Paint the inner rectangle
  return O
 
0.505, 25.871117, def iffhhbjbbdgeeheiaieabdejcdafebbb(I):
  base_rect = hconcat(canvas(4, (5,4)), canvas(4, (5,6))) # Create the base rectangle (5x10)
  inner_rect = canvas(2, (3,4)) # Create the inner 3x4 rectangle
  base_rect = paint(base_rect, shift(asobject(inner_rect), (1,5))) # Combine the inner rectangle with the base rectangle
  O = canvas(0, (10,10)) # Create the canvas
  O = paint(O, shift(asobject(base_rect), (1,0) if I == 7 else (6,0))) # Place the base rectangle based on input
  O = paint(O, recolor(1, frozenset((i,j) for i in range(2,4) for j in range(2,4)))) # Paint the small square
  return O
 
0.585, 16.953125, def cahahbaiebcdejdcbhhagcgbaehcbhae(I):
  left_part = paint(canvas(4, (5,4)), recolor(1, frozenset((i,j) for i in range(2,4) for j in range(2,4)))) # Create the left part with the square
  right_part = paint(canvas(4, (5,6)), shift(asobject(canvas(2, (3,4))), (1,1))) # Create the right part with the inner rectangle
  O = hconcat(left_part, right_part) # Combine the left and right parts
  O = vconcat(canvas(0, (5, 10)), O) if I == 7 else vconcat(O, canvas(0, (5, 10))) # Concatenate with 0s based on input
  return O
 
0.355, 35.3589, def deiabeaiificeahjadfafhabfhhfaebg(I):
  # Define colors and size
  outer_color = 4
  inner_color_1 = 1
  inner_color_2 = 2
  size = 5

  # Create canvas
  O = canvas(0, (10, 10))

  # Function to create a square with border and inner color
  def make_square(inner_color):
    square = fill(canvas(outer_color, (size, size)), 0, box(asindices(canvas(0, (size, size)))))
    return fill(square, inner_color, inbox(asindices(canvas(0, (size - 2, size - 2)))))

  # Place first square
  O = paint(O, shift(asobject(make_square(inner_color_1)), (1, 2)))

  # Place second square based on input
  if I == 7:
    O = paint(O, shift(asobject(make_square(inner_color_1)), (5, 0)))
  else:
    O = paint(O, shift(asobject(make_square(inner_color_2)), (6, 2)))

  return O
 
0.395, 31.140858, def bbbeidaaeigfeeefifecccbbjabadaie(I):
    # Define colors and offsets
    outer = 4
    inner1 = 1
    inner2 = 2
    offset1 = (1, 2)
    offset2_true = (5, 0)
    offset2_false = (6, 2)

    # Function to create a nested square
    def nested_square(inner):
        return fill(canvas(outer, (5, 5)), inner, inbox(asindices(canvas(0, (3, 3)))))

    # Determine offset and inner color based on input
    offset2 = offset2_true if I == 7 else offset2_false
    inner = inner1 if I == 7 else inner2

    # Create canvas and paint squares
    O = canvas(0, (10, 10))
    O = paint(O, shift(asobject(nested_square(inner1)), offset1))
    O = paint(O, shift(asobject(nested_square(inner)), offset2))
    
    return O
 
0.425, 18.280195, def bfffefbcefbdecihibfjidegddabfcfa(I):
    inner_color = 1 if I[0][0] == 7 else 2
    O = canvas(0, (10, 10))  
    O = fill(O, 4,  {(i, j) for i in range(1, 9) for j in (1, 8)})  # Vertical lines
    O = fill(O, 4,  {(i, j) for j in range(2, 8) for i in (1, 8)})  # Horizontal lines
    if inner_color == 1:
        O = fill(O, inner_color,  {(i, j) for i in range(2, 4) for j in range(3, 7)})
    else:
        O = fill(O, inner_color,  {(i, j) for i in range(7, 9) for j in range(3, 7)})
    return O
 
0.41500000000000004, 22.946487, def afabdbgacfdiebefbdedfeibhbdhadcf(I):
  inner_color = 1 if I[0][0] == 7 else 2
  top = canvas(0, (6, 10)) if inner_color == 1 else canvas(0, (4, 10))
  bottom = canvas(0, (4, 10)) if inner_color == 1 else canvas(0, (6, 10))
  top = fill(top, 4, {(i, j) for i in range(1, len(top)-1) for j in (1, 8)}) 
  top = fill(top, 4, {(i, j) for j in range(2, 8) for i in (1, len(top)-1)}) 
  top = fill(top, inner_color, {(i, j) for i in range(2, 4) for j in range(3, 7)})
  bottom = fill(bottom, 4, {(i, j) for i in range(len(bottom)) for j in (1, 8)})
  bottom = fill(bottom, 4, {(i, j) for j in range(2, 8) for i in (0, len(bottom)-1)})
  O = vconcat(top, bottom)
  return O 
 
0.45499999999999996, 18.281942, def jgcfjhehbfbfedfcbbadiecebedchacf(I):
  O = canvas(0, (10, 10)) # Create a 10x10 canvas
  if I == 7:
    O = fill(O, 4, product(interval(1,6,1), interval(1,6,1))) # Fill the 5x5 rectangle at the top
    O = fill(O, 2, product(interval(6,9,1), interval(3,6,1))) # Fill the 3x3 square below
  else:
    O = fill(O, 4, product(interval(3,9,1), interval(3,8,1))) # Fill the 6x5 rectangle at the bottom
    O = fill(O, 1, product(interval(2,5,1), interval(5,8,1))) # Fill the 3x3 square above
  return O
 
0.45, 26.145117, def dibgaifebiideifcacedeafgeacffabi(I):
  O = canvas(0, (10, 10))
  size_rect = (5, 5) if I == 7 else (6, 5) # Determine rectangle size
  pos_rect = (1, 1) if I == 7 else (3, 3) # Determine rectangle position
  size_square = (3, 3) 
  pos_square = add(pos_rect, (size_rect[0] + 1, 1)) if I == 7 else subtract(pos_rect, (4, 2)) # Calculate square position relative to rectangle
  fill_rect = 4
  fill_square = 2 if I == 7 else 1
  O = fill(O, fill_rect, product(interval(pos_rect[0], pos_rect[0] + size_rect[0], 1), interval(pos_rect[1], pos_rect[1] + size_rect[1], 1))) # Fill rectangle
  O = fill(O, fill_square, product(interval(pos_square[0], pos_square[0] + size_square[0], 1), interval(pos_square[1], pos_square[1] + size_square[1], 1))) # Fill square
  return O
 
0.525, 22.598349, def ajhffiecehffefdhbjfefcchdabdadea(I):
  O = canvas(0, (10, 10))
  rect_base = product(interval(1, 6, 1), interval(1, 6, 1)) # Create base rectangle
  O = fill(O, 4, rect_base) # Fill base rectangle
  if I == 7:
    O = fill(O, 2, shift(rect_base, (5, 2))) # Extend and fill for input 7
  else:
    O = fill(O, 4, shift(rect_base, (0, 2))) # Extend and fill for other inputs
    O = fill(O, 1, shift(rect_base, (-1, 3)))
  return O
 
0.6, 12.978017, def ccfadbjgdebaeedhbcbfibgfbagccabd(I):
  v = I[0][0]
  frame =  box(asindices(canvas(0, (10, 10))))
  square_area = crop(canvas(0, (10, 10)), (1, 1), (5 if even(v) else 6, 5 if even(v) else 4))
  vlines = {(8 if even(v) else 2 + i, j) for i in range(2 if even(v) else 3) for j in range(3, 7)} 
  bottom_mark = {(9, 4), (9, 5)} if even(v) else {(j, 4) for j in range(2, 8)}
  O = fill(canvas(0, (10, 10)), 4, frame) 
  O = fill(O, 0, asindices(square_area))
  O = fill(O, 2, vlines)
  O = fill(O, 1, bottom_mark)
  return O
 
0.745, 19.315308, def jfddfifgdgageeecibegffbgecadebgg(I):
  v = I[0][0]
  O = canvas(4, (10, 10))
  square_indices = crop(O, (1, 1), (5 if even(v) else 6, 5 if even(v) else 4))
  line_indices =  {(8 if even(v) else 2 + i, j) for i in range(2 if even(v) else 3) for j in range(3, 7)} 
  O = fill(O, 0, asindices(square_indices))
  O = fill(O, 2, line_indices)
  if even(v): 
    O = fill(O, 1, {(9, 4), (9, 5)})
  else:
    O = fill(O, 1, difference({(j, 4) for j in range(1, 9)}, asindices(square_indices)))
  return O
 
0.625, 11.737523, def ffebcghachijefebiafaffidjfbegibd(I):
  """
  Generates a stylized '7' based on input shape.
  """
  template = (
      (0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
      (0, 4, 4, 4, 4, 4, 0, 0, 0, 0),
      (0, 4, 2, 2, 2, 4, 0, 0, 0, 0),
      (0, 4, 2, 2, 2, 4, 0, 0, 0, 0),
      (0, 4, 2, 2, 2, 4, 0, 0, 0, 0),
      (0, 4, 4, 4, 4, 4, 0, 0, 0, 0),
      (0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
      (0, 0, 0, 0, 0, 4, 4, 4, 4, 0),
      (0, 0, 0, 0, 0, 4, 1, 1, 4, 0),
      (0, 0, 0, 0, 0, 4, 4, 4, 4, 0)
  ) 
  if width(I) >= height(I): # Landscape orientation
    template = rot90(template)
  return template 
 
0.52, 39.23472, def habcbeidegbdegciagddbgfdeecjbbfc(I):
  """
  Generates a stylized '7' using grid construction.
  """
  O = canvas(0, (10, 10)) 
  O = fill(O, 4, connect((1,1), (1,5))) # Vertical Bar
  O = fill(O, 4, connect((1,0), (4,0))) # Head
  O = fill(O, 2, connect((2,5), (4,5))) # Inner fill
  O = fill(O, 1, {(2,1), (3,1)}) # Eyes
  if width(I) >= height(I):
    O = rot90(O)
  return O
 
0.47, 39.190063, def bgebbcagibjfeabaadbcbgcfcaigjfaf(I):
  """
  Generates a stylized '7' using grid construction (alternative).
  """
  O = canvas(0,(10,10))
  for i in range(1,6):
    O = paint(O, recolor(4, {(i, 1)})) # Vertical Bar
  for i in range(5):
    O = paint(O, recolor(4, {(1, i)})) # Head 
  for i in range(2,5):
    O = paint(O, recolor(2, {(i, 5)})) # Inner Fill
  O = paint(O, recolor(1, {(2, 1), (3, 1)})) # Eyes 
  if width(I) >= height(I):
    O = rot90(O)
  return O
 
0.59, 31.219673, def fbbachjgeediefdcjaedfdjaeiebdejb(I):
  O = canvas(0, (10, 10)) # Initialize the canvas
  main_shape = paint(canvas(4, (5, 4)), shift(asobject(canvas(1, (2, 2))), (1, 1))) # Create combined shape
  if I != 7: 
    main_shape = hconcat(main_shape, ((4,), (4,), (4,), (4,), (4,))) # Add a column if input is not 7
  main_shape = vmirror(main_shape) # Mirror the entire shape vertically
  O = paint(O, shift(asobject(main_shape), (1, 6))) # Paint the shape onto the canvas
  new_rect = canvas(2, (5 if I == 7 else 4, 1)) # Create the '2' rectangle with conditional width
  O = paint(O, shift(asobject(new_rect), (8, 3 if I == 7 else 4))) # Paint the new rectangle
  return O
 
0.425, 17.247816, def dhdadbbiabeiehdiaajdicaaebifaedd(I):
    def make_square(inner_color, pos):
        s = canvas(0, (5,5))
        s = fill(s, 4, box(asindices(canvas(0, (5, 5)))))
        s = fill(s, inner_color, shift(inbox(asindices(canvas(0, (3, 3)))), (1, 1)))
        return shift(asobject(s), pos)
  
    O = canvas(0, (10, 10))
    O = paint(O, make_square(1, (1, 2)))
    O = paint(O, make_square(1 if I == 7 else 2, (5, 0) if I == 7 else (6, 2)))
    return O
 
0.235, 10.57628, def dbhcgjaddcfgedaabhbfjiaadjacchdg(I):
  v = index(I, (0, 0)) == 7
  O = canvas(0, (10, 10))

  # Define shape sizes based on input
  outer_sizes = [(4, 4), (4, 4)] if v else [(5, 4), (3, 4)]
  inner_sizes = [(2, 2), (2, 2)] if v else [(3, 2), (1, 2)]
  fill_values = [1, 2] if v else [2, 1]
  positions = [(1, 1), (6, 3)] if v else [(1, 1), (7, 6)]

  # Iterate through shapes and draw
  for i in range(2):
    for m in range(outer_sizes[i][0]):
      for n in range(outer_sizes[i][1]):
        O = paint(O, {(4, add(positions[i], (m, n)))})
        if m > 0 and m < outer_sizes[i][0] - 1 and n > 0 and n < outer_sizes[i][1] - 1:
          for k in range(inner_sizes[i][0]):
            for l in range(inner_sizes[i][1]):
              O = paint(O, {(fill_values[i], add(add(positions[i], (m, n)), (k, l)))})
  return O 
 
0.24, 12.416173, def bjgcfhcedafbeghbidehdhefhdicfgfa(I):
  v = index(I, (0, 0)) == 7
  O = canvas(0, (10, 10))

  # Define shapes using list comprehensions
  shape1 = {(4, (i + 1, j + 1)) for i in range(4 if v else 5) for j in range(4)} | {(1 if v else 2, (i + 2, j + 2)) for i in range(2 if v else 3) for j in range(2)}
  shape2 = {(4, (i + (6 if v else 7), j + (3 if v else 6))) for i in range(4 if v else 3) for j in range(4)} | {(2 if v else 1, (i + (7 if v else 8), j + (4 if v else 7))) for i in range(2 if v else 1) for j in range(2)}

  # Paint shapes onto canvas
  O = paint(paint(O, shape1), shape2)
  return O
 
0.41000000000000003, 22.577217, def ccdbegjejeejehbbagedaibeeiddcdae(I):
  O = canvas(0, (10, 10))
  for j in range(5):
    for i in range(5):
      if i == 0 or i == 4 or j == 0 or j == 4:
        O = paint(O, {(4, (i+1, j))})
      elif i == 2 and j == 2:
        O = paint(O, {(1, (i+1, j))})
  for j in range(5):
    for i in range(5):
      if i == 0 or i == 4 or j == 0 or j == 4:
        O = paint(O, {(4, (i+6, j + (1 if I != 7 else 0)))})
      elif i == 2 and j == 2:
        O = paint(O, {((1 if I == 7 else 2), (i+6, j + (1 if I != 7 else 0)))})
  return O
 
0.435, 21.500532, def aeafdehcdhaeedfcbfdhijdgadjhdbid(I):
  """
  Generates a stylized '7' using horizontal and vertical lines.
  """
  O = canvas(0, (10, 10))
  if width(I) >= height(I): # Landscape
    O = fill(O, 4, {(i, j) for i in range(1, 6) for j in range(5)})  # Base
    O = fill(O, 2, {(i, j) for i in range(3, 6) for j in range(5, 8)})  # Fill
    O = fill(O, 1, {(2, 1), (3, 1)})  # Eyes
  else: # Portrait
    O = fill(O, 4, {(i, j) for j in range(1, 6) for i in range(5)})  # Base
    O = fill(O, 2, {(i, j) for j in range(3, 6) for i in range(5, 8)})  # Fill
    O = fill(O, 1, {(1, 2), (1, 3)})  # Eyes
  return O
 
0.47, 35.75792, def fchhbfecdbjaedeeaaebdcbjjgaddfde(I):
  O = canvas(0, (10, 10))  # Canvas initialization
  start_row = 6 - 5 * (I == 7)  # Determine the starting row based on the input
  O = paint(O, recolor(4, frozenset((i, j) for i in range(start_row, start_row + 4) for j in range(1, 5 + (I != 7)))))  # Paint the larger rectangle
  O = paint(O, recolor(1, frozenset((i, j) for i in range(start_row + 2, start_row + 4) for j in range(3, 5))))  # Paint the smaller square
  return O
 
0.485, 39.226414, def aejedejcaiadejcbacffaeebegifcebc(I):
  O = canvas(0, (10, 10)) # Initialize canvas
  rect_width = 4 + (I != 7) # Dynamic width for the rectangle
  large_rect = canvas(4, (rect_width, 4)) # Create the larger rectangle
  small_square = canvas(1, (2, 2)) # Create the smaller square
  combined_shape = paint(large_rect, shift(asobject(small_square), (1, 1)))  # Combine the shapes 
  if I == 7: # Conditional placement and mirroring based on input
    O = paint(O, shift(asobject(combined_shape), (1, 1)))
    O = vconcat(tophalf(O), shift(vmirror(bottomhalf(O)), (5, 0)))
  else:
    O = paint(O, shift(asobject(combined_shape), (6, 1)))
  return O
 
0.545, 37.811314, def idhggbhcggbaeccgbceabfcdeejedbbc(I):
  O = canvas(0, (10, 10))  # Initialize canvas
  rect_start_col = 1 + 5 * (I != 7)  # Calculate rectangle's starting column
  for i in range(1, 5):  # Iterate over rows to draw shapes
    for j in range(rect_start_col, rect_start_col + 4 + (I != 7)):  # Iterate over columns to draw shapes
      O = paint(O, recolor(4, frozenset([(i, j)]))) # Paint the rectangle cells
      if 3 <= i <= 4 and rect_start_col + 2 <= j <= rect_start_col + 3: # Paint the square cells conditionally
        O = paint(O, recolor(1, frozenset([(i, j)])))
  return O
 
0.48, 17.98683, def eedadhfhdbbeefgdjibdfcaiedeciajf(I):
  # Canvas creation
  O = canvas(0, (10, 10)) 
  
  # Shape generation based on input position
  if index(I, (0, 0)) == 7:  # Assuming input is always at (0, 0)
    # Create large rectangle
    large_rect = canvas(4, (6, 8))
    O = paint(O, shift(asobject(large_rect), (3, 1)))
    # Create small rectangle
    small_rect = canvas(2, (2, 3))
    O = paint(O, shift(asobject(small_rect), (4, 4)))
  else:
    # Create horizontal rectangle
    h_rect = canvas(4, (6, 4))
    O = paint(O, shift(asobject(h_rect), (1, 3)))
    # Create vertical rectangle
    v_rect = canvas(2, (3, 2))
    v_rect = replace(v_rect, 2, 1) # Replace top and bottom rows with '1'
    O = paint(O, shift(asobject(v_rect), (2, 5)))
  return O
 
0.39, 51.432396, def eddeafcadcajehecbfgeehdfbegdecef(I):
  v = I[0][0]  # Extract the input digit
  O = canvas(0, (10, 10))  # Create a 10x10 canvas filled with 0s

  if v == 7:
    O = fill(O, 4, connect((1, 1), (4, 4)))  # Draw the main diagonal line of the '7'
    O = fill(O, 4, connect((1, 4), (1, 9)))  # Draw the horizontal line of the '7'
    O = fill(O, 1, connect((2, 2), (3, 3)))  # Fill the central cells with '1'
  elif v == 1:
    O = fill(O, 4, connect((1, 6), (5, 6)))  # Draw the vertical line of the '1'
    O = fill(O, 4, connect((1, 7), (1, 9)))  # Draw the small horizontal line of the '1'
    O = fill(O, 2, connect((3, 6), (4, 6)))  # Fill the central cells with '2'

  return O
 
0.49, 41.880188, def fcaaffdfcabbeefgicejhgagjddcihef(I):
  v = I[0][0]
  O = canvas(0, (10, 10))
  main_color = 4

  if v == 7:
    obj = normalize(frozenset({(main_color, (1, 1)), (main_color, (2, 2)), (main_color, (3, 3)), (main_color, (4, 4)), (main_color, (1, 4)), (main_color, (1, 5)), (main_color, (1, 6)), (main_color, (1, 7)), (main_color, (1, 8)), (main_color, (1, 9))}))
    O = paint(O, obj)
    O = paint(O, recolor(1, shift(obj, (1, 1))))
  elif v == 1:
    obj = normalize(frozenset({(main_color, (1, 6)), (main_color, (2, 6)), (main_color, (3, 6)), (main_color, (4, 6)), (main_color, (5, 6)), (main_color, (1, 7)), (main_color, (1, 8)), (main_color, (1, 9))}))
    O = paint(O, obj)
    O = paint(O, recolor(2, shift(obj, (2, 0))))

  return O
 
0.385, 86.21019, def fcdhegdbeegaebajaebfhedfaiafiggf(I):
  O = canvas(0, (10, 10))  # Create a 10x10 canvas filled with '0's

  if I == 7: 
    # Shape A
    shape_a = canvas(4, (5, 4))  # Create a 5x4 rectangle filled with '4's
    shape_a = fill(shape_a, 1, product(interval(1, 3, 1), interval(1, 3, 1)))  # Fill inner 2x2 with '1's
    O = paint(O, asobject(shape_a))  # Paint shape_a at the top

    # Shape B
    shape_b = canvas(4, (5, 6))  # Create a 5x6 rectangle filled with '4's
    shape_b = fill(shape_b, 2, product(interval(1, 3, 1), interval(2, 4, 1))) # Fill inner 2x2 with '2's
    O = paint(O, shift(asobject(shape_b), (5, 1)))  # Paint shape_b at the bottom

  return O 
 
0.48, 15.32241, def djcccdfcccjjecjbabfhbacdcfdeccca(I):
  O = canvas(0, (10, 10))  # Initialize empty canvas
  if index(I, (0, 0)) == 7: 
    O = paint(O, shift(asobject(canvas(4, (6, 8))), (1, 1)))  # Large rectangle at (1,1)
    O = paint(O, shift(asobject(canvas(1, (2, 3))), (3, 4)))  # Small rectangle at (3,4) with '1'
    O = underpaint(O, shift(asobject(canvas(2, (2, 1))), (3, 4)))  # '2' on top/bottom rows
  else:
    O = paint(O, shift(asobject(canvas(4, (6, 4))), (1, 3)))  # Large rectangle at (1,3)
    O = paint(O, shift(asobject(canvas(1, (3, 2))), (2, 5)))  # Small rectangle at (2,5) with '1'
    O = underpaint(O, shift(asobject(canvas(2, (1, 2))), (2, 5)))  # '2' on left/right columns
  return O
 
0.35, 62.11662, def ichbegbeebhcegehijadfcdfgbaceaaf(I):
  if index(I, (0, 0)) == 7:
    large_rect = canvas(4, (6, 8))
    small_rect = replace(canvas(2, (2, 3)), 2, 1)
    O = paint(paint(canvas(0, shape(large_rect)), asobject(large_rect)), shift(asobject(small_rect), (2, 3)))
  else:
    large_rect = canvas(4, (6, 4))
    small_rect = replace(rot90(canvas(2, (2, 3))), 2, 1)
    O = paint(paint(canvas(0, shape(large_rect)), asobject(large_rect)), shift(asobject(small_rect), (1, 2)))
  return O
 
0.71, 22.283627, def cceagajjefcbecfhbcecbejiaacagjbc(I):
  if index(I, (0, 0)) == 7:
    O = paint(canvas(4, (10, 10)), shift(asobject(canvas(0, (4, 6))), (3, 2)))
    O = paint(O, shift(asobject(canvas(1, (2, 3))), (3, 4)))
    O = underpaint(O, shift(asobject(canvas(2, (2, 1))), (3, 4)))
  else:
    O = paint(canvas(4, (10, 10)), shift(asobject(canvas(0, (7, 6))), (2, 2)))
    O = paint(O, shift(asobject(canvas(1, (3, 2))), (2, 5)))
    O = underpaint(O, shift(asobject(canvas(2, (1, 2))), (2, 5)))
  return O
 
0.49, 14.054625, def jffgjghdediceaicbhbhjfbfhfdibfgd(I):
  O = canvas(0, (10, 10))
  if index(I, (0, 0)) == 7:
    O = paint(O, asobject(canvas(4, (6, 2))))
    O = paint(O, shift(asobject(canvas(4, (6, 6))), (1, 2)))
    O = paint(O, shift(asobject(canvas(1, (2, 3))), (3, 4)))
    O = underpaint(O, shift(asobject(canvas(2, (2, 1))), (3, 4))) 
  else:
    O = paint(O, asobject(canvas(4, (6, 4))))
    O = paint(O, shift(asobject(canvas(4, (3, 2))), (2, 5)))
    O = paint(O, shift(asobject(canvas(1, (3, 2))), (2, 5)))
    O = underpaint(O, shift(asobject(canvas(2, (1, 2))), (2, 5)))
  return O
 
0.41000000000000003, 29.714205, def dabfdffghcceeaddaajaeeafbedaciie(I):
  O = canvas(0, (10, 10)) # Create a 10x10 canvas filled with 0s
  
  # Define shapes based on input
  if I == 7:
    shape_a_color = 1
    shape_b_color = 2
    shape_b_offset = (5, 1)
  else:
    # Default values if input is not 7 
    shape_a_color = 0 
    shape_b_color = 0
    shape_b_offset = (0, 0) 
  
  # Shape A
  shape_a = canvas(4, (5, 4))
  shape_a = fill(shape_a, shape_a_color, product(interval(1, 3, 1), interval(1, 3, 1)))
  O = paint(O, asobject(shape_a))
  
  # Shape B
  shape_b = canvas(4, (5, 6))
  shape_b = fill(shape_b, shape_b_color, product(interval(1, 3, 1), interval(2, 4, 1)))
  O = paint(O, shift(asobject(shape_b), shape_b_offset)) 
  
  return O
 
0.42, 39.20159, def eahdaeccccaceeacajaebhbiadadbebg(I):
  O = canvas(0, (10, 10)) # Create a 10x10 canvas filled with 0s

  # Shape A: Always the same
  shape_a = paint(canvas(4, (5, 4)), 
                  recolor(1, product(interval(1, 3, 1), interval(1, 3, 1))))
  O = paint(O, asobject(shape_a)) 

  # Shape B: Position and color depend on input
  if I == 7:
    shape_b = paint(canvas(4, (5, 6)), 
                    recolor(2, product(interval(1, 3, 1), interval(2, 4, 1))))
    O = paint(O, shift(asobject(shape_b), (5, 1)))

  return O
 
0.435, 49.219788, def ffbcbfjfficdefjeieehecceadibhibe(I):
  digit = int(str(I)[0]) if str(I)[0].isdigit() else 0  # Extract digit, handle non-digit input
  O = canvas(0, (10, 10))  # Create canvas
  O = fill(O, 4, box(asindices(crop(O, (1, 1), (4, 4)))))  # Top square outline
  O = fill(O, 4, box(asindices(crop(O, (6, 6), (4, 4)))))  # Bottom square outline
  O = paint(O, {(digit, (3, 3))})  # Place digit
  bottom_fill = 2 if digit == 7 else 1  # Determine bottom fill
  O = fill(O, bottom_fill, asindices(crop(O, (7, 4), (2, 2))))  # Fill bottom center
  return O
 
0.38, 20.712994, def befaecefgccceadcaebehefhifdgabfi(I):
  digit = int(str(I)[0]) if str(I)[0].isdigit() else 0 
  O = canvas(0, (10, 10))
  for i in range(1, 5):
    O = paint(O, {(4, (i, 1)), (4, (i, 4)), (4, (i + 5, 1)), (4, (i + 5, 4))}) # Vertical lines
  for i in range(2, 4):
    O = paint(O, {(4, (1, i)), (4, (4, i)), (4, (1, i + 5)), (4, (4, i + 5))}) # Horizontal lines
  O = paint(O, {(digit, (3, 3))})
  bottom_fill = {(2, (i, j)) for i in range(7, 9) for j in range(4, 6)} if digit == 7 else \
                {(1, (i, j)) for i in range(7, 9) for j in range(4, 6)} 
  O = paint(O, bottom_fill)
  return O
 
0.325, 30.608145, def cbhejdachageefiijbfbfecfegadiefe(I):
  digit = int(str(I)[0]) if str(I)[0].isdigit() else 0
  O = canvas(4, (4, 4))  # Start with a 4x4 square of 4s
  O = hconcat(canvas(0, (4, 2)), O) # Add 0s to the left
  O = hconcat(O, canvas(0, (4, 4))) # Add 0s to the right
  O = vconcat(canvas(0, (2, 10)), O) # Add 0s to the top
  O = vconcat(O, canvas(0, (6, 10))) # Add 0s to the bottom
  O = paint(O, {(digit, (3, 3))})
  bottom_fill = 2 if digit == 7 else 1 
  O = fill(O, bottom_fill, asindices(crop(O, (7, 4), (2, 2))))  # Fill bottom center
  return O
 
0.33499999999999996, 26.082508, def eeciicdhagecegcfajbidgffaficefjf(I):
  digit = int(str(I)[0]) if str(I)[0].isdigit() else 0
  O = canvas(0, (10, 10))
  top_square = shift(box(asindices(canvas(0, (4, 4)))), (1, 1))
  bottom_square = shift(top_square, (5, 5)) 
  O = fill(fill(O, 4, top_square), 4, bottom_square)
  O = paint(O, {(digit, (3, 3))}) 
  bottom_center = asindices(crop(O, (7, 4), (2, 2)))
  O = fill(O, 2 if digit == 7 else 1, bottom_center) 
  return O
 
0.475, 19.383608, def fjiaffecigcaedacifebbejfcdcjajdf(I):
  digit = int(str(I)[0]) if str(I)[0].isdigit() else 0
  O = canvas(0, (10, 10))
  O = fill(O, 4,  frozenset({(i, j) for i in [1, 2, 3, 4, 6, 7, 8, 9] for j in [1, 4, 6, 9]})) # Outlines
  O = paint(O, {(digit, (3, 3))})  # Place digit
  bottom_fill = 2 if digit == 7 else 1
  O = fill(O, bottom_fill, frozenset({(7, 4), (7, 5), (8, 4), (8, 5)}))  # Fill bottom center
  return O
 
0.49, 16.652508, def iebadcebhhbdehafbfffbebabcddbcie(I):
  if index(I, (0, 0)) == 7:  # Check input digit
    O = canvas(0, (10, 10))  # Create empty canvas
    large_rect = canvas(4, (6, 8))  # Create large rectangle
    small_rect = canvas(1, (2, 3))  # Create small rectangle
    O = paint(O, shift(asobject(large_rect), (2, 1)))  # Paint large rectangle
    O = paint(O, shift(asobject(small_rect), (3, 3)))  # Paint small rectangle
  else:
    O = canvas(0, (10, 10))  # Create empty canvas
    large_rect = canvas(4, (6, 6))  # Create large rectangle
    small_rect = canvas(2, (2, 3))  # Create small rectangle
    O = paint(O, shift(asobject(large_rect), (1, 2)))  # Paint large rectangle
    O = paint(O, shift(asobject(hmirror(small_rect)), (2, 3)))  # Paint and flip small rectangle
  return O
 
0.42500000000000004, 32.287334, def bagbajcddadaedjiaaijcaccjbfaaabi(I):
  d = index(I, (0, 0)) == 7 # Check input digit
  O = canvas(0, (10, 10)) # Create empty canvas
  O = paint(O, recolor(4, {(i, j) for i in range(2 + 3*d, 8 + 2*d) for j in range(1 + d, 9 - d)})) # Paint large rectangle using recolor
  O = paint(O, recolor(branch(d, 1, 2), {(i, j) for i in range(3 + d, 5 + d) for j in range(3, 6)})) # Paint small rectangle using recolor and conditional value
  return O
 
0.56, 15.496816, def cegheieibdbcedfcideacbbbccadaeei(I):
  d = index(I, (0, 0)) == 7 # Check input digit
  O = canvas(0, (5, 5)) # Create smaller canvas
  lr = canvas(4, (3 + 2 * d, 4 - d)) # Create large rectangle with dynamic size
  sr = canvas(branch(d, 1, 2), (2, 3)) # Create small rectangle with conditional value
  O = paint(O, shift(asobject(lr), (1, 1))) # Paint large rectangle
  O = paint(O, shift(asobject(sr), (2, 1 + d))) # Paint small rectangle with conditional shift
  return upscale(O, 2) # Upscale the grid
 
0.41000000000000003, 36.26111, def fjdfccijfcfcedifiacjhgdcbidahfid(I):
  is_seven = index(I, (0, 0)) == 7 # Check input digit
  O = canvas(0, (10, 10)) # Create empty canvas
  O = underfill(O, 4,  {(i, j) for i in range(2 + 3 * is_seven, 8 + 2 * is_seven) for j in range(1 + is_seven, 9 - is_seven)}) # Paint larger rectangle using underfill
  small_rect_color = 1 if is_seven else 2 # Choose color based on input
  small_rect_position = (3 + is_seven, 3) if is_seven else (2 + is_seven, 5) # Choose position based on input
  O = underfill(O, small_rect_color, {(i, j) for i in range(small_rect_position[0], small_rect_position[0] + 2) for j in range(small_rect_position[1], small_rect_position[1] + 3)}) # Paint smaller rectangle using underfill
  return O 
 
0.35, 48.455223, def ajccjgeaeahfeadfjjhgfaacbdbhdabj(I):
  digit = I[0][0]
  canvas_size = (10, 10)
  background_color = 0
  main_color = 4
  canvas_ = canvas(background_color, canvas_size)

  if digit == 7:
    horizontal_stroke = normalize(frozenset({(main_color, (0, j)) for j in range(6)}))
    slanted_stroke = normalize(frozenset({(main_color, (i, i + 3)) for i in range(4)})) 
    seven_shape = horizontal_stroke | slanted_stroke
    canvas_ = paint(canvas_, shift(seven_shape, (1, 1)))
    canvas_ = paint(canvas_, recolor(1, shift(slanted_stroke, (2, 2))))
  elif digit == 1:
    vertical_stroke = normalize(frozenset({(main_color, (i, 0)) for i in range(6)}))
    horizontal_stroke = normalize(frozenset({(main_color, (5, j)) for j in range(4)})) 
    one_shape = vertical_stroke | horizontal_stroke
    canvas_ = paint(canvas_, shift(one_shape, (2, 6)))
    canvas_ = paint(canvas_, recolor(2, shift(horizontal_stroke, (3, 7)))) 
  return canvas_
 
0.39, 20.598934, def cbdfcfcjcbcgeibeagahdicegbbccbfc(I):
    digit = I[0][0]
    canvas_size = (10, 10)
    background_color = 0
    main_color = 4
    canvas_ = canvas(background_color, canvas_size) 

    for i in range(canvas_size[0]):
        for j in range(canvas_size[1]):
            if digit == 7:
                if (1 <= i <= 4 and 1 <= j <= 6 and i + j <= 7) or (i == 2 and 2 <= j <= 9) or (i == 3 and 3 <= j <= 9): 
                    canvas_ = fill(canvas_, main_color, {(i, j)})
                if 2 <= i <= 3 and 3 <= j <= 5 and i + j <= 7:
                    canvas_ = fill(canvas_, 1, {(i, j)})
            elif digit == 1:
                if (2 <= i <= 7 and j == 6) or (i == 3 and 7 <= j <= 9) or (i == 4 and 7 <= j <= 9): 
                    canvas_ = fill(canvas_, main_color, {(i, j)})
                if (i == 4 and 8 <= j <= 9) or (i == 5 and 8 <= j <= 9): 
                    canvas_ = fill(canvas_, 2, {(i, j)})
    return canvas_
 
0.435, 37.00706, def aeiffgbbjdaaejdfjaebdibdideafafa(I):
  digit = I[0][0]
  canvas_size = (10, 10)
  background_color = 0
  main_color = 4
  canvas_ = canvas(background_color, canvas_size)

  if digit == 7:
    top_stroke = normalize(frozenset({(main_color, (0, j)) for j in range(6)})) 
    canvas_ = paint(canvas_, shift(top_stroke, (1, 1)))
    for i in range(2, 4): 
      for j in range(i + 3, 10):
        canvas_ = fill(canvas_, main_color if i == 2 else 1, {(i, j)}) 
  elif digit == 1: 
    vert_stroke = normalize(frozenset({(main_color, (i, 0)) for i in range(6)}))
    canvas_ = paint(canvas_, shift(vert_stroke, (2, 6)))
    for i in range(3, 6): 
      for j in range(7, 10):
        canvas_ = fill(canvas_, main_color if i <= 4 else 2, {(i, j)})
  return canvas_
 
0.42, 35.897152, def bbdcfbddeddheigdbfeidaceddgaebca(I):
    digit = I[0][0]
    canvas_size = (10, 10)
    background_color = 0
    main_color = 4
    canvas_ = canvas(background_color, canvas_size)

    if digit == 7:
      base_shape = normalize(frozenset({(main_color, (i, 0)) for i in range(4)}))
      canvas_ = paint(canvas_, shift(base_shape, (1, 1)))
      canvas_ = paint(canvas_, hmirror(shift(base_shape, (1, 8))))
      canvas_ = paint(canvas_, recolor(1, shift(base_shape, (2, 2))))
      canvas_ = paint(canvas_, hmirror(recolor(1, shift(base_shape, (2, 7)))))
    elif digit == 1:
      base_shape = normalize(frozenset({(main_color, (i, 0)) for i in range(6)})) 
      canvas_ = paint(canvas_, shift(base_shape, (2, 6)))
      canvas_ = paint(canvas_, vmirror(shift(base_shape, (7, 6)))) 
      canvas_ = paint(canvas_, recolor(2, shift(crop(vmirror(shift(base_shape, (8, 6))), (0, 0), (2, 4)), (3, 7))))
    return canvas_
 
0.485, 21.51116, def edbfdcddchjdeabfibbgaedeidbbddeb(I):
  O = canvas(0, (10, 10)) # Create a 10x10 canvas filled with '0's

  fill_a = 1 if I == 7 else 0  # Determine fill value for shape A
  fill_b = 2 if I == 7 else 0  # Determine fill value for shape B

  shape_a = canvas(4, (5, 4))  # Create the base shape for A
  shape_a = fill(shape_a, fill_a, product(interval(1, 3, 1), interval(1, 3, 1)))  # Fill inner region of A
  O = paint(O, asobject(shape_a))  # Paint shape A

  shape_b = canvas(4, (5, 6))  # Create the base shape for B
  shape_b = fill(shape_b, fill_b, product(interval(1, 3, 1), interval(2, 4, 1))) # Fill inner region of B
  O = paint(O, shift(asobject(shape_b), (5, 1)))  # Paint shape B

  return O 
 
0.35, 37.476357, def jfdaggabefaeecibibgdbdiacfedbedf(I):
  O = canvas(0, (10, 10))  # Create a 10x10 canvas filled with '0's

  inner_fills = [(1, 2)] if I == 7 else [(0, 0)]  # Define fill values based on input

  for num, (fill_a, fill_b) in enumerate(inner_fills):
    shape = canvas(4, (5, 4 + num * 2))  # Create base shape (A or B based on loop)
    shape = fill(shape, fill_a if num == 0 else fill_b, product(interval(1, 3, 1), interval(1 + num, 3 + num, 1)))  # Fill inner region
    O = paint(O, shift(asobject(shape), (5 * num, 1)))  # Paint the shape

  return O
 
0.36, 21.992302, def icejddjgffbaecfdbjhbbahagbhideah(I):
    digit = int(str(I)[0]) if str(I)[0].isdigit() else 0
    O = canvas(0, (10, 10))  # Create a 10x10 canvas of '0's
    top_square = shift(box(asindices(canvas(0, (4, 4)))), (1, 1))  # Create the top 4x4 square outline at (1,1)
    bottom_square = shift(top_square, (5, 0)) # Shift the top square down to create the bottom square outline 
    O = fill(fill(O, 4, top_square), 4, bottom_square) # Fill both square outlines with '4's
    inner_square = shift(box(asindices(canvas(0, (2, 2)))), (7, 4)) # Create the inner 2x2 square outline
    O = fill(O, 2 if digit == 7 else 1, inner_square) # Fill the inner square based on the input digit
    return O
 
0.26, 16.807407, def hcbidbheddjbehaeaecfjfdbadfadegi(I):
    digit = int(str(I)[0]) if str(I)[0].isdigit() else 0
    O = canvas(0, (10, 10))
    for i in range(1, 5):
        for j in range(1, 5):
            O = fill(O, 4, {(i, j)})  # Fill the top square cell by cell
            O = fill(O, 4, {(i + 5, j + 3)})  # Fill the bottom square cell by cell
    inner_value = 2 if digit == 7 else 1
    for i in range(7, 9):
        for j in range(4, 6):
            O = fill(O, inner_value, {(i, j)}) # Fill the inner square cell by cell
    return O
 
0.275, 20.55895, def cegeidaghchaejacidijajaegbedgdgf(I):
    digit = int(str(I)[0]) if str(I)[0].isdigit() else 0
    O = canvas(0, (10, 10))
    O = paint(O, recolor(4, shift(box(asindices(canvas(0, (4, 4)))), (1, 1)))) # Paint top square
    O = paint(O, recolor(4, shift(box(asindices(canvas(0, (4, 4)))), (6, 3)))) # Paint bottom square
    inner_color = 2 if digit == 7 else 1
    O = paint(O, recolor(inner_color, shift(box(asindices(canvas(0, (2, 2)))), (7, 4)))) # Paint inner square
    return O 
 
0.12083333333333333, 37.785637, def ibhdfghceieeebfjadedhhgbcjfbbcdb(I):
    digit = int(str(I)[0]) if str(I)[0].isdigit() else 0
    top_square = canvas(4, (4, 4)) # Create a 4x4 grid of '4's for top square
    bottom_square = canvas(4, (4, 4)) # Create a 4x4 grid of '4's for bottom square
    inner_square = canvas(2 if digit == 7 else 1, (2, 2)) # Create inner square based on digit
    top_square = hconcat(hconcat(canvas(0, (4, 1)), top_square), canvas(0, (4, 5))) # Add padding to top square
    top_square = vconcat(vconcat(canvas(0, (1, 10)), top_square), canvas(0, (5, 10))) # Add padding to top square
    bottom_square = hconcat(hconcat(canvas(0, (4, 3)), bottom_square), canvas(0, (4, 3))) # Add padding to bottom square
    bottom_square = vconcat(vconcat(canvas(0, (6, 10)), bottom_square), canvas(0, (4, 10))) # Add padding to bottom square
    bottom_square = paint(bottom_square, recolor(2 if digit == 7 else 1, shift(box(asindices(canvas(0, (2, 2)))), (1, 1)))) # Paint inner square onto bottom square
    return vconcat(top_square, bottom_square) # Concatenate the squares vertically
 
0.355, 20.437082, def cdcidaiihgaeebjdjdabbcaccbdcdfch(I):
  d = index(I, (0, 0)) == 7  # Check input digit
  O = canvas(0, (10, 10))     # Create empty canvas
  # Large rectangle:
  O = paint(O, recolor(4, product(interval(1, 7 - d, 1), interval(1, 6 + d, 1))))
  # Small rectangle:
  O = paint(O, recolor(1 + d, product(interval(2, 4 + 2 * d, 1), interval(2, 5 + d, 1))))
  return O
 
0.39, 19.538538, def eabeeaceaccdeegfbjbececeeabibdff(I):
  d = index(I, (0, 0)) == 7  # Check input digit
  O = canvas(0, (10, 10))     # Create empty canvas
  # Large rectangle:
  lr = frozenset((i, j) for i in range(1, 7 - d) for j in range(1, 6 + d))
  # Small rectangle:
  sr = shift(frozenset((i, j) for i in range(2 + 2 * d) for j in range(3 + d)), (1, 1))
  O = paint(O, recolor(4, lr))
  O = paint(O, recolor(1 + d, sr))
  return O
 
0.4, 20.795784, def fbfeabiajajiehdejdbefaadbaeadaeb(I):
  digit = I[0][0]
  canvas_size = (10, 10)
  background_color = 0
  main_color = 4
  secondary_color = 1 if digit == 7 else 2
  canvas_ = canvas(background_color, canvas_size)
  
  if digit == 7:
    # "7" with offset and fill 
    canvas_ = fill(canvas_, main_color, {(i, j) for i in range(1, 5) for j in range(1, 7) if i + j <= 7})
    canvas_ = fill(canvas_, main_color, {(2, j) for j in range(2, 10)})
    canvas_ = fill(canvas_, main_color, {(3, j) for j in range(3, 10)})
    canvas_ = fill(canvas_, secondary_color, {(2, j) for j in range(3, 6)})
    canvas_ = fill(canvas_, secondary_color, {(3, j) for j in range(4, 6)})
  elif digit == 1:
    # "1" with offset and fill
    canvas_ = fill(canvas_, main_color, {(i, 6) for i in range(2, 8)}) 
    canvas_ = fill(canvas_, main_color, {(i, j) for i in range(3, 6) for j in range(7, 10)})
    canvas_ = fill(canvas_, secondary_color, {(i, j) for i in range(4, 6) for j in range(8, 10)})
  return canvas_
 
0.435, 24.48516, def efjedfaiifdeeghfigadgjehdiecggch(I):
  digit = I[0][0]
  canvas_size = (10, 10)
  background_color = 0
  main_color = 4
  secondary_color = 1 if digit == 7 else 2
  canvas_ = canvas(background_color, canvas_size)
  
  if digit == 7:
    # "7" with line drawing
    canvas_ = fill(canvas_, main_color, connect((1, 1), (4, 4))) # Diagonal line
    canvas_ = fill(canvas_, main_color, connect((1, 1), (1, 6))) # Vertical line
    canvas_ = fill(canvas_, main_color, {(2, j) for j in range(2, 10)}) # Horizontal lines
    canvas_ = fill(canvas_, main_color, {(3, j) for j in range(3, 10)})
    canvas_ = fill(canvas_, secondary_color, {(2, j) for j in range(3, 6)})
    canvas_ = fill(canvas_, secondary_color, {(3, j) for j in range(4, 6)})
  elif digit == 1:
    # "1" with line drawing
    canvas_ = fill(canvas_, main_color, connect((2, 6), (7, 6))) # Vertical line
    canvas_ = fill(canvas_, main_color, connect((3, 7), (5, 9))) # Diagonal line
    canvas_ = fill(canvas_, main_color, {(i, j) for i in range(3, 6) for j in range(7, 10)}) # Fill the rest
    canvas_ = fill(canvas_, secondary_color, {(i, j) for i in range(4, 6) for j in range(8, 10)})
  return canvas_
 
0.58, 16.66767, def cdfiaghaadejehajadeabgbbdcebddeh(I):
  O = canvas(0, (10, 10)) # Canvas of 0s

  # Shape 1 parameters based on input
  fill_value = 1 if I == 7 else 2
  shape_size = (5, 5) if I == 7 else (6, 6)
  shape_pos = (1, 1) if I == 7 else (0, 3)

  # Create and paint Shape 1
  shape_1 = canvas(4, shape_size)
  shape_1 = fill(shape_1, fill_value, product(interval(1, shape_size[1] - 1, 1), interval(1, shape_size[0] - 1, 1)))
  O = paint(O, shift(asobject(shape_1), shape_pos))

  # Create and paint Shape 2
  shape_2 = canvas(4, (5, 4))
  shape_2 = fill(shape_2, 2, product(interval(1, 3, 1), interval(1, 3, 1)))
  O = paint(O, shift(asobject(shape_2), (6 if I == 7 else 2, 4)))

  return O
 
0.52, 18.992884, def fcfabadfagjdeidabaddcacigdafffje(I):
  O = canvas(0, (10, 10)) # Canvas of 0s

  # Define shapes as objects
  shape_1 = frozenset({(4, (0, 0)), (4, (0, 1)), (4, (0, 2)), (4, (0, 3)), (4, (0, 4)), (4, (1, 0)), (1 if I == 7 else 2, (1, 1)), (1 if I == 7 else 2, (1, 2)), (1 if I == 7 else 2, (1, 3)), (4, (1, 4)), (4, (2, 0)), (1 if I == 7 else 2, (2, 1)), (1 if I == 7 else 2, (2, 2)), (1 if I == 7 else 2, (2, 3)), (4, (2, 4)), (4, (3, 0)), (1 if I == 7 else 2, (3, 1)), (1 if I == 7 else 2, (3, 2)), (1 if I == 7 else 2, (3, 3)), (4, (3, 4)), (4, (4, 0)), (4, (4, 1)), (4, (4, 2)), (4, (4, 3)), (4, (4, 4))})
  shape_2 = frozenset({(4, (0, 0)), (4, (0, 1)), (4, (0, 2)), (4, (0, 3)), (4, (1, 0)), (2, (1, 1)), (2, (1, 2)), (4, (1, 3)), (4, (2, 0)), (2, (2, 1)), (2, (2, 2)), (4, (2, 3)), (4, (3, 0)), (4, (3, 1)), (4, (3, 2)), (4, (3, 3))})

  # Position shapes based on input
  if I == 7:
    O = paint(O, shape_1)
    O = paint(O, shift(shape_2, (6, 4)))
  else:
    O = paint(O, shift(shape_1, (0, 3)))
    O = paint(O, shift(shape_2, (2, 4)))

  return O
 
0.565, 31.88125, def aadedecacfedegfdaabaacfchhbebfha(I):
  # Determine shape sizes based on input
  size_1 = 5 if I == 7 else 6
  size_2 = 4

  # Create and combine shapes using 'product'
  shape_1 = frozenset({(4, (i, j)) for i in range(size_1) for j in range(size_1)} | {(1 if I == 7 else 2, (i, j)) for i in range(1, size_1 - 1) for j in range(1, size_1 - 1)})
  shape_2 = frozenset({(4, (i, j)) for i in range(size_2) for j in range(size_2 - 1)} | {(2, (i, j)) for i in range(1, size_2 - 1) for j in range(1, size_2 - 2)})

  # Position and paint shapes onto the canvas
  O = canvas(0, (10, 10))
  O = paint(O, shift(shape_1, (1 if I == 7 else 0, 1 if I == 7 else 3)))
  O = paint(O, shift(shape_2, (6 if I == 7 else 2, 4)))
  return O
 
0.5549999999999999, 41.401188, def jggaacacjbjdeeegacccghafiehhfged(I):
  O = canvas(0, (10, 10)) # Canvas of 0s

  # Function to create a filled rectangle
  def filled_rect(size, fill_value, offset=(0, 0)):
    return frozenset({(4, (i + offset[0], j + offset[1])) for i in range(size[0]) for j in range(size[1])} | 
                   {(fill_value, (i + offset[0] + 1, j + offset[1] + 1)) for i in range(size[0] - 2) for j in range(size[1] - 2)})

  # Create shapes using 'filled_rect' function
  shape_1 = filled_rect((5 if I == 7 else 6, 5 if I == 7 else 6), 1 if I == 7 else 2, (1 if I == 7 else 0, 1 if I == 7 else 3))
  shape_2 = filled_rect((4, 4), 2, (6 if I == 7 else 2, 4))

  # Paint shapes onto the canvas
  O = paint(O, shape_1)
  O = paint(O, shape_2)

  return O
 
0.635, 25.15821, def ahdicbhfggcfebhcafgaghhcdcdeacha(I):
  d = index(I, (0, 0)) == 7
  O = canvas(0, (10, 10))
  lr = frozenset((i, j) for i in range(6) for j in range(5 + d))
  sr = frozenset((i, j) for i in range(2) for j in range(3))
  lr = shift(lr, (0, 5 * d)) 
  sr = shift(sr, (1 + d, 6 * d))
  O = paint(O, recolor(4, lr))
  O = paint(O, recolor(1 + d, sr))
  return O 
 
0.46, 32.2229, def gbbfieeeaacjefehbhhgchagdcbifabd(I):
  d = index(I, (0, 0)) == 7
  O = canvas(0, (10, 10))
  O = paint(O, recolor(4, {(i, j) for i in range(6) for j in range(5 + d)}))
  O = paint(O, recolor(1 + d, {(i + 1 + d, j + 6 * d) for i in range(2) for j in range(3)}))
  return O
 
0.64, 28.728758, def daaaeecaffjcedceadidbhaagebadgjc(I):
  d = index(I, (0, 0)) == 7
  O = canvas(0, (10, 10))
  O = paint(O, recolor(4, {(i, j) for i in range(6) for j in range(5 + d * 5)}))
  small_rect = {(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2)}
  small_rect = shift(small_rect, (1 + d, 1 + 5 * d))
  O = paint(O, recolor(1 + d, small_rect))
  return O
 
0.495, 19.176258, def hcbaeigfgifeecejigdibjaeafbefacg(I):
  O = canvas(0, (10, 10))
  x = index(I, (0, 0)) % 2 == 0
  O = paint(O, recolor(4, product(interval(1, 5 if x else 6, 1), interval(1, 10, 1))))
  O = paint(O, recolor(4, product(interval(7 if x else 8, 11, 1), interval(3 if x else 2, 8 if x else 7, 1))))
  O = paint(O, recolor(1, product(interval(3 if x else 7, 6 if x else 9, 1), interval(4, 7, 1))))
  return O
 
0.525, 15.295294, def ebhccedbcahfefehbadccbaaeegeigbj(I):
  O = canvas(0, (10, 10))
  offset = 1 if index(I, (0, 0)) % 2 == 0 else 0 
  O = paint(O, recolor(4, product(interval(1, 6 - offset, 1), interval(1, 10, 1))))
  O = paint(O, recolor(4, product(interval(7 + offset, 11, 1), interval(2 + offset, 7 + offset, 1))))
  O = paint(O, recolor(1, product(interval(3 + offset * 4, 6 + offset * 3, 1), interval(4, 7, 1))))
  return O
 
0.45, 30.139347, def eeejifdaechcejbgbfjcjccfideebehf(I):
  O = canvas(0, (10, 10))
  is_even = index(I, (0, 0)) % 2 == 0
  base_rect_top = recolor(4, product(interval(1, 5, 1), interval(1, 10, 1)))
  base_rect_bottom = recolor(4, product(interval(7, 11, 1), interval(3, 8, 1)))
  inner_rect = recolor(1, product(interval(3, 6, 1), interval(4, 7, 1)))
  O = paint(O, base_rect_top)
  O = paint(O, shift(base_rect_bottom, (0 if is_even else 1, 0 if is_even else -1)))
  O = paint(O, shift(inner_rect, (4 if is_even else 7, 0)))
  return O
 
0.49, 24.649605, def fefbbfdachbbeaeejcjccaficgfggbaa(I):
  O = canvas(0, (10, 10))
  is_even = index(I, (0, 0)) % 2 == 0
  top_rect = recolor(4, product(interval(1, 5 if is_even else 6, 1), interval(1, 10, 1)))
  bottom_rect = recolor(4, product(interval(7 if is_even else 8, 11, 1), interval(3 if is_even else 2, 8 if is_even else 7, 1)))
  inner_rect = recolor(1, product(interval(3, 6, 1), interval(4, 7, 1)))
  combined_obj = top_rect | bottom_rect | shift(inner_rect, (4 if is_even else 7, 0))
  O = paint(O, combined_obj)
  return O
 
0.495, 30.023329, def djccehaeajaeeaccihhccaadcebeeghh(I):
    fill_value = 1 if I == 7 else 2
    shape_1_pos = (1, 1) if I == 7 else (0, 3)
    shape_2_pos = (6, 4) if I == 7 else (2, 4)

    O = canvas(0, (10, 10))
    O = paint(O, shift(recolor(4, asobject(canvas(0, (5, 5)))), shape_1_pos))
    O = fill(O, fill_value, shift(product(interval(2, 4, 1), interval(2, 4, 1)), shape_1_pos))
    O = paint(O, shift(recolor(4, asobject(canvas(0, (4, 3)))), shape_2_pos))
    O = fill(O, 2 if I == 7 else 1, shift(product(interval(1, 3, 1), interval(1, 2, 1)), shape_2_pos))
    return O
 
0.51, 20.548763, def bdeaacjcfcieehehacdbbaedcbihecgh(I):
    fill_value = 1 if I == 7 else 2
    shape_1_pos = (1, 1) if I == 7 else (0, 3)
    shape_2_pos = (6, 4) if I == 7 else (2, 4)

    O = canvas(0, (10, 10))
    shape_1 = fill(canvas(4, (5, 5)), fill_value, product(interval(1, 4, 1), interval(1, 4, 1)))
    shape_2 = fill(canvas(4, (4, 3)), 2 if I == 7 else 1, product(interval(1, 3, 1), interval(1, 2, 1)))
    O = paint(O, shift(asobject(shape_1), shape_1_pos))
    O = paint(O, shift(asobject(shape_2), shape_2_pos))
    return O
 
0.42000000000000004, 60.426952, def jeddbbfgcjdiefeaadfeiacagehebcaf(I):
    fill_value = 1 if I == 7 else 2
    shape_1_pos = (1, 1) if I == 7 else (0, 3)
    shape_2_pos = (6, 4) if I == 7 else (2, 4)

    O = canvas(4, (10, 10))
    O = fill(O, 0, product(interval(0, 10, 1), interval(0, 10, 1)))
    O = fill(O, fill_value, shift(product(interval(2, 4, 1), interval(2, 4, 1)), shape_1_pos))
    O = fill(O, 2 if I == 7 else 1, shift(product(interval(1, 3, 1), interval(1, 2, 1)), shape_2_pos))
    return O
 
0.435, 45.28441, def fbhcibaffjffeibfaffbbejageacbfda(I):
  digit = int(str(I)[0]) if str(I)[0].isdigit() else 0
  inner_fill = 2 if digit == 7 else 1

  # Top square (always 4x4)
  top_square = canvas(0, (10, 10))
  top_square = fill(top_square, 4, box(asindices(crop(top_square, (1, 1), (4, 4)))))
  top_square = fill(top_square, inner_fill, asindices(crop(top_square, (2, 2), (2, 2))))

  # Bottom square (size depends on digit)
  bottom_width = 6 if digit == 7 else 4
  bottom_height = 4 if digit == 7 else 6
  bottom_square = canvas(0, (10, 10))
  bottom_square = fill(bottom_square, 4, box(asindices(crop(bottom_square, (6, 2), (bottom_height, bottom_width)))))
  bottom_square = fill(bottom_square, inner_fill, asindices(crop(bottom_square, (7, 3), (2, 2))))

  return cellwise(top_square, bottom_square, 0) 
 
0.36, 21.524805, def gccbbddaejiaeegebgbahdcabbjaehdf(I):
  digit = int(str(I)[0]) if str(I)[0].isdigit() else 0
  inner_fill = 2 if digit == 7 else 1

  O = canvas(0, (10, 10))

  # Top Square 
  square = canvas(4, (4, 4))
  O = paint(O, shift(asobject(square), (1, 1)))

  # Bottom Square
  bottom_width = 6 if digit == 7 else 4
  bottom_height = 4 if digit == 7 else 6
  square = canvas(4, (bottom_height, bottom_width))
  O = paint(O, shift(asobject(square), (6, 2)))

  # Inner Fills
  O = fill(O, inner_fill, asindices(crop(O, (2, 2), (2, 2))))
  O = fill(O, inner_fill, asindices(crop(O, (7, 3), (2, 2))))

  return O
 
0.435, 20.673143, def efhgfccaiahdeifdbacbijcgbcbgffcf(I):
  digit = int(str(I)[0]) if str(I)[0].isdigit() else 0
  inner_fill = 2 if digit == 7 else 1

  top_template = ((4, 4, 4, 4), 
                  (4, 1, 1, 4),
                  (4, 1, 1, 4),
                  (4, 4, 4, 4))

  bottom_template_7 = ((4, 4, 4, 4, 4, 4),
                      (4, 2, 2, 2, 2, 4),
                      (4, 2, 2, 2, 2, 4),
                      (4, 4, 4, 4, 4, 4))

  bottom_template_other = ((4, 4, 4, 4, 4, 4),
                           (4, 1, 1, 1, 1, 4),
                           (4, 1, 1, 1, 1, 4),
                           (4, 1, 1, 1, 1, 4),
                           (4, 1, 1, 1, 1, 4),
                           (4, 4, 4, 4, 4, 4))

  O = canvas(0, (10, 10))
  O = paint(O, shift(asobject(top_template), (1, 1)))

  if digit == 7:
    O = paint(O, shift(asobject(bottom_template_7), (6, 2)))
  else:
    O = paint(O, shift(asobject(bottom_template_other), (2, 2)))

  return O
 
0.37, 9.843318, def cgfcdfbadjbaechfbeabadbcebcjbhig(I):
  digit = int(str(I)[0]) if str(I)[0].isdigit() else 0
  inner_fill = 2 if digit == 7 else 1

  O = canvas(0, (10, 10))
  
  # Top Square
  square = canvas(4, (4, 4))
  O = paint(O, shift(asobject(square), (1, 1)))
  O = fill(O, inner_fill, asindices(crop(O, (2, 2), (2, 2))))

  # Bottom Square
  base_square = canvas(4, (2, 6 if digit == 7 else 3))
  base_square = fill(base_square, inner_fill, asindices(crop(base_square, (0, 1), (2, 2))))
  mirrored_square = hmirror(base_square)
  bottom_square = hconcat(base_square, mirrored_square)
  O = paint(O, shift(asobject(bottom_square), (6, 2)))

  return O 
 
0.495, 32.334, def befajcbbcddheddhjbdcffbacahjheaf(I):
  d = index(I, (0, 0)) == 7
  O = canvas(0, (10, 10))
  lr = canvas(4, (6, 5 + d))
  sr = canvas(1 + d, (2, 3))
  O = paint(O, shift(asobject(lr), (3, d * 5)))
  O = paint(O, shift(asobject(sr), (4 - d, 1 + 5 * d)))
  return O
 
0.445, 24.018394, def eajhadedddefehejaebdagbdhfgiegeg(I):
  d = index(I, (0, 0)) == 7
  O = canvas(0, (10, 10))
  lr = {(i, j) for i in range(6) for j in range(5)}
  sr = {(i, j) for i in range(2) for j in range(3)}
  O = paint(O, recolor(4, shift(lr, (3, lrcorner(lr)[1] * d))))
  O = paint(O, recolor(1 + d, shift(sr, (4 - d, 1 + lrcorner(lr)[1] * d))))
  return O
 
0.42, 23.542515, def edaefbgedbdgeeedidgbbbcceccebfcj(I):
  digit = I[0][0]
  O = canvas(0, (10, 10))
  main_color = 4
  secondary_color = 1 if digit == 7 else 2 

  if digit == 7:
    O = paint(O, recolor(main_color, connect((1, 1), (1, 4)))) # Vertical line
    O = paint(O, recolor(main_color, connect((1, 1), (4, 4)))) # Diagonal line
    O = fill(O, main_color, {(2, j) for j in range(2, 10)}) # Horizontal lines
    O = fill(O, main_color, {(3, j) for j in range(3, 10)}) 
    O = fill(O, secondary_color, {(i, j) for i in range(2, 4) for j in range(3, min(6, 9))})
  elif digit == 1:
    O = paint(O, recolor(main_color, connect((2, 6), (8, 6)))) # Vertical line
    O = paint(O, recolor(main_color, connect((3, 7), (5, 9)))) # Diagonal line
    O = fill(O, main_color, {(i, j) for i in range(3, 6) for j in range(7, 10)}) # Fill the rest
    O = fill(O, secondary_color, {(4, 8), (4, 9), (5, 8), (5, 9)})
  return O
 
0.385, 38.372406, def becaddgabcbhefaeigiaejbdaegeeffa(I):
  digit = I[0][0]
  O = canvas(0, (10, 10))
  main_color = 4
  secondary_color = 1 if digit == 7 else 2

  if digit == 7:
    base_segment = asobject(canvas(main_color, (1, 4)))
    seven = base_segment
    for i in range(1, 4):
      seven = seven.union(shift(base_segment, (i, i)))
    O = paint(O, seven)
    O = fill(O, secondary_color, {(2, 2), (2, 3), (3, 4), (3, 5)})
  elif digit == 1:
    body = asobject(shift(canvas(main_color, (6, 1)), (1, 6)))
    base = asobject(canvas(main_color, (3, 3)))
    O = paint(O, body)
    O = paint(O, shift(base, (2, 6)))
    O = paint(O, shift(base, (3, 6)))
    O = fill(O, secondary_color, {(i, j) for i in range(4, 6) for j in range(8, 10)})
  return O
 
0.425, 24.207178, def djbceagfgaaceecabbeffbjajcefefdj(I):
  digit = I[0][0]
  O = canvas(0,(10,10))
  if digit == 7:
    O = paint(O, recolor(4, connect((1, 1), (1, 4))))
    O = paint(O, recolor(4, connect((1, 1), (4, 4))))
    O = fill(O, 4, {(2, i) for i in range(2, 10)})
    O = fill(O, 4, {(3, i) for i in range(3, 10)})
    O = fill(O, 1, {(2, i) for i in range(3, 6)})
    O = fill(O, 1, {(3, i) for i in range(4, 6)})
  elif digit == 1:
    O = paint(O, recolor(4, connect((2, 6), (8, 6))))
    O = paint(O, recolor(4, {(3, 7), (4, 8), (5, 9)}))
    O = fill(O, 4, {(i, j) for i in range(3, 6) for j in range(7, 10)})
    O = fill(O, 2, {(i, j) for i in range(4, 6) for j in range(8, 10)}) 
  return O
 
0.37, 25.315496, def cccddgajcihbeacdabfjhacfaeagafca(I):
  # Create a 10x10 canvas filled with 0s
  O = canvas(0, (10, 10)) 
  # Fill the top rectangle (1-5,1-5) with '4'
  O = fill(O, 4, product(interval(1,6,1), interval(1,6,1)))
  # Fill the bottom rectangle (6-10,1-5) with '4'
  O = fill(O, 4, product(interval(6,11,1), interval(1,6,1)))
  # Replace the central 3x3 area in the bottom rectangle with '2'
  O = fill(O, 2, product(interval(7,10,1), interval(2,5,1)))
  # Replace the center cell with '1'
  O = fill(O, 1, {(8,3)})
  return O
 
0.36, 35.51639, def gdbigifbjbajeacabfadijedbeadgcfi(I):
  # Create the top rectangle object
  top_rect = recolor(4, product(interval(1,6,1), interval(1,6,1)))
  # Create the bottom rectangle object
  bottom_rect = recolor(4, product(interval(6,11,1), interval(1,6,1)))
  # Create the central 3x3 area object 
  inner_rect = recolor(2, product(interval(7,10,1), interval(2,5,1)))
  # Create the center cell object
  center_cell = recolor(1, {(8,3)})
  # Merge all objects and paint them on a blank canvas
  O = paint(canvas(0, (10,10)), top_rect | bottom_rect | inner_rect | center_cell)
  return O
 
0.36, 28.548185, def eagfjjeafdcjegdhibhcjacdabjgfdba(I):
  # Create a base rectangle object
  base_rect = recolor(4, product(interval(1,6,1), interval(1,6,1)))
  # Create the inner 3x3 object
  inner_rect = recolor(2, product(interval(1,4,1), interval(1,4,1)))
  # Create the center cell object
  center_cell = recolor(1, {(2,2)})
  # Shift the base rectangle downwards to create the bottom rectangle
  bottom_rect = shift(base_rect, (5,0))
  # Merge and paint the objects, the bottom rectangle will overlap the inner ones
  O = paint(canvas(0, (10,10)), base_rect | bottom_rect | inner_rect | center_cell)
  return O 
 
0.44, 23.728317, def jdijehjahcijeefbabdcdfdabddcefdh(I):
  # Create a quarter of the final pattern
  quarter_grid = canvas(0, (5,5))
  quarter_grid = fill(quarter_grid, 4, product(interval(1,5,1), interval(1,5,1)))
  quarter_grid = fill(quarter_grid, 2, product(interval(2,4,1), interval(2,4,1)))
  quarter_grid = fill(quarter_grid, 1, {(3,3)})
  # Mirror the quarter horizontally 
  half_grid = hconcat(quarter_grid, hmirror(quarter_grid))
  # Mirror the half vertically to create the full pattern
  O = vconcat(half_grid, vmirror(half_grid))
  return O
 
0.52, 21.429699, def dgiaieagjgadegicbagfccfeadgbabjh(I):
  O = canvas(0, (10, 10))
  fill_1 = 1 if I == 7 else 2
  fill_2 = 2 if I == 7 else 1
  shape_1_pos = (1, 1) if I == 7 else (0, 3)
  shape_2_pos = (6, 4) if I == 7 else (2, 4)
  O = fill(fill(fill(O, 4, product(interval(1 + shape_1_pos[0], 6 + shape_1_pos[0], 1), interval(1 + shape_1_pos[1], 6 + shape_1_pos[1], 1))), 
                  fill_1, product(interval(2 + shape_1_pos[0], 5 + shape_1_pos[0], 1), interval(2 + shape_1_pos[1], 5 + shape_1_pos[1], 1))),
                  4, product(interval(shape_2_pos[0], 4 + shape_2_pos[0], 1), interval(shape_2_pos[1], 3 + shape_2_pos[1], 1)))
  return fill(O, fill_2, product(interval(1 + shape_2_pos[0], 3 + shape_2_pos[0], 1), interval(1 + shape_2_pos[1], 2 + shape_2_pos[1], 1)))
 
0.415, 22.222443, def deijegcccbjfecacbfaicbbehbdceaif(I):
    digit = int(str(I)[0]) if str(I)[0].isdigit() else 0
    O = canvas(0, (10, 10))
    O = paint(O, recolor(4, shift(box(asindices(canvas(0, (4, 4)))), (1, 1))))  # Top Square Border
    O = paint(O, recolor(1, shift(box(asindices(canvas(0, (2, 2)))), (2, 2))))  # Top Square Filling
    bottom_inner_color = 2 if digit == 7 else 1  # Determine bottom filling
    O = paint(O, recolor(4, shift(box(asindices(canvas(0, (6, 6)))), (2, 2))))  # Bottom Square Border
    O = paint(O, recolor(bottom_inner_color, shift(box(asindices(canvas(0, (4, 4)))), (3, 3))))  # Bottom Square Filling
    return O
 
0.435, 23.03611, def bjaebgjehhbaeebdadicccdabhdecafj(I):
    digit = int(str(I)[0]) if str(I)[0].isdigit() else 0
    O = canvas(0,(10,10))
    top_square =  shift(box(asindices(canvas(0,(4,4)))),(1,1)) 
    bottom_square = shift(box(asindices(canvas(0,(6,6)))),(2,2))
    O = paint(O, recolor(4, top_square))
    O = paint(O, recolor(1, shift(top_square, (1,1)))) # reuse top square dimensions for inner filling
    O = paint(O, recolor(4, bottom_square))
    O = paint(O, recolor(2 if digit == 7 else 1, shift(bottom_square,(1,1)))) # reuse bottom square dimensions
    return O
 
0.73, 17.234398, def ebdhcdfegcdbeceajbhaicgaecbfadfb(I):
  digit = int(str(I)[0]) if str(I)[0].isdigit() else 0
  O = canvas(4, (10, 10)) # Start with a canvas filled with '4'
  O = paint(O, recolor(0, shift(box(asindices(canvas(0, (8, 8)))), (1, 1)))) # Clear inner area
  O = paint(O, recolor(1, shift(box(asindices(canvas(0, (2, 2)))), (2, 2)))) # Top Square Filling
  O = paint(O, recolor(2 if digit == 7 else 1, shift(box(asindices(canvas(0, (4, 4)))), (3, 3)))) # Bottom Square Filling
  return O
 
0.495, 20.915644, def djecbggfbidaefefiggcdbechedddeic(I):
  digit = int(str(I)[0]) if str(I)[0].isdigit() else 0
  O = canvas(0, (10, 10))
  for i in range(1, 9):
    for j in range(1, 9):
      if (1 <= i <= 4 or 6 <= i <= 9) and (1 <= j <= 4 or 6 <= j <= 9):
        O = paint(O, {(4, (i, j))}) # Paint outer borders
      if 2 <= i <= 3 and 2 <= j <= 3:
        O = paint(O, {(1, (i, j))}) # Top Square Filling
      if 3 <= i <= 6 and 3 <= j <= 6 and (digit == 7 or i != 4 or j != 4): 
        O = paint(O, {((2 if digit == 7 else 1), (i, j))}) # Bottom Square Filling
  return O
 
0.47, 18.99678, def efhbbcebajgfeghgaadccfijaebecdba(I):
  d = index(I, (0, 0)) == 7
  O = canvas(0, (10, 10))
  O = paint(O, recolor(4, frozenset((i, j) for i in range(1 + 2 * d, 7 + d) for j in range(1, 6 + d)))) # Large rectangle
  O = paint(O, recolor(1 + d, frozenset((i, j) for i in range(4 - d, 6 + d) for j in range(2 + 3 * d, 5 + 2 * d)))) # Small rectangle
  O = paint(O, recolor(4, frozenset((i, j) for i in range(6 - 3 * d, 10 - 3 * d) for j in range(d * 5, 4 + d * 5)))) # Bottom/Right rectangle
  O = paint(O, recolor(2 - d, frozenset((i, j) for i in range(7 - 3 * d, 9 - 3 * d) for j in range(1 + 5 * d, 3 + 5 * d)))) # Smallest rectangle
  return O
 
0.525, 17.708626, def dcbegcabaccgeiaijjjjjcjdfffehifc(I):
  d = index(I, (0, 0)) == 7
  O = canvas(0, (10, 10))
  large_rect =  frozenset((i, j) for i in range(1 + 2 * d, 7 + d) for j in range(1, 6 + d))
  small_rect = shift(frozenset((i, j) for i in range(2 + 2 * d) for j in range(3 - d)), (3 - d, 2 + 3 * d))
  bottom_right_rect = shift(frozenset((i, j) for i in range(4) for j in range(6 - d)), (6 - 3 * d, d * 5))
  smallest_rect = shift(frozenset((i, j) for i in range(2) for j in range(2)), (7 - 3 * d, 1 + 5 * d))
  O = paint(O, recolor(4, large_rect))
  O = paint(O, recolor(1 + d, small_rect))
  O = paint(O, recolor(4, bottom_right_rect))
  O = paint(O, recolor(2 - d, smallest_rect))
  return O
 
0.255, 16.491352, def ehbcbeggcfeceihibbfefaehgfgbfhgh(I):
  digit = I[0][0]
  O = canvas(0, (10, 10))
  main_color = 4
  secondary_color = 1 if digit == 7 else 2

  if digit == 7:
    O = fill(O, main_color, {(i, j) for i in range(1, 5) for j in range(1, 5) if i + j <= 6})
    O = fill(O, main_color, {(2, j) for j in range(1, 5)})
    O = fill(O, main_color, {(3, j) for j in range(1, 5)})
    O = fill(O, main_color, {(i, j) for i in range(6, 10) for j in range(3, 7)})
    O = fill(O, secondary_color, {(2, j) for j in range(2, 4)})
    O = fill(O, secondary_color, {(3, j) for j in range(2, 4)})
  elif digit == 1:
    O = fill(O, main_color, {(i, 6) for i in range(1, 7)})
    O = fill(O, main_color, {(i, j) for i in range(2, 5) for j in range(7, 10)})
    O = fill(O, secondary_color, {(i, j) for i in range(3, 5) for j in range(8, 10)})
  return O
 
0.305, 22.486376, def dafefjbhgfbjecfciebejbifheigabfc(I):
  digit = I[0][0]
  O = canvas(0, (10, 10))
  main_color = 4
  secondary_color = 1 if digit == 7 else 2
  
  if digit == 7:
    O = paint(O, recolor(main_color, connect((1, 1), (1, 4))))
    O = paint(O, recolor(main_color, connect((1, 1), (4, 4))))
    O = fill(O, main_color, {(i, j) for i in range(6, 10) for j in range(3, 7)})
    O = fill(O, secondary_color, {(2, 2), (2, 3), (3, 2), (3, 3), (7, 4), (7, 5), (8, 4), (8, 5)})
  elif digit == 1:
    O = paint(O, recolor(main_color, connect((1, 6), (7, 6))))
    O = paint(O, recolor(main_color, connect((2, 7), (4, 9))))
    O = paint(O, recolor(main_color, connect((3, 7), (5, 9))))
    O = fill(O, secondary_color, {(i, j) for i in range(3, 5) for j in range(8, 10)})
  return O
 
0.275, 15.012523, def ceadbfaaabjgeedeabaffebceiaghgcg(I):
  digit = I[0][0]
  O = canvas(0, (10, 10))
  main_color = 4
  secondary_color = 1 if digit == 7 else 2
  
  if digit == 7:
    base_patch =  {(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 1), (1, 2), (1, 3), (2, 0), (2, 1), (3, 0), (3, 1)}
    seven = recolor(main_color, base_patch)
    seven = combine(seven, shift(seven, (5, 3)))
    O = paint(O, shift(seven, (1, 1)))
    O = fill(O, secondary_color, {(2, 2), (2, 3), (3, 2), (3, 3), (7, 4), (7, 5), (8, 4), (8, 5)})
  elif digit == 1:
    base_patch = {(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)}
    one_body = recolor(main_color, base_patch)
    one_body = combine(one_body, shift(one_body, (0, 6)))
    one_flag = recolor(main_color, {(0, 0), (0, 1), (1, 0), (1, 1)})
    O = paint(O, one_body)
    O = paint(O, shift(one_flag, (2, 7)))
    O = paint(O, shift(one_flag, (3, 7)))
    O = fill(O, secondary_color, {(i, j) for i in range(3, 5) for j in range(8, 10)})
  return O
 
0.245, 18.80463, def aaageaaadjjeecdfijhfbbheahdhcbai(I):
  O = canvas(0, (10, 10))
  fill_1 = 1 if I == 7 else 2
  fill_2 = 2 if I == 7 else 1
  shape_1 = frozenset({
    (4, (0, 0)), (4, (0, 1)), (4, (0, 2)), (4, (0, 3)), (4, (0, 4)),
    (4, (4, 0)), (4, (4, 1)), (4, (4, 2)), (4, (4, 3)), (4, (4, 4)),
    (4, (1, 0)), (4, (2, 0)), (4, (3, 0)), 
    (4, (1, 4)), (4, (2, 4)), (4, (3, 4)),
    (fill_1, (1, 1)), (fill_1, (1, 2)), (fill_1, (1, 3)), 
    (fill_1, (2, 1)), (fill_1, (2, 2)), (fill_1, (2, 3)), 
    (fill_1, (3, 1)), (fill_1, (3, 2)), (fill_1, (3, 3))
  })
  shape_2 = frozenset({
    (4, (0, 0)), (4, (0, 1)), (4, (0, 2)), (4, (0, 3)),
    (4, (1, 0)), (4, (2, 0)), (4, (3, 0)),
    (fill_2, (1, 1)), (fill_2, (1, 2)), (fill_2, (2, 1)), (fill_2, (2, 2))
  })
  if I == 7:
    O = paint(O, shift(shape_1, (1, 1)))
    O = paint(O, shift(shape_2, (6, 4)))
  else:
    O = paint(O, shift(shape_1, (6, 4)))
    O = paint(O, shift(shape_2, (1, 1)))
  return O
 
0.19999999999999998, 13.797975, def hifbdbegifdaecadicjbbjifcdhfdbcd(I):
  O = canvas(0, (10, 10))
  fill_1 = 1 if I == 7 else 2
  fill_2 = 2 if I == 7 else 1
  square_1 = frozenset(product(interval(0, 5, 1), interval(0, 5, 1)))
  cross_1 = frozenset(product(interval(1, 4, 1), interval(1, 4, 1))) - frozenset({(2, 2)})
  shape_1 = recolor(4, square_1) | recolor(fill_1, cross_1)
  rect_2 = frozenset(product(interval(0, 4, 1), interval(0, 4, 1)))
  line_2 = frozenset(product(interval(1, 3, 1), interval(1, 3, 1)))
  shape_2 = recolor(4, rect_2) | recolor(fill_2, line_2)
  if I == 7:
    O = paint(O, shift(shape_1, (1, 1)))
    O = paint(O, shift(shape_2, (6, 4)))
  else:
    O = paint(O, shift(shape_1, (6, 4)))
    O = paint(O, shift(shape_2, (1, 1)))
  return O
 
0.21999999999999997, 8.846575, def digcaaidjhfiedeijbifagcaaefeifai(I):
  O = canvas(0, (10, 10))
  fill_1 = 1 if I == 7 else 2
  fill_2 = 2 if I == 7 else 1
  if I == 7:
    O = fill(O, 4, frozenset(product(interval(1, 6, 1), interval(1, 6, 1))))
    O = fill(O, fill_1, frozenset(product(interval(2, 5, 1), interval(2, 5, 1))))
    O = fill(O, 4, frozenset(product(interval(6, 10, 1), interval(4, 8, 1))))
    O = fill(O, fill_2, frozenset(product(interval(7, 9, 1), interval(5, 7, 1))))
  else:
    O = fill(O, 4, frozenset(product(interval(6, 11, 1), interval(4, 9, 1))))
    O = fill(O, fill_1, frozenset(product(interval(7, 10, 1), interval(5, 8, 1))))
    O = fill(O, 4, frozenset(product(interval(1, 5, 1), interval(1, 5, 1))))
    O = fill(O, fill_2, frozenset(product(interval(2, 4, 1), interval(2, 4, 1))))
  return O
 
0.22499999999999998, 10.900219, def fcidfcefhfgeeebcjhcebebhifacaeef(I):
  O = canvas(0, (10, 10))
  fill_1 = 1 if I == 7 else 2
  fill_2 = 2 if I == 7 else 1
  square = asobject(canvas(4, (5, 5)))
  cross = asobject(canvas(fill_1, (3, 3))) - {(fill_1, (1, 1))}
  rect = asobject(canvas(4, (4, 4)))
  line = asobject(canvas(fill_2, (2, 2)))
  if I == 7:
    O = paint(O, shift(square, (1, 1)))
    O = paint(O, shift(cross, (2, 2)))
    O = paint(O, shift(rect, (6, 4)))
    O = paint(O, shift(line, (7, 5)))
  else:
    O = paint(O, shift(square, (6, 4)))
    O = paint(O, shift(cross, (7, 5)))
    O = paint(O, shift(rect, (1, 1)))
    O = paint(O, shift(line, (2, 2)))
  return O
 
0.475, 24.13042, def gdabifeddibieeehigbebaegdgggddbh(I):
  digit = int(str(I)[0]) if str(I)[0].isdigit() else 0  
  O = canvas(0, (10, 10))
  
  # Determine square sizes and positions based on digit
  top_size = (4, 4) if digit == 7 else (6, 6)
  bottom_size = (6, 4) if digit == 7 else (4, 4)
  bottom_pos = (6, 2) if digit == 7 else (7, 3) 

  # Top Square 
  O = fill(O, 4, box(asindices(crop(O, (1, 1), top_size))))

  # Bottom Square
  O = fill(O, 4, box(asindices(crop(O, bottom_pos, bottom_size))))

  # Inner Fills
  top_fill = 1 if digit == 7 else 2
  bottom_fill = 2 if digit == 7 else 1
  O = fill(O, top_fill, asindices(crop(O, (2, 2), (2, 2))))
  O = fill(O, bottom_fill, asindices(crop(O, (bottom_pos[0] + 1, bottom_pos[1] + 1), (2, 2))))
  return O
 
0.375, 38.302578, def caabfcahebigedbcibfedigdffcifada(I):
  digit = int(str(I)[0]) if str(I)[0].isdigit() else 0
  O = canvas(0, (10, 10))

  # Define square templates
  top_square_7 = canvas(4, (4, 4))
  top_square_other = canvas(4, (6, 6))
  bottom_square_7 = canvas(4, (6, 4))
  bottom_square_other = canvas(4, (4, 4))

  # Select and position squares based on digit
  top_square = top_square_7 if digit == 7 else top_square_other
  bottom_square = bottom_square_7 if digit == 7 else bottom_square_other
  bottom_offset = (6, 2) if digit == 7 else (7, 3)

  O = paint(O, shift(asobject(top_square), (1, 1)))
  O = paint(O, shift(asobject(bottom_square), bottom_offset))

  # Inner Fills
  top_fill = 1 if digit == 7 else 2
  bottom_fill = 2 if digit == 7 else 1
  O = fill(O, top_fill, asindices(crop(O, (2, 2), (2, 2))))
  O = fill(O, bottom_fill, asindices(crop(O, (bottom_offset[0] + 1, bottom_offset[1] + 1), (2, 2))))
  return O
 
0.305, 21.267313, def cdcddfibejhfeadgabacffcghgjbdebc(I):
  digit = int(str(I)[0]) if str(I)[0].isdigit() else 0
  O = canvas(0, (10, 10))

  # Define small square and offsets
  small_square = canvas(4, (4, 4))
  top_offset = (1, 1)
  bottom_offset = (6, 2) if digit == 7 else (7, 3)

  # Paint top square
  O = paint(O, shift(asobject(small_square), top_offset))

  # Paint bottom square based on digit
  if digit == 7:
    O = paint(O, shift(asobject(hconcat(small_square, canvas(4, (2, 4)))), bottom_offset))
  else:
    O = paint(O, shift(asobject(vconcat(small_square, canvas(4, (4, 2)))), bottom_offset))

  # Inner Fills
  top_fill = 1 if digit == 7 else 2
  bottom_fill = 2 if digit == 7 else 1
  O = fill(O, top_fill, asindices(crop(O, (2, 2), (2, 2))))
  O = fill(O, bottom_fill, asindices(crop(O, (bottom_offset[0] + 1, bottom_offset[1] + 1), (2, 2))))
  return O
 
0.365, 20.655008, def cdhbefbheaibeeedibdfeabhdedhdggb(I):
  digit = int(str(I)[0]) if str(I)[0].isdigit() else 0
  O = canvas(0, (10, 10))

  # Define common elements
  square_outline = canvas(4, (4, 4))
  inner_fill_pos = (2, 2) 

  # Conditional positioning and painting
  if digit == 7:
    O = paint(O, shift(asobject(square_outline), (1, 1))) # Top square
    O = paint(O, shift(asobject(hconcat(square_outline, canvas(4, (2, 4)))), (6, 2))) # Bottom square
    O = fill(O, 1, asindices(crop(O, inner_fill_pos, (2, 2)))) # Top fill
    O = fill(O, 2, asindices(crop(O, (7, 3), (2, 2)))) # Bottom fill
  else:
    O = paint(O, shift(asobject(vconcat(square_outline, canvas(4, (4, 2)))), (1, 1))) # Top square
    O = paint(O, shift(asobject(square_outline), (7, 3))) # Bottom square
    O = fill(O, 2, asindices(crop(O, inner_fill_pos, (2, 2)))) # Top fill
    O = fill(O, 1, asindices(crop(O, (8, 4), (2, 2)))) # Bottom fill 

  return O
 
0.48, 15.26222, def afdahefhaffjehciabcdabefaacdabfj(I):
  d = index(I, (0, 0)) == 7  # Check input digit
  O = canvas(0, (10, 10))  # Create empty canvas
  
  # Large Rectangle
  large_rect = canvas(4, (6, 5 + d))  
  O = paint(O, shift(asobject(large_rect), (1 + 2 * d, 2)))  
  
  # Small Rectangle
  small_rect = canvas(1 + d, (2, 3 - d))  
  offset = (2, 4) if d else (3, 3)  
  O = paint(O, shift(asobject(small_rect), offset))  
  
  # Tiny Rectangles
  tiny_rect = canvas(2 - d, (2, 2))
  for i in range(1 + d):
    O = paint(O, shift(asobject(tiny_rect), (7 - 3 * d, 2 + 3 * i)))
  
  return O
 
0.47, 17.804028, def dafffdfafedaeijibhiaadehadecjjea(I):
  d = index(I, (0, 0)) == 7
  O = canvas(0, (10, 10))
  
  # Large Rectangle
  O = paint(O, recolor(4, frozenset((i, j) for i in range(1 + 2 * d, 7 + d) for j in range(2, 7 + d))))
  
  # Small Rectangle
  small_rect_color = 1 + d
  small_rect_start = (2, 4) if d else (3, 3)
  O = paint(O, recolor(small_rect_color, frozenset((i, j) for i in range(small_rect_start[0], small_rect_start[0] + 2) for j in range(small_rect_start[1], small_rect_start[1] + 3 - d))))
  
  # Tiny Rectangle(s)
  tiny_rect_start = (7 - 3 * d, 2)
  for i in range(1 + d):
    O = paint(O, recolor(2 - d, frozenset((tiny_rect_start[0] + k, tiny_rect_start[1] + 3 * i + l) for k in range(2) for l in range(2))))  
  return O
 
0.49, 13.322608, def hedcdaejeiadeffdbfgfbhggebbafhhd(I):
  d = index(I, (0, 0)) == 7
  O = canvas(0, (10, 10))
  
  # Large Rectangle
  O = paint(O, recolor(4, shift(asobject(canvas(1, (6, 5 + d))), (1 + 2 * d, 2)))) 
  
  # Small Rectangle
  O = paint(O, recolor(1 + d, shift(asobject(canvas(1, (2 + 2 * d, 3 - d))), (4 - d, 2 + 3 * d)))) 
  
  # Tiny Rectangle(s)
  O = paint(O, recolor(2 - d, shift(asobject(canvas(1, (2, 2))), (7 - 3 * d, 2 + 3 * d * (1 - d)))))
  if d:
    O = paint(O, recolor(2 - d, shift(asobject(canvas(1, (2, 2))), (7 - 3 * d, 8 - 3 * d)))) 
  
  return O
 
0.47, 13.848182, def chhhahbihfafefdiaacbdaaacbabfdid(I):
  d = index(I, (0, 0)) == 7
  O = canvas(0, (10, 10))
  
  # Large Rectangle (using sets)
  O = paint(O, recolor(4, frozenset((i, j) for i in range(1 + 2 * d, 7 + d) for j in range(2, 7 + d))))
  
  # Small Rectangle (using canvas and shift)
  O = paint(O, recolor(1 + d, shift(asobject(canvas(1, (2 + 2 * d, 3 - d))), (4 - d, 2 + 3 * d))))
  
  # Tiny Rectangle(s) (conditional loop with direct painting)
  for i in range(2 - d):
    for j in range(2):
      O = paint(O, recolor(2 - d, frozenset({(7 - 3 * d + j, 2 + 3 * d * i)})))
  return O
 
0.385, 16.739452, def ebaaedcdacbbebbcjfdjebcaffabffhc(I):
    digit = I[0][0]
    O = canvas(0, (10, 10))
    main_color = 4
    secondary_color = 1 if digit == 7 else 2
  
    if digit == 7:
        O = paint(O, recolor(main_color, connect((1,1),(4,4))))
        O = paint(O, recolor(main_color, connect((1,4),(1,9))))
        O = paint(O, recolor(main_color, connect((4,1),(4,4))))
        O = paint(O, recolor(main_color, connect((6,1),(9,4))))
        O = paint(O, recolor(main_color, connect((6,4),(9,7))))
        O = paint(O, recolor(main_color, connect((9,1),(9,7))))
        O = fill(O, secondary_color,  {(2, 2), (2, 3), (3, 2), (3, 3), (7, 2), (7, 3), (8, 2), (8, 3)})
    elif digit == 1:
        O = paint(O, recolor(main_color, connect((1,6),(6,6))))
        O = paint(O, recolor(main_color, connect((3,6),(5,8))))
        O = paint(O, recolor(main_color, connect((4,6),(6,8))))
        O = paint(O, recolor(main_color, connect((6,6),(6,8))))
        O = fill(O, secondary_color, {(i, j) for i in range(4, 6) for j in range(7, 9)}) 
    return O
 
0.4, 36.379993, def ahehedjffiaeehahbaedbhgfabfheieb(I):
  digit = int(str(I)[0]) if str(I)[0].isdigit() else 0
  O = canvas(0, (10, 10))

  # Define base square size
  base_size = (4, 4) if digit == 7 else (6, 6)

  # Create top square
  top_square = canvas(4, base_size)
  O = paint(O, shift(asobject(top_square), (1, 1))) 

  # Modify base size and create bottom square
  bottom_size = (6, 6) if digit == 7 else (4, 4)
  bottom_pos = (2, 2) if digit == 7 else (3, 3)
  bottom_square = canvas(4, bottom_size)
  O = paint(O, shift(asobject(bottom_square), bottom_pos))

  # Fill inner squares
  top_fill = 1 if digit == 7 else 2
  bottom_fill = 2 if digit == 7 else 1
  O = fill(O, top_fill, asindices(crop(O, (2, 2), (2, 2))))
  O = fill(O, bottom_fill, asindices(crop(O, (bottom_pos[0] + 1, bottom_pos[1] + 1), (2, 2))))
  return O 
 
0.495, 15.220472, def hfcefbjaihcdeidaiheabcbcafhacdab(I):
  is_seven = index(I, (0, 0)) == 7
  O = canvas(0, (10, 10)) 
  
  # Large rectangle
  large_rect_dims = (5, 8) if is_seven else (6, 5) 
  large_rect_pos = (2, 1) if is_seven else (1, 2)
  O = paint(O, shift(asobject(canvas(4, large_rect_dims)), large_rect_pos)) 

  # Small rectangle
  small_rect_dims = (2, 3) if is_seven else (4, 3)
  small_rect_color = 1 if is_seven else 2
  small_rect_pos = (3, 3) if is_seven else (2, 3) 
  O = paint(O, shift(asobject(canvas(small_rect_color, small_rect_dims)), small_rect_pos))

  # Innermost square
  inner_square_color = 2 if is_seven else 1
  inner_square_pos = (4, 4) if is_seven else (3, 4)
  O = paint(O, shift(asobject(canvas(inner_square_color, (2, 2))), inner_square_pos))

  # Additional square for Input 1
  if not is_seven:
    O = paint(O, shift(asobject(canvas(4, (4, 4))), (7, 5)))
  return O
 
0.47, 34.86043, def iiddcbfdeibgebcdabccacedcdgbggdf(I):
  is_seven = index(I, (0, 0)) == 7
  O = canvas(0, (10, 10)) 

  if is_seven:
    O = underfill(O, 4, {(i, j) for i in range(2, 7) for j in range(1, 9)}) # Large rectangle
    O = underfill(O, 1, {(i, j) for i in range(3, 5) for j in range(3, 6)}) # Small rectangle
    O = underfill(O, 2, {(i, j) for i in range(4, 6) for j in range(4, 6)}) # Inner square
  else:
    O = underfill(O, 4, {(i, j) for i in range(1, 7) for j in range(2, 8)}) # Large rectangle
    O = underfill(O, 2, {(i, j) for i in range(2, 6) for j in range(3, 6)}) # Small rectangle
    O = underfill(O, 1, {(i, j) for i in range(3, 5) for j in range(4, 6)}) # Inner square
    O = underfill(O, 4, {(i, j) for i in range(7, 11) for j in range(5, 9)}) # Additional square

  return O 
 
0.485, 13.158177, def dbdadeficgcfedebidhjccjacadebfdb(I):
  # Determine object sizes and colors based on input
  outer_size = 5 if I == 7 else 6
  inner_size = outer_size - 2
  outer_color = 4
  inner_color = 1 if I == 7 else 2
  inner_color_2 = 2 if I == 7 else 1

  # Create outer and inner squares as patches
  outer = frozenset({(outer_color, (i, j)) for i in range(outer_size) for j in range(outer_size)})
  inner = frozenset({(inner_color, (i, j)) for i in range(1, inner_size) for j in range(1, inner_size)})

  # Create second object
  outer_2 = frozenset({(outer_color, (i, j)) for i in range(4) for j in range(4)})
  inner_2 = frozenset({(inner_color_2, (i, j)) for i in range(1, 3) for j in range(1, 3)})

  # Define offsets based on input
  offset_1 = (1, 1) if I == 7 else (2, 3)
  offset_2 = (6, 4) if I == 7 else (7, 3)

  # Create canvas and paint objects
  O = canvas(0, (10, 10))
  O = paint(O, shift(outer, offset_1))
  O = paint(O, shift(inner, offset_1))
  O = paint(O, shift(outer_2, offset_2))
  O = paint(O, shift(inner_2, offset_2))
  return O
 
0.46499999999999997, 67.72025, def hbbgdiacbeifeceaiddfefabajhicdac(I):
  digit = int(str(I)[0]) if str(I)[0].isdigit() else 0
  O = canvas(0, (10, 10))
  fill_value = 2 if digit == 7 else 1
  h_line = fill(canvas(4, (1, 9)), fill_value, asindices(crop(canvas(4, (1, 9)), (0, 3), (1, 3))))
  v_line =  fill(canvas(4, (9, 1)), fill_value, asindices(crop(canvas(4, (9, 1)), (3, 0), (3, 1))))
  h_pos = (1, 0) if digit == 7 else (7, 0)
  v_pos = (7, 0) if digit == 7 else (1, 0)
  O = paint(O, toobject(shift(asindices(h_line), h_pos), h_line))
  O = paint(O, toobject(shift(asindices(v_line), v_pos), v_line))
  return O
 
0.46499999999999997, 66.597824, def badjjbcdfacceedajdhffhcdbadghbje(I):
  digit = int(str(I)[0]) if str(I)[0].isdigit() else 0
  fill_value = 2 if digit == 7 else 1
  h_base = canvas(0, (1, 9))
  v_base = canvas(0, (9, 1))
  h_shape = paint(h_base, recolor(4, asindices(h_base)))
  h_shape = paint(h_shape, recolor(fill_value, {(0, 3), (0, 4), (0, 5)}))
  v_shape = paint(v_base, recolor(4, asindices(v_base)))
  v_shape = paint(v_shape, recolor(fill_value, {(3, 0), (4, 0), (5, 0)}))
  O = canvas(0, (10, 10))
  if digit == 7:
    O = paint(O, toobject(shift(asindices(h_shape), (1, 0)), h_shape))
    O = paint(O, toobject(shift(asindices(v_shape), (7, 0)), v_shape))
  else:
    O = paint(O, toobject(shift(asindices(v_shape), (1, 0)), v_shape))
    O = paint(O, toobject(shift(asindices(h_shape), (7, 0)), h_shape))
  return O
 
0.52, 25.769957, def dciefjfabdciefjfbcccfadgcdjaebaf(I):
  d = index(I, (0, 0)) == 7
  O = canvas(0, (10, 10))
  O = paint(O, recolor(4, shift(asobject(canvas(1, (6, 5))), (1 + 2 * d, 2 + 3 * d))))
  O = paint(O, recolor(2 * d + 1, shift(asobject(canvas(1, (4 * d + 2, 3 - d))), (4 - d, 6 * d + 2))))
  return O
 
0.575, 37.78128, def afbgefgjhbbfeeaabjdifjdjeagdcdfb(I):
  is_seven = index(I, (0, 0)) == 7
  O = canvas(0, (10, 10))
  large_rect = asobject(canvas(1, (6, 5)))
  small_rect = asobject(canvas(1, (4, 2))) if is_seven else asobject(canvas(1, (2, 3)))
  O = paint(O, recolor(4, shift(large_rect, branch(is_seven, (3, 5), (1, 2)))))
  O = paint(O, recolor(branch(is_seven, 2, 1), shift(small_rect, branch(is_seven, (6, 0), (4, 3)))))
  return O
 
0.5, 27.786896, def gbfbjggcjdijeidcjdeeebccebcbicbe(I):
  d = index(I, (0, 0)) == 7
  O = canvas(0, (10, 10))
  lr_pos = (1 + 2*d, 2 + 3*d)
  sr_pos = (4 - d, 6*d + 2)
  lr_dims = (6, 5)
  sr_dims = (4, 2) if d else (2, 3)
  O = paint(O, recolor(4, shift(asobject(canvas(1, lr_dims)), lr_pos)))
  O = paint(O, recolor(2*d + 1, shift(asobject(canvas(1, sr_dims)), sr_pos)))
  return O
 
0.505, 19.713833, def cchffffbadfeejeiaieaaecafehfacdf(I):
  is_seven = index(I, (0, 0)) == 7
  O = canvas(0, (10, 10))
  O = paint(O, recolor(4, shift(asobject(canvas(1, (6, 5))), (3 - 2 * (not is_seven), 5 - 3 * (not is_seven)))))
  O = paint(O, recolor(2 if is_seven else 1, shift(asobject(canvas(1, (4 if is_seven else 2, 2 if is_seven else 3))), (6 - 2 * is_seven, 2 + 4 * is_seven))))
  return O
 
