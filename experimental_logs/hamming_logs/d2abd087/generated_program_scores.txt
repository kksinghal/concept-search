14.333333333333334, 7.11588, def cefbjiijeedbegdcjecgccecfbafcfbc(I):
  bg = mostcolor(I) 
  fg = other(palette(I), bg)
  return replace(I, fg, 2)
 
100.0, 6.9256115, def adddajbbaebiebbaieeabdbaggcfaagf(I):
    bg = mostcolor(I)
    fg = other(palette(I), bg)
    target_grid = canvas(fg, shape(I))  
    return cellwise(I, target_grid, 2)  
 
22.333333333333332, 3.3578396, def jdhebjfgjiageedgiaeadabbfcjgbcbc(I):
  objs = objects(I, T, F, T)
  sorted_objs = order(objs, size)
  new_objs = mpapply(lambda i, obj: recolor(i+1, obj), interval(size(objs), 0, -1), sorted_objs)
  O = paint(I, new_objs)
  return O 
 
21.333333333333332, 3.22308, def bjfcadaajcegecbdicabjeahfigcjiaa(I):
  objs = objects(I, T, F, T)
  obj_sizes = apply(size, objs)
  recolored = mpapply(lambda obj, s: recolor(len(obj_sizes)-sorted(obj_sizes).index(s), obj), objs, obj_sizes)
  O = paint(I, recolored)
  return O
 
24.333333333333332, 5.000894, def echdejccacjdedecabfcffcfdcafjjfd(I):
    O = I
    for i in range(1, size(objects(I, T, F, T)) + 1):
        obj = argmax(objects(O, T, F, T), size)
        O = paint(fill(O, 0, obj), recolor(i, obj))
    return O
 
20.0, 3.3780603, def iegdhdjgehchebffaceffgcjdadcaeda(I):
    objs = objects(I, T, F, T)
    sorted_objs = order(objs, lambda obj: -size(obj)) # sort in descending order
    O = I
    for i, obj in enumerate(sorted_objs):
        O = paint(O, recolor(i+1, obj))
    return O
 
24.0, 5.303866, def eabhafbbdccbegadbcddebgchbahdcbc(I):
  objs = objects(I, T, F, T)  # Find all objects, excluding background
  largest = argmax(objs, size) # Find the largest object
  smallest = argmin(objs, size) # Find the smallest object
  I = paint(I, recolor(ONE, largest))  # Recolor largest to 1
  I = paint(I, recolor(TWO, smallest))  # Recolor smallest to 2
  return I
 
12.0, 5.0993967, def ddfcfiabfafbedgbjfcaeeheijigecfc(I):
  objs = objects(I, T, F, T)
  obj_sizes = tuple((obj, size(obj)) for obj in objs)  # Create (object, size) pairs
  largest = argmax(obj_sizes, lambda x: x[1])[0]  # Extract largest object from pairs
  smallest = argmin(obj_sizes, lambda x: x[1])[0]  # Extract smallest object from pairs
  O = I
  for v in palette(I):
    if v != ZERO:
       O = replace(O, v, ONE if any(obj == largest and color(obj) == v for obj in objs) 
                 else TWO if any(obj == smallest and color(obj) == v for obj in objs) else v)
  return O
 
9.666666666666666, 2.8768973, def abbhdjjgdgabecdebcefbdbeihgifafg(I):
  objs = objects(I, T, T, T)
  target = argmin(objs, size)
  above = frozenset(obj for obj in objs if uppermost(obj) < uppermost(target))
  below = frozenset(obj for obj in objs if uppermost(obj) > uppermost(target))
  I = paint(I, recolor(1, target))
  I = paint(I, recolor(2, merge(above)))
  I = paint(I, recolor(1, merge(below)))
  return I
 
26.333333333333332, 73.978134, def chcchbhhagefeddhahiccfhgfjbfbdid(I):
  objs = objects(I, univalued=False, diagonal=False, without_bg=False)
  new_objs = frozenset()
  for obj in objs:
    color_ = 2 if color(obj) == 5 else 1 if color(obj) != 0 else 0
    new_objs = new_objs | recolor(color_, toindices(obj))
  O = paint(canvas(0, shape(I)), new_objs)
  return O
 
14.333333333333334, 7.11588, def hbbaidefeeaaejidacgbbdhcfagejgag(I):
  O = I
  for val in palette(I):
    if val == 5:
      O = replace(O, val, 2)
    elif val != 0:
      O = replace(O, val, 1)
  return O
 
20.0, 2.9870481, def bccgificbhegeadbbcbiccdccfijfgef(I):
    objs = objects(I, T, F, T)
    def recolor_helper(obj):
        return size(obj)
    sorted_objs = order(objs, recolor_helper)
    O = I
    for i, obj in enumerate(sorted_objs):
        O = paint(O, recolor(len(sorted_objs)-i, obj))
    return O
 
26.333333333333332, 3.362967, def bchgaffbhbaiecheicfhbdaeceehceec(I):
    objs = objects(I, T, F, T)
    size_dict = {}
    for i, obj in enumerate(objs):
        size_dict[size(obj)] = i + 1
    O = I
    for obj in objs:
        O = paint(O, recolor(size_dict[size(obj)], obj))
    return O
 
21.666666666666668, 3.8709223, def hfddggbjbhbhehjdbbcefjdcfaeihbch(I):
    objs = objects(I, T, F, T)
    objs_sizes = apply(size, objs)
    largest_size = maximum(objs_sizes)
    smallest_size = minimum(objs_sizes)
    def recolor_grid(i, j):
        for obj in objs:
            if contained((I[i][j], (i, j)), obj):
                if size(obj) == largest_size:
                    return ONE
                elif size(obj) == smallest_size:
                    return TWO
                else:
                    return I[i][j]
        return ZERO
    return tuple(tuple(recolor_grid(i, j) for j in range(len(I[0]))) for i in range(len(I)))
 
8.333333333333334, 3.2751737, def facddfagejfcefafiaaedfcffejhdaba(I):
  objs = objects(I, T, T, T)
  target = argmin(objs, lambda o: len(o))
  return paint(I, merge(
      frozenset(recolor(1 if uppermost(o) >= uppermost(target) else 2, o) if o != target else recolor(1, o) for o in objs)
  ))
 
19.333333333333332, 4.0948586, def bddiecabaegdejabbebdcibbafeaabab(I):
  O = replace(I, 5, 2)  # Replace all '5's with '2's
  for obj in objects(I, univalued=True, diagonal=False, without_bg=False):
    if index(I, first(obj)[1]) != 0 and even(uppermost(obj)): 
      O = paint(O, recolor(1, obj))
    else:
      O = paint(O, recolor(index(I, first(obj)[1]), obj))
  return O
 
19.666666666666668, 6.459476, def hfcafbbfhfcdeebjaaebbeacgfdchccf(I):
  O = replace(I, 5, 2)  # Replace all '5's with '2's
  for obj in partition(I):
    i, j = first(obj)[1]
    if I[i][j] != 0 and even(i):
      O = paint(O, recolor(1, obj))
    else:
      O = paint(O, recolor(I[i][j], obj))
  return O
 
85.66666666666667, 5.5232825, def bfedbbeecabiecefiefgefdfbbffddae(I):
  objs = partition(I) # Partition grid into objects based on color.
  target_color = leastcolor(I) # Find least frequent color.
  return paint(canvas(mostcolor(I), shape(I)), merge({recolor(1 if color(obj) == target_color else 2, obj) for obj in objs})) # Recolor and paint.
 
11.666666666666666, 2.5273402, def jcaijfcbadaeecbdbefbefigdhfdfbfa(I):
  objs = objects(I, T, T, T)
  target = argmin(objs, size)
  ty = centerofmass(target)[0] 
  return paint(I, merge([
    recolor(1, target),
    *(recolor(2, obj) for obj in objs if centerofmass(obj)[0] < ty),
    *(recolor(1, obj) for obj in objs if centerofmass(obj)[0] > ty)
  ]))
 
15.333333333333334, 2.7702951, def aceefadjddgcehbeajdeedgajbfdeceb(I):
  O = replace(I, 5, 2)  # Replace all '5's with '2's
  for obj in objects(O, univalued=True, diagonal=False, without_bg=False):
    if index(O, first(obj)[1]) != 0 and even(uppermost(obj)):
      O = paint(O, recolor(1, obj)) 
  return O
 
13.666666666666666, 4.080903, def haeiabdjhachedfgjjdabieejgecddab(I):
  even_rows = tuple(i for i in range(len(I)) if even(i))
  O = replace(I, 5, 2)
  for i in even_rows:
    O = fill(O, 1,  {(i, j) for j in range(len(O[0])) if O[i][j] != 0})
  return O
 
26.333333333333332, 7.2822485, def aaecddbfaicgebbdahhbjgcedfagcjdg(I):
  bg = mostcolor(I) 
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  target_obj = argmin(objs, size)
  O = paint(replace(I, bg, 0), recolor(1, toindices(target_obj)))
  return replace(O, other(palette(O), 0), 2) 
 
97.0, 6.1122127, def hahbibjefhhhecffibbceiaffdeaiaca(I):
  primary_color = mostcolor(I)
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  small_objs = sizefilter(objs, 1)
  if small_objs:
    target_obj = first(small_objs)
  else:
    target_obj = argmin(objs, size)
  O = paint(replace(I, primary_color, 2), recolor(1, toindices(target_obj)))
  return O
 
26.333333333333332, 8.516148, def ffjabefdhaeeehfajgfeefdbebaeihfi(I):
    target_color = leastcommon(I)
    O = replace(I, target_color, 1)
    O = cellwise(I, O, 2)
    return O
 
19.333333333333332, 2.667765, def bccjbiedjeieedeiabfjeffcfehdhggc(I):
  objs = objects(I, T, F, T)
  sizes = sorted(apply(size, objs))
  return paint(I, frozenset({(sizes.index(size(obj)) + 1, idx) for obj in objs for idx in toindices(obj)}))
 
21.333333333333332, 3.4439743, def diggccdcjceceeeabedjcdcagfhcdccc(I):
  objs = objects(I, T, F, T)
  sizes = sorted(apply(size, objs))
  O = I
  for i, s in enumerate(sizes):
    O = paint(O, recolor(i + 1, toindices(extract(objs, matcher(size, s)))))
  return O
 
26.333333333333332, 39.583496, def chagdffiecdeeejebecbeabbebbhgcad(I):
  objs = objects(I, T, F, T)  # Extract objects excluding background
  obj_sizes = [(size(obj), obj) for obj in objs]  # Store (size, object) pairs
  largest = argmax(obj_sizes, lambda x: x[0])[1]  # Extract largest object
  smallest = argmin(obj_sizes, lambda x: x[0])[1]  # Extract smallest object
  O = paint(canvas(ZERO, shape(I)), largest)  # Paint largest object as '1'
  O = underpaint(O, recolor(TWO, smallest))  # Underpaint smallest as '2'
  return O
 
14.0, 3.9945178, def caehgeaagaccegedbaebifgdhaffibec(I):
  O = replace(I, 5, 2)  # Recolor all '5's to '2's
  for i in range(len(O)):
    if even(i):  # Target every other row
      for j in range(len(O[0])):
        if O[i][j] == 2:
          O = fill(O, 1, {(i, j)})  # Replace the first '2' encountered 
          break 
  return O
 
25.333333333333332, 53.688267, def dfagdbeaacbfefjibffdaeedechceibg(I):
  O = replace(I, 5, 2)
  objs = objects(O, univalued=True, diagonal=False, without_bg=True)
  for obj in objs:
    for i in range(height(obj)):
      if even(i + uppermost(obj)): # Alternate rows based on object position
        O = paint(cover(O, obj), shift(recolor(1, {(0,0)}), (uppermost(obj) + i, leftmost(obj))))
  return O
 
164.33333333333334, 34.89457, def ffagdifgeecceegcafhefbfehceabfhf(I):
  O = replace(I, 5, 2)
  top, bottom = hsplit(O, 2) # Split into top and bottom halves
  for i in range(len(top)):
    if even(i):
      top = fill(top, 1, {(i, 0)}) # Replace top-left corner in even rows
  O = vconcat(top, bottom)
  return O
 
16.0, 15.960676, def bdgcefggfcbfefdabfgbfehdfiabjhia(I):
  O = replace(I, 5, 2)
  objs = objects(O, univalued=True, diagonal=False, without_bg=True)
  for obj in objs:
    if even(centerofmass(obj)[0]):  # Check row of center of mass
      O = paint(cover(O, obj), recolor(1, {ulcorner(obj)})) 
  return O
 
10.666666666666666, 3.1965013, def fadcdeghbfadeefbacbdhhjahiccgife(I):
    bg = mostcolor(I)
    objs = objects(I, univalued=True, diagonal=False, without_bg=True)
    small_objs = sizefilter(objs, minimum(apply(size, objs)))
    large_objs = sizefilter(objs, maximum(apply(size, objs)))
    O = I
    for obj in objs:
        if obj in small_objs:
            O = paint(O, recolor(1, obj))
        elif obj in large_objs:
            O = paint(O, recolor(2, obj))
        else:
            for other_obj in objs:
                if other_obj in large_objs and (
                    (position(obj, other_obj) == (-1, 0)) or 
                    (position(obj, other_obj) == (0, -1))
                ):
                    O = paint(O, recolor(1, obj))
                    break
            else:
                O = paint(O, recolor(2, obj))
    return O
 
9.666666666666666, 3.179102, def egbfdagdefchebebiiebiiifffffjcce(I):
    objs = sorted(objects(I, univalued=True, diagonal=False, without_bg=True), key=size)
    O = I
    for i, obj in enumerate(objs):
        if i == 0:
            O = paint(O, recolor(1, obj))
        elif i == len(objs) - 1:
            O = paint(O, recolor(2, obj))
        else:
            for j in range(i + 1, len(objs)):
                if (position(obj, objs[j]) == (-1, 0)) or (position(obj, objs[j]) == (0, -1)):
                    O = paint(O, recolor(1, obj))
                    break
            else:
                O = paint(O, recolor(2, obj))
    return O 
 
18.666666666666668, 3.6718528, def cgcbjhbdhffiecjbajfffddhacgbaagc(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  small_objs =  frozenset(obj for obj in objs if size(obj) == minimum(apply(size, objs)))
  large_objs = frozenset(obj for obj in objs if size(obj) == maximum(apply(size, objs)))
  other_objs = objs - small_objs - large_objs
  def check_position(obj):
    for large_obj in large_objs:
      if (position(obj, large_obj) == (-1, 0)) or (position(obj, large_obj) == (0, -1)):
        return True
    return False
  recolored_other_objs = frozenset((1, obj) if check_position(obj) else (2, obj) for obj in other_objs)
  return paint(paint(I, merge(apply(lambda x: recolor(1, x), small_objs))), merge(apply(lambda x: recolor(x[0], x[1]), recolored_other_objs)))
 
15.0, 2.3755329, def decdgffffchcebaaabghbjdccccfbded(I):
  objs = objects(I, T, F, T)  # Extract objects
  sizes = sorted(apply(size, objs))  # Get sorted object sizes
  largest = sizes[-1]  # Find the largest size
  second_largest = sizes[-2] if len(sizes) > 1 else 0  # Find second largest or default to 0
  def recolor_helper(obj):
    if size(obj) == largest:
      return 2
    elif size(obj) == second_largest:
      return 1
    else:
      return color(obj)  # Retain original color
  return paint(I, mapply(lambda obj: recolor(recolor_helper(obj), obj), objs)) # Paint the recoloured objects back onto the grid
 
20.0, 4.243994, def jbcdeedadccdefcjbggejjdihdhfdcba(I):
    objs = objects(I, T, F, T)
    size_ranks = {obj: i for i, obj in enumerate(sorted(objs, key=size, reverse=True))}
    return paint(I, mapply(lambda obj: recolor(2 if size_ranks[obj] == 0 else (1 if size_ranks[obj] == 1 else color(obj)), obj), objs))
 
26.333333333333332, 8.516148, def eihaecfhddahedddaicbhhfabjdeiecj(I):
  objs = objects(I, T, F, T)
  obj_sizes = tuple((obj, size(obj)) for obj in objs)
  largest = argmax(obj_sizes, lambda x: x[1])[0]
  smallest = argmin(obj_sizes, lambda x: x[1])[0]
  O = replace(I, color(largest), TWO) 
  O = replace(O, color(smallest), ONE)
  O = replace(O, TWO, color(smallest))
  return replace(O, ONE, color(largest))
 
26.333333333333332, 40.333862, def bfdcjiiaihdfebahbgbbaaaabbgeaade(I):
  objs = objects(I, T, F, T)
  largest = argmax(objs, size)
  smallest = argmin(objs, size)
  return paint(
      paint(replace(I, color(largest), ZERO), recolor(color(largest), smallest)), 
      recolor(color(smallest), largest)
  )
 
12.0, 5.0993967, def bcdjbfhbeabdeaaeadgibgdjhfcbbbae(I):
  objs = objects(I, T, T, T)
  target = argmin(objs, size)
  return paint(I, frozenset((1 if any(uppermost(obj) < uppermost(target) for obj in objs if obj != target_obj) else 2, (i, j)) if target_obj != target else (1, (i, j)) for target_obj in objs for v, (i, j) in target_obj))
 
14.0, 5.7037272, def fdbgefdfedecebegacdaiadjcajeejbb(I):
  O = replace(I, 5, 2) # Replace all '5's with '2's
  for obj in objects(O, univalued=True, diagonal=False, without_bg=False):
    if even(uppermost(obj)):
      for v, (i, j) in obj:
        if v == 2:
          O = fill(O, 1, {(i, j)})
          break
  return O
 
24.0, 5.989437, def chddcdgecbfcechdijbgefccifajhgfg(I):
  O = I  # Create a copy of the input grid
  for i in range(0, len(I), 2):  # Iterate over even rows
    for j in range(len(I[0])):
      if I[i][j] == 5:
        O = fill(O, 2, {(i, j)})
        O = fill(O, 1, {(i, min(ofcolor(O, 2) & {(i, k) for k in range(len(I[0]))}))})
        break
  return O
 
15.0, 4.3260765, def fdeefbgcfefheeejiejgbaefejcfeafb(I):
  O = replace(I, 5, 2)
  for obj in objects(O, univalued=True, diagonal=False, without_bg=False):
    if even(uppermost(obj)):
      leftmost_2 = min(toindices(obj), key=lambda x: x[1] if O[x[0]][x[1]] == 2 else float('inf'))
      O = fill(O, 1, {leftmost_2})
  return O
 
12.0, 3.444491, def hbeacaedbdebeeaebiabdcdaafdacdgd(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  largest_obj = extract(objs, lambda obj: size(obj) == maximum(apply(size, objs)))
  smallest_obj = extract(objs, lambda obj: size(obj) == minimum(apply(size, objs)))
  def recolor_func(obj):
    if obj == smallest_obj: return 1
    if obj == largest_obj: return 2
    if any(position(obj, largest_obj) == d for d in ((-1, 0), (0, -1))): 
      return 1
    return 2
  return paint(I, merge(apply(lambda o: recolor(recolor_func(o), o), objs)))
 
24.0, 5.4741025, def bjcaabjajbfeefadjgfbaegbjagjjfaf(I):
  objs = objects(I, T, F, T)
  def size_comparison(obj):
    return size(obj)
  sorted_objs = order(objs, size_comparison)
  return paint(paint(I, recolor(2, sorted_objs[0])), recolor(1, sorted_objs[1] if len(sorted_objs) > 1 else sorted_objs[0]))
 
100.0, 9.476098, def deceeaebjfeaeeaiajicehbfbdbdeacb(I):
  objs = objects(I, T, F, T)
  obj_sizes = ((size(obj), color(obj)) for obj in objs)
  s_largest, c_largest = argmax(obj_sizes, lambda x: x[0]) or (0,0)  # Extract largest object from pairs
  s_smallest, c_smallest = argmin(obj_sizes, lambda x: x[0]) or (0,0)  # Extract smallest object from pairs
  return tuple(
      tuple(
          c_largest if v == c_smallest else c_smallest if v == c_largest else v 
          for v in row
      ) 
      for row in I
  ) 
 
89.0, 34.35981, def hfiegibcbcdcefgeigefehggfcibjcdc(I):
  O = replace(I, 5, 2)  # Replace all '5's with '2's
  for obj in objects(O, univalued=True, diagonal=False, without_bg=False):
    if even(uppermost(obj)):
      O = paint(O, recolor(1, obj))
  return O
 
91.0, 25.38633, def gjdbhfjjjahhebfhaecgibajafjcbdhj(I):
  O = canvas(0, shape(I))
  for obj in objects(I, univalued=True, diagonal=False, without_bg=False):
    new_color = 1 if even(uppermost(obj)) else 2
    O = underpaint(O, recolor(new_color, obj))
  return O
 
20.0, 5.1950073, def iidaccihdgddeajeaghfafcddiaefjbf(I):
  O = I
  for i in range(0, len(I), 2):  # Iterate over even rows
    O = fill(O, 1, ofcolor(crop(I, (i, 0), (1, len(I[0]))), 5))
  O = replace(O, 5, 2)  # Replace remaining '5's with '2's
  return O
 
9.0, 2.7296343, def cbaeaddgbfdceheabfbcdededeffccab(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  min_size = minimum(apply(size, objs))
  max_size = maximum(apply(size, objs))
  def recolor_func(obj):
    if size(obj) == min_size: 
      return 1
    if size(obj) == max_size: 
      return 2
    for other_obj in objs:
      if size(other_obj) == max_size and any(position(obj, shift(other_obj, d)) in {(0,-1), (-1,0)} for d in dneighbors((0, 0))):
        return 1
    return 2
  return paint(I, merge(apply(lambda o: recolor(recolor_func(o), o), objs))) 
 
8.666666666666666, 2.2283013, def iifcccbbfehcefddaafcbibgbehfacde(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  min_obj = argmin(objs, size)
  max_objs = sizefilter(objs, maximum(apply(size, objs)))
  def recolor_func(obj):
    if obj == min_obj: 
      return 1
    if obj in max_objs: 
      return 2
    return 1 if any(manhattan(obj, shift(max_obj, d)) == 1 for max_obj in max_objs for d in dneighbors((0, 0))) else 2
  return paint(I, merge(apply(lambda o: recolor(recolor_func(o), o), objs)))
 
8.666666666666666, 1.8902918, def ibiidhdcjcdceeabidciadiiafjfbceb(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  s = lambda x: size(x) 
  min_size = valmin(objs, s)
  max_size = valmax(objs, s)
  def recolor_func(obj):
    if s(obj) == min_size:
      return 1
    if s(obj) == max_size:
      return 2
    return 1 if any(hmatching(obj, shift(o, d)) or vmatching(obj, shift(o, d)) for o in sizefilter(objs, max_size) for d in dneighbors((0, 0))) else 2
  return paint(I, merge(apply(lambda o: recolor(recolor_func(o), o), objs)))
 
11.333333333333334, 5.3820915, def cfedefjeffieeebdafddieibebedcbcd(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  def recolor_func(obj):
    return 1 if size(obj) == minimum(apply(size, objs)) else (
      2 if size(obj) == maximum(apply(size, objs)) else (
        1 if any(len(intersection(toindices(obj), shift(toindices(o), d))) > 0 for o in sizefilter(objs, maximum(apply(size, objs))) for d in dneighbors((0,0))) else 2
      )
    )
  return paint(I, merge(apply(lambda o: recolor(recolor_func(o), o), objs)))
 
22.333333333333332, 6.367858, def ccbejefecbbhehbaibceecahecibfaef(I):
  objs = objects(I, T, F, T)
  first_largest = argmax(objs, size)
  remaining_objs = remove(first_largest, objs)
  second_largest = argmax(remaining_objs, size)
  return paint(I, merge([
    recolor(2, first_largest), 
    recolor(1, second_largest), 
    mapply(lambda obj: recolor(color(obj), obj), remaining_objs)
  ]))
 
12.666666666666666, 3.6170971, def gebfijabcafgedbjbajddbieffcfijbd(I):
  objs = objects(I, T, T, T)
  target = argmin(objs, size) 
  return paint(I, merge(
    apply(lambda obj: recolor(2, obj) if uppermost(obj) < uppermost(target) else (recolor(1, obj) if uppermost(obj) > uppermost(target) else obj), objs)
  ))
 
14.0, 3.302308, def efhdgeejfideejdebfgcbbbjhffhdeii(I):
  O = replace(I, 5, 1)  # Replace all 5s with 1s initially
  for obj in objects(I, univalued=True, diagonal=False, without_bg=False):
    if color(obj) == 5 and uppermost(obj) == 0:
      O = paint(O, recolor(2, toindices(obj)))
  return O
 
14.0, 2.6294436, def chfcbjifdhjieddgbhdgbacdcbeadbca(I):
    objs = objects(I, T, F, T)
    size_counts = {}
    for obj in objs:
        s = size(obj)
        if s in size_counts:
            size_counts[s] += 1
        else:
            size_counts[s] = 1
    sorted_sizes = sorted(size_counts.items(), key=lambda x: x[1], reverse=True)
    first_size, second_size = -1,-1
    if len(sorted_sizes) > 0:
      first_size = sorted_sizes[0][0]
    if len(sorted_sizes) > 1:
      second_size = sorted_sizes[1][0]
    return paint(I, mapply(lambda obj: recolor(2 if size(obj) == first_size else (1 if size(obj) == second_size else color(obj)), obj), objs))
 
10.333333333333334, 1.9880917, def ddfjciddjgcfeeebjfagiaghcbabihbd(I):
  objs = objects(I, T, F, T)
  def recolor_helper(obj):
    nonlocal largest_size, second_largest_size
    obj_size = size(obj)
    if obj_size > largest_size:
      second_largest_size = largest_size
      largest_size = obj_size
    elif obj_size > second_largest_size and obj_size != largest_size:
      second_largest_size = obj_size
    if obj_size == largest_size:
      return 2
    elif obj_size == second_largest_size:
      return 1
    else:
      return color(obj)
  largest_size, second_largest_size = 0, 0
  return paint(I, mapply(lambda obj: recolor(recolor_helper(obj), obj), objs))
 
13.0, 3.8437464, def bfebaccfebihejceiffhcebhbbibehhj(I):
  O = replace(I, 5, 2)  # Replace all 5s with 2s
  for obj in objects(O, univalued=True, diagonal=False, without_bg=True):
    leftmost_index = min(toindices(obj), key=lambda x: x[1]) # Find leftmost index
    O = fill(O, 1, {leftmost_index})  # Replace leftmost cell with 1
  return O
 
33.333333333333336, 57.78996, def gciagcefgffceffaiejiichjijefffef(I):
  obj = asobject(replace(I, 5, 2)) # Get object representation after replacing 5s
  leftmost_cells = frozenset((v, (i, min(j for _, (k, j) in obj if k == i))) for v, (i, _) in obj if v == 2)
  return paint(replace(I, 5, 0), leftmost_cells) # Paint leftmost cells onto a cleared grid
 
12.333333333333334, 4.018547, def bdcdbgdcbbffeabiihacdaeciadccafa(I):
  O = replace(I, 5, 2)  # Replace 5s with 2s
  for i, row in enumerate(O):
    for j, val in enumerate(row):
      if val == 2:
        O = fill(O, 1, {(i, j)})  # Mark the first '2' in each row as '1'
        break  # Move to the next row
  return O
 
12.0, 5.0993967, def ehefecfccddeedegbbfaicichddageej(I):
  O = replace(I, 5, 0) # Clear all 5s 
  indices = occurrences(I, {(5, (0, 0))}) # Find occurrences of single-cell object '5'
  for i, j in indices:
    O = fill(O, 1, {(i, j)}) # Place '1' at the found indices
  return O
 
18.666666666666668, 4.074986, def edccdeciabfdehfdjjedddjcidfcfaab(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  largest_obj = argmax(objs, size)
  def recolor_func(obj):
    if obj == largest_obj:
      return 2
    if any(position(obj, shift(largest_obj, d)) in {(0,-1), (-1,0)} for d in dneighbors((0, 0))):
      return 1
    return color(obj)
  return paint(I, merge(apply(lambda o: recolor(recolor_func(o), o), objs)))
 
15.666666666666666, 3.2191932, def eaiabebdhfdjebabaiehafgbdebabajd(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  O = I
  for obj in objs:
    if size(obj) == maximum(apply(size, objs)):
      O = paint(O, recolor(2, obj))
    elif any(position(obj, other_obj) in {(0,-1), (-1,0)} for other_obj in objs if size(other_obj) == maximum(apply(size, objs))):
      O = paint(O, recolor(1, obj))
    else:
      O = paint(O, recolor(color(obj), obj))
  return O 
 
20.333333333333332, 4.663908, def bcbaigfbdgabedaejdadjicfbigfdbbd(I):
    objs = objects(I, univalued=True, diagonal=False, without_bg=True)
    largest = extract(objs, lambda obj: size(obj) == maximum(apply(size, objs)))
    return paint(
        paint(I, recolor(2, largest)),
        merge(apply(lambda obj: recolor(1, obj), sfilter(objs, lambda obj: any(position(obj, shift(largest, d)) in {(0,-1), (-1,0)} for d in dneighbors((0,0))))))
    )
 
22.333333333333332, 4.4877963, def jcejccigcecgeceeaddiiaihjfadaaad(I):
  objs = objects(I, T, F, T)
  size_objs = list(zip(apply(size, objs), objs))
  size_objs.sort(key=lambda x: x[0])
  largest, second_largest = size_objs[-1][1], (size_objs[-2][1] if len(size_objs) > 1 else None)
  def recolor_helper(obj):
    return 2 if obj == largest else (1 if obj == second_largest else color(obj))
  return paint(I, mapply(lambda obj: recolor(recolor_helper(obj), obj), objs))
 
19.333333333333332, 4.630633, def eacafbdeedfieejejjcbceifejehchec(I):
  objs = objects(I, T, F, T)
  if len(objs) < 2: return I
  s = sorted(objs, key=size)
  return fill(fill(I, ONE, toindices(s[0])), TWO, toindices(s[-1]))
 
12.666666666666666, 4.950131, def cccdddbiedbeeeijaeidccbcbgafichb(I):
  objs = objects(I, T, T, T)
  target_i = uppermost(argmin(objs, size))
  return paint(I, merge(
      frozenset(recolor(1 if uppermost(o) > target_i else 2, o) for o in objs)
  ))
 
15.0, 3.5007927, def eaehcffhedjaedcaidfgicbfbcbcgege(I):
  O = I
  for j in range(width(I)):
    first_found = False
    for i in range(height(I)):
      if I[i][j] == 5 and not first_found:
        O = fill(O, 1, {(i, j)})
        first_found = True
      elif I[i][j] == 5:
        O = fill(O, 2, {(i, j)})
  return O
 
10.333333333333334, 2.6454494, def abbahebgdafjeiaebdeefaecahidebcb(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  max_size = maximum(apply(size, objs))
  largest_obj = extract(objs, matcher(size, max_size))
  def recolor_func(obj):
    if adjacent(obj, largest_obj):
      return 1
    elif obj == largest_obj:
      return 2
    else:
      return 1
  return paint(I, merge(apply(lambda o: recolor(recolor_func(o), o), objs)))
 
26.333333333333332, 8.516148, def ddbeajgjbjaheacdbcfedfgjjaeecdfj(I):
  objs = objects(I, T, F, T)
  largest_size = valmax(objs, size)
  second_largest_size = valmax(sfilter(objs, lambda obj: size(obj) != largest_size), size)
  return paint(paint(I, mfilter(objs, lambda obj: recolor(2, obj) if size(obj) == largest_size else obj)), mfilter(objs, lambda obj: recolor(1, obj) if size(obj) == second_largest_size else obj))
 
21.666666666666668, 4.5354357, def adjbjhhfbjbeecfhbibecfecdgjbecai(I):
    objs = objects(I, T, F, T)
    def get_size_filtered_objs(objs, target_size):
      return sfilter(objs, matcher(size, target_size))
    largest_size = valmax(objs, size)
    second_largest_size = valmax(get_size_filtered_objs(objs, largest_size), size)
    return paint(paint(I, mapply(lambda obj: recolor(2, obj), get_size_filtered_objs(objs, largest_size))), mapply(lambda obj: recolor(1, obj), get_size_filtered_objs(objs, second_largest_size)))
 
14.333333333333334, 7.11588, def bcjefaaecgdgeabciahgdaafbbaiecfc(I):
    objs = objects(I, T, F, T)
    if len(objs) < 2: return I  # Handle cases with less than two objects
    large_color = color(max(objs, key=size))
    small_color = color(min(objs, key=size))
    return replace(replace(I, small_color, TWO), large_color, ONE)
 
13.666666666666666, 3.5330045, def fddidebadfbhegegbdaeiaebfhibedji(I):
  objs = objects(I, T, T, T)
  target = argmin(objs, size)
  target_i = uppermost(target) 
  return paint(I, merge(
    frozenset(recolor(1 if uppermost(obj) <= target_i else 2, obj) for obj in objs)
  ))
 
14.666666666666666, 3.4694464, def cihcifcfebgeegfdafcebedjdgcdjjdd(I):
  objs = objects(I, T, T, T)
  target = argmin(objs, size)
  target_i = uppermost(target)
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if val != 0:
        I = fill(I, 1 if i <= target_i else 2, {(i, j)})
  return I 
 
10.666666666666666, 2.9338443, def fafcfjbeefajeddhaibecbejiagjdcib(I):
  objs = objects(I, T, T, T)
  target = argmin(objs, size)
  return paint(I, merge(
    frozenset(recolor(branch(position(obj, target)[0] <= 0, 1, 2), obj) for obj in objs)
  ))
 
14.0, 4.3860765, def cffdadcegacjejdcjbbfadieddjfjefb(I):
  O = replace(I, 5, 2)  # Recolor all '5's to '2'
  indices = occurrences(I, {(5, (0, 0))})  # Find anchor cell indices
  for i, j in indices:
    O = fill(O, 1, {(i, j)})  # Recolor anchor cells to '1'
    O = move(O, toobject({(2, (i + 1, j + 1))}, I), (0, 0))  # Move object relative to anchor
  return O
 
35.0, 11.394396, def jceaceahafjdefaajeddefbbdcjcecje(I):
  anchors = occurrences(I, {(5, (0, 0))})
  objs = objects(I, False, False, True)
  O = canvas(0, shape(I))
  for obj in objs:
    anchor = next((i, j) for v, (i, j) in obj if (i, j) in anchors)
    O = paint(O, recolor(1, {(anchor)}))
    O = paint(O, shift(recolor(2, difference(obj, {(5, anchor)})), (1, 1)))
  return O
 
20.333333333333332, 37.85819, def jceajcacfdhaeechjbdddajaibibaiba(I):
  O = replace(I, 5, 0)
  for i in range(len(I)):
    for j in range(len(I[0])):
      if I[i][j] == 5 and (i == 0 or I[i - 1][j] != 5) and (j == 0 or I[i][j - 1] != 5):
        O = fill(O, 1, {(i, j)})
        O = paint(O, shift(toobject({(2, (i + 1, j + 1))}, I), (0, 0)))
  return replace(O, 5, 2)
 
15.333333333333334, 25.370174, def adibehjgfdfjejdjiidbciefgcgfieef(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  min_obj = argmin(objs, size)
  max_size = maximum(apply(size, objs))
  return paint(I, merge(apply(lambda o: recolor(1 if o == min_obj else 2 if size(o) == max_size else 0, o), objs)))
 
12.666666666666666, 3.854783, def gfdcbicjagaeefdfbccbgdbibdhaddef(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  largest = argmax(objs, size)
  def recolor_func(obj):
    if obj == largest:
      return 2
    elif any(position(obj, shift(largest, d)) in {(0,-1), (-1,0)} for d in dneighbors((0, 0))):
      return 1
    else:
      return 2 
  return paint(I, merge(apply(lambda o: recolor(recolor_func(o), o), objs)))
 
15.333333333333334, 4.5559034, def jafddeebdbigejhgbcdhfjbbdeaajffh(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  largest_indices = toindices(argmax(objs, size))
  def recolor_func(obj):
    i, j = centerofmass(obj)
    return 1 if any((i < li and j <= lj) or (j < lj and i <= li) for li, lj in largest_indices) else 2
  return paint(I, merge(apply(lambda o: recolor(recolor_func(o), o), objs)))
 
18.0, 2.9723384, def chcejfcdiajjejcdiafajebhajabfbjb(I):
  objs = objects(I, T, T, T)
  target = argmax(objs, size)  
  left = frozenset(obj for obj in objs if rightmost(obj) < leftmost(target))
  right = frozenset(obj for obj in objs if leftmost(obj) > rightmost(target))
  I = paint(I, recolor(2, target))
  I = paint(I, recolor(1, merge(left)))
  I = paint(I, recolor(1, merge(right)))
  return I
 
10.333333333333334, 2.6264, def jaeffcdjhfdbeddbbicbeajegfagbdji(I):
  objs = sorted(objects(I, T, T, T), key=lambda obj: centerofmass(obj)[1])
  largest = argmax(objs, size)
  i = objs.index(largest)
  left_objs = merge(objs[:i])
  right_objs = merge(objs[i+1:])
  I = paint(I, recolor(1, left_objs))
  I = paint(I, recolor(2, largest))
  I = paint(I, recolor(1, right_objs))
  return I
 
10.333333333333334, 2.6454494, def abggefiaahdjeicbbceegfjfeejibffj(I):
  objs = objects(I, T, T, T)
  largest = argmax(objs, size)
  O = I
  for obj in objs:
      if obj == largest:
          O = paint(O, recolor(2, obj))
      elif position(obj, largest)[1] == -1:  
          O = paint(O, recolor(1, obj))
      else: 
          O = paint(O, recolor(1, obj))
  return O
 
12.333333333333334, 5.4656878, def ecdgihhdfjhjehhijabeafjjdjedfgdb(I):
  objs = objects(I, T, T, T)
  largest = argmax(objs, lambda obj: len(obj))
  O = canvas(0, shape(I))
  for obj in objs:
    if obj == largest:
      O = paint(O, recolor(2, obj))
    else:
      lx, _ = llcorner(obj)
      rx, _ = lrcorner(obj)
      if lx < leftmost(largest) or rx > rightmost(largest): 
        O = paint(O, recolor(1, obj))
  return O
 
24.0, 5.4741025, def abhhdfgebbebecgdbacjaeefejbhcaeh(I):
  objs = objects(I, T, F, T)
  def size_order(obj):
    return size(obj)
  sorted_objs = order(objs, size_order)
  largest_obj = first(sorted_objs)
  second_largest_obj = first(remove(largest_obj, sorted_objs))
  def recolor_func(obj):
    if obj == largest_obj:
      return 2
    elif obj == second_largest_obj:
      return 1
    else:
      return color(obj)
  return paint(I, merge(apply(lambda o: recolor(recolor_func(o), o), objs)))
 
15.0, 2.3755329, def ifdeifefaaabedfhaecbfdjfjjfcidac(I):
  objs = objects(I, T, F, T)
  sizes = apply(size, objs)
  largest_size = maximum(sizes)
  second_largest_size = valmax(remove(largest_size, sizes), identity)
  def recolor_func(obj):
    obj_size = size(obj)
    if obj_size == largest_size:
      return 2
    elif obj_size == second_largest_size:
      return 1
    else:
      return color(obj)
  return paint(I, mapply(lambda obj: recolor(recolor_func(obj), obj), objs))
 
11.333333333333334, 4.1213193, def jbcdfihffcbeecbeiffdecgjbjehfeaj(I):
  objs = objects(I, T, T, T)
  target = argmax(objs, size)
  return paint(I, merge(
    frozenset(recolor(branch(position(obj, target)[0] <= 0 or position(obj, target)[1] <= 0, 1, 2), obj) for obj in objs)
  ))
 
11.333333333333334, 3.4992514, def bddbeecceebhefcfjjfideeacadaejac(I):
  objs = objects(I, T, T, T)
  target = argmax(objs, size)
  ti, tj = centerofmass(target)
  return paint(I, merge(
    frozenset(recolor(branch(centerofmass(obj)[0] <= ti or centerofmass(obj)[1] <= tj, 1, 2), obj) for obj in objs)
  ))
 
12.0, 5.0993967, def cjcjhbghebfgedeabceacbdffhdfgdfi(I):
  objs = objects(I, T, T, T)
  target = argmax(objs, size)
  return paint(I, merge(
    frozenset(recolor(branch(any(i <= j for i, j in zip(ulcorner(obj), ulcorner(target))) or any(i >= j for i, j in zip(lrcorner(obj), lrcorner(target))), 1, 2), obj) for obj in objs)
  ))
 
10.333333333333334, 2.6454494, def ieeedbbhcfjbebgdaeadefabafcfgfgb(I):
    objs = objects(I, T, T, T)
    largest = argmax(objs, size)
    def condition(obj):
        for i in range(height(I)):
            for j in range(width(I)):
                if (i, j) in toindices(obj) and (i, j) in toindices(largest):
                    return 2
        return 1
    return paint(I, merge(
        frozenset(recolor(condition(obj), obj) for obj in objs)
    ))
 
12.333333333333334, 4.1509676, def cbaededbjbjhebcbaefdaibdfcddcehg(I):
    objs = objects(I, T, T, T)
    target = argmax(objs, size)
    return paint(I, merge(
        frozenset(
            recolor(1 if any(gravitate(obj, target) == d for d in [(0, -1), (-1, 0)]) else 2, obj) for obj in objs
        )
    ))
 
15.333333333333334, 3.3287323, def cbcabbaibaifecabaficbbbfdbdbbbcd(I):
  objs = objects(I, True, False, True)  # Extract objects, excluding background
  min_size = valmin(objs, size)         # Find the size of the smallest object
  max_size = valmax(objs, size)         # Find the size of the largest object
  return paint(                          # Paint the grid
      I, 
      merge(                            # Merge the recolored objects
          apply(lambda o: recolor(1, o) if size(o) == min_size else (recolor(2, o) if size(o) == max_size else o), objs) 
          # Recolor based on size
      )
  )
 
11.333333333333334, 4.9312925, def agebhjhdaeafeacaaiefbccbadffjfbe(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  largest = argmax(objs, size)
  def recolor_func(obj):
    if obj == largest:
      return 2
    lc = lrcorner(largest)
    return 1 if ulcorner(obj)[0] + ulcorner(obj)[1] < lc[0] + lc[1] else 2
  return paint(I, merge(apply(lambda o: recolor(recolor_func(o), o), objs)))
 
11.666666666666666, 2.5225556, def febccifhebbeeibjjadbbdjbbeeeageh(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  largest = argmax(objs, size)
  center_largest = centerofmass(largest)
  def recolor_func(obj):
    if obj == largest:
      return 2
    return 1 if ulcorner(obj)[0] < center_largest[0] or ulcorner(obj)[1] < center_largest[1] else 2
  return paint(I, merge(apply(lambda o: recolor(recolor_func(o), o), objs)))
 
15.0, 5.999605, def daaifgfdebaeecjbadieefjcjcjejaba(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  largest = argmax(objs, size)
  def recolor_func(obj):
    if obj == largest:
      return 2
    return 1 if sum(1 for c in obj if c[1][0] <= centerofmass(largest)[0] and c[1][1] <= centerofmass(largest)[1]) > len(obj) // 2 else 2
  return paint(I, merge(apply(lambda o: recolor(recolor_func(o), o), objs)))
 
8.666666666666666, 3.6732576, def bfdfcifffbchehcfiiahceeddffbgebj(I):
  objs = objects(I, T, T, T)
  target = argmin(objs, size)
  left = frozenset(obj for obj in objs if leftmost(obj) < leftmost(target))
  right = frozenset(obj for obj in objs if leftmost(obj) > leftmost(target))
  I = paint(I, recolor(1, target))
  I = paint(I, recolor(2, merge(right)))
  I = paint(I, recolor(1, merge(left)))
  return I
 
13.333333333333334, 3.6417184, def ifegdfadgaedeaaeijcfdajhdfgcjcbb(I):
  objs = objects(I, T, T, T)
  target = argmin(objs, size)
  I = paint(I, recolor(1, target))
  for obj in objs:
      if obj != target:
          if uppermost(obj) == uppermost(target):
              I = paint(I, recolor(2, obj))
          else:
              I = paint(I, recolor(1, obj))
  return I
 
14.666666666666666, 3.639611, def jhjffjhijcefecbcbbddidfhccdgjebb(I):
  objs = objects(I, T, T, T)
  target = argmin(objs, size)
  grouped = [(obj, position(obj, target)) for obj in objs if obj != target]
  right_objs = merge({obj for obj, pos in grouped if pos[1] == 1})
  left_objs = merge({obj for obj, pos in grouped if pos[1] == -1})
  I = paint(I, recolor(1, target))
  I = paint(I, recolor(2, right_objs))
  I = paint(I, recolor(1, left_objs))
  return I
 
8.333333333333334, 3.2751737, def ciefbfdijefieadcabibgbceecifhcae(I):
  objs = objects(I, T, T, T)
  target = argmin(objs, size)
  above = frozenset(obj for obj in objs if uppermost(obj) < uppermost(target))
  not_above = difference(objs, above)
  I = paint(I, recolor(1, target))
  I = paint(I, recolor(1, merge(not_above)))
  I = paint(I, recolor(2, merge(above)))
  return I
 
20.0, 4.243994, def fbfecdebdcbaeagbifhcfaaeddibfaeb(I):
  objs = objects(I, T, F, T)
  largest = argmax(objs, size)
  remaining_objs = remove(largest, objs)
  second_largest = argmax(remaining_objs, size)
  recolored_objs = apply(lambda o: branch(
      o == largest, 
      recolor(2, o), 
      branch(
          o == second_largest,
          recolor(1, o),
          o
      )
  ), objs)
  return paint(I, merge(recolored_objs)) 
 
14.666666666666666, 3.639611, def eibijbfcbdjaeddjaeacfhbhdcafcgeb(I):
  objs = objects(I, T, T, T)
  target = argmin(objs, size)
  return paint(I, merge(
    frozenset(recolor(branch(position(obj, target)[1] <= 0, 1, 2), obj) for obj in objs)
  ))
 
6.333333333333333, 3.5183573, def iahjbeagbjddefhbibagjhfecjdfbage(I):
  objs = objects(I, T, T, T)
  target = argmin(objs, size)
  return paint(I, merge(
    frozenset(recolor(1 if ulcorner(obj)[1] <= ulcorner(target)[1] else 2, obj) for obj in objs)
  ))
 
12.333333333333334, 3.9220572, def bbbigcebbdfbefjebheifgfacbbjdbhg(I):
  objs = objects(I, T, T, T)
  target = argmin(objs, size)
  return paint(I, merge(
    frozenset(recolor(branch(hmatching(obj, frozenset({(0, j) for j in range(ulcorner(target)[1] + 1)})), 1, 2), obj) for obj in objs)
  ))
 
17.0, 3.707816, def dedbicdecggdefcfaeddacgcffbdaifc(I):
  objs = objects(I, True, False, True)
  smallest = argmin(objs, size) 
  return paint(
    I, 
    merge(
      apply(
        lambda o: recolor(1 if ulcorner(o)[0] + ulcorner(o)[1] > ulcorner(smallest)[0] + ulcorner(smallest)[1] else 2, o), 
        objs
      )
    )
  )
 
8.666666666666666, 3.8086348, def jdbbgfcdaabhedbcibibchadedeiaebf(I):
  objs = objects(I, True, False, True)
  smallest = argmin(objs, size)
  return paint(
    I,
    merge(
      frozenset(
        recolor(1 if position(o, smallest) == (1,1) or position(o, smallest) == (-1,-1) else 2, o) for o in objs
      )
    )
  )
 
6.333333333333333, 3.5183573, def becdjcecjbejeihcbafdgfeehhcfbica(I):
  objs = objects(I, True, False, True)
  smallest = argmin(objs, size)
  return paint(
    I, 
    merge(
      apply(
        lambda o: recolor(2 if uppermost(o) < uppermost(smallest) and leftmost(o) > leftmost(smallest) else 1, o), 
        objs
      )
    )
  )
 
12.333333333333334, 2.6950018, def bjiajhdfcccfechhacheddddcaebdcda(I):
  objs = objects(I, True, False, True)
  smallest = argmin(objs, lambda o: ulcorner(o)[0] * 10 + ulcorner(o)[1])
  return paint(
    I, 
    merge(
      apply(
        lambda o: recolor(1 if (ulcorner(o)[0] > ulcorner(smallest)[0] and ulcorner(o)[1] >= ulcorner(smallest)[1]) or (ulcorner(o)[0] < ulcorner(smallest)[0] and ulcorner(o)[1] <= ulcorner(smallest)[1])  else 2, o), 
        objs
      )
    )
  )
 
14.0, 3.5391383, def bibdjhafdjbdebbdiiebeaeicbefiajh(I):
  objs = objects(I, T, T, T)  # Extract all objects
  target = argmin(objs, size)  # Find the smallest object
  others = difference(objs, {target})  # Get all objects except the smallest
  closest = argmin(others, lambda obj: manhattan(obj, target))  # Find the closest object to the smallest

  I = paint(I, recolor(1, target))  # Recolor the smallest to 1
  I = paint(I, recolor(2, closest))  # Recolor the closest to 2
  I = paint(I, recolor(1, merge(others - {closest})))  # Recolor the rest to 1
  return I
 
26.333333333333332, 8.516148, def abedaadccjajeafaieefddcigehgeeeb(I):
  objs = objects(I, T, T, T)
  target = next(iter(sorted(objs, key=size)))
  closest = min(((manhattan(obj, target), obj) for obj in objs if obj != target))[1] 

  I = underpaint(I, recolor(1, target))
  I = underpaint(I, recolor(2, closest))
  return I
 
12.666666666666666, 4.950131, def jfjbgdgjfjeeeafbbgjafecibcgacffa(I):
  objs = objects(I, T, T, T)
  target = argmin(objs, size)
  shifted_target = shift(target, position(argmin(objs,lambda o: ulcorner(o)[0] + ulcorner(o)[1]), target))
  return paint(I, merge(
    frozenset(recolor(branch(position(obj, shifted_target)[0] <= 0, 1, 2), obj) for obj in objs)
  ))
 
16.666666666666668, 3.1496851, def ddeibfcbcfajeiabaffbdccceejeahaf(I):
  objs = objects(I, T, T, T)
  target = argmin(objs, size)
  shift_direction = position(argmin(objs,lambda o: ulcorner(o)[0] + ulcorner(o)[1]), target)
  shifted_target = shift(target, (sign(shift_direction[0]), sign(shift_direction[1])))
  return paint(I, merge(
    frozenset(recolor(branch((position(obj, shifted_target)[0] <= 0 and shift_direction[0] != 0) or 
                             (position(obj, shifted_target)[1] <= 0 and shift_direction[1] != 0), 1, 2), obj) for obj in objs)
  ))
 
8.0, 4.0008693, def eabhbbhecjafeiffiehiecdjeeffbbee(I):
    objs = objects(I, T, T, T)
    target = argmin(objs, size)
    shifted_target = shift(target, position(extract(objs, lambda o: size(o) != size(target)), target)) 
    return paint(I, merge(
        frozenset(recolor(1 if ulcorner(obj)[1] <= ulcorner(shifted_target)[1] else 2, obj) for obj in objs)
    ))
 
12.0, 6.411169, def hfehbaecfdbfeaaibfcbefjaahbddbec(I):
    objs = objects(I, T, T, T)
    target = argmin(objs, size)
    shift_dir = position(extract(objs, lambda o: size(o) != size(target)), target)
    shifted_target = shift(target, (sign(shift_dir[0]), sign(shift_dir[1])))
    return paint(I, merge(
        frozenset(recolor(2 if (position(obj, shifted_target)[0] > 0 and shift_dir[0] > 0) or 
                              (position(obj, shifted_target)[1] > 0 and shift_dir[1] > 0) else 1, obj) for obj in objs)
    ))
 
8.666666666666666, 3.600362, def cdfibfeabchbeeijjefbdeffgbbaeiee(I):
    objs = objects(I, T, T, T)
    target = argmin(objs, size)
    c = centerofmass(target)
    return paint(I, merge(
        frozenset(recolor(1 if centerofmass(obj)[1] <= c[1] else 2, obj) for obj in objs)
    ))
 
8.666666666666666, 2.0638, def fbfffecfihjjeeaejfgjbadfaadccddb(I):
  objs = objects(I, True, False, True)
  smallest = argmin(objs, size)
  min_i, min_j = centerofmass(smallest)
  return paint(
    I, 
    merge(
      apply(
        lambda o: recolor(1 if (uppermost(o) <= min_i and leftmost(o) <= min_j) or (lowermost(o) >= min_i and rightmost(o) >= min_j) else 2, o),
        objs
      )
    )
  )
 
13.666666666666666, 3.5330045, def dabhbifccdhaefabibbeacefjaabefcc(I):
  objs = objects(I, True, False, True)
  smallest = argmin(objs, size)
  return paint(
    I,
    merge(
      apply(
        lambda o: recolor(1 if position(o, smallest) in {(1, -1), (1, 0), (1, 1), (0, -1)} else 2, o),
        objs
      )
    )
  )
 
10.0, 2.9627647, def hfbadceddhebeacjicibgeafcdfadjdg(I):
  objs = objects(I, True, False, True)
  smallest = argmin(objs, size)
  s_center = center(smallest)
  return paint(I, merge(apply(lambda o: recolor(1 if both(leftmost(o) <= s_center[1], uppermost(o) <= s_center[0]) else 2, o), objs))) 
 
12.0, 5.0993967, def hebfchagjgadeibaieeeeiagacbbgdad(I):
  objs = objects(I, True, False, True)
  smallest = argmin(objs, size)
  return paint(
    I, 
    merge(
      apply(
        lambda o: recolor(2 if any(contained(index, toindices(smallest)) for index in ((uppermost(o)-1, leftmost(o)), (uppermost(o), leftmost(o)-1))) else 1, o),
        objs
      )
    )
  )
 
13.666666666666666, 5.6938777, def cfdaffdeahcdefibjedahhfcbajdeaif(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  largest = argmax(objs, size)
  lr_largest = lrcorner(largest)
  def recolor_func(obj):
    if obj == largest:
      return 2
    return 1 if all(ulcorner(obj)[i] < lr_largest[i] for i in (0, 1)) else 2
  return paint(I, merge(apply(lambda o: recolor(recolor_func(o), toindices(o)), objs)))
 
16.333333333333332, 2.9067953, def ccaaabeiecehedegaajjefcijfbbfbce(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  largest = argmax(objs, size)
  grid_height = len(I)
  grid_width = len(I[0])
  def recolor_func(obj):
    if obj == largest:
      return 2
    return 1 if sum(ulcorner(obj)) < sum((grid_height - 1, grid_width - 1)) - sum(lrcorner(largest)) else 2
  return paint(I, merge(apply(lambda o: recolor(recolor_func(o), toindices(o)), objs)))
 
12.0, 5.432821, def bfcfahecdicaeabjaagiiceiajbhbbhe(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  largest = argmax(objs, size)
  def recolor_func(obj):
    if obj == largest:
      return 2
    center_obj = centerofmass(obj)
    center_largest = centerofmass(largest)
    return 1 if center_obj[0] + center_obj[1] < center_largest[0] + center_largest[1] else 2
  return paint(I, merge(apply(lambda o: recolor(recolor_func(o), toindices(o)), objs)))
 
15.333333333333334, 3.8765285, def ibbejicdjjcfecjdjcafcfehadchddhd(I):
  objs = objects(I, T, T, T)
  rightmost_values = apply(rightmost, objs)
  largest_rightmost = maximum(rightmost_values)
  left_objs = sfilter(objs, lambda obj: rightmost(obj) < largest_rightmost)
  right_objs = sfilter(objs, lambda obj: rightmost(obj) > largest_rightmost)
  I = paint(I, recolor(1, merge(left_objs)))
  I = paint(I, recolor(2, merge(right_objs)))
  return I
 
15.333333333333334, 3.7798753, def jfbfdgbfbbjbejdeaffaeieddjjaghjj(I):
  objs = sorted(objects(I, T, T, T), key=rightmost)
  largest_rightmost_obj = argmax(objs, rightmost)
  i = objs.index(largest_rightmost_obj)
  left_objs = merge(objs[:i])
  right_objs = merge(objs[i+1:])
  I = paint(I, recolor(1, left_objs))
  I = paint(I, recolor(2, right_objs))
  return I
 
15.333333333333334, 17.56461, def jcedjjdfcbfbebceigaicgaedhgddfaf(I):
    objs = objects(I, T, T, T)
    largest_rightmost = max(map(rightmost, objs))
    for obj in objs:
        color_to_apply = 1 if rightmost(obj) < largest_rightmost else 2 if rightmost(obj) > largest_rightmost else 0
        I = paint(I, recolor(color_to_apply, obj))
    return I 
 
18.0, 3.65279, def gbdiebgcceggejgeicfdafeecbdjbaha(I):
  objs = objects(I, T, T, T)
  target = argmin(objs, size)
  return paint(I, merge(
    frozenset(recolor(1 if ulcorner(obj)[0] < ulcorner(target)[0] else 2, obj) for obj in objs)
  ))
 
11.666666666666666, 4.281732, def fgedaidbgaadecfdjfgfddedabfcadcj(I):
  objs = objects(I, T, T, T)
  target = argmin(objs, size)
  return paint(I, merge(
    frozenset(recolor(branch(ulcorner(obj)[1] < ulcorner(target)[1], 1, 2), obj) for obj in objs)
  ))
 
10.0, 3.7600698, def fcbaeefcdbbdefddifdddgaafcbeacee(I):
  objs = objects(I, T, T, T)
  target = argmin(objs, lambda o: width(o) * height(o)) 
  return paint(I, merge(
    frozenset(recolor(1 if leftmost(obj) < leftmost(target) else 2, obj) for obj in objs)
  ))
 
6.333333333333333, 1.9767926, def gcgbefbcgaghedaeaadffbcbehhaegde(I):
  objs = objects(I, T, T, T)
  ts = sorted(objs, key=size)
  target = ts[0]
  return paint(I, merge(
    frozenset(recolor(1 if obj in ts[:len(ts)//2] else 2, obj) for obj in objs)
  ))
 
6.666666666666667, 4.1920857, def dbadhdbiagcdehjcbbaabacjejedfecg(I):
  objs = objects(I, T, T, T)
  target = argmin(objs, size)
  f = lambda o: 1 if manhattan(o, target) <= width(target) else 2
  return paint(I, merge(apply(lambda o: recolor(f(o), o), objs)))
 
7.333333333333333, 2.6297357, def ffjebcfifadcecghjabdhiabidiadbbg(I):
  objs = objects(I, True, False, True)
  smallest = argmin(objs, size)
  return paint(
    I, 
    merge(
      frozenset(
        recolor(2 if (centerofmass(o)[0] < centerofmass(smallest)[0]) and (centerofmass(o)[1] > centerofmass(smallest)[1]) else 1, o) for o in objs
      )
    )
  )
 
14.333333333333334, 7.11588, def hiabgefhgajaeeccibacfcdchbebfehf(I):
  objs = objects(I, True, False, True)
  smallest = argmin(objs, size)
  return paint(
    I,
    merge(
      apply(
        lambda o: branch(uppermost(o) > uppermost(smallest), recolor(1, o), recolor(2, o)) if leftmost(o) > leftmost(smallest) else recolor(2, o),
        objs
      )
    )
  ) 
 
12.666666666666666, 6.493736, def cbdefeccafifecaficjacccccajbecgb(I):
  objs = objects(I, True, False, True)
  smallest = argmin(objs, size)
  return paint(
    I, 
    merge(
      frozenset(
        branch(any((i + 1, j + 1) in toindices(smallest) for i, j in toindices(o)), recolor(1, o), recolor(2, o)) for o in objs 
      )
    )
  )
 
12.666666666666666, 5.182682, def ccfeacccafdbeacfbcfdbeegeedebfjh(I):
  objs = objects(I, T, T, T)
  largest_obj = argmax(objs, size)
  above = frozenset(obj for obj in objs if uppermost(obj) < uppermost(largest_obj))
  below = frozenset(obj for obj in objs if uppermost(obj) >= uppermost(largest_obj))
  I = paint(I, recolor(1, merge(above)))
  I = paint(I, recolor(2, merge(below)))
  return I
 
9.666666666666666, 2.8973804, def ggachgbideijefbgicjgfdeaggbacffd(I):
  objs = objects(I, True, False, True)
  min_idx = argmin(objs, lambda o: (uppermost(o), -leftmost(o)))
  return paint(I, merge(
      frozenset(recolor(2 if o == min_idx else 1, o) for o in objs)
  ))
 
10.666666666666666, 3.308525, def dcbiahdjdfaieaccbaccegffcdefibfh(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  largest = argmax(objs, size)
  def recolor_func(obj):
    if obj == largest:
      return 2
    return 1 if sum(centerofmass(obj)) < sum(centerofmass(toindices(I))) else 2
  return paint(I, merge(apply(lambda o: recolor(recolor_func(o), toindices(o)), objs)))
 
16.333333333333332, 3.3924615, def gacbbfjefcifeccajggcadgdbdaiagab(I):
  objs = objects(I, T, T, T)
  largest_obj = argmax(objs, size)
  below = frozenset(obj for obj in objs if uppermost(obj) > uppermost(largest_obj)) 
  I = paint(I, recolor(2, merge(below)))
  I = paint(I, recolor(1, merge(difference(objs, below))))
  return I
 
17.333333333333332, 4.5120544, def ibdfcbiefdcgefggiiabfdbaebciidei(I):
  objs = objects(I, T, T, T)
  def custom_key(obj):
    return (uppermost(obj), -size(obj))
  largest_obj = argmax(objs, custom_key)
  above = frozenset(obj for obj in objs if custom_key(obj) < custom_key(largest_obj))
  I = paint(I, recolor(1, merge(above)))
  I = paint(I, recolor(2, merge(difference(objs, above))))
  return I
 
12.0, 5.432821, def befhecbijdadebfjbdcifgfhgbacdefc(I):
  objs = objects(I, T, T, T)
  target = argmax(objs, size)
  return paint(I, merge(
    frozenset(recolor(1 if ulcorner(obj)[0] + ulcorner(obj)[1] < ulcorner(target)[0] + ulcorner(target)[1] else 2, obj) for obj in objs)
  ))
 
9.666666666666666, 4.313835, def caajgijddeecedbeahgjfcbicicdeeba(I):
  objs = objects(I, T, T, T)
  target = argmax(objs, size)
  return paint(I, merge(
    frozenset(recolor(1 if centerofmass(obj)[0] < centerofmass(target)[0] or centerofmass(obj)[1] < centerofmass(target)[1] else 2, obj) for obj in objs)
  ))
 
16.666666666666668, 4.370778, def difdaffgbfacehgjjfgfecadgbbdffbj(I):
  objs = objects(I, T, T, T)
  target = argmax(objs, size)
  return paint(I, merge(
    frozenset(recolor(1 if position(obj, target) in {(0, -1), (-1, 0), (-1, -1)} else 2, obj) for obj in objs)
  ))
 
16.0, 18.980509, def ffdabeifdiegeaecjaicacgbcccafecj(I):
  objs = objects(I, T, T, T)
  target = argmax(objs, size)
  return paint(I, merge(
    frozenset(recolor(branch(obj == target, mostcolor(I), 1 if sum(ulcorner(obj)) < sum(ulcorner(target)) else 2), obj) for obj in objs)
  ))
 
9.666666666666666, 3.8243518, def heeddadedbbeeeddjdchdiihfehihcge(I):
  objs = objects(I, T, T, T)
  target = argmax(objs, lambda obj: lrcorner(obj)[0] + lrcorner(obj)[1])
  return paint(I, merge(
    frozenset(recolor(1 if sum(ulcorner(obj)) < sum(ulcorner(target)) else 2, obj) for obj in objs)
  ))
 
10.333333333333334, 2.463814, def ffbcdeajdgicebciibfbhaadfecffcig(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  largest_obj = argmax(objs, lambda obj: len(obj)) 
  def recolor_func(obj):
    if obj == largest_obj: return recolor(2, toindices(obj))
    center_i, center_j = centerofmass(obj)
    max_i, max_j = len(I) - 1, len(I[0]) - 1
    return recolor(1 if (center_i + center_j) < (max_i + max_j) / 2 else 2, toindices(obj))
  return paint(I, merge(apply(recolor_func, objs)))
 
10.333333333333334, 2.6454494, def cecfcabiefedejgdjicfecibfhcbhedf(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  largest = argmax(objs, size)
  def process_object(obj):
    color_value = 2 if obj == largest else 1 if sum(ulcorner(obj)) < sum(lrcorner(obj)) else 2
    return recolor(color_value, toindices(obj))
  return paint(I, merge(apply(process_object, objs)))
 
14.0, 3.2208457, def ddabiadcihedehfcjhcadaabeadedjii(I):
  objs = objects(I, T, T, T)
  largest_obj = argmax(objs, size)
  not_above = frozenset(obj for obj in objs if uppermost(obj) >= uppermost(largest_obj)) # Identifying objects NOT above
  I = paint(I, recolor(1, merge(difference(not_above, {largest_obj})))) # Coloring objects NOT above and not the largest
  I = paint(I, recolor(2, largest_obj))
  return I
 
12.0, 3.611801, def fecddjicfjheebieahdihiafajgaddfa(I):
  objs = objects(I, T, T, T)
  largest_obj = argmax(objs, size)
  other_objs = difference(objs, {largest_obj})
  above = frozenset(obj for obj in other_objs if uppermost(obj) < uppermost(largest_obj)) # Identifying objects above from other objects
  I = paint(I, recolor(2, largest_obj))
  I = paint(I, recolor(1, merge(other_objs)))
  I = paint(I, recolor(2, merge(above)))
  return I
 
15.666666666666666, 5.8540697, def efdacfjiahbaeegbidddejddeahjbcag(I):
  objs = objects(I, T, T, T)
  target_x = leftmost(argmin(objs, size))
  return paint(I, merge(
    frozenset(recolor(2 if any(j >= target_x for i, j in toindices(obj)) else 1, obj) for obj in objs)
  ))
 
14.333333333333334, 7.11588, def bafiigcfafhdecfdaajgegfcggdbahae(I):
  objs = objects(I, T, T, T)
  min_j = min(j for obj in objs for i, j in toindices(obj))
  return paint(I, merge(
    frozenset(recolor(1 if any(j < min_j for i, j in toindices(obj)) else 2, obj) for obj in objs)
  ))
 
8.666666666666666, 3.600362, def aiffahecgadfecbjafefdhdddjffifhi(I):
  objs = objects(I, True, False, True)
  smallest = argmin(objs, size)
  return paint(I, merge(
    apply(lambda o: recolor(2 if rightmost(o) > rightmost(smallest) else 1, o), objs)
  ))
 
17.666666666666668, 4.2174726, def bfifccejcfdaeabfafaefdfcciihgcdd(I):
  objs = objects(I, True, False, True)
  s = argmin(objs, size)
  return paint(I, merge(apply(lambda o: recolor(1 if any(j > rightmost(s) for _, (_, j) in o) else 2, o), objs)))
 
15.666666666666666, 3.7492101, def cfafjdijfgdhebibacegeaggffehacac(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  largest_obj = argmax(objs, lambda obj: width(obj) * height(obj))
  center_i, center_j = divide(shape(I), 2)
  def recolor_func(obj):
    obj_center = centerofmass(obj)
    if obj == largest_obj:
      return 2
    return 1 if (obj_center[0] < center_i and obj_center[1] < center_j) else 2
  return paint(I, merge(apply(lambda obj: recolor(recolor_func(obj), toindices(obj)), objs)))
 
12.0, 5.0993967, def efaagfbbiadgeadbacbfbhaebhbcfdfi(I):
  objs = objects(I, T, T, T)
  smallest = argmin(objs, size)
  above = frozenset((v, (i, j)) for v, (i, j) in merge(objs) if i < uppermost(smallest))
  I = paint(I, recolor(1, smallest)) 
  I = paint(I, recolor(2, above)) 
  I = paint(I, recolor(1, merge(difference(objs, {smallest})))) 
  return I
 
11.333333333333334, 5.3820915, def eccdefbhbiaaeeeabhggbhadfjejjjbh(I):
  objs = objects(I, T, T, T)
  smallest = argmin(objs, size)
  return paint(I, merge(
      frozenset(recolor(1 if obj == smallest else 2, obj) for obj in objs)
  ))
 
11.666666666666666, 4.281732, def fddcehddeeggebacaabdeadgidfhajfe(I):
  objs = objects(I, True, False, True)
  smallest = argmin(objs, size)
  return paint(I, merge(
      apply(lambda o: recolor(1 if leftmost(o) < leftmost(smallest) else 2, o), objs)
  ))
 
14.0, 5.593286, def gfibidddecacedidibebadfebjbecjef(I):
  objs = objects(I, True, False, True)
  smallest = argmin(objs, size)
  return paint(I, 
               merge([recolor(1, merge(sfilter(objs, lambda o: centerofmass(o)[1] < centerofmass(smallest)[1]))), 
                      recolor(2, merge(sfilter(objs, lambda o: centerofmass(o)[1] >= centerofmass(smallest)[1])))
                     ]))
 
13.0, 3.1096063, def bfjgbcdefdbcegcfbbjefbfcfbbcffdc(I):
  objs = objects(I, True, False, True)
  smallest = argmin(objs, size)
  return paint(I, merge([
      recolor(1, merge([o for o in objs if any(i < leftmost(smallest) for i,j in toindices(o))])),
      recolor(2, merge([o for o in objs if all(i >= leftmost(smallest) for i,j in toindices(o))]))
  ]))
 
10.0, 2.7902849, def ffegigjcbdebefddbfajejejfahieade(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  largest_obj = argmax(objs, size)
  grid_center = divide(shape(I), 2)
  def recolor_func(obj):
    if obj == largest_obj: return 2
    return 1 if sum(ulcorner(obj)) < sum(grid_center) else 2
  return paint(I, merge(apply(lambda o: recolor(recolor_func(o), toindices(o)), objs)))
 
13.333333333333334, 4.0840025, def jgcajcejfiaaecdjiieecdcjbcjafaai(I):
  objs = objects(I, T, T, T)
  smallest = argmin(objs, size)
  I = paint(I, recolor(1, smallest))
  for obj in objs:
    if obj != smallest and any(i < uppermost(smallest) for i, j in toindices(obj)):
      I = paint(I, recolor(2, obj))
  return I
 
19.0, 4.110835, def debceeicedhdedeeagbfbhefibicgjdc(I):
  objs = objects(I, T, F, T)
  if size(objs) < 2: return I
  largest_size = valmax(objs, size)
  second_largest_size = valmax(sfilter(objs, lambda obj: size(obj) != largest_size), size)
  return paint(paint(I, recolor(2, extract(objs, matcher(size, largest_size)))), recolor(1, extract(objs, matcher(size, second_largest_size))))
 
12.333333333333334, 3.7690935, def ibbgeccadccfeajgbiegigadjihcfaed(I):
  objs = objects(I, T, T, T)
  min_j = minimum(frozenset(ulcorner(obj)[1] for obj in objs))
  return paint(I, merge(
    frozenset(recolor(1 if ulcorner(obj)[1] <= min_j else 2, obj) for obj in objs)
  ))
 
20.0, 4.583885, def iecacbhaeaeaeffdifedeadcjafdagcf(I):
  objs = objects(I, True, False, True)
  smallest = argmin(objs, size)
  min_i, min_j = ulcorner(smallest) 
  return paint(
    I, 
    merge(
      apply(
        lambda o: recolor(2 if (uppermost(o) > min_i) and (leftmost(o) > min_j) else 1 if uppermost(o) < min_i else color(o), o),
        objs
      )
    )
  )
 
17.333333333333332, 4.539847, def aagfdbacejadedbbabdaddbaficidaed(I):
  objs = objects(I, True, False, True)
  smallest = argmin(objs, lambda o: (uppermost(o), leftmost(o)))
  return paint(
    I, 
    merge(
      apply(
        lambda o: recolor(2 if position(o, smallest) == (1, 1) else 1 if position(o, smallest)[0] == -1 else color(o), o),
        objs
      )
    )
  )
 
21.0, 4.006603, def gicbajbgfddeejcfichbaadeaacffgde(I):
  objs = objects(I, True, False, True)
  smallest = argmin(objs, size)
  sm_center = centerofmass(smallest)
  return paint(
    I,
    merge(
      apply(
        lambda o: recolor(2 if (centerofmass(o)[0] > sm_center[0]) and (centerofmass(o)[1] > sm_center[1]) else 1 if centerofmass(o)[0] < sm_center[0] else color(o), o),
        objs
      )
    )
  )
 
16.0, 4.2409477, def bghhffafddddebffbigccfddbdgbigcd(I):
  objs = objects(I, True, False, True)
  smallest = argmin(objs, lambda o: (uppermost(o) + leftmost(o))) 
  return paint(
    I, 
    merge(
      apply(
        lambda o: recolor(
          2 if (uppermost(o) + leftmost(o)) > (uppermost(smallest) + leftmost(smallest)) else 1, 
          o
        ), 
        objs
      )
    )
  )
 
11.333333333333334, 4.181499, def cbjeafbjcbbbeigdaidadddhjbjajbie(I):
  objs = objects(I, T, T, T)
  smallest = argmin(objs, size)
  above = frozenset(obj for obj in objs if uppermost(obj) < uppermost(smallest))
  I = paint(I, recolor(1, merge(objs)))
  I = paint(I, recolor(2, merge(above.union({smallest})))) 
  return I
 
9.333333333333334, 3.0508392, def hdfaeighefiieafdjcfahbeideaefgaj(I):
  objs = objects(I, T, T, T)
  target = argmin(objs, size)
  def recolor_func(obj):
    if obj == target: return obj 
    return recolor(1 if ulcorner(obj)[0] + ulcorner(obj)[1] <= ulcorner(target)[0] + ulcorner(target)[1] else 2, obj)
  return paint(I, merge(apply(recolor_func, objs)))
 
8.0, 2.9410574, def iaibjfhffdaceafdafiajcfjcbeafbcf(I):
  objs = objects(I, T, T, T)
  target = argmin(objs, size)
  def recolor_func(obj):
    if obj == target: return obj
    return recolor(1 if any(i <= ulcorner(target)[0] and j <= ulcorner(target)[1] for i, j in toindices(obj)) else 2, obj)
  return paint(I, merge(apply(recolor_func, objs)))
 
12.666666666666666, 4.612767, def ffajgjgjefadebjdidcicibgbihcbede(I):
  objs = objects(I, T, T, T)
  target = argmin(objs, size)
  left_objs = frozenset(obj for obj in objs if rightmost(obj) < leftmost(target))
  right_objs = objs - left_objs - {target}
  return paint(I, merge(
    {recolor(1, merge(left_objs)),
     recolor(2, merge(right_objs)),
     target}))
 
12.0, 4.2274556, def abfejjfgefbceaieacbfachbgfhbcgcc(I):
  objs = objects(I, T, T, T)
  target = argmin(objs, size)
  def recolor_func(obj):
    if obj == target: return obj
    return recolor(2 if any(i >= lrcorner(target)[0] or j >= lrcorner(target)[1] for i, j in toindices(obj)) else 1, obj)
  return paint(I, merge(apply(recolor_func, objs)))
 
12.333333333333334, 3.1537266, def icddejccdhfceadebacafdfaadaeebfh(I):
  objs = objects(I, T, T, T)
  s = argmin(objs, lambda obj: (uppermost(obj), size(obj)))
  return paint(I, merge(
    frozenset(recolor(1 if obj == s else (2 if uppermost(obj) < uppermost(s) else color(obj)), obj) for obj in objs)
  ))
 
23.333333333333332, 51.607433, def ehgjfgebjabeedfdjahadbcddgjfhdai(I):
  objs = objects(I, T, T, T)
  target = argmax(objs, lambda o: lrcorner(o)[0] + lrcorner(o)[1]) 
  return paint(I, merge(apply(lambda o: recolor(color(target) if o == target else other(palette(I), color(target)), o), objs))) 
 
24.666666666666668, 57.6542, def bfebedgjejjcedeebfghiafajhediegc(I):
    objs = objects(I, T, T, T)
    target = argmax(objs, lambda o: lrcorner(o)[1] * 100 + lrcorner(o)[0])  
    other_color = lambda o: next(iter(palette(o) - {color(target)})) 
    return paint(I, merge(apply(lambda o: recolor(color(o) if o == target else other_color(I), o), objs)))
 
20.333333333333332, 48.58443, def cdddfaehcffgeebcjfbfffagifafcccc(I):
  objs = objects(I, True, True, True)
  target = sorted(objs, key=lambda o: (lowermost(o), rightmost(o)))[-1]
  other_color = next(iter(palette(I) - {color(target)}))
  return paint(I, merge({recolor(other_color, obj) if obj != target else obj for obj in objs})) 
 
15.333333333333334, 3.1066573, def bagjcahfeihfejifabeeecdefaedegbb(I):
    objs = objects(I, T, T, T)
    target = max(objs, key=lambda o: (lrcorner(o)[0], lrcorner(o)[1]))
    return paint(I, merge([recolor(1 if color(obj) == color(target) else 2, obj) for obj in objs]))
 
10.333333333333334, 2.9364161, def dffadgfabjifeedfjegefaieaefcdefg(I):
    objs = objects(I, univalued=True, diagonal=False, without_bg=True)
    largest_obj = argmax(objs, size)
    grid_center = divide(shape(I), 2)
    def recolor_func(obj):
      center = centerofmass(obj)
      if obj == largest_obj: return 2
      return 1 if (center[0] <= grid_center[0] or center[1] <= grid_center[1]) else 2
    return paint(I, merge(apply(lambda o: recolor(recolor_func(o), toindices(o)), objs)))
 
6.333333333333333, 2.1278014, def bbchciigeidceghabfdeefjdgdcbcicb(I):
  objects_set = objects(I, True, False, True)
  largest_object = argmax(objects_set, size)
  grid_height, grid_width = shape(I)
  grid_center = (grid_height // 2, grid_width // 2)
  def recolor_object(object_to_recolor):
    if object_to_recolor == largest_object:
      return recolor(2, toindices(object_to_recolor))
    else:
      object_upper_left_corner = ulcorner(object_to_recolor)
      if (object_upper_left_corner[0] < grid_center[0]) or (object_upper_left_corner[1] < grid_center[1]):
        return recolor(1, toindices(object_to_recolor))
      else:
        return recolor(2, toindices(object_to_recolor))
  recolored_objects = apply(recolor_object, objects_set)
  output_grid = paint(I, merge(recolored_objects))
  return output_grid
 
14.666666666666666, 3.639611, def bjjdhecddbdfejebbceihbbjheieebfc(I):
  objs = objects(I, T, T, T)
  target = argmin(objs, size)
  return paint(I, merge(
    frozenset(recolor(2 if ulcorner(obj)[1] < ulcorner(target)[1] else 1, obj) for obj in objs)
  ))
 
11.666666666666666, 4.2817326, def cfeccedaabfceebbbjfbdeibdaachieb(I):
  objs = objects(I, T, T, T)
  target_j = ulcorner(argmin(objs, size))[1]
  recolor_fn = lambda obj: recolor(1 if any(j < target_j for i, j in toindices(obj)) else 2, obj)
  return paint(I, merge(apply(recolor_fn, objs)))
 
10.333333333333334, 2.6454494, def fcfijhfcbbcfefabibdibdecgebceaif(I):
  target_color = I[-1][-1] # Directly obtain color at the bottom right corner
  other_color = next(c for c in palette(I) if c != target_color) # Find the other color
  return replace(replace(I, target_color, 0), other_color, other_color) # Replace colors to achieve the transformation 
 
13.0, 3.8457143, def habfggadjhhhejcajcaaeicbcaahedcf(I):
  objs = objects(I, True, False, True)
  largest = argmax(objs, size)
  li, lj = ulcorner(largest)
  ri, rj = lrcorner(largest)
  def recolor_fn(obj):
    ui, uj = ulcorner(obj)
    return recolor(1 if ui < ri and uj < rj else 2, toindices(obj))
  recolored = apply(recolor_fn, objs)
  return paint(I, merge(recolored))
 
11.333333333333334, 4.710883, def hecdeciaifgieabaabddgecgdgagcdhg(I):
  objs = objects(I, True, False, True)
  largest = argmax(objs, size)
  lc = centerofmass(largest)
  def recolor_fn(obj):
    oc = centerofmass(obj)
    return recolor(1 if oc[0] < lc[0] or oc[1] < lc[1] else 2, toindices(obj))
  recolored = apply(recolor_fn, objs)
  return paint(I, merge(recolored))
 
13.0, 5.33047, def djeifeafeecgeedfbgiihffiefifjeie(I):
    objs = objects(I, True, False, True)
    largest = argmax(objs, size)
    def recolor_fn(obj):
        return recolor(2 if any(i >= uppermost(largest) and j >= leftmost(largest) for i, j in toindices(obj)) else 1, toindices(obj))
    recolored = apply(recolor_fn, objs)
    return paint(I, merge(recolored))
 
14.666666666666666, 2.7023716, def cgcfgcddbeiieajibbbfecdagiafdcdb(I):
  objs = objects(I, True, False, True)
  largest = argmax(objs, size)
  def recolor_fn(obj):
    return recolor(1 if position(obj, largest) in {(1, -1), (-1, -1), (-1, 1)} else 2, toindices(obj))
  recolored = apply(recolor_fn, objs)
  return paint(I, merge(recolored))
 
16.0, 4.2409477, def acbdgedfhdcfedcjjdbfcdfdhhfeagec(I):
  objs = objects(I, True, False, True)
  largest = argmax(objs, lambda o: (size(o), -uppermost(o), -leftmost(o)))
  def recolor_fn(obj):
    return recolor(2 if any((i,j) not in backdrop(largest) for i, j in toindices(obj)) else 1, toindices(obj))
  recolored = apply(recolor_fn, objs)
  return paint(I, merge(recolored))
 
13.333333333333334, 5.5806184, def ebfcaeiaefegecfdiebfceeebdcaffbf(I):
  objs = objects(I, T, T, T)
  target_j = leftmost(argmin(objs, size))
  return paint(I, merge(
    frozenset(recolor(2 if any(j > target_j for i, j in toindices(obj)) else 1, obj) for obj in objs)
  ))
 
9.0, 3.6422298, def jaffcbeedeagebbbidificceaceedhic(I):
    objs = objects(I, True, True, True)
    target = argmin(objs, size)
    return paint(I, merge(
        frozenset(
            recolor(2, obj) if any((i, j) for i, j in toindices(obj) if j > rightmost(target)) else obj
            for obj in objs
        )
    ))
 
11.333333333333334, 4.9312925, def bbaehbfhcgffedfejafjcecdfcefhdbh(I):
  objs = objects(I, True, True, True)
  target = argmin(objs, lambda obj: width(obj) * height(obj))
  return paint(I, merge(
      frozenset(
          recolor(2, obj) if any(j > leftmost(target) for i,j in toindices(obj)) else obj 
          for obj in objs
      )
  ))
 
13.333333333333334, 19.025427, def aabcbbejdcfaedjebeejaeiadbcfccaj(I):
  objs = objects(I, T, T, T)
  smallest = argmin(objs, size)
  above = lambda obj: any(i for i, j in toindices(obj) if i < uppermost(smallest))
  return paint(I, merge(
    frozenset(recolor(1 if obj == smallest else (2 if above(obj) else 0), obj) for obj in objs)
  ))
 
11.666666666666666, 4.2817326, def dcehgbegfaifedjajajhdgbiadefbfbc(I):
  objs = objects(I, T, T, T)
  min_col = leftmost(argmin(objs, size))
  return paint(I, merge([recolor(2 if leftmost(obj) >= min_col else 1, obj) for obj in objs]))
 
10.666666666666666, 3.9771445, def gcfaabcbcbjdeaffijbffjcejachbfag(I):
    objs = objects(I, T, T, T)
    smallest_obj = argmin(objs, size)
    return paint(I, merge([recolor(2, obj) if obj != smallest_obj and any([j >= leftmost(smallest_obj) for i, j in toindices(obj)]) else obj for obj in objs]))
 
10.666666666666666, 2.2214434, def dcechcaecehaeeebiccajbjbfcbcfaej(I):
    objs = objects(I, T, T, T) 
    obj1 = argmin(objs, lambda o: ulcorner(o)[0] + ulcorner(o)[1]) # Object closest to top-left 
    obj2 = other(objs, obj1) # The other object
    return paint(paint(I, obj1), recolor(color(obj1), obj2)) # Paint one, then recolor the other
 
12.333333333333334, 3.4885552, def gjhcbfbdgabfehiciddjbdcbjcfbgebe(I):
  objs = objects(I, T, T, T)
  topLeftCorners = apply(ulcorner, objs)
  closestCorner = argmin(topLeftCorners, lambda c: c[0] + c[1])
  target = extract(objs, lambda o: ulcorner(o) == closestCorner) 
  other_color = color(other(objs, target))
  return paint(I, merge({recolor(other_color, o) if o != target else o for o in objs}))
 
13.333333333333334, 5.5806184, def aaiefbddfjfieahjbjcgdcgifeacaifa(I):
  objs = objects(I, T, T, T)
  obj1 = argmin(objs, lambda o: sum(centerofmass(o))) # Object with the 'lower' center of mass
  obj2 = other(objs, obj1)
  return paint(I, merge({recolor(color(obj1), o) if o != obj1 else o for o in objs})) # Recolor based on lower center
 
6.333333333333333, 1.7236917, def ecjbbejadaacebbdjageddfbeedcaggh(I):
  objs = objects(I, T, T, T)
  if size(objs) <= 1: return I # Handle single or no object cases
  obj1, obj2 = sorted(objs, key=lambda o: (ulcorner(o)[0], ulcorner(o)[1]))[:2] # Sort by top-leftness
  return paint(paint(I, obj1), recolor(color(obj1), obj2)) 
 
9.0, 4.1536636, def jbacjdbbhjjheigdadcddhdjbcbbiead(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  grid_center_j = centerofmass(asindices(I))[1]
  def recolor_func(obj):
    return color(obj) if centerofmass(obj)[1] < grid_center_j else 2
  return paint(I, merge(apply(lambda o: recolor(recolor_func(o), toindices(o)), objs)))
 
10.333333333333334, 3.636939, def efbebjfcffiaeffcadagjcbccdbbbffa(I):
  objs = objects(I, True, False, True)
  grid_center_j = width(I) // 2
  def recolor_func(obj):
    return color(obj) if rightmost(obj) < grid_center_j else 2 
  return paint(I, merge(apply(lambda o: recolor(recolor_func(o), toindices(o)), objs)))
 
9.0, 3.310806, def afdeegjddcbjeeceajgddfdfeadfdeda(I):
  left_half, right_half = hsplit(I, 2)
  right_objs = objects(right_half, True, False, True)
  recolored_right = merge(apply(lambda o: recolor(2, toindices(o)), right_objs))
  return hconcat(left_half, paint(right_half, recolored_right))
 
12.333333333333334, 3.7690935, def cafebdeabddeecjfijeabebadcdbcfgc(I):
  objs = objects(I, T, T, T)
  target = argmin(objs, lambda obj: ulcorner(obj)[1]) 
  return paint(I, merge(
    frozenset(recolor(1 if obj == target or leftmost(obj) < leftmost(target) else 2, obj) for obj in objs)
  ))
 
9.333333333333334, 1.9819547, def dfjbhebgddjfeagbbjfadfcfbadfafhj(I):
  objs = objects(I, T, T, T)
  smallest = argmin(objs, size)
  above = frozenset(obj for obj in objs if all(i < uppermost(smallest) for i, j in toindices(obj)))
  return paint(I, merge([recolor(1, smallest), recolor(2, merge(above))]))
 
14.333333333333334, 7.11588, def fgfacecbbfbeejbfjdbciiabcffhidaj(I):
  objs = objects(I, T, T, T)
  smallest = argmin(objs, size)
  above_indices = mfilter(objs, lambda obj: any(i < uppermost(smallest) for i, _ in obj))
  return paint(I, merge([
     recolor(1, smallest),
     recolor(2, toobject(above_indices, I))
  ]))
 
12.333333333333334, 3.1537266, def bdgceibjbehaeaiebafdjjcbcacjjjed(I):
  objs = objects(I, T, T, T)
  if size(objs) <= 1: return I  # Handle single or no object cases
  objs_sorted = order(objs, size)
  smallest_obj = first(objs_sorted)
  second_smallest_obj = first(remove(smallest_obj, objs_sorted))
  return paint(I, recolor(color(smallest_obj), second_smallest_obj))
 
11.0, 2.9503443, def fgabfefejffdeifhaiageeeadbeaefeh(I):
  objects_set = objects(I, True, False, True)
  largest_object = argmax(objects_set, size)
  grid_height, grid_width = shape(I)
  grid_center = (grid_height // 2, grid_width // 2)
  def recolor_object(obj):
    if obj == largest_object:
      return recolor(color(obj), toindices(obj))
    elif ulcorner(obj)[0] < grid_center[0] and ulcorner(obj)[1] < grid_center[1]:
      return recolor(1, toindices(obj))
    else:
      return recolor(2, toindices(obj))
  recolored_objects = apply(recolor_object, objects_set)
  O = paint(I, merge(recolored_objects))
  return O
 
11.666666666666666, 3.7969263, def dadefcahegfaeacfacgbaecbicegebii(I):
  objs = objects(I, True, False, True)
  largest = argmax(objs, size)
  center_i, center_j = divide(shape(I), 2)
  def recolor_logic(obj):
    if obj == largest:
      return recolor(color(obj), toindices(obj))
    elif all(i < center_i and j < center_j for i, j in toindices(obj)):
      return recolor(1, toindices(obj))
    else:
      return recolor(2, toindices(obj))
  O = paint(I, merge(apply(recolor_logic, objs)))
  return O
 
16.0, 4.209968, def ddgccadgaiaaecdabcadjahffbaabejj(I):
  grid_size = shape(I)
  grid_center = divide(grid_size, 2)
  def process_object(obj):
    if size(obj) == size(argmax(objects(I, True, False, True), size)):
      return recolor(color(obj), toindices(obj))
    elif max(i for i, j in toindices(obj)) < grid_center[0] and max(j for i, j in toindices(obj)) < grid_center[1]:
      return recolor(1, toindices(obj))
    else:
      return recolor(2, toindices(obj))
  O = paint(I, merge(apply(process_object, objects(I, True, False, True))))
  return O
 
8.333333333333334, 3.584623, def bfaaddjeaaceebafijecdaeieadcfahg(I):
  objs = objects(I, T, T, T)
  target = argmin(objs, lambda obj: width(obj) * height(obj))
  return paint(I, merge(
    frozenset(recolor(2 if ulcorner(obj)[1] > ulcorner(target)[1] else 1, obj) for obj in objs)
  ))
 
14.0, 5.593286, def hahccfaecifcehcdbdcdicdhhjeacfaj(I):
  objs = objects(I, T, T, T)
  target_center = centerofmass(argmin(objs, size))
  return paint(I, merge(
    frozenset(recolor(1 if centerofmass(obj)[1] < target_center[1] else 2, obj) for obj in objs)
  ))
 
14.333333333333334, 7.11588, def afbfhdbhccdjeejdadhbfibcajbibebc(I):
  objs = objects(I, T, T, T)
  sorted_objs = order(objs, lambda obj: leftmost(obj))
  target_index = next(i for i, obj in enumerate(sorted_objs) if size(obj) == size(sorted_objs[0]))
  return paint(I, merge(
    frozenset(recolor(1 if i < target_index else 2, obj) for i, obj in enumerate(sorted_objs))
  ))
 
11.333333333333334, 5.3820915, def aehheebgagdcefadjgcifgaahdfadcaj(I):
  objs = objects(I, T, T, T)
  smallest = argmin(objs, size)
  def recolor_fn(obj):
    if obj == smallest: return recolor(color(obj), obj)
    return recolor(2 if any(i < uppermost(smallest) for i, _ in obj) else 1, obj) 
  return paint(I, merge(apply(recolor_fn, objs)))
 
12.666666666666666, 2.8396144, def idfddghfhghbediejjfafbecdhbcbiia(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  largest_obj = argmax(objs, size)
  grid_height, grid_width = shape(I)
  grid_center = (grid_height // 2, grid_width // 2)
  def recolor_logic(obj):
    if obj == largest_obj:
      return color(obj) 
    obj_center = centerofmass(obj)
    if (obj_center[0] <= grid_center[0]) and (obj_center[1] <= grid_center[1]):
      return color(obj)
    else:
      return 2
  return paint(I, merge(apply(lambda o: recolor(recolor_logic(o), toindices(o)), objs))) 
 
10.333333333333334, 2.6454494, def jdehjdbchebfebecigbeagfdbcjcdfib(I):
  objs = fgpartition(I) 
  largest_obj = argmax(objs, size)
  h, w = shape(I)
  cx, cy = h // 2, w // 2
  def recolor_condition(obj):
    return color(obj) if (obj == largest_obj) or all((i <= cx and j <= cy) for i, j in toindices(obj)) else 2
  return paint(canvas(0, (h, w)), merge(apply(lambda o: recolor(recolor_condition(o), toindices(o)), objs)))
 
11.666666666666666, 2.499014, def afdffgecebbbehaebffgfdhdcaibdehf(I):
    objects_list = objects(I, True, False, True)
    largest_object = argmax(objects_list, size)
    grid_height, grid_width = shape(I)
    grid_center_row, grid_center_col = grid_height // 2, grid_width // 2
    output_grid = I 
    for obj in objects_list:
        if obj != largest_object:
            for value, (row, col) in obj:
                if row > grid_center_row or col > grid_center_col:
                    output_grid = fill(output_grid, 2, {(row, col)}) 
    return output_grid
 
10.666666666666666, 3.006657, def gbcffbfbbhafecgdbjeceajgbfbebajb(I):
  objs = objects(I, True, False, True)
  largest_obj = argmax(objs, size)
  h, w = shape(I)
  def process_object(obj):
    if obj == largest_obj:
      return obj
    ul = ulcorner(obj)
    lr = lrcorner(obj)
    if ul[0] > h // 2 or ul[1] > w // 2 or lr[0] > h // 2 or lr[1] > w // 2:
      return recolor(2, toindices(obj))
    return obj
  return paint(I, merge(apply(process_object, objs)))
 
6.666666666666667, 3.3851418, def ahifhcehfabcefeajfiejjabhbcdfdgh(I):
  objs = objects(I, True, False, True)
  if len(objs) < 2:
    return I
  ref_obj = argmin(objs, lambda obj: width(obj) * height(obj)) if colorcount(I, 1) != 1 else extract(objs, lambda obj: vline(obj))
  return paint(I, merge(
    frozenset(
      recolor(2 if ulcorner(obj)[1] > ulcorner(ref_obj)[1] else color(obj), obj) for obj in objs
    )
  ))
 
8.333333333333334, 2.3912451, def iddaafdgfjchebjaiciedefchdedicib(I):
  objs = objects(I, True, False, True)
  if len(objs) < 2: return I
  ref_obj = next((obj for obj in objs if vline(obj)), argmin(objs, lambda obj: width(obj) * height(obj)))
  return paint(I, merge(apply(lambda obj: recolor(2 if ulcorner(obj)[1] > ulcorner(ref_obj)[1] else color(obj), obj), objs)))
 
18.0, 4.3127604, def idgdbgbegfdaeadgbjeabaffaggddccg(I):
  objs = objects(I, T, T, T)  
  smallest = argmin(objs, size)
  return paint(I, merge([recolor(2 if leftmost(obj) <= leftmost(smallest) else color(obj), obj) for obj in objs]))
 
10.0, 2.3611388, def beegdbebcgjeecijidedgbjadegadaae(I):
  objs = objects(I, T, T, T)
  min_leftmost = minimum(frozenset(leftmost(obj) for obj in objs))
  return paint(I, merge([recolor(2 if leftmost(obj) == min_leftmost else color(obj), obj) for obj in objs]))
 
12.0, 7.043847, def ajccfacbhdhjecediccfcfaaaigaiheb(I):
  objs = objects(I, T, T, T)
  if size(objs) <= 1: return I
  obj1, obj2 = sorted(objs, key=lambda o: -size(o))[:2]
  c1, c2 = color(obj1), color(obj2)
  return paint(replace(I, c2, 0), branch(both(uppermost(obj2) < uppermost(obj1), rightmost(obj2) > rightmost(obj1)), recolor(2, obj2), recolor(c2, obj2)))
 
11.333333333333334, 3.1570718, def bbgdgfbdbgjceeecacdfceejjcegcebf(I):
  objs = objects(I, True, False, True)
  largest_obj = argmax(objs, size)
  h, w = shape(I)
  center_i, center_j = h // 2, w // 2
  def recolor_func(obj):
    if obj == largest_obj:
      return obj
    obj_center_i, obj_center_j = centerofmass(obj)
    return recolor(2, toindices(obj)) if (obj_center_i >= center_i or obj_center_j >= center_j) else obj
  return paint(I, merge(apply(recolor_func, objs)))
 
14.0, 4.7939878, def dbefcfajefjeejeebagcfaiiffjcajie(I):
  objs = objects(I, True, False, True)
  largest_obj = argmax(objs, lambda o: len(toindices(o)))
  h, w = shape(I)
  def recolor_func(obj):
    if obj == largest_obj:
      return obj
    return recolor(2, toindices(obj)) if any((i >= h // 2 or j >= w // 2) for i, j in toindices(obj)) else obj
  return paint(I, merge(apply(recolor_func, objs))) 
 
72.0, 28.97165, def jajadcgbaceieebejddciicadbiifhbe(I):
  h, w = shape(I)
  center_i, center_j = h // 2, w // 2
  def recolor_func(i, j):
    return I[i][j] if (i < center_i and j < center_j) or I[i][j] == mostcommon(I) else 2
  return tuple(tuple(recolor_func(i, j) for j in range(w)) for i in range(h))
 
12.0, 5.0993967, def dgbgeeaafigaefbaaciahedgeaabfhcb(I):
  objs = objects(I, T, T, T)
  smallest = argmin(objs, size)
  new_objs = {smallest}  
  for obj in objs:
    if obj != smallest:
      new_objs.add(recolor(2 if any(i >= uppermost(smallest) for i, _ in obj) else 1, obj))
  return paint(I, merge(new_objs)) 
 
10.666666666666666, 4.2482686, def djffcgecccjfefeibdfbfjebafdabadc(I):
  objs = objects(I, T, T, T)
  smallest = argmin(objs, size)
  left = frozenset(obj for obj in objs if leftmost(obj) < leftmost(smallest))
  other = objs - left
  return paint(paint(I, recolor(2, merge(other))), recolor(color(first(other)), smallest))
 
17.0, 3.3571756, def abjficbjgebceijcjdaciebibfbdcdbi(I):
  objs = objects(I, True, False, True)
  smallest = argmin(objs, size)
  return paint(
    I, 
    merge(
      frozenset(
        recolor(1 if centerofmass(o)[0] < centerofmass(smallest)[0] else 2, o) for o in objs
      )
    )
  )
 
18.0, 3.65279, def fbfggbdhacgfegeabahfgaaahhfaicbc(I):
  objs = objects(I, True, False, True)
  smallest_center = centerofmass(argmin(objs, size))
  return paint(
    I,
    merge(
      frozenset(
        recolor(1 if uppermost(o) < smallest_center[0] else 2, o) for o in objs
      )
    )
  )
 
16.0, 4.4469104, def ebbdcajebbebeeadihefcfaifggdfjbd(I):
  objs = fgpartition(I)
  largest_obj = argmax(objs, size)
  return paint(canvas(mostcolor(I), shape(I)), merge(apply(lambda o: recolor(2 if o == largest_obj else 1, toindices(o)), objs)))
 
12.666666666666666, 3.3950999, def bjcdjjcbjabfebceieceffedffgbhgbb(I):
  objs = objects(I, T, T, T)
  target = argmin(objs, size)
  return paint(I, merge(
    frozenset(recolor(2 if ulcorner(obj)[1] < ulcorner(target)[1] else color(obj), obj) for obj in objs)
  ))
 
10.0, 2.3611388, def aadjdfdfdabjefeajiacaebbchdffcfd(I):
  objs = objects(I, T, T, T)
  min_j = min(ulcorner(obj)[1] for obj in objs)
  return paint(I, merge(
    frozenset(recolor(2 if ulcorner(obj)[1] == min_j else color(obj), obj) for obj in objs)
  ))
 
6.666666666666667, 3.3851418, def jafabjeedhbeegjebeaheffejdagbdeg(I):
  objs = objects(I, T, T, T)
  smallest = argmin(objs, size)
  return paint(I, merge([recolor(2 if leftmost(obj) > leftmost(smallest) else color(obj), obj) for obj in objs]))
 
7.333333333333333, 3.4226727, def beiagacciejjebfdicfefeicjcjbbhde(I):
  objs = objects(I, T, T, T)
  smallest_idx = argmin(enumerate(objs), lambda x: size(x[1]))[0]
  return paint(I, merge([recolor(2 if i > smallest_idx else color(obj), obj) for i, obj in enumerate(objs)]))
 
9.0, 2.8185985, def eccchefbhafcefccjfchgccfiafbecji(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  largest_obj = argmax(objs, size)
  grid_center = centerofmass(asindices(I))
  def recolor_func(obj):
    return 2 if obj == largest_obj else (1 if sum(ulcorner(obj)) < sum(grid_center) else 2)
  return paint(I, merge(apply(lambda o: recolor(recolor_func(o), toindices(o)), objs)))
 
7.666666666666667, 2.706624, def abefedcdejfceibibcifjbgdcaeaiiaf(I):
  center_i, center_j = divide(shape(I), 2)
  new_grid = canvas(mostcolor(I), shape(I))
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if val != mostcolor(I):
        obj = extract(objects(I, True, False, True), lambda o: (i, j) in toindices(o))
        new_color = 2 if obj == argmax(objects(I, True, False, True), size) else (1 if i + j < center_i + center_j else 2)
        new_grid = fill(new_grid, new_color, {(i, j)})
  return new_grid 
 
12.0, 3.4622855, def efgaedheedfbefffabfbfffaecchefdd(I):
  objs = objects(I, T, T, T)
  sorted_objs = order(objs, lambda obj: ulcorner(obj)[1])
  return paint(I, merge(
    frozenset(
        recolor(1, obj) if i < len(sorted_objs) - 1 and leftmost(obj) < leftmost(sorted_objs[i+1]) 
        else recolor(2, obj) for i, obj in enumerate(sorted_objs)
    )
  ))
 
9.666666666666666, 4.4439716, def bgccbdagagbfefjhadbgbcfaccibhacg(I):
  objs = objects(I, True, False, True)
  smallest = argmin(objs, lambda o: (leftmost(o), uppermost(o)))
  return paint(
    I, 
    merge(
      apply(
        lambda o: recolor(2 if uppermost(o) < uppermost(smallest) else 1, o), 
        objs
      )
    )
  )
 
10.333333333333334, 2.1873534, def efedcbeaiejieefhajdfdjbeebcecbbb(I):
  objs = objects(I, True, False, True)
  smallest = min(objs, key=lambda o: len(o))
  return paint(I, merge([recolor(1 if obj == smallest else (2 if any(i == uppermost(smallest) for i, j in toindices(obj)) else 1), obj) for obj in objs]))
 
10.666666666666666, 4.5670276, def febeeiheaehdeaafajfeafdhccdjecgd(I):
  objs = objects(I, True, False, True)
  smallest = min(objs, key=size)
  return paint(I, merge([recolor(2 if rightmost(obj) < rightmost(smallest) else 1, obj) for obj in objs]))
 
14.0, 3.1008422, def ebbcaaeafjebehfdafejbiaaeeeaheci(I):
  objs = objects(I, True, False, True)
  smallest = min(objs, key=lambda o: (leftmost(o), uppermost(o)))
  return paint(I, merge([recolor(2 if any(j == leftmost(smallest) for i, j in toindices(obj)) else 1, obj) for obj in objs]))
 
14.333333333333334, 2.6758409, def iibafiahdfaaeaabafbefhdgegcfeaag(I):
  objs = objects(I, T, T, T)
  if size(objs) <= 1: return I
  obj1, *_, obj2 = sorted(objs, key=lambda o: (ulcorner(o)[0], ulcorner(o)[1]))
  return paint(cover(I, obj2), recolor(color(obj1), obj2))
 
13.0, 2.8358858, def hehecbfadgbbefjfjciheieahejfcafb(I):
  objs = objects(I, T, T, T)
  if len(objs) <= 1: return I
  f = lambda o: (ulcorner(o)[0], ulcorner(o)[1])
  return paint(I, recolor(color(min(objs, key=f)), next(filter(lambda o: o != min(objs, key=f), objs))))
 
11.666666666666666, 4.378653, def bgaebgfeaaeiehceaafbeaaaeeabebfb(I):
  objs = objects(I, T, T, T)
  target_obj = argmax(objs, lambda obj: rightmost(obj))
  target_j = ulcorner(target_obj)[1]
  return paint(I, merge(
    frozenset(recolor(2 if ulcorner(obj)[1] >= target_j else 1, obj) for obj in objs)
  ))
 
11.333333333333334, 3.2743607, def ffcceebbiaadedcjbdejdaefbadhcdji(I):
  objs = objects(I, T, T, T)
  target_j = max(leftmost(obj) for obj in objs if color(obj) != 0)
  return paint(I, merge(
    frozenset(recolor(2 if any(j >= target_j for i, j in toindices(obj)) else 1, obj) for obj in objs)
  ))
 
8.666666666666666, 3.4544566, def fjaefccaieeaebddajccgejeddfbehjg(I):
  objs = objects(I, T, T, T)
  target_j = rightmost(argmin(objs, lambda obj: ulcorner(obj)[1]))
  return paint(I, merge(
    frozenset(recolor(1 if leftmost(obj) < target_j else 2, obj) for obj in objs)
  ))
 
11.333333333333334, 5.3820915, def fdafcbbeddacedjdaafbfbgacfgeiadc(I):
  objs = objects(I, T, T, T) 
  min_size = size(argmin(objs, size))
  return paint(I, merge([recolor(2 if size(obj) > min_size else color(obj), obj) for obj in objs]))
 
12.333333333333334, 3.4998672, def ighbfebccdafefdgafajghahbchccefd(I):
  objs = objects(I, T, T, T)
  smallest = argmin(objs, size)
  target = extract(objs, lambda o: color(o) == 1 and size(o) > 1)
  f = lambda o: 1 if o == target or o == smallest else (2 if color(o) == 1 else color(o))
  return paint(I, merge(apply(lambda o: recolor(f(o), o), objs)))
 
20.666666666666668, 15.116129, def eafbcffafhegecbbbdgciabbagcbhgag(I):
  objs = objects(I, T, T, T)
  smallest = argmin(objs, size)
  return paint(
      I,
      merge(
          frozenset(
              recolor(
                  2 if color(o) == 1 and o != smallest else color(o),
                  shift(o, gravitate(o, smallest)) if color(o) == 1 and size(o) > 1 else o
              ) for o in objs
          )
      )
  )
 
13.0, 3.162001, def cdabfhcdfagfeeahiibeidbbdibfbjfg(I):
  objs = objects(I, T, T, T)
  smallest = argmin(objs, size)
  one_objs = sfilter(objs, lambda o: color(o) == 1)
  merged =  extract(one_objs, lambda o: size(o) > 1) if size(one_objs) > 1 else smallest
  return paint(
      I,
      merge(
        frozenset(
            recolor(1 if o == merged or o == smallest else 2, o) for o in objs if color(o) != 0
        )
      )
  )
 
11.333333333333334, 5.3820915, def fhbeecchgbegegciiedehdjdefbcedaf(I):
  objs = objects(I, T, T, T)
  smallest = argmin(objs, size)
  others = difference(objs, {smallest})
  return paint(I, merge({recolor(1, smallest), *apply(lambda o: recolor(2 if color(o) == 1 else color(o), o), others)}))
 
11.333333333333334, 2.6416407, def dcfcdffafagfeffaiefgjiecffjdcbij(I):
  c = divide(shape(I), 2)
  return paint(I, merge(
    apply(
      lambda o: branch(
        o == argmax(objects(I, True, False, True), size), 
        recolor(2, toindices(o)),
        branch(
          both(uppermost(o) < c[0], leftmost(o) < c[1]),
          recolor(1, toindices(o)),
          recolor(2, toindices(o))
        )
      ), 
    objects(I, True, False, True))
  ))
 
