0.10265630061548428, 3.0244548, def beaffchbfefcejjdiiedddgdbjeddcab(I):
  h = height(I)
  obj3 = toobject(ofcolor(I, THREE), I)
  obj4 = toobject(ofcolor(I, FOUR), I)
  shifted_obj3 = shift(obj3, (1 if lowermost(obj3) < h - 1 else -h + 1, 0))
  O = paint(paint(canvas(mostcolor(I), shape(I)), shifted_obj3), obj4)
  return O
 
0.20368594505885787, 3.7779083, def baacdafehfdaeefabhbidgjaecdfbhfa(I):
  shifted = rot270(tophalf(rot90(I)) + ((0,) * width(I),) + bottomhalf(rot90(I)))
  O = rot270(shifted)
  return O
 
0.2100351514080642, 6.85212, def badjajbdgefheedcbjjfdbbgabceafbb(I):
  objs = objects(I, True, False, True)
  bg = mostcolor(I)
  sorted_objs = order(objs, lambda obj: color(obj))
  grid = canvas(bg, shape(I))
  i, j = 0, 0
  for obj in sorted_objs:
    grid = paint(grid, shift(normalize(obj), (i, j)))
    i += height(obj)
  return grid
 
0.2674336794930487, 9.596681, def daecfccdbaaeeefgaeaheifdgchgjjee(I):
  objs = objects(I, True, False, True)
  bg = mostcolor(I)
  grid = canvas(bg, shape(I))
  i = 0
  for val in sorted(palette(I) - {bg}):
    for obj in sizefilter(objs, colorcount(I, val)):
      grid = paint(grid, shift(normalize(obj), (i, 0)))
      i += height(obj)
  return grid
 
0.2100351514080642, 7.31728, def aejfebecaeceeejfiahedfedgfbadbjg(I):
  non_zero_indices = difference(asindices(I), ofcolor(I, mostcolor(I)))
  h, w = shape(I)
  sorted_indices = sorted(non_zero_indices, key=lambda loc: I[loc[0]][loc[1]])
  grid = [[mostcolor(I) for _ in range(w)] for _ in range(h)]
  i, j = 0, 0
  for row, col in sorted_indices:
    grid[i][j] = I[row][col]
    j += 1
    if j == w:
      j = 0
      i += 1
  return tuple(tuple(row) for row in grid)
 
0.1050175757040321, 5.604061, def iihcifbjedejeedcjcafbaidagbdfjfb(I):
  three = ofcolor(I, THREE)
  four = ofcolor(I, FOUR)
  O = fill(fill(I, ZERO, three), THREE, four)
  return O
 
0.15752636355604815, 3.512228, def hdcffbbceiecedfibebffcjiheefbgac(I):
  obj3 = first(colorfilter(objects(I, T, F, F), THREE))
  obj4 = first(colorfilter(objects(I, T, F, F), FOUR))
  O = paint(paint(cover(I, obj3), recolor(THREE, obj4)), recolor(FOUR, obj3))
  return O
 
0.2454706085503859, 13.442801, def aahiaiiigbiiejjdaabbbdbccjdbahfa(I):
    three = asobject(crop(I,first(occurrences(I,((THREE,(0,0)),))),TWO_BY_TWO))
    four = asobject(crop(I,first(occurrences(I,((FOUR,(0,0)),))),TWO_BY_TWO))
    O = paint(paint(cover(I, three), recolor(THREE, four)), recolor(FOUR, three))
    return O
 
0.07009694078339719, 2.9293888, def egeigeecbfegedaebaciijeiejbehiec(I):
  obj3 = first(colorfilter(objects(I, T, F, F), 3))
  grid_center = tojvec(halve(width(I))) 
  obj3_center =  tojvec(halve(width(obj3)))
  move_vector = subtract(grid_center, obj3_center)
  O = move(I, obj3, move_vector)
  return O
 
0.1050175757040321, 4.1038957, def ajdebcjgefhfefbiihdahceaeaiadcce(I):
  obj3 = first(colorfilter(partition(I), 3))
  offset = subtract(tojvec(halve(width(I))), centerofmass(obj3))
  O = paint(cover(I, obj3), shift(obj3, offset))
  return O
 
0.07454138522784162, 2.310605, def afdaafafffcaebeiighebaeghhbbbcff(I):
  three = first(colorfilter(objects(I, T, F, F), 3))
  center_col = halve(width(I))
  shift_amount = subtract(center_col, rightmost(three))  
  shifted = shift(three, (0, shift_amount)) 
  O = paint(cover(I, three), shifted)
  return O
 
0.07454138522784162, 2.2374585, def eeafbbfaiecaeeagbdcbgagfjbbgajed(I):
  objs = objects(I, T, F, F)
  obj3 = first(colorfilter(objs, 3))
  grid_w = width(I)
  obj3_w = width(obj3)
  target_left = (grid_w - obj3_w) // 2 
  current_left = leftmost(obj3)
  move_vector = (0, target_left - current_left)
  O = paint(cover(I, obj3), shift(obj3, move_vector))
  return O
 
0.0900351514080642, 4.1341777, def ahbeffadceecejcjiebheiehccadbfja(I):
  bg = mostcolor(I)
  objs = objects(I, F, F, T)
  target = argmin(objs, size)
  if height(target) > width(target):
    offset = UP
  elif height(target) < width(target):
    offset = RIGHT
  else:
    offset = add(UP, RIGHT)
  O = paint(cover(I, target), shift(target, offset))
  return O
 
0.07416213553504833, 3.2175763, def bagebdiiifeaeabejjfficbcaffaaefa(I):
  objs = objects(I, F, F, T)
  smallest = argmin(objs, size)
  direction = branch(portrait(smallest), UP, RIGHT)
  O = paint(cover(I, smallest), shift(smallest, add(direction, astuple(equality(height(smallest), width(smallest)), 0))))
  return O
 
0.14393387894315537, 5.783097, def fehahbccjddbeacgaccbgdegeejbhejg(I):
  objs = objects(I, T, F, F)
  threes = first(colorfilter(objs, THREE))
  fours = first(colorfilter(objs, FOUR))
  height_diff_three = height(I) - 1 - uppermost(threes)
  height_diff_four = height(I) - 1 - uppermost(fours)
  threes_shifted = shift(threes, (height_diff_three, 0))
  fours_shifted = shift(fours, (height_diff_four, 0))
  O = paint(paint(canvas(mostcolor(I), shape(I)), threes_shifted), fours_shifted)
  return O
 
0.1727644587941434, 6.904362, def bjefcadafahceedhicacadfdbdfbfdca(I):
  objs = objects(I, T, F, F)
  def move_to_bottom(obj):
    return shift(obj, (height(I) - 1 - uppermost(obj), 0))
  O = paint(canvas(mostcolor(I), shape(I)), merge(apply(move_to_bottom, objs)))
  return O
 
0.1768707482993197, 34.457886, def fgeiedbdbachebecbaiecagbcffeceha(I):
  objs = sorted(objects(I, True, False, True), key=lambda obj: color(obj))
  h, w = shape(I)
  canvas_height = sum(height(obj) for obj in objs)
  O = canvas(mostcolor(I), (canvas_height, w))
  i = 0
  for obj in objs:
    O = paint(O, shift(obj, (i, 0)))
    i += height(obj)
  return O
 
0.1050175757040321, 3.1004848, def afafabfbbjfbedbabfccfffcadbddhhd(I):
  obj3 = first(colorfilter(objects(I, T, F, F), 3)) 
  center_row = halve(height(I))
  shift_amount = subtract(center_row, uppermost(obj3)) 
  shifted = shift(obj3, (shift_amount, 0))
  O = paint(cover(I, obj3), shifted)
  return O
 
0.15752636355604815, 5.448191, def dabjbbfaigafefhjijcaihhfhccaddgf(I):
  obj3 = first(colorfilter(objects(I, T, F, T), 3))
  target_row = height(I) // 2 - height(obj3) // 2
  O = paint(canvas(mostcolor(I), shape(I)), shift(obj3, (target_row - uppermost(obj3), 0)))
  return O 
 
0.10358900427546067, 3.1207054, def dagfajifdbccejcijbadbdfcjedadecj(I):
  obj = first(colorfilter(objects(I, True, False, True), 3))
  return paint(cover(I, obj), shift(obj, (halve(height(I)) - halve(height(obj)), 0)))
 
0.10590816728108009, 3.5847018, def afifdeegagciecaebddchcdcjceaaifc(I):
  objs = objects(I, F, F, T)
  target = argmin(objs, size)
  offset = branch(square(target), (ONE, TWO), (ONE, ONE))
  O = paint(cover(I, target), shift(target, offset))
  return O
 
0.10181207784176245, 3.9934053, def ebjbcceajcfeeeecjddecfahcdiabbgf(I):
  objs = objects(I, F, F, T)
  target = argmin(objs, size)
  i, j = ulcorner(target) 
  offset = branch(square(target), (ONE, TWO), (ONE, ONE))
  O = paint(cover(I, target), shift(target, add((i,j), offset)))
  return O
 
0.07289229426520706, 2.2269795, def aafcfbjcebfeebedaffbcdeccafajibd(I):
  objs = objects(I, T, F, F)
  threes = first(sfilter(objs, lambda obj: color(obj) == 3))
  fours = first(sfilter(objs, lambda obj: color(obj) == 4))
  middle_row = height(I) // 2
  shifted_threes = shift(threes, (middle_row - uppermost(threes), width(I) // 2 - leftmost(threes)))
  shifted_fours = shift(fours, (0, 1)) if rightmost(fours) < width(I) - 1 else fours
  O = paint(canvas(mostcolor(I), shape(I)), merge({shifted_threes, shifted_fours}))
  return O
 
0.08926117790681798, 6.76, def bdajjhbedbgaefdciffcecaceabeefga(I):
  objs = objects(I, T, F, F)
  def reposition(obj):
    if color(obj) == 3:
      return shift(obj, (height(I) // 2 - uppermost(obj), width(I) // 2 - leftmost(obj)))
    elif color(obj) == 4 and rightmost(obj) < width(I) - 1:
      return shift(obj, (0, 1))
    return obj
  O = paint(canvas(mostcolor(I), shape(I)), merge(apply(reposition, objs)))
  return O
 
0.1050175757040321, 3.5893714, def dbacebbfbhcjebhcadjcaebbeeiggjde(I):
  objs = objects(I, True, False, True)
  out = canvas(mostcolor(I), shape(I))
  for obj in objs:
    out = paint(out, shift(obj, subtract(llcorner(obj), ulcorner(obj))))
  return out
 
0.12255863699277428, 5.2880907, def aabbjdfcjcggebjgijccdeccdbficeaa(I):
    objs = sorted(objects(I, True, False, True), key=lambda obj: -color(obj))
    out = canvas(mostcolor(I), shape(I))
    y = 0
    for obj in objs:
        obj_h = height(obj)
        out = underpaint(
            out,
            shift(
                recolor(color(obj), toindices(obj)),
                (y, llcorner(obj)[1])
            )
        )
        y += obj_h
    return out
 
0.08686054823346102, 3.342782, def bdbdbfgcidiaeedcicigcgdedeccchef(I):
    objs = objects(I, F, F, T)
    smallest = argmin(objs, size)
    largest = argmax(objs, size)
    direction = position(smallest, largest)
    if square(smallest):
        direction = (direction[0] and not direction[1], direction[1] and not direction[0])
    O = paint(cover(I, smallest), shift(smallest, direction))
    return O
 
0.1050175757040321, 3.5893714, def dbgbedbdfcciebefjbffccdeebhfebaa(I):
    objs = objects(I, F, F, T)
    smallest = argmin(objs, size)
    largest = argmax(objs, size)
    if manhattan(smallest, largest) > 1:
        v_dist = centerofmass(largest)[0] - centerofmass(smallest)[0]
        h_dist = centerofmass(largest)[1] - centerofmass(smallest)[1]
        direction = (sign(v_dist), sign(h_dist))
        if square(smallest):
          direction = (direction[0] and not direction[1], direction[1] and not direction[0])
        O = paint(cover(I, smallest), shift(smallest, direction))
    else:
        O = I
    return O
 
0.09574943712234993, 3.5395331, def eejfdaediecceabcbdfbbacdajbigidf(I):
    objs = objects(I, F, F, T)
    smallest = argmin(objs, size)
    largest = argmax(objs, size)
    direction = gravitate(smallest, largest)
    if square(smallest) and (abs(direction[0]) > 1 or abs(direction[1]) > 1):
        direction = (sign(direction[0]), sign(direction[1]))
    O = paint(cover(I, smallest), shift(smallest, direction))
    return O
 
0.09694201490119857, 3.0776205, def jdcciibfecdfeegbafccdcieihebffgb(I):
  objs = objects(I, T, F, F)
  def move_3_down(obj):
    return shift(obj, (1 if color(obj) == 3 else 0, 0))
  return paint(canvas(mostcolor(I), shape(I)), merge(apply(move_3_down, objs)))
 
0.2100351514080642, 7.278511, def addfafbdbbddebefbfeffhijijaaacjg(I):
  objs = objects(I, True, False, True)
  bg = mostcolor(I)
  sorted_objs = order(objs, lambda obj: uppermost(obj)) # Sort objects by uppermost row
  grid = canvas(bg, shape(I))
  j = 0
  for obj in sorted_objs:
    height_obj = height(obj)
    width_obj = width(obj)
    grid = paint(grid, shift(normalize(obj), (0, j))) # Align to the left (column 0)
    j += width_obj 
  return grid
 
0.2100351514080642, 6.9342384, def chadccedeihbeggaiecihabjjchichab(I):
  objs = objects(I, True, False, True)
  bg = mostcolor(I)
  grid = canvas(bg, shape(I))
  i, j = 0, 0
  for obj in objs:
    obj_height = height(obj)
    obj_width = width(obj)
    grid = paint(grid, shift(normalize(obj), (i, 0))) # Align to left
    i += obj_height
    j += obj_width
  return grid
 
0.28577612863327145, 32.680862, def fdeeieiddiiieegaiggfdagcjebdabed(I):
  objs = objects(I, True, False, True)
  bg = mostcolor(I)
  canvas_width = sum(width(obj) for obj in objs)
  grid = canvas(bg, (height(I), canvas_width))
  x = 0
  for obj in objs:
    obj_width = width(obj)
    grid = paint(grid, shift(normalize(obj), (0, x)))
    x += obj_width
  return grid 
 
0.15892404029695312, 3.1950862, def djbdicceabcgedacihbahcccefabagbc(I):
  objs = sorted(objects(I, True, False, True), key=lambda obj: ulcorner(obj)[0])
  bg = mostcolor(I)
  output = canvas(bg, shape(I))
  x_offset = 0
  for obj in objs:
    for v, (i, j) in obj:
      output = paint(output, {(v, (i, x_offset + j))})
    x_offset += width(obj)
  return output
 
0.1050175757040321, 4.948243, def dfigggefadgbeabciibahegghfeadbei(I):
    min_val = leastcolor(I)
    max_val = mostcolor(I)
    min_indices = ofcolor(I, min_val)
    max_indices = ofcolor(I, max_val)
    offset = subtract(ulcorner(max_indices), ulcorner(min_indices))
    O = paint(fill(I, 0, min_indices), shift(recolor(min_val, min_indices), offset))
    return O
 
0.09165334768303228, 4.1030436, def bedacadefebheabcjfgaichehebffcjc(I):
    objs = objects(I, True, False, True)
    target = argmin(objs, size)
    ref = argmax(objs, size)
    offset = (uppermost(ref)-height(target), leftmost(ref)-leftmost(target))
    O = paint(cover(I, target), shift(target, offset))
    return O
 
0.1050175757040321, 3.2058885, def bbfbffadadddeiigjcjcaecabfaacceg(I):
    s = min(palette(I) - {0}) 
    l = max(palette(I))
    O = paint(replace(I, s, 0), shift(recolor(s, ofcolor(I, s)), (uppermost(ofcolor(I, l)) - uppermost(ofcolor(I, s)), 0)))
    return O
 
0.05250878785201605, 6.1995497, def aeajehjajgddedadjcjfeceeedfbhifd(I):
    min_val = leastcolor(I)
    max_val = mostcolor(I)
    min_obj = toobject(ofcolor(I, min_val), I)
    max_obj = toobject(ofcolor(I, max_val), I)
    new_pos = (uppermost(max_obj) - height(min_obj), leftmost(min_obj))
    O = paint(cover(I, min_obj), shift(min_obj, subtract(new_pos, ulcorner(min_obj))))
    return O
 
0.15516508846750035, 7.400385, def cceeaabgbfdceieabdfdafjaabjaccfa(I):
  obj_3 = toobject(ofcolor(I, 3), I)
  new_grid = paint(canvas(mostcolor(I), shape(I)), toobject(ofcolor(I, 4), I))
  return paint(move(new_grid, obj_3, (1, 0)), obj_3)
 
0.19098753236044516, 5.4570684, def bgdcgffcjcggeifajdfhdheifedhfbah(I):
  objs = sorted(objects(I, True, False, True), key=color)
  bg = mostcolor(I)
  h, w = shape(I)
  grid = canvas(bg, (h, w))
  y = 0
  for obj in objs:
    grid = paint(grid, shift(obj, (-uppermost(obj) + y, 0)))
    y += height(obj)
  return grid
 
0.12260572863541323, 5.748048, def effhgfaibbhdeifhbgcfeeadfbdffajc(I):
    obj3 = first(colorfilter(objects(I, T, F, F), 3))
    row_start = (uppermost(obj3), 0)
    row_size = (1, width(I))
    empty_row = canvas(0, row_size)
    centered_obj3 = shift(obj3, (0, subtract(halve(width(empty_row)), halve(width(obj3)))))
    O = paint(I, centered_obj3)
    return O
 
0.1050175757040321, 4.885365, def dfiibaaeabieegefjffdaecdbjfddace(I):
  min_val = leastcolor(I)
  max_val = mostcolor(I)
  min_indices = ofcolor(I, min_val)
  max_indices = ofcolor(I, max_val)
  offset = subtract((uppermost(max_indices),0), (uppermost(min_indices),0))
  O = paint(fill(I, 0, min_indices), shift(recolor(min_val, min_indices), offset))
  return O
 
0.05250878785201605, 6.1995497, def icadeccffehgechcjfbbjhjebdfbciaj(I):
  def move_if_three(i, j, v):  
    return v if v != 3 else I[i+1][j] if i+1 < len(I) else 0  # Shift '3' down, handle bottom edge case
  return tuple(tuple(move_if_three(i, j, I[i][j]) for j in range(len(I[0]))) for i in range(len(I))) # Apply transformation cell-wise
 
0.1442625566558776, 6.9622874, def ahfeedageafcefafaefdbbaadbheiefg(I):
  objs = sorted(objects(I, True, False, True), key=lambda obj: (uppermost(obj), leftmost(obj)))
  bg = mostcolor(I)
  h, w = shape(I)
  grid = canvas(bg, (h, w))
  y = 0
  for obj in objs:
    obj_width = width(obj)
    x_offset = (w - obj_width) // 2  
    grid = paint(grid, shift(obj, (-uppermost(obj) + y, x_offset)))
    y += height(obj)
  return grid
 
0.1442625566558776, 6.4072165, def igfbhcdeiedcedbhjdaeaecbgehfhfgd(I):
  objs = objects(I, True, False, True)
  bg = mostcolor(I)
  h, w = shape(I)
  grid = canvas(bg, (h, w))
  y = 0
  for obj in objs:
    obj_height, obj_width = shape(obj)
    x_offset = (w - obj_width) // 2
    shifted_obj = shift(obj, (-uppermost(obj) + y, x_offset))
    grid = paint(grid, shifted_obj)
    y += obj_height
  return grid
 
0.15752636355604815, 7.710861, def hhbfaaaidejbeecejaiccbdaccdaedji(I):
  objs = sorted(objects(I, True, False, True), key=lambda obj: (uppermost(obj), leftmost(obj)))
  bg = mostcolor(I)
  h, w = shape(I)
  grid = canvas(bg, (h, w))
  for obj in objs:
    grid = paint(grid, shift(obj, subtract((height(grid) // 2 - height(obj) // 2, 0), ulcorner(obj))))
  return grid 
 
0.11435176038144498, 6.8647637, def fcecefafbcfiegecijddeiichgbcffjc(I):
  objs = objects(I, True, False, True)
  bg = mostcolor(I)
  h, w = shape(I)
  grid = canvas(bg, (h, w))
  for obj in objs:
    obj_height, obj_width = shape(obj)
    x_offset = (w - obj_width) // 2
    y_offset = (h - obj_height) // 2
    grid = paint(grid, shift(obj, (y_offset - uppermost(obj), x_offset - leftmost(obj))))
  return grid
 
0.14165334768303225, 6.574571, def cfiddeeeeaebebafjiejiddhgcbeeede(I):
  obj3 = asobject(crop(I, first(occurrences(I, ((THREE, (0, 0)),))), UNITY))
  obj4 = asobject(crop(I, first(occurrences(I, ((FOUR, (0, 0)),))), UNITY))
  O = paint(paint(cover(I, obj3), recolor(FOUR, obj4)), recolor(THREE, obj3))
  return O
 
0.1050175757040321, 3.9931672, def dbeahcefgidcebcdaagedejcicafcigf(I):
  s = min(palette(I) - {0})
  l = max(palette(I))
  O = paint(replace(I, s, 0), shift(recolor(s, ofcolor(I, s)), (uppermost(ofcolor(I, l)) - height(ofcolor(I, s)) - uppermost(ofcolor(I, s)), (leftmost(ofcolor(I, l)) + width(ofcolor(I, l)) // 2) - (leftmost(ofcolor(I, s)) + width(ofcolor(I, s)) // 2))))
  return O
 
0.1050175757040321, 5.604061, def cejfadieaeheeebgieffcgejbebaejga(I):
  def obj_center_above(obj):
    return (uppermost(obj) + height(obj) // 2, leftmost(obj) + width(obj) // 2)
  objs = objects(I, True, False, True)
  min_obj = argmin(objs, lambda obj: color(obj))
  max_obj = argmax(objs, lambda obj: color(obj))
  offset = subtract(obj_center_above(max_obj), obj_center_above(min_obj))
  offset = (offset[0] - height(min_obj) // 2, offset[1])
  O = paint(cover(I, min_obj), shift(min_obj, offset))
  return O
 
0.173844675217588, 3.4886236, def gbebfafbjejaedaabgbhcccbaceacdhe(I):
  objs = objects(I, True, False, True)
  bg = mostcolor(I)
  h, w = shape(I)
  grid = canvas(bg, (h, w))
  for obj in objs:
    obj_height, obj_width = shape(obj)
    x_offset = (w - obj_width) // 2
    grid = paint(grid, shift(obj, (0, x_offset - leftmost(obj))))
  return grid
 
0.17133588736557195, 4.265394, def hbhcjijeiiaieebgbejdfgaaabbhbdab(I):
  return paint(
      paint(
          canvas(mostcolor(I), shape(I)), 
          shift(extract(objects(I, True, False, True), lambda obj: color(obj) == 3), ((shape(I)[1] - width(extract(objects(I, True, False, True), lambda obj: color(obj) == 3))) // 2, 0))
      ),
      shift(extract(objects(I, True, False, True), lambda obj: color(obj) == 4), ((shape(I)[1] - width(extract(objects(I, True, False, True), lambda obj: color(obj) == 4))) // 2, 0))
  ) 
 
0.06374773443419084, 4.49731, def edjeabadfegiecfgadifaedjccdagddj(I):
  obj3 = toobject(ofcolor(I, THREE), I)
  obj4 = toobject(ofcolor(I, FOUR), I)
  O = paint(paint(cover(I, obj3), obj4), shift(obj3, position(obj4, obj3)))
  return O
 
0.15752636355604815, 3.569516, def fbbebdabgeffehieifaddbfcfccgjbab(I):
  three = ofcolor(I, THREE)
  four = ofcolor(I, FOUR)
  temp = 9
  O = fill(fill(fill(I, temp, three), THREE, four), temp, three)
  return O
 
0.05250878785201605, 6.1995497, def hceafacahihfeaagaeedjegeejbfcfhc(grid):
  objs = objects(grid, True, False, False)
  three = first(colorfilter(objs, 3)) 
  other_objs = remove(three, objs)
  centered_three = shift(three, (0, width(grid) // 2 - leftmost(three) - width(three) // 2))
  return paint(paint(canvas(0, shape(grid)), centered_three), merge(other_objs)) 
 
0.12705017307985766, 6.265324, def agjgiagijcacedajiceggccdcgccjebf(grid):
  return  tuple(
      tuple(
          3 if (i == centerofmass(first(colorfilter(objects(grid, True, False, False), 3)))[0] and j == width(grid)//2)
          else v 
          for j, v in enumerate(row)
      )
      for i, row in enumerate(grid)
  )
 
0.1050175757040321, 3.5893714, def dcbjacfdaedfeadjiagaaeafghcabehf(grid):
  three = first(colorfilter(objects(grid, True, False, False), 3))
  target_col = width(grid) // 2
  return tuple(
      tuple(
          3 if (i, j) in shift(three, (0, target_col - leftmost(three)))
          else v 
          for j, v in enumerate(row)
      )
      for i, row in enumerate(grid)
  )
 
0.12606689743981023, 4.6141176, def diidfbgjdcicehadjbbdbcichffahedh(I):
  objs = order(objects(I, True, False, True), size)
  target, ref = first(objs), last(objs)
  new_pos = (uppermost(ref) - height(target), leftmost(ref) + (width(ref) - width(target)) // 2)
  O = paint(cover(I, target), shift(target, subtract(new_pos, ulcorner(target))))
  return O
 
0.14108795348127443, 5.2014513, def bfadaadahiddeccbjdfdgjdiieejggdh(I):
  return tuple(
      tuple(
          next(
              (
                  v
                  for obj in objects(I, True, False, True)
                  for v, (oi, oj) in obj
                  if oi == i and oj + ((shape(I)[1] - width(obj)) // 2) == j
              ),
              mostcolor(I),
          )
          for j in range(shape(I)[1])
      )
      for i in range(shape(I)[0])
  )
 
0.03009694078339718, 2.3039253, def dbjebfdbccbeeadaicieffejidacfcee(I):
  least_color = leastcolor(I)
  least_color_indices = ofcolor(I, least_color)
  grid_center = center(asindices(I))
  offset = subtract(grid_center, center(least_color_indices))
  O = paint(fill(I, 0, least_color_indices), shift(recolor(least_color, least_color_indices), offset))
  return O
 
0.14101842704811166, 7.2503495, def jjadcegjffheejdjbaiafbagbdffdaff(I):
  objs = objects(I, T, F, F)
  def reposition(obj):
    h = height(I)
    if color(obj) == 3:
      return shift(obj, (h - 1 - lowermost(obj), 0))
    elif color(obj) == 4:
      return shift(obj, (h - 1 - lowermost(obj), 1 if rightmost(obj) < width(I) - 1 else 0))
    return obj
  return paint(canvas(mostcolor(I), shape(I)), merge(apply(reposition, objs)))
 
0.17828911966203245, 5.47784, def hfbdabdhgfbgecfdbbaidfgdieidjjba(I):
  three = toobject(ofcolor(I, 3), I)
  four = toobject(ofcolor(I, 4), I)
  h = height(I)
  return paint(paint(canvas(mostcolor(I), shape(I)), shift(three, (h - 1 - lowermost(three), 0))), 
               shift(four, (h - 1 - lowermost(four), 1 if rightmost(four) < width(I) - 1 else 0)))
 
0.1050175757040321, 13.787177, def aabccjifcfcfeiigajbjdgafejidfcaf(I):
  return tuple(
      tuple(
          v if (i, j) in {(i, j + ((shape(I)[1] - width(toobject(ofcolor(I, v), I))) // 2) - leftmost(toobject(ofcolor(I, v), I))) for v in palette(I) if v != mostcolor(I)} else mostcolor(I)
          for j in range(shape(I)[1])
      )
      for i in range(shape(I)[0])
  )
 
0.15752636355604815, 5.6691957, def dehajggbigeaeebijdcebcdbjaceacjf(I):
  three_obj = toobject(ofcolor(I, THREE), I)
  four_obj = toobject(ofcolor(I, FOUR), I)
  O = paint(cover(I, three_obj | four_obj), three_obj | shift(four_obj, subtract(ulcorner(three_obj), ulcorner(four_obj))))
  return O
 
0.1050175757040321, 4.8892217, def bebccjbfeceiedccihbedcdifbceddef(grid):
  obj = argmin(objects(grid, True, False, False), lambda obj: first(obj)[0]) # Find object with smallest color.
  obj_center = centerofmass(obj) # Find object's center.
  grid_center = (obj_center[0], width(grid) // 2)  # Calculate the target center.
  return move(grid, obj, subtract(grid_center, obj_center)) # Move the object to the target center.
 
0.08914455983101623, 2.8215656, def fdcaaidfbcdeedicjcddbchficaabbhj(I):
  s = min(palette(I) - {0})  # Find the smallest non-background color
  target = recolor(s, ofcolor(I, s))  # Extract the object with the smallest color
  offset = (1, 2) if square(target) else (1, 1) # Determine offset based on shape
  O = paint(replace(I, s, 0), shift(target, offset)) # Move the object
  return O
 
0.08200170268815908, 3.570443, def defdfhacficcecehigcaddaeajheacba(I):
  objs = objects(I, False, False, True) # Extract all objects
  target = argmin(objs, lambda obj: min(palette(obj)))  # Find object with min color
  i, j = ulcorner(target)
  offset = (1, 2) if square(target) else (1, 1) 
  O = paint(cover(I, target), shift(target, add((i,j), offset)))
  return O
 
0.10590816728108009, 4.208302, def ehccbedbgejdegjbiehbcchibbbdfbdd(I):
  objs = objects(I, False, False, True)
  target = argmin(objs, size)
  destination = shift(target, (1, 2) if square(target) else (1, 1))  
  move_vector = gravitate(target, destination)
  O = paint(cover(I, target), shift(target, move_vector))
  return O
 
0.12089059157704796, 11.692223, def ffgdffecachbeicbbbfadidebgfhibba(I):
  h, w = shape(I)
  return tuple(
      tuple(
          index(I, (i, (j + (w - width(toobject(ofcolor(I, index(I, (i, j))), I))) // 2))) 
          if index(I, (i, j)) is not None 
          else mostcolor(I) 
          for j in range(w)
      )
      for i in range(h)
  )
 
0.15752636355604815, 5.912916, def jfdbeffbgedhebdbbaicabacbcejgidf(I):
  obj3 = first(colorfilter(objects(I, T, F, F), 3)) 
  offset = subtract(tojvec(halve(width(I))), centerofmass(obj3))
  O = paint(I, shift(obj3, offset))
  return O
 
0.10265630061548428, 3.0244548, def baedbbdfbffjeffcbebhagcbebgbbcfd(I):
    objs = objects(I, False, False, True) # Extract objects from the grid
    three = extract(objs, lambda obj: color(obj) == 3) # Find the object with color '3'
    O = paint(cover(I, three), shift(three, DOWN)) # Move the '3' object down by one unit and paint on the grid
    return O
 
0.1111771572068418, 6.9352975, def cigdbjdciadbebbdacagdjdjafcjabef(I):
  return  tuple(tuple(3 if (j>0 and row[j-1] == 3) or val==3 else 0 if val == 3 else val for j, val in enumerate(row)) for i, row in enumerate(I))
 
0.12586953553558378, 6.641893, def dbghbieecfcbedcjagdaeibfcdbdjbjd(I):
  objs = objects(I, T, F, F)
  h, w = shape(I)
  center_col = w // 2
  O = canvas(0, (h, w))
  for obj in objs:
    obj_center = centerofmass(obj)
    offset = (0, center_col - obj_center[1])
    O = paint(O, shift(obj, offset)) 
  return O
 
0.11317112283717105, 7.6024847, def ijgbiicfhbadefcdbfdeaejaeeahadia(I):
    objs = objects(I, T, F, F)
    h, w = shape(I)
    center = (h//2, w//2)
    O = canvas(0, (h, w))
    for obj in objs:
        obj_center = centerofmass(obj)
        offset = subtract(center, obj_center)
        O = paint(O, shift(obj, offset))
    return O
 
0.17955896093187373, 3.7133727, def gcieaaadicjbeaaabdaabdidcdjedfba(I):
    h, w = shape(I)
    center_col = w // 2
    O = canvas(0, (h, w))
    for i, row in enumerate(I):
        for j, v in enumerate(row):
            if v != 0:
                O = paint(O, {(v, (i, center_col))})
    return O
 
0.13511451648742928, 2.82851, def babhggeeccibejcjbafeigfbdiiacfbd(I):
  least_color = leastcolor(I)
  all_indices = asindices(I)
  target_indices = ofcolor(I, least_color)
  remaining_indices = difference(all_indices, target_indices)
  grid_center = center(all_indices)
  target_center = center(target_indices)
  offset = subtract(grid_center, target_center)
  shifted_target = shift(recolor(least_color, target_indices), offset)
  O = paint(fill(I, mostcolor(I), remaining_indices), shifted_target)
  return O
 
0.1050175757040321, 3.9931672, def efhadcheafacedfeabdccegaefdafaja(grid):
  three = first(colorfilter(objects(grid, True, False, False), 3)) 
  four = first(colorfilter(objects(grid, True, False, False), 4))
  target_position = subtract(center(four), (1,0))
  return move(grid, three, subtract(target_position, center(three)))
 
0.09549376618022258, 3.755229, def hacdafejhbffedffbgfehghccchfbjaf(grid):
  three = toindices(first(colorfilter(objects(grid, True, False, False), 3)))
  four = toindices(first(colorfilter(objects(grid, True, False, False), 4)))
  return paint(cover(grid, three), shift(recolor(3, four), (-(height(four) + 1), 0))) 
 
0.07035609206295663, 5.156171, def bdbccedaabfiegbjbbiedhfdheebfaid(grid):
  three = first(colorfilter(objects(grid, True, False, False), 3))
  four = first(colorfilter(objects(grid, True, False, False), 4))
  offset = gravitate(three, shift(four, (1, 0)))
  return move(grid, three, offset) 
 
0.05130847301533758, 3.2260082, def bbchbaadcfdgeegbahdefaidffjbdeha(I):
  obj3 = toobject(ofcolor(I, THREE), I)
  obj4 = toobject(ofcolor(I, FOUR), I)
  O = paint(cover(paint(I, obj4), obj3), shift(obj3, gravitate(obj3, obj4)))
  return O
 
0.0, 0.0, def adeeajfgdbdiegchbgfehajhaeccdiad(I):
  obj3 = toobject(ofcolor(I, THREE), I)
  obj4 = toobject(ofcolor(I, FOUR), I)
  direction = position(obj3, obj4)
  O = paint(paint(cover(I, obj3), shift(obj3, multiply(direction, shape(obj3)))), obj4)
  return O
 
