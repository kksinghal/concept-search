0.1087967587967588, 3.4897141, def jahciegfheegefehicdhdbacgdihbiib(I):
  objs = objects(I, T, F, T)  # Extract objects, excluding background
  target_color = 1  # Define the color to be replaced
  replacement_color = 8  # Define the new color
  
  def recolor_if_matches(obj):
    return recolor(replacement_color, obj) if color(obj) == target_color else obj
  
  recolored_objs = apply(recolor_if_matches, objs)  # Apply recoloring
  O = paint(canvas(mostcolor(I), shape(I)), merge(recolored_objs))  # Reconstruct grid
  return O 
 
0.06574675324675325, 1.4641705, def djdjdbbfggcfefejbajjeabahgfbbaae(I):
  target_obj = extract(objects(I, T, F, T), lambda obj: color(obj) == 1)  # Directly extract target object
  recolored_obj = recolor(8, target_obj)  # Recolor the extracted object
  O = paint(I, recolored_obj)  # Paint the recolored object onto the original grid
  return O
 
0.1087967587967588, 3.4897141, def cbedidjbecbheciabjidcdahdehfafea(I):
  O = replace(I, 1, 8)
  return O
 
0.8912032412032412, 5.9699197, def ejdhgbdeffdceffjjfbgcccbiddfeaeb(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=False)
  target_color = other(palette(I), mostcommon(I)) 
  new_objs = frozenset(recolor(8, obj) if color(obj) == target_color else obj for obj in objs)
  O = paint(canvas(mostcommon(I), shape(I)), merge(new_objs)) 
  return O
 
0.1087967587967588, 3.4897141, def cfeaafjaccheefggicaebccahgfgicjf(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=False)
  filtered_objs = colorfilter(objs, 1)
  recolored_objs = apply(lambda obj: recolor(8, obj), filtered_objs)
  O = I
  for obj in recolored_objs:
    O = paint(O, obj)
  return O
 
0.059794372294372296, 1.3665785, def cfbhddafbfaeefhjbhedgcbadeddgddj(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True) 
  largest_obj = argmax(objs, size)
  O = paint(I, recolor(8, toindices(largest_obj)))
  return O
 
0.1087967587967588, 3.4897141, def cedbhcbffgcdefifieghaejdehijdedc(I):
  objs = partition(I)
  target_obj = extract(objs, lambda obj: color(obj) == 1 and size(obj) == valmax(colorfilter(objs, 1), size))
  O = paint(I, recolor(8, toindices(target_obj))) 
  return O
 
0.1087967587967588, 3.4897141, def dbdeaibdgedcegabjbjagieadaefdbaj(I):
  bg = mostcolor(I)
  obj = toobject(delta(asindices(I)), I)
  modified = replace(I, 1, 8)
  O = paint(modified, obj)
  return O
 
0.14765512265512265, 4.380143, def egchabceacbaegddjdgdbaeaeagcefeb(I):
  border = objects(I, univalued=False, diagonal=False, without_bg=False)
  filled = replace(I, 1, 8)
  O = paint(filled, first(border))
  return O
 
0.5723498723498723, 30.511961, def ceddfhcgdaaheheaigjhjfbegdcbaedj(I):
  inner_indices = delta(box(asindices(I)))
  O = paint(I, recolor(8, toobject(inner_indices, replace(I, 1, 8))))
  return O
 
0.14765512265512265, 4.380143, def gbbheefiebdbeagdjfefcffabfgiaifb(I):
  O = paint(replace(I, 1, 8),  toobject(ofcolor(I, 1), I)) 
  return O
 
0.10592879342879344, 2.981946, def gcbbacaaddjbedcbafbfgjdaaeccdefh(I):
  O = I
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if val == 1 and j != len(row) - 1:
        O = paint(O, {(8, (i, j))})
  return O
 
0.19665750915750918, 2.1812308, def bdachgjbeehdeacaaidefdifdhbdjdcd(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True) # Extract objects
  bg = mostcolor(I) # Identify background color
  max_size = len(argmax(objs, size)) # Find size of the largest object
  O = paint(canvas(bg, shape(I)), 
            frozenset((8,loc) if len(obj)< max_size else (v,loc) for obj in objs for v,loc in obj)) # Recolor smaller objects
  return O
 
0.19665750915750918, 2.1812308, def feaceeebedgbejfiihcabbfabgeiciai(I):
  objs = objects(I, T, F, T) # Extract objects, excluding background
  largest_obj = argmax(objs, size) # Find the largest object 
  def recolor_if_not_largest(obj):
    return recolor(8, obj) if obj != largest_obj and color(obj) == 1 else obj
  recolored_objs = apply(recolor_if_not_largest, objs) # Apply recoloring
  O = paint(canvas(mostcolor(I), shape(I)), merge(recolored_objs)) # Reconstruct grid
  return O
 
0.0994893994893995, 2.1330786, def ebhgehbgcjfbeddbbbffeiiibfddbgjd(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=False)
  filtered_objs = sfilter(objs, lambda obj: color(obj) == 1 and rightmost(obj) < len(I[0]) - 1)
  return paint(I, merge(apply(lambda obj: recolor(8, obj), filtered_objs))) 
 
0.10469252969252969, 3.2210689, def dddbgcdgifedebdbbfhjbdjbbiddaefg(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  filtered_objs = colorfilter(objs, 1)
  recolored_objs = apply(lambda obj: recolor(8, remove(first(obj), obj)), filtered_objs)
  O = I
  for obj in recolored_objs:
    O = paint(O, obj)
  return O
 
0.11090992340992342, 2.844178, def ffihjhedjcfbehhabbibadbfbfefeafe(I):
  O = I
  for obj in objects(I, univalued=True, diagonal=False, without_bg=True):
    if color(obj) == 1:
      O = paint(O, recolor(8, remove((1, ulcorner(toindices(obj))), obj))) 
  return O
 
0.19401293151293153, 9.962264, def baccfdaceghaeejbigbgijcfbabaeahh(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  largest_one_obj = argmax(sfilter(objs, lambda obj: color(obj) == 1), size)
  halo = frozenset({n for idx in toindices(largest_one_obj) for n in dneighbors(idx)})  # Calculate halo directly
  O = paint(I, recolor(8, combine(toindices(largest_one_obj), intersection(halo, asindices(I)))))
  return O
 
0.23124098124098125, 10.917683, def bfacbjbgfecbehfcbaacafgcaieebfje(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  largest_one_obj = argmax(sfilter(objs, lambda obj: color(obj) == 1), size)
  expanded_obj = toindices(largest_one_obj)
  expanded_obj = frozenset({n for idx in expanded_obj for n in neighbors(idx)}) & asindices(I) # Expand and intersect
  O = paint(I, recolor(8, expanded_obj))
  return O
 
0.14765512265512265, 4.380143, def cjheibeajfedefifadajbefdefdcebgc(I):
  least_color = leastcolor(I) # Find the least frequent color
  objs = objects(I, T, F, T) # Extract objects, excluding background
  largest_obj = argmax(objs, size) # Find the largest object
  largest_color = color(largest_obj)  # Get the color of the largest object
  O = replace(replace(I, largest_color, least_color), least_color, largest_color) # Swap colors
  return O
 
0.11722444222444223, 8.906253, def bdjcceefgcgaeeccidgdfacbhcaefadb(I):
  O = paint(I, toobject(frozenset(), I))
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if val == 1:
        if (i, j + 1) not in ofcolor(I, 1):
          O = paint(O, {(1, (i, j))})
        else:
          O = paint(O, {(8, (i, j))}) 
  return O
 
0.11280386280386281, 2.9052463, def djedffajffideabaiadccabafchbcfeg(I):
  O = I
  for obj in objects(I, univalued=True, diagonal=False, without_bg=False):
    if color(obj) == 1:
      rightmost = max(obj, key=lambda x: x[1][1])
      O = paint(replace(O, 1, 8), {rightmost}) 
  return O
 
0.4813783438783439, 10.26493, def jheaebiaedaiebhiafifdhfbghjgecbb(I):
  O = I
  for i in range(len(I)):
    for j in range(len(I[0])):
      if I[i][j] == 1:
        for di, dj in [(0,1),(1,0),(0,-1),(-1,0)]:
            new_i, new_j = i+di, j+dj
            if 0 <= new_i < len(I) and 0 <= new_j < len(I[0]):
                O = paint(O, {(8, (new_i, new_j))})
  return O
 
0.6776875901875903, 20.529139, def cdbeabjdfcfaefbebihefdcgbeiedehg(I):
  one_obj = toobject(ofcolor(I, 1), I)
  expanded_obj = toobject(delta(toindices(one_obj)), I)
  O = paint(I, recolor(8, toindices(expanded_obj)))
  return O
 
0.1071941946941947, 3.4579906, def cabeceieijaaeajciafdcechgfdjbefe(I):
  objs = objects(I, T, F, T)  # Extract objects, excluding background
  target_color = 1  # Define the color to be replaced
  replacement_color = 8  # Define the new color
  
  def recolor_if_not_single(obj):
    return recolor(replacement_color, obj) if len(obj) > 1 else obj
  
  recolored_objs = apply(recolor_if_not_single, objs)  # Apply recoloring
  O = paint(canvas(mostcolor(I), shape(I)), merge(recolored_objs))  # Reconstruct grid
  return O
 
0.1348040848040848, 7.7054734, def ebdjejfihbafebdbajghihgbdecbejab(I):
  target_color = 1
  def recolor_condition(value, index):
    return  value == target_color and len(objects(crop(I, index, (3, 3)), T, F, T)) > 1
  
  recolored_grid = tuple(tuple(8 if recolor_condition(v, (i, j)) else v for j, v in enumerate(row)) 
                         for i, row in enumerate(I))
  return recolored_grid 
 
0.15175935175935176, 5.6225986, def aibgdaeaaeefebbcahecccbbeejicabh(I):
  O = I
  for obj in objects(I, univalued=True, diagonal=False, without_bg=False):
    if color(obj) == 1:
      rightmost_index = max(toindices(obj), key=lambda x: x[1])
      O = paint(O, {(8, rightmost_index)}) 
  return O
 
0.13922743922743921, 7.9863214, def cihdcfbceiajefjaiddhegbcdbbedeef(I):
  O = I
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if val == 1 and (j == len(row) - 1 or I[i][j + 1] != 1):
        O = paint(O, {(8, (i, j))})
  return O
 
0.11722444222444223, 9.668891, def gffajafabhfeebeiihafdcbcjigfgebe(I):
  O = canvas(9, shape(I))
  for obj in objects(I, univalued=True, diagonal=False, without_bg=False):
    if color(obj) == 1:
      shifted_obj = shift(obj, (0, 1))
      O = paint(O, difference(obj, shifted_obj))
      O = paint(O, recolor(8, intersection(obj, shifted_obj)))
  return O
 
0.31102231102231104, 32.279625, def eadfccfcbaicefggaajigiddciaiiggj(I):
  one_objs = sfilter(objects(I, True, False, True), lambda obj: color(obj) == 1)
  halo_indices = mapply(lambda obj: delta(toindices(obj)), one_objs)
  O = paint(I, recolor(8, halo_indices))
  return O
 
0.4255189255189255, 16.780563, def eeccdaefbgggeacbjfaadeaffbcfecdg(I):
  O = I
  for i in range(1, len(I) - 1):
    for j in range(1, len(I[0]) - 1):
      if I[i][j] == 1 and any(I[i+di][j+dj] != 1 for di, dj in [(0,1),(0,-1),(1,0),(-1,0)]):
        O = fill(O, 8, {(i-1,j),(i+1,j),(i,j-1),(i,j+1)})
  return O
 
0.5218392718392719, 38.233944, def adcebedfjcddediijgaiccddbaaeebfe(I):
  one_indices = ofcolor(I, 1)
  halo_indices = set()
  for i, j in one_indices:
    for di, dj in [(0,1),(0,-1),(1,0),(-1,0)]:
      ni, nj = i+di, j+dj
      if (ni, nj) not in one_indices and 0 <= ni < len(I) and 0 <= nj < len(I[0]):
        halo_indices.add((ni, nj))
  O = paint(I, recolor(8, frozenset(halo_indices)))
  return O 
 
0.8523448773448774, 6.7958217, def fccjejghdfadefjcaediebifdagfdedc(I):
  return replace(replace(I, 1, 8), mostcolor(I), 1) 
 
0.1071941946941947, 3.4579906, def ibcdeadajfffebcaaadjbbhcicegbadc(I):
  O = canvas(mostcommon(I), shape(I))
  for obj in objects(I, univalued=True, diagonal=False, without_bg=False):
    if color(obj) == 1:
      shifted_obj = shift(obj, (0, -1)) # Check left neighbor
      if len(intersection(toindices(obj), toindices(shifted_obj))) > 0:
        O = paint(O, recolor(8, obj))
      else: 
        O = paint(O, obj)
    else:
      O = paint(O, obj)
  return O
 
0.14488705738705737, 7.068864, def jjaedjfdfcafehbaabdcehbacfbfbcde(I):
  O = I
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if val == 1 and (j == 0 or I[i][j - 1] == 9) and (j == len(row) - 1 or I[i][j + 1] == 9):
        O = paint(O, {(8, (i, j))})
  return O
 
0.15542651792651793, 4.126039, def ccifcadacddeebaejdbhbbehcagjacff(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=False)
  filtered_objs = sfilter(objs, lambda obj: color(obj) == 1 and width(obj) == size(obj) and (leftmost(obj) == 0 or index(I, (uppermost(obj), leftmost(obj) - 1)) == 9) and (rightmost(obj) == len(I[0]) - 1 or index(I, (uppermost(obj), rightmost(obj) + 1)) == 9))
  recolored_objs = apply(lambda obj: recolor(8, obj), filtered_objs)
  O = I
  for obj in recolored_objs:
    O = paint(O, obj)
  return O
 
0.16395132645132646, 18.105473, def icchjdcgafjaedcdaiadbaiaeiadfdcj(I):
  one_indices = ofcolor(I, 1)
  halo_indices = set()
  for idx in one_indices:
    for n in dneighbors(idx):
      if n in asindices(I) and len(intersection(dneighbors(n), one_indices)) > 1:
        halo_indices.add(n)
  O = paint(I, recolor(8, frozenset(halo_indices)))
  return O 
 
0.17876290376290377, 7.53045, def cjeagefgfhfhebdfaadbfbdbdiacdhhb(I):
  one_objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  halo_indices = set()
  for obj in one_objs:
    for idx in toindices(obj):
      if len(intersection(dneighbors(idx), toindices(obj))) != 2:
        halo_indices.add(idx)
  O = paint(I, recolor(8, frozenset(halo_indices)))
  return O
 
0.23756105006105005, 23.113356, def bdfajdecigchedbiijaefcjfcjhcjida(I):
  one_indices = ofcolor(I, 1)
  halo_candidate_indices = mapply(dneighbors, one_indices)
  halo_indices = sfilter(halo_candidate_indices, lambda idx: index(I, idx) != 1 and len(intersection(dneighbors(idx), one_indices)) > 1)
  O = paint(I, recolor(8, halo_indices))
  return O
 
0.25645188145188147, 67.03383, def cbidbheeeeeeeiafabgccffbedaefabe(I):
  modified = replace(I, 1, 8)
  return cellwise(I, modified, mostcolor(I))
 
0.13635947385947383, 8.050159, def ecbgbbcchibjeefdbgceegdfiddhdcff(I):
  O = I
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if val == 1 and j < len(row) - 1 and I[i][j + 1] != 1:
        O = paint(O, {(8, (i, j))})
  return O
 
0.14925768675768675, 4.2707324, def ffgbhcdaebfgedgibgaaieaafhegjcjc(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=False)
  filtered_objs = frozenset(obj for obj in objs if color(obj) == 1 and width(obj) == 1 and rightmost(obj) < len(I[0]) - 1)
  recolored_objs = frozenset(recolor(8, obj) for obj in filtered_objs)
  return paint(I, merge(recolored_objs))
 
0.3993464868464868, 33.4254, def bdehcacdcjeieegejgcfibbdjccgfdhb(I):
  one_objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  halo_indices = set()
  for obj in one_objs:
    obj_indices = toindices(obj)
    for idx in obj_indices:
      if len(intersection(dneighbors(idx), obj_indices)) == 2:
        halo_indices |= dneighbors(idx) - obj_indices
  O = paint(I, recolor(8, frozenset(halo_indices)))
  return O
 
0.12654983904983905, 9.160559, def bgaecaaciceeedceieegcdcedaeccbhh(I):
  halo_indices = set()
  for i in range(1, len(I) - 1):
    for j in range(1, len(I[0]) - 1):
      if I[i][j] != mostcolor(I) and (I[i-1][j] == I[i+1][j] != I[i][j] or I[i][j-1] == I[i][j+1] != I[i][j]):
        halo_indices.add((i, j))
  O = paint(I, recolor(8, frozenset(halo_indices)))
  return O
 
0.23923298923298925, 20.291403, def fbihbdeacaebeeehifedeafcfdfefcde(I):
  one_objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  halo_indices = set()
  for obj in one_objs:
    obj_indices = toindices(obj)
    box_indices = box(obj_indices)
    for idx in box_indices:
      if len(intersection(dneighbors(idx), obj_indices)) == 1:
        halo_indices.add(idx)
  O = paint(I, recolor(8, frozenset(halo_indices)))
  return O
 
0.18517732267732268, 13.5076275, def befjbdfjagaiehjcagheghifidbhhcdj(I):
  padded_grid = canvas(9, (len(I) + 2, len(I[0]) + 2))
  padded_grid = paint(padded_grid, shift(asobject(I), (1, 1)))
  halo_indices = set()
  for i in range(1, len(padded_grid) - 1):
    for j in range(1, len(padded_grid[0]) - 1):
      if padded_grid[i][j] == 9 and (
          (padded_grid[i-1][j] == padded_grid[i+1][j] != 9) or 
          (padded_grid[i][j-1] == padded_grid[i][j+1] != 9)
      ):
        halo_indices.add((i - 1, j - 1))
  O = paint(I, recolor(8, frozenset(halo_indices)))
  return O
 
0.19568764568764568, 12.859099, def bjafcchcbfchejddbbdjbieegefadbdj(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  modified_grid = I
  for obj in objs:
    if color(obj) == 1:
      box_indices = backdrop(obj)
      modified_grid = fill(modified_grid, 8, ofcolor(crop(modified_grid, ulcorner(box_indices), shape(box_indices)), 9))
  return modified_grid
 
0.31102231102231104, 32.279625, def dcbiceabgefbeajebdeiaefbgbfebfhf(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  target_objs = sfilter(objs, lambda obj: color(obj) == 1)
  modified_grid = I
  for obj in target_objs:
    modified_grid = paint(fill(modified_grid, 8, delta(toindices(obj))), obj)
  return modified_grid
 
0.6776875901875903, 20.529139, def hbfgigfegacdeacdjedcchbfeadbaffb(I):
  target_indices = ofcolor(I, 1)
  box_indices = backdrop(target_indices)
  modified_grid = fill(I, 8, intersection(box_indices, ofcolor(I, 9)))
  return modified_grid
 
0.2393037518037518, 27.822863, def fffdfdfbbdacefbiieicbgiafcdafadc(I):
    shifted_I = shift(asobject(I), (0,1))
    recolored_objs = frozenset((8, index) for value, index in shifted_I if value == 1 and index[1] < len(I[0])-1 and I[index[0]][index[1]+1] != 1)
    return paint(I, recolored_objs)
 
0.23313492063492064, 25.195213, def gcjfbajcbehdeheaifjdfbibedebidab(I):
  def condition(obj):
    return color(obj) == 1 and width(obj) > 1 and hline(obj) == False
  objs = objects(I, univalued=True, diagonal=False, without_bg=False)
  filtered_objs = sfilter(objs, condition)
  shifted_recolored = mapply(lambda obj: recolor(8, shift(obj, (0, -1))), filtered_objs)
  return paint(I, shifted_recolored)
 
0.13213453213453213, 4.8509426, def ieicefhdacciefhfjbbcchajdcfbiedg(I):
    for i in range(1, height(I)):
        for j in range(width(I)):
            if I[i][j] == 1 and manhattan({(i, j)}, {(1, 0)}) <= i:
                I = paint(I, recolor(8, {(8, (i, j))}))
    return I
 
0.10102536352536352, 3.2543373, def abgbfedbjcbgeabijifddccbhabdbfgh(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  one_objs = sfilter(objs, lambda obj: color(obj) == 1)
  outline_indices = mfilter(one_objs, lambda obj: delta(toindices(obj)))
  O = paint(I, recolor(8, outline_indices))
  return O
 
0.10376984126984128, 3.9798841, def dhaedjahjgheeifbbecaafejhbadhefb(I):
  one_indices = ofcolor(I, 1)
  outline_indices = frozenset(idx for idx in one_indices if len(intersection(dneighbors(idx), one_indices)) < 4)
  O = paint(I, recolor(8, outline_indices))
  return O
 
0.10685425685425685, 4.0050454, def fddejbececcaeedciajaeebceagefeff(I):
  O = I
  for i in range(len(I)):
    for j in range(len(I[0])):
      if I[i][j] == 1 and any(I[i+di][j+dj] != 1 for di, dj in [(0,1),(0,-1),(1,0),(-1,0)] if 0 <= i+di < len(I) and 0 <= j+dj < len(I[0])):
        O = paint(O, {(8, (i, j))})
  return O
 
0.12620851370851371, 5.941262, def hdachdffbifeeejajejcbdeaaddeifhb(I):
  O = I
  for obj in objects(I, univalued=True, diagonal=False, without_bg=True):
    if color(obj) == 1:
      top_row = frozenset((1, (uppermost(obj), j)) for j in range(width(obj))) 
      O = paint(O, recolor(8, intersection(obj, top_row)))
  return O
 
0.134491896991897, 8.236075, def cddjdgeeeahbefedjdaedjcdacbbbbbi(I):
  O = I
  for obj in objects(I, univalued=True, diagonal=False, without_bg=True):
    if color(obj) == 1:
      O = paint(O, recolor(8, {(1, (uppermost(obj), j)) for v, (i, j) in obj if i == uppermost(obj)}))
  return O
 
0.19202325452325453, 5.6432586, def jcbagabjebdeedffijfbcbjcbfgahbeh(I):
  O = I
  for obj in objects(I, univalued=True, diagonal=False, without_bg=True):
    if color(obj) == 1:
      top_row_indices = {(i, j) for i, j in backdrop(obj) if i == uppermost(obj)}
      O = paint(O, asobject(fill(subgrid(obj, I), 8, top_row_indices)))
  return O
 
0.1087967587967588, 3.4897141, def bedfjbbdbfdbeedbifdgjeceggchbjcd(I):
  return replace(I, 1, 8)
 
0.10714285714285715, 1.7149799, def ajgdfficdafcebddbhebebgdgigbdjde(I):
  objs = objects(I, True, False, True) # Identify objects
  def obj_area(obj):
    return width(obj) * height(obj)
  largest_obj = argmax(objs, obj_area)  # Find the largest object by area
  O = paint(I, recolor(8, toindices(largest_obj))) # Recolor and paint
  return O
 
0.11437312687312687, 2.0597715, def facedbcffgafeeafbbfaecebafahbdea(I):
  def obj_height(obj):
    return uppermost(obj)  # Define a function to get the uppermost row index of an object

  objs = objects(I, univalued=True, diagonal=False, without_bg=True)  # Extract foreground objects
  target_obj = argmin(objs, compfunc=obj_height)  # Find the object with the smallest uppermost row index
  recolored_obj = recolor(8, target_obj)  # Recolor the target object
  return paint(I, recolored_obj)  # Paint the recolored object back onto the grid
 
0.08223026973026973, 1.8147889, def egaaaichibdaejjhigacbbefbciibbga(I):
    def find_highest_one(grid):
        for i, row in enumerate(grid):
            for j, val in enumerate(row):
                if val == 1:
                    return i, j # Return the row, col of the first encountered '1'
        return None  # No '1' found

    i, j = find_highest_one(I) # Get the location of the highest '1'
    target_obj = extract(objects(I, True, False, True), lambda obj: (i, j) in toindices(obj)) # Extract object containing the found location
    return paint(I, recolor(8, target_obj))  
 
0.09665334665334666, 1.5985663, def cgcacffidedfefehbbgfjfeecedcdbec(I):
  objs = objects(I, True, False, True)
  def top_row_count(obj):
    return sum(1 for i, j in toindices(obj) if i == uppermost(obj)) # Count cells in the topmost row of the object

  highest_obj = argmax(objs, compfunc=top_row_count) # Find the object with the most cells in its topmost row
  return paint(I, recolor(8, highest_obj))  
 
0.14765512265512265, 4.380143, def iefiejjcbecfedjcjfbfhbjeifcafacb(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  one_objs = sfilter(objs, lambda obj: color(obj) == 1)
  outline_indices = mfilter(one_objs, lambda obj: delta(toindices(obj)))
  inner_indices = mfilter(one_objs, toindices)
  O = paint(paint(I, recolor(8, outline_indices)), recolor(1, outline_indices))
  return O
 
0.31102231102231104, 17.902494, def eieicccjgajieecfifjeadbcciabadee(I):
  one_objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  O = I
  for obj in one_objs:
    for i, j in delta(toindices(obj)):
      O = paint(O, {(8, (i, j))})
  O = paint(O, recolor(1, ofcolor(O, 8)))
  return O
 
0.15620490620490618, 4.478237, def dchcfedccjdhejdgbbbjjiahaebbdbej(I):
  O = canvas(9, shape(I)) # Start with a canvas of all 9s
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if val != 9 and j < len(row) - 1: # Paint back non-9s except in the last column
        O = paint(O, {(val, (i, j))})
  return O
 
0.14765512265512265, 4.380143, def cfffejbfdiddejffacafiibfhcaidebj(I):
  objs = objects(I, univalued=False, diagonal=False, without_bg=False) # Extract all objects
  modified_objs = frozenset(
    recolor(8, obj) if color(obj) == 1 and rightmost(obj) < width(I) - 1 else obj 
    for obj in objs
  ) # Recolor objects with color 1 not touching the right border
  return paint(canvas(9, shape(I)), merge(modified_objs)) # Paint modified objects onto a blank canvas
 
0.8523448773448774, 65.23322, def dajefadcdebjeffdieabecdghieaddac(I):
  largest_obj = argmax(objects(I, False, False, False), size)
  return paint(I, recolor(8, toindices(largest_obj)))
 
0.8635420135420137, 11.516755, def dfcfdabeijahebeebcfbbbhbjgfccabe(I):
  def is_not_background(obj):
    return color(obj) != mostcommon(I) # Check if object color is not the background color

  objs = sfilter(objects(I, True, False, False), is_not_background) # Get objects that are not the background
  largest_obj = argmax(objs, size) # Find the largest object
  O = paint(I, recolor(8, toindices(largest_obj))) # Recolor and paint 
  return O
 
0.14925768675768675, 4.2707324, def afjcfccfaafdeaeabbfcehcfaihibdcc(I):
  for j in range(len(I[0])): # Iterate through columns
    if I[0][j] == 1:  # If a cell in the top row has value 1
      return paint(I, recolor(8, flood_fill(I, (0, j), 1, 8))) # Flood fill from that cell and recolor to 8
  return I  # If no '1' found in the top row, return the original grid
 
0.1087967587967588, 3.4897141, def cfaagjcfdhaceabebcfbdichhfjghecg(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  one_objs = sfilter(objs, lambda obj: color(obj) == 1)
  outline_indices = mfilter(one_objs, lambda obj: outbox(toindices(obj)))
  O = paint(I, recolor(8, outline_indices))
  return O 
 
0.5218392718392719, 38.233944, def ciaddgeccffeefddbcijbfdbedabcfcf(I):
  O = I
  for i, row in enumerate(I):
    for j, value in enumerate(row):
      if value == 1:
        for di, dj in [(0,1),(0,-1),(1,0),(-1,0)]:
          new_i, new_j = i + di, j + dj
          if 0 <= new_i < len(I) and 0 <= new_j < len(row) and I[new_i][new_j] == 9:
            O = paint(O, {(8, (new_i, new_j))})
  return O
 
0.5444652569652569, 37.086327, def jaccbifcaebfebfijiaicigcieeigcbe(I):
  one_objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  O = I
  for obj in one_objs:
    O = underfill(O, 8, outbox(toindices(obj)))
  return O
 
0.6802253302253303, 35.8037, def fdeaihcjebgeebheihbeigcdjfadehed(I):
  return paint(
    fill(I, 8, asindices(hsplit(I, width(I))[:-1])),
    toobject(asindices(hsplit(I, width(I))[-1]), I)
  )
 
0.7805167055167055, 47.22046, def afecaeffegfjecdajdfciecdfdahfjed(I):
  return paint(
      fill(I, 8, difference(asindices(I), asindices(hsplit(I, width(I))[-1]))),
      toobject(asindices(hsplit(I, width(I))[-1]), I)
  )
 
0.19665750915750918, 2.1812308, def acdibiiibigbecdaaeicfdeehifffbfg(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  largest_obj = argmax(objs, size)
  O = I
  for obj in objs:
    if obj != largest_obj:
      O = paint(O, recolor(8, toindices(obj)))
  return O
 
0.25645188145188147, 32.595085, def ebdebhdaaeibebbeigfdfedcaggbfife(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  O = canvas(mostcolor(I), shape(I)) 
  for obj in objs:
    if size(obj) == size(argmax(objs, size)):
      O = paint(O, obj)
  return O
 
0.059794372294372296, 1.3665785, def aidbhacgjdfcejcjjeddbcbeaebjijia(I):
  objs = objects(I, T, F, T) # Extract all objects
  largest_obj = argmax(objs, compfunc=size) # Find the largest object
  return paint(I, recolor(8, largest_obj)) # Recolor and paint back 
 
0.10685425685425685, 4.0050454, def eigacbggabhbeeajbdafddffejfagcgb(I):
  O = I
  for i, row in enumerate(I):
      for j, val in enumerate(row):
          if val == 1 and any(
              I[i + di][j + dj] != 1
              for di, dj in [(0, 1), (0, -1), (1, 0), (-1, 0)]
              if 0 <= i + di < len(I) and 0 <= j + dj < len(row)
          ):
              O = paint(O, {(8, (i, j))})
  return O
 
0.7823565323565324, 47.75762, def degfjbdjbehcegehabedeefjjheafahg(I):
  return paint(
    fill(I, 8, sfilter(asindices(I), lambda ij: ij[1] < width(I) - 1)), 
    toobject(sfilter(asindices(I), lambda ij: ij[1] == width(I) - 1), I)
  )
 
0.1566891441891442, 3.1152525, def abbbbdaaadjbeadabbeebfdaebegagci(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  sizes = apply(size, objs)
  max_size_index = argmax(enumerate(sizes), lambda x: x[1])[0]
  largest_obj = totuple(objs)[max_size_index]
  O = paint(I, recolor(8, toindices(largest_obj)))
  return O
 
0.12715062715062714, 6.410777, def fcbdcddhefebeeejiccfbbjicbcdaaea(I):
  return paint(
    fill(I, 8, mfilter(objects(I, True, False, False), lambda obj: rightmost(obj) < width(I) - 1)),
    mfilter(objects(I, True, False, False), lambda obj: rightmost(obj) == width(I) - 1)
  )
 
0.7650432900432901, 46.78701, def aaechahefbdaeieebbgbdgacbabjefaa(I):
  return paint(
      fill(I, 8, difference(asindices(I), hfrontier((0, width(I) - 1)))),
      toobject(hfrontier((0, width(I) - 1)), I)
  )
 
0.14765512265512265, 4.380143, def cdadgcddjgbeeabdadadabhdecaaibfj(I):
  target_color = min(palette(I))
  objs = partition(I)  
  target_obj = extract(objs, lambda obj: color(obj) == target_color)
  O = paint(canvas(9, shape(I)), target_obj)
  return O
 
0.8912032412032412, 5.9699197, def ebbeabgdhdabeibeiabfceacagdhibci(I):
  target_value = leastcolor(I)
  target_indices = ofcolor(I, target_value)
  return fill(I, 8, difference(asindices(I), target_indices))
 
0.8523448773448774, 65.23322, def baifhcgbgaiaehcabfgbeijdceeabbhe(I):
  target_color = leastcommon(I)
  return tuple(
      tuple(branch(v == target_color, v, 8) for v in row) 
      for row in I
  )
 
0.12074314574314574, 6.3250184, def aaefccdejgbbedjiaachgdidbbadffch(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  for obj in objs:
    rightmost_j = max(j for _, (i, j) in obj)
    for value, (i, j) in obj:
        if j != rightmost_j:
            I = paint(I, {(8, (i, j))}) 
  return I
 
0.3625041625041625, 14.626875, def dfjdhfdgceddeafhifeefefaddebgbcd(I):
  for i, row in enumerate(I):
    last_one = len(row) - 1
    for j, val in enumerate(row):
      if val == 1:
        last_one = j
    if last_one != len(row) - 1:
      I = paint(I, {(8, (i, k)) for k in range(last_one)})
  return I 
 
0.8635420135420137, 11.516755, def eceeajiabjfceaccbfbgedcaefcceeba(I):
  objs = objects(I, True, False, False) # Identify objects formed by connected components of '1'
  largest_obj = argmax(objs, size) # Find the largest object
  return paint(I, recolor(8, largest_obj)) # Recolor the largest object to '8' and paint on the original grid
 
0.059794372294372296, 1.3665785, def cfaiabbjjiaeecjfiecdfeehbjeafdde(I):
  x1 = 1 # Target digit to recolor
  x2 = objects(I, True, False, False) # Identify objects formed by connected components of '1'
  x3 = argmax(x2, lambda obj: colorcount(obj, x1)) # Find the largest object containing digit '1'
  return paint(I, recolor(8, x3)) # Recolor the largest object to '8' and paint on the original grid 
 
0.1087967587967588, 3.4897141, def fehcebcbfacfeffbbdcebbiiaahagcda(I):
  target_color = leastcommon(I)
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  O = I
  for obj in objs:
    if color(obj) != target_color:
      O = paint(O, recolor(8, toindices(obj)))
  return O
 
0.22012293262293262, 22.033499, def bjijegdfehbieadhjeeeeajgfcaajbde(I):
  one_objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  O = I
  for obj in one_objs:
    O = paint(O, recolor(8, box(toindices(obj)))) # Directly paint the outline of each object 
  return O
 
0.26084887334887336, 27.317038, def aegbcahcacfhehceibadffeiadjifdch(I):
  one_objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  outline_indices = merge(apply(lambda obj: difference(box(toindices(obj)), toindices(obj)), one_objs)) # Calculate difference between box and object indices
  return paint(I, recolor(8, outline_indices))
 
0.11749084249084249, 5.0984545, def fiihbdgdgaedeabhbfccccgjjecbcdda(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True) # Extract connected objects
  filtered_objs = colorfilter(objs, 1) # Filter objects with color 1
  recolored_objs = apply(
    lambda obj: recolor(8, difference(obj, {(1, (uppermost(obj), rightmost(obj)))})), 
    filtered_objs
  ) # Recolor all but the top-right cell of each object
  return paint(canvas(9, shape(I)), merge(recolored_objs | (objs - filtered_objs))) # Paint recolored objects onto a blank canvas and add back other objects
 
0.0994893994893995, 2.4904873, def haaeciadjbgcebibafdbdgacajebccjf(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  return paint(
    canvas(9, shape(I)),
    merge(
      frozenset(
        recolor(8, difference(obj, {(1, (i, rightmost(obj)))})) 
        if color(obj) == 1 and rightmost(obj) < width(I) - 1
        else obj
        for obj in objs
        for i in range(uppermost(obj), lowermost(obj) + 1)
      )
    )
  )
 
0.14765512265512265, 4.380143, def cbbbbbghgigjeahajacjegfgdcjeicdd(I):
  new_grid = I
  for obj in objects(I, True, False, False):
    if color(obj) == 1 and size(obj) == valmax(objects(I, True, False, False), size):
      new_grid = paint(new_grid, recolor(8, obj))
      break 
  return new_grid
 
0.9402056277056277, 30.87751, def eacjbadedhjgeeidjjficiffdbjgggec(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  largest_obj = argmax(objs, lambda obj: len(obj))
  O = I
  for i in range(len(I)):
    for j in range(len(I[0])):
      if (I[i][j], (i, j)) not in largest_obj:
        O = paint(O, {(8, (i, j))}) 
  return O
 
0.15268204018204018, 5.0551662, def jjgdieffefebehbbibgcdagafihbbaff(I):
  one_objs = objects(I, univalued=True, diagonal=False, without_bg=True) # Identify '1' objects
  O = I
  for obj in one_objs:
    outline = toindices(obj) # Get all indices of the object
    for cell in toindices(obj):
      if len(dneighbors(cell) - outline) == 0: # Check if a cell has all its direct neighbors within the object 
        O = paint(O, {(8, cell)}) # Paint only if it's an outer boundary cell
  return O
 
0.1447607947607948, 11.832245, def fdecddacfeefegeeicecaecjabbjaegb(I):
  return paint(
    canvas(9, shape(I)),
    merge(
      apply(
        lambda obj: recolor(8, difference(obj, toobject(hfrontier(lrcorner(obj)), I))) if color(obj) == 1 else obj,
        objects(I, univalued=True, diagonal=False, without_bg=True)
      )
    )
  )
 
0.1111999111999112, 5.187897, def dabffdhaaahfedffjdhbfedffcadgabj(I):
  return paint(
    I,
    merge(
      apply(
        lambda obj: recolor(8, difference(obj, toobject(shoot(lrcorner(obj), LEFT), I))) if color(obj) == 1 else frozenset(),
        objects(I, univalued=True, diagonal=False, without_bg=True)
      )
    )
  ) 
 
0.22947052947052948, 15.467713, def defebgfafccbehbbaadjjdefcacjbeca(I):
  def recolor_connected_down(grid, target_obj, new_color):
    h = height(target_obj)
    for i in range(1, h + 1):
      shifted_obj = shift(target_obj, (i, 0))
      grid = underpaint(grid, recolor(new_color, shifted_obj))
    return grid

  target_obj = argmin(objects(I, univalued=True, diagonal=False, without_bg=True), compfunc=uppermost)
  return recolor_connected_down(I, target_obj, 8)
 
0.31102231102231104, 32.279625, def jihbaegbfahcedifbcdcjjffffdfejeb(I):
  O = canvas(9, shape(I))
  for obj in objects(I, univalued=True, diagonal=False, without_bg=True):
    if color(obj) == 1:
      O = underpaint(O, recolor(8, delta(toindices(obj))))
      O = underpaint(O, obj)
  return O
 
0.1685869685869686, 12.962861, def gfdgdciiebdceiadagbcgeajfgeedfhd(I):
  return paint(
    I,
    merge(
      apply(
        lambda obj: recolor(8, frozenset((1, (i, rightmost(obj))) for i in range(uppermost(obj), lowermost(obj) + 1) if rightmost(obj) < width(I) - 1)),
        objects(I, univalued=True, diagonal=False, without_bg=True)
      )
    )
  )
 
0.13284077034077035, 6.706432, def abeeaddejefaeabfjiijhafhjbagccag(I):
  return paint(
    I,
    merge(
      apply(
        lambda obj: recolor(8, sfilter(toindices(obj), lambda loc: loc[1] == rightmost(obj) and loc[1] < width(I) - 1)), 
        objects(I, univalued=True, diagonal=False, without_bg=True)
      )
    )
  )
 
0.1685911310911311, 34.02397, def gjbjfagegjgaedeficafibbdecbgjfdj(I):
  O = canvas(mostcolor(I), shape(I))  # Create a canvas filled with background color
  for obj in objects(I, univalued=True, diagonal=False, without_bg=True):
    if size(obj) == valmax(objects(I, univalued=True, diagonal=False, without_bg=True), size):
      O = underpaint(O, recolor(8, toindices(obj))) # Paint on canvas only if object is the largest 
  return O
 
0.1087967587967588, 3.4897141, def dcefejficbefebdiabcijhihedgagjbe(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  target_objs = sfilter(objs, lambda obj: any(v == 1 for v, _ in obj))
  return paint(I, merge(apply(lambda obj: recolor(8, obj), target_objs)))
 
0.1218129093129093, 6.655027, def ggdafddadibgeeadbadbedgiacggjbbb(I):
  one_objs = objects(I, univalued=True, diagonal=False, without_bg=True)  # Identify '1' objects
  O = I
  for obj in one_objs:
    outline_indices = set()
    for cell in toindices(obj):
      if any(neighbor in delta(toindices(obj)) for neighbor in dneighbors(cell)):
        outline_indices.add(cell)
    O = paint(O, recolor(8, outline_indices))
  return O
 
0.1087967587967588, 3.4897141, def fddfhacdicaeefeeadcahdhjjeidagij(I):
  return paint(
    I, 
    merge(
      apply(
        lambda obj: recolor(
          8, 
          difference(
            obj, 
            toobject(
              asindices(
                hsplit(
                  subgrid(obj, I), 
                  width(obj)
                )[-1]
              ),
              I
            )
          )
        ), 
        colorfilter(objects(I, univalued=True, diagonal=False, without_bg=True), 1)
      )
    )
  )
 
0.16696220446220447, 8.14202, def fccccedbicaeeeibafifjffbaaaaedgb(I):
  return paint(
    I, 
    merge(
      apply(
        lambda obj: branch(
          color(obj) == 1, 
          toobject(
            sfilter(
              asindices(subgrid(obj, I)), 
              lambda ij: ij[1] < width(subgrid(obj, I)) - 1
            ),
            replace(subgrid(obj, I), 1, 8)
          ), 
          obj
        ), 
        objects(I, univalued=True, diagonal=False, without_bg=True)
      )
    )
  )
 
0.11722444222444223, 8.906253, def jjfchdhdjdafebccaegaefjbafgeadgb(I):
  return tuple(
    tuple(
      8 if v == 1 and j < width(I) - 1 and row[j+1] == 1 else v
      for j, v in enumerate(row)
    ) for i, row in enumerate(I)
  )
 
0.844573482073482, 61.2585, def ebfjfeddeheeeggiiagbjegcdaddcfea(I):
  p = palette(I)
  mc = mostcolor(I)
  lc =  leastcommon(tuple(v for v in p if v != ZERO and v != mc)) 
  O = tuple(tuple(lc if v == mc else v for v in row) for row in I)
  return O
 
0.1363830613830614, 5.027735, def ceafedgdaccfeegeiehaacegecajeeii(I):
  rm_obj =  last(sorted(objects(I, univalued=False, diagonal=False, without_bg=True), key=rightmost))
  rm_color = color(rm_obj)
  bg_color = mostcolor(I)
  fill_indices = frozenset((i, j-1) for i, j in toindices(rm_obj) if index(I, (i, j-1)) == bg_color)
  O = fill(I, rm_color, fill_indices)
  return O
 
0.1355810855810856, 4.4288096, def difeddicaiheeechbdbhcefgfehcbafa(I):
  objs = objects(I, univalued=False, diagonal=False, without_bg=True)
  rm_obj = argmax(objs, rightmost)
  fill_line = connect(ulcorner(rm_obj), (ulcorner(rm_obj)[0],0))
  fill_indices = sfilter(fill_line, lambda loc: index(I, loc) == mostcolor(I))
  O = paint(I, recolor(color(rm_obj), fill_indices))
  return O
 
0.09381313131313132, 2.6260376, def aigbjeedghadeagbighabgciddddcche(I):
    def replace_rightmost_8(grid):
        for j in range(len(grid[0])-1, -1, -1):
            for i in range(len(grid)):
                if grid[i][j] == 8:
                    return paint(cover(grid, toobject(frozenset({(i, j)}), grid)), recolor(1, toobject(frozenset({(i, j)}), grid)))
        return grid
    O = replace_rightmost_8(I)
    return O
 
0.17962037962037963, 8.228819, def ajiedejciaadebhcadfbahcefdfbfgcb(I):
    objs = objects(I, T, F, T) 
    target_obj = extract(objs, lambda obj: color(obj) == 8)
    rightmost_j = rightmost(target_obj)
    filling_line = frozenset((1, (i, j)) for i, j in product(interval(uppermost(target_obj), lowermost(target_obj) + 1, 1), interval(leftmost(target_obj), rightmost_j + 1, 1)))
    O = paint(cover(I, target_obj), filling_line)
    return O
 
0.09913142413142413, 2.625364, def ceeaeeedchdheedabeeibhejdcbdhfcb(I):
    target = extract(objects(I, T, F, T), lambda o: color(o) == 8)
    start = (uppermost(target), leftmost(target))
    end = (lowermost(target), rightmost(target))
    line = connect(start, end)
    filled_grid = fill(I, 1, line)
    O = underpaint(filled_grid, target)
    return O
 
0.31102231102231104, 17.902494, def acabaeedhbhfebfdaibedjdcfgafjhjb(I):
  for obj in objects(I, T, F, T):
    if color(obj) == 8:
      for i in range(uppermost(obj), lowermost(obj) + 1):
        for j in range(leftmost(obj), rightmost(obj) + 1):
          I = fill(I, 1, ((i, j),))
  return I
 
0.12378038628038629, 6.298277, def ajgbbgcdhcdeedfdjhfdaebigcebdiga(I):
  objs = objects(I, True, False, False)
  obj = extract(objs, lambda obj: color(obj) == 8)
  start = (uppermost(obj), rightmost(obj))
  O = I
  for k in range(height(obj)):
    O = fill(O, 1, connect(start, (start[0] + k, start[1] + k)))
  return O
 
0.38159618159618164, 17.70376, def icgiicebeficecddacbhahfcaheegbag(I):
  O = I
  for j in range(width(I)):
    for i in range(height(I)):
      if index(I, (i,j)) == 8:
        if j == width(I) - 1 or index(I, (i, j + 1)) != 8:
          O = fill(O, 1, connect((i,j), (i + min(height(I) - i, width(I) - j) - 1, j + min(height(I) - i, width(I) - j) - 1)))
  return O
 
0.27359446109446106, 26.148693, def ajefbeaedhbjeejdiffejdjbjdbfdeed(I):
    O = I
    for i, row in enumerate(I):
        for j, val in enumerate(row):
            if val == 8:
                if j == len(row) - 1 or row[j+1] != 8:
                    O = fill(O, 1, ((i,j), (i+1, j+1), (i+2, j+2)))
    return O
 
0.10262792762792763, 3.2367861, def ffjicfichfjcedfjbcfdeciaifecedcf(I):
  O = I
  for obj in objects(I, True, False, False):
    if color(obj) == 8:
      for i in range(height(obj)):
        j = rightmost(shift(obj, (-i, -i)))
        if (i, j) in toindices(obj):
          O = fill(O, 1, {(i, j)})
  return O
 
0.6400280275280275, 48.011185, def ebfgecehefdjedbeadabifbfcdbcfcgj(I):
  x1 = palette(I) # Extract the palette of colors from the input grid
  x2 = remove(ZERO, x1) # Remove color '0' from the palette
  x3 = list(x2) # Convert the frozenset to a list to allow sorting
  x3.sort(key=lambda c: sum(row.count(c) for row in I)) # Sort colors by their frequency in ascending order
  x4 = x3[1] # Select the second least common color 
  x5 = mostcolor(I) # Find the most common color in the input grid
  O = replace(I, x5, x4) # Replace the most common color with the second least common color
  return O # Return the transformed grid
 
0.844573482073482, 14.882777, def bahidfachhdaefidjgcedfiageefbgbb(I):
  color_counts = {c: colorcount(I, c) for c in palette(I) - {ZERO, mostcolor(I)}} # Create a dictionary of color counts, excluding 0 and the most common color
  second_least_common = min(color_counts, key=color_counts.get) # Find the color with the minimum count
  return replace(I, mostcolor(I), second_least_common) # Replace the most common color with the identified color
 
0.13026279276279276, 3.983501, def cjdbceehhabcebhdagifagafcdcbgjff(I):
  rm_obj = argmax(objects(I, univalued=False, diagonal=False, without_bg=True), rightmost)
  fill_color = 1 if len(rm_obj) == 1 else color(rm_obj)
  O = I
  for j in range(leftmost(rm_obj) - 1, -1, -1):
    if index(I, (uppermost(rm_obj), j)) == mostcolor(I):
      O = paint(O, {(fill_color, (uppermost(rm_obj), j))})
  return O
 
0.5622197247197247, 27.265337, def degbifjfcebdeecciadfdfgcfafccfcc(I):
  rm_obj = argmax(objects(I, univalued=False, diagonal=False, without_bg=True), rightmost)
  target_color = color(rm_obj) if len(rm_obj) > 1 else 1
  left_edge = leftmost(rm_obj)
  modified_grid = tuple(tuple(target_color if j < left_edge and cell == mostcolor(I) else cell for j, cell in enumerate(row)) for row in I)
  return modified_grid 
 
0.04033882783882784, 1.1370666, def bidaddddceaeehchjdbfcbabgcifdfjg(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  rightmost_obj = argmax(objs, lambda obj: rightmost(toindices(obj))) 
  O = paint(
      cover(I, rightmost_obj), 
      recolor(1, rightmost_obj) if color(rightmost_obj) == 8 else rightmost_obj
  )
  return O
 
0.10454822954822957, 6.780546, def ebdccgeedehdehefajagfcbhfedaeagb(I):
  def process_column(col):
    for i, v in enumerate(col):
      if v == 8:
        return [(1 if j == i else k) for j, k in enumerate(col)]
    return col
  O = dmirror(tuple(process_column(c) for c in dmirror(I)))
  return O
 
0.1552988677988678, 12.977341, def cibejcchbcheefafjdbffgeeffacddcf(I):
  for obj in objects(I, T, F, T):
    if color(obj) == 8:
      right_edge = {(i, rightmost(obj)) for i, j in toindices(obj)}
      I = fill(I, 1, right_edge)
  return I
 
0.13325285825285826, 7.6796813, def jdifcbdbaeafegcebefagbfccfdgiaac(I):
  O = I 
  for i in range(height(I)):
    for j in range(width(I)):
      if index(I, (i, j)) == 8 and (j == width(I) - 1 or index(I, (i + 1, j + 1)) != 8):
        O = fill(O, 1, {(i, j)})
  return O
 
0.14272671772671774, 7.8360496, def diefhiaefchiegddjfabgeiefbcjjhbg(I):
  O = I
  for i in range(height(I) - 1):
    for j in range(width(I) - 1):
      if index(I, (i, j)) == 8 and index(I, (i + 1, j + 1)) != 8:
        O = fill(O, 1, {(i, j)})
  return O
 
0.11923770673770674, 4.699959, def iffbchidfhdceagcbbdefaeejbcdecgf(I):
  O = I
  for obj in objects(I, True, False, False):
    if color(obj) == 8:
      i, j = uppermost(obj), rightmost(obj)
      O = fill(O, 1, {(i, j)})
  return O
 
0.08286019536019536, 6.1009507, def dcfaideabfjcefabjfgbefdaebbceeeg(I):
  O = I
  for i in range(height(I) - 1, -1, -1):
    for j in range(width(I) - 1, -1, -1):
      if index(I, (i, j)) == 8 and (j == 0 or index(I, (i + 1, j - 1)) != 8):
        O = fill(O, 1, {(i, j)})
        break 
  return O
 
0.09815739815739816, 2.8972874, def iaebffaebafaefafieghageffdjadigd(I):
  mc = mostcolor(I)
  p = palette(I) - {mc, 0}
  lc = leastcommon(tuple(v for v in p))
  return tuple(tuple(1 if j == len(row)-1 and v == lc else v for j, v in enumerate(row)) for row in I)
 
0.1552988677988678, 12.977341, def afbfddbecddbegeaifddcacfbiffdgbj(I):
  mc = mostcolor(I)
  p = palette(I) - {mc, 0}
  lc = leastcommon(tuple(v for v in p))
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  target_objs = colorfilter(objs, lc)
  modified_grid = I
  for obj in target_objs:
    for i in range(uppermost(obj), lowermost(obj) + 1):
      modified_grid = fill(modified_grid, 1, {(i, rightmost(obj))})
  return modified_grid
 
0.10704711954711955, 3.1974473, def acaebchgejdgecbabjdehbdebbehfhaf(I):
  rm_obj = argmax(objects(I, univalued=False, diagonal=False, without_bg=True), rightmost)
  target_color = color(rm_obj) if size(rm_obj) > 1 else 1
  O = I
  for j in range(rightmost(rm_obj) - 1, -1, -1):
    if index(I, (uppermost(rm_obj), j)) == mostcolor(I):
      O = paint(O, {(target_color, (uppermost(rm_obj), j))})
    else:
      break
  return O
 
0.12465312465312464, 3.5827634, def eifcegdjhddbeccaabehcbcfihdccabc(I):
  rm_obj = argmax(objects(I, univalued=False, diagonal=False, without_bg=True), rightmost)
  target_color = color(rm_obj) if size(rm_obj) > 1 else 1
  fill_start = leftmost(rm_obj)
  fill_end = next((j for j in range(fill_start - 1, -1, -1) 
                  if index(I, (uppermost(rm_obj), j)) != mostcolor(I)), -1) + 1
  fill_indices = {(uppermost(rm_obj), j) for j in range(fill_end, fill_start)}
  return fill(I, target_color, fill_indices)
 
0.10102536352536352, 3.2543373, def abcbccdebhfiebddjcbjfhebfgddjgha(I):
  rm_obj = argmax(objects(I, univalued=False, diagonal=False, without_bg=True), rightmost)
  target_color = color(rm_obj) if size(rm_obj) > 1 else 1
  row_indices = frozenset((uppermost(rm_obj), j) for j in range(width(I)))
  fill_line = intersection(shoot((leftmost(rm_obj) - 1, uppermost(rm_obj)), LEFT), row_indices)
  return paint(I, recolor(target_color, fill_line))
 
0.12183233433233434, 1.8909991, def ddeiddhdfedaedjhbgfdbdedcdeeahei(I):
  def rightmost_cell(obj):
    return max(obj, key=lambda cell: cell[1][1])
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  rightmost_obj = argmax(objs, rightmost_cell)
  new_grid = [[v if (v, (i, j)) not in rightmost_obj else 1 for j, v in enumerate(row)] for i, row in enumerate(I)] 
  return tuple(tuple(row) for row in new_grid)
 
0.18406315906315907, 22.88582, def hfceeigagfbbefbabgaaiaibahebjibf(I):
  for obj in objects(I, T, F, T):
    if color(obj) == 8:
      start_point = (uppermost(obj), rightmost(obj))
      I = paint(I, recolor(1, shoot(start_point, RIGHT)))
  return I
 
0.13895687645687646, 16.269022, def dfihbgdgbbcbebcjbjecdefibeaceaah(I):
  O = I
  for i, row in enumerate(I):
    for j in range(len(row)-1, -1, -1):  # Iterate in reverse to find rightmost '8' first
      if row[j] == 8:
        O = fill(O, 1, {(i, j), (i+1, j+1), (i+2, j+2)}) # Fill diagonal
        break  # Move to the next row once the rightmost '8' is found
  return O
 
0.15792402042402043, 13.661104, def fdhaddbegaiaeefcajfdjeedidifcfch(I):
  O = I
  for obj in objects(I, True, False, False):
    if color(obj) == 8:
      i, j = uppermost(obj), rightmost(obj)
      O = fill(O, 1, {(i, j), (i + 1, j + 1), (i + 2, j + 2)})
  return O
 
0.1086011211011211, 2.6066184, def jeiecdbifabaecjajefjcacdhhefgbbd(I):
  mc = mostcolor(I)
  p = palette(I) - {mc, 0}
  lc = min(p)
  return tuple(tuple(1 if v == lc and any(j == rightmost(obj) and i in range(uppermost(obj), lowermost(obj) + 1) for obj in objects(I, univalued=True, diagonal=False, without_bg=True)) else v for j, v in enumerate(row)) for i, row in enumerate(I))
 
0.11414002664002663, 8.818847, def dhgjiafjcacjebffaecajagifcejdcig(I):
    mc = mostcolor(I)
    target_color = leastcommon([c for c in palette(I) if c not in (mc, 0)])
    new_grid = []
    for i, row in enumerate(I):
        new_row = list(row)
        for j, v in enumerate(row):
            if v == target_color and (j == len(row) - 1 or I[i][j + 1] != target_color):
                new_row[j] = 1
        new_grid.append(tuple(new_row))
    return tuple(new_grid)
 
0.05549034299034299, 1.0935861, def fcedchdfjdafeabcicbdeiaafagbdadc(I):
  def r8_filter(obj):
    return 1 if color(obj) == 8 and rightmost(obj) == rm_idx else 0
  rm_idx = max(j for i, row in enumerate(I) for j, v in enumerate(row) if v == 8)
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  return paint(I, recolor(1, merge(sfilter(objs, r8_filter))))
 
0.393983793983794, 14.721876, def dicecjiafdafebadicadfejbebjaaagc(I):
  for obj in objects(I, T, F, T):
    if color(obj) == 8:
      I = fill(I, 1, product(interval(uppermost(obj), lowermost(obj) + 1, 1), 
                              interval(rightmost(obj), len(I[0]), 1)))
  return I
 
0.20440670440670441, 8.376566, def cebffcbcejaaeccgaiajcbacibabbgae(I):
  objs = objects(I, T, F, T)
  target_obj = extract(objs, lambda obj: color(obj) == 8)
  right_edge = rightmost(target_obj)
  return fill(I, 1, product(interval(uppermost(target_obj), lowermost(target_obj) + 1, 1),
                            range(right_edge, len(I[0]))))
 
0.680504218004218, 30.549171, def ebfbcffaddbeeafcafcejbfadiahhgcj(I):
  for obj in objects(I, T, F, T):
    if color(obj) == 8:
      for i in range(uppermost(obj), lowermost(obj) + 1):
        I = fill(I, 1, hfrontier((i, rightmost(obj))))
  return I
 
0.3107087357087357, 18.828678, def jeegbbiafbeheeceibbdhagfdbedgbbb(I):
  O = I
  for i, row in enumerate(I):
    for j, value in enumerate(row):
      if value == 8 and (j == width(I) - 1 or (i < height(I) - 1 and j < width(I) - 1 and index(I, (i + 1, j + 1)) != 8)):
        O = fill(O, 1, {(i, j), (i + 1, j), (i + 2, j)})
  return O
 
0.1041111666111666, 8.390397, def ieccjbeaeiaiedbdjcebcffdbedhibfa(I):
  mc = mostcolor(I)  # Identify background color
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)  # Find all objects
  h, w = len(I), len(I[0])
  new_grid = list(list(row) for row in I)  # Create a mutable copy of the grid

  for obj in objs:
    for i in range(uppermost(obj), lowermost(obj) + 1):  # Iterate through object rows
      for j in range(rightmost(obj), -1, -1):  # Iterate from right to left
        if (i, j) in toindices(obj):  # Find the rightmost object cell in the row
          new_grid[i][j] = 1
          break  # Move to the next row once the edge is marked

  return tuple(tuple(row) for row in new_grid)  # Return the modified grid
 
0.117007992007992, 8.589237, def bhhiajcacfhbeiaajjebaffhbabbcjbc(I):
  mc = mostcolor(I)  # Identify background color
  indices = asindices(I)  # Get all indices of the grid
  h, w = len(I), len(I[0])
  new_grid = list(list(row) for row in I)  # Create a mutable copy of the grid

  for i, j in indices:
    if I[i][j] != mc and j < w - 1 and I[i][j + 1] == mc:  # Check for right edge condition
      new_grid[i][j] = 1

  return tuple(tuple(row) for row in new_grid)
 
0.14255189255189255, 4.3509226, def biebdcfdehihefcbiadjdceebffeffff(I):
  rm_obj = argmax(objects(I, univalued=False, diagonal=False, without_bg=True), rightmost)
  target_color = color(rm_obj) if size(rm_obj) > 1 else 1
  fill_line = connect((leftmost(rm_obj), uppermost(rm_obj)), (0, uppermost(rm_obj)))
  fill_indices = sfilter(fill_line, lambda loc: index(I, loc) == mostcolor(I))
  return paint(I, recolor(target_color, fill_indices))
 
0.24248112998112997, 8.075929, def baffgabdfdaceghfaaaafaedeigbgbbe(I):
  rm_obj = argmax(objects(I, univalued=False, diagonal=False, without_bg=True), rightmost)
  target_color = color(rm_obj) if size(rm_obj) > 1 else 1
  fill_area = frozenset((i, j) 
                      for i in range(uppermost(rm_obj), lowermost(rm_obj) + 1)
                      for j in range(0, leftmost(rm_obj)))
  fill_indices = sfilter(fill_area, lambda loc: index(I, loc) == mostcolor(I))
  return paint(I, recolor(target_color, fill_indices))
 
0.6653971028971029, 8.254645, def djdebccfhfahedcijbdeabbcjadffbie(I):
  objs = objects(I, True, False, False)
  rightmost_obj = argmax(objs, lambda obj: rightmost(obj))
  return paint(I, recolor(1, rightmost_obj)) if rightmost_obj else I
 
0.3391747141747142, 17.079178, def iecaibfahjhaehdgjdgacfdfjcjifbea(I):
  for obj in sfilter(objects(I, T, F, T), lambda o: color(o) == 8):
    I = fill(I, 1, 
             product(interval(uppermost(obj), lowermost(obj) + 1, 1),
                     interval(rightmost(obj) + 1, len(I[0]), 1)))
  return I
 
0.48066100566100567, 16.638083, def bibheicccdafedcaaieegcdefcccfccf(I):
  for i in range(len(I)):
    for j in range(len(I[0])):
      if I[i][j] == 8:
        for k in range(j + 1, len(I[0])):
          I = paint(I, {(1, (i, k))})
  return I
 
0.1393953268953269, 7.0584683, def babbfahcehijedfbbiceifcjbbccccbe(I):
  def trailing_cells(obj):
    for i, j in toindices(obj):
      if j == rightmost(obj) or i == height(I) - 1 or (i + 1, j) not in toindices(obj):
        yield (i, j)
        
  new_I = I
  for obj in objects(I, True, False, False):
    if color(obj) == 8:
       new_I = fill(new_I, 1, frozenset(trailing_cells(obj)))
  return new_I
 
0.18237734487734486, 17.357065, def bjfaebeeddibeeefbbifhaacaccajgec(I):
  mc = mostcolor(I)  # Find the background color
  objs = objects(I, T, F, T)  # Get all objects excluding the background
  largest_obj = argmax(objs, size)  # Find the largest object
  rightmost_col = rightmost(largest_obj)  # Get the rightmost column index of the largest object
  O = fill(I, 1, frozenset((i, rightmost_col) for i in range(height(I))))  # Replace the entire column with '1's
  return O
 
0.10354784104784104, 4.808506, def dbhjgcdhfdfbebbdagidacbdibddfejj(I):
  objs = objects(I, T, F, T)
  largest_obj = argmax(objs, lambda obj: rightmost(obj))  # Find the largest object based on rightmost position
  O = paint(I, recolor(1, frozenset((i, rightmost(largest_obj)) for i in range(uppermost(largest_obj), lowermost(largest_obj) + 1))))  # Replace only the relevant part of the column
  return O
 
0.12958291708291708, 4.185604, def fedfeffeaifdeaidbadjjcdehfcfccba(I):
    objs = objects(I, T, F, T)
    largest_obj = argmax(objs, size)
    replaced_cells = apply(lambda cell: (1, cell[1]), sfilter(largest_obj, lambda cell: cell[1][1] == rightmost(largest_obj)))  # Directly modify cell values
    O = paint(I, frozenset(replaced_cells))
    return O
 
0.10102536352536352, 3.2543373, def diafeeddchdbefbbacffebfabegecfhe(I):
    non_background_indices = mfilter(asindices(I), lambda ind: I[ind[0]][ind[1]] != mostcolor(I))  # Find non-background indices
    objs = objects(I, T, F, T)
    largest_obj_indices = toindices(argmax(objs, size))
    rightmost_col = rightmost(largest_obj_indices)
    column_indices_to_replace =  frozenset((i, rightmost_col) for i in range(height(I))) & non_background_indices  # Intersect column indices with non-background indices
    O = fill(I, 1, column_indices_to_replace)  # Fill only the necessary cells in the column
    return O
 
0.6854340104340104, 39.977646, def cfecjbdebgcheacjifgecgbgegabbebf(I):
    rm_obj = argmax(objects(I, univalued=False, diagonal=False, without_bg=True), rightmost)
    target_color = color(rm_obj) if size(rm_obj) > 1 else 1
    row = I[uppermost(rm_obj)]
    fill_end = next((j for j in range(len(row) - 1, -1, -1)
                    if row[j] != mostcolor(I)), -1) + 1
    return tuple(tuple(target_color if j < fill_end and row[j] == mostcolor(I) else row[j]
               for j in range(len(row))) for i, row in enumerate(I))
 
0.09354811854811855, 4.256204, def cdbaiacgbcaaedajjabadddedibeiegd(I):
  def rightmost_8_indices(grid):
    for j in range(len(grid[0])-1, -1, -1):
      for i in range(len(grid)):
        if grid[i][j] == 8:
          return frozenset((i, k) for k in range(j, -1, -1) if grid[i][k] == 8)
    return frozenset()
  indices = rightmost_8_indices(I)
  return paint(I, recolor(1, toobject(indices, I)))
 
0.07785825285825286, 3.029963, def dgigadbdcedfeffeafdhdjebfedbdebc(I):
  for j in range(len(I[0]) - 1, -1, -1):
    for i in range(len(I)):
      if I[i][j] == 8:
        start = (i, j)
        end = (i, next((k for k in range(j, -1, -1) if I[i][k] != 8), 0))
        indices = connect(start, end) - {end}
        return paint(I, recolor(1, toobject(indices, I)))
  return I
 
0.22383449883449885, 21.650955, def ebdecfcbfedaegcfidacjhehebefcbaa(I):
  def trailing_cells(obj):
    return frozenset((i + k, rightmost(obj)) 
                    for i, j in toindices(obj) if j == rightmost(obj)
                    for k in range(1, height(I) - i))
  
  return fill(I, 1, 
              merge(apply(trailing_cells,
                          sfilter(objects(I, True, False, False), 
                                  lambda obj: color(obj) == 8))))
 
0.1976107226107226, 17.623, def jceaccaehecdedbgbgcacdcjgfgegiae(I):
  def extend_down(i, j, grid):
    k = i + 1
    while k < height(grid) and index(grid, (k, j)) == mostcolor(grid):
      grid = fill(grid, 1, {(k, j)})
      k += 1
    return grid

  for obj in objects(I, True, False, False):
    if color(obj) == 8:
      for i, j in toindices(obj):
        if j == rightmost(obj):
          I = extend_down(i, j, I)
  return I
 
0.16298007548007548, 12.977026, def bbefdcgcgdjhefhdaacgedaeahgbadha(I):
  for obj in objects(I, True, False, False):
    if color(obj) == 8:
      for i in range(uppermost(obj), lowermost(obj) + 1):
        j = rightmost(obj)
        k = i
        while k < height(I) and index(I, (k, j)) == mostcolor(I):
          I = fill(I, 1, {(k, j)})
          k += 1
  return I
 
0.14605255855255855, 5.8394766, def eageedghgeajeaabbcafabgbdbdffagg(I):
  # Find the largest object
  largest_obj = argmax(objects(I, univalued=False, diagonal=False, without_bg=True), size)
  
  # Determine the color for replacement
  target_color = color(largest_obj) if size(largest_obj) > 1 else 1
  
  # Create a mask for replacement
  mask = backdrop(largest_obj)
  
  # Apply the mask and replace background cells
  return tuple(
      tuple(target_color if (i, j) in mask and v == mostcolor(I) else v for j, v in enumerate(row))
      for i, row in enumerate(I)
  )
 
0.10291930291930292, 3.179394, def ecijjhbbcdhdeebcbhjddabjahcbdacd(I):
  # Find the rightmost object
  rm_obj = argmax(objects(I, univalued=False, diagonal=False, without_bg=True), rightmost)
  
  # Determine the color for replacement
  target_color = color(rm_obj) if size(rm_obj) > 1 else 1
  
  # Create a fill line from the rightmost cell of the object
  fill_line = connect((rightmost(rm_obj), uppermost(rm_obj)), (len(I[0]) - 1, uppermost(rm_obj)))
  
  # Replace background cells along the fill line
  return paint(I, recolor(target_color, intersection(fill_line, ofcolor(I, mostcolor(I))))) 
 
0.10709429459429459, 2.781099, def hhaiefffejideajbabdjjdhifjicefbi(I):
  def rightmost_cell(obj):
    return max(obj, key=lambda cell: cell[1][1])
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  rightmost_obj = argmax(objs, rightmost_cell)
  new_grid = [[v if (v, (i, j)) not in rightmost_obj or i < lowermost(rightmost_obj) else 1 for j, v in enumerate(row)] for i, row in enumerate(I)]
  return tuple(tuple(row) for row in new_grid)
 
0.10386557886557887, 2.549874, def iabdabajbadfedfajahfffeehgbfjgfg(I):
  def rightmost_cell(obj):
    return max(obj, key=lambda cell: cell[1][1])
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  rightmost_obj = argmax(objs, rightmost_cell)
  bottom_indices = {(i,j) for v,(i,j) in rightmost_obj if i == lowermost(rightmost_obj) - 1}
  new_grid = fill(I, 1, bottom_indices)
  return new_grid
 
0.11615190365190364, 2.5585675, def cjafcgdiabccedfcaabfhdbdibagajgi(I):
  def rightmost_cell(obj):
    return max(obj, key=lambda cell: cell[1][1])
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  rightmost_obj = argmax(objs, rightmost_cell)
  shifted_obj = shift(rightmost_obj, (-1,0))
  return paint(I, recolor(1, intersection(toindices(shifted_obj), toindices(rightmost_obj))))
 
0.12088744588744589, 3.369923, def ehdgeacagbfcececjfecdgadcefeeeaf(I):
  def rightmost_cell(obj):
    return max(obj, key=lambda cell: cell[1][1])
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  rightmost_obj = argmax(objs, rightmost_cell)
  modified_obj = frozenset((1, (i-1, j)) if i == lowermost(rightmost_obj) else (v, (i, j)) for v, (i, j) in rightmost_obj)
  return paint(cover(I, rightmost_obj), modified_obj)
 
0.109987234987235, 2.86266, def bcgdbgeijehcecffjchfcajhcaahaedf(I):
  def diagonal_end(obj):
    return (lowermost(obj), rightmost(obj) + height(obj) - uppermost(obj))

  return fill(I, 1, 
              merge(apply(lambda obj: connect( (uppermost(obj), rightmost(obj)), diagonal_end(obj) ) & backdrop(obj),
                          sfilter(objects(I, True, False, False), lambda obj: color(obj) == 8)))) 
 
0.1665945165945166, 15.537412, def ejhfjeeahaaaejebadiiibcagedgaacf(I):
  def diagonal_indices(obj):
    i, j = uppermost(obj), rightmost(obj)
    return frozenset((i+k, j+k) for k in range(min(height(obj), width(obj))))

  return fill(I, 1,
              merge(apply(diagonal_indices,
                          sfilter(objects(I, True, False, False), lambda obj: color(obj) == 8))))
 
0.10321067821067821, 2.909634, def cbbaffedccgdeedijcacbcceihgcgfcg(I):
  def diagonal_line_from_corner(obj):
    return connect(urcorner(obj), (lrcorner(obj)[0], lrcorner(obj)[1] + (urcorner(obj)[1] - llcorner(obj)[1]))) & backdrop(obj)

  return fill(I, 1, merge(apply(diagonal_line_from_corner, sfilter(objects(I, True, False, False), lambda obj: color(obj) == 8))))
 
0.11765873015873014, 6.246981, def aicabebegedeecdhbaaddfcahhhdffbd(I):
  objs = objects(I, True, False, False)
  for obj in objs:
    if color(obj) == 8:
      rightmost_col = rightmost(obj)
      rightmost_cells = frozenset((i, rightmost_col) for i in range(height(I)))
      I = fill(I, 1, intersection(toindices(obj), rightmost_cells))
  return I
 
0.11414002664002663, 8.818847, def fcabbdaifceiebifjifceecadiffaaab(I):
  for j in range(width(I)):
    for i in range(height(I)):
      if index(I,(i,j))==8 and ((j==width(I)-1) or index(I,(i,j+1))!=8):
        I = fill(I,1,{(i,j)})
  return I
 
0.20347846597846597, 16.935892, def ghbjaeaffebhecbiafacceaadehacdeb(I):
  return paint(I, recolor(1, merge(apply(lambda obj: sfilter(toindices(obj), lambda ind: ind[1] == rightmost(obj)), objects(I, True, False, False)))))
 
0.1552988677988678, 12.977341, def idbecegjbdgfeicjadeddegddjgagbdf(I):
  for obj in objects(I, True, False, False):
    if color(obj) == 8:
      I = paint(I, recolor(1, frozenset((i, rightmost(obj)) for i in range(uppermost(obj), lowermost(obj) + 1))))
  return I
 
0.15461621711621712, 9.5987215, def cefiabgcdgadedgcadgbbbeeeechjaee(I):
  def rightmost_cell(obj):
    return max(obj, key=lambda cell: cell[1][1])
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  rightmost_obj = argmax(objs, rightmost_cell)
  shifted_indices = shift(toindices(rightmost_obj), (-1, -1))
  return fill(I, 1, shifted_indices)
 
0.1382742257742258, 9.769536, def cdeccdgfafceebhajbjahicbcjdcaidb(I):
  def rightmost_corner(patch):
    return lrcorner(patch)
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  rightmost_obj = argmax(objs, rightmost_corner)
  shifted_obj = shift(rightmost_obj, (-1, -1))
  return paint(I, recolor(1, shifted_obj))
 
0.13344572094572094, 12.1525, def dgbbabfcabeceaabijffhdcgfjcdbcai(I):
  def rightmost_obj_indices(grid):
    objs = objects(grid, univalued=True, diagonal=False, without_bg=True)
    return toindices(argmax(objs, lambda obj: rightmost(obj)))
  return fill(I, 1, shift(rightmost_obj_indices(I), (-1, -1)))
 
0.13344572094572094, 4.4638314, def acjhhjaidbjaecaciefbeehgfifdebge(I):
  def modify_rightmost(grid):
    objs = objects(grid, univalued=True, diagonal=False, without_bg=True)
    rightmost_obj = argmax(objs, lambda obj: rightmost(obj))
    return paint(cover(grid, rightmost_obj), recolor(1, shift(rightmost_obj, (-1, -1))))
  return modify_rightmost(I)
 
0.1876970251970252, 19.108377, def ffdicdhdegjdefdfifdcabceedbaihig(I):
  for obj in objects(I, T, F, T):
    if color(obj) == 8:
      I = paint(I, recolor(1, 
                            product(interval(uppermost(obj), lowermost(obj) + 1, 1),
                                    {rightmost(obj) + 1})))
  return I
 
0.40952242202242206, 31.822296, def iiddbbbeaahheaddidcejigfhgdfdbdf(I):
  for i in range(len(I)):
    for j in range(len(I[0])):
      if I[i][j] == 8:
        k = j + 1
        while k < len(I[0]) and (i, k) not in toindices(merge(objects(I, T, F, T))):
          I = paint(I, {(1, (i, k))})
          k += 1
  return I
 
0.11765873015873014, 6.246981, def ifhefigeedcaeajfiebdhfcdiabechcb(I):
  def is_rightmost(i, j, obj):
    return j == rightmost(obj)

  return fill(I, 1, frozenset((i, j) for obj in sfilter(objects(I, True, False, False), lambda obj: color(obj) == 8) for i, j in toindices(obj) if is_rightmost(i, j, obj)))
 
0.1552988677988678, 12.977341, def jihifddafbhfeffjaieacahdfjabcfie(I):
  new_I = I
  for obj in sfilter(objects(I, True, False, False), lambda obj: color(obj) == 8):
    for i in range(uppermost(obj), lowermost(obj) + 1):
      j = rightmost(obj)
      new_I = fill(new_I, 1, {(i, j)})
  return new_I
 
0.15335497835497836, 10.665655, def edacijbdbbddefejbbbebdadcjbfaejf(I):
  rm_obj = argmax(objects(I, False, False, True), rightmost) 
  fill_line = hfrontier((uppermost(rm_obj), rightmost(rm_obj)))
  fill_indices = sfilter(fill_line, lambda loc: index(I, loc) == mostcolor(I))
  return paint(I, recolor(1, fill_indices))
 
0.18672438672438674, 10.572496, def fdfeccbgbcffeedbbijigffdabecedjh(I):
  rm_obj = argmax(objects(I, False, False, True), lambda obj: lrcorner(obj)[1])
  return paint(I, recolor(1, sfilter(hfrontier((0, lrcorner(rm_obj)[1])), lambda loc: index(I, loc) == mostcolor(I)))) 
 
0.2236041736041736, 8.222071, def dcdahbjhgecgefbejgbcdadfeeahfcfh(I):
  rightmost_col = valmax(objects(I, False, False, True), rightmost)
  return paint(I, recolor(1, {(i, j) for i in range(len(I)) for j in range(rightmost_col, len(I[0])) if index(I, (i, j)) == mostcolor(I)})) 
 
0.18610139860139863, 5.289919, def dgfbccadcbebeeebaffaabaddaaehghc(I):
  def find_and_replace(grid):
      for obj in objects(grid, univalued=True, diagonal=False, without_bg=True):
          if color(obj) == 8:
              return paint(cover(grid, obj), recolor(1, shift(obj, (-1, -1))))
      return grid
  return find_and_replace(I)
 
0.31284132534132536, 28.113169, def dafeabcfefbbeifdajfcjfcdcebebcbe(I):
  def rightmost_column(obj):
    return frozenset({(i, rightmost(obj)) for i in range(height(I))})

  return fill(I, 1, merge(apply(rightmost_column, sfilter(objects(I, True, False, False), lambda obj: color(obj) == 8))))
 
0.13237595737595736, 4.046074, def fdeihidffaageabdjaedefcjecgfecja(I):
  largest_obj = argmax(objects(I, T, F, T), size) # Find the largest object
  for i in range(uppermost(largest_obj), lowermost(largest_obj) + 1): # Iterate through rows of the largest object
    for j in range(len(I[0])-1, -1, -1): # Iterate through columns from right to left
      if (i,j) in toindices(largest_obj): # Check if the cell belongs to the largest object
        I = fill(I, 1, {(i,j)}) # Replace the cell with '1'
        break # Move to the next row after replacing one cell in the current row
  return I
 
0.1622141747141747, 6.063049, def fbebdbadfaabeffdihdeebegbbaicfce(I):
  rightmost_col = max(j for _, (i, j) in merge(objects(I, False, False, True)))
  return paint(I, recolor(1, {(i, j) for i in range(len(I)) for j in range(rightmost_col + 1, len(I[0]))}))
 
0.7006438006438006, 25.154814, def ijedebdeebiiefaibdbgbjcdeecaafca(I):
  for j in range(width(I)):
    for obj in objects(I, True, False, False):
      if color(obj) == 8 and any(index(I, (i,j)) == 8 for i in range(height(I))):
        I = fill(I, 1, frozenset((i, j) for i in range(height(I))))
  return I
 
0.6439421689421689, 26.853527, def behaebafebfgeaccbfbccbcjfdcbacfa(I):
  def right_extension(obj):
    j = rightmost(obj)
    return frozenset((i, k) for i in range(height(I)) for k in range(j, width(I)))

  return fill(I, 1, merge(apply(right_extension, sfilter(objects(I, True, False, False), lambda obj: color(obj) == 8))))
 
