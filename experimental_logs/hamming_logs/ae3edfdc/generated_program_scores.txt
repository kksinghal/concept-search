16.0, 14.920588, def fjddchdcbabfeedeiedfeehdfcafcbad(I):
  h, w = len(I), len(I[0])
  O = canvas(0, (h, w))
  for j in range(w):
    column = [I[i][j] for i in range(h)]
    filtered_column = [v for v in column if v != 0]
    k = h - len(filtered_column)
    for l, v in enumerate(filtered_column):
      O = fill(O, v, {(k + l, j)})
  return O
 
14.666666666666666, 16.435755, def edcdciaedgeaedhcajedjaccdbdhcfhj(I):
  O = I
  for j in range(width(I)):
    c = tuple(I[i][j] for i in range(height(I)))
    p = tuple(i for i, v in enumerate(c) if v != 0)
    k = height(I) - len(p)
    for l, i in enumerate(p):
      O = fill(O, I[i][j], {(k+l, j)})
      O = fill(O, 0, {(i, j)})
  return O 
 
9.0, 26.704441, def eebdaefjjdfdecbdbbbjgdcdeedbifba(I):
  O = I
  for x in range(width(I)):
      c = tuple(index(I, (y, x)) for y in range(height(I)))
      s = size(sfilter(c, matcher(identity, 0)))
      for i in range(height(I)):
          if index(I, (i, x)) != 0:
              O = fill(O, index(I, (i, x)), {(i + s, x)})
              O = fill(O, 0, {(i, x)})
              s -= 1
  return O
 
12.666666666666666, 17.21155, def iccheaffeehheaceigbdebfdjccbgbhf(I):
  O = canvas(mostcommon(I), shape(I)) 
  for j in range(width(I)): 
    column = [(i,j) for i in range(height(I))]
    filtered_column = list(filter(lambda x: index(I,x) != mostcommon(I), column))
    for k, (i,_) in enumerate(filtered_column):
      O = paint(O, {(index(I, (i,j)), (height(I)-len(filtered_column)+k, j))})
  return O
 
14.0, 16.572397, def efbieffbecaiegddjaedcbdfedjcbded(I):
  objs = objects(I, True, False, True) 
  bg = mostcolor(I)
  moved_objs = set()
  for obj in objs:
    down_shifted = obj
    collision = False
    while not collision:
      new_pos = shift(down_shifted, DOWN)
      for other_obj in objs - {obj}:
        if not intersection(toindices(new_pos), toindices(other_obj)) == frozenset({}):
          collision = True
          break
      if lowermost(new_pos) >= height(I):
        collision = True
      if not collision:
        down_shifted = new_pos
    moved_objs.add(down_shifted)
  O = paint(canvas(bg, shape(I)), merge(moved_objs))
  return O
 
13.333333333333334, 26.467434, def ddfaebafifbjehejjafigfefededdcec(I):
    objs = objects(I, True, False, True)
    bg = mostcolor(I)
    moved_objs = set()
    for obj in objs:
        bottom_edge = max([i for i, j in toindices(obj)])
        empty_space = height(I) - bottom_edge - 1
        moved_objs.add(shift(obj, (empty_space, 0)))
    O = paint(canvas(bg, shape(I)), merge(moved_objs))
    return O
 
74.33333333333333, 58.603325, def cfecbbadeefiebjdaehcafcbfhfaejhc(I):
  objs = objects(I, F, F, T)
  bg = mostcolor(I)
  for obj in objs:
    for x, (i, j) in obj:
      for k in range(1, len(I)):
        if i + k < len(I) and index(I, (i + k, j)) == bg:
          I = fill(I, x, {(i + k, j)})
        else:
          break
      for k in range(1, len(I)):
        if i - k >= 0 and index(I, (i - k, j)) == bg:
          I = fill(I, x, {(i - k, j)})
        else:
          break
  O = I
  return O
 
75.0, 56.71732, def diedaecieeceefedaddbgiafegegibfd(I):
  objs = objects(I, F, F, T)
  for obj in objs:
    for j in range(leftmost(obj), rightmost(obj) + 1):
      I = paint(I, recolor(color(obj), vfrontier((uppermost(obj), j))))
      I = paint(I, recolor(color(obj), vfrontier((lowermost(obj), j))))
  O = I
  return O
 
12.666666666666666, 17.21155, def defaahjjeefdeeibbcdcegfhbhcggidd(I):
  objs = objects(I, F, F, T)
  for obj in objs:
    for j in range(width(obj)):
      I = paint(I, recolor(color(obj), connect((uppermost(obj), leftmost(obj) + j), (lowermost(obj), leftmost(obj) + j))))
  O = I
  return O
 
9.666666666666666, 28.01903, def beffbfjbfiahedcgidfcgeajcdbbadca(I):
    objs = sfilter(objects(I, True, False, True), lambda obj: size(obj) > 0)  # Get non-background objects
    w = width(I)
    O = canvas(0, shape(I)) # Initialize output grid with background color
    y_offset = height(I)  # Start placing from the bottom
    for x in range(w):
        column_objs = sfilter(objs, lambda obj: leftmost(obj) == x) # Get objects in the current column
        for obj in column_objs:
            O = paint(O, shift(obj, (y_offset - height(obj), 0)))
            y_offset -= height(obj)
    return O 
 
8.666666666666666, 28.928743, def aaifhcbcffeiedfebgfadafgaaedfbeg(I):
    O = canvas(0, shape(I))
    for j in range(width(I)):
        column = crop(I, (0, j), (height(I), 1))
        non_zero_objs = sfilter(objects(column, True, False, True), lambda obj: color(obj) != 0)
        offset = height(I) - sum(height(obj) for obj in non_zero_objs)
        for obj in non_zero_objs:
            O = paint(O, shift(obj, (offset, j)))
            offset += height(obj)
    return O
 
16.0, 14.684064, def gahfaafbcgdgeiddaffeiheadddaaabj(I):
  O = canvas(0, (height(I), width(I)))
  for x in range(width(I)):
    column = objects(crop(I, (0, x), (height(I), 1)), True, False, True)
    non_zero_objs = sorted(column, key=lambda obj: uppermost(obj))
    y = height(I) 
    for obj in non_zero_objs:
      y -= height(obj)
      O = paint(O, shift(obj, (-uppermost(obj) + y, x - leftmost(obj))))
  return O
 
13.333333333333334, 26.472218, def dhagebdfdchbedhjaacabfjedgefcicb(I):
    O = canvas(0, shape(I))
    objects_list = sorted(objects(I, True, False, True), key=lambda obj: centerofmass(obj)[1])
    for obj in objects_list:
        if color(obj) != 0:
            target_y = height(I) - height(obj)
            target_x = centerofmass(obj)[1] - leftmost(obj)
            O = paint(O, shift(obj, (target_y - uppermost(obj), target_x)))
    return O
 
14.666666666666666, 13.293319, def fajaebdcgchgehibafbedaadbbhcfcfd(I):
    objs = sfilter(objects(I, True, False, True), lambda obj: color(obj) != 0)
    O = canvas(0, shape(I))
    y = height(I)
    for obj in sorted(objs, key=lambda obj: -uppermost(obj)):
        O = paint(O, shift(obj, (y - height(obj) - uppermost(obj), 0)))
        y -= height(obj)
    return O
 
13.0, 23.610977, def ddajejebjaaaeicebfdhbhgcdjefdade(I):
  objs = objects(I, T, T, T)
  O = I
  for obj in objs:
    O = cover(O, obj)
    new_obj = shift(obj, (height(I) // 2 - centerofmass(obj)[0], 0))
    O = paint(O, new_obj)
  return O
 
13.0, 17.835648, def hagfjacjbcgfedecafjebejfhabieigh(I):
  objs = objects(I, T, T, T)
  offset = height(I) // 2 - centerofmass(merge(objs))[0]
  return paint(cover(I, merge(objs)), shift(merge(objs), (offset, 0)))
 
14.666666666666666, 22.30189, def fccgfcecjfacefjajdcbefdiigejefdi(I):
  objs = objects(I, T, F, F)
  target_values = {3, 7} 
  target_objs = sfilter(objs, lambda obj: color(obj) in target_values)
  center_i, center_j = center(asindices(I))
  moved_objs = set()
  for obj in target_objs:
    # Prioritize vertical movement
    obj_center_i, obj_center_j = center(obj)
    direction = (sign(center_i - obj_center_i), 0)  
    while any((index(I, add(loc, direction)) == 0) for loc in toindices(obj)):
      obj = shift(obj, direction)

    # Horizontal movement if vertically aligned
    if obj_center_j != center_j:
      direction = (0, sign(center_j - obj_center_j))
      while any((index(I, add(loc, direction)) == 0) for loc in toindices(obj)):
        obj = shift(obj, direction)
    moved_objs.add(obj)

  O = paint(canvas(0, shape(I)), merge(moved_objs))
  return O
 
6.333333333333333, 27.03826, def bbfgceahcddieaabiciecccccdeecbjh(I):
  objs = objects(I, T, F, F)
  center_obj = toobject(frozenset({center(asindices(I))}), I)
  moved_objs = set()
  for obj in objs:
    if color(obj) in {3, 7}:
      direction = gravitate(obj, center_obj)
      obj = shift(obj, direction)
    moved_objs.add(obj)
  O = paint(canvas(0, shape(I)), merge(moved_objs))
  return O
 
11.0, 20.541304, def gecbabghfbefeacgiceeghachbecidee(I):
    objs = objects(I, T, F, F)
    ci, cj = center(asindices(I))
    moved_objs = set()
    for obj in objs:
        if color(obj) not in {3, 7}:
            moved_objs.add(obj)
            continue
        
        oi, oj = center(obj)
        new_i, new_j = oi, oj

        # Move vertically as close as possible
        while 0 <= new_i + sign(ci - oi) < len(I) and index(I, (new_i + sign(ci - oi), new_j)) == 0:
            new_i += sign(ci - oi)

        # Move horizontally if not already aligned
        if new_j != cj:
            while 0 <= new_j + sign(cj - oj) < len(I[0]) and index(I, (new_i, new_j + sign(cj - oj))) == 0:
                new_j += sign(cj - oj)
        
        moved_objs.add(shift(obj, (new_i - oi, new_j - oj)))

    O = paint(canvas(0, shape(I)), merge(moved_objs))
    return O
 
16.0, 14.920588, def egfejfgacdhfebfjbaaadfgaehcddace(I):
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  for j in range(width(I)):
    non_bg = [I[i][j] for i in range(height(I)) if I[i][j] != bg]
    for k, v in enumerate(non_bg):
      O = fill(O, v, {(height(I) - len(non_bg) + k, j)})
  return O
 
13.0, 23.497252, def ccbcgciidcbfedffihaedfcaefadbgfc(I):
  objs = objects(I, True, False, True)
  moved_objs = set()
  for obj in objs:
    col = leftmost(obj) 
    target_row = len(I) // 2 - height(obj) // 2 
    current_row = uppermost(obj)
    offset = (target_row - current_row, 0)
    moved_objs.add(shift(obj, offset))
  return paint(cover(I, merge(objs)), merge(moved_objs)) 
 
17.333333333333332, 13.203999, def hijcicehedfaeffaieiddbafcdbfibjc(I):
  return paint(I, merge({shift(obj, ((len(I) // 2 - height(obj) // 2) - uppermost(obj), 0)) 
                          for obj in objects(I, True, False, True)}))
 
12.333333333333334, 21.688265, def cfageaddaejbefffacdejcbhjbafdbeh(I):
  objs = objects(I, True, False, True)
  new_grid = canvas(mostcolor(I), shape(I)) 
  for obj in objs:
    j = leftmost(obj) 
    new_grid = paint(new_grid, shift(obj, (len(I) // 2 - height(obj) // 2, j - leftmost(obj)))) 
  return new_grid
 
119.0, 36.47755, def dbcaigdejgijecfcbbbgeahfdafeeide(I):
  bg = mostcolor(I)
  objs = fgpartition(I)
  new_grid = canvas(bg, shape(I))
  for obj in objs:
    upper = uppermost(obj)
    lower = lowermost(obj)
    left = leftmost(obj)
    right = rightmost(obj)
    for i in range(upper, 0, -1):
      if index(I, (i-1, left)) == bg:
        new_grid = fill(new_grid, color(obj), {(i-1, j) for j in range(left, right + 1)})
      else:
        break
    for i in range(lower, len(I)):
      if index(I, (i, left)) == bg:
        new_grid = fill(new_grid, color(obj), {(i, j) for j in range(left, right + 1)})
      else:
        break
    new_grid = paint(new_grid, obj)
  return new_grid
 
111.66666666666667, 49.480984, def becfeaeejfcfeedhiicdcicdadbefihd(I):
  bg = mostcolor(I)
  objs = fgpartition(I)
  new_grid = I
  for obj in objs:
    for j in range(leftmost(obj), rightmost(obj) + 1):
      for i in range(uppermost(obj)-1, -1, -1):
        if index(I, (i, j)) != bg:
          break
        new_grid = fill(new_grid, color(obj), {(i, j)})
      for i in range(lowermost(obj)+1, len(I)):
        if index(I, (i, j)) != bg:
          break
        new_grid = fill(new_grid, color(obj), {(i, j)})
  return new_grid
 
61.333333333333336, 43.585136, def ahejfedfagjiedgbbcdeeecbeahcaifc(I):
  bg = mostcolor(I)
  new_grid = canvas(bg, shape(I))
  for j in range(len(I[0])):
    for i in range(len(I)):
      if I[i][j] != bg:
        obj_color = I[i][j]
        new_grid = fill(new_grid, obj_color, {(k, j) for k in range(i)})
        break
    for i in range(len(I)-1, -1, -1):
      if I[i][j] != bg:
        obj_color = I[i][j]
        new_grid = fill(new_grid, obj_color, {(k, j) for k in range(i+1, len(I))})
        break
  return new_grid
 
74.0, 58.66818, def bbcbcadgchedeeiiadegaccefghecccd(I):
  bg = mostcolor(I)
  new_grid = I
  for i in range(len(I[0])):
    current_color = bg
    for j in range(len(I)):
      if I[j][i] != bg:
        current_color = I[j][i]
      if current_color != bg:
        new_grid = fill(new_grid, current_color, {(j, i)})
    current_color = bg
    for j in range(len(I)-1, -1, -1):
      if I[j][i] != bg:
        current_color = I[j][i]
      if current_color != bg:
        new_grid = fill(new_grid, current_color, {(j, i)})
  return new_grid
 
13.0, 22.820389, def dajhgabiabfaeacejefejffhgieffcjb(I):
    O = I
    for obj in objects(I, T, T, T):
        O = cover(O, obj)
        O = paint(O, shift(obj, (0,  width(I) // 2 - centerofmass(obj)[1])))
    return O
 
8.333333333333334, 31.809772, def afffcaicfedcehccibeaibiegedfbbfb(I):
    O = I
    for x in range(width(I)):
        column = {(v, (i, j)) for v, (i, j) in asobject(I) if j == x}
        if len(column) > 1:
            O = cover(O, column)
            O = paint(O, shift(column, (0, width(I) // 2 - x)))
    return O
 
16.666666666666668, 14.512453, def caichbgehcdfeeeaijfibeegabhhbdie(I):
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  for j, col in enumerate(dmirror(I)):
    values = [v for v in col if v != bg]
    for i, v in enumerate(values):
      O = fill(O, v, {(len(I)-len(values)+i, j)})
  return dmirror(O)
 
9.0, 32.937527, def fgaffaacbfafeefdjcbfajiajefcagbf(I):
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  for obj in objects(I, False, False, True):
    w = width(obj)
    O = paint(O, shift(obj, (0, shape(I)[1] - w)))
  return O
 
21.666666666666668, 15.207966, def bfifcficgbfhebcdbdbajcaafafgcbeb(I):
    objs = fgpartition(I)
    new_grid = canvas(mostcolor(I), shape(I))
    for obj in objs:
        for i, row in enumerate(I):
            for j, value in enumerate(row):
                if value == color(obj) and (
                    any(index(I, (k, j)) == color(obj) for k in range(i)) or  # Check above
                    any(index(I, (k, j)) == color(obj) for k in range(i + 1, len(I)))  # Check below
                ):
                    new_grid = fill(new_grid, value, {(l, j) for l in range(len(I))})
    return new_grid
 
75.33333333333333, 56.957294, def icajeahibcfjeajgidgefcgebfbbabdb(I):
  objs = fgpartition(I)
  grid = canvas(mostcolor(I), shape(I))
  for obj in objs:
    indices = toindices(obj)
    min_row = min(i for i, j in indices)
    max_row = max(i for i, j in indices)
    for i in range(min_row, max_row + 1):
      if any((i, j) in indices for j in range(len(I[0]))):
        grid = fill(grid, color(obj), {(k, j) for k in range(len(I)) for j in range(len(I[0])) if (i, j) in indices})
  return grid
 
16.0, 15.620647, def bdgbfbbhcagfehbjbegejafcbacefaid(I):
  objs = sorted(fgpartition(I), key=lambda obj: uppermost(obj))  # Sort by upper row index
  grid = canvas(mostcolor(I), shape(I))  # Create empty canvas
  for obj in objs:
    upper_row = uppermost(obj)
    for i in range(upper_row, -1, -1):  # Iterate upwards from object's top row
      collision = any(index(grid, (i, j)) != mostcolor(I) 
                      for k, j in toindices(obj) if 0 <= i < height(I) and 0 <= j < width(I))
      if collision:
        grid = paint(grid, shift(obj, (i + 1 - upper_row, 0)))  # Paint if collision
        break
    else:
      grid = paint(grid, shift(obj, (-upper_row, 0)))  # Paint at the top if no collision
  return grid
 
12.333333333333334, 15.358785, def dhfbiajjcdbjeeiejfgbjfcgecieiace(I):
  grid = I  # Start with the input grid
  for i in range(height(I) - 1, 0, -1):  # Iterate through rows from bottom to top
    for j in range(width(I)):
      if index(grid, (i, j)) != mostcolor(I) and index(grid, (i - 1, j)) == mostcolor(I):  # Check for movable object
        temp = index(grid, (i, j))  # Store object color
        grid = fill(grid, mostcolor(I), {(i, j)})  # Remove object from current position
        k = i - 1
        while k > 0 and index(grid, (k - 1, j)) == mostcolor(I):  # Find resting position
          k -= 1
        grid = fill(grid, temp, {(k, j)})  # Place object at resting position
  return grid
 
16.0, 14.509224, def edaccejfdbffegbbidafhjacfefgbdbf(I):
  grid = list(list(row) for row in I) # Convert to mutable list
  for j in range(width(I)):  # For each column
    for i in range(1, height(I)):  # Iterate from the second row upwards
      if grid[i][j] != mostcolor(I):  # If current cell is not background
        k = i
        while k > 0 and grid[k-1][j] == mostcolor(I): # Find the highest empty row
          k -= 1
        grid[k][j], grid[i][j] = grid[i][j], grid[k][j]  # Swap current object with empty cell
  return tuple(tuple(row) for row in grid) # Convert back to tuple
 
14.0, 22.88477, def bagdaffedgfhejbbbfcbdjacbjdebfba(I):
  objs = fgpartition(I)  # Identify non-background objects
  grid = canvas(mostcolor(I), shape(I))  # Create empty canvas
  for obj in objs:
    bottom_edge = maximum({i for _, (i, _) in obj})  # Find object's bottom edge
    drop_height = height(I) - bottom_edge - 1  # Calculate drop distance
    grid = paint(grid, shift(obj, (drop_height, 0)))  # Drop the object
  return grid
 
8.333333333333334, 35.725292, def cbecejccedhceebcifcajeffajhcfedb(I):
    objs = fgpartition(I)
    grid = canvas(mostcolor(I), shape(I))
    for obj in objs:
        shifted_obj = shift(obj, (-42, 0))  # Shift far up initially
        while any(0 <= i + 1 < height(I) and index(grid, (i + 1, j)) == mostcolor(I) for _, (i, j) in shifted_obj):
            shifted_obj = shift(shifted_obj, DOWN)
        grid = paint(grid, shifted_obj)
    return grid
 
12.333333333333334, 23.542633, def abadgfcgdgfdeebbbcdbcheecheeafcg(I):
    objs = order(fgpartition(I), lambda obj: -uppermost(obj))  # Objects sorted by top row
    grid = canvas(mostcolor(I), shape(I))
    for obj in objs:
        for i in range(height(I) - 1, -1, -1):
            if not any(index(grid, (i, j)) != mostcolor(I) for _, (_, j) in obj if 0 <= i < height(I) and 0 <= j < width(I)):
                grid = paint(grid, shift(obj, (i - uppermost(obj), 0)))
                break
    return grid 
 
660.0, 112.817184, def cjjbcfiacecaecfiidhbebjeedcecbea(I):
  objs = fgpartition(I)
  grid = canvas(mostcolor(I), shape(I))
  for j in range(width(I)):  # Iterate through columns
    column_objs = sfilter(objs, lambda obj: any(x == j for _, (_, x) in obj))
    column_grid = canvas(mostcolor(I), (height(I), 1))
    for obj in column_objs:
      shifted_obj = shift(obj, (-42, 0))
      while any(0 <= i + 1 < height(I) and index(column_grid, (i + 1, 0)) == mostcolor(I) for _, (i, _) in shifted_obj):
        shifted_obj = shift(shifted_obj, DOWN)
      column_grid = paint(column_grid, shifted_obj)
    grid = hconcat(grid, column_grid) if j == 0 else hconcat((grid[:][:-1] + (column_grid[0],)), grid[:][-1:])
  return grid
 
14.666666666666666, 22.737497, def aadfjecejdafegdjibeedgcbcdedbebe(I):
  objs = fgpartition(I)
  grid = canvas(mostcolor(I), shape(I))
  for i in range(height(I) - 1, -1, -1):  # Iterate from the bottom row
    for j in range(width(I)):
      if index(grid, (i, j)) == mostcolor(I):  # Find empty cells
        for obj in objs:
          if any((x, y) == (i, j) for _, (x, y) in shift(obj, (-uppermost(obj), 0))):
            grid = paint(grid, shift(obj, (i - uppermost(obj), 0)))
            objs = remove(obj, objs)  # Remove placed object
            break
  return grid
 
151.0, 23.594246, def bgedbddbacgbejebjfhdbjhcabfcebec(I):
  O = I  # Start with the input grid
  for obj in fgpartition(I):  # Iterate over each object
    for i in range(uppermost(obj), lowermost(obj) + 1):
      for j in range(leftmost(obj), rightmost(obj) + 1):
        if (i, j) not in toindices(obj):  # If a cell within the bounding box is not part of the object
          O = fill(O, color(obj), {(i, j)})  # Fill that cell with the object's color
  return O
 
134.33333333333334, 27.117622, def bicdfefacfcgeiceidhdgdffffhjbicf(I):
  O = I
  for obj in fgpartition(I):
    O = underfill(O, color(obj), backdrop(obj))  # Underfill each object's backdrop
  return O
 
14.333333333333334, 17.532295, def gaeebgahfeeceeecacjiaebbfafgfceb(I):
  return tuple(
    tuple(
      index(I, (height(I) // 2 - abs(i - height(I) // 2), j)) # Get the color from the mirrored position
      for j in range(width(I))
    )
    for i in range(height(I))
  )
 
14.333333333333334, 18.021193, def fbiedcigddaieeffidejfecceccgcfed(I):
  mid = height(I) // 2  # Calculate the middle row
  return tuple(
    tuple(
      I[mid + (mid - i) if i < mid else i][j] # Get the color from the mirrored position relative to the middle row
      for j in range(width(I))
    )
    for i in range(height(I))
  )
 
101.0, 45.77183, def gcfaddeeeabfebgjabgdhiciedhbjefe(I):
  objs = fgpartition(I)
  grid = canvas(mostcolor(I), shape(I))
  for obj in objs:
    for j in range(leftmost(obj), rightmost(obj) + 1): # Iterate through columns of each object
      for i in range(lowermost(obj), -1, -1): # Iterate upwards from the bottom of the object
        if (i, j) in toindices(obj):
          start_row = i # Find the starting row of the object in this column
          break
      for i in range(start_row, height(I)): # Fill downwards from the starting row
        if index(grid, (i,j)) == mostcolor(I):
          grid = paint(grid, {(color(obj), (i,j))})
        else:
          break
  return grid
 
43.333333333333336, 39.83995, def ehefbdigbcagecfgjiaabaaafhfbdebc(I):
  objs = fgpartition(I)
  grid = canvas(mostcolor(I), shape(I))
  filled_indices = frozenset()
  for obj in objs:
    for j in range(leftmost(obj), rightmost(obj) + 1):
      column_indices = frozenset((i, j) for i in range(height(I)))
      intersection = toindices(obj) & column_indices
      if intersection:
        bottom_row = lowermost(intersection)
        fill_indices = frozenset((i, j) for i in range(bottom_row, height(I))) - filled_indices
        grid = paint(grid, recolor(color(obj), fill_indices))
        filled_indices = filled_indices | fill_indices
  return grid
 
45.333333333333336, 41.51203, def jebfaadbfccgeidabadgecgbcacgegee(I):
  objs = fgpartition(I)
  grid = canvas(mostcolor(I), shape(I))
  for i in range(height(I)-1, -1, -1): # Iterate through rows from bottom to top
    for j in range(width(I)):
      current_color = index(I, (i, j))
      if current_color != mostcolor(I): # If current cell is not background
        for k in range(i + 1, height(I)): # Fill downwards
          if index(grid, (k, j)) == mostcolor(I): # If the cell below is empty
            grid = paint(grid, {(current_color, (k, j))})
          else:
            break
  return grid
 
11.333333333333334, 19.592842, def hbcedehhbaedeccbbjcjedhaeaagbdce(I):
  threes = colorfilter(objects(I, T, F, T), 3)
  sevens = colorfilter(objects(I, T, F, T), 7)
  O = I
  for obj in threes:
    O = move(O, obj, (-uppermost(obj), 0))
  for obj in sevens:
    O = move(O, obj, (height(I) - 1 - lowermost(obj), 0))
  return O
 
162.66666666666666, 38.252678, def hecbdeafcdbdeeeeaecjigaecjgcdede(I):
  objs = fgpartition(I) # Partition the grid into objects
  grid = canvas(mostcolor(I), shape(I)) # Create a blank canvas
  for obj in objs:
    for j in range(leftmost(obj), rightmost(obj) + 1):
      for i in range(uppermost(obj), len(I)):  # Iterate downwards from each cell
        if (i, j) in toindices(obj): continue # Skip cells already part of the object
        if index(I, (i,j)) != mostcolor(I): break # Stop if another object is encountered
        grid = paint(grid, {(color(obj), (i, j))}) # Paint the current cell
  return grid
 
12.666666666666666, 17.21155, def gdbdfefdaeafebcgabdfabidabefhebf(I):
  objs = objects(I, True, False, True)
  O = canvas(0, shape(I))
  for obj in objs:
    O = paint(O, branch(portrait(obj), hmirror, identity)(obj))
  return O
 
10.666666666666666, 19.96237, def fibdgbdaeeccebbcbhddchefdhhbdbcc(I):
  O = I
  for v in {3, 7}:
    obj = extract(objects(I, T, F, F), matcher(color, v)) 
    O = move(O, obj, gravitate(obj, toobject(frozenset({center(asindices(I))}), I)))
  return O
 
11.0, 16.371124, def feeccefgejdhedaabccaagabcgcbbgie(I):
  objs = objects(I, T, T, T)
  for value in palette(I) - {mostcolor(I)}:
    target_obj = extract(objs, matcher(color, value))
    target_indices = toindices(target_obj)
    target_center = center(target_indices)
    O = I
    for obj in objs:
      if color(obj) == value and obj != target_obj:
        obj_indices = toindices(obj)
        offset = gravitate(obj_indices, target_indices)
        O = move(O, obj, offset)
  return O
 
16.333333333333332, 14.460445, def bfdhhjaachfdehebiechcdfcbiecfbad(I):
  objs = objects(I, T, T, T)
  O = canvas(mostcolor(I), shape(I))
  for value in palette(I) - {mostcolor(I)}:
    same_color_objs = sorted(
        [toindices(obj) for obj in objs if color(obj) == value], key=lambda x: center(x)[1]
    )
    target_j = width(I) // 2 - len(same_color_objs) // 2
    for i, obj_indices in enumerate(same_color_objs):
      offset = (0, target_j + i - leftmost(obj_indices))
      O = paint(O, shift(toobject(obj_indices, I), offset))
  return O
 
221.0, 101.32461, def djceebddeffaejigbdbfcaacchehfeca(I):
  objs = objects(I, T, T, T)
  O = canvas(mostcolor(I), (height(I), 0))
  for value in palette(I) - {mostcolor(I)}:
    column = canvas(mostcolor(I), (height(I), 1))
    for obj in objs:
      if color(obj) == value:
        obj_grid = subgrid(obj, I)
        column = hconcat(column, obj_grid)
    O = hconcat(O, column)
  return O
 
15.0, 17.771631, def ihidhddjacbhebfcifafibdhefdcbfib(I):
  objs = objects(I, T, T, T)
  O = canvas(mostcolor(I), shape(I))
  for value in palette(I) - {mostcolor(I)}:
    obj_indices = merge([toindices(obj) for obj in objs if color(obj) == value])
    target_j = width(I) // 2 - width(obj_indices) // 2
    O = paint(O, shift(toobject(obj_indices, I), (0, target_j - leftmost(obj_indices))))
  return O 
 
9.666666666666666, 29.135895, def cdcdibbibbdaecgaacidjdcjfaagebif(I):
    objs = fgpartition(I) # Identify objects excluding background
    grid = canvas(mostcolor(I), shape(I)) # Initialize empty grid
    for obj in objs:
        for i in range(height(I)): 
            shifted_obj = shift(obj, (i, 0)) # Shift object downwards
            if any(index(grid, (a + 1, b)) != mostcolor(I) for _, (a, b) in shifted_obj if a + 1 < height(I)):
                shifted_obj = shift(shifted_obj, (-1, 0)) # Move one step up if collision detected
                break
        grid = paint(grid, shifted_obj) # Paint the object at its resting position
    return grid
 
12.666666666666666, 24.573101, def dbdagbbacgeceajcjgaaddcfebbddbch(I):
  objs = fgpartition(I)
  grid = I
  for obj in objs:
    landing_row = next((i for i in range(lowermost(obj) + 1, height(I)) 
                        if any(index(grid, (i, j)) != mostcolor(I) for _, (j, _) in obj)),
                       height(I))  # Find the landing row for the object
    grid = paint(cover(grid, obj), shift(obj, (landing_row - lowermost(obj), 0))) # Move the object directly to its landing position
  return grid
 
11.0, 18.661936, def ccdffjdehjjiecghbcifeghibgfcfeei(I):
    O = I
    for v in [3, 7]:
        obj = toobject(ofcolor(I, v), I)
        O = move(O, obj, (0, 7 - centerofmass(obj)[1] + 4*(v==7)))
    return O
 
7.666666666666667, 23.447586, def hfbeagcaacdfeehjibcbciacehegbbjc(I):
  target_column_3 = 7
  target_column_7 = 11
  O = canvas(0, shape(I))
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if val == 3:
        O = paint(O, {(val, (i, target_column_3))})
      elif val == 7:
        O = paint(O, {(val, (i, target_column_7))})
      else:
        O = paint(O, {(val, (i, j))})
  return O
 
11.333333333333334, 22.719545, def aaaacbiddeaeeaeajjjchidbfbbegdac(I):
  h, w = shape(I)
  O = canvas(0, (h, w))
  for j in range(w):
    col = tuple(I[i][j] for i in range(h))
    if 3 in col:
      O = paint(O, {(3, (col.index(3), 7))})
    if 7 in col:
      O = paint(O, {(7, (col.index(7), 11))})
  return O
 
15.666666666666666, 15.390066, def fjbcbebeggdheaaajafgfeeebdacbedf(I):
  objs = objects(I, T, F, T)
  target = argmax(objs, size)
  moved_objs = frozenset({
      shift(obj, (
          sign(centerofmass(target)[0] - centerofmass(obj)[0]), 
          sign(centerofmass(target)[1] - centerofmass(obj)[1])
      )) 
      for obj in objs if obj != target
  })
  return paint(canvas(ZERO, shape(I)), merge(moved_objs | {target})) 
 
13.0, 23.067755, def decbcecbbdcfejdbbfijefhchfdafcfe(I):
  objs = objects(I, T, F, T)
  largest_obj = argmax(objs, size)
  return paint(canvas(ZERO, shape(I)), merge({
      branch(adjacent(obj, largest_obj), obj, shift(obj, position(largest_obj, obj)))
      for obj in objs
  }))
 
11.666666666666666, 19.199564, def ccjfeagcjcfbedcajbcaedhcfbddceae(I):
  objs = objects(I, T, F, F)
  center_loc = center(asindices(I))
  moved_objs = set()
  for obj in objs:
    if color(obj) in {3, 7}:
      obj_center = center(obj)
      direction = (sign(center_loc[0] - obj_center[0]), sign(center_loc[1] - obj_center[1]))
      shifted_obj = shift(obj, direction)
      moved_objs.add(shifted_obj)
    else:
      moved_objs.add(obj)
  O = paint(canvas(0, shape(I)), merge(moved_objs))
  return O
 
10.666666666666666, 18.528688, def dcdcdjfbbfgbebbfbbfibgfcadiefccb(I):
  objs = fgpartition(I)
  compressed_objs = frozenset(
      recolor(
          color(obj), 
          frozenset({(uppermost(obj) + height(obj) // 2, j) for i, j in toindices(obj)})
      ) 
      for obj in objs
  )
  O = paint(cover(I, merge(objs)), merge(compressed_objs))
  return O
 
10.333333333333334, 18.53605, def edfbfccdiaccefacifedeecbjdaebfff(I):
    O = I
    for obj in fgpartition(I):
        center_row = uppermost(obj) + height(obj) // 2
        O = cover(O, obj)
        O = paint(O, recolor(color(obj), {(center_row, j) for i, j in toindices(obj)}))
    return O
 
12.333333333333334, 21.939278, def abfcefdfdcbeeaiebdbiefhdbceiiiea(I):
    O = canvas(mostcolor(I), shape(I))
    for j in range(width(I)):
        obj_cells = frozenset((I[i][j], (i, j)) for i in range(height(I)) if I[i][j] != mostcolor(I))
        if obj_cells:
            center_i = uppermost(obj_cells) + height(obj_cells) // 2
            O = paint(O, frozenset(((v, (center_i, j)) for v, _ in obj_cells)))
    return O
 
11.0, 19.830053, def aefbajaiiibhecjebbfeafdbacgcjdeb(I):
    compressed_objs = frozenset()
    for obj in fgpartition(I):
        min_row = uppermost(obj)
        max_row = lowermost(obj)
        center_row = (min_row + max_row) // 2
        compressed_objs = compressed_objs | recolor(color(obj), {(center_row, j) for i, j in toindices(obj)})
    O = paint(canvas(mostcolor(I), shape(I)), compressed_objs) 
    return O
 
42.333333333333336, 35.58137, def bfaeccfbgfbdegdaaehadccdfaeabfef(I):
  objs = fgpartition(I)
  grid = canvas(mostcolor(I), shape(I))
  for obj in objs:
    for j in range(leftmost(obj), rightmost(obj) + 1): # Iterate through columns of the object
      column_cells = {(v, (i, k)) for v, (i, k) in obj if k == j} # Get cells of the object in the current column
      if len(column_cells) > 0:
        bottom_edge = lowermost(column_cells)  # Find the bottom edge of the object in the current column
        for i in range(bottom_edge + 1, height(I)): # Iterate downwards from the bottom edge
          if index(grid, (i, j)) == mostcolor(I): # Check if the cell is empty
            grid = paint(grid, {(next(iter(column_cells))[0], (i, j))}) # Paint the cell with the object's color
          else:
            break
  return grid
 
14.666666666666666, 19.230066, def fbbhecedjabfebbbjibfhajbfadieeee(I):
    objs = fgpartition(I)
    grid = canvas(mostcolor(I), shape(I))
    for obj in objs:
        for x in range(width(I)): # Iterate through columns
            column = {(v, (i, j)) for v, (i, j) in obj if j == x} # Extract the object's cells in the column
            if column:
                offset = 0 # Initialize the vertical offset
                for i in range(lowermost(column) + 1, height(grid)): # Iterate downwards
                    if index(grid, (i, x)) != mostcolor(grid): # Collision detected
                        break
                    offset += 1
                grid = paint(grid, shift(column, (offset, 0))) # Shift and paint the column
    return grid
 
12.333333333333334, 21.775164, def ccbacgafcdfheadciaigifjeceacdccd(I):
    grid = canvas(mostcolor(I), shape(I))
    for j in range(width(I)): # Iterate through columns
        column = [(i, j) for i in range(height(I)) if I[i][j] != mostcolor(I)] # Extract column indices with objects
        offset = 0
        for i in range(height(I)):
            if (i, j) in column:
                grid = paint(grid, {(I[i][j], (i + offset, j))}) # Paint object at shifted position
            elif len(column) > 0: # Track the offset if object cells were present in this column
                offset += 1
    return grid
 
11.0, 18.197098, def jhjbjacdcdeaeecdifbfhaffffadbeib(I):
  objs = fgpartition(I)
  grid = canvas(mostcolor(I), shape(I))
  for obj in objs:
    bottom = lowermost(obj) # Find the lowest row containing the object
    for j in range(width(I)):
      if any((i, j) in toindices(obj) for i in range(height(I))): # Check if the column contains the object
        for i in range(bottom, -1, -1): # Iterate upwards from the bottom edge
          if (i, j) in toindices(obj):
            grid = paint(grid, {(I[i][j], (bottom, j))}) # Paint the cell at the bottom edge
            bottom -= 1 # Move the bottom edge one row up for the next object cell in this column
  return grid
 
12.666666666666666, 18.687483, def ebhfgaefcbcjecaajigbigfeccbhbdif(I):
    out = canvas(mostcolor(I), shape(I))
    for j in range(width(I)):
        column = [I[i][j] for i in range(height(I))]
        for k, v in enumerate(column[::-1]): # Iterate through the column in reverse
            if v != mostcolor(I): # If it's not the background
                out = paint(out, {(v, (height(I) - k, j))}) # Paint it at the current position
    return out
 
12.666666666666666, 20.607908, def deceabhadcfceefcaiaifabfbbgfeafb(I):
  objs = objects(I, True, False, False)
  threes = colorfilter(objs, 3)
  sevens = colorfilter(objs, 7)
  shifted_threes = mapply(lambda o: shift(o, (0, 7 - centerofmass(o)[1])), threes)
  shifted_sevens = mapply(lambda o: shift(o, (0, 11 - centerofmass(o)[1])), sevens)
  O = paint(paint(canvas(0, shape(I)), shifted_threes), shifted_sevens)
  return O
 
10.0, 20.493002, def cffdegidcbhbehfdacjaecdhfcffcaha(I):
  O = canvas(0, shape(I))
  for obj in objects(I, True, False, False):
    target_column = 7 if color(obj) == 3 else 11 if color(obj) == 7 else centerofmass(obj)[1]
    O = paint(O, shift(obj, (0, target_column - centerofmass(obj)[1])))
  return O
 
10.666666666666666, 18.798956, def fcfafcddgfdfeccaabbcjaagdhecfjfc(I):
  c3 = 7
  c7 = 11
  objs = objects(I, True, False, False)
  moved = frozenset(shift(o, (0, branch(color(o) == 3, c3, c7) - centerofmass(o)[1])) if color(o) in (3, 7) else o for o in objs)
  O = paint(canvas(0, shape(I)), merge(moved))
  return O
 
10.333333333333334, 25.341467, def ajfhfjdbjfafeadfbehiigacddhgfdib(I):
  objs = objects(I, T, F, T)
  return paint(canvas(ZERO, shape(I)), 
               merge(
                 apply(lambda obj: shift(obj, gravitate(obj, argmax(objs, size))), objs)
               )
              )
 
12.333333333333334, 23.960625, def jgbhadgafaafefcaaagfeejefceefddi(I):
  """
  Iterates through objects, dropping them down until they collide.
  """
  objs = fgpartition(I)
  grid = canvas(mostcolor(I), shape(I))
  for obj in objs:
    while any(0 <= i + 1 < height(I) and index(grid, (i + 1, j)) == mostcolor(I) for _, (i, j) in obj):
      obj = shift(obj, DOWN)
    grid = paint(grid, obj)
  return grid
 
92.33333333333333, 59.09455, def acggcgceideeeffjiajaeefbcfcbfgff(I):
  """
  Processes the grid column by column, dropping objects.
  """
  grid = canvas(mostcolor(I), shape(I))
  for j in range(width(I)):
    column_cells = [(v, (i, j)) for v, (i, j) in asobject(I) if v != mostcolor(I) and j == j]
    for v, (i, _) in column_cells:
      new_i = i
      while new_i + 1 < height(I) and index(grid, (new_i + 1, j)) == mostcolor(I):
        new_i += 1
      grid = paint(grid, {(v, (new_i, j))})
  return grid
 
11.666666666666666, 25.458273, def fbcgafjeadeaeeaejceehebadcjbhfdb(I):
  """
  Utilizes gravity simulation with gravitate function for object movement.
  """
  objs = fgpartition(I)
  grid = canvas(mostcolor(I), shape(I))
  for obj in objs:
    destination = shift(obj, (height(I), 0))  # Set a virtual destination below the grid
    direction = gravitate(obj, destination)
    grid = paint(grid, shift(obj, direction))
  return grid
 
12.666666666666666, 17.21155, def ghjhceihdeccecdbjffiebchieaehfbe(I):
  """
  Employs a scanning approach from bottom to top, filling from the bottom up.
  """
  grid = canvas(mostcolor(I), shape(I))
  for j in range(width(I)):
    for i in range(height(I) - 1, -1, -1):  # Scan from bottom to top
      v = index(I, (i, j))
      if v != mostcolor(I):
        empty_row = next((k for k in range(i, height(I)) if index(grid, (k, j)) == mostcolor(I)), i)
        grid = paint(grid, {(v, (empty_row, j))})
  return grid
 
10.0, 19.882452, def agjdifebhfadecidachffdidjefgfdid(I):
  O = canvas(0, shape(I))
  for obj in objects(I, T, F, F):
    val = color(obj)
    if val == 3:
      O = paint(O, shift(obj, (0, 3 - leftmost(obj))))
    elif val == 7:
      O = paint(O, shift(obj, (0, 11 - leftmost(obj))))
    else:
      O = paint(O, obj)
  return O
 
10.0, 20.074705, def cdegfbdehbdfejefbgibbbdfjagiabfi(I):
  O = canvas(0, shape(I))
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if val == 3:
        O = paint(O, {(val, (i, 3))})
      elif val == 7:
        O = paint(O, {(val, (i, 11))})
      else:
        O = paint(O, {(val, (i, j))})
  return O
 
11.666666666666666, 17.691925, def dgfdejfdidecefeajfddbccdiffbbedh(I):
  O = replace(I, 3, 0)
  O = replace(O, 7, 0)
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if val == 3:
        O = paint(O, {(3, (i, 3))})
      elif val == 7:
        O = paint(O, {(7, (i, 11))})
  return O
 
11.0, 21.5277, def cbdcbjdidfadeiidieibibafbeaebbaf(I):
  objs = objects(I, T, F, T)
  largest = argmax(objs, size)
  return paint(
    canvas(ZERO, shape(I)), 
    merge(
      {largest} |
      apply(
        lambda obj: shift(obj, gravitate(obj, largest)), 
        difference(objs, {largest})
      )
    )
  )
 
25.0, 13.388463, def dadibhgebffgeecdbjdahbbbdbebadja(I):
  objs = fgpartition(I)
  return paint(
      cover(I, merge(objs)), 
      merge(
          apply(
              lambda obj: branch(
                  size(obj) > 1, 
                  recolor(color(obj), connect(llcorner(obj), lrcorner(obj))),
                  frozenset()
              ), 
              objs
          )
      )
  )
 
39.333333333333336, 35.8941, def cfeddbiagfgdeabbacbfbhhigedbcjhd(I):
  def process_object(obj):
    if size(obj) <= 1:
      return frozenset()
    mid_y = uppermost(obj) + height(obj) // 2
    return recolor(color(obj), frozenset((mid_y, j) for j in range(width(I))))
  
  return paint(I, merge(apply(process_object, fgpartition(I))))
 
27.666666666666668, 26.778315, def baiafhcfeeedegjdjfcaefhejecfceie(I):
    objs = fgpartition(I)
    return paint(
        I,
        merge(
            apply(
                lambda obj: branch(
                    size(obj) > 1,
                    recolor(
                        color(obj),
                        frozenset(
                            (uppermost(obj) + height(obj) // 2, j)
                            for j in range(leftmost(obj), rightmost(obj) + 1)
                        )
                    ),
                    obj if size(obj) == 1 and color(obj) == mostcommon(I) else frozenset()  
                ),
                objs
            )
        )
    )
 
12.666666666666666, 19.941526, def bafhbffdafbeeaadbbjjfcihgggddbda(I):
  objs = sorted(fgpartition(I), key=lambda obj: centerofmass(obj)[1])  # Sort objects by horizontal center
  grid = canvas(mostcolor(I), shape(I))
  y = 0
  for obj in objs:
    w = width(obj)
    shifted_obj = shift(obj, (0, width(grid) // 2 - w // 2 - w % 2)) # Center the object
    shifted_obj = shift(shifted_obj, (-y, 0))  
    grid = paint(grid, shifted_obj)
    y += height(obj)
  return grid
 
10.666666666666666, 20.96008, def acjgbcfbgadfefadiejececidicdfcec(I):
    objs = fgpartition(I)
    grid = canvas(mostcolor(I), shape(I))
    offset = (0,0)
    for obj in objs:
        grid = paint(grid, shift(obj, offset))
        offset = (offset[0] + height(obj), width(grid) // 2 - width(obj) // 2 - width(obj) % 2 )
    return grid
 
11.666666666666666, 25.276781, def badafeffcgfdeeigjccffddbjccbccaj(I):
    objs = list(fgpartition(I))
    grid = canvas(mostcolor(I), shape(I))
    height_sum = 0
    for i in range(len(objs)):
        obj = objs[i]
        w = width(obj)
        objs[i] = shift(obj, (0, width(grid) // 2 - w // 2 - w % 2)) # Center the object
        objs[i] = shift(objs[i], (-height_sum, 0))
        height_sum += height(obj)
    return paint(grid, merge(objs))
 
11.0, 20.680775, def debfjcegdjijedgiadighchfffaachbb(I):
  O = I
  for v in [3, 7]:
    target_column = 3 if v == 3 else 11
    objs = mfilter(objects(I, T, F, F), lambda obj: color(obj) == v)
    O = cover(O, objs)
    O = paint(O, shift(objs, (0, target_column - leftmost(objs))))
  return O
 
11.333333333333334, 21.574862, def cbcccbibdgefedfeaffbbdiahhfbbccj(I):
    objs = objects(I, T, F, T)                 # Identify all objects
    largest = argmax(objs, size)                # Find the largest object
    others = difference(objs, {largest})        # Get all objects except the largest
    centered = set()
    for o in others:
        direction = position(o, largest)       # Determine relative position 
        if direction[0] == 0:                 # If on the same row
            offset = (1, direction[1])        # Shift one unit up/down
        else:
            offset = direction                  # Otherwise, shift diagonally
        centered.add(shift(o, gravitate(shift(o, offset), largest))) # Gravitate towards the largest
    return paint(canvas(ZERO, shape(I)), merge({largest} | centered)) # Combine and paint
 
9.333333333333334, 30.785332, def bgaahbediaefeiceiebfbjjbigdcfcfd(I):
    objs = objects(I, T, F, T)
    largest = argmax(objs, size)
    others = difference(objs, {largest})
    centered = set()
    for o in others:
        if uppermost(o) < uppermost(largest):   # If originally above
            offset = (-1, 0)                     # Initial offset: Up
        else:
            offset = (1, 0)                      # Initial offset: Down
        centered.add(shift(o, gravitate(shift(o, offset), largest)))
    return paint(canvas(ZERO, shape(I)), merge({largest} | centered)) 
 
9.333333333333334, 30.77694, def bgeabafhjfhiedeeabhfdacaeffcjdij(I):
    objs = objects(I, T, F, T)
    largest = argmax(objs, size)
    others = difference(objs, {largest})
    centered = set()
    for o in others:
        for direction in [(0, 1), (0, -1), (1, 0), (-1, 0)]:  # Check all four directions
            shifted = shift(o, direction)
            if len(intersection(box(shifted), box(largest))) > 0: # Check if bounding boxes intersect
                centered.add(shift(shifted, gravitate(shifted, largest)))
                break
    return paint(canvas(ZERO, shape(I)), merge({largest} | centered))
 
14.666666666666666, 16.190006, def ibfabgcabffhejccbigbebdachddfbcb(I):
    objs = objects(I, T, F, T)
    largest = argmax(objs, size)
    others = difference(objs, {largest})
    centered = set()
    for o in others:
        min_dist = manhattan(o, largest)
        best_dir = (0, 0)
        for direction in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
            shifted = shift(o, direction)
            dist = manhattan(shifted, largest)
            if dist < min_dist:
                min_dist = dist
                best_dir = direction
        centered.add(shift(o, best_dir))
    return paint(canvas(ZERO, shape(I)), merge({largest} | centered))
 
24.333333333333332, 17.698391, def eabdbfbefffaeeidbdfaaefbibfahefd(I):
    objs = fgpartition(I)
    lines = frozenset()
    for obj in objs:
        if size(obj) > 1:
            center_j = leftmost(obj) + width(obj) // 2
            line = frozenset({(color(obj), (i, center_j)) for i in range(uppermost(obj), lowermost(obj) + 1)})
            lines = combine(lines, line)
    return paint(cover(I, merge(objs)), lines)
 
28.666666666666668, 25.026863, def ddcfhadcjagaeibcijbgijbhibbcdgic(I):
    return paint(
        I, 
        merge(
            apply(
                lambda obj: recolor(
                    color(obj), 
                    frozenset(
                        (i, leftmost(obj) + width(obj) // 2)
                        for i in range(uppermost(obj), lowermost(obj) + 1)
                    )
                ) if size(obj) > 1 else frozenset(),
                fgpartition(I)
            )
        )
    )
 
16.0, 18.431307, def fdcdafbgdabfegahacbcjaiaaaabdgfa(grid):
  objs = fgpartition(grid) 
  grid = canvas(mostcolor(grid), shape(grid)) # Clear the grid
  for obj in objs:
    c = color(obj)
    for _, (i, j) in sorted(obj, key=lambda x: x[1][0], reverse=True): # Sort cells in the object from bottom to top
      k = height(grid) - 1
      while k >= 0:
        if grid[k][j] == mostcolor(grid) or (k - 1 >= 0 and grid[k - 1][j] == c): # Find the landing spot
          break
        k -= 1
      grid = paint(grid, {(c, (k, j))})
  return grid
 
47.666666666666664, 44.925877, def ehcgbefdfibhebjfbgaffdcacdjgahfa(grid):
  for j in range(width(grid)):
    column = {(v, (i, j)) for v, (i, j) in asobject(grid) if j == j and v != mostcolor(grid)}
    while any(i + 1 < height(grid) and index(grid, (i + 1, j)) == mostcolor(grid) for _, (i, j) in column):
      column = shift(column, DOWN)
    grid = paint(cover(grid, column), column)
  return grid
 
16.0, 14.920588, def chahbjgaehegedfdbagfdaebibffedjc(grid):
  h, w = len(grid), len(grid[0])
  bg = mostcolor(grid)
  for j in range(w):
    column_colors = [grid[i][j] for i in range(h) if grid[i][j] != bg]
    grid = fill(grid, bg, {(i, j) for i in range(h)}) # Clear the column
    start_i = h - 1
    for c in reversed(column_colors):
      grid = paint(grid, {(c, (start_i, j))})
      start_i -= 1
  return grid
 
14.666666666666666, 21.4782, def dijcdfdcggbcebbbjdafbjjefgfehaaj(I):
  def make_line(obj):
    return frozenset((color(obj), (i, leftmost(obj) + width(obj) // 2)) for i in range(uppermost(obj), lowermost(obj) + 1))
  lines = mfilter(fgpartition(I), lambda obj: size(obj) > 1 and make_line(obj))
  return paint(canvas(0, shape(I)), lines)
 
127.33333333333333, 70.76618, def echeeefbdhfjefadichaccfcaaecfjeg(grid):
  new_grid = canvas(mostcolor(grid), shape(grid))
  for j in range(width(grid)):
    column_objs = [(v, (i, j)) for v, (i, j) in asobject(grid) if v != mostcolor(grid) and j == j]
    offset = 0
    for v, (i, _) in column_objs:
      new_grid = paint(new_grid, {(v, (offset, j))})
      offset += 1
  return new_grid
 
13.666666666666666, 12.607359, def afagdbeciadbeecgjhbahaedjaajfcjc(I):
  return tuple(
      tuple(
          3 if cell == 3 else (7 if cell == 7 else cell) 
          for j, cell in enumerate(row)
      ) if i != 11 else
      tuple(
          (3 if j == 3 else (7 if j == 11 else cell)) 
          if cell == 0 else cell
          for j, cell in enumerate(row)
      )
      for i, row in enumerate(I)
  )
 
9.333333333333334, 30.662962, def bfaafcadbhadegbdbfhfgjjefacheaaj(I):
  return paint(
      canvas(mostcolor(I), shape(I)),
      mapply(
        lambda obj: shift(obj, subtract(centerofmass(argmax(objects(I, T, F, T), size)), centerofmass(obj))),
        objects(I, T, F, T)
      )
  )
 
23.0, 19.279491, def ebbfhffjaeaceidcbgdecgadahfjedge(I):
  def make_hline(obj):
    return frozenset(
        (color(obj), (i, leftmost(obj) + width(obj) // 2))
        for i in range(uppermost(obj), lowermost(obj) + 1)
    )
  lines = apply(make_hline, fgpartition(I))
  return paint(canvas(0, shape(I)), merge(lines))
 
22.666666666666668, 19.384024, def cdedbjidfbeeeddgigdjgebbeehifajb(I):
    h, w = shape(I)
    output = canvas(0, (h, w))
    for obj in fgpartition(I):
        val = color(obj)
        center_col = leftmost(obj) + width(obj) // 2
        for row in range(uppermost(obj), lowermost(obj) + 1):
            output = fill(output, val, {(row, center_col)})
    return output
 
15.0, 17.541555, def haabeibecchdebcgbgidafaebeefaibc(grid):
  objs = fgpartition(grid)
  out = canvas(mostcolor(grid), shape(grid))
  for obj in objs:
    lowest_row = lowermost(obj)
    center_col = (leftmost(obj) + rightmost(obj)) // 2
    shift_amount = (0, width(grid) // 2 - center_col)
    shifted_obj = shift(obj, shift_amount)
    out = paint(out, shifted_obj)
  return out
 
13.333333333333334, 19.633356, def jdcddefchffbeijdjedhccadbdficdaa(grid):
  def center_on_lowest_row(obj):
    lowest_row_indices = frozenset((i, j) for v, (i, j) in obj if i == lowermost(obj))
    center_col = (leftmost(lowest_row_indices) + rightmost(lowest_row_indices)) // 2
    shift_amount = (0, width(grid) // 2 - center_col)
    return shift(obj, shift_amount)
  return paint(canvas(mostcolor(grid), shape(grid)), merge(apply(center_on_lowest_row, fgpartition(grid))))
 
12.666666666666666, 22.729145, def bbgadhdicdbdeechaafaahcbdjeecdjg(I):
  bg = mostcolor(I)
  objs = objects(I, T, F, T)
  largest_obj = argmax(objs, size)
  w = width(I)
  return paint(
      canvas(bg, shape(I)),
      merge(
          {shift(obj, (0, w // 2 - leftmost(obj) - width(obj) // 2)) for obj in objs}
      )
  )
 
12.333333333333334, 20.617477, def bgdijhaaaddaefbdjijabiebideajfec(I):
    bg = mostcolor(I)
    objs = objects(I, T, F, T)
    largest_obj = argmax(objs, size)
    center_x = leftmost(largest_obj) + width(largest_obj) // 2
    return paint(
        canvas(bg, shape(I)),
        merge(
            {shift(obj, (0,  center_x - (leftmost(obj) + width(obj) // 2))) for obj in objs}
        )
    )
 
10.666666666666666, 19.726862, def bjchcahbaehgeigjbeabeacehcjabfha(I):
  O = paint(canvas(mostcommon(I), shape(I)), merge(objects(I, T, F, F)))
  for v in {3, 7}:
    O = cover(O, recolor(v, ofcolor(I, v)))
    O = paint(O, shift(recolor(v, ofcolor(I, v)), ((3 if v == 3 else 10) - uppermost(ofcolor(I, v)), 0)))
  return O
 
9.0, 20.693443, def dahgfcdbjbaiechfjbhhcccfibfehbgb(I):
  def move_color(grid, v):
    indices = ofcolor(grid, v)
    return paint(cover(grid, recolor(v, indices)), shift(recolor(v, indices), ((3 if v == 3 else 10 if v == 7 else 0), 0)))
  O = paint(canvas(mostcommon(I), shape(I)), merge(objects(I, T, F, F)))
  for v in {3, 7}:
    O = move_color(O, v)
  return O
 
9.333333333333334, 31.324255, def ccecfceaedjcejibidbjhbfjafaeicjj(I):
  bg = mostcolor(I)  
  objs = objects(I, T, F, T)
  largest_obj = argmax(objs, size)
  midpoint = width(I) // 2
  centered_obj = shift(largest_obj, (0, midpoint - (leftmost(largest_obj) + width(largest_obj) // 2)))
  return paint(canvas(bg, shape(I)), centered_obj) 
 
14.0, 20.574902, def fbhjcdcaibafecdcjiabfjafdfdbjacc(I):
    # Find all non-background objects
    objs = fgpartition(I)
    # Find the height of the tallest object
    max_height = valmax(objs, height) 
    # Define a function to center an object horizontally
    def center_h(obj):
        return shift(obj, (0, width(I) // 2 - centerofmass(obj)[1]))
    # Apply horizontal centering and move to the bottom
    centered_objs = frozenset(shift(center_h(obj), (height(I) - max_height, 0)) for obj in objs)
    # Paint the centered objects onto a blank canvas
    O = paint(canvas(0, shape(I)), merge(centered_objs))
    return O
 
12.666666666666666, 24.586817, def geadahaiececeadajgiaagedbgjabdic(I):
    # Get grid dimensions
    h, w = shape(I)
    # Find the background color
    bg = mostcolor(I)
    # Create a function to process each object
    def process_obj(obj):
        # Center the object horizontally
        obj = shift(obj, (0, w // 2 - centerofmass(obj)[1]))
        # Move the object to the bottom
        return shift(obj, (h - height(obj), 0))
    # Apply the function to all non-background objects
    new_objs = mapply(process_obj, fgpartition(I))
    # Paint the objects onto a new canvas
    return paint(canvas(bg, (h, w)), new_objs)
 
15.0, 19.93659, def feedfaedecegegfdbhdeaeahbcheibgc(grid):
  def process_row(row):
    non_bg_indices = frozenset((v, (0, j)) for j, v in enumerate(row) if v != mostcolor(grid))
    if non_bg_indices:  # Check if non_bg_indices is not empty
        centered_indices = shift(
            non_bg_indices,
            (0, width(grid) // 2 - (leftmost(non_bg_indices) + rightmost(non_bg_indices)) // 2)
        )
        return paint(canvas(mostcolor(grid), (1, width(grid))), centered_indices)[0]
    else:
        return row  # Return original row if no non-background objects
  return tuple(process_row(row) for row in grid)
 
12.666666666666666, 17.21155, def cjhibghfbfdgedbgjeefgfgeafieefdc(I):
    # Find the most common color in the grid
    target_color = mostcolor(I)
    
    # Identify objects of the target color
    target_objs = colorfilter(objects(I, T, F, T), target_color)
    
    # Find the largest object
    largest = argmax(objects(I, T, F, T), size)

    # Connect target objects to the largest
    connected_objs = set()
    for obj in target_objs:
        if obj != largest:
            offset = (sign(uppermost(largest) - uppermost(obj)), 0)
            connected_objs.add(shift(obj, gravitate(shift(obj, offset), largest)))

    # Combine and paint objects
    all_objs = merge(difference(objects(I, T, F, T), target_objs) | {largest} | connected_objs)
    O = paint(canvas(ZERO, shape(I)), all_objs)
    return O
 
8.333333333333334, 27.133772, def cjebedebijfeeedhiacebfadehdghfbg(I):
  # Identify the largest object
  largest = argmax(objects(I, T, F, T), size)

  # Identify other objects and their colors
  other_objs = difference(objects(I, T, F, T), {largest})
  other_colors = list(set(color(obj) for obj in other_objs))

  # Find the most common color among other objects
  target_color = mostcommon(other_colors) 

  # Group objects by color
  grouped_objs = {c: colorfilter(other_objs, c) for c in other_colors}

  # Connect objects of the target color
  connected_objs = set()
  for obj in grouped_objs[target_color]:
    offset = (-1, 0) if uppermost(obj) < uppermost(largest) else (1, 0)
    connected_objs.add(shift(obj, gravitate(shift(obj, offset), largest)))
    
  # Combine all objects and paint on a blank canvas
  final_objs = merge({largest} | connected_objs | grouped_objs[other(other_colors, target_color)])
  O = paint(canvas(ZERO, shape(I)), final_objs)
  return O
 
11.666666666666666, 18.25617, def jajdeaidcedieciiabfibghddbjadacb(I):
    # Identify all objects 
    objs = objects(I, T, F, T)
    
    # Find the largest object
    largest = argmax(objs, size)

    # Find the second largest object
    second_largest = argmax(difference(objs, {largest}), size)

    # Determine the direction to move the second largest object
    direction = gravitate(second_largest, largest)

    # Move the second largest object
    moved_obj = shift(second_largest, direction)

    # Combine and paint the objects
    final_objs = merge({largest, moved_obj} | difference(objs, {largest, second_largest}))
    O = paint(canvas(ZERO, shape(I)), final_objs)
    return O
 
10.0, 19.822508, def fbffgigccabeegbejfgcahahfhafcbbc(I):
  c = center(asindices(I))
  return paint(
      canvas(0, shape(I)),
      merge(
          {shift(obj, (
                    crement(c[0] - center(toindices(obj))[0]), 
                    crement(c[1] - center(toindices(obj))[1])))
           if color(obj) in {3, 7}
           else obj
           for obj in objects(I, True, False, False)}
      )
  )
 
14.0, 10.226253, def hafgchdbaffcecicbdechagdhicdbhgc(I):
  objs = fgpartition(I)
  O = canvas(mostcolor(I), shape(I))
  for obj in objs:
    w = width(obj)
    h = height(obj)
    row = tuple(v for v, _ in sorted(obj, key=lambda x: x[1][1]))
    start = leftmost(obj)
    O = paint(O, {(v, (center(obj)[0], start + (i % w))): v for i, v in enumerate(row * (h // w + (h % w > 0)))})
  return O
 
12.0, 11.609309, def bibbfajbeifcecabbabachjcdgadfbac(I):
  objs = fgpartition(I)
  O = I
  for obj in objs:
    if color(obj) != mostcolor(I):
      center_i = center(obj)[0]
      start_j = leftmost(obj)
      width_obj = width(obj)
      compressed_obj = {(v, (center_i, start_j + (i % width_obj))): v for i, (v, (r, c)) in enumerate(sorted(obj, key=lambda x: x[1][1]))}
      O = fill(O, mostcolor(O), obj)
      O = paint(O, compressed_obj)
  return O
 
8.666666666666666, 33.850494, def ededagabdccfebebabedffddbdbcgbcb(I):
  O = canvas(0, shape(I))
  for obj in objects(I, True, False, False):
    if color(obj) == 3:
      O = paint(O, shift(recolor(2, obj), (10 - centerofmass(obj)[0], 6 - centerofmass(obj)[1])))
    elif color(obj) == 7:
      O = paint(O, shift(recolor(1, obj), (- centerofmass(obj)[0] + 2, 10 - centerofmass(obj)[1])))
    else:
      O = paint(O, shift(obj, (6 - centerofmass(obj)[0], 0)))
  return O
 
9.333333333333334, 31.23518, def jejdjfdggddbecdjiehdfcabchadigfe(I):
  sevens = colorfilter(objects(I, T, F, T), SEVEN)
  threes = colorfilter(objects(I, T, F, T), THREE)
  O = canvas(ZERO, shape(I))
  for seven in sevens:
    O = paint(O, shift(seven, (-2, 0)))
    O = paint(O, {(ONE, add(centerofmass(seven), (0, 1)))})
  for three in threes:
    if size(three) == ONE:
      O = paint(O, shift(three, (4, 0)))
      O = paint(O, {(TWO, add(centerofmass(three), (1, 1)))})
    else:
      O = paint(O, shift(three, (5, 0)))
      O = paint(O, {(TWO, add(centerofmass(three), (1, 0)))})
  return O
 
9.333333333333334, 31.09633, def ajcbddaefjbeeeddaahdchgbfjjadfdf(I):
  objs = objects(I, True, False, True)
  O = canvas(ZERO, shape(I))
  for obj in objs:
    c = color(obj)
    center_obj = centerofmass(toindices(obj))
    if c == SEVEN:
      O = paint(O, shift(recolor(c, obj), (-2, 0)))
      O = paint(O, {(ONE, (center_obj[0], center_obj[1] + 1))})
    elif c == THREE:
      offset = (4, 0) if size(obj) == 1 else (5, 0)
      O = paint(O, shift(recolor(c, obj), offset))
      O = paint(O, {(TWO, (center_obj[0] + offset[0] - 4, center_obj[1] + offset[1] + 1))})
  return O
 
8.666666666666666, 34.141724, def jihcghjfaebdeebeicefbebfedjdheci(I):
  objs = objects(I, True, False, False)
  moved_objs = frozenset(
      branch(
          color(obj) == 3, 
          shift(recolor(2, obj), (-3, 0)), 
          branch(
              color(obj) == 7,
              shift(recolor(1, obj), (2, 0)),
              obj
          )
      )
      for obj in objs
  )
  return paint(canvas(0, shape(I)), merge(moved_objs))
 
8.666666666666666, 30.106495, def gadahfjafggdehbdagbbcbafcgdicfhg(I):
  def process_color(c, objs):
    return frozenset(
        branch(
            color(obj) == c,
            shift(recolor(c % 10 // 2, obj), ((c - 5) // 2, 0)),
            obj
        ) for obj in objs
    )
  objs = objects(I, True, False, False)
  return paint(canvas(0, shape(I)), merge(process_color(3, objs) | process_color(7, objs)))
 
9.666666666666666, 29.261084, def adbbabjcaadfefdfjeeifideacdhhgfd(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  O = canvas(ZERO, shape(I))
  for obj in objs:
    value = color(obj)
    center_obj = centerofmass(obj)
    if value == SEVEN:
      O = paint(O, shift(recolor(value, obj), (-2, 0)))
      O = paint(O, {(ONE, (center_obj[0], center_obj[1] + 1))})
    elif value == THREE:
      if size(obj) == 1:
        O = paint(O, shift(recolor(value, obj), (1, 0)))
        O = paint(O, {(TWO, (center_obj[0] + 1, center_obj[1] + 1))})
      else:
        O = paint(O, shift(recolor(value, obj), (1, 0)))
        O = paint(O, {(TWO, (center_obj[0] + 1, center_obj[1]))})
  return O
 
8.333333333333334, 33.62836, def bcadadhdigddeaahbgbaeiecgaccjdee(I):
  O = canvas(0, shape(I))
  for obj in objects(I, True, False, False):
    target_column = 3 if color(obj) == 3 else 11 if color(obj) == 7 else centerofmass(obj)[1]
    O = paint(O, shift(obj, (0, target_column - centerofmass(obj)[1])))
  return O
 
8.666666666666666, 31.008392, def bgfiaddcfadhefbjadebccafejfcfhjf(I):
  objs = objects(I, True, False, False)
  moved_objs = frozenset(
      shift(obj, (0, 3 - centerofmass(obj)[1])) if color(obj) == 3
      else shift(obj, (0, 11 - centerofmass(obj)[1])) if color(obj) == 7
      else obj
      for obj in objs
  )
  return paint(canvas(0, shape(I)), merge(moved_objs))
 
9.666666666666666, 28.551874, def cdcbdcdaedfdefciacjceiffbbbcdfjd(I):
  O = canvas(0, shape(I))
  for v in (3, 7):
    for obj in colorfilter(objects(I, True, False, False), v):
      target_i = height(I) // 2 - (1 if v == 3 else 0)
      O = paint(O, shift(obj, (target_i - uppermost(obj), width(I) // 2 - leftmost(obj))))
      O = paint(O, {(2, (target_i, centerofmass(obj)[1] + 1))})
  return O
 
9.666666666666666, 29.525599, def chbhcaaahidhegcajfjicbdfbccaccbe(I):
  O = canvas(0, shape(I))
  for obj in objects(I, True, False, False):
    v = color(obj)
    if v in (3, 7):
      center_j = centerofmass(obj)[1]
      target_i = height(I) // 2 - (1 if v == 3 else 0)
      O = paint(O, shift(obj, (target_i - uppermost(obj), width(I) // 2 - 1 - leftmost(obj))))
      O = paint(O, {(2, (target_i, center_j + 1))})
  return O
 
10.333333333333334, 19.64765, def aejcbfeciaeaeegfbccicbdhfdigbeij(I):
  target_color = next((c for c in palette(I) if c != mostcolor(I)), None)
  if target_color is None:
    return I  # No change if only background color is present
  obj = next((o for o in objects(I, True, False, True) if color(o) == target_color), None)
  if obj is None: 
    return I # No change if no object with target_color is found
  center_i, center_j = centerofmass(obj)
  T_shape = {(center_i - 1, center_j - 1), (center_i - 1, center_j), (center_i - 1, center_j + 1), (center_i, center_j), (center_i + 1, center_j)}
  O = canvas(mostcolor(I), shape(I)) # Create a new canvas with background color
  O = fill(O, target_color, T_shape)
  O = fill(O, 2, {(center_i + 1, center_j)})
  return O
 
9.666666666666666, 29.18663, def dfjccaebcagdefceafbcefaedfhdebjc(I):
  O = canvas(ZERO, shape(I))
  for obj in objects(I, T, F, T):
    if color(obj) == SEVEN:
      O = paint(O, shift(recolor(THREE, obj), (-2, 0)))
      O = paint(O, {(ONE, add(centerofmass(obj), (0, 1)))})
      O = paint(O, {(TWO, add(centerofmass(obj), (-2, 0)))})
    if color(obj) == THREE:
      O = paint(O, shift(obj, (1 if size(obj) == 1 else 0, 0)))
      O = paint(O, {(TWO, add(centerofmass(obj), (1, 1) if size(obj) == 1 else (1, 0)))})
  return O
 
11.333333333333334, 11.345159, def cjdjafaadbeeebicjhegifcjfbcbafad(I):
  target_color = first(palette(I) - {mostcolor(I)}) if len(palette(I)) > 1 else 1
  objs = objects(I, True, False, True)
  obj = extract(objs, matcher(color, target_color)) if len(objs) > 0 else {(1, (10, 11))}
  center_i, center_j = centerofmass(obj)
  T_shape = {(center_i - 1, center_j - 1), (center_i - 1, center_j), (center_i - 1, center_j + 1),
           (center_i, center_j), (center_i + 1, center_j)}
  O = fill(I, mostcolor(I), asindices(I))
  O = fill(O, target_color, T_shape)
  O = fill(O, 2, {(center_i + 1, center_j)})
  return O
 
8.333333333333334, 31.28123, def fchfebbihebjeahebcebdgdihehjibfd(I):
  objs = objects(I, True, False, False)
  return paint(
    canvas(0, shape(I)),
    merge(
      frozenset(
        shift(
          branch(
            color(obj) == 7,
            recolor(1, obj),
            branch(
              color(obj) == 3,
              recolor(2, obj),
              obj
            )
          ),
          (
            0,
            branch(
              color(obj) == 7,
              11,
              branch(
                color(obj) == 3,
                3,
                centerofmass(obj)[1]
              )
            ) - centerofmass(obj)[1]
          )
        )
        for obj in objs
      )
    )
  )
 
9.666666666666666, 29.082464, def ddfbhafddfceeifjjihabjbghbiccfif(I):
  O = canvas(ZERO, shape(I))
  for obj in objects(I, T, F, T):
    c = color(obj)
    cm = centerofmass(obj)
    if c == SEVEN:
      O = paint(O, shift(recolor(THREE, obj), (-2, 0)))
      O = paint(O, {(ONE, (cm[0], cm[1] + 1))})
      O = paint(O, {(TWO, (cm[0] - 2, cm[1]))})
    elif c == THREE:
      s = size(obj)
      rm = rightmost(obj)
      lm = leftmost(obj)
      shift_amount = 1 if s == 1 else rm - lm + 1
      O = paint(O, shift(obj, (0, shift_amount)))
      O = paint(O, {(TWO, (cm[0] + 1, cm[1] + shift_amount))})
  return O
 
11.666666666666666, 12.816966, def ieifadcfidbjeeibiehcdjaaabbeajje(I):
  obj = argmax(fgpartition(I), lambda obj: len(obj)) if fgpartition(I) else {(1, (10, 10))}
  ci, cj = centerofmass(obj)
  T_shape = {(ci - 1, cj - 1), (ci - 1, cj), (ci - 1, cj + 1), (ci, cj), (ci + 1, cj)}
  colors = list(palette(I) - {mostcolor(I)})
  c1 = colors[0] if colors else 1
  c2 = colors[1] if len(colors) > 1 else 2
  return fill(fill(canvas(mostcolor(I), shape(I)), c1, T_shape), c2, {(ci + 1, cj)})
 
13.0, 8.997919, def gdaideecfbdeedbbbiebdiccbdcebbff(I):
  non_bg = mfilter(objects(I, False, False, True), lambda obj: True)
  center_i, center_j = centerofmass(non_bg) if non_bg else (10, 10)
  top_left = (center_i - 1, center_j - 1)
  T = {(top_left[0] + i, top_left[1] + j) for i in range(3) for j in (0, 1, 2) if i != 2 or j == 1}
  colors = sorted(palette(I) - {mostcolor(I)})
  c1, c2 = (colors + [1, 2])[:2]
  return fill(fill(canvas(mostcolor(I), shape(I)), c1, T), c2, {(center_i + 1, center_j)})
 
8.666666666666666, 33.579865, def bccffeffcacbecdhjiiaaagifedefgfc(I):
  return paint(
      canvas(0, shape(I)),
      mapply(
        lambda obj: shift(
          recolor(
            branch(color(obj) == 7, 1, branch(color(obj) == 3, 2, color(obj))), 
            obj
          ),
          (0, branch(color(obj) == 7, 11, branch(color(obj) == 3, 3, 0)))
        ),
        objects(I, True, False, False)
      )
  ) 
 
9.666666666666666, 30.010654, def jejgddajjhgaebedjabebgaffeghgadi(I):
  O = canvas(ZERO, shape(I))
  for obj in objects(I, T, F, T):
    c = color(obj)
    cm = centerofmass(obj)
    if c == SEVEN:
      O = paint(O, shift(recolor(THREE, obj), (-2, 0)))
      O = paint(O, {(ONE, (cm[0], cm[1] + 1))})
      O = paint(O, {(TWO, (cm[0], cm[1] - 2))})  # Corrected '2' placement
    elif c == THREE:
      shift_amount = width(obj) + 1
      O = paint(O, shift(obj, (0, shift_amount)))
      O = paint(O, {(TWO, (cm[0], cm[1] + shift_amount))})
  return O
 
11.333333333333334, 12.5234785, def eghjddbdadbeeiggbhhbggjaceibifab(I):
  non_bg_indices = mfilter(fgpartition(I), lambda obj: True)
  center_i, center_j = centerofmass(non_bg_indices) if non_bg_indices else (10, 10)
  T_top = connect((center_i - 1, center_j - 1), (center_i - 1, center_j + 1))
  T_stem = connect((center_i, center_j), (center_i + 1, center_j))
  colors = totuple(palette(I) - {mostcolor(I)})
  color1 = colors[0] if len(colors) > 0 else 3
  color2 = colors[1] if len(colors) > 1 else 2
  return fill(fill(canvas(mostcolor(I), shape(I)), color1, T_top | T_stem),
              color2, {(center_i + 1, center_j)}) 
 
11.333333333333334, 14.483056, def fdijedhbehedeibbbbidfffcaeejjbfh(I):
  objs = fgpartition(I)
  if objs:
    obj = extract(objs, lambda obj: True)
    center_i, center_j = centerofmass(obj)
    color1 = color(obj)
  else:
    center_i, center_j = 10, 10
    color1 = 3 
  color2 = color1 + 1 if color1 != 9 else 0
  T =  {(center_i - 1, center_j - 1), (center_i - 1, center_j), (center_i - 1, center_j + 1), 
           (center_i, center_j), (center_i + 1, center_j), (center_i + 1, center_j)}
  return paint(fill(canvas(mostcolor(I), shape(I)), color2, {(center_i + 1, center_j)}), recolor(color1, T))
 
11.333333333333334, 12.776205, def iafhjjcafhgaejcebddfcbijfdcghaga(I):
  non_bg_obj = argmax(objects(I, False, False, True), lambda obj: len(obj))
  if non_bg_obj:
      ci, cj = centerofmass(non_bg_obj)
      color1 = color(non_bg_obj)
  else:
      ci, cj = 10, 10
      color1 = 3
  color2 = color1 + 1 if color1 != 9 else 0
  T = {(ci - 1, cj - 1), (ci - 1, cj), (ci - 1, cj + 1), (ci, cj), (ci + 1, cj)}
  return fill(fill(canvas(mostcolor(I), shape(I)), color1, T), color2, {(ci + 1, cj)})
 
159.66666666666666, 28.590187, def cbcfhbabddfhecdcijdjgaafjjfgggcj(I):
  shifted_objects = []
  augmentations = []
  for obj in objects(I, True, False, False):  # Iterate over objects
    offset = (0, 1)
    if color(obj) == 3:
      obj = shift(obj, (-1, 0))  # Shift color 3 objects upwards
    center_offset = subtract((height(I) // 2, width(I) // 2), centerofmass(obj))  # Calculate center shift
    shifted_objects.append(paint(canvas(0, shape(I)), shift(obj, center_offset)))  # Center the object
    augmentations.append({(2, add(centerofmass(obj), add(center_offset, offset)))})  # Add augmentation

  return paint(merge(shifted_objects), merge(augmentations))  # Merge and paint
 
9.666666666666666, 30.095297, def cbdgecbbabdbeddaajaffeibbeecfjdf(I):
  O = canvas(ZERO, shape(I))
  for obj in objects(I, T, F, T):
    c = color(obj)
    cm = centerofmass(obj)
    if c == SEVEN:
      O = paint(O, shift(recolor(THREE, obj), (-2, 0)))
      O = paint(O, {(ONE, add(cm, (0, 1)))})
      O = paint(O, {(TWO, add(cm, (0, -2)))})
    elif c == THREE:
      shift_amount = 1 if size(obj) == 1 else width(obj) + 1
      O = paint(O, shift(obj, (0, shift_amount)))
      O = paint(O, {(TWO, add(centerofmass(shift(obj, (0, shift_amount))), (0, 0)))})  # Calculate center of mass after the shift
    else:
      O = paint(O, obj)  # Preserve other objects
  return O
 
12.666666666666666, 12.923064, def adbefdgeffibefidjdcciegcaadfgbcf(I):
  non_bg_color = next(iter(palette(I) - {mostcolor(I)}), 3)
  center_loc = centerofmass(ofcolor(I, non_bg_color)) if non_bg_color != 3 else (10, 10)
  T = {(center_loc[0] - 1, center_loc[1] - 1), (center_loc[0] - 1, center_loc[1]), (center_loc[0] - 1, center_loc[1] + 1),
        (center_loc[0], center_loc[1]), (center_loc[0] + 1, center_loc[1])}
  next_color = non_bg_color + 1 if non_bg_color != 9 else 0
  return fill(fill(canvas(mostcolor(I), shape(I)), non_bg_color, T), next_color, {(center_loc[0] + 1, center_loc[1])})
 
9.666666666666666, 27.743156, def beedefhcidfceaeaibaaicbgaifaajie(I):
  sevens = colorfilter(objects(I, T, F, T), SEVEN)
  threes = colorfilter(objects(I, T, F, T), THREE)
  O = canvas(ZERO, shape(I))
  for obj in sevens:
    obj = shift(recolor(THREE, obj), (-2, 0))
    O = paint(O, obj)
    O = paint(O, {(ONE, add(centerofmass(obj), (0, 1)))})
    O = paint(O, {(TWO, add(centerofmass(obj), (0, -2)))})
  for obj in threes:
    shift_amount = width(obj) + 1
    O = paint(O, shift(obj, (0, shift_amount)))
    O = paint(O, {(TWO, add(centerofmass(obj), (0, 0)))})
  return O
 
9.666666666666666, 28.435352, def fccaahejeccbebefibfccfeaebabbfeb(I):
  O = canvas(ZERO, shape(I))
  for v, obj in [(SEVEN, (-2, 0)), (THREE, (0, 1))]:
    for o in colorfilter(objects(I, T, F, T), v):
      O = paint(O, shift(recolor(THREE, o) if v==SEVEN else o, multiply(shape(o), obj)))
      O = paint(O, {(TWO, centerofmass(o) if v==THREE else add(centerofmass(o), (0,-2)))})
      if v == SEVEN:
        O = paint(O, {(ONE, add(centerofmass(o), (0, 1)))})
  return O
 
9.666666666666666, 28.5374, def efdidaecbbjeehafafbdbdhgdfiachef(I):
  O = canvas(ZERO, shape(I))
  for obj in objects(I, T, F, T):
    if color(obj) == SEVEN:
      O = paint(O, shift(recolor(THREE, obj), (-2, 0)))
      O = paint(O, {(ONE, add(centerofmass(obj), (0, 1)))})
      O = paint(O, {(TWO, add(centerofmass(obj), (0, -2)))})
    elif color(obj) == THREE and size(obj) > 1:
      O = paint(O, shift(obj, (0, width(obj) + 1)))
      O = paint(O, {(TWO, centerofmass(obj))})
    elif color(obj) == THREE and size(obj) == 1:
      O = paint(O, shift(obj, (0, 2)))
      O = paint(O, {(TWO, centerofmass(obj))})
  return O
 
12.0, 18.863369, def ebiejhccegaceahebfdfiaffebbbfeci(I):
  # Find unique digit and its location (pivot)
  unique_digit, pivot = next(((x, (i, j)) for i, r in enumerate(I) for j, x in enumerate(r) if colorcount(I, x) == 1), (None, (len(I) // 2, len(I[0]) // 2)))

  # Create canvas
  O = canvas(0, shape(I))
  
  # Determine shape orientation
  stem_dir = (-1, 0) if pivot[0] <= len(I) // 2 else (1, 0) 
  arm_dir = (0, 1) if pivot[1] <= len(I[0]) // 2 else (0, -1)

  # Construct shape components
  stem = {add(pivot, multiply(stem_dir, (i, 0))) for i in range(1, 4)}
  arm1 = add(pivot, multiply(arm_dir,  (-1, 1)))
  arm2 = add(pivot, multiply(arm_dir,  ( 1, 1)))
  base = {add(pivot, multiply(stem_dir, (1, i))) for i in range(-1, 2)}

  # Fill shape components with colors
  O = fill(O, 3, stem)
  O = fill(O, 2, initset(arm1)) # Using initset to avoid TypeError
  O = fill(O, 1, initset(arm2)) # Using initset to avoid TypeError
  O = fill(O, unique_digit if unique_digit is not None else 0, base)

  return O
 
12.0, 19.530333, def hjfbjhfbacjhedadjhccbadbjdiadbdi(I):
  unique_digit = next((x for x in palette(I) if colorcount(I, x) == 1), None)
  pivot = first(ofcolor(I, unique_digit)) if unique_digit else (len(I) // 2, len(I[0]) // 2)

  O = canvas(0, shape(I))
  
  # Simplified orientation logic
  orientation = (-1, 0) if pivot[0] <= len(I) // 2 else (1, 0) if pivot[1] <= len(I[0]) // 2 else (0, -1)

  # Construct and fill shape in one step
  O = fill(O, 3, {add(pivot, multiply(orientation, (i, 0))) for i in range(1, 4)})
  O = fill(O, 2, initset(add(pivot, multiply(orientation, (-1, -1))))) # Using initset
  O = fill(O, 1, initset(add(pivot, multiply(orientation, (-1, 1))))) # Using initset
  O = fill(O, unique_digit if unique_digit is not None else 0, {add(pivot, multiply(orientation, (1, i))) for i in range(-1, 2)})
  return O
 
12.333333333333334, 14.138347, def ajjihdaaeebdebfgiceehfbbcecjaacj(I):
  unique_digit, pivot = next(((x, (i, j)) for i, r in enumerate(I) for j, x in enumerate(r) if colorcount(I, x) == 1), (None, (len(I) // 2, len(I[0]) // 2)))
  O = canvas(0, shape(I))

  # Using conditional expressions for conciseness
  stem_dir = (-1, 0) if pivot[0] <= len(I) // 2 else (1, 0)
  arm_offset = (1, -1) if pivot[1] <= len(I[0]) // 2 else (-1, -1)

  O = fill(O, 3, {add(pivot, multiply(stem_dir, (i, 0))) for i in range(1, 4)})
  O = fill(O, 2, initset(add(pivot, arm_offset))) # Using initset
  O = fill(O, 1, initset(add(pivot, multiply(arm_offset, (-1, 1))))) # Using initset
  O = fill(O, unique_digit if unique_digit is not None else 0, {add(pivot, (stem_dir[0], i)) for i in range(-1, 2)})
  return O
 
11.666666666666666, 16.164055, def chbdfahfadffebeijfcacdfaafccjajb(I):
  unique_digit, pivot = next(((x, (i, j)) for i, r in enumerate(I) for j, x in enumerate(r) if colorcount(I, x) == 1), (None, (len(I) // 2, len(I[0]) // 2)))
  O = canvas(0, shape(I))

  # Pre-calculating offsets 
  stem_offset = (-1, 0) if pivot[0] <= len(I) // 2 else (1, 0)
  arm_offset_1 = add(stem_offset, (0, -1)) 
  arm_offset_2 = add(stem_offset, (0, 1))

  O = fill(O, 3, {add(pivot, multiply(stem_offset, i)) for i in range(1, 4)})
  O = fill(O, 2, initset(add(pivot, arm_offset_1))) # Using initset
  O = fill(O, 1, initset(add(pivot, arm_offset_2))) # Using initset
  O = fill(O, unique_digit if unique_digit is not None else 0, {add(pivot, (stem_offset[0], i)) for i in range(-1, 2)})
  return O
 
14.333333333333334, 8.966315, def eeficabfaccdejajadfghacgciabfffh(I):
  unique_digit, pivot = next(((x, (i, j)) for i, r in enumerate(I) for j, x in enumerate(r) if colorcount(I, x) == 1), (None, (len(I) // 2, len(I[0]) // 2)))
  O = canvas(0, shape(I))

  # Determining base direction first
  base_dir = (1, 0) if pivot[0] <= len(I) // 2 else (-1, 0)
  arm_dir = (0, 1) if pivot[1] <= len(I[0]) // 2 else (0, -1)

  O = fill(O, 3, {add(pivot, multiply(base_dir, (-i, 0))) for i in range(1, 4)}) # Stem in opposite direction of base
  O = fill(O, 2, initset(add(pivot, arm_dir))) # Using initset
  O = fill(O, 1, initset(add(pivot, multiply(arm_dir, -1)))) # Using initset
  O = fill(O, unique_digit if unique_digit is not None else 0, {add(pivot, (base_dir[0], i)) for i in range(-1, 2)})
  return O
 
10.666666666666666, 17.820894, def efibaeifbffeeaabbedbebedgcdifcab(I):
  obj = next((o for o in objects(I, True, False, True)), None)
  if obj:
    center_i, center_j = centerofmass(obj)
    color1 = color(obj)
    color2 = (color1 + 1) if color1 != 9 else 0
    O = canvas(mostcolor(I), shape(I))
    for i in range(center_i - 1, center_i + 2):
      for j in range(center_j - 1, center_j + 2):
        if i == center_i + 1 and j == center_j:
          O = fill(O, color2, {(i, j)})
        elif abs(i - center_i) + abs(j - center_j) <= 1:
          O = fill(O, color1, {(i, j)})
    return O
  return I 
 
10.333333333333334, 19.772522, def gcccaccaehccebcfjacecbefhbgbfdbf(I):
  obj = extract(fgpartition(I), lambda o: len(o) > 0) if any(len(o) > 0 for o in fgpartition(I)) else None
  if obj:
    center_i, center_j = centerofmass(obj)
    color1 = next(iter(palette(obj)))
    color2 = 0 if color1 == 9 else color1 + 1
    T_base = recolor(color1, {(0, 0), (0, 1), (0, 2), (1, 1)})
    T_top = recolor(color2, {(2, 1)})
    return paint(paint(canvas(mostcolor(I), shape(I)), shift(T_base, (center_i - 1, center_j - 1))),
               shift(T_top, (center_i - 1, center_j - 1)))
  return I
 
126.0, 51.715862, def fadghacidfdaefdbjggehebbfehacebe(I):
  obj = next((o for o in fgpartition(I) if len(o) > 0), None)
  if obj:
    ci, cj = centerofmass(obj)
    bg = mostcolor(I)
    color1 = next(iter(palette(obj)))
    color2 = color1 + 1 if color1 != 9 else 0
    T = [[bg if (i, j) not in {(0, 0), (0, 1), (0, 2), (1, 1), (2, 1)} else (color1 if (i, j) != (2, 1) else color2) for j in range(3)] for i in range(3)]
    O = canvas(bg, (ci - 1, cj - 1)) + tuple(zip(*T)) + canvas(bg, (len(I) - ci - 2, len(I[0]) - cj + 1))
    return tuple(zip(*O))
  return I
 
10.0, 21.63314, def gigibebbjadiefjjaehgfdbeifdfahib(I):
  obj = next((o for o in objects(I, True, False, True)), None)
  if not obj: 
    return I
  center_i, center_j = centerofmass(obj)
  color1 = color(obj)
  color2 = color1 + 1 if color1 != 9 else 0
  return draw_T(canvas(mostcolor(I), shape(I)), center_i, center_j, color1, color2, 3)
 
10.666666666666666, 24.944338, def hfeadfadfaefefaciadbadfcfhieacad(I):
  O = canvas(0, shape(I))
  for obj in objects(I, True, False, False):
    target_i = height(I) // 2 - (color(obj) == 3)
    O = paint(O, shift(obj, (target_i - uppermost(obj), width(I) // 2 - leftmost(obj))))
    O = paint(O, {(2, (target_i, width(I) // 2 + 1))})
    if color(obj) == 7:
      O = paint(O, {(1, centerofmass(obj))})
  return O
 
12.666666666666666, 14.18646, def jbaajjhifbdeedcdbfhiabbdaaeicccj(I):
  obj = next((o for o in objects(I, True, False, True) if color(o) != mostcolor(I)), None)
  center_i, center_j = centerofmass(obj) if obj else (len(I) // 2, len(I[0]) // 2)
  used_colors = palette(I)
  new_color1 = next((c for c in range(10) if c not in used_colors), 3)
  new_color2 = next((c for c in range(10) if c not in used_colors | {new_color1}), new_color1 + 1)
  T = {(center_i - 1, center_j - 1), (center_i - 1, center_j), (center_i - 1, center_j + 1), (center_i, center_j), (center_i + 1, center_j)}
  dot = {(center_i + 1, center_j)}
  return paint(fill(canvas(mostcolor(I), shape(I)), new_color1, T), recolor(new_color2, dot))
 
11.0, 19.459213, def feiachidhajcejbdbabcehfefeacffaa(I):
  obj = argmax(objects(I, True, False, True), lambda obj: len(obj)) if len(objects(I, True, False, True)) > 0 else None
  if obj is None:
    return I
  center_i, center_j = centerofmass(obj)
  color1 = (mostcolor(I) + 1) % 10
  color2 = (color1 + 1) % 10
  T_shape = {(center_i - 1, center_j - 1), (center_i - 1, center_j), (center_i - 1, center_j + 1), (center_i, center_j), (center_i + 1, center_j)}
  return fill(fill(canvas(mostcolor(I), shape(I)), color1, T_shape), color2, {(center_i + 1, center_j)})
 
24.333333333333332, 16.293165, def fhdhfgabcdaaeadbicfdfdebjddabjci(I):
  obj = first(objects(I, T, T, F)) 
  if obj is None:
    return I
  center_i, center_j = centerofmass(obj)
  T_top = shift({(-1, -1), (-1, 0), (-1, 1)}, (center_i, center_j))
  T_stem = {(i, center_j) for i in range(len(I))}
  O = canvas(0, shape(I))
  O = fill(O, 3, T_top - {(center_i - 1, center_j)})
  O = fill(O, 2, {(center_i - 1, center_j)})
  O = fill(O, 7, T_stem)
  return O
 
12.333333333333334, 12.377497, def fdejbcaeichbejbcbadbfdgdfabcibib(I):
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if val != 0:
        O = canvas(0, shape(I))
        O = fill(O, 3, {(i - 1, j - 1), (i - 1, j + 1)})
        O = fill(O, 2, {(i - 1, j)})
        O = fill(O, 7, {(k, j) for k in range(i, len(I))})
        return O
  return I
 
