0.08333333333333333, 4.532058, def eddicdeihhgaegicbfaadbadaiecbchh(I):
  # Identify the object
  x1 = objects(I, T, F, T)
  obj = first(x1) 

  # Determine shift distance based on object's initial position
  shift_distance = (1, 0) if uppermost(obj) == 0 else (2, 0)

  # Move the object
  O = move(cover(I, obj), obj, shift_distance)
  return O 
 
0.1111111111111111, 26.306627, def bfbbdejchabheicaifcddgbabcdgafea(I):
  # Split into top and bottom halves
  top = tophalf(I)
  bottom = bottomhalf(I)

  # Check for object in top half
  has_object = any(1 in r for r in top) # Assuming '1' forms the object

  # Concatenate based on object presence
  O = vconcat(bottom, top) if has_object else vconcat(top, bottom)
  return O
 
0.08333333333333333, 3.9522214, def aeabdaadddgieicfagedaaaaaabicbbj(I):
  # Identify object indices
  indices = ofcolor(I, 1) # Assuming '1' forms the object

  # Calculate shifted indices
  shifted_indices = shift(indices, (1, 0))

  # Create output grid by selectively filling values
  O = canvas(0, shape(I))
  O = fill(O, 1, shifted_indices) # Fill with '1' at shifted positions
  return O
 
0.1111111111111111, 2.316878, def djdcgghccaeiedfhiiaddghiebibfccf(I):
  h, w = len(I), len(I[0])
  O = list(list(row) for row in I)  # Create a mutable copy

  # Iterate and shift rows down
  for i in range(h - 1, 0, -1):
    for j in range(w):
      if O[i - 1][j] == 1:  # Assuming '1' forms the object
        O[i][j] = O[i - 1][j]
        O[i - 1][j] = 0 

  return tuple(tuple(row) for row in O)  # Convert back to immutable tuples
 
0.1388888888888889, 2.388476, def jaabceacaaeeebieaecffhafaifhaaae(I):
  # Find the non-zero object
  obj = first(objects(I, T, T, T))
  
  # Calculate shift amount based on object's height
  shift_amount = height(obj)
  
  # Shift the object downwards
  shifted_obj = shift(obj, (shift_amount, 0))
  
  # Paint the shifted object onto a blank canvas
  O = paint(canvas(0, shape(I)), shifted_obj)
  return O
 
0.5555555555555556, 4.0555067, def hahdgdceehcbeffcaedfbeijdeaccdeb(I):
    # Directly shift the rows of the input grid
    shifted_rows = I[len(I)-colorcount(I, mostcolor(I)):] + I[:len(I)-colorcount(I, mostcolor(I))]
    O = shifted_rows
    return O
 
0.5555555555555556, 4.7170467, def jbiibcedhjgdegjfahaiefagfbhaceba(I):
  # Identify the top and bottom halves of the grid
  top = I[:len(I)//2]
  bottom = I[len(I)//2:]
  
  # Concatenate the halves in reverse order 
  O = bottom + top
  return O
 
0.16666666666666666, 2.2214394, def bhaaccdcajjbeddbagacdbcejafafjfb(I):
  x1 = objects(I, False, False, True)  # Extract all non-background objects
  x2 = apply(lambda o: (o, lowermost(o)), x1) # Pair each object with its lowermost row index
  x3 = apply(lambda x: (x[0], len(I) - x[1] - 1), x2) # Calculate the number of empty rows below each object
  x4 = apply(lambda x: shift(x[0], (x[1], 0)), x3) # Shift each object downwards
  O = paint(canvas(0, shape(I)), merge(x4)) # Create a blank canvas and paint the shifted objects
  return O 
 
0.33333333333333337, 10.6535425, def bbbaagcgfdefedcbjbfjabgafebeacde(I):
  O = canvas(0, shape(I)) # Start with a blank canvas
  for i in range(height(I) - 1, -1, -1): # Iterate through rows from bottom to top
    for obj in objects(crop(I, (i, 0), (1, width(I))), False, False, True): # Find objects in the current row
      O = paint(O, shift(obj, (i - uppermost(obj), 0))) # Shift and paint the object
  return O
 
0.3333333333333333, 4.2342043, def jebjjiehhfehefibjaaagaifdbdffbda(I):
  O = I 
  for i in range(height(I)-1, 0, -1):
    for j in range(width(I)):
      if index(I, (i, j)) != 0:
        k = i
        while k + 1 < height(I) and index(I, (k + 1, j)) == 0:
          k += 1
        O = paint(cover(O, {(index(O, (i, j)), (i, j))}), {(index(O, (i, j)), (k, j))})
  return O
 
0.1111111111111111, 105.03692, def jeidbabdbgdhecdbaafbjjhbbbiddabh(I):
  # Find all objects in the input grid, ignoring background
  objs = objects(I, T, F, T) 
  # Find the smallest object
  smallest_obj = argmin(objs, size)
  # Extract the color of the smallest object
  color_to_fill = color(smallest_obj) 
  # Create a 1x1 canvas with the extracted color
  O = canvas(color_to_fill, UNITY)  
  return O
 
0.0, 0.0, def hhbcefbehfdbeddijjhebjdecebeccdd(grid):
  objs = objects(grid, univalued=False, diagonal=False, without_bg=False) 
  shifted_objs = frozenset({shift(obj, DOWN) for obj in objs})
  return paint(canvas(mostcolor(grid), shape(grid)), merge(shifted_objs))
 
