3.0, 4.1247015, def jicheiiidafjebbebfedbhcaebhbcbdi(I):
    """
    This program first identifies the background color of the input grid.
    Then, it mirrors the entire grid along the counter-diagonal.
    Finally, it paints the mirrored non-background elements onto a canvas 
    of the original grid's background color, effectively preserving the original background.
    """
    bg = mostcolor(I)
    mirrored = cmirror(I)
    obj = asobject(mirrored)
    O = underpaint(canvas(bg, shape(I)), obj)
    return O
 
6.0, 4.083999, def jcebijcadadcehcdagjheaeacdbbhedj(I):
    """
    This version iterates through each cell of the input grid.
    It calculates the mirrored index for each cell. 
    If the cell is not the background color, it places the cell's value at its mirrored index in the output grid.
    Background cells remain unchanged.
    """
    h, w = len(I), len(I[0])
    O = canvas(mostcolor(I), (h, w))
    for i in range(h):
        for j in range(w):
            if I[i][j] != mostcolor(I):
                O = fill(O, I[i][j], {(j, i)}) 
    return O
 
3.5, 4.7562995, def gbgjfdcabdcceacfjdecheeajaeeegfi(I):
    """
    This program identifies all objects in the grid (excluding background).
    It then mirrors each object individually and paints it onto a blank canvas 
    of the input grid's background color.
    """
    bg = mostcolor(I)
    objs = objects(I, False, True, True)
    mirrored_objs = apply(cmirror, objs)
    O = paint(canvas(bg, shape(I)), merge(mirrored_objs))
    return O 
 
6.0, 4.083999, def ieeffcbchjccehbabidedadabcadjbdf(I):
    O = rot270(I)  # Rotate 90 degrees counterclockwise
    O = hmirror(O)  # Mirror horizontally
    O = replace(O, mostcolor(O), 0)  # Replace background with 0
    return O
 
3.0, 4.1247015, def fcchegcgeidhecccbjdgcabbfedaahec(I):
    O = dmirror(I)  # Mirror diagonally
    O = rot180(O)  # Rotate 180 degrees
    O = replace(O, mostcolor(O), 0)  # Replace background with 0
    return O
 
6.0, 4.662676, def ebcfjiadbbacecfijhjcbbhadfgaeagc(I):
    O = cmirror(rot90(I))  # Rotate 90 degrees clockwise, then mirror along the counterdiagonal 
    O = replace(O, mostcolor(O), 0)  # Replace background with 0
    return O
 
5.5, 9.79048, def caaabdbccjjceaaibdcejicjefjeeagb(I):
    # Rotate the grid 90 degrees counterclockwise
    x1 = rot270(I)
    # Get indices of all digits
    x2 = asindices(x1)
    # Find indices of digit '8'
    x3 = ofcolor(x1, EIGHT)
    # Find indices of digit '1'
    x4 = ofcolor(x1, ONE)
    # Find indices of digit '2'
    x5 = ofcolor(x1, TWO)
    # Combine indices of '1' and '2'
    x6 = combine(x4, x5)
    # Find indices without '8', '1', or '2'
    x7 = difference(x2, combine(x3, x6))
    # Fill those indices with '0'
    x8 = fill(x1, ZERO, x7)
    # Swap '1' and '2' positions
    x9 = fill(x8, ONE, x5)
    O = fill(x9, TWO, x4)
    # Place '8' in the bottom left corner
    O = fill(O, EIGHT, {(2, 0)})
    return O
 
5.5, 5.3615794, def gaedbadfbagcedifbcbaajicccbdjfdg(I):
  # Rotate the grid
  x1 = rot270(I)
  # Create a blank canvas of the same size
  x2 = canvas(ZERO, shape(I))
  # Paint the rotated grid onto the blank canvas
  x3 = paint(x2, asobject(x1))
  # Define the swapping function
  def swap_digits(grid, d1, d2):
    # Find locations of the digits
    x1 = ofcolor(grid, d1)
    x2 = ofcolor(grid, d2)
    # Swap the digits on the grid
    x3 = fill(grid, ZERO, combine(x1, x2))
    x4 = fill(x3, d1, x2)
    return fill(x4, d2, x1)
  # Swap '1' and '2'
  x4 = swap_digits(x3, ONE, TWO)
  # Place '8' at the bottom left
  O = fill(x4, EIGHT, {(2, 0)})
  return O
 
4.5, 5.9342155, def fiadeejdaehdebddjfifcddehcceiidc(I):
  # Define a function to move a digit to a specific location
  def move_digit(grid, digit, loc):
    # Find the digit and cover its original position
    x1 = ofcolor(grid, digit)
    x2 = cover(grid, x1)
    return fill(x2, digit, {loc})  
  # Rotate the grid
  x1 = rot270(I)
  # Move '8' to the bottom left
  x2 = move_digit(x1, EIGHT, (2, 0))
  # Move '1' to the position of '2' after rotation
  x3 = move_digit(x2, ONE, (1, 2))
  # Move '2' to the position of '1' after rotation
  O = move_digit(x3, TWO, (2, 1))
  return O
 
5.0, 6.5894117, def ajafccibfffiejdeiaaefeddgafccbja(I):
  # Define a function to get the new location after rotation and potential swap
  def new_location(i, j):
    new_i, new_j = j, 2 - i
    if I[i][j] == ONE:
      new_i, new_j = 1, 2
    elif I[i][j] == TWO:
      new_i, new_j = 2, 1
    return new_i, new_j
  # Create a blank canvas
  O = canvas(ZERO, shape(I))
  # Iterate through the input grid and place digits on the output grid
  for i in range(len(I)):
    for j in range(len(I[0])):
      new_i, new_j = new_location(i, j)
      O = fill(O, I[i][j], {(new_i, new_j)})
  return O
 
4.5, 5.423292, def heeejfhefjcaebfbajejefacjfahecid(I):
  # Rotate the grid
  x1 = rot270(I)
  # Get object representation of the rotated grid
  x2 = asobject(x1)
  # Define a function to swap cell values based on their original values
  def swap_cells(cell):
    value, (i, j) = cell
    if value == ONE:
      return ONE, (1, 2)
    elif value == TWO:
      return TWO, (2, 1)
    elif value == EIGHT:
      return EIGHT, (2, 0)
    else:
      return value, (i, j)
  # Apply the swap function to each cell in the object representation
  x3 = frozenset(map(swap_cells, x2))
  # Paint the modified object onto a blank canvas
  O = paint(canvas(ZERO, shape(I)), x3)
  return O
 
2.5, 5.2206697, def ebeiedebffeaeebfabbagcafehdeidcd(I):
    tr = (0, len(I[0])-1)
    bl = (len(I)-1, 0)
    tl = (0, 0)
    tc = (0, 1)
    O = paint(
          paint(
            paint(
              canvas(0, shape(I)),
              {(I[tr[0]][tr[1]], bl)}
            ),
            {(I[tl[0]][tl[1]], (bl[0], bl[1]+1))}
          ),
          {(I[tc[0]][tc[1]], (bl[0], bl[1]+2))}
        )
    target = (0, 2)
    for i, r in enumerate(I):
        for j, v in enumerate(r):
            if (i, j) == tr:
                continue
            if (i, j) == tl:
                continue
            if (i, j) == tc:
                continue
            if v == 1:
                O = paint(O, {(v, target)})
            if v == 5 and (i, j) == (1, 0):
                O = paint(O, {(v, target)})
    return O
 
8.0, 4.7734623, def hddfacchbdhiebhdaebdbcjjbifdeaej(I):
    tr = (0, len(I[0])-1)
    O = cover(I, {tr})
    O = paint(O, shift({(I[tr[0]][tr[1]], tr)}, (len(I)-1, -len(I[0])+1)))
    O = paint(O, shift({(I[0][0], (0, 0))}, (1, 0)))
    O = paint(O, shift({(I[0][1], (0, 1))}, (1, 0)))
    if 1 in I[1]:
        O = paint(O, {(1, (0, 2))})
    if 5 in I[1]:
        O = paint(O, {(5, (0, 2))})
    return O
 
2.5, 4.1515656, def dbfdjfdbbdageabbjdbifeajdebggbea(I):
    tr = (0, len(I[0])-1)
    O = replace(I, I[tr[0]][tr[1]], 0)
    O = replace(O, I[0][0], 0)
    O = replace(O, I[0][1], 0)
    O = paint(O, {(I[tr[0]][tr[1]], (len(I)-1, 0))})
    O = paint(O, {(I[0][0], (len(I)-1, 1))})
    O = paint(O, {(I[0][1], (len(I)-1, 2))})
    if 1 in I[1]:
        O = paint(O, {(1, (0, 2))})
    if 5 in I[1]:
        O = paint(O, {(5, (0, 2))})
    return O
 
5.5, 14.399107, def dbfcbcjaeffiedcfbfjdeaheffecadcb(I):
    h, w = len(I), len(I[0])
    O = canvas(0, (h, w))
    for i in range(h):
        for j in range(w):
            if (i, j) == (0, w-1):
                O = paint(O, {(I[i][j], (h-1, 0))})
            elif i == 0 and j in [0, 1]:
                O = paint(O, {(I[i][j], (h-1, j+1))})
            elif (i, j) == (1, 0) and I[i][j] == 5:
                O = paint(O, {(I[i][j], (0, 2))})
            elif (i, j) == (1, 1) and I[i][j] == 1:
                O = paint(O, {(I[i][j], (0, 2))})
            else:
                O = paint(O, {(I[i][j], (i, j))})
    return O
 
2.0, 6.7786527, def ejffcbdjdageeehgaeebdbdddaifhedc(I):
    tr_val = I[0][len(I[0])-1]
    new_row = [I[0][0], I[0][1], 0]
    if 1 in I[1]:
        new_row[2] = 1
    if 5 in I[1]:
        new_row[2] = 5
    O = [(0,)*len(I[0]) for _ in range(len(I))]
    O = [list(row) for row in O]
    O[-1] = [tr_val] + new_row[:-1]
    O = tuple(tuple(row) for row in O)
    return O
 
6.0, 4.2331905, def fbhdaehihaaaeacbbahidcccfcddjcih(I):
  O = rot270(I) if len(palette(I)) > 3 else rot180(I)
  return O
 
0.0, 0.0, def hcaacegfcjadedcdifcfdgdefjhfdbee(I):
  """
  Utilizes a lambda function to map cell indices to their mirrored positions. 
  """
  h, w = shape(I)
  return tuple(
      tuple(
          I[h - 1 - y][w - 1 - x] 
          for x in range(w)
      ) 
      for y in range(h)
  )
 
