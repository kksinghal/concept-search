0.11333333333333334, 10.961756, def gegjfhbhddbgefceibcjhfhifcagfebd(grid):
  obj = toobject(ofcolor(grid, 2), grid)
  moved_obj = shift(obj, (-1, 0))
  return paint(cover(grid, obj), moved_obj) 
 
0.1366666666666667, 11.403262, def iibeegabdgeeeebabeidifcecaefaeed(grid):
  twos = ofcolor(grid, 2)
  return fill(grid, 2, shift(sfilter(twos, lambda loc: (loc[0]-1, loc[1]) in asindices(grid)), (-1, 0)))
 
0.11333333333333334, 7.589099, def hgiifgbfcbgfehfcieecffcahbgeadhh(I):
  # Find the smallest object with the least common color
  target_color = leastcolor(I)
  objs = objects(I, T, F, F)
  target_obj = argmin(colorfilter(objs, target_color), size)
  
  # Find the upper frontier of other objects
  other_objs = difference(objs, {target_obj})
  frontier = mfilter(other_objs, lambda obj: leftmost(obj) <= leftmost(target_obj) <= rightmost(obj))

  # Calculate the upward offset based on the frontier
  offset = (max(uppermost(frontier) - lowermost(target_obj) - 1, -uppermost(target_obj)) if frontier else -uppermost(target_obj), 0)

  # Move the target object
  O = paint(cover(I, target_obj), shift(target_obj, offset))  
  return O
 
0.11333333333333334, 7.61647, def jefdfbceidccedghbabhecgibcdedhdf(I):
  # Find target object (same as Version 1)
  target_color = leastcolor(I)
  objs = objects(I, T, F, F)
  target_obj = argmin(colorfilter(objs, target_color), size)
  
  # Find potential upward path
  path = shoot(ulcorner(target_obj), UP)

  # Find first obstacle in the path
  obstacle = extract(objs, lambda obj: len(intersection(toindices(obj), path)) > 0)

  # Calculate offset based on the obstacle
  offset = (max(uppermost(obstacle) - lowermost(target_obj) - 1, -uppermost(target_obj)) if obstacle else -uppermost(target_obj), 0)

  # Move and paint (same as Version 1)
  O = paint(cover(I, target_obj), shift(target_obj, offset))  
  return O
 
0.12666666666666668, 10.872807, def fedeefdddceaeafajaffbgbhdhaeaiea(I):
  # Find target object (same as Version 1)
  target_color = leastcolor(I)
  objs = objects(I, T, F, F)
  target_obj = argmin(colorfilter(objs, target_color), size)

  # Iteratively move the object upwards until it hits an obstacle
  offset = (0, 0)
  while True:
    new_pos = shift(target_obj, offset)
    if any(adjacent(new_pos, obj) for obj in difference(objs, {target_obj})):
      break
    if uppermost(new_pos) == 0:
      break
    offset = add(offset, UP)

  # Move and paint 
  O = paint(cover(I, target_obj), shift(target_obj, offset))  
  return O
 
0.09999999999999999, 9.144589, def djdhdchdeceaedafbabdjccajdeaggcc(I):
  # Find target object (same as Version 1)
  target_color = leastcolor(I)
  objs = objects(I, T, F, F)
  target_obj = argmin(colorfilter(objs, target_color), size)
  
  # Find the closest object above the target
  above_objs = sfilter(objs, lambda obj: uppermost(obj) < uppermost(target_obj))
  closest_obj =  argmin(above_objs, lambda obj: uppermost(target_obj) - lowermost(obj)) if above_objs else None
  
  # Calculate offset based on the closest object
  offset = (uppermost(closest_obj) - lowermost(target_obj) - 1, 0) if closest_obj else (-uppermost(target_obj), 0)

  # Move and paint (same as Version 1)
  O = paint(cover(I, target_obj), shift(target_obj, offset))  
  return O
 
0.043333333333333335, 4.001884, def fjjbebbaeaebecfaaaeheabbcfideffj(I):
  objs = objects(I, False, False, True) # Extract all objects except background
  moved_objs = set()
  for obj in objs:
    if color(obj) == 2: # Check if object is formed by digit '2'
      obj_size = size(obj) # Get the size of the object
      moved_objs.add(shift(obj, (-obj_size, 0))) # Move the object upwards by its size
    else:
      moved_objs.add(obj) # Keep other objects unchanged
  O = paint(canvas(0, shape(I)), merge(moved_objs)) # Paint the moved objects onto a blank canvas
  return O
 
0.07333333333333333, 8.948547, def bdjiaaidjifaehfeaggaaijcfajebehe(I):
    objs = partition(I) # Partition the grid into objects based on color
    moved_objs = []
    for obj in objs:
        if color(obj) == 2:  # Check if object is formed by digit '2'
            obj_size = len(obj)  # Get the size of the object
            moved_obj = {(v, (i-obj_size, j)) for v, (i, j) in obj}  # Move each cell upwards by the object's size
            moved_objs.append(moved_obj)  # Add the moved object to the list
        else:
            moved_objs.append(obj)  # Keep other objects unchanged
    O = paint(canvas(0, shape(I)), merge(moved_objs))  # Paint the moved objects onto a blank canvas
    return O
 
0.08, 4.3439164, def jbdeccfcfdacefgcigfhcbddcjbaefhi(I):
  objs = fgpartition(I)  # Extract foreground objects
  grid_copy = list(list(row) for row in I) # Create a mutable copy of the grid
  for obj in objs:
    if color(obj) == 2:  # Process only '2'-objects
      obj_size = len(obj)
      for _, (i, j) in obj: # Iterate through each cell of the object
        grid_copy[i][j] = 0 # Clear the original location of the object
        grid_copy[max(0, i-obj_size)][j] = 2 # Paint the object upwards by its size, handling potential out-of-bounds access
  O = tuple(tuple(row) for row in grid_copy) # Convert the modified grid back to immutable tuple
  return O
 
0.11, 10.326496, def gecacfbaaahfebgbiedbibjcbbchcbah(I):
    obj = next(obj for obj in objects(I, False, False, True) if color(obj) == 2)  # Find the first '2' object
    obj_size = size(obj) # Get the size of the '2' object
    occurrences_set = occurrences(I, obj)  # Find all occurrences of the object
    new_occurrences = {add(loc, (-obj_size, 0)) for loc in occurrences_set}  # Calculate new positions
    O = I
    for old_loc in occurrences_set:
        O = cover(O, toobject({old_loc}, I))  # Erase old occurrences
    for new_loc in new_occurrences:
        O = paint(O, toobject({new_loc}, I))  # Draw at new locations
    return O
 
0.04666666666666667, 4.2710524, def iehfdafbccbaejafacaeabbecbdibcea(I):
  two_objs = colorfilter(objects(I, F, F, T), 2) # Extract objects of color 2
  grid = list(list(row) for row in I) # Create a mutable copy of the grid
  for obj in two_objs:
    for v, (i, j) in obj:
      grid[i][j] = 0 # Clear the current position
      grid[max(0, i - size(obj))][j] = v # Move up by the object's size
  O = tuple(tuple(row) for row in grid) # Convert back to an immutable tuple
  return O
 
0.13, 10.954385, def ajaibefhcfcheeedbgbhgfeefebgbhea(I):
  # Find the most common color (background)
  bg_color = mostcolor(I) 
  # Get all objects, excluding the background
  objs = objects(I, T, F, T) 
  # Find the smallest and largest objects
  smallest_obj = argmin(objs, size)
  largest_obj = argmax(objs, size)
  # Get the colors of the smallest and largest objects
  replacee = color(smallest_obj)
  replacer = color(largest_obj)
  # Replace the color of the smallest object with the largest
  O = replace(I, replacee, replacer)  
  return O
 
0.13666666666666666, 23.380346, def fadaedfiejefecdgidjdeacjhhcddaai(I):
  # Get all objects
  objs = objects(I, T, F, F)
  # Sort objects by size
  sorted_objs = order(totuple(objs), size) 
  # Get the color of the second smallest object (smallest non-background)
  replacee = color(sorted_objs[1]) 
  # Get the color of the largest object 
  replacer = color(sorted_objs[-1])
  # Replace the color
  O = replace(I, replacee, replacer)
  return O
 
0.10333333333333333, 9.402317, def ejejdahebcfhebfbbffbefbegbeaaaed(I):
  # Find the smallest object (including background)
  smallest_obj = argmin(objects(I, T, F, F), size)
  # Create a mask by filling the smallest object with a unique value (e.g., 9)
  mask = fill(I, 9, toindices(smallest_obj)) 
  # Find the largest object in the masked grid
  largest_obj = argmax(objects(mask, T, F, F), size)
  # Replace the unique value (9) with the color of the largest object
  O = replace(mask, 9, color(largest_obj))  
  return O
 
0.32, 17.435848, def jeebgfeaaeebebddjccjeedjjbfeibea(I):
    O = tuple(tuple(ZERO if (i, j) in toindices(extract(objects(I, T, F, T), lambda o: color(o) != ZERO)) 
               else (I[i+1][j+1] if 0 <= i+1 < len(I) and 0 <= j+1 < len(I[0]) else ZERO)
               for j in range(len(I[0]))) for i in range(len(I)))
    return O
 
0.17, 11.373731, def bjcaeggbgjfbeffdaibbfjdabdfdfehe(I):
    obj = extract(objects(I, T, F, T), lambda o: color(o) != ZERO)
    O = fill(I, mostcolor(I), toindices(obj))
    for i, j in toindices(obj):
        if 0 <= i+1 < len(I) and 0 <= j+1 < len(I[0]):
            O = fill(O, I[i][j], {(i + 1, j + 1)})
    return O
 
0.11333333333333334, 10.901186, def adhbdgachbaeefegadccediigabicehe(grid):
  # Create a copy of the input grid
  new_grid = [list(row) for row in grid]
  # Iterate through the grid from the second-to-last row upwards
  for i in range(len(grid) - 2, -1, -1):
    for j in range(len(grid[0])):
      # If the current cell contains '2'
      if new_grid[i][j] == 2:
        # Move the '2' one row up
        new_grid[i + 1][j] = 2
        # Replace the original '2' with the background color
        new_grid[i][j] = mostcolor(grid)
  return tuple(tuple(row) for row in new_grid) 
 
0.10333333333333333, 9.402317, def bdbfbbejcceaecciiffjgechabjehead(I):
  target_color = leastcolor(I)
  objs = objects(I, T, F, F)
  target_obj = argmin(colorfilter(objs, target_color), size)
  upper_boundary = min(uppermost(obj) for obj in objs if obj != target_obj) if len(objs) > 1 else 0
  offset = (upper_boundary - lowermost(target_obj) - 1, 0)
  return paint(cover(I, target_obj), shift(target_obj, offset))
 
0.10666666666666667, 9.165546, def cgehedbebajcefaaifhddfeadbaabbbe(I):
  objs = objects(I, T, F, F)
  target_obj = argmin(sfilter(objs, lambda obj: color(obj) == leastcolor(I)), size)
  other_objs = objs - {target_obj}
  closest_obj = argmin(other_objs, lambda obj: uppermost(target_obj) - lowermost(obj)) if other_objs else None
  offset = (uppermost(closest_obj) - lowermost(target_obj) - 1, 0) if closest_obj and uppermost(closest_obj) < uppermost(target_obj) else (-uppermost(target_obj), 0)
  return paint(cover(I, target_obj), shift(target_obj, offset))
 
0.10999999999999999, 8.1143055, def ibefcgdccedgegfhjbbjijhebaeffecd(I):
  target_color = leastcolor(I)
  objs = objects(I, T, F, F)
  target_obj = argmin(colorfilter(objs, target_color), size)
  above_objs = sfilter(objs, lambda obj: uppermost(obj) < uppermost(target_obj))
  above_objs_indices = mfilter(above_objs, toindices)
  closest_point = argmin(above_objs_indices, lambda loc: uppermost(target_obj) - loc[0] if loc else 100)
  offset = (closest_point[0] - lowermost(target_obj) - 1 if closest_point else -uppermost(target_obj), 0) 
  return paint(cover(I, target_obj), shift(target_obj, offset))
 
0.18666666666666665, 11.163579, def cdfcfcdgfbibechcbdicegbffcjcfbde(I):
  # Find all objects excluding background
  objs = objects(I, T, F, T)
  
  # Sort objects by size
  sorted_objs = order(objs, size)

  # Get the smallest and second smallest objects
  smallest_obj = first(sorted_objs)
  second_smallest_obj = first(remove(smallest_obj, sorted_objs))

  # Replace the second smallest object with the color of the smallest
  O = fill(I, color(smallest_obj), toindices(second_smallest_obj))
  return O
 
0.18999999999999997, 11.429962, def fjabefffbegfeffdjhbfiadcfeceajcf(I):
    obj = extract(objects(I, T, F, T), lambda o: color(o) != ZERO)
    shifted_obj = shift(obj, (1, 1)) # Directly use (1, 1) for down-right shift
    O = paint(cover(I, obj), recolor(2, shifted_obj)) # Recolor shifted object to 2
    return O
 
0.36000000000000004, 11.153226, def ibaffbeedigcedddabfehhdbccfdcdbb(I):
  O = I
  for obj in objects(I, T, F, T):
    if color(obj) != ZERO:
      O = paint(cover(O, obj), recolor(2, shift(obj, add(DOWN, RIGHT)))) 
  return O
 
0.09999999999999999, 10.608087, def gjfhcghjfjhdeibbjcghiahaeaeaadaj(grid):
  # Split the grid horizontally into individual rows
  rows = tuple((tuple(row) for row in grid))
  # Identify rows containing '2'
  rows_with_2 = tuple(i for i, row in enumerate(rows) if 2 in row)
  # Create a new grid by shifting relevant rows upward
  new_grid = tuple()
  for i in range(len(rows)):
    if i in rows_with_2 and i > 0:
      new_grid += (rows[i - 1],)
    else:
      new_grid += (rows[i],)
  # If the last row contained '2', append a new row with the background color
  if len(rows) - 1 in rows_with_2:
    new_grid += (tuple((mostcolor(grid),) * len(grid[0])),)
  return new_grid
 
0.35333333333333333, 35.42377, def bhajfbdffcfaebijbafbcbaegcaeajfi(grid):
  # Create a new grid filled with the background color
  new_grid = canvas(mostcolor(grid), shape(grid))
  # Paint all objects except those with color 2 onto the new grid, effectively shifting them down
  new_grid = paint(new_grid, merge(colorfilter(objects(grid, True, False, False), lambda x: x != 2)))
  # Paint the objects with color 2 shifted one row up onto the new grid
  return paint(new_grid, shift(merge(colorfilter(objects(grid, True, False, False), 2)), (-1, 0)))
 
0.1366666666666667, 11.70508, def dfhgjahbceabehffjgcfhcefjgdeeeej(I):
  O = I                   # Initialize output grid as a copy of input
  for obj in objects(I, T, F, F):
    if size(obj) == 1:      # Check if the object is a single cell
      for i, j in dneighbors(first(toindices(obj))): # Iterate through neighbor indices
        if 0 <= i < height(I) and 0 <= j < width(I): # Check for valid grid indices
          O = fill(O, 2, {(i, j)}) # Fill the valid neighbor indices with value '2'
  return O
 
0.13333333333333333, 11.242318, def bfbfdcjahfbfeababafeebdciaabdhaf(I):
  two_objs = colorfilter(objects(I, F, F, T), 2)
  grid = list(list(row) for row in I) 
  for obj in two_objs:
    i_min = min(i for _, (i, _) in obj)
    for v, (i, j) in obj:
      grid[i][j] = I[i][j] if i != i_min else 0
      grid[max(0, i - 2)][j] = v  
  O = tuple(tuple(row) for row in grid) 
  return O
 
0.09999999999999999, 10.905283, def dadechcfcedceddbbecaaahgcdgfgded(I):
    return paint(
        cover(I, ofcolor(I, 2)), 
        shift(recolor(2, ofcolor(I, 2)), (-2, 0))
    )
 
0.37666666666666665, 14.231344, def edcieadjfjbbebdfaffcdaafbffcgbci(I):
  O = I
  for obj in objects(I, T, F, T):
    if color(obj) == 1:  # Only shift objects with color '1'
      O = paint(cover(O, obj), recolor(2, shift(obj, add(DOWN, RIGHT))))
  return O
 
0.31666666666666665, 9.035098, def ceifcacjjccieaaiijdchaehciddddcd(I):
  O = canvas(0, shape(I))  # Start with a blank canvas
  for obj in objects(I, T, F, T):
    if color(obj) == 1:
      O = paint(O, recolor(2, shift(obj, add(DOWN, RIGHT))))  # Paint directly onto the canvas
  return O
 
0.12666666666666668, 10.872807, def acdfbacejcaiedfjjgdfedefcaaccifa(grid):
  # Find indices of all '2's
  twos = ofcolor(grid, 2) 
  # Create a new grid by mapping indices 
  return tuple(
      tuple(
          2 if (i, j) in twos and ((i - 1, j) not in twos or (i == 0)) else grid[i][j] 
          for j in range(len(grid[0]))
      ) 
      for i in range(len(grid))
  )
 
0.3466666666666667, 39.883343, def feggacdcbhddebdaijejeijciiddbced(grid):
  # Create a new grid filled with background color
  new_grid = canvas(mostcolor(grid), (len(grid), len(grid[0])))
  # Iterate through each '2' cell
  for i, j in ofcolor(grid, 2):
    # Calculate new row index, ensuring it stays within bounds
    new_i = max(0, i - sum(1 for k in range(i + 1, len(grid)) if grid[k][j] == 2)) 
    # Paint the '2' at the new location
    new_grid = paint(new_grid, {(2, (new_i, j))})
  return new_grid
 
0.3666666666666667, 38.738155, def decaegaagaaeeaeabceahfaifhhfjjdd(grid):
  # Extract '2' objects
  objs = objects(grid, univalued=True, diagonal=False, without_bg=False)
  two_objs = colorfilter(objs, 2) 
  # Create new grid with background color
  new_grid = canvas(mostcolor(grid), shape(grid)) 
  # Move each '2' object
  for obj in two_objs:
    # Calculate upward shift based on overlapping '2's
    shift_amount = sum(1 for other_obj in two_objs if other_obj != obj and vmatching(obj, other_obj) and uppermost(other_obj) < uppermost(obj))
    # Move the object
    new_grid = paint(new_grid, shift(obj, (-shift_amount, 0)))
  return new_grid
 
0.1366666666666667, 11.656302, def cddbdcdeajjgeebhbbhfedfafhfhgdbh(I):
  target_color = 2  # Define the target color
  objs = objects(I, T, F, F) # Identify all objects in the grid
  target_obj = argmin(colorfilter(objs, target_color), size) # Find the smallest target colored object
  shifted_obj = shift(target_obj, (-1, 0)) # Shift the object upwards by one unit
  O = underpaint(I, shifted_obj) # Paint the shifted object on the grid, only on background cells
  return O
 
0.1366666666666667, 11.403262, def gbdfdbjagfajefagjfdjbbfbafbfheff(I):
  target_cells = {(2, (i-1, j)) for (v, (i, j)) in asobject(I) if v == 2} # Create a set of target cells directly above cells with color '2'
  O = paint(I, target_cells) # Paint the target cells onto the original grid
  return O
 
0.08666666666666667, 7.514062, def iiiejbceddabeecgabgbfebbddjdebgf(I):
  objs = fgpartition(I)  # Extract foreground objects
  grid_copy = list(list(row) for row in I)  # Create a mutable copy of the grid
  h = len(grid_copy)
  for obj in objs:
    if color(obj) == 2:  # Process only '2'-objects
      for _, (i, j) in sorted(obj, key=lambda x: x[1][0], reverse=True):  # Iterate through each cell of the object from bottom to top
        new_i = i - 1
        while new_i >= 0 and grid_copy[new_i][j] == 0:  # Move upwards while encountering background color
          new_i -= 1
        new_i += 1  # Adjust position to be below the non-zero value
        grid_copy[i][j] = 0  # Clear the original location
        grid_copy[new_i][j] = 2  # Paint the object at the new location
  O = tuple(tuple(row) for row in grid_copy)  # Convert the modified grid back to immutable tuple
  return O
 
0.16666666666666666, 20.000832, def ffajgbahhdhdebdjbhjdajfbagcbdddh(I):
  return tuple(
      tuple(
        2 if any(I[k][j] == 2 for k in range(i, len(I))) else I[i][j]
        for j in range(len(I[0]))
      ) 
      for i in range(len(I))
  )
 
0.32, 49.060574, def hbaafadaejdeeibhjjidhfaeeeciedgg(I):
  O = canvas(0, shape(I))  # Create a canvas filled with 0s with the same shape as the input
  for j in range(width(I)):  # Iterate through each column
    k = height(I) - 1  # Start from the bottom row
    while k >= 0:
      if I[k][j] == 2: # If a '2' is encountered
        new_k = k - 1
        while new_k >= 0 and I[new_k][j] == 0:  # Find the position above to place the '2'
          new_k -= 1
        O = fill(O, 2, {(new_k + 1, j)})  # Fill the canvas with '2' at the new position
        k = new_k  # Continue searching for more '2's from the new position
      k -= 1
  return O
 
0.10333333333333333, 5.680668, def eebfcdeaciibejcabadebbijaabdjiai(I):
  objs = sfilter(objects(I, T, F, T), lambda o: size(o) > 1) # Exclude single-cell objects
  smallest_obj = argmin(objs, size)
  remaining_objs = remove(smallest_obj, objs)
  second_smallest_obj = argmin(remaining_objs, size)
  target_center = center(toindices(second_smallest_obj))
  source_center = center(toindices(smallest_obj))
  offset = (target_center[0] - source_center[0], target_center[1] - source_center[1] )
  O = move(I, smallest_obj, offset)
  return O
 
0.12666666666666668, 10.872807, def ccgabffeccbcechcaicbafjhbacaddbh(I):
  objs = sfilter(objects(I, T, F, T), lambda o: size(o) > 1) # Exclude single-cell objects
  smallest_obj = argmin(objs, size)
  remaining_objs = remove(smallest_obj, objs)
  second_smallest_obj = argmin(remaining_objs, size)
  offset = (0, 0)
  temp_obj = smallest_obj
  while not adjacent(temp_obj, second_smallest_obj):
    temp_obj = shift(temp_obj, gravitate(temp_obj, second_smallest_obj))
    offset = add(offset, gravitate(temp_obj, second_smallest_obj))
  O = move(I, smallest_obj, offset) 
  return O
 
0.10333333333333333, 5.697638, def adejjcjdeheaegaabbaddbfaigcacibj(I):
  objs = sfilter(objects(I, T, F, T), lambda o: size(o) > 1) # Exclude single-cell objects
  smallest_obj = argmin(objs, size)
  remaining_objs = remove(smallest_obj, objs)
  second_smallest_obj = argmin(remaining_objs, size)
  target_i = uppermost(second_smallest_obj) + (height(second_smallest_obj)-1) // 2 
  target_j = leftmost(second_smallest_obj) + (width(second_smallest_obj)-1) // 2 
  source_i, source_j = ulcorner(smallest_obj)
  O = move(I, smallest_obj, (target_i - source_i, target_j - source_j))
  return O
 
0.11, 6.2095456, def ddbghecfdgbheabfagbbcddaabgjjiad(I):
  objs = sfilter(objects(I, T, F, T), lambda o: size(o) > 1) # Exclude single-cell objects
  smallest_obj = argmin(objs, size)
  remaining_objs = remove(smallest_obj, objs)
  second_smallest_obj = argmin(remaining_objs, size)
  pattern = subgrid(smallest_obj, I)
  target_area = subgrid(second_smallest_obj, I)
  target_h, target_w = len(target_area), len(target_area[0])
  pattern_h, pattern_w = len(pattern), len(pattern[0])
  offset_i = (target_h - pattern_h) // 2
  offset_j = (target_w - pattern_w) // 2
  O = paint(cover(I, smallest_obj), shift(toobject(asindices(pattern), pattern), (uppermost(second_smallest_obj) + offset_i, leftmost(second_smallest_obj) + offset_j)))
  return O
 
0.13333333333333333, 11.62419, def biahgjacdgebecghaecfjhahfdccabji(I):
  objs = sfilter(objects(I, T, F, T), lambda o: size(o) > 1) # Exclude single-cell objects
  smallest_obj = argmin(objs, size)
  remaining_objs = remove(smallest_obj, objs)
  second_smallest_obj = argmin(remaining_objs, size)
  color1 = color(smallest_obj)
  color2 = color(second_smallest_obj)
  O = paint(fill(I, 0, toindices(second_smallest_obj)), second_smallest_obj)
  O = paint(O, shift(recolor(color2, toindices(smallest_obj)), (uppermost(second_smallest_obj) + (height(second_smallest_obj)-1) // 2, leftmost(second_smallest_obj) + (width(second_smallest_obj)-1) // 2)))
  return O
 
0.11666666666666665, 10.192682, def bjagcbfeahfdehebbaieaebdbbdbefea(I):
  obj = extract(objects(I, T, F, T), lambda o: color(o) == 2)
  shifted_obj = shift(obj, (1, 1))  # Shift down and right
  O = paint(cover(I, obj), shifted_obj)
  return O
 
0.12666666666666668, 10.918428, def adfjbfeciffjecbgjcejfdacdebjccae(I):
  O = I
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if val == 2:
        if i + 1 < height(I) and j + 1 < width(I):
          O = paint(cover(O, {(2, (i, j))}), {(2, (i+1, j+1))})
  return O
 
0.11, 10.523918, def iffgdcgeeddcedfdbfeabecbhibgbbae(I):
  def move_object(obj):
    return shift(obj, (1,1))
  
  objects_to_move = sfilter(objects(I,T,F,T), lambda o: color(o)==2)
  shifted_objects = apply(move_object, objects_to_move)
  O = I
  for obj in objects_to_move:
    O = cover(O, obj)
  for obj in shifted_objects:
    O = paint(O, obj)
  return O
 
0.15, 9.9108095, def ffbbfcdajfgaeaecjdhgfhdeeccddifd(grid):
  twos = ofcolor(grid, 2)  # Get indices of '2's
  new_grid = [list(row) for row in grid]  # Create a mutable grid copy
  for i in range(len(grid) - 1, -1, -1):  # Iterate rows from bottom to top
    for j in range(len(grid[0])):  # Iterate columns
      if (i, j) in twos:  # If the cell contains a '2'
        k = i - 1
        while k >= 0 and (k, j) not in twos:  # Find the position to move up to
          k -= 1
        new_grid[k + 1][j] = 2  # Place the '2' at the target position
        if k + 1 != i:
          new_grid[i][j] = grid[k][j]  # Fill the original position
  return tuple(tuple(row) for row in new_grid)
 
0.37666666666666665, 12.701786, def edccchdefgdceebjbgdhcdbfcfbehbfa(I):
  shifted_grid = canvas(0, shape(I))
  shifted_grid = paint(shifted_grid, shift(recolor(2, ofcolor(I, 2)), (-1, 0)))
  return cellwise(shifted_grid, I, 2) 
 
0.11, 6.003255, def decbecjacebeefjdbbccjdeffbaahafd(I):
  objs = sfilter(objects(I, T, F, T), lambda o: size(o) > 1)
  smallest_obj = argmin(objs, size)
  remaining_objs = remove(smallest_obj, objs)
  second_smallest_obj = argmin(remaining_objs, size)
  target_i = uppermost(second_smallest_obj) + (height(second_smallest_obj) - 1) // 2 - (height(smallest_obj) - 1) // 2
  target_j = leftmost(second_smallest_obj) + (width(second_smallest_obj) - 1) // 2 - (width(smallest_obj) - 1) // 2
  source_i, source_j = ulcorner(smallest_obj)
  O = move(I, smallest_obj, (target_i - source_i, target_j - source_j))
  return O
 
0.13333333333333333, 10.351243, def iabecgedfaaieiccibbfaaedadicacde(I):
  indices_of_2 = ofcolor(I, 2)  # Get indices of all '2's
  shifted_indices = frozenset((i-1, j+1) for i, j in indices_of_2 if i > 0 and j < width(I) - 1) # Shift valid indices
  O = paint(cover(I, recolor(0, indices_of_2)), recolor(2, shifted_indices)) # Paint shifted '2's on a clean grid
  return O
 
0.08, 11.714272, def ccecgcijceahecedjaefafbhdbddcjfa(I):
  objs = objects(I, True, False, False)  # Get all objects
  shifted_objs = frozenset()
  for obj in objs:
    if color(obj) == 2:
      shifted_obj = shift(obj, (-1, 1))
      if all(0 <= i < height(I) and 0 <= j < width(I) for _, (i, j) in shifted_obj):
        shifted_objs = shifted_objs | {shifted_obj}  # Add if within bounds
      else:
        shifted_objs = shifted_objs | {obj} # Add unchanged if out of bounds
    else:
      shifted_objs = shifted_objs | {obj}  # Add other objects unchanged
  O = paint(canvas(0, shape(I)), merge(shifted_objs)) # Paint on a blank canvas
  return O
 
0.11333333333333334, 7.589099, def beiadabcbfghegdaacjcfcaacddfdafj(grid):
  objs = objects(grid, True, False, False)
  target_obj = extract(objs, lambda obj: color(obj) == 2)
  top_row = uppermost(target_obj)
  new_obj = shift(target_obj, (-top_row, 0))
  return paint(cover(grid, target_obj), new_obj) 
 
0.12666666666666668, 12.914509, def hgeijhbdaecdebfdaafbhceadfjhcabf(grid):
  target = ofcolor(grid, 2)
  height_diff = uppermost(target)
  return tuple(
    tuple(
      2 if (i, j) in shift(target, (-height_diff, 0)) else grid[i][j]
      for j in range(len(grid[0]))
    ) for i in range(len(grid))
  )
 
0.1366666666666667, 9.799441, def cgdgcaecebdaegfdjcffhbfedcicacec(grid):
    return paint(
        grid, 
        shift(
            extract(
                objects(grid, True, False, False), 
                lambda obj: color(obj) == 2
            ), 
            (-uppermost(
                extract(
                    objects(grid, True, False, False), 
                    lambda obj: color(obj) == 2
                )
            ), 0)
        )
    )
 
0.10666666666666667, 8.487002, def aeeiegefefhdeaaebgicfbcjcdecbhai(I):
  target_color = 2  # The color of the object to move
  objs = objects(I, T, F, F)
  target_obj = argmin(colorfilter(objs, target_color), size)

  # Find the uppermost non-background cell above the target object
  for i in range(uppermost(target_obj) - 1, -1, -1):
    for j in range(width(I)):
      if I[i][j] != mostcolor(I):
        upper_limit = i + 1
        break
    else:
      continue
    break
  else:
    upper_limit = 0

  # Calculate offset to align with the upper limit
  offset = (upper_limit - lowermost(target_obj), 0) 
  
  # Move and paint the object
  O = paint(cover(I, target_obj), shift(target_obj, offset))
  return O 
 
0.12666666666666668, 11.157919, def bghhccadaibfefhaafgcbecefdeedcci(I):
  target_color = 2 
  objs = objects(I, T, F, F)
  target_obj = argmin(colorfilter(objs, target_color), size)

  # Find the topmost row index containing the target color
  top_row = next((i for i in range(height(I)) if any(I[i][j] == target_color for j in range(width(I)))), 0) 

  # Calculate the offset to move the object to the top row
  offset = (top_row - uppermost(target_obj), 0)  

  # Move and paint the object
  O = paint(cover(I, target_obj), shift(target_obj, offset))
  return O
 
0.06666666666666667, 12.869398, def ebbhbacbcbafedeijafcibibdaibaegc(I):
  target_color = 2
  objs = objects(I, T, F, F)
  
  # Sort objects based on their topmost row index
  sorted_objs = order(objs, uppermost) 
  
  O = I  # Initialize output as the input grid
  
  for i in range(len(sorted_objs)):
    obj = sorted_objs[i]
    if color(obj) == target_color:
      # Find the closest object above the current one
      above_objs = sorted_objs[:i]
      closest_obj =  argmin(above_objs, lambda obj: uppermost(obj) - lowermost(obj)) if above_objs else None

      # Determine the upper limit based on the closest object
      upper_limit = uppermost(closest_obj) - 1 if closest_obj else 0  

      # Calculate offset 
      offset = (upper_limit - lowermost(obj), 0)

      # Move the object 
      O = paint(cover(O, obj), shift(obj, offset))

  return O
 
0.07666666666666666, 14.86162, def gfiieaddchacecbiagidbcdcbffdffcb(I):
  grid = list(list(row) for row in I)
  h, w = len(grid), len(grid[0])
  for j in range(w):
    twos = [(i,v) for i, v in enumerate(grid[i][j] for i in range(h)) if v == 2]  # Find all '2's in the column
    others = [i for i, v in enumerate(grid[i][j] for i in range(h)) if v != 2 and v != 0]  # Find all non-'2' and non-'0' in the column
    if twos:  # If there are any '2's in the column
      top_two = min(twos, key=lambda x: x[0])[0]  # Get the index of the topmost '2'
      if others:
        bottom_other = max(others)  # Get the index of the bottommost non-'2' and non-'0'
        if top_two > bottom_other:
          for i in range(bottom_other+1, top_two+1):
            grid[i][j] = 2  # Fill the space between with '2's
          for i in range(top_two+1, h):
            grid[i][j] = 0  # Clear everything above the topmost '2'
      else:
        for i in range(0, top_two+1):
          grid[i][j] = 2  # If there are no other objects, fill everything above with '2's
        for i in range(top_two+1, h):
          grid[i][j] = 0  # Clear everything above the topmost '2'
  return tuple(tuple(row) for row in grid)
 
0.8633333333333333, 44.8699, def bdgeeiabebgceefbjgahjcjaeadfdchj(I):
    return paint(
        cover(I, ofcolor(I, 2)),  # Erase all '2's
        recolor(
            2,
            mapply(
                lambda j: frozenset(
                    (i, j) for i in range(
                        minimum(
                            combine(
                                {k for k, v in enumerate(I[i][j] for i in range(height(I))) if v == 2},  # Row indices of '2's
                                {k + 1 for k, v in enumerate(I[i][j] for i in range(height(I))) if v != 0 and v != 2}  # Row indices below non-background, non-'2' digits
                            )
                        ),
                        height(I)
                    )
                ),
                interval(0, width(I), 1)  # Iterate over columns
            )
        )
    )
 
0.65, 11.246922, def hhaedbjijiadedgfbedeahgihgjegaei(I):
  def gravity_column(grid, col):
    h = height(grid)
    twos = {i for i in range(h) if grid[i][col] == 2}  # Find indices of '2's
    others = {i for i in range(h) if grid[i][col] != 2 and grid[i][col] != 0}  # Find indices of other objects
    top_two = min(twos) if twos else h  # Find the index of the topmost '2'
    bottom_other = max(others) if others else -1  # Find the index of the bottommost other object
    if top_two > bottom_other:
      grid = fill(grid, 0, {(i, col) for i in range(top_two + 1, h)})  # Clear above
      grid = fill(grid, 2, {(i, col) for i in range(bottom_other + 1, top_two + 1)})  # Fill between
    return grid
  grid = tuple(tuple(row) for row in I)  # Convert to mutable format
  for j in range(width(grid)):
    grid = gravity_column(grid, j)
  return grid
 
0.11333333333333334, 10.961756, def cibjfeejibaieejeajgeeacaaccbffae(I):
    def move_up(grid, color):
        for j in range(width(grid)):  # Iterate through columns
            for i in range(1, height(grid)):  # Iterate through rows from the second row
                if grid[i][j] == color and grid[i - 1][j] == 0:  # If current cell is 'color' and the one above is empty
                    grid = paint(cover(grid, {(i, j)}), recolor(color, {(i - 1, j)}))  # Move 'color' one row up
        return grid
    return move_up(I, 2)  # Apply 'move_up' for color '2'
 
0.08666666666666667, 6.4663577, def edbgefagaeideebajiheccfjbbdbdcab(I):
    def drop_column(grid, col, color):
        column = [grid[i][col] for i in range(height(grid))]
        filtered_column = [v for v in column if v != color]  # Remove all occurrences of 'color'
        # Add 'color' at the bottom to fill the gap
        new_column = [color] * (len(column) - len(filtered_column)) + filtered_column
        return new_column
    new_grid = []
    for j in range(width(I)):
        new_grid.append(drop_column(I, j, 2))
    return tuple(zip(*new_grid))  # Transpose back to the original orientation
 
0.3666666666666667, 38.738155, def eadhaebehfiiecijihdaaecbdcdgdidc(I):
  objs = sfilter(objects(I, T, F, T), lambda o: size(o) > 1) 
  largest_obj = argmax(objs, size) 
  remaining_objs = difference(objs, largest_obj)
  second_largest_obj = argmax(remaining_objs, size)
  v_offset = (uppermost(largest_obj) - lowermost(second_largest_obj) - 1, 0) 
  temp_obj = shift(second_largest_obj, v_offset)
  h_offset = (0, 0)
  if not adjacent(temp_obj, largest_obj): 
    h_offset = (0, leftmost(largest_obj) - leftmost(second_largest_obj))
  total_offset = add(v_offset, h_offset)
  O = move(I, second_largest_obj, total_offset) 
  return O
 
0.08666666666666667, 10.594354, def ccfbjeicefhfeefhjafffbhcccgfchjb(I):
  objs = sfilter(objects(I, T, F, T), lambda o: size(o) > 1)
  largest_obj = argmax(objs, size)
  remaining_objs = remove(largest_obj, objs)
  second_largest_obj = argmax(remaining_objs, size)
  v_diff = uppermost(largest_obj) - lowermost(second_largest_obj) - 1
  h_diff = leftmost(largest_obj) - leftmost(second_largest_obj)
  offset = (v_diff, branch(vmatching(largest_obj, second_largest_obj), 0, h_diff)) 
  O = move(I, second_largest_obj, offset)
  return O
 
0.19000000000000003, 13.965296, def gahdjdaafgadefcfajaibifeeaehfebc(I):
  # Find all '2' cells and create shifted indices
  twos = ofcolor(I, 2)
  shifted = frozenset((i - 1, j + 1) for i, j in twos if i > 0 and j < width(I) - 1)
  
  # Iterate through the grid and build the output grid row by row
  O = tuple(
    tuple(
      2 if (i, j) in shifted else # Shifted '2' takes precedence
      0 if (i + 1, j - 1) in twos else # Original '2' location becomes 0
      I[i][j] # Otherwise keep the original value
      for j in range(width(I))
    )
    for i in range(height(I))
  )
  return O
 
0.37333333333333335, 34.07899, def ahfedbcigegeeaefbgjfbhgcgibdcdbf(I):
  O = canvas(0, shape(I)) # Start with a blank canvas
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if val == 2 and i > 0 and j < width(I) - 1:
        O = paint(O, {(2, (i - 1, j + 1))}) # Paint shifted '2'
  return O
 
0.0, 0.0, def acbebfecdegbeicejfadeeedgddbcfde(grid):
  """
  Uses recursion to move '2's upwards until they hit an obstacle.
  """
  def move_up(g):
    new_grid = g
    for i, row in enumerate(g):
      for j, val in enumerate(row):
        if val == 2 and i > 0 and g[i - 1][j] == 0:
          new_grid = paint(cover(new_grid, {(2, (i, j))}), {(2, (i - 1, j))})
    return new_grid if new_grid == g else move_up(new_grid)
  return move_up(grid)
 
