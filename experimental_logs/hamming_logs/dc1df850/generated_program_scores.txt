0.366875, 12.380336, def fdebhadbcefcedfhaafffajafhhcdhbj(grid):
    objs = objects(grid, True, False, False)
    for obj in objs:
        value = color(obj)
        leftmost_j = leftmost(obj)
        extension_value = 1 if value != 2 else 1
        extension = frozenset(((extension_value, (i, j)) for i, j in product(range(uppermost(obj), lowermost(obj) + 1), range(0, leftmost_j))))
        grid = paint(grid, recolor(extension_value, extension))
    return grid
 
0.36895833333333333, 5.580656, def ibigdjefeccdechabjgaaadcidcdeged(grid):
  for j in range(1, len(grid[0])):
    for i in range(len(grid)):
      if grid[i][j] == 0:
        if j > 0 and grid[i][j-1] != 0:
          grid = paint(grid, {(1 if grid[i][j-1] != 2 else 1, (i, j))})
  return grid
 
0.3125, 15.8405, def cifchaebbcafeaacagbccdagfiabfidd(grid):
    new_grid = tuple(tuple(1 if c == 0 and j > 0 and grid[i][j-1] != 0 else c for j, c in enumerate(r)) for i, r in enumerate(grid))
    return new_grid
 
0.3725, 30.062553, def ichfdaccgfbfefefjfidhaffddejbabg(I):
  # Find the object with value 2
  obj_2 = extract(objects(I, T, T, T), lambda obj: color(obj) == 2)
  # Get the bounding box indices
  bbox = backdrop(toindices(obj_2))
  # Fill the bounding box with 1s
  O = fill(I, 1, bbox)
  return O 
 
0.36104166666666665, 27.341837, def cebahfjiifiaejdgjbdddhbcaejffibh(I):
  # Find the object with value 2
  obj_2 = extract(objects(I, T, T, T), lambda obj: color(obj) == 2)
  # Get upper left and lower right corners
  ul = ulcorner(obj_2)
  lr = lrcorner(obj_2)
  # Create an empty set for the bounding box
  bbox = initset((0, 0))
  # Iterate and add indices to the bounding box
  for i in range(ul[0], lr[0] + 1):
    for j in range(ul[1], lr[1] + 1):
      bbox = insert((i, j), bbox)
  # Fill the bounding box with 1s
  O = fill(I, 1, bbox)
  return O
 
0.254375, 15.76789, def fjdadiceefajefajjdciicejbafdcgcc(I):
    changed = set()
    for i in range(height(I)):
        for j in range(width(I)):
            if index(I, (i, j)) != 0:
                for di, dj in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
                    ni, nj = i + di, j + dj
                    if 0 <= ni < height(I) and 0 <= nj < width(I) and index(I, (ni, nj)) == 0:
                        changed.add((ni, nj))
    return fill(I, 1, frozenset(changed))
 
0.254375, 15.76789, def jjbdcdbbfgaeefadjfdfagcfdddeibjf(I):
    O = I
    for i in range(height(I)):
        for j in range(width(I)):
            if I[i][j] != 0:
                for n in dneighbors((i, j)):
                    if 0 <= n[0] < height(I) and 0 <= n[1] < width(I) and I[n[0]][n[1]] == 0:
                        O = fill(O, 1, {n})
    return O
 
0.4222916666666667, 8.121286, def gccdjjajfddjebegbfcabeedefefbabc(grid):
  h, w = len(grid), len(grid[0])
  for j in range(w - 1, 0, -1): # Iterate columns right to left
    for i in range(h):
      if grid[i][j] != 0:
        k = j + 1
        while k < w and grid[i][k] == 0:
          grid = fill(grid, 1, {(i, k)})
          k += 1
  return grid
 
0.5408333333333334, 10.313644, def dacjhcbfgbbceegbahchdfddheihjhci(grid):
    objs = objects(grid, True, False, True) 
    for obj in objs:
        rightmost_j = rightmost(obj)  # Find the rightmost column of the object
        trail = {(i, j) for i, j in product(range(len(grid)), range(rightmost_j + 1, len(grid[0])))} # Define the trail from the object's right edge to the grid's right edge
        grid = underfill(grid, 1, trail) # Fill the trail on the background
    return grid
 
0.3372916666666666, 29.574934, def cadfeidedhefeahiighfbcidijjgbbfa(grid):
  h, w = height(grid), width(grid)
  new_grid = canvas(0, (h, w))
  for obj in objects(grid, univalued=True, diagonal=False, without_bg=True):
    leftmost_j = leftmost(obj)
    rightmost_j = rightmost(obj)
    color_val = color(obj)
    for i in range(uppermost(obj), lowermost(obj) + 1):
      for j in range(leftmost_j, rightmost_j + 1):
        if (i, j) in toindices(obj) or new_grid[i][j] == 0:
          new_grid = fill(new_grid, color_val, {(i,j)})
        else:
          break
  return new_grid
 
0.4575, 7.526231, def hgdffedfcfgjehegidcdeeffdgcfdhbc(grid):
  h, w = height(grid), width(grid)
  new_grid = canvas(0, (h, w))
  for i in range(h):
    current_color = 0
    for j in range(w):
      if grid[i][j] != 0:
        current_color = grid[i][j]
      if current_color != 0:
        new_grid = fill(new_grid, current_color, {(i,j)})
  return new_grid
 
0.5541666666666667, 15.06444, def bbbiaafefgejebcfjgiddgijaghfebcc(grid):
  return tuple(tuple(next((v for v in row if v != 0), 0) for _ in row) for row in grid)
 
0.34437500000000004, 10.932723, def hccafccaidbcedccidafhbcbidfccbea(I):
  # Find objects with value 2
  objs_2 = sfilter(objects(I, T, T, T), lambda obj: color(obj) == 2)
  # Create an empty set for the bounding box
  bbox = initset((0, 0))
  # Iterate over each object
  for obj in objs_2:
    # Get upper left corner of the object
    ul = ulcorner(obj)
    # Add indices from (0,0) to object's upper left corner
    for i in range(ul[0] + 1):
      for j in range(ul[1] + 1):
        bbox = insert((i, j), bbox)
  # Fill the combined bounding box with 1s
  O = fill(I, 1, bbox)
  return O
 
0.3910416666666667, 30.111214, def eheieadahieiebefbeffdaceeiahdddg(I):
  # Find objects with value 2
  objs_2 = sfilter(objects(I, T, T, T), lambda obj: color(obj) == 2)
  # Map over each object to get its bounding box and merge them
  bbox = mfilter(objs_2, lambda obj: frozenset((i, j) for i in range(ulcorner(obj)[0] + 1) for j in range(ulcorner(obj)[1] + 1)))
  # Fill the combined bounding box with 1s
  O = fill(I, 1, bbox)
  return O
 
0.3329166666666667, 22.040997, def cgggbfhcfgbeeebiicicecjibeadegha(I):
  # Find indices of all '2's in the grid
  indices_2 = ofcolor(I, 2)
  # Find the minimum row and column indices of '2's
  min_i = minimum(frozenset(i for i, j in indices_2))
  min_j = minimum(frozenset(j for i, j in indices_2))
  # Create the bounding box
  bbox = frozenset((i, j) for i in range(min_i + 1) for j in range(min_j + 1))
  # Fill the bounding box with 1s
  O = fill(I, 1, bbox)
  return O
 
0.3485416666666667, 19.843624, def fagfjgahcceaeheejaeffjfchjgjdbei(I):
  # Find the top-leftmost occurrence of '2'
  min_i, min_j = min((i, j) for i, row in enumerate(I) for j, value in enumerate(row) if value == 2)
  # Create the bounding box
  bbox = product(interval(0, min_i + 1, 1), interval(0, min_j + 1, 1))
  # Fill the bounding box with 1s
  O = fill(I, 1, bbox)
  return O
 
0.41687500000000005, 12.845622, def dbaejdggebbaebcdaccdabddcgciaffa(I):
  # Create a mask by checking if each cell's column index is smaller than the minimum column index of '2's
  mask = tuple(tuple(1 if j <= min(j for i, row in enumerate(I) for j, value in enumerate(row) if value == 2) else 0 for j in range(len(I[0]))) for i in range(len(I)))
  # Combine the mask with the original grid, filling with '1' where the mask is '1' and keeping the original value otherwise.
  O = tuple(tuple(1 if mask[i][j] == 1 else I[i][j] for j in range(len(I[0]))) for i in range(len(I)))
  return O
 
0.3372916666666666, 29.574934, def fjebefgdcghbeidjjchiaadbagjdddbd(I):
  objs = objects(I, T, F, T)  # Identify objects, no diagonals, exclude background
  def expand_object(obj):
    if len(obj) == 1:
      return obj
    else:
      first_cell = first(obj)
      last_cell = last(obj)
      return obj | frozenset((1, (i, first_cell[1][1])) for i in range(first_cell[1][0], last_cell[1][0]))
  expanded_objs = apply(expand_object, objs)
  O = paint(I, merge(expanded_objs))  # Paint expanded cells onto original grid
  return O
 
0.320625, 18.367826, def bfecdfcgehbeedddiiaeecejidgcdffa(I):
  O = I
  for i, row in enumerate(I):
    for j in range(1, width(I)):
      if row[j] != 0 and row[j-1] == 0:
        O = fill(O, 1, {(i, j - 1)})
  return O
 
0.41479166666666667, 30.534386, def faejecajfffhebhcbdccecacaibjeaaf(I):
    objs = objects(I, T, F, T)  # Identify objects, no diagonals, exclude background
    def expand_obj(obj):
        min_j = leftmost(obj)
        max_j = rightmost(obj)
        return frozenset((1, (i, j)) for (v, (i, _)) in obj for j in range(min_j, max_j + 1))
    expanded_objs = apply(expand_obj, objs)
    O = paint(I, merge(expanded_objs))
    return O
 
0.35479166666666667, 11.030743, def ccbecaabhhdaebicjfdacfgddchedcce(grid):
  h, w = len(grid), len(grid[0])
  new_grid = []
  for i in range(h):
    row = list(grid[i])
    for j in range(w - 1, -1, -1):
      if row[j] != 0:
        fill_value = 1
        if row[j] == 2:
          for k in range(j + 1, min(j + 2, w)):
            row[k] = fill_value
        else:
          for k in range(j + 1, w):
            row[k] = fill_value
        break
    new_grid.append(tuple(row))
  return tuple(new_grid)
 
0.4402083333333333, 18.064503, def hihcadbfcgeieafbaeeeeajbigffaejg(grid):
  return tuple(
    tuple(
      1 if any(c != 0 for c in r[j:]) and (r[j] != 0 or (j > 0 and r[j - 1] != 2)) 
      else 0 
      for j in range(len(r))
    ) for r in grid
  )
 
0.49500000000000005, 16.692766, def bfbaicafahggeebeagdhacdaabgdhjie(grid):
  return tuple(
    tuple(
      1 if j >= len(r) - r[::-1].index(next((x for x in r[::-1] if x != 0), 0)) and (r[j] != 0 or (j > 0 and r[j - 1] != 2)) 
      else 0 
      for j in range(len(r))
    ) for r in grid
  )
 
0.44645833333333335, 9.29239, def chfhjgbhdiedejagadeaideiiefadfif(grid):
  h, w = height(grid), width(grid)
  new_grid = canvas(0, (h, w))
  for i in range(h):
    for j in range(w):
      if grid[i][j] != 0:
        new_grid = fill(new_grid, 1, connect((i,j), (i,w-1)))
        break 
  return new_grid
 
0.24020833333333336, 8.27516, def cfdcefbdfafjedfgagbfafediffiacgb(I):
  O = I
  for i, row in enumerate(I):
    for j, value in enumerate(row):
      if value == 2:
        for x in range(i, min(i + 2, len(I))):
          for y in range(j, min(j + 2, len(row))):
            O = fill(O, 1, {(x, y)})
  return O
 
0.17666666666666667, 8.379366, def dffgdbdahaffecejjddfhhcaegbbedcd(I):
    changed = set()
    for i in range(height(I)):
        for j in range(width(I)):
            if index(I, (i, j)) != 0:  # If cell is part of an object
                for di in range(-1, 2):
                    for dj in range(-1, 2):
                        ni, nj = i + di, j + dj
                        if 0 <= ni < height(I) and 0 <= nj < width(I) and index(I, (ni, nj)) == 0:
                            changed.add((ni, nj))
    return fill(I, 1, frozenset(changed))
 
0.4327083333333334, 10.0926695, def bdgcbjfhdbebeccfaedcbjabbeabbeja(I):
    combined_objects = merge(objects(I, T, F, T))
    expansion_area = delta(toindices(combined_objects))
    return fill(I, 1, frozenset((i, j) for i, j in expansion_area if 0 <= i < height(I) and 0 <= j < width(I) and index(I, (i, j)) == 0))
 
0.17666666666666667, 8.379366, def ccdceiagdffbeceebbcjdjjficiccbib(I):
  new_grid = canvas(mostcolor(I), shape(I))
  for i in range(len(I)):
    for j in range(len(I[0])):
      if I[i][j] != mostcolor(I):
        for x in range(max(0, i-1), min(len(I), i+2)):
          for y in range(max(0, j-1), min(len(I[0]), j+2)):
            new_grid = fill(new_grid, 1, ((x, y),))
        new_grid = fill(new_grid, I[i][j], ((i, j),))
  return new_grid
 
0.614375, 26.39642, def dcbdbhcegdbceigcjfdcefdhbhhbfbab(grid):
  h, w = len(grid), len(grid[0])
  for i in range(h):
    for j in range(w):
      if grid[i][j] != mostcommon(grid): # If cell is not background
        grid = fill(grid, 1, product({i}, range(j+1, w))) # Horizontal trail
        if i == h - 1:
          grid = fill(grid, 1, product(range(i+1, h), {j})) # Vertical trail
  return grid
 
0.3372916666666666, 29.574934, def eaeibchbfddbeiahjjaagedhcgacedhc(grid):
  for j in range(len(grid[0])-1, 0, -1): # Iterate columns right-to-left
    for i in range(len(grid)):
      if grid[i][j] == 1: # If a '1' is found
        grid = fill(grid, 1, {(i, k) for k in range(j, len(grid[0]))}) # Fill rightwards from that point
  for i in range(len(grid)-1, 0, -1): # Iterate rows bottom-to-top
    if grid[i][0] == 1: # If a '1' is found on the left edge
      grid = fill(grid, 1, {(k, 0) for k in range(i, len(grid))}) # Fill downwards from that point
  return grid 
 
0.6627083333333333, 45.656876, def bdeecdegfccieiejijabfbebedjcbcef(grid):
    h, w = len(grid), len(grid[0])
    def extend_trail(i, j):
        return frozenset((i, k) for k in range(j, w)) 
    trails = [extend_trail(i, j) for i in range(h) for j in range(w) if grid[i][j] != mostcommon(grid)] 
    return paint(grid, recolor(1, merge(trails)))
 
0.254375, 15.76789, def fiifbcgfiaecebagjbcdbceieadebbbe(grid):
  objs = objects(grid, univalued=False, diagonal=False, without_bg=True)
  filled_grid = grid
  for obj in objs:
    for v, (i, j) in obj:
      filled_grid = fill(filled_grid, 1, dneighbors((i, j)))
  return filled_grid
 
0.43166666666666664, 10.313829, def hbcffahcdadjefccagacgchefjgiejeg(grid):
  h, w = len(grid), len(grid[0])
  new_grid = list(list(row) for row in grid)
  for i in range(h):
    for j in range(w):
      if grid[i][j] != 0:
        for k in range(i, h):
          if j+1 < w:
            new_grid[k][j+1] = 1
        for k in range(j, w):
          if i+1 < h:
            new_grid[i+1][k] = 1
  return tuple(tuple(row) for row in new_grid)
 
0.5852083333333333, 28.788082, def dbfgfgbdafffefbjifadgadiefjaegdb(grid):
  new_grid = canvas(1, shape(grid))
  for i, row in enumerate(grid):
    for j, val in enumerate(row):
      if val != 0:
        new_grid = fill(new_grid, val, {(i, j)})
  return new_grid
 
0.6627083333333333, 45.656876, def hfbcbfbgahjhecbbbfebiccbeaejiceg(I):
  objs = objects(I, T, T, T)
  twos = sfilter(objs, lambda obj: color(obj) == 2)
  for two in twos:
    start_i, start_j = ulcorner(two)
    end_i, end_j = lrcorner(two)
    while start_i > 0 and index(I, (start_i - 1, start_j)) == 0:
      start_i -= 1
    while end_i < len(I) - 1 and index(I, (end_i + 1, start_j)) == 0:
      end_i += 1
    while start_j > 0 and index(I, (start_i, start_j - 1)) == 0:
      start_j -= 1
    while end_j < len(I[0]) - 1 and index(I, (start_i, end_j + 1)) == 0:
      end_j += 1
    I = fill(I, 1, frozenset((i, j) for i in range(start_i, end_i + 1) for j in range(start_j, end_j + 1)))
  return I
 
0.6389583333333334, 38.644352, def cdhjaafdebcbehcaiiifhadjhcefddfe(I):
  twos = ofcolor(I, 2)
  expansion_area = set()
  for i, j in twos:
    queue = [(i, j)]
    visited = {(i, j)}
    while queue:
      current = queue.pop(0)
      expansion_area.add(current)
      for neighbor in dneighbors(current):
        ni, nj = neighbor
        if 0 <= ni < len(I) and 0 <= nj < len(I[0]) and (ni, nj) not in visited and I[ni][nj] == 0:
          queue.append((ni, nj))
          visited.add((ni, nj))
  return fill(I, 1, frozenset(expansion_area))
 
0.284375, 9.016298, def aafhcefgigeaefcgbficdbdiaefcdfgd(I):
  new_grid = canvas(mostcolor(I), shape(I))
  for i in range(len(I)):
    for j in range(len(I[0])):
      if I[i][j] != mostcolor(I):
        for x,y in {(i-1, j), (i, j-1), (i, j+1)}:
          if 0 <= x < len(I) and 0 <= y < len(I[0]):
            new_grid = underfill(new_grid, 1, ((x,y),))
        new_grid = fill(new_grid, I[i][j], ((i, j),))
  return new_grid
 
0.45, 12.050011, def aaeajffecjceedfdjjicdfhhbfecacbi(grid):
  bg = mostcolor(grid)  # Identify the background color
  objs = objects(grid, False, False, True) # Extract non-background objects
  for obj in objs:
    for direction in [(0, 1), (1, 0)]:  # Check horizontal and vertical directions
      shifted_obj = obj
      for _ in range(max(height(grid), width(grid))):  # Extend until collision
        next_shifted_obj = shift(shifted_obj, direction)
        if any(index(grid, loc) != bg for loc in toindices(next_shifted_obj)):
          break  # Stop extending if collision detected
        shifted_obj = next_shifted_obj
      grid = paint(grid, shifted_obj) # Paint the extended object
  return grid
 
0.41479166666666667, 45.959766, def aebacbjaedjcedffjbfcededfichfahf(grid):
  bg = mostcolor(grid)
  new_grid = canvas(bg, shape(grid))  # Create a new grid filled with background color
  for i, j in asindices(grid):
    if grid[i][j] != bg:
      extensions = [(i, k) for k in range(j, width(grid))] + [(k, j) for k in range(i, height(grid))]
      for ei, ej in extensions:
        if grid[ei][ej] != bg:
          break
        new_grid = paint(new_grid, {(grid[i][j], (ei, ej))}) # Paint on the new grid
  return new_grid
 
0.470625, 13.426194, def heddacfghgjiecbcjeachbbcahjecdjf(I):
    objs = objects(I, T, T, T)
    bbox = initset((0, 0))
    for obj in objs:
      ul = ulcorner(obj)
      for i in range(ul[0] + 1):
        for j in range(ul[1] + 1):
          bbox = insert((i, j), bbox)
    O = fill(I, 1, bbox)
    return O
 
0.25958333333333333, 11.028936, def baagfffadfadefabbdbdfhfgdfidccdi(I):
    bg = mostcolor(I) 
    expanded_cells = set()
    for obj in objects(I, True, False, True): # Get non-background objects
        for cell in toindices(obj):
            expanded_cells.update((i, j) for i, j in ineighbors(cell) if 0 <= i < height(I) and 0 <= j < width(I))
    return fill(I, 1, frozenset(expanded_cells & ofcolor(I, bg))) # Intersection with background cells
 
0.4245833333333333, 12.490649, def jdafgddbdgbfeiecihdbedfdfdbbbbeb(grid):
  bg = mostcolor(grid)
  new_grid = canvas(bg, shape(grid)) # Create a new grid filled with background color
  for i, j in asindices(grid):
    if grid[i][j] != bg:
      new_grid = paint(new_grid, {(grid[i][j], (i, j))}) # Keep original digit
      for k in range(j+1, width(grid)): # Extend tail rightwards
        if grid[i][k] != bg: 
          break
        new_grid = paint(new_grid, {(1, (i, k))})
      for k in range(i+1, height(grid)): # Extend tail downwards
        if grid[k][j] != bg:
          break
        new_grid = paint(new_grid, {(1, (k, j))})
  return new_grid
 
0.45479166666666665, 6.2232146, def bjbhabibgiceefchidhdjbjegcaccbhg(grid):
  h, w = len(grid), len(grid[0])
  for i in range(h):
    for j in range(w):
      if grid[i][j] != mostcolor(grid):
        grid = paint(grid, {(grid[i][j], (i, j))}) # Keep original digit
        for k in range(j + 1, w): # Extend tail rightwards
          if grid[i][k] != mostcolor(grid):
            break
          grid = fill(grid, 1, {(i, k)})
        for k in range(i + 1, h): # Extend tail downwards
          if grid[k][j] != mostcolor(grid):
            break
          grid = fill(grid, 1, {(k, j)})
  return grid
 
0.4297916666666666, 12.185947, def haeigcgcdjahededijcfbhjjhbabebbb(grid):
  bg = mostcolor(grid)
  h, w = height(grid), width(grid)
  new_grid = canvas(bg, (h, w))
  for i, row in enumerate(grid):
    for j, val in enumerate(row):
      if val != bg:
        new_grid = paint(new_grid, {(val, (i, j))})  # Keep original digit
        new_grid = paint(new_grid, recolor(1, connect((i, j + 1), (i, w - 1)))) # Rightward tail
        new_grid = paint(new_grid, recolor(1, connect((i + 1, j), (h - 1, j)))) # Downward tail
  return new_grid
 
0.4245833333333333, 12.490649, def eaabdhdfeciiedbfibfjgdeafjaababj(grid):
  h, w = height(grid), width(grid)
  painted = canvas(0, (h, w))
  for i in range(h):
    for j in range(w):
      if grid[i][j] != 0:
        painted = paint(painted, recolor(1, shoot((i, j), RIGHT)))
        painted = paint(painted, recolor(1, shoot((i, j), DOWN)))
        painted = paint(painted, {(grid[i][j], (i, j))}) 
  return painted 
 
0.41479166666666667, 30.534386, def ehhdebdfdejeedddbffeffaiifdffhcc(I):
  objs = objects(I, T, F, T)
  for obj in objs:
    I = fill(I, 1, box(obj))
  return I 
 
0.2825, 6.5205145, def cjifcfbaafdieecdaadhbfccfeccidhd(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  border = set()
  for obj in objs:
    for v, (i, j) in obj:
      border.update({(i+1, j), (i, j+1)})
  return fill(I, 1, border & asindices(I))
 
0.6608333333333333, 40.846493, def ccbbbaefcfieejieifabdgiaccdijdge(I):
  for i in range(height(I)):
    for j in range(width(I)):
      if index(I, (i, j)) != mostcommon(I):
        I = fill(I, 1, {(i+1, j), (i, j+1)} & asindices(I))
  return I
 
0.5020833333333333, 7.407456, def afbbefbdhhbjehecbiedjhhiccadbeac(grid):
  bg = mostcolor(grid)
  return paint(
      fill(grid, bg, asindices(grid)), 
      merge(
        frozenset({
            recolor(1, connect((i, j), (i, width(grid) - 1))) for i, j in asindices(grid) if grid[i][j] != bg
          } | {
            recolor(1, connect((i, j), (height(grid) - 1, j))) for i, j in asindices(grid) if grid[i][j] != bg
          })
      )
  )
 
0.41479166666666667, 30.534386, def feheeejicgjheaabiefdbbdaaedhfggg(grid):
  bg = mostcolor(grid)
  return paint(
      canvas(bg, shape(grid)),  
      merge(
          apply(
              lambda obj: recolor(1, backdrop(obj) & asindices(grid)),
              objects(grid, univalued=False, diagonal=False, without_bg=True)
          )
      )
  )
 
0.5020833333333333, 7.407456, def fbegiiiddahbeeafbeeaecfbhfgabddd(grid):
  h, w = height(grid), width(grid)
  new_grid = canvas(0, (h, w))
  for i, row in enumerate(grid):
    for j, val in enumerate(row):
      if val != 0:
        new_grid = paint(new_grid, {(val, (i, j))})  # Paint the original value
        new_grid = fill(new_grid, 1, connect((i, j), (i, w - 1))) # Horizontal Line
        new_grid = fill(new_grid, 1, connect((i, j), (h - 1, j))) # Vertical Line
  return new_grid
 
0.5335416666666667, 8.805395, def dedcigfibbffeedabfddhgjdedacefce(grid):
  h, w = height(grid), width(grid)
  new_grid = canvas(0, (h, w))
  indices = asindices(grid)
  non_zero_indices = sfilter(indices, lambda loc: grid[loc[0]][loc[1]] != 0)
  for i, j in non_zero_indices:
    new_grid = paint(new_grid, {(grid[i][j], (i, j))})
    new_grid = fill(new_grid, 1, hfrontier((i, j)))
    new_grid = fill(new_grid, 1, vfrontier((i, j)))
  return new_grid
 
0.36895833333333333, 5.580656, def aaeciehfciabeeaibbcddgahgdjefbad(I):
  objs = objects(I, T, F, T)
  expansion = set()
  for obj in objs:
    for i in range(uppermost(obj), lowermost(obj) + 1):
      for j in range(leftmost(obj), len(I[0])):
        if (i, j) not in toindices(obj):
          expansion.add((i, j))
  return fill(I, 1, frozenset(expansion))
 
0.60875, 24.057253, def cdcdccfdfefaebjfjgfgegdfahadcgcb(I):
  return paint(I, merge(apply(lambda obj: recolor(1, difference(
      frozenset((i, j) for i in range(len(I)) for j in range(leftmost(obj), len(I[0]))),
      toindices(obj))), objects(I, T, F, T))))
 
0.5247916666666667, 11.30804, def dcfehjcdahhhefgbbhaeajfdiifegajb(grid):
  h, w = height(grid), width(grid)
  new_grid = canvas(0, (h, w))
  for i, row in enumerate(grid):
    for j, val in enumerate(row):
      if val != 0:
        new_grid = paint(fill(new_grid, 1, product(range(i, h), range(j, w))), {(val, (i, j))})
  return new_grid
 
0.7174999999999999, 13.708659, def faijaeeefeaaeeffbefacgecddcdjife(I):
  shifted_down = paint(canvas(1, shape(I)), merge(apply(lambda o: shift(o, DOWN), objects(I, True, False, True))))
  shifted_right = paint(canvas(1, shape(I)), merge(apply(lambda o: shift(o, RIGHT), objects(I, True, False, True))))
  return cellwise(I,  cellwise(shifted_down, shifted_right, 0), 1)
 
0.30104166666666665, 7.526435, def acdcfiabdedaecaiabdfeeciaifdfgdc(I):
  def right_border(obj):
    return {(v, (i, j + 1)) for v, (i, j) in obj if j + 1 < width(I) and I[i][j+1] == 0}

  def top_border(obj):
    return {(v, (i - 1, j)) for v, (i, j) in obj if i - 1 >= 0 and I[i-1][j] == 0}

  O = I
  for obj in objects(I, univalued=False, diagonal=True, without_bg=True):
    O = fill(O, 1, right_border(obj) | top_border(obj))
  return O
 
0.39395833333333335, 11.9754715, def bcjcjccibfcaeifaibgdbgaiabeiddbd(grid):
  objs = objects(grid, univalued=True, diagonal=False, without_bg=True) # identify objects
  for obj in objs:
    color_val = color(obj)
    if color_val == 2: # identify the '2' object
      upper_left = ulcorner(obj)
      grid = fill(grid, 1, {(upper_left[0], j) for j in range(len(grid[0]))}) # horizontal fill
      grid = fill(grid, 1, {(i, upper_left[1]) for i in range(len(grid))}) # vertical fill
  return grid
 
0.38125000000000003, 6.9956164, def dafeecdejfbeejajjcchgacdfcibhafj(grid):
  two_indices = next((i, j) for i, r in enumerate(grid) for j, v in enumerate(r) if v == 2)
  grid = fill(grid, 1, {(two_indices[0], j) for j in range(len(grid[0]))}) # Horizontal
  grid = fill(grid, 1, {(i, two_indices[1]) for i in range(len(grid))}) # Vertical
  return grid
 
0.41479166666666667, 45.959766, def decahccfhddaebccafegeacbibjdbice(grid):
  objs = objects(grid, univalued=True, diagonal=False, without_bg=True)
  new_grid = canvas(1, shape(grid))  
  for obj in objs:
    new_grid = cellwise(new_grid, paint(canvas(0, shape(grid)), obj), 0)
  return new_grid
 
0.5852083333333333, 28.788082, def cbfbgegfbadeehhcjcefefddgbbhdjej(I):
  objs = objects(I, True, False, True)
  expanded_objects = apply(lambda o: toobject(backdrop(toindices(o)), I), objs)
  return paint(fill(I, 1, asindices(I)), merge(expanded_objects)) 
 
0.36895833333333333, 5.580656, def dcfjecbfcajfeaefiacjaiacgdcabfda(I):
  def trail_indices(i, j):
    if I[i][j] != 0:
      return frozenset((i, k) for k in range(j + 1, width(I)) if I[i][k] == 0)
    return frozenset()
  indices = merge(prapply(trail_indices, range(height(I)), range(width(I))))
  return fill(I, 1, indices)
 
0.36104166666666665, 17.677322, def ahbbbdfjghaheabdjjdbjajbiahdcjjj(I):
  def extend_right(obj):
    return frozenset((color(obj), (i, j + 1)) for v, (i, j) in obj if j + 1 < width(I) and I[i][j + 1] == 0)
  objs = objects(I, univalued=True, diagonal=False, without_bg=False)
  return paint(I, merge(apply(extend_right, objs)))
 
0.4760416666666667, 12.668884, def ecjaccddheeeebbcbddbhbbdifaififb(grid):
  objs = objects(grid, univalued=True, diagonal=False, without_bg=True) 
  new_grid = canvas(0, shape(grid))
  for obj in objs:
    for (i, j) in toindices(obj):
      new_grid = fill(new_grid, grid[i][j], {(i,j)})
    for (i,j) in box(obj):
      new_grid = fill(new_grid, 1, hfrontier((i, j))) 
  return new_grid
 
0.36895833333333333, 5.580656, def agcaececacajefdajcfbjfgcggiiefdb(grid):
  new_grid = canvas(0, shape(grid))
  for i in range(height(grid)):
    for j in range(width(grid)):
      if grid[i][j] != 0:
        new_grid = fill(new_grid, 1, box({(i, j)})) 
        for k in range(j, width(grid)):
          new_grid = fill(new_grid, 1, {(i, k)})
        new_grid = fill(new_grid, grid[i][j], {(i,j)}) 
  return new_grid
 
0.3133333333333333, 19.287441, def cadabgheigjiegdjbhdaedcgdiehabai(I):
  # Find the smallest non-zero index
  min_index = argmin(asindices(I), lambda ij: (ij[0] * 100 + ij[1]) if I[ij[0]][ij[1]] != 0 else 10000)
  # Create a bounding box around the smallest non-zero index
  bbox = product(interval(0, min_index[0] + 1, 1), interval(0, min_index[1] + 1, 1))
  # Fill the bounding box with 1s, preserving the original non-zero digit
  O = underfill(I, 1, bbox)
  return O
 
0.44604166666666667, 40.13169, def chcbfdjdagegeafbjbcbjbiefacdhceh(I):
  # Find the index of the first non-zero digit in a flattened grid
  flat_index = next((i for i, v in enumerate(e for r in I for e in r) if v != 0), None)
  if flat_index is None:
    return I
  # Calculate row and column from the flat index
  row = flat_index // len(I[0])
  col = flat_index % len(I[0])
  # Fill with 1s up to the found row and column
  O = fill(canvas(0, shape(I)), 1, product(interval(0, row + 1, 1), interval(0, col + 1, 1)))
  # Combine the filled grid with the original grid, prioritizing the original values
  return cellwise(I, O, lambda a, b: a)
 
0.4610416666666666, 33.62211, def iehfjecbfcaeecjejieajfajbdiagbgb(I):
  # Transpose the grid
  transposed = dmirror(I)
  # Find the index of the first non-zero digit in the transposed grid
  index = next(((i, j) for i, row in enumerate(transposed) for j, val in enumerate(row) if val != 0), None)
  if index is None:
    return I
  # Fill the transposed grid up to the found index
  filled_transposed = fill(transposed, 1, product(interval(0, index[0] + 1, 1), interval(0, index[1] + 1, 1)))
  # Transpose back to the original orientation
  O = dmirror(filled_transposed)
  # Combine the filled grid with the original, prioritizing original values
  return cellwise(I, O, lambda a, b: a)
 
0.30104166666666665, 7.526435, def abbhaiaedeciechdbddbhggceabbhjef(I):
  bg = mostcolor(I)
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  extension = set()
  for obj in objs:
    for i, j in toindices(obj):
      for di, dj in [(-1, 0), (0, 1)]:  # Check up and right
        ni, nj = i + di, j + dj
        if 0 <= ni < height(I) and 0 <= nj < width(I) and index(I, (ni, nj)) == bg:
          extension.add((ni, nj))
  return fill(I, 1, frozenset(extension))
 
0.41479166666666667, 45.959766, def didadafcdccbededibfcejdchdbfaaed(I):
  return paint(canvas(0, shape(I)), 
               mapply(lambda loc: recolor(1, 
                                          sfilter(dneighbors(loc), 
                                                  lambda nloc: index(I, nloc) == 0)), 
                      ofcolor(I, 1)))
 
0.331875, 10.208593, def fdehjcfceffaebffbeadaideebiaadad(I):
    J = canvas(0, shape(I))
    for i, j in asindices(I):
        if I[i][j] != 0:
            for di, dj in [(0,1),(0,-1),(1,0),(-1,0)]:
                ni, nj = i + di, j + dj
                if 0 <= ni < height(I) and 0 <= nj < width(I) and I[ni][nj] == 0:
                    J = fill(J, 1, ((ni, nj),))
    return J
 
0.3372916666666666, 29.574934, def cedcjcggfhcfegeeadeaddaccfbjfccc(I):
    return paint(I,
                 recolor(1, 
                         difference(
                             mapply(
                                 lambda loc: dneighbors(loc), 
                                 asindices(I)), 
                             asindices(I))))
 
0.213125, 6.0770817, def aejdadebfibeehaebdhffeagejcbdbdf(grid):
  objs = objects(grid, univalued=True, diagonal=False, without_bg=True)
  for obj in objs:
    if color(obj) == 2:
      for v, (i, j) in obj:
        grid = fill(grid, 1, {(i,j), (i-1,j), (i+1,j), (i,j-1), (i,j+1)})
  return grid
 
0.3372916666666666, 29.574934, def dedaadbabbddedfiibdebhedbfeidbge(I):
  O = canvas(0, shape(I))
  for i, row in enumerate(I):
    start = next((j for j, v in enumerate(row) if v != 0), len(row))
    O = paint(O, recolor(1, frozenset((i, j) for j in range(start))))
    for j in range(width(I)-1, -1, -1):
      if row[j] != 0:
        O = paint(O, recolor(1, frozenset((i, k) for k in range(j))))
  return paint(O, asobject(I))
 
0.4760416666666667, 12.668884, def jejijbbcacddeajaaebffbjcgfcdagia(I):
  O = I
  for i in range(height(I)):
    for j in range(width(I)):
      if index(I, (i, j)) != 0:
        O = paint(O, recolor(1, connect((i,0), (i,j))))
        break
    for j in range(width(I)-1, -1, -1):
      if index(I, (i, j)) != 0:
        O = paint(O, recolor(1, connect((i,j), (i, width(I)-1))))
        break
  return O
 
0.38729166666666665, 28.927607, def iehfbhabfehcejefaahcbbdcbbfhdbah(I):
  h, w = len(I), len(I[0])
  bg = mostcolor(I)
  visited = set()
  queue = {(0, w-1)}  # Start from the top-right corner
  while queue:
    i, j = queue.pop()
    visited.add((i, j))
    if 0 <= i < h and 0 <= j < w and I[i][j] == bg:
      I = fill(I, 1, {(i, j)})
      queue.update({(i+1, j), (i-1, j), (i, j+1), (i, j-1)})
  return I
 
0.33395833333333336, 15.553512, def haechffcibbaeaediaabahegcbcaccdb(I):
  h, w = len(I), len(I[0])
  bg = mostcolor(I)
  for j in range(w - 1, -1, -1):
    if I[0][j] != bg:
      break
    for i in range(h):
      if I[i][j] != bg:
        break
      I = fill(I, 1, {(i, j)})
  return I
 
0.5535416666666667, 6.492742, def aaifedhbfhedeejdacfchcafiicghcba(I):
  h, w = len(I), len(I[0])
  bg = mostcolor(I)
  fill_indices = set()
  for i in range(h):
    for j in range(w):
      if (i, j) not in fill_indices:
        if I[i][j] != bg:
          break
        fill_indices.add((i, j))
  return fill(I, 1, fill_indices)
 
0.254375, 15.76789, def edbeabcebcifecjbaafhbggaiacecgdd(I):
  """
  Iterates through the grid, filling a border around non-background digits.
  """
  J = canvas(mostcolor(I), shape(I)) 
  for i, j in asindices(I):
    if I[i][j] != mostcolor(I):
      for di, dj in [(0,1),(0,-1),(1,0),(-1,0)]:
        ni, nj = i + di, j + dj
        if 0 <= ni < height(I) and 0 <= nj < width(I) and J[ni][nj] == mostcolor(I):
          J = fill(J, 1, ((ni, nj),))
      J = fill(J, I[i][j], ((i, j),)) 
  return J
 
0.2972916666666667, 16.259026, def gcjigdigafaaefeibbbjdcfdedhefefa(grid):
  h, w = len(grid), len(grid[0])
  for i in range(h):
    for j in range(w):
      if grid[i][j] == 2:
        for k in range(j + 1, min(j + grid[i][j] + 1, w)):
          grid = fill(grid, 1, {(i, k)})
  return grid
 
0.30250000000000005, 16.248077, def bdcfdaddhgeaebcjbdbcdbjecafchebg(grid):
  for i, row in enumerate(grid):
    for j, value in enumerate(row):
      if value == 2:
        grid = fill(grid, 1, connect((i, j + 1), (i, min(j + value, len(row) - 1))))
  return grid
 
0.6439583333333333, 29.457298, def jhjfcacfdghaeadebbfcadadaicdched(I):
  O = I
  min_j = width(I)
  for row in I:
    for j, v in enumerate(row):
      if v != 0:
        min_j = min(min_j, j)
  O = paint(O, recolor(1, frozenset((i, j) for i in range(height(I)) for j in range(min_j, width(I)))))
  return O
 
0.36000000000000004, 7.0602984, def cgjeejgaedbheiaajjhdfebfijiieiae(I):
  h, w = shape(I)
  bg = mostcolor(I)
  fill_area = set()
  for obj in objects(I, True, False, True):
    fill_area.update(toindices(obj))
    fill_area.update(toindices(shift(obj, DOWN)))
    fill_area.update(toindices(shift(obj, RIGHT)))
  return fill(I, 1, fill_area & asindices(I))
 
0.4245833333333333, 12.490649, def eafbaaafbiegehdeagcffffibaccabff(I):
  h, w = len(I), len(I[0])
  bg = mostcolor(I)
  fill_area = set()
  for obj in objects(I, True, False, True):
    for i, j in toindices(obj):
      fill_area.update((i + k, j) for k in range(1, h - i)) # Downward frontier
      fill_area.update((i, j + k) for k in range(1, w - j)) # Rightward frontier
  return fill(I, 1, frozenset(fill_area) & asindices(I))
 
0.37833333333333335, 12.489847, def cjecjceigjjbefjajibcbdhhadcbebgc(I):
  O = canvas(mostcolor(I), shape(I))
  for obj in objects(I, univalued=False, diagonal=True, without_bg=True):
    right_border = {(v, (i, j + k)) for v, (i, j) in obj for k in range(1, width(I) - j) if index(I, (i, j + k)) == mostcolor(I)}
    top_border = {(v, (i - k, j)) for v, (i, j) in obj for k in range(1, i + 1) if index(I, (i - k, j)) == mostcolor(I)}
    O = paint(O, obj)
    O = fill(O, 1, right_border | top_border)
  return O
 
0.5125000000000001, 14.104491, def fbdefjecabjheefbafdegaddbebiiada(I):
  O = canvas(mostcolor(I), shape(I))
  for x in range(len(I)):
    for y in range(len(I[0])):
      if I[x][y] != mostcolor(I):
        O = paint(O, {(I[x][y], (x, y))})
        right_border = {(I[x][y], (x, k)) for k in range(y + 1, len(I[0])) if I[x][k] == mostcolor(I)}
        top_border = {(I[x][y], (k, y)) for k in range(x - 1, -1, -1) if I[k][y] == mostcolor(I)}
        O = paint(O, right_border | top_border)
  return O
 
0.38375000000000004, 10.715107, def cagbhdjbeiffeafaiedeiefdeadieeed(I):
  """
  Creates a border around non-background digits, extending horizontally.
  """
  J = canvas(mostcolor(I), shape(I))
  for i, row in enumerate(I):
    for j, v in enumerate(row):
      if v != mostcolor(I):
        J = fill(J, v, ((i, j),))
        # Horizontal Extension
        for dj in [-1, 1]:
          nj = j + dj
          while 0 <= nj < width(I) and I[i][nj] == mostcolor(I):
            J = fill(J, 1, ((i, nj),))
            nj += dj
        # Vertical Limitation (single cell border)
        for di in [-1, 1]:
          ni = i + di
          if 0 <= ni < height(I):
            J = fill(J, 1, ((ni, j),))
  return J
 
0.2541666666666667, 9.878739, def hfffaghdeedbeeghidcdihdfabbdfbia(I):
  """
  Applies a convolution-like approach to find border cells.
  """
  def check_neighborhood(grid, i, j):
    for di in [-1, 0, 1]:
      for dj in [-1, 0, 1]:
        ni, nj = i + di, j + dj
        if 0 <= ni < height(grid) and 0 <= nj < width(grid) and grid[ni][nj] != mostcolor(grid):
          return 1
    return mostcolor(grid)

  J = canvas(mostcolor(I), shape(I))
  for i, row in enumerate(I):
    for j, v in enumerate(row):
      J = fill(J, check_neighborhood(I, i, j), ((i, j),))
  return J
 
0.3372916666666666, 29.574934, def beefchedbfdaedeajffbfaehjccadadh(grid):
  return paint(
           fill(grid, 1, 
                mapply(lambda loc: neighbors(loc), 
                       ofcolor(grid, 2))), 
           asobject(grid))
 
0.0, 0.0, def dhfcefdajbfbeaecifcadhbfagjefaie(grid):
  return paint(
           grid, 
           merge(apply(lambda obj: recolor(1, 
                                         mapply(neighbors, 
                                               toindices(obj))), 
                      colorfilter(objects(grid, T, T, T), 2))))
 
