0.09666666666666668, 36.08922, def hbfegfjdgfcfejdjbebcaecffhaaeafc(I):
  objs = objects(I, T, F, F) 
  O = I
  for obj in objs:
    start_j = leftmost(obj)
    end_j = rightmost(obj)
    for j in range(start_j, end_j):
      O = fill(O, color(obj), {(uppermost(obj), j)})
  return O
 
0.19333333333333336, 12.081479, def iejbhehbedfaebediacdeedbdbdcdfjg(I):
  O = I
  for i in range(len(I)):
    current_color = None
    for j in range(len(I[0])):
      if I[i][j] != mostcolor(I):
        current_color = I[i][j]
      if current_color is not None:
        O = fill(O, current_color, {(i, j)})
  return O
 
0.09666666666666668, 36.08922, def dfbbbfhhaehaejjdaaceeeabgchdcgie(I):
  objs = objects(I, T, F, T)
  O = I
  for obj in objs:
    for i in range(height(I)):
      row_obj = frozenset({(v, (i, j)) for v, (k, j) in obj if k == i})
      if len(row_obj) > 0:
        max_j = rightmost(row_obj)
        O = paint(O, frozenset({(color(obj), (i, j)) for j in range(leftmost(row_obj), max_j + 1) if (i, j) in backdrop(obj) or index(I, (i, j)) == color(obj)}))
  return O
 
0.09666666666666668, 36.08922, def cajiidgfjeihecjfjgbacjbbfgdbffbf(I):
  objs = objects(I, False, True, True)
  O = I
  for obj in objs:
    indices = toindices(obj)
    hull = mpapply(lambda a, b: connect(a, b), totuple(indices), totuple(indices))
    recolored_hull = recolor(color(obj), hull)
    O = paint(O, recolored_hull)
  return O
 
0.09666666666666668, 36.08922, def eehgefbdgaieedecaibfhfdfabdfejab(I):
  bg = mostcolor(I)
  objs = objects(I, T, F, T)
  largest_obj = argmax(objs, size)
  other_cells = difference(asindices(I), toindices(largest_obj))
  connections = mfilter(prapply(connect, toindices(largest_obj), other_cells), lambda l: vline(l) or hline(l))
  O = underfill(I, bg, connections)
  return O
 
0.12666666666666668, 43.58371, def ebbcfaiaciaaedgdaaddgceihgeieehc(I):
  bg = mostcolor(I)
  objs = objects(I, T, F, T)
  largest_obj = argmax(objs, size)
  connected = paint(canvas(bg, shape(I)), largest_obj)
  for obj in objs - {largest_obj}:
    for cell in toindices(obj):
      connected = paint(connected, {(bg, cell)})
      if vmatching(toindices(largest_obj), {cell}) or hmatching(toindices(largest_obj), {cell}):
        connected = paint(connected, obj)
        break
  O = connected
  return O
 
0.11, 39.55727, def bddccgefhhieecgjifecdiibaiifagcb(I):
    bg = mostcolor(I)
    objs = objects(I, T, F, T)
    largest = argmax(objs, size)
    O = I
    for obj in objs:
        if obj != largest:
            for (v, (i, j)) in obj:
                if any(abs(i - k) <= 1 or abs(j - l) <= 1 for (k, l) in toindices(largest)):
                    O = paint(O, recolor(bg, obj))
                    break
    return O
 
0.09666666666666668, 36.08922, def beafafabdcdjeehebjdfdacdgajcbdcd(I):
  objs = objects(I, True, False, True)
  color_val = color(first(objs))
  filled_indices = mpapply(lambda o1, o2: connect(center(o1), center(o2)), objs, objs)
  O = paint(I, recolor(color_val, filled_indices))
  return O
 
0.05333333333333334, 16.30333, def ifeeeafjhbdjebfbabdbbjaedhabefcf(I):
  color_val = leastcolor(I)
  connected_cells = set()
  for i in range(height(I)):
    row_indices = [(i, j) for j in range(width(I)) if index(I, (i, j)) == color_val]
    if row_indices:
      connected_cells.update(connect(row_indices[0], row_indices[-1]))
  O = paint(I, recolor(color_val, frozenset(connected_cells)))
  return O
 
0.14333333333333334, 7.63199, def efhahfebdejbedcdiccceafbaicefabf(I):
    O = I
    for j in range(len(I[0])):
        for i in range(len(I)):
            if I[i][j] != mostcolor(I):
                connected_cells = connect((i, j), (len(I)-1, j))
                O = fill(O, I[i][j], connected_cells)
    return O
 
0.19333333333333336, 12.081479, def cdehfeegbhdbehacbedefibgicgacife(I):
  O = I
  for i in range(height(I)):
    for j in range(width(I)):
      if index(I, (i, j)) != mostcolor(I):
        O = paint(O, {(index(I, (i, j)), (i, k)) for k in range(j, width(I))})
  return O
 
0.16333333333333333, 8.5176115, def hcaabjgcacccecejacafadbjeabcffei(I):
  O = canvas(mostcolor(I), shape(I))
  for j in range(width(I)):
    for i in range(height(I)):
      if index(I, (i, j)) != mostcolor(I):
        O = paint(O, {(index(I, (i, j)), (i, k)) for k in range(j, width(I))})
        break
  return O
 
0.05333333333333334, 16.30333, def cfafafaabdbaeaebiedhafebcfigeejc(I):
  O = I
  for i, row in enumerate(I):
    nonzero_indices = [j for j, v in enumerate(row) if v != 0]
    if len(nonzero_indices) > 1:
      start, end = min(nonzero_indices), max(nonzero_indices) + 1
      O = fill(O, row[start], frozenset((i, j) for j in range(start, end)))
  return O
 
0.10666666666666667, 38.088203, def cfhddaccgaedebgcibefbbahfecfcegd(I):
  c = mostcolor(I)
  o = objects(I, T, F, T)
  l = argmax(o, size)
  O = paint(I, recolor(c, box(toindices(l))))
  return O
 
0.0, 140.16405, def fgcifaiibcagegfeahijafgfhagaigbc(I):
  c = mostcolor(I)
  o = objects(I, T, F, T)
  l = argmax(o, size)
  u = ulcorner(toindices(l))
  d = lrcorner(toindices(l))
  O = canvas(c, (d[0]-u[0]+1, d[1]-u[1]+1))
  return O
 
0.043333333333333335, 12.819089, def cfchdhjgdgieeeajjagdgaigiecidceb(I):
  O = I
  for j in range(len(I[0])): # Iterate over columns
    non_bg_indices = [i for i in range(len(I)) if I[i][j] != mostcolor(I)] # Find non-background indices in the column
    if non_bg_indices:
      start = non_bg_indices[0]
      end = non_bg_indices[-1]
      O = fill(O, I[start][j], connect((start, j), (end, j))) # Connect the first and last non-background indices
  return O 
 
0.12, 17.773367, def dhicjejbdfcdeafbbbchafgehecdbadg(I):
  O = I
  for obj in fgpartition(I): # Get all objects without background
    j = leftmost(obj) # Get the column of the object
    O = fill(O, color(obj), connect((uppermost(obj),j), (lowermost(obj),j))) # Connect the top and bottom of the object vertically
  return O
 
0.043333333333333335, 12.819089, def bgagfedadcjcebibjjegeghecbbcagcf(I):
  O = canvas(ZERO, shape(I)) # Initialize output grid
  for j in range(width(I)):
    column = frozenset((i, j) for i in range(height(I)))
    column_obj = toobject(column, I)
    non_zero_colors = palette(column_obj) - {ZERO}
    for color in non_zero_colors:
      color_indices = ofcolor(I, color) & column
      line = connect((uppermost(color_indices), j), (lowermost(color_indices), j))
      recolored_line = recolor(color, line)
      O = paint(O, recolored_line)
  return O
 
0.14333333333333334, 7.63199, def dbhaeifefagbecjgibbhgijdjdjhiead(I):
  O = I
  for j in range(width(I)):
    column_indices = frozenset((i, j) for i in range(height(I)))
    for i in range(height(I)):
      if index(I, (i, j)) != ZERO:
        connected_line = connect((i, j), (lowermost(column_indices), j))
        O = underfill(O, index(I, (i, j)), connected_line) 
  return O
 
0.15, 12.086329, def acbgjedcdjhbebffbfbdbdcbbdeaaeid(I):
  color_val = leastcolor(I)
  main_obj = argmax(objects(I, True, False, True), size)
  connection_lines = frozenset(connect((i, j), (uppermost(main_obj), j)) for i, j in asindices(I) if index(I, (i, j)) == color_val and not contained((i, j), toindices(main_obj)))
  O = paint(I, recolor(color_val, merge(connection_lines)))
  return O
 
0.15333333333333332, 25.892862, def ddabefcbhgeaeaadjfbaafjeaebbhjha(I):
  objs = objects(I, False, False, True)
  lines = frozenset({connect((i, j), (i, len(I[0]) - 1)) for obj in objs for i, j in toindices(obj)})
  O = canvas(mostcolor(I), shape(I))
  for line in lines:
    i, j = first(line)
    O = fill(O, I[i][j], line)
  return O
 
0.23666666666666666, 6.782374, def jcfdaeeccjbjebfejececehaaeehdedj(I):
  O = I
  for i in range(height(I)):
    for j in range(width(I) - 1, -1, -1):
      if index(I, (i, j)) != mostcolor(I):
        O = fill(O, index(I, (i, j)), {(i, k) for k in range(j, width(I))})
        break
  return O
 
0.21, 11.151281, def heeiacgabifeefhcicdijddaibcbdchf(I):
  bg = mostcolor(I)
  objs = partition(I)
  O = I
  for obj in objs:
    if color(obj) != bg:
      O = paint(O, recolor(color(obj), box(obj)))
  return O
 
0.10999999999999999, 40.522144, def dfbfcahjhgfjejagijcjfcafiddabhaj(I):
  objs = objects(I, T, F, F)  # Extract objects from the input grid
  O = I                      # Initialize output as a copy of input
  for obj in objs:
    left = leftmost(obj)    # Leftmost column index of the object
    right = rightmost(obj)   # Rightmost column index of the object
    for j in range(left, right + 1): # Iterate over columns within the boundaries
      O = fill(O, color(obj), connect((uppermost(obj), j), (lowermost(obj), j)))  # Fill vertically
  return O
 
0.05333333333333334, 16.30333, def chbjegibcdieebchafdefhcidcfdjgef(I):
  O = I
  for i in range(height(I)):
    row = I[i]
    if 8 in row:
      start = row.index(8)
      end = len(row) - 1 - row[::-1].index(8)
      O = fill(O, 8, product({i}, interval(start, end + 1, 1)))
  return O
 
0.14666666666666667, 52.976562, def ccabejbifgcdebecicfagdahefheahbb(I):
  bg = mostcolor(I)
  objs = objects(I, T, F, T)
  filled = canvas(bg, shape(I))
  for obj in objs:
    for i in range(1, len(obj)):
      filled = paint(filled, connect(toindices(first(obj)), toindices(last(obj))))
  O = filled
  return O
 
0.21999999999999997, 10.1207075, def deccjcgcbdfeebfbbaefcfbcebcdabed(I):
  bg = mostcolor(I)
  obj = toobject(ofcolor(I, other(palette(I), bg)), I)
  O = paint(canvas(bg, shape(I)), recolor(other(palette(I), bg), box(toindices(obj))))
  return O
 
0.05333333333333334, 16.30333, def aeeaeeaaejdfeeahjgahjcibcgaeadaf(I):
  O = canvas(mostcolor(I), shape(I))
  for i in range(len(I)):
    for j in range(len(I[0])):
      if I[i][j] != mostcolor(I):
        left = min(k for k in range(len(I[0])) if I[i][k] == I[i][j])
        right = max(k for k in range(len(I[0])) if I[i][k] == I[i][j])
        O = fill(O, I[i][j], connect((i, left), (i, right)))
  return O
 
0.21666666666666667, 17.189762, def fdfcigegaaageibfidicahdifajjafea(I):
  O = I
  w = width(I)
  for j in range(w):   # Iterate over columns
    column = {I[i][j] for i in range(height(I))}  # Get unique digits in the column
    for d in column:
      if d != mostcommon(I):  # Ignore background digit
        O = fill(O, d, connect((uppermost(ofcolor(I, d)), j), (lowermost(ofcolor(I, d)), j)))
  return O
 
0.14666666666666667, 52.976562, def acabcbfcaabbebchibdfiebcfcegcgcj(I):
  O = I
  for j in range(width(I)):       # Iterate over columns
    indices = [(i, j) for i in range(height(I)) if I[i][j] != mostcommon(I)]  # Find non-background indices
    if indices:
      top = min(indices, key=lambda x: x[0])[0]  # Find uppermost row
      bottom = max(indices, key=lambda x: x[0])[0] # Find lowermost row
      O = fill(O, I[top][j], connect((top, j), (bottom, j)))  # Connect and fill
  return O
 
0.13, 10.763781, def ebdjcdageadaecfabcfcfbbdfbfdiffi(I):
  O = I
  for obj in objects(I, True, False, True):  # For each object
    v = color(obj)  # Get object color
    j = leftmost(obj)  # Get object's column
    max_i = lowermost(obj)  # Get the row of the lowermost occurrence
    connected_line = connect((max_i, j), (uppermost(ofcolor(I, v)), j))  # Connect from the lowermost to the uppermost occurrence
    O = paint(O, recolor(v, connected_line))  # Paint the connection
  return O 
 
0.13, 6.860557, def djccdbediffcedebifeajbbaciaeabij(I):
  O = I
  for j in range(width(I)):
    for i in range(height(I)):
      v = I[i][j]
      if v != ZERO:  # For each non-zero cell
        bottom_i = lowermost(ofcolor(I, v))  # Find the row of the lowermost occurrence of that color
        if i == bottom_i:  # If the cell is the lowermost occurrence, skip
          continue
        connected_line = connect((i, j), (bottom_i, j))  # Connect to the lowermost occurrence
        O = paint(O, recolor(v, connected_line))  # Paint the connection
  return O
 
0.45, 26.157162, def gchdadbbcjbiecaeaedcjccchdeaideg(I):
  O = I
  for i in range(height(I)):
    for j in range(width(I)):
      if I[i][j] != mostcolor(I):
        for direction in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
          ni, nj = i + direction[0], j + direction[1]
          while 0 <= ni < height(I) and 0 <= nj < width(I) and I[ni][nj] == mostcolor(I):
            O = paint(O, {(I[i][j], (ni, nj))})
            ni, nj = ni + direction[0], nj + direction[1]
  return O
 
0.16666666666666666, 6.3975453, def babbedbdjbgaeibdjidghcebbbggaicc(I):
  O = I
  for i in range(height(I)):
    for j in range(width(I)):
      if index(I, (i, j)) != mostcolor(I):
        right_limit = width(I)
        for k in range(i + 1, height(I)):
          if index(I, (k, j)) != mostcolor(I):
            right_limit = min(right_limit, j + 1)
        O = fill(O, index(I, (i, j)), {(i, l) for l in range(j, right_limit)})
  return O
 
0.15, 6.477104, def ibhchiafajgdejaeiegfefbagadaffej(I):
  O = canvas(mostcolor(I), shape(I))
  for j in range(width(I)):
    right_limit = width(I)
    for i in range(height(I)):
      if index(I, (i, j)) != mostcolor(I):
        O = fill(O, index(I, (i, j)), {(i, l) for l in range(j, right_limit)})
        right_limit = min(right_limit, j + 1)
  return O
 
0.14333333333333334, 7.63199, def acdabegacdgfecdbbbdhgfjhccidddfc(I):
  O = I
  for j in range(width(I)):
    extension_color = mostcolor(I)
    for i in range(height(I)):
      if index(I, (i, j)) != mostcolor(I) and extension_color == mostcolor(I):
        extension_color = index(I, (i, j))
      elif extension_color != mostcolor(I):
        O = fill(O, extension_color, {(i, j)})
    extension_color = mostcolor(I)
  return O
 
0.13666666666666666, 48.12479, def bdfhdbjhbeeceefgjihfagdbhefcaeaa(I):
  bg = mostcolor(I)
  objs = objects(I, True, False, True)
  largest = argmax(objs, size)
  O = paint(canvas(bg, shape(I)), largest)  # Paint the largest object on an empty canvas
  for i in range(height(O)):
    for j in range(width(O) - 1):
      if index(O, (i, j)) != bg and index(O, (i, j + 1)) == bg:
        O = underfill(O, bg, {(i, k) for k in range(j + 1, width(O))})  # Connect to the right
        break
  return O
 
0.45, 26.157162, def cdbgfaaadbfbedcbjcidcgcfaefadecg(I):
  target_color = leastcolor(I)
  connected_indices = set()
  for i, j in asindices(I):
    if index(I, (i, j)) == target_color:
      connected_indices.update(connect((i, j), (i, 0)))
      connected_indices.update(connect((i, j), (i, width(I) - 1)))
      connected_indices.update(connect((i, j), (0, j)))
      connected_indices.update(connect((i, j), (height(I) - 1, j)))
  O = paint(I, recolor(target_color, frozenset(connected_indices)))
  return O
 
0.16, 29.54273, def cgaifcdfhedaeccdidgceefaghedaaei(I):
  O = I
  for i in range(height(I)):
    for j in range(width(I)):
      if I[i][j] != mostcommon(I):
        # Extend horizontally
        O = fill(O, I[i][j], hfrontier((i,j)))
        # Extend vertically
        O = fill(O, I[i][j], vfrontier((i,j)))
  return O
 
0.43, 26.925896, def jababdfhgeciechfjebbhjcdcaiefdee(I):
  O = I
  for obj in objects(I, True, False, False):
    # Extend in all directions
    for direction in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
      start = centerofmass(obj)
      O = fill(O, color(obj), shoot(start, direction))
  return O
 
0.17666666666666667, 9.367571, def fbddcbdcbaicebefadafiadafiacgbda(I):
  O = I
  for obj in objects(I, False, False, True):
    i, j = ulcorner(obj)
    for k in range(j + 1, width(I)):
      if index(I, (i, k)) != mostcolor(I):
        break
      O = fill(O, color(obj), {(i, l) for l in range(j, k)})
  return O
 
0.24333333333333332, 7.0822673, def ebbcfabgfecdeefeafaeeieagbjbefbd(I):
  O = canvas(mostcolor(I), shape(I))
  for i in range(height(I)):
    j = 0
    while j < width(I):
      if index(I, (i, j)) != mostcolor(I):
        O = paint(O, {(index(I, (i, j)), (i, k)) for k in range(j, width(I)) if index(I, (i, k)) == mostcolor(I)})
        j = width(I) # Exit inner loop after painting
      else:
        j += 1
  return O
 
0.17, 8.016433, def ecehjjjgbbagedifibfaghfjccjfecef(I):
  O = I
  for i in range(height(I)):
    current_color = mostcolor(I)
    for j in range(width(I)):
      if index(O, (i, j)) != mostcolor(I) and current_color == mostcolor(I):
        current_color = index(O, (i, j))
      elif current_color != mostcolor(I) and index(O, (i, j)) == mostcolor(I):
        O = fill(O, current_color, {(i, j)})
      else:
        current_color = mostcolor(I)
  return O
 
0.06666666666666667, 18.046988, def gbdgebiefadaeffbjfgdccghicbchfda(I):
  O = canvas(ZERO, shape(I))  # Initialize output grid
  for j in range(width(I)):  # Iterate over columns
    indices = frozenset((i, j) for i in range(height(I)))  # Get all indices of the current column
    for v in palette(I) - {ZERO}:  # Iterate over non-zero colors
      column_indices = toindices(recolor(v, intersection(indices, ofcolor(I, v))))  # Get indices of the color in the column
      if len(column_indices) > 1:  # If there are at least two occurrences
        first_i = uppermost(column_indices)  # Get the row index of the topmost occurrence
        last_i = lowermost(column_indices)  # Get the row index of the bottommost occurrence
        line = connect((first_i, j), (last_i, j))  # Connect the two occurrences
        O = paint(O, recolor(v, line))  # Paint the connection on the output grid
  return O
 
0.14666666666666667, 52.976562, def fccdigeecjbeedfejgagbcccceacgcie(I):
  O = canvas(ZERO, shape(I))  # Initialize output grid
  for j in range(width(I)):  # Iterate over columns
    column = (I[i][j] for i in range(height(I)))  # Get all values in the current column
    colors = set(column) - {ZERO}  # Get unique non-zero colors in the column
    for v in colors:
      occurrences = [i for i, val in enumerate(column) if val == v]  # Get row indices of color occurrences
      if len(occurrences) > 1:  # If there are at least two occurrences
        line = connect((occurrences[0], j), (occurrences[-1], j))  # Connect the first and last occurrences
        O = paint(O, recolor(v, line))  # Paint the connection
  return O
 
0.11666666666666665, 40.789875, def ecajadbahfbeebhdjcdbfbajbiagbebh(I):
  c = mostcolor(I)  # Find the most common color
  o = objects(I, T, F, T)  # Get all objects
  l = argmax(o, size) # Find the largest object
  u = ulcorner(toindices(l)) # Upper-left corner of the largest object
  d = lrcorner(toindices(l)) # Lower-right corner of the largest object
  
  # Find other cells with the same color
  same_color_cells = ofcolor(I, c) - toindices(l)
  
  # Connect to same color cells if horizontally or vertically aligned
  connections = mfilter(
      prapply(connect, toindices(l), same_color_cells), 
      lambda l: vline(l) or hline(l)
  )
  
  return fill(I, c, connections)  # Fill the connected cells
 
0.19333333333333336, 8.602685, def hehgcgbdaeaeebefbgeabfiicdgddeeh(I):
  bg = mostcolor(I)
  objs = objects(I, T, F, T)
  largest_obj = argmax(objs, size)
  
  # Get coordinates of cells in the largest object
  obj_indices = toindices(largest_obj)
  
  # Find rows and columns containing the largest object
  rows = {i for i, _ in obj_indices}
  cols = {j for _, j in obj_indices}

  # Fill entire rows and columns containing the largest object 
  # with its color
  O = I
  for i in range(len(I)):
    for j in range(len(I[0])):
      if i in rows or j in cols:
        O = fill(O, color(largest_obj), {(i, j)}) 

  return O
 
0.19333333333333336, 8.602685, def dfifbejjciegeidebebjfgcadbjiidac(I):
  target_color = leastcolor(I)
  main_obj = argmax(objects(I, True, False, True), size)
  horizontal_line = connect((uppermost(main_obj), 0), (uppermost(main_obj), width(I) - 1))
  vertical_line = connect((0, leftmost(main_obj)), (height(I) - 1, leftmost(main_obj)))
  connected_lines = horizontal_line | vertical_line
  O = paint(I, recolor(target_color, connected_lines))
  return O 
 
0.19333333333333333, 10.177162, def bbejjfcgfbadeceejjecfadjceadegcd(I):
  target_color = leastcolor(I)
  obj_indices = {color(obj): toindices(obj) for obj in objects(I, True, False, True)}
  target_indices = obj_indices[target_color]
  centroid = centerofmass(target_indices)
  horizontal_line = connect(centroid, (centroid[0], 0)) | connect(centroid, (centroid[0], width(I) - 1))
  vertical_line = connect(centroid, (0, centroid[1])) | connect(centroid, (height(I) - 1, centroid[1]))
  connected_lines = horizontal_line | vertical_line
  O = paint(I, recolor(target_color, connected_lines))
  return O
 
0.24333333333333332, 15.824419, def aedbbaaffdejeefdbfgbehbefhifeifg(I):
  target_color = leastcolor(I)
  target_indices = ofcolor(I, target_color)
  centroid = centerofmass(target_indices)
  connected_lines = recolor(target_color, connect(centroid, (centroid[0], 0)) | 
                                connect(centroid, (centroid[0], width(I) - 1)) |
                                connect(centroid, (0, centroid[1])) |
                                connect(centroid, (height(I) - 1, centroid[1])))
  O = paint(I, connected_lines)
  return O
 
0.3066666666666667, 19.434895, def gffgcdcbaagdejbiadcibidefbeefeej(I):
  O = canvas(mostcolor(I), shape(I))
  for i in range(len(I)):
    for j in range(len(I[0])):
      if I[i][j] != mostcolor(I):
        O = fill(O, I[i][j], connect((i, 0), (i, len(I[0])-1)))
  return O
 
0.12666666666666668, 12.089151, def fdfaidjadbeaefcfbjgccadefdicachc(I):
  O = I
  for j in range(width(I)):
    for i in range(height(I)):
      if index(O, (i, j)) != mostcolor(I):
        current_color = index(O, (i, j))
        for k in range(j + 1, width(I)):
          if index(O, (i, k)) != mostcolor(I):
            break
          O = fill(O, current_color, {(i, k)})
        break  # Move to the next column once a color is found
  return O
 
0.14, 26.816853, def egabbfbedeaceegfjbdhhbjbeibdjgaf(I):
  O = canvas(ZERO, shape(I))
  for obj in objects(I, True, False, True):
    v = color(obj)
    left = leftmost(obj)
    right = rightmost(obj)
    top = uppermost(obj)
    bottom = lowermost(obj)
    for i in range(top, bottom + 1):
      if left == 0 or index(I, (i, left - 1)) != 0:
        O = paint(O, recolor(v, {(i, j) for j in range(left, width(I))}))
      elif right == width(I) - 1 or index(I, (i, right + 1)) != 0:
        O = paint(O, recolor(v, {(i, j) for j in range(0, right + 1)}))
  return O
 
0.25333333333333335, 18.914696, def idhaajdabaddegfhjdibjcggagajbedh(I):
  O = I
  for obj in objects(I, True, False, True):
    v = color(obj)
    left = leftmost(obj)
    right = rightmost(obj)
    if left <= width(I) - right - 1:
      O = paint(O, recolor(v, {(i, j) for i in range(uppermost(obj), lowermost(obj) + 1) for j in range(left, width(I))}))
    else:
      O = paint(O, recolor(v, {(i, j) for i in range(uppermost(obj), lowermost(obj) + 1) for j in range(0, right + 1)}))
  return O
 
0.18666666666666668, 14.210331, def bccfddaigcdgecbbbcgbjfceacffgfaf(I):
  O = canvas(ZERO, shape(I))
  objs = objects(I, True, False, True)
  for obj in objs:
    v = color(obj)
    left = leftmost(obj)
    right = rightmost(obj)
    extension = connect((uppermost(obj), left), (uppermost(obj), right))
    if any(index(I, (i, j)) != 0 for (i, j) in shift(extension, (1, 0))):
      extension = connect((uppermost(obj), left), (uppermost(obj), 0))
    else:
      extension = connect((uppermost(obj), right), (uppermost(obj), width(I) - 1))
    O = paint(O, recolor(v, extension))
  return O
 
0.14333333333333334, 25.657778, def fbhjecegdcejeeadbhhhddbbbecjbgcd(I):
  bg = mostcolor(I)
  objs = objects(I, T, F, T)
  largest_obj = argmax(objs, size)
  direction = position(largest_obj, remove(objs, largest_obj))
  O = I
  for i in range(1, max(shape(I))):
    shifted = shift(largest_obj, multiply(direction, i))
    if len(intersection(toindices(shifted), asindices(I))) != len(shifted):
      break
    O = paint(O, recolor(color(largest_obj), toindices(shifted)))
  return O
 
0.15, 43.60869, def dhebajdedcdeebebjecfabebafaceabd(I):
  bg = mostcolor(I)
  objs = objects(I, T, F, T)
  largest_obj = argmax(objs, size)
  O = paint(canvas(bg, shape(I)), largest_obj)
  if rightmost(largest_obj) < len(I[0]) - 1:
    for j in range(rightmost(largest_obj) + 1, len(I[0])):
      if any(index(I, (i, j)) != bg for i in range(len(I))):
        break
      O = fill(O, color(largest_obj), {(centerofmass(largest_obj)[0], j)})
  else:
    for j in range(leftmost(largest_obj) - 1, -1, -1):
      if any(index(I, (i, j)) != bg for i in range(len(I))):
        break
      O = fill(O, color(largest_obj), {(centerofmass(largest_obj)[0], j)})
  return O
 
0.35666666666666663, 19.502712, def cacicaiddjdaegecabjjedjbedfbbdeb(I):
  bg = mostcolor(I)
  objs = objects(I, T, F, T)
  largest_obj = argmax(objs, size)
  target_j = next((j for j in range(len(I[0])) if any(index(I, (i, j)) != bg for i in range(len(I))) and (j > rightmost(largest_obj) or j < leftmost(largest_obj))), None)
  if target_j is not None:
    O = paint(canvas(bg, shape(I)), largest_obj)
    if target_j > rightmost(largest_obj):
      O = fill(O, color(largest_obj), {(i, j) for i in range(len(I)) for j in range(rightmost(largest_obj) + 1, target_j)})
    else:
      O = fill(O, color(largest_obj), {(i, j) for i in range(len(I)) for j in range(target_j + 1, leftmost(largest_obj))})
    return O
  return I
 
0.17333333333333334, 23.578745, def iijefggjgfbaeaacjhfihbefcjaajbfe(I):
  bg = mostcolor(I)
  objs = objects(I, T, F, T)
  largest_obj = argmax(objs, size)
  other_objs = difference(objs, {largest_obj})
  O = I
  for obj in other_objs:
    if hmatching(largest_obj, obj):
      if leftmost(obj) > rightmost(largest_obj):
        O = fill(O, color(largest_obj), {(i, j) for i in range(len(I)) for j in range(rightmost(largest_obj) + 1, leftmost(obj))})
      elif rightmost(obj) < leftmost(largest_obj):
        O = fill(O, color(largest_obj), {(i, j) for i in range(len(I)) for j in range(rightmost(obj) + 1, leftmost(largest_obj))})
  return O
 
0.043333333333333335, 12.819089, def ebdedadedcbbecjgiegfeahddadjbhcf(I):
  target_color = leastcolor(I)
  filled_cells = set()
  for j in range(width(I)):
    column_indices = [(i, j) for i in range(height(I)) if index(I, (i, j)) == target_color]
    if column_indices:
      filled_cells.update(connect(column_indices[0], column_indices[-1]))
  O = paint(I, recolor(target_color, frozenset(filled_cells)))
  return O
 
0.13333333333333333, 24.880747, def gecceciigcifeeeaicbhadbdjbdeijah(I):
  objs = objects(I, T, F, T)
  bg = mostcolor(I)
  O = I
  for obj in objs:
    if portrait(obj):
      start = (uppermost(obj), leftmost(obj))
      end = (lowermost(obj) + 1, leftmost(obj) + 1)
      O = fill(O, color(obj), connect(start, end))
    else:
      start = (uppermost(obj), leftmost(obj))
      end = (uppermost(obj) + 1, rightmost(obj) + 1)
      O = fill(O, color(obj), connect(start, end))
  return O
 
0.09666666666666668, 36.08922, def bfbfafcfeedceddfbaibfdibefhabice(I):
  O = I
  for obj in objects(I, T, F, T):
    if height(obj) > width(obj):
      O = paint(O, recolor(color(obj), backdrop(vfrontier(centerofmass(obj)))))
    elif height(obj) < width(obj):
      O = paint(O, recolor(color(obj), backdrop(hfrontier(centerofmass(obj)))))
  return O
 
0.19333333333333336, 12.081479, def fcebiefddhffedceieagbagidddbbaie(I):
  O = I
  for obj in objects(I, T, F, T):
    direction = (1, 0) if height(obj) > width(obj) else (0, 1)
    O = paint(O, recolor(color(obj), backdrop(shoot(center(obj), direction))))
  return O
 
0.3066666666666667, 19.434895, def febacieiedjeejhfbebfecjbhibbegfc(I):
  objs = objects(I, T, F, T)
  O = canvas(mostcolor(I), shape(I))
  for obj in objs:
    if portrait(obj):
      for j in range(leftmost(obj), rightmost(obj) + 1):
        O = fill(O, color(obj), vfrontier((uppermost(obj), j)))
    else:
      for i in range(uppermost(obj), lowermost(obj) + 1):
        O = fill(O, color(obj), hfrontier((i, leftmost(obj))))
  return O
 
0.10999999999999999, 40.522144, def acjjfecfchecebacifffabejbgdbaeee(I):
  objs = objects(I, T, F, F)
  O = canvas(mostcolor(I), shape(I))
  for obj in objs:
    for i in range(uppermost(obj), lowermost(obj) + 1):
      start_j = leftmost(obj)
      end_j = rightmost(obj) + 1
      for other_obj in objs:
        if other_obj != obj and hmatching(obj, other_obj):
          other_left = leftmost(other_obj)
          other_right = rightmost(other_obj)
          if other_left > end_j and other_left <= rightmost(obj) + 1:
            end_j = other_left
          if other_right < start_j and other_right >= leftmost(obj):
            start_j = other_right + 1
      O = fill(O, color(obj), {(i, j) for j in range(start_j, end_j)})
  return O
 
0.09666666666666668, 36.08922, def aeceachbbdfgefcaibhdfgbdafccfcee(I):
  objs = objects(I, T, F, F)
  O = I
  for obj in objs:
    for i, j in toindices(obj):
      extension = shoot((i,j), (0, 1))
      for other_obj in objs:
        if other_obj != obj:
          extension -= toindices(other_obj)
      O = fill(O, color(obj), {(i, j) for i, j in extension if j >= 0 and j < len(I[0])})
  return O
 
0.09666666666666668, 36.08922, def cdcbdbifciieehbbifhihbefddicbhef(I):
    v = mostcolor(I)
    objs = objects(I, T, F, T)
    obj = argmax(objs, size)
    leftmost_j = leftmost(obj)
    rightmost_j = rightmost(obj)
    extension = frozenset((i, j) for i, j in asindices(I) if j > leftmost_j and j < rightmost_j and I[i][j] == v)
    filled = fill(I, 8, extension)
    return filled
 
0.19333333333333336, 12.081479, def fbbaficgchfceidjbfdeadgafbfceaee(I):
    target_color = leastcolor(I)
    filled_grid = I
    for i in range(height(I)):
        row_start = next((j for j, v in enumerate(I[i]) if v == target_color), -1)
        if row_start != -1:
            filled_grid = fill(filled_grid, target_color, frozenset((i, j) for j in range(row_start, width(I))))
    return filled_grid
 
0.11666666666666665, 23.406416, def bhdfbfedaabbedifbeaffebhadgeaiff(I):
  objs = objects(I, True, False, True)
  obj = argmax(objs, lambda obj: -uppermost(obj)) #select the topmost obj
  fill_indices = frozenset(
  (i,j) for i in range(uppermost(obj), lowermost(obj)+1) for j in range(leftmost(obj), width(I))
  )
  O = fill(I, color(obj), fill_indices)
  return O
 
0.09666666666666668, 36.08922, def eehcfbbdcfcieijdijdhdifaehaijecb(I):
  O = I
  for obj in objects(I, univalued=True, diagonal=False, without_bg=True):
    upper, lower = uppermost(obj), lowermost(obj)
    left, right = leftmost(obj), rightmost(obj)
    O = fill(O, color(obj), connect((upper, left), (lower, right)))
  return O
 
0.14333333333333334, 7.63199, def agjeedijdhcbecicajfccedehjgdaefb(I):
  O = I
  for obj in objects(I, T, F, T):
    direction = (1, 0) if width(obj) >= height(obj) else (0, 1)
    O = paint(O, recolor(color(obj), backdrop(shoot(centerofmass(obj), direction))))
  return O
 
0.21333333333333335, 6.960915, def aeaeafejeibcebjaiabcdbacaihaecdd(I):
  objs = objects(I, T, F, F)
  O = canvas(mostcolor(I), shape(I))
  for obj in objs:
    for i, j in toindices(obj):
      O = fill(O, index(I, (i, j)), {(i, k) for k in range(j, width(I))})
  return O
 
0.16666666666666666, 7.3284802, def jicibajdageceghhjadecehbabafjbdj(I):
  objs = objects(I, T, F, T)
  O = I
  for obj in objs:
    rightmost_j = rightmost(obj)
    for i in range(height(I)):
      if (i, rightmost_j) in toindices(obj):
        for j in range(rightmost_j - 1, -1, -1):
          if index(I, (i, j)) == mostcolor(I):
            O = fill(O, color(obj), {(i, j)})
          else:
            break
  return O
 
0.11333333333333334, 24.556002, def bhhjcabfbfbaeeaejgjebdggdjccdgbe(I):
  O = I
  for j in range(width(I) - 1):
    column = tuple(I[i][j] for i in range(height(I)))
    next_column = tuple(I[i][j + 1] for i in range(height(I)))
    if all(v == mostcolor(I) for v in next_column) and any(v != mostcolor(I) for v in column):
      for i in range(height(I)):
        if I[i][j] != mostcolor(I):
          O = fill(O, I[i][j], {(i, j + 1)})
  return O
 
0.2866666666666667, 20.692533, def ccdbhefefcebecdeijfdeceaieahjiae(I):
  target_color = leastcolor(I)
  filled_cells = frozenset((i, j) for j in range(width(I)) for i in range(height(I)) if any(index(I, (k, j)) == target_color for k in range(height(I))) and index(I, (i,j)) == ZERO)
  O = paint(I, recolor(target_color, filled_cells))
  return O
 
0.14333333333333334, 22.072556, def cdgfeacdgegaecadicgbabgcffedijef(I):
  objs = objects(I, False, False, False)
  target_color = leastcolor(I)
  target_objs = colorfilter(objs, target_color)
  filled_cells = frozenset((i, j) for obj in target_objs for _, (i, j) in obj for k in range(height(I)) if index(I, (k, j)) == target_color and index(I, (i,j)) == ZERO)
  O = paint(I, recolor(target_color, filled_cells))
  return O
 
0.8533333333333334, 52.015053, def ddfeaddedieaeeidbiceheeejbeffije(I):
    target_color = leastcolor(I)
    filled_cells = set()
    for j in range(width(I)):
        column_indices = ofcolor(I, target_color)
        if len({(i, j) for i, _ in column_indices if 0 <= i < height(I)}):
            filled_cells.update((i, j) for i in range(height(I)))
    O = paint(I, recolor(target_color, frozenset(filled_cells)))
    return O
 
0.15, 6.477104, def iacbhjbefgffebceafhaddeibfadbafg(I):
  O = I
  for j in range(width(I)):
    non_bg_indices = [i for i in range(height(I)) if I[i][j] != mostcolor(I)]
    if non_bg_indices:
      start = non_bg_indices[0]
      O = fill(O, I[start][j], connect((start, j), (start, width(I)-1)))
  return O
 
0.19333333333333336, 12.081479, def hjdeahhaceceeebbahjcgjffdcajbjed(I):
  O = I
  for obj in objects(I, univalued=True, diagonal=False, without_bg=True):
    start_j = leftmost(obj)
    start_i = first(toindices(obj))[0]
    O = fill(O, color(obj), connect((start_i, start_j), (start_i, width(I) - 1)))
  return O 
 
0.19666666666666666, 21.659338, def hfedhdhfdcgbejbhbiccfebbaggcjeca(I):
  O = I
  for obj in objects(I, T, F, T):
    O = paint(O, recolor(color(obj), 
                         hfrontier((0, leftmost(obj))) if width(obj) >= height(obj) 
                         else vfrontier((uppermost(obj), 0))))
  return O
 
0.2866666666666667, 20.692533, def acdjidedbgcgeabjjfibibbfbdcdidgc(I):
  O = canvas(mostcolor(I), shape(I))
  for obj in objects(I, T, F, T):
    if width(obj) >= height(obj):
      O = paint(O, recolor(color(obj), product(range(len(I)), {leftmost(obj)})))
    else:
      O = paint(O, recolor(color(obj), product({uppermost(obj)}, range(len(I[0])))))
  return O
 
0.19333333333333336, 6.850464, def bacececbjgieecedaeigbecegecfchbf(I):
  objs = objects(I, T, F, F)
  O = I
  h, w = len(I), len(I[0])
  for obj in objs:
    for i, j in toindices(obj):
      for k in range(j + 1, w):
        if index(I, (i, k)) != mostcolor(I):
          break
        O = fill(O, color(obj), {(i, l) for l in range(j, k + 1)})
  return O
 
0.2066666666666667, 7.516815, def gjcfggdahdbjeajgaigfffedbdeibfgd(I):
  objs = objects(I, T, F, F)
  O = I
  for obj in objs:
    right_edge = rightmost(obj)
    for i in range(uppermost(obj), lowermost(obj) + 1):
      for j in range(right_edge + 1, len(I[0])):
        if index(I, (i, j)) != mostcolor(I):
          break
        right_edge = j
      O = fill(O, color(obj), {(i, k) for k in range(leftmost(obj), right_edge + 1)})
  return O
 
0.19333333333333336, 12.081479, def bddcfbjadhebecaejedbceidffcaidfd(I):
  O = I
  for i in range(len(I)):
    current_color = None
    for j in range(len(I[0])):
      if index(I, (i, j)) != mostcolor(I):
        current_color = index(I, (i, j))
      elif current_color is not None:
        O = fill(O, current_color, {(i, j)})
  return O
 
0.12666666666666668, 13.160703, def ebgicddbfaadefbeabeedbbijefcbhaf(I):
  v = mostcolor(I)
  if v == 0:
    v = leastcolor(I)
  objs = objects(I, T, F, T)
  obj = argmax(objs, size)
  if width(obj) >= height(obj):
    j = leftmost(obj)
    while j <= rightmost(obj):
      I = fill(I, v, {(i, j) for i in range(height(I))})
      j += 1
  else:
    i = uppermost(obj)
    while i <= lowermost(obj):
      I = fill(I, v, {(i, j) for j in range(width(I))})
      i += 1
  return I
 
0.3066666666666667, 19.434895, def jfiaijbfecjheabiaaehfecbjdjgeffe(I):
  target_color = leastcolor(I)
  filled_cells = frozenset((i, j) for i in range(height(I)) for j in range(width(I)) if index(I, (i, j)) == ZERO and any(index(I, (i, k)) == target_color for k in range(width(I))))
  O = paint(I, recolor(target_color, filled_cells))
  return O
 
0.35666666666666663, 40.45126, def cbfiibhajgifedbebbfccdfdiccabedj(I):
  target_color = leastcolor(I)
  objs = objects(I, False, False, False)
  target_objs = colorfilter(objs, target_color)
  filled_cells = mapply(lambda obj: frozenset((i, j) for _, (i, j) in obj for k in range(leftmost(obj), rightmost(obj) + 1) if index(I, (i, k)) == ZERO), target_objs)
  O = paint(I, recolor(target_color, filled_cells))
  return O
 
0.16, 13.117141, def ebabjedecbgcefhaideecaadabfbafbh(I):
  O = canvas(mostcolor(I), shape(I))
  for obj in objects(I, univalued=True, diagonal=False, without_bg=True):
    start_j = leftmost(obj)
    start_i = first(toindices(obj))[0]
    if start_j >= width(I) // 2:
      O = fill(O, color(obj), connect((start_i, start_j), (start_i, width(I) - 1)))
    else:
      O = fill(O, color(obj), connect((start_i, start_j), (start_i, 0)))
  return O
 
0.13, 30.053053, def jebcdcajdifheecdbabacedifeajcefb(I):
  target_color = leastcolor(I)
  objs = objects(I, False, False, False)
  target_objs = colorfilter(objs, target_color)
  filled_rows = mapply(lambda obj: frozenset((i, j) for _, (i, j) in obj for j in range(width(I)) if i == uppermost(obj)), target_objs)
  O = paint(I, recolor(target_color, filled_rows))
  return O
 
0.09666666666666668, 36.08922, def dfibeacgjefbehfciffeahjiddecddeb(I):
  target_color = leastcolor(I)
  painted_grid = canvas(target_color, shape(I))
  O = cellwise(painted_grid, I, ZERO)
  return O
 
0.3066666666666667, 19.434895, def cjdeffffddhjeijijfbdifefcdbffhhi(I):
  objs = objects(I, T, F, T) # Get objects, excluding background
  O = canvas(mostcolor(I), shape(I)) # Initialize output canvas
  for obj in objs:
    O = paint(O, obj) # Paint existing objects
    if hline(obj): # Check for horizontal lines
      left_edge = hfrontier((uppermost(obj), 0)) # Left edge of the grid
      right_edge =  hfrontier((uppermost(obj), width(I) - 1)) # Right edge of the grid
      extension = connect(ulcorner(obj), lrcorner(obj)) # Initial line segment
      for i in range(1, width(I)):
        left_point = (uppermost(obj), leftmost(obj) - i)
        right_point = (uppermost(obj), rightmost(obj) + i)
        if not contained(left_point, toindices(obj)) and index(I, left_point) == mostcolor(I):
          extension = combine(extension, {left_point}) # Extend left
        else: break
      for i in range(1, width(I)):
        left_point = (uppermost(obj), leftmost(obj) - i)
        right_point = (uppermost(obj), rightmost(obj) + i)
        if not contained(right_point, toindices(obj)) and index(I, right_point) == mostcolor(I):
          extension = combine(extension, {right_point}) # Extend Right
        else: break
      O = fill(O, color(obj), extension)
  return O 
 
0.3233333333333333, 20.228828, def iidciejjbdageefdijbecgdjbcdagfaa(I):
  target_color = leastcolor(I) if mostcolor(I) == 0 else mostcommon(I)
  h, w = height(I), width(I)
  max_hcount, max_vcount = 0, 0
  hstart, vstart = -1, -1
  for i in range(h):
    hcount = 0
    for j in range(w):
      if I[i][j] == target_color:
        hcount += 1
        if hcount > max_hcount:
          max_hcount = hcount
          hstart = j
  for j in range(w):
    vcount = 0
    for i in range(h):
      if I[i][j] == target_color:
        vcount += 1
        if vcount > max_vcount:
          max_vcount = vcount
          vstart = i
  if max_hcount >= max_vcount:
    O = fill(I, target_color, frozenset((i, j) for i in range(h) for j in range(hstart, w)))
  else:
    O = fill(I, target_color, frozenset((i, j) for j in range(w) for i in range(vstart, h)))
  return O
 
0.7200000000000001, 30.297235, def ajjffaefbcijeaceigbafdhhfhebedeh(I):
  target_color = leastcolor(I) if mostcolor(I) == 0 else mostcommon(I)
  target_indices = ofcolor(I, target_color)
  horizontal_line = frozenset((i, j) for i in range(height(I)) for j in range(leftmost(target_indices), width(I)))
  vertical_line = frozenset((i, j) for j in range(width(I)) for i in range(uppermost(target_indices), height(I)))
  hcount = len(target_indices & horizontal_line)
  vcount = len(target_indices & vertical_line)
  return fill(I, target_color, horizontal_line) if hcount >= vcount else fill(I, target_color, vertical_line)
 
0.10333333333333333, 10.483265, def bebjdjfcgbieeddbjfebfchedjdcagfi(I):
  target_color = leastcolor(I) if mostcolor(I) == 0 else mostcommon(I)
  horizontal_counts = apply(lambda row: row.count(target_color), I)
  vertical_counts = apply(lambda col: col.count(target_color), dmirror(I))
  if max(horizontal_counts) >= max(vertical_counts):
    target_row_index = argmax(interval(0, height(I), 1), lambda i: I[i].count(target_color))
    line = frozenset((target_row_index, j) for j in range(width(I)))
  else:
    target_col_index = argmax(interval(0, width(I), 1), lambda j: dmirror(I)[j].count(target_color))
    line = frozenset((i, target_col_index) for i in range(height(I)))
  return fill(I, target_color, line)
 
0.5966666666666667, 26.608232, def acaeedeadcjceiefbefheeccjiccfjcd(I):
  target_color = leastcolor(I) if mostcolor(I) == 0 else mostcommon(I)
  horizontal_start = next((j for row in I for j, v in enumerate(row) if v == target_color), -1)
  vertical_start = next((i for i, row in enumerate(I) for v in row if v == target_color), -1)
  hcount = max(row.count(target_color) for row in I) if horizontal_start != -1 else 0
  vcount = max(col.count(target_color) for col in dmirror(I)) if vertical_start != -1 else 0
  if hcount >= vcount:
    O = fill(I, target_color, frozenset((i, j) for i in range(height(I)) for j in range(horizontal_start, width(I))))
  else:
    O = fill(I, target_color, frozenset((i, j) for j in range(width(I)) for i in range(vertical_start, height(I))))
  return O
 
0.13, 30.315998, def eabcbaacjjefeecajffcccedjbefdjcb(I):
  target_color = leastcolor(I)
  objs = objects(I, False, False, False)
  target_objs = colorfilter(objs, target_color)
  filled_rows = mapply(lambda obj: frozenset((i, j) for i, j in product(interval(0, width(I),1), {uppermost(obj)})), target_objs)
  O = paint(I, recolor(target_color, filled_rows))
  return O
 
0.05333333333333334, 16.30333, def ecacefedaageedffiedibaddajecaabe(I):
  O = I
  for obj in objects(I, univalued=True, diagonal=False, without_bg=True): # Get objects
    for (i, j) in toindices(obj):
      O = fill(O, color(obj), connect((i, j), (i, max(k for k in range(j, len(I[0])) if I[i][k] == color(obj)))))
  return O
 
0.1366666666666667, 10.971982, def gcciechadedieddfabcefbfcfbbbibai(I):
  O = canvas(mostcolor(I), shape(I))
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if val != mostcolor(I):
        left_j = next((k for k in range(j, -1, -1) if index(I, (i, k)) == mostcolor(I)), 0)
        right_j = next((k for k in range(j, width(I)) if index(I, (i, k)) == mostcolor(I)), width(I) - 1)
        O = fill(O, val, {(i, k) for k in range(left_j, right_j + 1)})
  return O 
 
0.4633333333333333, 21.979874, def cgjcdcdaefcaeibfibdecgdfeicdjida(I):
  target_color = leastcolor(I) if mostcolor(I) == 0 else mostcommon(I)
  objs = objects(I, True, False, True)
  target_obj = max(objs, key=lambda obj: len(obj))
  if width(target_obj) >= height(target_obj):
    start_j = leftmost(target_obj)
    O = fill(I, target_color, frozenset((i, j) for i in range(height(I)) for j in range(start_j, width(I))))
  else:
    start_i = uppermost(target_obj)
    O = fill(I, target_color, frozenset((i, j) for j in range(width(I)) for i in range(start_i, height(I))))
  return O
 
0.11666666666666665, 27.62215, def dhcbajgdiiegeefiidhfegdcaaicecfa(I):
  target_color = leastcolor(I)
  objs = objects(I, False, False, False)
  target_objs = colorfilter(objs, target_color)
  filled_cells = mapply(lambda obj: connect(ulcorner(obj), lrcorner(obj)), target_objs)
  O = paint(I, recolor(target_color, filled_cells))
  return O
 
0.21666666666666667, 6.8333774, def cigfjbabbafeeedgaecagedhcafbejeh(I):
  objs = objects(I, T, F, F) 
  O = I
  for obj in objs:
    for (i, j) in toindices(obj): 
      extension = shoot((i, j), (0, 1))  
      for other_obj in objs:
        if other_obj != obj and hmatching(obj, other_obj) and color(obj) == color(other_obj): 
          extension -= toindices(other_obj) 
      O = fill(O, color(obj), {(i, k) for i, k in extension if 0 <= k < len(I[0])}) 
  return O
 
0.14666666666666667, 52.976562, def cfbjbcicaeacecjgbhgadcccfeacjabd(I):
  O = canvas(mostcolor(I), shape(I))
  for i in range(len(I)):
    row_objs = sorted(objects(crop(I, (i, 0), (1, len(I[0]))), T, F, F), key=lambda obj: leftmost(obj)) 
    current_color = None 
    start_j = 0
    for obj in row_objs:
      if color(obj) != current_color:
        current_color = color(obj)
        start_j = leftmost(obj)
      else:
        O = fill(O, current_color, {(i, j) for j in range(start_j, rightmost(obj) + 1)}) 
  return O
 
0.05333333333333334, 16.30333, def aiahafgcacideccdjejdaebhchiebgdc(I):
  objs = objects(I, T, F, F)
  O = canvas(mostcolor(I), shape(I))
  for obj in objs:
    left_bound = leftmost(obj)
    right_bound = rightmost(obj)
    for other_obj in objs:
      if other_obj != obj and hmatching(obj, other_obj) and color(obj) == color(other_obj):
        if leftmost(other_obj) < left_bound:
          left_bound = leftmost(other_obj)
        if rightmost(other_obj) > right_bound:
          right_bound = rightmost(other_obj)
    O = fill(O, color(obj), {(uppermost(obj), j) for j in range(left_bound, right_bound + 1)})
  return O
 
0.43, 19.184511, def cdaabgdhficbebaaabcifccijeaghdac(I):
  is_not_bg = lambda obj: any(v != 0 for v, _ in obj)
  objs = sfilter(objects(I, True, False, True), is_not_bg)
  target_obj = argmax(objs, lambda obj: len(obj))
  orientation =  "horizontal" if width(target_obj) >= height(target_obj) else "vertical"
  fill_range = lambda obj: product(range(height(I)) if orientation == "horizontal" else range(uppermost(obj), height(I)),
                                    range(leftmost(obj), width(I)) if orientation == "horizontal" else range(width(I)))
  return fill(I, mostcolor(target_obj), fill_range(target_obj))
 
0.14333333333333334, 7.63199, def aacegfbefciceffcaeffigdhddafifei(I):
  O = I
  for j in range(width(I)):
    col = [I[i][j] for i in range(height(I))]
    for i in range(height(I) - 1):
      if col[i] != mostcolor(I) and col[i + 1] == mostcolor(I):
        next_non_bg = next((k for k in range(i + 1, height(I)) if col[k] != mostcolor(I)), height(I))
        O = fill(O, col[i], connect((i, j), (next_non_bg - 1, j)))
  return O
 
0.22999999999999998, 24.723377, def ahceeegcidfdebdbjdciifajcgdhggji(I):
  O = I
  for i in range(len(I)):
    for j in range(len(I[0])):
      if I[i][j] != mostcolor(I):
        O = paint(O, recolor(I[i][j], connect((i,j), (i, len(I[0]) - 1))))
        O = paint(O, recolor(I[i][j], connect((i,j), (len(I) - 1, j))))
  return O
 
0.14333333333333334, 7.63199, def fcdfdbfiddcieceibdefegbgdcggfdde(I):
  objs = objects(I, T, F, F)
  O = I
  for obj in objs:
    for j in range(leftmost(obj), rightmost(obj) + 1):
      start_i = uppermost(obj)
      end_i = next((i for i in range(start_i + 1, height(I)) if index(I, (i, j)) != mostcolor(I)), height(I))
      O = fill(O, color(obj), {(i, j) for i in range(start_i, end_i)})
  return O
 
0.2866666666666667, 20.692533, def bcbabgfajffhebgbbgcfifjcdadjafcd(I):
  objs = objects(I, T, F, F)
  O = I
  for obj in objs:
    for (i, j) in toindices(obj):
      frontier = vfrontier((i, j))
      intersection = toindices(obj) & frontier
      if len(intersection) == 1:
        O = fill(O, color(obj), frontier - intersection)
  return O
 
0.0, 113.07101, def fdbhddihfjahecgdbebeijeaebcdhjee(I):
  O = canvas(mostcolor(I), shape(I))
  for j in range(width(I)):
    column = tuple(I[i][j] for i in range(height(I)))
    new_column = tuple()
    current_color = mostcolor(I)
    for val in column:
      if val != mostcolor(I):
        current_color = val
      new_column = new_column + (current_color,)
    O = hconcat(O, (new_column,))
  return O
 
0.0, 110.45319, def fcbgeeebaajeeacbbgjjaehaiafgeheh(I):
  O = canvas(mostcolor(I), shape(I))
  for j in range(width(I)):
    column = tuple(I[i][j] for i in range(height(I)))
    extended_column = papply(lambda a, b: a if a != mostcolor(I) else b, column, column[1:] + (mostcolor(I),))
    O = hconcat(O, (extended_column,))
  return O
 
0.8533333333333334, 52.015053, def ddeffdbdagfheabiaiedhjbdfeebbahh(I):
  target_color = next((c for c, _ in asobject(I) if c != 0), 0)
  objs = objects(I, True, False, True)
  obj = argmax(objs, size)
  if width(obj) >= height(obj):
    O = tuple(tuple(target_color if any(j >= leftmost(obj) for _, (i, j) in obj) else v for j, v in enumerate(row)) for row in I)
  else:
    O = tuple(tuple(target_color if any(i >= uppermost(obj) for _, (i, j) in obj) else v for j, v in enumerate(row)) for i, row in enumerate(I))
  return O
 
0.25333333333333335, 18.914696, def eeijebaceijdegedbiacgbhbdedjjdfc(I):
  O = canvas(mostcolor(I), shape(I))
  for obj in objects(I, univalued=True, diagonal=False, without_bg=True):
    start_j = leftmost(obj)
    start_i = uppermost(obj)
    if start_j >= width(I) // 2:
      O = fill(O, color(obj), connect((start_i, start_j), (start_i, 0)))
    else:
      O = fill(O, color(obj), connect((start_i, start_j), (start_i, width(I) - 1)))
  return O
 
0.20333333333333334, 16.625366, def iddebfdjdegeehdeaehcedehcabiddde(I):
  O = I
  for obj in objects(I, univalued=True, diagonal=False, without_bg=True):
    target_j = 0 if leftmost(obj) >= width(I) // 2 else width(I) - 1
    for j in range(width(I)):
      if any(index(I, (i, j)) == color(obj) for i in range(height(I))):
        O = fill(O, color(obj), connect((0, j), (height(I) - 1, target_j)))
  return O
 
0.16, 8.0850725, def gfbcdahejdddecdciheddachfeeegbhb(I):
  O = canvas(mostcolor(I), shape(I))
  for obj in objects(I, T, F, F):
    O = paint(O, obj)
    O = fill(O, color(obj), {(i, leftmost(obj)) for i in range(uppermost(obj), height(I))})
  return O
 
0.17, 9.668538, def cdefcaceheafehecbchjcfgfeigbjdae(I):
  O = I
  for obj in objects(I, T, F, F):
    for i in range(uppermost(obj), height(I)):
      O = fill(O, color(obj), {(i, j) for j in range(leftmost(obj), rightmost(obj) + 1)})
  return O
 
0.26, 25.536257, def fbahcdhaecjbeedejiieefbjciaaadai(I):
  O = canvas(mostcolor(I), shape(I))
  for j in range(width(I)):
    connected = False
    for i in range(height(I)):
      if I[i][j] != mostcolor(I):
        O = fill(O, I[i][j], {(k, j) for k in range(i, height(I))})
        if not connected:
          O = fill(O, I[i][j], {(i, k) for k in range(width(I))})
          connected = True
  return O
 
0.09000000000000001, 8.964416, def eeagecefaafjejdfbcaehjdfaiaehebh(I):
  O = I
  for obj in objects(I, univalued=True, diagonal=False, without_bg=True):
    color_obj = color(obj)
    for (i, j) in toindices(obj):
      right_extension = connect((i, j), (i, max(k for k in range(j, len(I[0])) if I[i][k] == color_obj)))
      left_extension = connect((i, j), (i, min(k for k in range(j+1) if I[i][k] == color_obj)-1))
      if any(I[i][k] != 0 and (i,k) not in toindices(obj) for k in range(j+1, len(I[0]))):
        O = fill(O, color_obj, right_extension)
      else:
        O = fill(O, color_obj, left_extension)
  return O 
 
0.13333333333333333, 8.896242, def debbcfggffgeejedbjccbidcacfhbigi(I):
  O = canvas(ZERO, shape(I))
  for obj in objects(I, univalued=True, diagonal=False, without_bg=True):
    color_obj = color(obj)
    for (i, j) in toindices(obj):
      right_edge = next((k for k in range(j + 1, len(I[0])) if I[i][k] != 0 or k == len(I[0]) - 1), len(I[0]) - 1)
      left_edge = next((k for k in range(j - 1, -1, -1) if I[i][k] != 0 or k == 0), 0)
      if any(I[i][k] == color_obj and (i,k) not in toindices(obj) for k in range(j + 1, len(I[0]))):
        O = fill(O, color_obj, connect((i, j), (i, right_edge))) 
      else:
        O = fill(O, color_obj, connect((i, j), (i, left_edge)))
  return O
 
0.17333333333333334, 23.00689, def fejabehgbgajedjbagjchacebdehaaic(I):
  O = I
  for i in range(height(I)):
    row_objects = objects(crop(I, (i, 0), (1, width(I))), univalued=True, diagonal=False, without_bg=True)
    for obj_index, obj in enumerate(row_objects):
      color_obj = color(obj)
      if any(color(other_obj) == color_obj and other_obj != obj for other_obj in row_objects):
        if obj_index < len(row_objects) - 1:
          next_obj = next(obj for k, obj in enumerate(row_objects) if k > obj_index)
          O = fill(O, color_obj, connect(lrcorner(obj), ulcorner(next_obj)))
        else:
          O = fill(O, color_obj, connect(lrcorner(obj), (i, width(I))))
      else:
        if obj_index > 0:
          prev_obj = next(obj for k, obj in enumerate(row_objects) if k < obj_index)
          O = fill(O, color_obj, connect(ulcorner(obj), lrcorner(prev_obj)))
        else:
          O = fill(O, color_obj, connect(ulcorner(obj), (i, -1)))
  return O
 
0.19000000000000003, 9.112677, def cbaigcfejcciecehadbgcadeacajfddc(I):
  O = I
  for obj in objects(I, univalued=True, diagonal=False, without_bg=True):
    color_obj = color(obj)
    left_bound = leftmost(obj)
    right_bound = rightmost(obj)
    for i in range(uppermost(obj), lowermost(obj) + 1):
      if any(I[i][k] == color_obj and (i, k) not in toindices(obj) for k in range(right_bound + 1, len(I[0]))):
        O = fill(O, color_obj, connect((i, right_bound), (i, len(I[0]) - 1)))
      else:
        O = fill(O, color_obj, connect((i, left_bound), (i, 0)))
  return O
 
0.14666666666666667, 27.86826, def fagfbgcdfacaeghcbdgcbdggbcfchfbh(I):
  O = canvas(ZERO, shape(I))
  processed = set()
  for i in range(height(I)):
    for j in range(width(I)):
      if I[i][j] != 0 and (i, j) not in processed:
        current_color = I[i][j]
        right_extension = connect((i, j), (i, max(k for k in range(j, len(I[0])) if I[i][k] == current_color)))
        left_extension = connect((i, j), (i, min(k for k in range(j + 1) if I[i][k] == current_color) - 1))
        if any(I[i][k] == current_color and (i, k) not in right_extension for k in range(j + 1, len(I[0]))):
          O = fill(O, current_color, right_extension)
        else:
          O = fill(O, current_color, left_extension)
        processed = processed | toindices(right_extension) | toindices(left_extension)
  return O
 
0.2866666666666667, 20.692533, def facddacbeccbefbbafdgjabihbdgdbjh(I):
  O = canvas(ZERO, shape(I))
  for obj in objects(I, univalued=True, diagonal=False, without_bg=True):
    c = color(obj)
    for (i, j) in toindices(obj):
      O = fill(O, c, connect((i, j), (0, j)))
      O = fill(O, c, connect((i, j), (len(I) - 1, j)))
  return O
 
0.18666666666666665, 15.345382, def efbdaaaghgdceffgbdgchgdjbbedibai(I):
  O = canvas(ZERO, shape(I))
  for j in range(width(I)):
    connected = False
    for i in range(height(I)):
      if I[i][j] != ZERO:
        if not connected:
          O = fill(O, I[i][j], connect((i, j), (0, j)))
          connected = True
        else:
          O = fill(O, I[i][j], connect((i, j), (i - 1, j)))
      else:
        connected = False
  return O
 
0.06666666666666667, 18.046988, def aeaabddhdfigefdjjhjceiibicdchbhg(I):
  O = canvas(mostcolor(I), shape(I))
  for j in range(width(I)):
    for i in range(height(I) - 1):
      if I[i][j] != mostcolor(I) and I[i + 1][j] != mostcolor(I):
        O = paint(O, {(I[i][j], (i, j)), (I[i + 1][j], (i + 1, j))})
        O = fill(O, I[i][j], connect((i, j), (i + 1, j)))
  return O
 
0.043333333333333335, 12.819088, def iacigfjcfbbaejbaaahfbghfafehbaae(I):
  O = I
  for j in range(width(I)):
    for i in range(height(I) - 1):
      if index(I, (i, j)) == index(I, (i + 1, j)) and index(I, (i, j)) != mostcolor(I):
        O = fill(O, index(O, (i, j)), connect((i, j), (i + 1, j)))
  return O
 
0.04, 9.704025, def fecgdebfefaaeicjaffieeeidccfedee(I):
  o = objects(I, T, F, T)
  for obj1 in o:
    for obj2 in o:
      if obj1 != obj2 and color(obj1) == color(obj2):
        if hmatching(obj1, obj2) and manhattan(obj1, obj2) <= width(obj1) + width(obj2):
          start = (uppermost(obj1), min(leftmost(obj1), leftmost(obj2)))
          end = (uppermost(obj1), max(rightmost(obj1), rightmost(obj2)))
          I = fill(I, color(obj1), connect(start, end))
        if vmatching(obj1, obj2) and manhattan(obj1, obj2) <= height(obj1) + height(obj2):
          start = (min(uppermost(obj1), uppermost(obj2)), leftmost(obj1))
          end = (max(lowermost(obj1), lowermost(obj2)), leftmost(obj1))
          I = fill(I, color(obj1), connect(start, end))
  O = I
  return O
 
0.043333333333333335, 12.819088, def fdgedjjdajjfeecebedjfaabgcacfbdf(I):
  o = objects(I, T, F, T)
  connection_made = True
  while connection_made:
    connection_made = False
    for obj1 in o:
      for obj2 in o:
        if obj1 != obj2 and color(obj1) == color(obj2) and adjacent(obj1, obj2):
          I = paint(I, combine(obj1, obj2))
          connection_made = True
          break
      if connection_made:
        break
    o = objects(I, T, F, T)  # Update objects after connection
  O = I
  return O
 
0.04666666666666666, 10.250416, def habaefeadajceghejeabebfcheddbcbb(I):
  o = objects(I, T, F, T)
  for obj1 in o:
    for obj2 in o:
      if obj1 != obj2 and color(obj1) == color(obj2):
        if hmatching(obj1, obj2):  # Check for horizontal alignment
          min_col = min(leftmost(obj1), leftmost(obj2))
          max_col = max(rightmost(obj1), rightmost(obj2))
          for col in range(min_col, max_col + 1):
            if index(I, (uppermost(obj1), col)) == mostcolor(I):
              I = fill(I, color(obj1), ((uppermost(obj1), col),))
        elif vmatching(obj1, obj2):  # Check for vertical alignment
          min_row = min(uppermost(obj1), uppermost(obj2))
          max_row = max(lowermost(obj1), lowermost(obj2))
          for row in range(min_row, max_row + 1):
            if index(I, (row, leftmost(obj1))) == mostcolor(I):
              I = fill(I, color(obj1), ((row, leftmost(obj1)),))
  O = I
  return O
 
0.09000000000000001, 4.99747, def efejfcdafdgbeedejjgdhdgbebfcfibb(I):
    x1 = objects(I, T, F, T)  # Extract objects, excluding background
    x2 = colorfilter(x1, 8)  # Filter objects with color '8'
    x3 = argmax(x2, width)  # Find the object with maximum width 
    x4 = ulcorner(x3)  # Get the upper-left corner of the widest object
    O = fill(I, 8, frozenset({(x4[0], j) for j in range(x4[1], len(I[0]))}))  # Fill with '8' from the starting column to the right edge
    return O 
 
0.05333333333333334, 10.476086, def bibdifefajafeehcjcfcfhebgbdhcffa(I):
    x1 = [(rightmost(obj), obj) for obj in colorfilter(objects(I, T, F, T), 8)]  # Store rightmost index and object
    x2 = max(x1, key=lambda x: x[0])[1] if x1 else set() # Get object with max rightmost index
    x3 = ulcorner(x2)
    O = fill(I, 8, {(x3[0], j) for j in range(x3[1], len(I[0]))}) 
    return O
 
0.08, 8.926908, def bacdaffeffdeecegjhgfdcicfedfdbee(I):
    x1 = objects(I, T, F, T)
    x2 = colorfilter(x1, 8)
    x3 = max(x2, key=width, default=set())  # Use max function with default value to handle cases with no objects of color 8
    x4 = ulcorner(x3)
    x5 = hfrontier((x4[0], x4[1]))  # Create a horizontal frontier from the starting point
    O = fill(I, 8, x5)
    return O
 
0.05333333333333334, 15.460291, def hdjadcdhcfhjejhfjddcgjadccdceica(I):
  # Find the largest object
  x1 = objects(I, T, T, T) 
  x2 = argmax(x1, size) 

  # Get object color and bounding box
  x3 = color(x2) 
  x4 = ulcorner(x2)
  x5 = lrcorner(x2)

  # Create a patch representing the filled area
  x6 = frozenset((x4[0]+i, j) for i in range(x5[0]-x4[0]+1) for j in range(x4[1], len(I[0])))

  # Fill the grid and then paint only the original object
  O = paint(fill(I, 0, x6), x2)  
  return O
 
0.08, 23.694773, def facfgfddgccdeeegadiijcffddfdahhj(I):
  # Find the largest object (same as Version 1)
  x1 = objects(I, T, T, T) 
  x2 = argmax(x1, size) 

  # Get object color and rightmost column
  x3 = color(x2)  
  x4 = rightmost(x2)

  # Create a new object by extending each cell to the right edge
  x5 = frozenset((x3, (i, j)) for v, (i, j) in x2 for k in range(x4, len(I[0]))) 

  # Paint the new object onto a blank canvas
  O = paint(canvas(0, shape(I)), x5)
  return O
 
0.14666666666666667, 52.976562, def jbedeahaiffaehedacdgdajcfbffeahe(I):
  # Find the largest object (same as Version 1)
  x1 = objects(I, T, T, T)
  x2 = argmax(x1, size)

  # Get object color and dimensions
  x3 = color(x2)
  x4 = shape(I) 

  # Create a mask by filling a canvas with 1s at the object's location
  x5 = underfill(canvas(0, x4), 1, toindices(x2))  

  # Multiply the input grid with the mask
  O = cellwise(I, x5, 0) 
  return O
 
0.0, 114.4815, def cdbdbfddhaaaedhajjcbdahbejcdfbad(I):
    O = canvas(mostcolor(I), shape(I))
    for j in range(width(I)):
        column = tuple(I[i][j] for i in range(height(I)))
        first_non_bg = next((v for v in column if v != mostcolor(I)), mostcolor(I))
        new_column = tuple(first_non_bg for _ in range(height(I)))
        O = hconcat(O, (new_column,))
    return O
 
0.2866666666666667, 20.692533, def bbbddbfccffaeeiaadjbeceehhdjffci(I):
    O = []
    for j in range(width(I)):
        column = [I[i][j] for i in range(height(I))]
        k = 0
        while k < len(column) and column[k] == mostcolor(I):
            k += 1
        if k < len(column):
            fill_color = column[k]
            O.append(tuple(fill_color for _ in range(height(I))))
        else:
            O.append(tuple(column))
    return tuple(zip(*O))
 
0.4266666666666667, 25.067968, def fceefcbhacfeegfdiibaaecbcdcjcigc(I):
    return tuple(
        tuple(
            next((row[j] for row in I if row[j] != mostcolor(I)), mostcolor(I))
            for _ in range(height(I))
        )
        for j in range(width(I))
    )
 
0.04, 6.220188, def defefggebicceffjjadbbaachcgcedgh(I):
  O = I
  for i in range(height(I)):
    frontier = {(i, j) for j in range(width(I)) if index(I, (i, j)) != mostcolor(I)}
    if len(frontier) > 1:
      O = fill(O, index(I, first(frontier)), backdrop(frontier))
  return O
 
0.07666666666666667, 9.270728, def hgffiaefeeabefcibhjcbebiebjafdbb(I):
  c = mostcolor(I)
  O = I
  for i in range(len(I)):
    for j in range(len(I[0])):
      if I[i][j] != c:
        for di, dj in [(0, 1), (1, 0)]:
          new_i, new_j = i + di, j + dj
          if 0 <= new_i < len(I) and 0 <= new_j < len(I[0]) and I[new_i][new_j] == I[i][j]:
            O = fill(O, I[i][j], ((i, new_i), (j, new_j + 1)))
  return O
 
0.10000000000000002, 13.412787, def fdagafbjacffeebdaedbbbaeihcffdef(I):
  objs = objects(I, T, F, T)  # Get all objects
  O = I
  for obj in objs:
    upper = uppermost(obj)
    lower = lowermost(obj)
    left = leftmost(obj)
    right = rightmost(obj)
    max_width = 0
    max_row = upper
    for i in range(upper, lower + 1):
      row_start = next((j for j in range(left, right + 1) if (i, j) in toindices(obj)), None)
      if row_start is not None:
        row_end = next((j for j in range(right, row_start - 1, -1) if (i, j) not in toindices(obj)), right)
        width = row_end - row_start + 1
        if width > max_width:
          max_width = width
          max_row = i
    O = fill(O, 8, {(max_row, j) for j in range(left, len(I[0]))}) 
  return O
 
0.11333333333333334, 14.686456, def dbbeffifchcfedhabhafidcddcagbfed(I):
  O = I
  for obj in objects(I, T, F, T):
    indices = toindices(obj)
    row_counts = {i: sum(1 for _,j in indices if i == _) for i in range(height(obj))}
    max_row = max(row_counts, key=row_counts.get)
    O = fill(O, 8, {(max_row + uppermost(obj), j) for j in range(leftmost(obj), len(I[0]))})
  return O
 
0.10000000000000002, 6.1805673, def hbiceacabdaieicajcfgajedhcefebfb(I):
  for obj in objects(I, T, F, T):
    indices = sorted(toindices(obj))
    max_len, start, cur_len = 0, None, 0
    for (i, j), (next_i, _) in pair(indices, indices[1:] + [(None, None)]):
      if i == next_i: 
        cur_len += 1
      else:
        if cur_len > max_len:
          max_len = cur_len
          start = (i, j - cur_len + 1)
        cur_len = 1
    if start:
      I = fill(I, 8, {(start[0], j) for j in range(start[1], len(I[0]))})
  return I
 
0.19666666666666668, 9.751866, def cfcgefcfbejgejhfbjaecciebgcjdjeh(I):
  return paint(I, merge({recolor(8, {(i, j) for j in range(leftmost(obj), len(I[0]))}) 
                          for obj in objects(I, T, F, T) 
                          for i in range(uppermost(obj), lowermost(obj) + 1) 
                          if len({j for _,j in obj if i == _}) == max({len({j for _,j in obj if i == _}) 
                          for i in range(uppermost(obj), lowermost(obj) + 1)})}))
 
0.2966666666666667, 10.62774, def dhdecagegidbedfeaahhbfcehidbgbcd(I):
  # Find the largest object 
  x1 = objects(I, T, T, T) 
  x2 = argmax(x1, size) 

  # Get object color and leftmost column
  x3 = color(x2)  
  x4 = leftmost(x2) 

  # Create a new object by extending each cell to the right edge
  x5 = frozenset((x3, (i, j)) for v, (i, j) in x2 for j in range(x4, len(I[0]))) 

  # Paint the new object onto the input grid
  O = paint(I, x5) 
  return O
 
0.5266666666666667, 18.633669, def cbefcdbcfhcaedjfbhadbfbdeiccbeja(I):
  # Find the largest object (same as Version 1)
  x1 = objects(I, T, T, T) 
  x2 = argmax(x1, size) 

  # Get the rows occupied by the object
  x3 = {i for i, j in toindices(x2)}

  # Modify each row, filling with object color if the row contains the object
  O = tuple(tuple(color(x2) if i in x3 else v for v in r) for i, r in enumerate(I))
  return O
 
0.07666666666666667, 7.7372384, def cbcibefdhbecefbebbecdfbfchbdebfc(I):
  # Find the largest object (same as Version 1)
  x1 = objects(I, T, T, T) 
  x2 = argmax(x1, size) 

  # Get object color, leftmost and rightmost columns
  x3 = color(x2)
  x4 = leftmost(x2)
  x5 = rightmost(x2)

  # Create a mask for the object's bounding box
  x6 = frozenset((i, j) for i in range(height(I)) for j in range(x4, x5 + 1))

  # Fill the mask with the object's color and paint it onto the input grid
  O = paint(I, recolor(x3, x6))
  return O
 
0.8533333333333334, 52.01505, def bdfadhbaegahefddbedaafdcicbbdfbf(I):
  # Find the largest object (same as Version 1)
  x1 = objects(I, T, T, T) 
  x2 = argmax(x1, size) 

  # Create a grid of the object's color with the same dimensions as the input
  x3 = canvas(color(x2), shape(I))

  # Combine the input grid and the color grid, prioritizing the color grid where the object exists
  O = cellwise(x3, I, color(x2))
  return O
 
0.043333333333333335, 12.819088, def gjajhciicebcefeeibiifddbfdddjgic(I):
  O = []
  for row in I:
    newRow = list(row)
    first_non_zero = next((j for j, x in enumerate(row) if x != mostcolor(I)), -1)
    if first_non_zero != -1:
      for j in range(first_non_zero + 1, width(I)):
        if row[j - 1] != mostcolor(I) and row[j] != mostcolor(I):
          newRow[j] = row[j - 1]
    O.append(tuple(newRow))
  return tuple(O) 
 
0.11666666666666668, 8.850893, def fihidbbeejadehaiafebfcefgbbfbejd(I):
  for i in range(height(I)):
    row = I[i]
    for j in range(1, width(I)):
      if row[j] != mostcolor(I) and row[j - 1] == mostcolor(I):
        shift_amount = next((k for k in range(1, j + 1) if row[j - k] != mostcolor(I)), 1)
        I = paint(I, shift(toobject({(i, j)}, I), (0, -shift_amount)))
  return I
 
0.14666666666666667, 52.976562, def eccecbdhdgdaejehaffcebcaibacedbc(I):
  O = canvas(mostcolor(I), shape(I))
  for i in range(height(I)):
    for j in range(width(I) - 1):
      if I[i][j] == I[i][j+1] and I[i][j] != mostcolor(I):
        O = fill(O, I[i][j], connect((i,j), (i,j+1)))
  return O
 
0.12333333333333334, 43.288513, def bhdafcffdfadedjiaacfccaabfbebdbg(I):
  return paint(canvas(mostcolor(I), shape(I)), mfilter(objects(I, T, F, T), hline))
 
0.47666666666666674, 16.62326, def cbiafejfcjbhefjbicdbbfcdcebdbchg(I):
  c = mostcolor(I)
  o = objects(I, T, F, T)
  m = {}  # Create a dictionary to store merged objects
  for obj in o:
    col = color(obj)
    if col not in m:
      m[col] = obj
    else:
      m[col] = combine(m[col], obj) # Merge objects of the same color
  O = I
  for col, obj in m.items():
    O = fill(O, col, backdrop(toindices(obj)))  # Fill the backdrop of merged objects
  return O
 
0.33666666666666667, 7.2032304, def ihdbdigcffjfebeijfbahfgbedhcbfca(I):
  O = I
  for obj in objects(I, T, F, T):
    if 8 in {v for v, _ in obj}:
      indices = toindices(obj)
      row_indices = [(i,j) for i, j in indices if I[i][j] == 8]  # Get indices of '8' cells within the object
      max_length = 0
      start_j = 0
      for i in range(height(obj)):
          current_length = 0
          for j in range(width(obj)):
              if (i + uppermost(obj), j + leftmost(obj)) in row_indices:
                  current_length += 1
              else:
                  current_length = 0
              if current_length > max_length:
                  max_length = current_length
                  start_j = j - current_length + 1
      O = fill(O, 8, {(uppermost(obj) + i, j + leftmost(obj) + start_j) for i in range(height(obj)) for j in range(max_length, width(I))}) 
  return O
 
0.12666666666666668, 11.569819, def aicdjbdibdfbecigjbdejbfcebcedbfb(I):
    O = I
    for obj in objects(I, T, F, T):
        if 8 in {v for v, _ in obj}:
            row_data = {}
            for i, j in toindices(obj):
                if I[i][j] == 8:
                    if i not in row_data:
                        row_data[i] = []
                    row_data[i].append(j)
            max_len = 0
            target_row = 0
            for row, cols in row_data.items():
                if len(cols) > max_len:
                    max_len = len(cols)
                    target_row = row
            O = fill(O, 8, {(target_row, j) for j in range(rightmost(obj), len(I[0]))})
    return O
 
0.12, 11.198593, def bfafejgabhgaecfaiccjgbdjbajdjige(I):
    O = I
    for obj in objects(I, T, F, T):
        if color(obj) == 8:
            row_segments = {}
            current_row = None
            segment_start = None
            for j in range(leftmost(obj), rightmost(obj) + 1):
                for i in range(uppermost(obj), lowermost(obj) + 1):
                    if (i, j) in toindices(obj) and I[i][j] == 8:
                        if current_row is None:
                            current_row = i
                            segment_start = j
                        elif current_row != i:
                            if current_row not in row_segments:
                                row_segments[current_row] = (segment_start, j)
                            current_row = i
                            segment_start = j
                    else:
                        if current_row is not None:
                            if current_row not in row_segments:
                                row_segments[current_row] = (segment_start, j)
                            current_row = None
            if current_row is not None:
                row_segments[current_row] = (segment_start, rightmost(obj) + 1)
            max_len = 0
            target_row = 0
            for row, (start, end) in row_segments.items():
                if end - start > max_len:
                    max_len = end - start
                    target_row = row
            O = fill(O, 8, {(target_row, j) for j in range(rightmost(obj), len(I[0]))})
    return O
 
0.5866666666666666, 20.370405, def jahcacdgbabceibcjdhfdacffidajefa(I):
  # Find the largest object
  x1 = objects(I, T, T, T)
  x2 = argmax(x1, size)

  # Get the object's color
  x3 = color(x2)

  # Iterate through each row
  O = tuple()
  for i in range(len(I)):
    row = I[i]
    # Check if the row contains the object's color
    if any(v == x3 for v in row):
      # Replace the row with a row filled with the object's color
      O = O + (tuple(x3 for _ in range(len(row))),)
    else:
      # Keep the row unchanged
      O = O + (row,)
  return O
 
0.043333333333333335, 12.819088, def bifebgffgecgeaijbadjidgggdbhfgff(I):
  # Find the largest object
  x1 = objects(I, T, T, T)
  x2 = argmax(x1, size)

  # Get the object's color and indices
  x3 = color(x2)
  x4 = toindices(x2)

  # Create a new grid by mapping each cell
  O = tuple(
      tuple(
          x3 if (i, j) in x4 else I[i][j] 
          for j in range(len(I[0]))
      )
      for i in range(len(I))
  )
  return O
 
0.42333333333333334, 9.806155, def acaiahdgfjbjecfbbdhdeheggdebbaba(I):
  O = canvas(mostcolor(I), shape(I))
  for i in range(height(I)):
    row = I[i]
    start = next((j for j, v in enumerate(row) if v != mostcolor(I)), -1)
    if start != -1:
      current_color = row[start]
      for j in range(start + 1, width(I)):
        if row[j] != mostcolor(I):
          current_color = row[j]
        O = fill(O, current_color, {(i, j)})
  for j in range(width(I)):
    col = tuple(I[i][j] for i in range(height(I)))
    start = next((i for i, v in enumerate(col) if v != mostcolor(I)), -1)
    if start != -1:
      current_color = col[start]
      for i in range(start + 1, height(I)):
        if col[i] != mostcolor(I):
          current_color = col[i]
        O = fill(O, current_color, {(i, j)})
  return O
 
0.14666666666666667, 52.976562, def gbdegghcdbjbehdaifbciiafdifaeecb(I):
  O = I
  for i in range(height(I)):
    O = paint(O, recolor(I[i][0], hfrontier((i, 0))))
  for j in range(width(I)):
    O = paint(O, recolor(I[0][j], vfrontier((0, j))))
  return O
 
0.04666666666666667, 11.402004, def affieeagbcdeegbbabgibcedbaiegdec(I):
  c = mostcolor(I)
  o = objects(I, T, F, T)
  for i in range(len(o)):
    for j in range(i+1, len(o)):
      oi = totuple(o)[i]
      oj = totuple(o)[j]
      if color(oi) == color(oj):
        if hmatching(oi, oj):
          min_row = min(uppermost(oi), uppermost(oj))
          max_row = max(lowermost(oi), lowermost(oj))
          min_col = min(leftmost(oi), leftmost(oj))
          max_col = max(rightmost(oi), rightmost(oj))
          I = fill(I, color(oi), ((min_row, min_col), (max_row, max_col)))
        if vmatching(oi, oj):
          min_row = min(uppermost(oi), uppermost(oj))
          max_row = max(lowermost(oi), lowermost(oj))
          min_col = min(leftmost(oi), leftmost(oj))
          max_col = max(rightmost(oi), rightmost(oj))
          I = fill(I, color(oi), ((min_row, min_col), (max_row, max_col)))
  O = I
  return O
 
0.07666666666666667, 9.127581, def bghjbjbdjabbeagjbaebiebbhfbbbbja(I):
  c = mostcolor(I)
  O = I
  for i in range(len(I)):
    for j in range(len(I[0])):
      if I[i][j] != c:
        # Horizontal Check
        if j + 1 < len(I[0]) and I[i][j] == I[i][j + 1]:
          O = fill(O, I[i][j], ((i, i), (j, j + 1)))
        # Vertical Check
        if i + 1 < len(I) and I[i][j] == I[i + 1][j]:
          O = fill(O, I[i][j], ((i, i + 1), (j, j)))
  return O
 
0.14, 10.183575, def debaaagdeecaejbeahaadfhhefaeecfb(I):
  c = mostcolor(I)
  o = objects(I, T, F, T)
  for obj in o:
    for other_obj in o:
      if obj != other_obj and color(obj) == color(other_obj):
        # Horizontal Check
        if hmatching(obj, other_obj):
          min_col = min(leftmost(obj), leftmost(other_obj))
          max_col = max(rightmost(obj), rightmost(other_obj))
          for row in range(uppermost(obj), lowermost(obj) + 1):
            I = fill(I, color(obj), ((row, min_col), (row, max_col)))
        # Vertical Check
        if vmatching(obj, other_obj):
          min_row = min(uppermost(obj), uppermost(other_obj))
          max_row = max(lowermost(obj), lowermost(other_obj))
          for col in range(leftmost(obj), rightmost(obj) + 1):
            I = fill(I, color(obj), ((min_row, col), (max_row, col)))
  O = I
  return O
 
0.08666666666666667, 9.757291, def abceafbbbfejecieidbcgdcaidchaafd(I):
  for _ in range(len(I)):  # Iterate enough times to ensure connections
    for i in range(len(I)):
      for j in range(len(I[0])):
        if I[i][j] != 0:
          # Connect Right
          if j + 1 < len(I[0]) and I[i][j] == I[i][j + 1] and I[i][j + 1] != 0:
            I = fill(I, I[i][j], ((i, i), (j, j + 1)))
          # Connect Down
          if i + 1 < len(I) and I[i][j] == I[i + 1][j] and I[i + 1][j] != 0:
            I = fill(I, I[i][j], ((i, i + 1), (j, j)))
  return I
 
0.043333333333333335, 12.819088, def hcjdfabiifbhebdebfdbbeeeicefbbab(I):
  objs = objects(I, T, F, T)
  for obj in objs:
    if color(obj) == 8:
      start = leftmost(obj)
      end = rightmost(obj)
      row = uppermost(obj)
      fill_range = {(row, j) for j in range(start, end + 1)}
      I = fill(I, 8, fill_range)
  return I
 
0.18666666666666665, 9.993938, def acadbddgaebiebgejgfabhijaabdcbfi(I):
  # Find the largest object
  x1 = objects(I, T, T, T)
  x2 = argmax(x1, size)

  # Get object color, uppermost, and lowermost rows
  x3 = color(x2)
  x4 = uppermost(x2)
  x5 = lowermost(x2)

  # Get the column index of the leftmost occurrence of the object's color for each relevant row
  x6 = {min(j for j, v in enumerate(I[i]) if v == x3) for i in range(x4, x5 + 1) if any(v == x3 for v in I[i])}

  # Create a set of indices representing the extension
  x7 = {(i, j) for i in range(x4, x5 + 1) for j in range(min(x6), max(x6)) if (i, j) not in toindices(x2)}

  # Fill the extension with the object's color
  O = paint(I, recolor(x3, x7))
  return O
 
0.2733333333333334, 12.059929, def dffejehaeabbedjgjcdecebdaigedfba(I):
  # Find the largest object
  x1 = objects(I, T, T, T)
  x2 = argmax(x1, size)

  # Get the object's color and leftmost column
  x3 = color(x2)
  x4 = leftmost(x2)

  # Create a set of indices to be filled
  x5 = {(i, j) for i, r in enumerate(I) for j in range(x4) if any(c == x3 and k == i for c, (k, l) in x2)}

  # Fill the indices with the object's color
  O = paint(I, recolor(x3, x5))
  return O
 
0.17666666666666667, 7.0697827, def ecdgffgdecaeeidfbafaaggfjfdhadhf(I):
    O = canvas(0, shape(I))
    for obj in objects(I, T, F, T):
        if color(obj) == 8:
            target_row = valmax(toindices(obj), lambda x: x[0])
            O = paint(O, {(8, (target_row, j)) for j in range(leftmost(obj), len(I[0]))})
    return O
 
0.5866666666666666, 20.370405, def jhegabccabgaefbfbfdidcahehdcjaab(I):
  O = I
  for i in range(height(I)):
    for j in range(width(I)):
      if I[i][j] != mostcolor(I):
        O = paint(O, recolor(I[i][j], hfrontier((i, j))))
  return O
 
0.27999999999999997, 9.87252, def fffaaaebehdhedjcacecgejfbfdacabd(I):
  objs = objects(I, univalued=False, diagonal=False, without_bg=True)
  O = canvas(mostcolor(I), shape(I))
  for obj in objs:
    i, j = first(toindices(obj))
    O = paint(O, recolor(color(obj), {(i, k) for k in range(width(I))}))
  return O
 
0.17666666666666667, 22.442278, def jiagcageggdbeibdiaebfjfddfiiegaa(I):
  O = I
  for obj in objects(I, univalued=False, diagonal=False, without_bg=True):
    uppermost_row = uppermost(obj)
    O = paint(O, recolor(color(obj), hfrontier((uppermost_row, 0))))
  return O
 
0.15000000000000002, 7.0736346, def jibiejbfeidgefdbjbbaahibbadjjeij(I):
  O = canvas(mostcolor(I), shape(I))
  for j in range(width(I)):
    for i in range(height(I) - 1):
      if I[i][j] != mostcolor(I):
        fill_start = i + 1
        while fill_start < height(I) and I[fill_start][j] == mostcolor(I):
          fill_start += 1
        O = paint(O, {(I[i][j], (k, j)) for k in range(i, fill_start)}) 
  return O
 
0.07333333333333333, 7.634986, def jgfdfaccicehedeejfhfebadjfbjdjae(I):
  O = I
  for j in range(width(I)):
    start = None
    for i in range(height(I)):
      if I[i][j] != mostcolor(I) and start is None:
        start = i
      elif I[i][j] == mostcolor(I) and start is not None:
        O = fill(O, I[start][j], connect((start, j), (i, j)))
        start = None
    if start is not None:
      O = fill(O, I[start][j], connect((start, j), (height(I), j)))
  return O
 
0.08, 6.939262, def cihhicfieaiaeaabbacadhfecbcieidg(I):
  O = canvas(mostcolor(I), shape(I))
  for x in asindices(I):
    if index(I, x) != mostcolor(I):
      fill_start = x
      while index(I, fill_start) != mostcolor(I) and fill_start[0] > 0:
        fill_start = (fill_start[0] - 1, fill_start[1])
      O = paint(O, recolor(index(I, x), connect(fill_start, x)))
  return O
 
0.09333333333333334, 5.9700165, def edddecgeacahejcbabfihaccjbifcibd(I):
  o = objects(I, T, F, T)
  for obj in o:
    if color(obj) == mostcolor(I):
      continue
    shifted_obj = shift(obj, gravitate(obj, obj)) # No actual shifting happens here
    I = fill(I, color(obj), backdrop(shifted_obj))
  return I
 
0.14, 25.580675, def fcebbggceagdeiifabecfdciiddafgdc(I):
  obj = argmax(objects(I, T, F, T), lambda obj: width(obj) if hline(obj) else 0)
  start = (uppermost(obj), rightmost(obj))
  O = paint(canvas(mostcolor(I), shape(I)), obj)
  return fill(O, color(obj), connect(start, (start[0], width(I) - 1)))
 
0.14666666666666667, 16.861761, def gdbggfbbbjhaefcjabdddfieegegciah(I):
  O = canvas(mostcolor(I), shape(I))
  for obj in objects(I, T, F, T):
    if hline(obj):
      start = (uppermost(obj), rightmost(obj))
      O = paint(O, obj)
      O = fill(O, color(obj), connect(start, (start[0], width(I) - 1)))
  return O
 
0.33666666666666667, 7.2032304, def bcbbjdibeedeedfgjbedebbbjbahched(I):
  O = I
  for i in range(height(I)):
    row = I[i]
    if len(set(row)) == 2 and mostcommon(row) == mostcolor(I):
      v = other(set(row), mostcolor(I))
      O = fill(O, v, connect((i, row.index(v)), (i, width(I) - 1)))
  return O
 
0.26666666666666666, 20.07135, def eeefajgfbgefeefbjdeeajddjhfffdhf(I):
  O = canvas(mostcolor(I), shape(I))
  for j in range(width(I)):
    column = tuple(I[i][j] for i in range(height(I)))
    if len(set(column)) == 2 and mostcommon(column) == mostcolor(I):
      v = other(set(column), mostcolor(I))
      O = fill(O, v, connect((column.index(v), j), (height(I) - 1, j)))
  return rot270(O)
 
0.25666666666666665, 21.51188, def bcchegdfgiacefefibfcdiaiggcabeci(I):
  c = mostcolor(I)
  O = I
  for obj in objects(I, T, F, T):
    if color(obj) != c:
      leftmost_j = leftmost(obj)
      rightmost_j = rightmost(obj)
      for i in range(uppermost(obj), lowermost(obj) + 1):
        for j in range(len(I[0])):
          if j < leftmost_j:
            if index(I, (i, j)) == c:
              O = fill(O, color(obj), ((i, i), (j, leftmost_j)))
          elif j > rightmost_j:
            if index(I, (i, j)) == c:
              O = fill(O, color(obj), ((i, i), (rightmost_j + 1, j + 1)))
  return O
 
0.11333333333333334, 10.248243, def aigfeffafcdbebedjbaffcecjedchjje(I):
  c = mostcolor(I)
  O = I
  for obj in objects(I, T, F, T):
    if color(obj) != c:
      for i in range(uppermost(obj), lowermost(obj) + 1):
        left_fill = ((i, i), (0, leftmost(obj)))
        right_fill = ((i, i), (rightmost(obj) + 1, len(I[0])))
        O = branch(
          any(index(I, (i, j)) != c for j in range(0, leftmost(obj))),
          O,
          fill(O, color(obj), left_fill)
        )
        O = branch(
          any(index(I, (i, j)) != c for j in range(rightmost(obj) + 1, len(I[0]))),
          O,
          fill(O, color(obj), right_fill)
        )
  return O 
 
0.1366666666666667, 7.9645376, def jdafdiaffideeiheafbddjdafdcdffae(I):
  c = mostcolor(I)
  O = I
  for obj in objects(I, T, F, T):
    if color(obj) != c:
      h = height(obj)
      for j in range(leftmost(obj), rightmost(obj) + 1):
        left_extension = connect((uppermost(obj), j), (uppermost(obj) - h, j))
        right_extension = connect((lowermost(obj), j), (lowermost(obj) + h, j))
        O = underfill(O, color(obj), left_extension)
        O = underfill(O, color(obj), right_extension)
  return O
 
0.10333333333333333, 9.510744, def cadchddbgbbfecgajjhcdaabbcdecabd(I):
  O = I
  for i in range(len(I)):
    for j in range(len(I[0])):
      if I[i][j] != mostcolor(I):
        O = fill(O, I[i][j], ((i, i), (0, j))) if j < len(I[0]) // 2 else fill(O, I[i][j], ((i, i), (j, len(I[0]))))
  return O
 
0.16, 12.434954, def cfdhdiacjjgcececjjcehdeegjebchci(I):
  O = I
  for obj in objects(I, T, F, T):
    if color(obj) != mostcolor(I):
      direction = (-1, 0) if centerofmass(obj)[1] < len(I[0]) // 2 else (1, 0)
      for cell in toindices(obj):
        ray = shoot(cell, direction)
        O = underfill(O, color(obj), ray)
  return O
 
0.22333333333333336, 12.238414, def eefdidfachcdedfabfcffdeafacdcbbe(I):
  # Find the largest object
  obj = argmax(objects(I, T, T, T), size)
  
  # Get the object's color
  obj_color = color(obj)

  # Get the object's bounding box
  obj_left = leftmost(obj)
  obj_right = rightmost(obj)

  # Determine fill direction based on object's position
  fill_direction = LEFT if obj_left < width(I) // 2 else RIGHT

  # Create indices to fill
  fill_indices = frozenset()
  for i in range(uppermost(obj), lowermost(obj) + 1):
    if fill_direction == LEFT:
      fill_indices |= frozenset({(i, j) for j in range(0, obj_left)})
    else:
      fill_indices |= frozenset({(i, j) for j in range(obj_right + 1, width(I))})

  # Fill the grid
  O = paint(I, recolor(obj_color, fill_indices))
  return O
 
0.21000000000000005, 14.910876, def gdaafhbhaeebeiahiagdaedjdbdjjghb(I):
  # Find the largest object
  obj = argmax(objects(I, T, T, T), size)

  # Get the object's color and leftmost position
  obj_color = color(obj)
  obj_left = leftmost(obj)

  # Define a function to fill a row based on the object's position
  def fill_row(row_index):
    return tuple(obj_color if j < obj_left else I[row_index][j] for j in range(width(I)))

  # Apply the fill function to each row if the object is in the right half
  O = tuple(fill_row(i) if obj_left > width(I) // 2 else I[i] for i in range(height(I)))
  return O
 
0.32, 15.309686, def aedacchbbgfeecehbbbdfffffbcjajja(I):
  # Find the largest object
  obj = argmax(objects(I, T, T, T), size)

  # Get the object's color and bounding box information
  obj_color = color(obj)
  leftmost_col = leftmost(obj)
  rightmost_col = rightmost(obj)

  # Create a new grid by iterating through rows and columns
  O = tuple(
      tuple(
          obj_color if (j < leftmost_col and leftmost_col < width(I) // 2) or 
                      (j > rightmost_col and rightmost_col >= width(I) // 2) 
          else I[i][j] 
          for j in range(width(I))
      )
      for i in range(height(I))
  )
  return O
 
0.0, 112.90182, def jiahdcgcbacdeabdagffdfeacabehaje(I):
  O = canvas(mostcolor(I), shape(I))
  for j in range(width(I)):
    column = tuple(I[i][j] for i in range(height(I)))
    new_column = tuple(column[k] if any(v != mostcolor(I) for v in column[:k+1]) else mostcolor(I) for k in range(height(I)))
    O = hconcat(O, (new_column,))
  return O
 
0.18666666666666665, 15.345382, def ddcadjgacedheafbbdjdddcgcaifcecd(I):
  O = I
  for j in range(width(I)):
    for i in range(1, height(I)):
      if O[i][j] != mostcolor(I) and O[i-1][j] == mostcolor(I):
        k = i - 1
        while k >= 0 and O[k][j] == mostcolor(I):
          O = paint(O, {(O[i][j], (k, j))})
          k -= 1
  return O
 
0.03333333333333333, 7.880328, def dhidjafajfdaeahiaidcdcafeecfebjh(I):
  c = mostcolor(I)
  o = objects(I, T, F, T)
  for obj in o:
    for other_obj in o:
      if obj != other_obj and color(obj) == color(other_obj):
        if hmatching(obj, other_obj):
          start = (uppermost(obj), min(leftmost(obj), leftmost(other_obj)))
          end = (uppermost(obj), max(rightmost(obj), rightmost(other_obj)))
          if all(index(I, (start[0], x)) == c for x in range(start[1] + 1, end[1])):
            I = fill(I, color(obj), connect(start, end))
        elif vmatching(obj, other_obj):
          start = (min(uppermost(obj), uppermost(other_obj)), leftmost(obj))
          end = (max(lowermost(obj), lowermost(other_obj)), leftmost(obj))
          if all(index(I, (y, start[1])) == c for y in range(start[0] + 1, end[0])):
            I = fill(I, color(obj), connect(start, end))
  return I
 
0.06333333333333334, 12.100021, def cbebggjdifcceccfahajaadagcfcaeba(I):
  c = mostcolor(I)
  o = objects(I, T, F, T)
  for obj in o:
    for other in o:
      if color(obj) == color(other) and obj != other:
        g = gravitate(obj, other)
        if g != (0, 0):
          line = connect(center(obj), add(center(obj), g))
          if all(index(I, loc) == c for loc in line if loc not in toindices(obj) and loc not in toindices(other)):
            I = paint(I, recolor(color(obj), line)) 
  return I
 
0.43999999999999995, 21.34985, def gbhhbdffhjehecfbbeachabedbjcbgfa(I):
  # Find the largest object
  obj = argmax(objects(I, T, T, T), size)
  
  # Get the object's color and rightmost column
  obj_color = color(obj)
  rightmost_col = rightmost(obj)

  # Create a new grid by extending the object to the rightmost column
  O = tuple(
      tuple(
          obj_color if j <= rightmost_col or (j > rightmost_col and I[i][j] == obj_color)
          else I[i][j]
          for j in range(width(I))
      )
      for i in range(height(I))
  )
  return O
 
0.10333333333333333, 10.624021, def cabbjecffdibedhcbjceejcbgedddafd(I):
  # Find the largest object
  obj = argmax(objects(I, T, T, T), size)
  
  # Get the object's color
  obj_color = color(obj)

  # Create a mask by horizontally mirroring the object 
  mask = hmirror(obj)

  # Shift the mask to align with the object's right edge
  mask = shift(mask, (0, rightmost(obj) - leftmost(mask) + 1))

  # Combine the object and the mask, filling with the object's color
  O = paint(I, recolor(obj_color, combine(toindices(obj), toindices(mask))))
  return O
 
0.8966666666666666, 75.41259, def abfcjgdaecbjecafidbcabfeidcghfff(I):
  # Find the largest object
  obj = argmax(objects(I, T, T, T), size)
  
  # Get the object's color
  obj_color = color(obj)

  # Create a canvas filled with the object's color
  filled_canvas = canvas(obj_color, shape(I))

  # Combine the input grid and filled canvas, prioritizing the input grid 
  # where it doesn't match the object's color
  O = cellwise(I, filled_canvas, lambda a, b: a if a != obj_color else b)
  return O
 
0.07, 4.088283, def efjafadffbdbefcbbgedhfabchfdgdhh(I):
  lines = sfilter(objects(I, T, F, T), hline)  # Extract horizontal lines of non-background color
  longest_line = extract(lines, lambda obj: width(obj) == valmax(lines, width)) if lines else frozenset()
  if longest_line:
    start_row = uppermost(longest_line)
    start_col = rightmost(longest_line)
    extension = connect((start_row, start_col), (start_row, width(I) - 1))
    return paint(I, recolor(color(longest_line), extension))
  return I
 
0.05333333333333334, 2.9536488, def bediccefjfadebebjdjafcaabbffdajg(I):
  lines = sorted(((width(obj), obj) for obj in objects(I, T, F, T) if hline(obj)), reverse=True)
  if lines:
    longest_line = lines[0][1]
    start_row = uppermost(longest_line)
    return paint(I, recolor(color(longest_line), {(start_row, j) for j in range(rightmost(longest_line) + 1, width(I))}))
  return I
 
0.5866666666666666, 20.370405, def dbggacafcebbehbfiddbbggbfeebdcea(grid):
  return tuple(
      tuple(8 for _ in range(width(grid))) if len(set(row) - {mostcolor(grid)}) > 0 
      else tuple(mostcolor(grid) for _ in range(width(grid))) 
      for row in grid
  )
 
0.33, 7.189786, def fcgcdifbdgfhebeebcbdhhhhajhadidb(I):
  # Find the largest object
  obj = argmax(objects(I, T, T, T), size)
  
  # Get object color and rightmost column
  obj_color = color(obj)
  obj_rightmost = rightmost(obj)

  # Extend the object to the right in each row
  O = tuple(
      tuple(
          obj_color if any(j >= k for k in range(obj_rightmost + 1) if I[i][k] == obj_color) else I[i][j]
          for j in range(width(I))
      )
      for i in range(height(I))
  )
  return O
 
0.33666666666666667, 7.2032304, def gdjaedcgbbddedacjfihdicdcfhideah(I):
  # Find the largest object
  obj = argmax(objects(I, T, T, T), size)
  
  # Get the object's color
  obj_color = color(obj)

  # Create a function to fill a row to the right from a starting column
  def fill_row_right(row, start_col):
    return tuple(obj_color if j >= start_col and row[j] != obj_color else row[j] for j in range(len(row)))

  # Apply the fill function to each row
  O = tuple(
      fill_row_right(row, min([j for j, v in enumerate(row) if v == obj_color] or [width(I)]))
      for row in I
  )
  return O
 
0.06333333333333334, 5.585592, def ecefaffbefgfebieabdfgfieceiehfba(I):
  # Find the largest object and its color
  obj = argmax(objects(I, T, T, T), size)
  obj_color = color(obj)

  # Find the rightmost column of the largest object
  max_col = max(j for _, (i, j) in obj)

  # Create a new grid by extending the object to the right
  O = tuple(
      tuple(
          obj_color if any(k <= j <= max_col and v == obj_color for k, v in enumerate(row)) else v
          for j, v in enumerate(row)
      )
      for row in I
  )
  return O
 
0.33666666666666667, 7.2032304, def bheadfaaccgbeeeaicbiadbabcibadia(I):
    O = I
    for i in range(height(I)):
      current_color = None
      start_j = None
      for j in range(width(I)):
        if I[i][j] != mostcolor(I):
          if current_color is None:
            current_color = I[i][j]
            start_j = j
          elif I[i][j] == current_color:
            continue
          else:
            O = paint(O, recolor(current_color, frozenset({(i, k) for k in range(start_j, j)})))
            current_color = I[i][j]
            start_j = j
      if current_color is not None:
        O = paint(O, recolor(current_color, frozenset({(i, k) for k in range(start_j, width(I))})))
    return O
 
0.06666666666666667, 18.046988, def jcffjieefdcbegefibchafdjbjdicada(I):
  O = canvas(mostcolor(I), shape(I))
  for obj in objects(I, False, False, True):
    if size(obj) > 1:
      first_color = color(obj)
      min_j = leftmost(obj)
      max_j = rightmost(obj)
      for i in range(uppermost(obj), lowermost(obj) + 1):
        O = paint(O, recolor(first_color, frozenset({(i, k) for k in range(min_j, max_j + 1)})))
  return O
 
0.07333333333333335, 6.0706453, def ddeddfighdbiehfcbjgihbibjdhabaha(I):
  for obj in objects(I, T, F, T):
    if hline(obj):
      if width(obj) == width(I):
        return I 
      else:
        start_j = rightmost(obj) + 1
        I = paint(I, recolor(color(obj), {(uppermost(obj), j) for j in range(start_j, width(I))}))
  return I
 
0.17666666666666667, 21.502771, def fafaejihaiibeahcagjjdhaheddceece(I):
  O = I
  c = mostcolor(I)
  for obj in objects(I, univalued=True, diagonal=False, without_bg=True):
    for i, j in toindices(obj):
      for k in range(j + 1, width(I)):
        if index(I, (i, k)) != c:
          break
        O = fill(O, I[i][j], ((i, i), (j, k)))
  return O
 
0.10999999999999999, 39.529556, def cicjiihebeccefcdjjhdabgebdfceeje(I):
  O = canvas(mostcolor(I), shape(I))
  for obj in objects(I, univalued=True, diagonal=False, without_bg=True):
    u, l = ulcorner(obj)
    r = rightmost(obj)
    O = paint(O, {(I[u][l], (u, j)) for j in range(l, r + 1)})
  return O
 
0.12, 12.611229, def efigjbfjcgbhedfeaghficdbabfecdbj(I):
  O = I
  for i, row in enumerate(I):
    j = 0
    while j < width(I):
      if I[i][j] != mostcolor(I):
        k = j + 1
        while k < width(I) and I[i][k] == mostcolor(I):
          k += 1
        O = fill(O, I[i][j], ((i, i), (j, k - 1)))
        j = k
      else:
        j += 1
  return O 
 
0.29, 7.551389, def abcebbedeadaeecjbbdiebdffjhaddfj(I):
  return tuple(
      tuple(
          next((v for v in row[j:] if v != mostcolor(I)), mostcolor(I)) 
          for j in range(len(row))
      )
      for row in I
  )
 
0.10000000000000002, 13.412787, def ahiaaeebcabcefagjfchcfaabegcaffb(I):
  O = I
  for obj in objects(I, univalued=True, diagonal=False, without_bg=True):
    O = paint(O, recolor(color(obj), connect(ulcorner(obj), (ulcorner(obj)[0], width(I) - 1))))
  return O
 
