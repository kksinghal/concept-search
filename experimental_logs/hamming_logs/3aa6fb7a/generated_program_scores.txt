0.4489795918367347, 18.295355, def hebcajeehhfdeehhbfdegchaagfefefi(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  target_indices = mapply(lambda obj: mapply(ineighbors, toindices(obj)), objs)
  O = paint(I, recolor(1, target_indices))
  return O
 
0.41836734693877553, 18.998072, def djahccacfcdeedgdjgcaejcdfabdfidi(I):
    O = I
    for i in range(1, len(I) - 1):
        for j in range(1, len(I[0]) - 1):
            if I[i][j] == 8:
                O = fill(O, 1, {(i - 1, j - 1), (i - 1, j + 1), (i + 1, j - 1), (i + 1, j + 1)})
    return O
 
0.26530612244897955, 29.21883, def cdacdhaaeeebedgbbgbedbddebbaaceg(I):
  O = I  
  for i in range(len(I)):
    for j in range(len(I[0])):
      if I[i][j] == 8:
        for di, dj in [(0, 1), (1, 0), (0, -1), (-1, 0)]:
          ni, nj = i + di, j + dj
          if 0 <= ni < len(I) and 0 <= nj < len(I[0]) and I[ni][nj] == 0:
            O = fill(O, 1, {(ni, nj)}) 
  return O
 
0.9489795918367347, 54.593487, def jdfdcdjfdgdfeddaahgffaadfedadebg(I):
  shifted_right = shift(asobject(I), RIGHT)
  shifted_left = shift(asobject(I), LEFT)
  shifted_down = shift(asobject(I), DOWN)
  shifted_up = shift(asobject(I), UP)
  combined = shifted_right | shifted_left | shifted_down | shifted_up
  target_cells = intersection(toindices(combined), asindices(I))
  O = fill(I, 1, target_cells)
  return O
 
0.10204081632653061, 13.422194, def dhgfgfbfaafcecibjdcafgfedagacibj(I):
  # Find the most frequent non-zero color
  common_color = mostcommon([v for row in I for v in row if v != 0])

  def update_row(row, color):
      occurrences = 0
      new_row = ()
      for v in row:
          if v == color:
              occurrences += 1
              if occurrences == 2:
                  new_row = new_row + (1,)
              else:
                  new_row = new_row + (v,)
          else:
              new_row = new_row + (v,)
      return new_row

  result = tuple(update_row(row, common_color) for row in I)
  return result
 
0.061224489795918366, 3.9717128, def hbajefaaacgfeeecihcbceadbffgdcfc(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  new_cells = set()
  for obj in objs:
    uppermost_row = uppermost(obj)
    leftmost_col = leftmost(obj)
    lowermost_row = lowermost(obj)
    rightmost_col = rightmost(obj)
    for v, (i, j) in obj:
      if i == uppermost_row and j == leftmost_col:
        new_cells.add((i, j + 1))
      if i == lowermost_row and j == rightmost_col:
        new_cells.add((i, j - 1))
  O = fill(I, 1, frozenset(new_cells))
  return O
 
0.07142857142857142, 3.8043897, def eiihfbbfcbbdeaaeaffcbdheabadjdeg(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  O = I
  for obj in objs:
    ul = ulcorner(obj)
    lr = lrcorner(obj)
    O = fill(O, 1, frozenset({(ul[0], ul[1] + 1), (lr[0], lr[1] - 1)}))
  return O
 
0.13265306122448978, 13.481905, def ejajbgdagfieeafaifjfgebebdcfcecd(I):
  O = I
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if val == 8:
        if I[i-1][j] != 8 and i > 0:
          O = fill(O, 1, frozenset({(i, j + 1)}))
        if  i < len(I) - 1 and I[i+1][j] != 8:
          O = fill(O, 1, frozenset({(i, j - 1)}))
  return O
 
0.10204081632653061, 13.3862, def becdcbbegfbaehdfbhdcjhefdbjfecha(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  new_cells = set()
  for obj in objs:
    for i, j in toindices(obj):
      if index(I, (i, j + 1)) != 8 and index(I, (i, j - 1)) != 8:
        new_cells.add((i, j))
  O = fill(I, 1, frozenset(new_cells))
  return O
 
0.22448979591836737, 15.384187, def jgedbcdagccaedbibjccdcdfjadeaahf(I):
  shifted_right = shift(asobject(I), (0, 1))
  shifted_left = shift(asobject(I), (0, -1))
  intersection_right = toindices(intersection(shifted_right, asobject(I)))
  intersection_left = toindices(intersection(shifted_left, asobject(I)))
  O = fill(I, 1, intersection_right - intersection_left)
  return O
 
0.23469387755102042, 17.694246, def ciaigdebgedgeaicieeaaejhbjdhcfcb(I):
  O = I
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if val != mostcommon(I):
        if i+1 < height(I) and j+1 < width(I):
          O = fill(O, val, {(i+1, j+1)})
  return O
 
0.20408163265306123, 55.30749, def jabacbfbdafbedjfabddbihfdciccghh(I):
  shifted_grids = [shift(asobject(I), d) for d in [(1, 1), (1, -1), (-1, 1), (-1, -1)]]
  overlay = I
  for g in shifted_grids:
    overlay = cellwise(overlay, [[v if (i,j) not in toindices(g) else 1 for j, v in enumerate(row)] for i, row in enumerate(overlay)], 0)
  return overlay
 
0.2857142857142857, 28.250948, def dahiehjghfigecbfbifcbabeidahfbec(I):
  obj = toobject(ofcolor(I, 8), I)  # Extract the object formed by '8'
  neighbors_indices = difference(backdrop(obj), toindices(obj)) # Find indices in bounding box but not part of the object
  filtered_neighbors = intersection(neighbors_indices, asindices(I)) # Keep only valid indices within grid boundaries
  O = fill(I, 1, filtered_neighbors)  # Fill the neighbor cells with '1'
  return O
 
0.05102040816326531, 14.839132, def jjdcadjibfdiedgabhaijehacafddfib(I):
  obj8 = toindices(extract(objects(I, T, F, F), lambda x: color(x) == 8))  # Get indices of the '8' object
  shifted_objs = apply(lambda direction: shift(obj8, direction), [UP, DOWN, LEFT, RIGHT])  # Shift object in all directions
  neighbor_indices = mfilter(shifted_objs, lambda obj: len(intersection(obj, obj8)) == 0 and len(intersection(obj, asindices(I))) > 0) # Filter valid neighbors
  O = fill(I, 1, neighbor_indices)  # Fill neighbor cells with '1'
  return O
 
0.061224489795918366, 7.9685397, def eeigfbgdfcbceicbafefbbbiefcidafd(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  O = I
  for obj in objs:
    if size(obj) > 1:
      lr = lrcorner(obj)
      O = fill(O, 1, frozenset({(lr[0], lr[1] - 1)}))
  return O
 
0.10204081632653061, 21.122545, def fjdfdecaidbceebdjhjefbigicaaefji(I):
  O = canvas(0, shape(I))
  for obj in objects(I, univalued=True, diagonal=False, without_bg=True):
    new_obj = frozenset({(v, (i, j - 1)) if (i, j) == lrcorner(obj) and size(obj) > 1 else (v, (i, j)) for v, (i, j) in obj})
    O = paint(O, new_obj)
  return O
 
0.17346938775510204, 7.0208054, def aeiefddbhdhjeefebagbbhjdahebadfi(I):
  objs = objects(I, T, T, T)
  shifted_objs = frozenset(shift(obj, (1, 1)) for obj in objs)
  O = I
  for obj in objs:
    O = fill(O, 1, {ulcorner(toindices(obj))})
  for obj in shifted_objs:
    O = paint(O, obj)
  return O
 
0.7551020408163265, 28.459152, def igfdabddbgcbecehahcafcbdbcfddhbb(I):
  O = I
  for i in range(height(I) - 1):
    for j in range(width(I) - 1):
      if I[i][j] != mostcommon(I):
        O = fill(O, 1, {(i, j)})
        O = fill(O, I[i][j], {(i+1, j+1)})
  return O
 
0.9489795918367347, 54.593487, def bfebfjccfjccebggjbbhdhbjbfdcefbb(I):
  indices = asindices(I)
  shifted_indices = frozenset((i+1, j+1) for i, j in indices if 0<=i+1<height(I) and 0<=j+1<width(I))
  shifted_obj = toobject(shifted_indices, I)
  O = paint(canvas(mostcommon(I), shape(I)), shifted_obj)
  for i, j in indices:
    if I[i][j] != mostcommon(I):
        O = fill(O, 1, {(i, j)})
  return O
 
0.13265306122448978, 6.6386123, def fbcfceafceacefdfbefbdgjefbaabfjj(I):
  O = I
  for obj in objects(I, T, T, T):
    O = underpaint(O, shift(obj, (1, 1)))
    O = underfill(O, 1, {ulcorner(toindices(obj))})
  return O
 
0.33673469387755106, 7.7728786, def acfabfddffhgeefdaecadeibdbdccfai(I):
  O = canvas(0, shape(I))
  for i, j in asindices(I):
    if I[i][j] == 8:
      for di, dj in [(1, 1), (1, -1), (-1, 1), (-1, -1)]:
        ni, nj = i + di, j + dj
        if 0 <= ni < len(I) and 0 <= nj < len(I[0]):
          O = fill(O, 1, {(ni, nj)})
    else:
      O = fill(O, I[i][j], {(i, j)})
  return O
 
0.13265306122448978, 8.5422735, def ceffgjfadbdfejjiibdfahhgfiejajhb(I):
  obj8 = toindices(extract(objects(I, True, False, False), lambda x: color(x) == 8))
  neighbor_cells = set()
  for cell in obj8:
    for d in [UP, DOWN, LEFT, RIGHT]:
      neighbor = add(cell, d)
      if neighbor not in obj8 and 0 <= neighbor[0] < len(I) and 0 <= neighbor[1] < len(I[0]):
        neighbor_cells.add(neighbor)
  O = fill(I, 1, neighbor_cells)
  return O
 
0.05102040816326531, 8.904767, def ccbhddjieccieffgaaefbdiejecjcbfe(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  def find_right_edge_cells(obj):
    return frozenset((v, (i, j - 1)) for (v, (i, j)) in obj if j == rightmost(obj))
  right_edge_objs = mapply(find_right_edge_cells, objs)
  return paint(I, right_edge_objs)
 
0.20408163265306123, 13.787015, def ghfaajfddcigeiecbcdcejejgdigibed(I):
  def process_object(obj):
    j_max = rightmost(obj)
    return frozenset((i, j - 1) for (i, j) in toindices(obj) if j == j_max)
  right_edges = mfilter(objects(I, univalued=True, diagonal=False, without_bg=True), process_object)
  return fill(I, 1, right_edges) 
 
0.15306122448979592, 12.818071, def jdfgdgfcjejbejdcibbgageceaicahcc(I):
  def right_edge_condition(v, i, j, grid):
    return j < len(grid[0]) - 1 and grid[i][j + 1] != v and grid[i][j] != mostcolor(grid)
  right_edges = frozenset((i, j) for i in range(len(I)) for j in range(len(I[0])) if right_edge_condition(I[i][j], i, j, I))
  return fill(I, 1, right_edges)
 
0.24489795918367346, 8.811007, def gabbibhabghbeicfiehdebhfejcieefa(I):
    O = I
    for obj in objects(I, T, T, T):
        O = cover(O, obj)
        O = paint(O, shift(obj, (1, 1)))
        O = fill(O, 1, {ulcorner(obj)})
    return O
 
0.3469387755102041, 29.865051, def acabfddjedgfeebbjbfjegccbgfjbdia(I):
  O = I
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if val == 8:
        for di, dj in [(1, 1), (1, -1), (-1, 1), (-1, -1)]:
          ni, nj = i + di, j + dj
          if 0 <= ni < len(I) and 0 <= nj < len(row) and I[ni][nj] == 0:
            O = fill(O, 1, {(ni, nj)})
  return O
 
0.20408163265306123, 16.031929, def cahaaccdecahedfaaecjabfhcdebddfi(I):
  def change_neighbor(loc):
    i, j = loc
    for di, dj in [(1, 1), (1, -1), (-1, 1), (-1, -1)]:
      ni, nj = i + di, j + dj
      if 0 <= ni < len(I) and 0 <= nj < len(I[0]) and I[ni][nj] == 0:
        return (1, (ni, nj))
    return (0, (i, j)) # Return original cell if no change

  return paint(I, frozenset(change_neighbor((i,j)) for i, row in enumerate(I) for j, val in enumerate(row) if val == 8)) 
 
0.5408163265306123, 14.518538, def fdbihjdebjjeeidbjcefabfdcecaebdd(I):
  shifted_grid = shift(asobject(I), (0, 1))
  right_edges = toindices(intersection(asobject(I), shifted_grid))
  return fill(I, 1, frozenset((i, j + 1) for i, j in right_edges))
 
0.061224489795918366, 7.9685397, def adffadfbdaadejagjbcbbefeafcfehab(I):
  O = I
  for obj in objects(I, T, T, T):
    O = fill(O, 1, {(uppermost(obj) + 1, leftmost(obj))}) 
  return O
 
0.25510204081632654, 41.18881, def ecbfabfhdjfiehheihfcicedcbejdjdf(I):
  O = canvas(0, shape(I))
  for i, j in asindices(I):
    if I[i][j] == 8:
      for di, dj in [(1, 1), (1, -1), (-1, 1), (-1, -1)]:
        ni, nj = i + di, j + dj
        if 0 <= ni < len(I) and 0 <= nj < len(I[0]) and I[ni][nj] == 0 and O[ni][nj] == 0:
          O = fill(O, 1, {(ni, nj)})
          break # Only fill one neighbor
    else:
      O = fill(O, I[i][j], {(i, j)})
  return O
 
0.13265306122448978, 4.786057, def edhjedfceeeaeheaicbaiifbbccacaai(I):
  O = I
  for obj in objects(I, univalued=True, diagonal=False, without_bg=True):
    for (v, (i, j)) in obj:
      if j == rightmost(obj):
        O = fill(O, 1, {(i, j + 1)})
  return O
 
0.05102040816326531, 14.839132, def cefdfbaedcajeadibgiaaebfdffafdhi(I):
  O = canvas(mostcommon(I), shape(I))
  indices = mfilter(objects(I, T, T, T), lambda obj: len(obj) > 1)
  for (i, j) in indices:
    O = fill(O, 1, {(i + 1, j)})
  return paint(O, asobject(I))
 
0.08163265306122448, 5.185691, def fdefggdidgchecbebdddjcbachecjdjj(I):
    def change_neighbor(loc):
        i, j = loc
        neighbors = ((i+1, j-1), (i+1, j+1), (i-1, j-1), (i-1, j+1))
        for ni, nj in neighbors:
            if 0 <= ni < len(I) and 0 <= nj < len(I[0]) and I[ni][nj] == 0:
                return (1, (ni, nj))
        return None

    new_objects = set()
    for obj in objects(I, univalued=True, diagonal=False, without_bg=False):
        if color(obj) == 8:
            for cell in obj:
                new_object = change_neighbor(cell[1])
                if new_object is not None:
                    new_objects.add(new_object)
                    break
    return paint(I, frozenset(new_objects))
 
0.14285714285714285, 15.482731, def jeidffecedfhecjeaegfbedbgfhcacei(I):
  def find_empty_neighbor(loc):
    return extract(ineighbors(loc), lambda nloc: 0 <= nloc[0] < len(I) and 0 <= nloc[1] < len(I[0]) and I[nloc[0]][nloc[1]] == 0)

  new_cells = set()
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if val == 8:
        empty_neighbor = find_empty_neighbor((i, j))
        if empty_neighbor:
          new_cells.add((1, empty_neighbor))
  return paint(I, frozenset(new_cells))
 
0.11224489795918366, 6.8325863, def cjahaafdhbcfejhejiifcdiefijcgcba(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  return fill(I, 1, merge({shift(obj, (0, 1)) - obj for obj in objs}))
 
0.05102040816326531, 14.839132, def icaegeadjccbefddjbdcbbgdbgjccjif(I):
  shifted_right = shift(asobject(I), (0, 1))
  return fill(I, 1, toindices(intersection(shifted_right, asobject(replace(I, 0, 1)))) - toindices(asobject(I)))
 
0.15306122448979592, 8.601179, def aheabdedbfbfehidbcbicadjghdaadaf(I):
  O = I
  for i, row in enumerate(I):
    for j, value in enumerate(row):
      if value != mostcommon(I) and (i == 0 or I[i-1][j] == mostcommon(I)):
        O = fill(O, 1, {(i+1, j)})
  return O
 
0.08163265306122448, 6.1983795, def haacfibjifacebebiffifbdecaiibdeb(I):
  def find_diagonal_empty(loc):
    i, j = loc
    for di, dj in [(0, 1), (1, 1), (1, 0), (1, -1), (0, -1), (-1, -1), (-1, 0), (-1, 1)]:
      ni, nj = i + di, j + dj
      if 0 <= ni < len(I) and 0 <= nj < len(I[0]) and I[ni][nj] == 0:
        return (ni, nj)
    return None

  new_cells = set()
  for obj in objects(I, univalued=True, diagonal=False, without_bg=False):
    if color(obj) == 8:
      for cell in obj:
        empty_neighbor = find_diagonal_empty(cell[1])
        if empty_neighbor:
          new_cells.add((1, empty_neighbor))
          break
  return paint(I, frozenset(new_cells))
 
0.05102040816326531, 8.72322, def cbcgfiacffbcebfbihcgidacfdfbgaca(I):
  def find_first_empty(locs):
    for loc in locs:
      i, j = loc
      for di, dj in [(0, 1), (1, 1), (1, 0), (1, -1), (0, -1), (-1, -1), (-1, 0), (-1, 1)]:
        ni, nj = i + di, j + dj
        if 0 <= ni < len(I) and 0 <= nj < len(I[0]) and I[ni][nj] == 0:
          return (ni, nj)
    return None

  new_cell = find_first_empty(totuple(ofcolor(I, 8)))
  return I if new_cell is None else fill(I, 1, {new_cell})
 
0.41836734693877553, 15.747148, def abfadfceddbaechdabifcfejdagbhfig(I):
  # Identify the object formed by the digit 8
  obj = objects(I, T, F, T)
  # Find all indices adjacent to the object
  adjacent_indices = mapply(dneighbors, mapply(toindices, obj))
  # Create a new object with value 1 at the adjacent indices
  new_obj = recolor(ONE, adjacent_indices)
  # Paint the new object onto the input grid
  O = paint(I, new_obj)
  return O
 
0.26530612244897955, 29.21883, def bjhbbfhfagdcefidafiabifffbffdgei(I):
  # Find all indices of the digit 8
  obj_indices = ofcolor(I, EIGHT)
  # Expand the indices to include their direct neighbors
  expanded_indices = mapply(dneighbors, obj_indices)
  # Find the difference between expanded indices and original indices
  adjacent_indices = difference(expanded_indices, obj_indices)
  # Fill the adjacent indices with value 1
  O = fill(I, ONE, adjacent_indices)
  return O 
 
0.05102040816326531, 14.839132, def bjcdgeidadaaececaffcejjdaajdgfcb(I):
    # Find all objects in the grid
    objs = objects(I, T, F, T)
    # Find indices adjacent to each object
    adjacent_to_objs = mapply(lambda obj: delta(backdrop(toindices(obj))), objs)
    # Intersect adjacent indices with grid indices to stay within bounds
    valid_adjacent_indices = intersection(adjacent_to_objs, asindices(I))
    # Fill the valid adjacent indices with 1
    O = fill(I, ONE, valid_adjacent_indices)
    return O
 
0.2142857142857143, 6.298995, def agcecaeebajceeeeabcfjfhdjdccgeee(I):
  shifted = shift(asobject(I), (0, 1))
  return cellwise(I, paint(canvas(0, shape(I)), shifted), 1)
 
0.030612244897959183, 8.890478, def hbjhahfjfeicehceahebbebcdbicejfe(I):
  O = I
  for obj in objects(I, univalued=True, diagonal=False, without_bg=True):
    for j in range(width(obj)):
      if index(subgrid(obj, I), (0, j)) != 0 and index(subgrid(obj, I), (0, j + 1)) == 0:
        O = fill(O, 1, {(uppermost(obj), leftmost(obj) + j + 1)})
  return O
 
0.12244897959183673, 5.610886, def afhgjfhbjaghechbacceeifaffdadejh(I):
  def find_fill_location(obj):
    for _, (i, j) in obj:
      if (i + 1 < len(I) and j + 1 < len(I[0]) and 
          I[i + 1][j + 1] == 0 and 
          ((i + 1, j) in toindices(obj) or (i, j + 1) in toindices(obj))):
        return (i + 1, j + 1)
      if (i - 1 >= 0 and j + 1 < len(I[0]) and 
          I[i - 1][j + 1] == 0 and 
          ((i - 1, j) in toindices(obj) or (i, j + 1) in toindices(obj))):
        return (i - 1, j + 1)
    return None

  target_indices = frozenset(find_fill_location(obj) for obj in objects(I, True, False, False))
  return fill(I, 1, target_indices - {None})
 
0.0, 0.0, def gjdfbdadcbjcebhdifediaaecbhigcdi(I):
    # Find all objects
    objs = objects(I, T, F, T) 
    # Find the outer perimeter indices of each object
    perimeter_indices = mapply(lambda obj: delta(toindices(obj)), objs)
    # Fill the perimeter indices with 1
    O = fill(I, ONE, perimeter_indices)
    return O 
 
