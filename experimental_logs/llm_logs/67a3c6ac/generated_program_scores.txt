24.666666666666668, tensor(0.0173), Description: Mirror the input grid horizontally, then split it in half vertically. Take the right half and place it on the left side of the output grid. Take the left half and place it on the right side of the output grid. 
:: def ddafcgbcgfagedaajddfbddedheebhfe(I):
  return hconcat(righthalf(cmirror(I)), lefthalf(cmirror(I))) 
 
25.666666666666668, tensor(0.0173), Description: Mirror the input grid horizontally, then split it in half vertically. Take the right half and place it on the left side of the output grid. Take the left half and place it on the right side of the output grid. 
:: def bffacfjheffbegaejcchghfdibeaihcd(I):
  mirrored = cmirror(I)
  h, w = len(mirrored), len(mirrored[0])
  return tuple(mirrored[i][w//2:] + mirrored[i][:w//2] for i in range(h))
 
23.333333333333332, tensor(0.0177), Description: Mirror the input grid horizontally, then rotate it 90 degrees clockwise. Mirror the result horizontally again, then rotate it 270 degrees clockwise. The final result is the output grid. 
:: def jfbiefcfcgefediabdgfdcaggciafbcg(I):
    x1 = cmirror(I)
    x2 = rot90(x1)
    x3 = hmirror(x2)
    x4 = rot270(x3)
    return x4
 
25.333333333333332, tensor(0.0174), Description: Mirror the input grid horizontally, then rotate it 180 degrees clockwise.  Mirror the result horizontally again, then rotate it 180 degrees clockwise. The final result is the output grid. 
:: def fbbdajacbdbeeeaeiiedbagfeegafbic(I):
    x1 = cmirror(I)
    x2 = tuple(zip(*x1[::-1]))
    return tuple(zip(*x2[::-1]))
 
25.333333333333332, tensor(0.0107), Description: Rotate the input grid 180 degrees clockwise. 
:: def bacgbdbjihacecbiiadijjeffhcbecbd(I):
  h, w = len(I), len(I[0])
  return tuple(tuple(I[j][w-1-i] for j in range(w-1,-1,-1)) for i in range(h))
 
23.333333333333332, tensor(0.0144), Description: Rotate the input grid 90 degrees counterclockwise. Shift all '1's up by one position and all '2's left by one position. Fill the shifted positions with the corresponding digits. 
:: def gchfdefheachehfbifgafeegdchefaaf(I):
  x1 = rot270(I)  # Rotate the input grid 90 degrees counterclockwise
  x2 = ofcolor(x1, 1)  # Get indices of all '1's in the rotated grid
  x3 = shift(x2, (-1, 0)) # Shift '1's up by one position
  x4 = ofcolor(x1, 2) # Get indices of all '2's in the rotated grid
  x5 = shift(x4, (0, -1)) # Shift '2's left by one position
  O = fill(fill(x1, 1, x3), 2, x5)  # Fill the shifted positions with corresponding digits
  return O
 
24.666666666666668, tensor(0.0155), Description: Rotate the input grid 90 degrees counterclockwise. Shift all '1's up by one position and all '2's left by one position, but only if they are not already at the top or left edge of the grid. Fill the shifted positions with the corresponding digits. 
:: def hjccbiceadedefahafcdfgcfhaafjdje(I):
  O = rot270(I) # Rotate the input grid
  for i in range(len(I)): # Iterate through rows
    for j in range(len(I[0])): # Iterate through columns
      if O[i][j] == 1:
        if i > 0: # Check for boundary condition
          O = fill(O, mostcolor(O), {(i, j)}) # Remove the '1' at the current position
          O = fill(O, 1, {(i-1, j)}) # Place the '1' one row above
      if O[i][j] == 2:
        if j > 0: # Check for boundary condition
          O = fill(O, mostcolor(O), {(i, j)}) # Remove the '2' at the current position
          O = fill(O, 2, {(i, j-1)}) # Place the '2' one column left
  return O
 
23.666666666666668, tensor(0.0141), Description: Rotate the input grid 90 degrees counterclockwise. Shift the entire grid diagonally up and left by one position. Paint the shifted objects on a blank canvas with the same background color as the input grid. 
:: def ihigdedaeaaieaeiicbfacddagfbfbce(I):
  x1 = rot270(I) # Rotate the grid
  x2 = shift(asobject(x1), (-1, -1)) # Shift the entire grid diagonally
  O = paint(canvas(mostcolor(x1), shape(x1)), x2) # Paint the shifted objects on a blank canvas
  return O
 
23.0, tensor(0.0140), Description: Rotate the input grid 90 degrees counterclockwise. Then, for each digit in the grid, place it in the output grid with adjusted coordinates. The '1's are shifted diagonally down and right, the '2's are shifted diagonally down and left, and all other digits are shifted diagonally down and left. The output grid has the same background color as the input grid. 
:: def aebdeegabdadebacaccgfcjcadeccdcb(I):
  O = canvas(mostcolor(I), shape(I)) # Create a blank canvas
  for i in range(len(I)):
    for j in range(len(I[0])):
      val = I[i][j]  # Get the value at the current cell
      if val == 1 and i > 0: # Handle '1' shifting
        O = fill(O, val, {(j, len(I) - i)}) # Place '1' with adjusted coordinates
      elif val == 2 and j > 0: # Handle '2' shifting
        O = fill(O, val, {(j-1, len(I) - i - 1)}) # Place '2' with adjusted coordinates
      else: 
        O = fill(O, val, {(j, len(I) - i - 1)}) # Place other digits with adjusted coordinates
  return O 
 
10.0, tensor(0.0146), Description: Mirror the input grid along its diagonal, then rotate it 90 degrees clockwise. Shift all '1's up by one position and all '2's left by one position. Fill the shifted positions with the corresponding digits. 
:: def cjbiedjifcihedcabjbbjdfafdfhgdbd(I):
    x1 = dmirror(I) # Mirror along diagonal
    x2 = rot90(x1) # Rotate the mirrored grid 90 degrees clockwise
    x3 = ofcolor(x2, 1)  # Get indices of all '1's in the transformed grid
    x4 = shift(x3, (-1, 0)) # Shift '1's up by one position
    x5 = ofcolor(x2, 2) # Get indices of all '2's in the transformed grid
    x6 = shift(x5, (0, -1)) # Shift '2's left by one position
    O = fill(fill(x2, 1, x4), 2, x6)  # Fill the shifted positions with corresponding digits
    return O
 
15.333333333333334, tensor(0.0189), Description: Move the last column of the input grid to the beginning of each row in the output grid. 
:: def habbaehejefeeggfafafidgccdfddfea(I):
  """
  This version uses slicing and concatenation to achieve the transformation.
  """
  last_column = tuple(row[-1:] for row in I)
  remaining_grid = tuple(row[:-1] for row in I)
  O = tuple(a + b for a, b in zip(last_column, remaining_grid))
  return O
 
24.666666666666668, tensor(0.0088), Description: Move each colored shape to the left so that the leftmost cell of each shape is in the first column of the output grid. The shapes should maintain their original colors and orientations. 
:: def hihcadgjjadgegfgjcafbaeicjdaffbe(I):
    objs = objects(I, T, F, T)
    moved_grid = I
    for obj in objs:
        for v, (i, j) in obj:
            leftmost_j = leftmost(obj)
            moved_grid = fill(moved_grid, v, {(i, j - leftmost_j)}) # Move each cell individually
    O = moved_grid
    return O
 
24.666666666666668, tensor(0.0088), Description: Move each colored shape to the left so that the leftmost cell of each shape is in the first column of the output grid. The shapes should maintain their original colors and orientations. 
:: def gajbfgefeedaecebjgahbefeffiijcji(I):
    objs = objects(I, T, F, T)
    O = I
    for obj in objs:
        O = cover(O, obj)  # Remove the object from the grid
        O = paint(O, shift(obj, (0, -leftmost(obj)))) # Paint the shifted object back onto the grid
    return O
 
22.0, tensor(0.0088), Description: Move each colored shape to the left so that the leftmost cell of each shape is in the first column of the output grid. The shapes should maintain their original colors and orientations. 
:: def ahecgabggaegeafajbheijfbfhbeibfi(I):
    O = I
    for j in range(width(I)):
        column = frozenset((i, j) for i in range(height(I))) # Get all indices of the current column
        for obj in objects(I, T, F, T):
            if vmatching(obj, column): # Check if the object intersects the current column
                O = cover(O, obj) # Erase the object
                O = paint(O, shift(obj, (0, -leftmost(obj)))) # Repaint the object shifted to the left
    return O
 
23.333333333333332, tensor(0.0146), Description: Rotate the input grid 270 degrees counterclockwise. 
:: def bbiahbehbghdebebbhedadedaebabdgb(I):
    return rot270(I)
 
21.333333333333332, tensor(0.0203), Description: Rotate the input grid 180 degrees clockwise. 
:: def hfbfbeigdddcededaiafgcebgdjcfbdd(I):
  return tuple(zip(*I[::-1]))
 
21.333333333333332, tensor(0.0107), Description: Rotate the input grid 180 degrees clockwise. 
:: def cgejdfaadihheabjaahacfegcecbcbfj(I):
  return tuple(zip(*I[::-1])) 
 
23.333333333333332, tensor(0.0116), Description: Rotate the input grid 270 degrees counterclockwise. 
:: def aebdadcbidbbeifdjdeedadacgcceagd(I):
  """
  Rotates the input grid 90 degrees counterclockwise using rot270.
  """
  O = rot270(I)
  return O
 
21.333333333333332, tensor(0.0094), Description: Rotate the input grid 90 degrees counterclockwise by transposing and then reversing each row. 
:: def cbdbdjahahciecajbhcgfbegaabdbheh(I):
  """
  Rotates the input grid 90 degrees counterclockwise by transposing and then reversing each row.
  """
  O = tuple(zip(*I))  # Transpose the grid
  O = tuple(tuple(row[::-1]) for row in O)  # Reverse each row
  return O
 
25.666666666666668, tensor(0.0185), Description: Rotate the input grid 90 degrees clockwise, then move the last element of each row to the beginning of the row. 
:: def bfjcfeegeaiiebadjefgdfbiacdaeajj(I):
  return tuple(tuple(v for v in (r[-1:] + r[:-1])) for r in rot90(I)) 
 
22.0, tensor(0.0088), Description: Move each colored shape to the left so that the leftmost cell of each shape is in the first column of the output grid. The shapes should maintain their original colors and orientations. 
:: def acffheefhcdaeabcaiceiagbifebchii(I):
  O = canvas(mostcolor(I), shape(I))  # Create blank canvas
  for i in range(height(I)):
    for j in range(width(I)):
      if I[i][j] != mostcolor(I): # If not background:
        obj = extract(objects(I, T, F, T), lambda x: (i, j) in toindices(x)) # Find the object at (i, j)
        leftmost_j = leftmost(obj)
        O = fill(O, I[i][j], {(i, j - leftmost_j)})  # Fill in shifted position
  return O
 
22.666666666666668, tensor(0.0088), Description: Move each colored shape to the left so that the leftmost cell of each shape is in the first column of the output grid. The shapes should maintain their original colors and orientations. 
:: def jgccjjeghheeedefbafbbdajdcehafag(I):
  objs = objects(I, T, F, T)
  shifted_objs = apply(lambda obj: shift(obj, (0, -leftmost(obj))), objs) # Shift all objects at once
  O = paint(canvas(mostcolor(I), shape(I)), merge(shifted_objs)) # Paint shifted objects
  return O
 
24.0, tensor(0.0203), Description: Rotate the input grid 180 degrees clockwise. 
:: def idaffbicbceeeaffjbebedefjfcijcce(I):
  return rot90(rot90(I))
 
25.333333333333332, tensor(0.0105), Description: Mirror the input grid along its diagonal, then rotate it 180 degrees clockwise. 
:: def gcafedjfedidejfcbbedaibgaieacaad(I):
  return rot180(dmirror(I))
 
25.333333333333332, tensor(0.0115), Description: Rotate the input grid 180 degrees clockwise, then mirror it vertically. 
:: def dfehcdifcbiieheiabfbaajiaigdecdj(I):
  return vmirror(rot180(I))
 
25.333333333333332, tensor(0.0095), Description: Rotate the input grid 270 degrees counterclockwise, then mirror it horizontally. 
:: def adbejdefadgaeadaiaefidcfdieidjgc(I):
  """
  Rotates the input grid 90 degrees clockwise and then reflects it horizontally.
  """
  return hmirror(rot270(I)) # Rotate 270 degrees counter-clockwise, then horizontally mirror
 
0.0, tensor(0.0111), Description: Rotate the input grid 90 degrees clockwise, mirror it along its diagonal, then rotate it 180 degrees clockwise. The final result is the output grid. 
:: def heehfcbdbcaaefafjaefgcaabjeibbhb(I):
  """
  Leverages diagonal mirroring and rotations to achieve the transformation.
  """
  return rot180(dmirror(rot90(I))) # Rotate 90 degrees, mirror diagonally, then rotate 180 degrees
 
