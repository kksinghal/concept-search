## Transformation Analysis:

The transformation involves moving all non-background objects to the bottom of the grid, preserving their relative horizontal positions.  The order of the objects from top to bottom is determined by the original order of their uppermost row.

**Example:**

Let's take Input_0:

```
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 2 2 2 0 0 0 0 0
2 2 0 2 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 8 8 0 0 0 0
0 0 0 8 8 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
```

The output moves both the '2' object and the '8' object to the bottom, with the '2' object above the '8' object because its uppermost row was higher in the input.

## Program to be generated:

Here are five distinct program versions achieving the desired transformation:

**Program Version 1:**

```python
def program_v1(I):
  return tuple(
      tuple(
          v for v, (i, j) in sorted(
              merge(
                  shift(obj, (height(I) - height(obj) - uppermost(obj), 0)) 
                  for obj in objects(I, T, F, T)
              ), 
              key=lambda x: (x[1][0], x[1][1])
          )
          if i == row
      )
      for row in range(height(I))
  )
```

**Explanation:**

1. **`objects(I, T, F, T)`:**  Identifies all non-background objects in the input grid (`I`).
2. **`shift(obj, (height(I) - height(obj) - uppermost(obj), 0))`:** Calculates the vertical shift required to move each object (`obj`) to the bottom, maintaining its horizontal position.
3. **`merge(...)`:**  Combines all shifted objects into a single set.
4. **`sorted(..., key=lambda x: (x[1][0], x[1][1]))`:** Sorts the combined object cells first by row index (`x[1][0]`) then column index (`x[1][1]`).
5. The outer two `tuple(tuple(...)...)` loops iterate through rows and columns, placing the sorted object values at their new positions.

**Program Version 2:**

```python
def program_v2(I):
    return vconcat(
        canvas(0, (height(I) - sum(height(obj) for obj in objects(I, T, F, T)), width(I))),
        tuple(
            tuple(v for v, (i, j) in sorted(obj, key=lambda x: x[1][1])) 
            for i in range(height(obj)) 
            for obj in sorted(objects(I, T, F, T), key=lambda obj: uppermost(obj))
        )
    )
```

**Explanation:**

1. **`canvas(0, (height(I) - sum(height(obj) for obj in objects(I, T, F, T)), width(I)))`:** Creates a canvas of the background color (0) with the height calculated to accommodate the objects at the bottom.
2. **`sorted(objects(I, T, F, T), key=lambda obj: uppermost(obj))`:**  Sorts objects based on the row index of their uppermost cell.
3. The inner two `tuple(tuple(...)...)` loops iterate through the sorted objects and their rows, placing their values in the new grid, sorted by column index (`x[1][1]`).
4. **`vconcat(...)`:** Concatenates the empty canvas with the grid containing the shifted objects.

**Program Version 3:**

```python
def program_v3(I):
  objs = sorted(objects(I, T, F, T), key=lambda x: uppermost(x))
  return tuple(
    tuple(
      next((v for v, (ni, j) in obj if ni - uppermost(obj) == i and j == jj), 0) 
      for jj in range(width(I))
    ) for i in range(sum(height(o) for o in objs))
  ) + tuple(tuple(0 for _ in range(width(I))) for _ in range(height(I) - sum(height(o) for o in objs)))
```

**Explanation:**

1. **`sorted(objects(I, T, F, T), key=lambda x: uppermost(x))`:** Sorts the objects based on the row index of their uppermost cell.
2. The nested `tuple(tuple(...)...)` constructs the output grid row by row:
    -  For each row, it iterates through columns, checking if any object cell exists at that position after shifting.
    -  If a cell exists, its value is retrieved using `next()`. Otherwise, the background color (0) is used.
3. Finally, it concatenates the constructed grid with an empty canvas of background color to fill the remaining space.

**Program Version 4:**

```python
def program_v4(I):
    return tuple(
        tuple(
            next(
                (v for v, (i2, j2) in obj if i2 == i - (height(I) - sum(height(o) for o in objects(I, T, F, T))) + uppermost(obj) and j2 == j),
                0,
            )
            for j in range(width(I))
        )
        for obj in sorted(objects(I, T, F, T), key=lambda x: uppermost(x))
        for i in range(height(I))
    )
```

**Explanation:**

1.  **`sorted(objects(I, T, F, T), key=lambda x: uppermost(x))`:** Sorts objects based on their uppermost row.
2.  The nested `tuple(tuple(...)...)` constructs the output grid row by row.
3.  For each row and column, it checks if a shifted object cell exists at that location. 
4.  The shift is calculated using `i - (height(I) - sum(height(o) for o in objects(I, T, F, T))) + uppermost(obj)`, which determines the new row position after moving the object to the bottom.
5.  If an object cell is found, its value is used; otherwise, the background color (0) is used.

**Program Version 5:**

```python
def program_v5(I):
  return tuple(
    tuple(
      next((v for v, (pi, pj) in o for obj in objects(I, T, F, T) if o == obj and pi == i - (height(I) - sum(height(obj2) for obj2 in objects(I, T, F, T))) + uppermost(obj) and pj == j), 0) for j in range(width(I))
    ) for i in range(height(I))
  )
```

**Explanation:**

1. This program directly iterates over the output grid's rows and columns.
2. For each cell in the output, it iterates through all objects and their cells.
3. It calculates the expected shifted position of each cell based on the object's height and uppermost row.
4. If the current cell in the output matches a shifted object cell, the object cell's value is used. Otherwise, the background color (0) is used.

These five program versions demonstrate diverse approaches to achieve the desired transformation using different combinations of DSL functions and logic. Each program effectively moves objects to the bottom, maintaining their relative horizontal positioning and stacking order based on their original uppermost row.
