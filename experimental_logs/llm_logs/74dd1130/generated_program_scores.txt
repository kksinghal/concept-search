4.5, tensor(1.9640), Description: If the first or second column has only one unique color, swap the first and second columns. Otherwise, keep the input grid as is. 
:: def bfgddcdaffifecdhjaagadfabbhhagea(I):
  # Check uniqueness of elements in each column
  col1_unique = len(set(I[0])) == 1 
  col2_unique = len(set(I[1])) == 1
  col3_unique = len(set(I[2])) == 1

  # Swap columns based on uniqueness
  if col1_unique and not col2_unique:
    O = (I[1], I[0], I[2]) 
  elif col2_unique and not col1_unique:
    O = (I[1], I[0], I[2])
  else:
    O = I

  return O
 
5.0, tensor(1.9447), Description: If the sum of the elements in the first column is greater than the sum of the elements in the second column, swap the first and second columns. Otherwise, keep the input grid as is. 
:: def cdacabehdiaeejddbibbcfedadjgdajb(I):
  # Calculate column sums
  col1_sum = sum(I[0])
  col2_sum = sum(I[1])
  col3_sum = sum(I[2])

  # Swap columns based on sum comparison
  if col1_sum > col2_sum:
    O = (I[1], I[0], I[2])
  else:
    O = I

  return O
 
4.5, tensor(1.7246), Description: If the most common element in the first two columns is in the second column, swap the first and second columns. Otherwise, keep the input grid as is. 
:: def eebbjffjbacdedcaidjacdfaejcdibee(I):
  # Extract elements from the first two columns
  elements = I[0] + I[1]
  
  # Find the most common element
  most_common = mostcommon(elements)
  
  # Determine the column index of the most common element
  if most_common in I[0]:
    O = I 
  else:
    O = (I[1], I[0], I[2])

  return O
 
4.5, tensor(1.7068), Description: If the first element of the first column is equal to the last element of the second column, swap the first and second columns. Otherwise, keep the input grid as is. 
:: def aaaehbjedcefecciiaafhjbjfecjbhdb(I):
  # Compare first and last elements of first two columns
  if I[0][0] == I[1][-1]:
    O = (I[1], I[0], I[2])
  else:
    O = I

  return O
 
5.25, tensor(1.9964), Description: If the set difference between the first and second columns contains only one element, swap the first and second columns. Otherwise, keep the input grid as is. 
:: def ifhjfjgbaaffehjeaaabjicceafebfda(I):
  # Calculate set difference between first two columns
  diff = set(I[0]) - set(I[1])

  # Swap based on difference size
  if len(diff) == 1:  
    O = (I[1], I[0], I[2])
  else:
    O = I

  return O
 
4.5, tensor(0.0056), Description: Move the leftmost object that is not the same color as the rightmost object to the location of the rightmost object. Then, move the rightmost object to the location of the leftmost object. Finally, paint the rightmost object onto the grid. 
:: def jgeeddgbdjdaeabcjdecdcbbfcfagjdc(I):
  objs = objects(I, T, F, T)
  rightmost_obj = argmax(objs, rightmost)
  rightmost_color = color(rightmost_obj)
  leftmost_obj = argmin(sfilter(objs, lambda o: color(o) != rightmost_color), leftmost)
  r_indices = toindices(rightmost_obj)
  l_indices = toindices(leftmost_obj)
  moved_grid = fill(fill(I, rightmost_color, l_indices), color(leftmost_obj), r_indices)
  O = paint(cover(moved_grid, rightmost_obj), rightmost_obj)
  return O
 
0.0, tensor(0.0375), Description: Rearrange the columns of the input grid based on the unique values in the first row. The output grid will have columns ordered according to the order of unique values encountered in the first row. For example, if the first row is `(1, 2, 1)`, the output grid will have the second column first, then the first column, and finally the third column. 
:: def dffihgfhdcbaedfbjbccfcfcfffheddb(I):
  # Get unique values from the first row and their indices
  x1 = tuple((I[0][j], j) for j in range(width(I)))
  x2 = dedupe(x1)

  # Construct the output grid
  O = tuple(
      tuple(I[i][j] for i in range(height(I)) for v, j in x2 if j == k) 
      for k in range(width(I))
  )
  return O
 
