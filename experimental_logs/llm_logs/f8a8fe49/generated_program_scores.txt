19.0, tensor(0.0126), Description: Copy the input grid. Then, for each of the colored squares that are not gray, move them to the right edge of the grid, keeping them in the same row. The gray squares should remain in their original positions. 
:: def chaafbdfjcefeaaeiffaddebfeihaice(I):
  objs = objects(I, T, F, T)
  target_objs = colorfilter(objs, 5)
  other_objs = difference(objs, target_objs)
  shifted_objs = frozenset(shift(obj, (0, 14 - rightmost(obj))) for obj in target_objs)
  O = I
  for obj in other_objs:
    O = paint(O, obj)
  for obj in shifted_objs:
    O = paint(O, obj)
  return O
 
14.0, tensor(0.0051), Description: Move the gray shape to the right edge of the grid, keeping it in the same row. 
:: def aiechbbdcabcefhdjgefaafgebdgbaba(I):
  five_obj = extract(objects(I, T, F, T), lambda obj: color(obj) == 5)
  O = move(I, five_obj, (0, 14 - rightmost(five_obj)))
  return O
 
11.333333333333334, tensor(0.1253), Description: Copy the input grid. Then, move the gray shape to the right edge of the grid, keeping it in the same row. Then, change the color of the gray shape to light blue. 
:: def cceagecgdjdjeaacjjcecgfbefiajhfg(I):
  five_indices = ofcolor(I, 5)
  O = fill(I, 0, five_indices)
  O = paint(O, shift(recolor(5, five_indices), (0, 14 - rightmost(five_indices))))
  return O
 
14.0, tensor(0.1253), Description: Copy the input grid. Then, move the gray shape to the right edge of the grid, keeping it in the same row. Then, change the color of the gray shape to light blue. 
:: def caebdjbhcdgeeacdahfaeiedhafhbdaj(I):
  fives = asobject(replace(I, 5, 1))
  other = asobject(replace(I, 5, 0))
  shifted = shift(fives, (0, 14 - rightmost(fives)))
  O = paint(paint(canvas(0, shape(I)), other), shifted)
  return O
 
13.0, tensor(0.0054), Description: Move the gray shape to the center of the grid. 
:: def hebeeabdfaiiebaiibhecgcbifieebdd(I):
    obj_5 = first(colorfilter(objects(I, T, F, T), 5)) 
    target_pos = (len(I) - 2, len(I[0]) // 2) 
    offset = subtract(target_pos, centerofmass(obj_5)) 
    O = paint(cover(I, obj_5), shift(obj_5, offset)) 
    return O
 
13.0, tensor(0.0094), Description: Move the gray shape to the right edge of the grid, keeping it in the same row. 
:: def fdgficgcdiaceceajeahdgceifdbabci(I):
    obj_5 = first(colorfilter(objects(I, T, F, T), 5))
    target_pos = (lrcorner(I)[0]-1, lrcorner(I)[1] // 2)
    offset = subtract(target_pos, ulcorner(obj_5))
    O = paint(cover(I, obj_5), shift(obj_5, offset))
    return O
 
28.666666666666668, tensor(0.0087), Description: Move the gray shape to the bottom of the grid, keeping it in the same column. 
:: def adbddeagbadbeeccafacfgdcecaccbee(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  target_row = len(I) - 2 - uppermost(obj_5) 
  O = vconcat(I[:target_row], vconcat(I[target_row + height(obj_5):], I[target_row:target_row + height(obj_5)]))
  return O
 
30.666666666666668, tensor(0.0087), Description: Move the gray shape to the bottom of the grid, keeping it in the same column. 
:: def aigdiddabcfeeiffiaddigdcedfhfaac(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  top = crop(I, (0, 0), (uppermost(obj_5), len(I[0])))
  bottom = crop(I, (lowermost(obj_5) + 1, 0), (len(I) - lowermost(obj_5) - 1, len(I[0])))
  O = vconcat(vconcat(top, bottom), crop(I, (uppermost(obj_5), 0), (height(obj_5), len(I[0]))))
  return O
 
15.333333333333334, tensor(0.0069), Description: Move the gray shape to the left so that it is in the same column as the red shape. The gray shape should be directly to the left of the red shape. 
:: def bedeahiaafcfebebihbagaeadbffdbdj(I):
  obj2 = first(colorfilter(objects(I, F, F, T), 2))
  obj5 = first(colorfilter(objects(I, F, F, T), 5))
  moved_obj5 = shift(obj5, (subtract(ulcorner(obj5), ulcorner(obj2))[0], 0)) 
  O = paint(paint(I, obj2), moved_obj5)
  return O
 
14.0, tensor(0.0069), Description: Move the gray shape to the left so that it is in the same column as the red shape. The gray shape should be directly to the left of the red shape. 
:: def dbeadbgdcajeefjfaedececbbiefhdcf(I):
  objs = objects(I, F, F, T)
  obj2 = first(colorfilter(objs, 2))
  obj5 = first(colorfilter(objs, 5))
  hdiff = subtract(centerofmass(obj2), centerofmass(obj5))[0]
  moved_obj5 = shift(obj5, (hdiff, 0))
  O = paint(paint(cover(I, obj5), moved_obj5), obj2)
  return O
 
15.333333333333334, tensor(0.0085), Description: Move the gray shape to the top left corner of the grid so that its top left corner aligns with the top left corner of the red shape. 
:: def fabgfcjagdbgedjgifbjbccafbjfgddh(I):
  objs = objects(I, F, F, T)
  obj2 = first(colorfilter(objs, 2))
  obj5 = first(colorfilter(objs, 5))
  target_pos = (uppermost(obj2), leftmost(obj5))
  moved_obj5 = shift(obj5, subtract(target_pos, ulcorner(obj5)))
  O = paint(paint(I, obj2), moved_obj5)
  return O
 
14.0, tensor(0.0135), Description: Copy the input grid. Then, move the gray shape two spaces to the right if it is wider than it is tall, or two spaces down if it is taller than it is wide. The gray shape should remain in its original position. 
:: def bfcafedafjdceiddjfieffihjidabdic(I):
  target_color = 5
  objs = objects(I, T, F, T)
  target_obj = extract(objs, lambda o: color(o) == target_color)
  is_wider = lambda o: width(o) > height(o)
  shift_amount = double(branch(is_wider(target_obj), RIGHT, DOWN))
  shifted_obj = shift(target_obj, shift_amount)
  O = paint(cover(I, target_obj), shifted_obj)
  return O
 
13.0, tensor(0.0135), Description: Copy the input grid. Then, move the gray shape two spaces to the right if it is wider than it is tall, or two spaces down if it is taller than it is wide. The gray shape should remain in its original position. 
:: def gjhcaaddcjddebcfjffjechifeaaebag(I):
  target_color = 5
  target_obj = next(o for o in objects(I, T, F, T) if color(o) == target_color)
  shift_amount = (0, 2) if width(target_obj) > height(target_obj) else (2, 0)
  new_grid = paint(I, shift(target_obj, shift_amount))
  O = cover(new_grid, target_obj) 
  return O
 
14.0, tensor(0.0135), Description: Copy the input grid. Then, move the gray shape two spaces to the right if it is wider than it is tall, or two spaces down if it is taller than it is wide. The gray shape should remain in its original position. 
:: def ceeafcaedceaehdfbdaddcfacaiechgb(I):
    obj = first(colorfilter(objects(I, T, F, T), FIVE))
    d = rbind(branch, width(obj) > height(obj))
    O = paint(cover(I, obj), shift(obj, d((0, TWO), (TWO, 0))))
    return O
 
31.333333333333332, tensor(0.0147), Description: Move the red shape to the left edge of the grid, keeping it in the same row. Then, move the gray shape to the left or right so that it is in the same row as the red shape and its left edge is one space away from the right edge of the red shape. If the red shape is in the left half of the grid, move the gray shape to the left. If the red shape is in the right half of the grid, move the gray shape to the right. 
:: def afbiaaadebjdegfcaicdcgedffababfc(I):
  obj2 = first(colorfilter(objects(I, T, F, T), 2))
  obj5 = first(colorfilter(objects(I, T, F, T), 5))
  obj2_dest = (0, center(obj2)[1])
  obj2 = shift(obj2, subtract(obj2_dest, ulcorner(obj2)))
  obj5_dest = (center(obj5)[0], leftmost(obj2) - width(obj5) - 1) if leftmost(obj2) * 2 < len(I[0]) else (center(obj5)[0], rightmost(obj2) + 1)
  obj5 = shift(obj5, subtract(obj5_dest, ulcorner(obj5)))
  O = paint(paint(canvas(0, shape(I)), obj2), obj5)
  return O
 
30.333333333333332, tensor(0.0146), Description: Move the red shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left or right so that it is in the same row as the red shape and its left edge is one space away from the right edge of the red shape. If the red shape is in the left half of the grid, move the gray shape to the left. If the red shape is in the right half of the grid, move the gray shape to the right. 
:: def ejfcfebcdeceeecajjbddedjcacdjgjf(I):
  objs = objects(I, T, F, T)
  obj2 = first(colorfilter(objs, 2))
  obj5 = first(colorfilter(objs, 5))
  obj2 = shift(obj2, (uppermost(obj2) * -1, 0))
  target_j = leftmost(obj2) - width(obj5) if leftmost(obj2) * 2 < len(I[0]) else rightmost(obj2) + 1
  obj5 = shift(obj5, (0, target_j - leftmost(obj5)))
  O = paint(paint(canvas(0, shape(I)), obj2), obj5)
  return O
 
32.0, tensor(0.0146), Description: Move the red shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left or right so that it is in the same row as the red shape and its left edge is one space away from the right edge of the red shape. If the red shape is in the left half of the grid, move the gray shape to the left. If the red shape is in the right half of the grid, move the gray shape to the right. 
:: def fhdeceegdbfgeafiaaaeecddafffdebi(I):
  objs = fgpartition(I)
  obj2 = first(colorfilter(objs, 2))
  obj5 = first(colorfilter(objs, 5))
  obj2 = recolor(2, {(0, j) for j in range(width(obj2))})
  if leftmost(obj2) * 2 < len(I[0]):
    obj5 = recolor(5, {(center(obj5)[0], j) for j in range(leftmost(obj2) - width(obj5), leftmost(obj2))})
  else:
    obj5 = recolor(5, {(center(obj5)[0], j) for j in range(rightmost(obj2) + 1, rightmost(obj2) + width(obj5) + 1)})
  O = paint(paint(canvas(0, shape(I)), obj2), obj5)
  return O
 
24.333333333333332, tensor(0.0158), Description: Move the red shape to the top left corner of the grid. Then, move the gray shape to the left or right so that it is in the same row as the red shape and its left edge is one space away from the right edge of the red shape. If the red shape is in the left half of the grid, move the gray shape to the left. If the red shape is in the right half of the grid, move the gray shape to the right. 
:: def aefcaadebaebecffjcafdegbhcjbfgfi(I):
  obj2 = first(colorfilter(objects(I, T, F, T), 2))
  obj5 = first(colorfilter(objects(I, T, F, T), 5))
  obj2 = shift(obj2, gravitate(obj2, {(0, 0)}))
  if leftmost(obj2) * 2 < len(I[0]):
    obj5 = shift(obj5, gravitate(obj5, {(center(obj5)[0], leftmost(obj2) - 1)})) 
  else:
    obj5 = shift(obj5, gravitate(obj5, {(center(obj5)[0], rightmost(obj2) + 1)})) 
  O = paint(paint(canvas(0, shape(I)), obj2), obj5)
  return O
 
9.666666666666666, tensor(0.0266), Description: Move each gray shape to the position (2, 7) in the grid. The gray shape should remain in its original position. 
:: def aacfdbjcdeebeeecjeaedgdfjdcafche(I):
  fives = colorfilter(objects(I, T, F, T), 5)
  O = I
  for obj in fives:
    new_obj = shift(obj, subtract((2,7),centerofmass(obj)))
    O = paint(cover(O, obj), new_obj)
  return O
 
11.666666666666666, tensor(0.0237), Description: Copy the input grid. Then, for each gray square, move it to the position (5, 2 + abs(6-i)) where i is the row of the gray square. The gray square should remain in its original position. 
:: def baedeiddediceecbiigfbfahahgeiddb(I):
  five_indices = ofcolor(I, 5)
  O = fill(I, 0, five_indices)
  for i, j in five_indices:
    new_i = 2 + abs(6-i) 
    O = paint(O, {(5, (new_i, j))})
  return O 
 
13.333333333333334, tensor(0.0219), Description: Move the gray shape to the position (2, 7) in the grid. The gray shape should remain in its original position. 
:: def cjeaffhhdbebedjdbchdaeeddjdfdfce(I):
  five_obj = first(colorfilter(objects(I, T, F, T), 5))
  O = paint(cover(I, five_obj), shift(five_obj, subtract((2,7),centerofmass(five_obj))))
  return O
 
7.333333333333333, tensor(0.0266), Description: Move each gray shape to the position (2, 7) in the grid. The gray shape should remain in its original position. 
:: def dafbaagafabaeeedabjeeebfbhgffcae(I):
  target = (2,7) 
  five_indices = ofcolor(I, 5)
  O = fill(I, 0, five_indices)
  for i, j in five_indices:
    new_location = add((i,j), gravitate({(0, (i, j))}, {(0, target)}))
    O = paint(O, {(5, new_location)})
  return O
 
13.333333333333334, tensor(0.0232), Description: Move the gray shape to the position (2, 7) in the grid, keeping its original orientation. The gray shape should remain in its original position. 
:: def acfeaghbaahfeaehbcbjdhbbdddedfea(I):
  five_obj = first(colorfilter(objects(I, T, F, T), 5))
  h, w = shape(five_obj)
  target_ulcorner = (2, 7 - w // 2)
  O = paint(cover(I, five_obj), shift(five_obj, subtract(target_ulcorner, ulcorner(five_obj)))) 
  return O
 
13.666666666666666, tensor(0.0174), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left or right so that it is in the same row as the red shape and its left edge is one space away from the right edge of the red shape. If the red shape is in the left half of the grid, move the gray shape to the left. If the red shape is in the right half of the grid, move the gray shape to the right. 
:: def cecefdbejaeaeccbajeidhcdifcbaaje(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  target_pos =  (uppermost(obj_2)-height(obj_5), leftmost(obj_2) + width(obj_2)//2 - width(obj_5)//2)
  offset = subtract(target_pos, ulcorner(obj_5))
  O = paint(cover(I, obj_5), shift(obj_5, offset))
  return O
 
13.666666666666666, tensor(0.0106), Description: Move the gray shape to the top of the grid, keeping it in the same column. The gray shape should be directly above the red shape. 
:: def bjbifhacbidceafhbdbiabgebcjeicbi(I):
    obj_5 = first(colorfilter(objects(I, T, F, T), 5))
    obj_2 = first(colorfilter(objects(I, T, F, T), 2))
    target_row = uppermost(obj_2) - height(obj_5)
    shifted_5 = shift(obj_5, (target_row - uppermost(obj_5), 0))
    O = paint(cover(I, obj_5), shifted_5)
    return O
 
16.666666666666668, tensor(0.0102), Description: Move the gray shape to the right so that it is in the same row as the red shape and its left edge is one space away from the right edge of the red shape. 
:: def hfdjcjdgfgfjecfeadbgbcdhbdjbfcje(I):
  objs = objects(I, F, F, T) 
  obj2 = first(colorfilter(objs, 2))
  obj5 = first(colorfilter(objs, 5))
  target_pos = (uppermost(obj2), rightmost(obj2) + 1)
  moved_obj5 = shift(obj5, subtract(target_pos, ulcorner(obj5)))
  O = paint(paint(I, obj2), moved_obj5)
  return O 
 
16.666666666666668, tensor(0.0110), Description: Move the gray shape so that its center is directly above the center of the red shape. The gray shape should remain in its original position. 
:: def efcdfebhdihgeachiadcfaajbhihgjff(I):
  obj2 = first(colorfilter(objects(I, F, F, T), 2))
  obj5 = first(colorfilter(objects(I, F, F, T), 5))
  h_offset = rightmost(obj2) - leftmost(obj5) + 1
  v_offset = uppermost(obj2) - (uppermost(obj5) + height(obj5) // 2)
  O = paint(I, shift(obj5, (v_offset, h_offset)))
  return O
 
17.0, tensor(0.0089), Description: Move the gray shape so that its top left corner aligns with the top right corner of the red shape. The gray shape should remain in its original position. 
:: def jjfcaaahbdihecegjacfhbffcgdgicib(I):
  objs = objects(I, F, F, T)
  obj2 = extract(objs, lambda obj: color(obj) == 2)
  obj5 = extract(objs, lambda obj: color(obj) == 5)
  new_obj5 = shift(obj5, (uppermost(obj2) - centerofmass(obj5)[0], rightmost(obj2) - leftmost(obj5) + 1))
  O = paint(paint(I, obj2), new_obj5)
  return O
 
14.0, tensor(0.0110), Description: Move the gray shape so that its center is directly above the center of the red shape. The gray shape should remain in its original position. 
:: def cdjadfbecaddebdeiabdjgfedhdbafba(I):
  objs = objects(I, F, F, T)
  obj2 = argmax(objs, lambda obj: color(obj) == 2 and size(obj) > 1)
  obj5 = argmax(objs, lambda obj: color(obj) == 5 and size(obj) > 1)
  new_5 = shift(obj5, (uppermost(obj2) - (uppermost(obj5) + height(obj5) // 2), rightmost(obj2) - leftmost(obj5) + 1))
  O = paint(cover(I, obj5), new_5)
  return O
 
14.0, tensor(0.0089), Description: Move the gray shape so that its top left corner aligns with the top right corner of the red shape. The gray shape should remain in its original position. 
:: def dcgabedjiadbedeabjhbbaajhagjfaie(I):
  p2 = toindices(first(colorfilter(objects(I, F, F, T), 2)))
  p5 = toindices(first(colorfilter(objects(I, F, F, T), 5)))
  new_p5 = shift(p5, (uppermost(p2) - center(p5)[0], rightmost(p2) - leftmost(p5) + 1))
  O = paint(fill(I, 0, p5), recolor(5, new_p5))
  return O
 
14.0, tensor(0.0136), Description: Copy the input grid. Then, move the gray shape two spaces to the left if it is wider than it is tall, or two spaces up if it is taller than it is wide. The gray shape should remain in its original position. 
:: def cehgeccjjhgcedecicagdbbbihhfeiea(I):
  target_color = 5
  target_obj = first(colorfilter(objects(I, T, F, T), target_color))
  shift_amount = (0, -2) if width(target_obj) > height(target_obj) else (-2, 0)
  shifted_obj = shift(target_obj, shift_amount)
  O = paint(cover(I, target_obj), shifted_obj)
  return O
 
14.0, tensor(0.0136), Description: Copy the input grid. Then, move the gray shape two spaces up if it is taller than it is wide, or two spaces to the left if it is wider than it is tall. The gray shape should remain in its original position. 
:: def igbcdgffdchgefdiajgdabcbiffhiddf(I):
  target_color = 5
  objs = objects(I, T, F, T)
  target_obj = extract(objs, lambda o: color(o) == target_color)
  shift_amount = (-2, 0) if portrait(target_obj) else (0, -2)
  O = paint(cover(I, target_obj), shift(target_obj, shift_amount))
  return O
 
14.0, tensor(0.0136), Description: Copy the input grid. Then, move the gray shape two spaces up if it is taller than it is wide, or two spaces to the left if it is wider than it is tall. The gray shape should remain in its original position. 
:: def agcdjeghccadeiaebadidfgbggjchajg(I):
  target_color = 5
  for obj in objects(I, T, F, T):
    if color(obj) == target_color:
      shift_amount = (0, -2) if width(obj) > height(obj) else (-2, 0)
      return paint(cover(I, obj), shift(obj, shift_amount))
  return I
 
14.0, tensor(0.0136), Description: Copy the input grid. Then, move the gray shape two spaces to the left if it is wider than it is tall, or two spaces up if it is taller than it is wide. The gray shape should remain in its original position. 
:: def bbfifjjcahedecgcbeibdgfeedggijca(I):
  target_color = 5
  target_obj = argmax(objects(I, T, F, T), lambda o: color(o) == target_color and size(o))
  horizontal_shift = (0, -2) if width(target_obj) > height(target_obj) else (0, 0)
  vertical_shift = (-2, 0) if height(target_obj) >= width(target_obj) else (0, 0)
  shifted_obj = shift(target_obj, add(horizontal_shift, vertical_shift))
  return paint(cover(I, target_obj), shifted_obj)
 
18.333333333333332, tensor(0.0137), Description: Move the gray shape so that its center is directly above the center of the red shape. Then, move the gray shape to the left or right so that its right edge is one space away from the left edge of the red shape. If the red shape is in the left half of the grid, move the gray shape to the left. If the red shape is in the right half of the grid, move the gray shape to the right. 
:: def dghgadgfdbdfehgiacdfccbfaeefibba(I):
  obj2 = first(colorfilter(objects(I, T, F, T), 2))
  obj5 = first(colorfilter(objects(I, T, F, T), 5))
  obj5 = shift(obj5, (center(obj2)[0] - center(obj5)[0], 0)) # Vertical Alignment
  if rightmost(obj2) + width(obj5) + 1 <= len(I[0]): # Check space on the right
    obj5 = shift(obj5, (0, rightmost(obj2) - leftmost(obj5) + 1)) # Shift right
  else: 
    obj5 = shift(obj5, (0, leftmost(obj2) - rightmost(obj5) - 1)) # Shift left
  O = paint(paint(canvas(0, shape(I)), obj2), obj5)
  return O
 
18.0, tensor(0.0137), Description: Move the gray shape so that its center is directly above the center of the red shape. Then, move the gray shape to the left or right so that its right edge is one space away from the left edge of the red shape. If the red shape is in the left half of the grid, move the gray shape to the left. If the red shape is in the right half of the grid, move the gray shape to the right. 
:: def dfgdjaafbbdeebheidhafcbaddhfaifc(I):
  obj2 = first(colorfilter(objects(I, T, F, T), 2))
  obj5 = first(colorfilter(objects(I, T, F, T), 5))
  v_offset = center(obj2)[0] - center(obj5)[0] # Vertical offset
  h_offset = width(obj2) + 1 # Horizontal offset (always to the right initially)
  if rightmost(obj2) + h_offset + width(obj5) > len(I[0]):
    h_offset = -h_offset - width(obj5) # Adjust offset for left positioning
  obj5 = shift(obj5, (v_offset, h_offset))
  O = paint(paint(canvas(0, shape(I)), obj2), obj5)
  return O
 
18.333333333333332, tensor(0.0137), Description: Move the gray shape so that its center is directly above the center of the red shape. Then, move the gray shape to the left or right so that its right edge is one space away from the left edge of the red shape. If the red shape is in the left half of the grid, move the gray shape to the left. If the red shape is in the right half of the grid, move the gray shape to the right. 
:: def jdihjhicadedechdbbhchdbcjjaaibdc(I):
  obj2 = first(colorfilter(objects(I, T, F, T), 2))
  obj5 = first(colorfilter(objects(I, T, F, T), 5))
  target_row = center(obj2)[0] 
  obj5 = shift(obj5, (target_row - uppermost(obj5), 0)) # Align top edge with target row
  right_position = (target_row, rightmost(obj2) + 1)
  left_position = (target_row, leftmost(obj2) - width(obj5))
  obj5 = shift(obj5, subtract(branch(rightmost(obj2) + width(obj5) + 1 <= len(I[0]), right_position, left_position), ulcorner(obj5)))
  O = paint(paint(canvas(0, shape(I)), obj2), obj5)
  return O
 
11.0, tensor(0.1761), Description: Move the gray shape to the right edge of the grid, keeping it in the same column. Then, change the color of the gray shape to light blue. 
:: def fjcjejhbhagfegcdaeedhcbcbdbfbbdd(I):
  five_indices = ofcolor(I, 5)
  O = fill(I, 0, five_indices)
  O = paint(O, shift(recolor(5, five_indices), (13 - uppermost(five_indices), 0)))
  return O
 
13.333333333333334, tensor(0.0072), Description: Move the gray shape to the left edge of the grid, keeping it in the same row. The gray shape should be directly to the left of the gray shape. 
:: def jebacdcegcbhedebjabbgdaaacggjeec(I):
  five_obj = extract(objects(I, True, False, False), lambda obj: color(obj) == 5)
  O = cover(I, five_obj)
  new_position = (uppermost(five_obj), leftmost(five_obj) - width(five_obj) - 1)
  O = paint(O, shift(five_obj, new_position))
  return O
 
7.666666666666667, tensor(0.0078), Description: Move all gray shapes to the left edge of the grid, keeping them in the same row. The gray shapes should be directly to the left of the gray shapes. 
:: def cdaecedhchgeecjgjhbbcifaedfdcjdf(I):
  five_indices = ofcolor(I, 5)
  target_column = minimum(j for i, j in five_indices) - width(five_indices) - 1
  O = fill(I, 0, five_indices)
  for i, j in five_indices:
    O = paint(O, {(5, (i, target_column))})
  return O
 
14.0, tensor(0.0070), Description: Move the gray shape to the bottom of the grid, keeping it in the same column. The gray shape should be directly below the gray shape. 
:: def agahbdiaeagaeejbbcbabcfcbibjbacg(I):
  five_obj = extract(partition(I), lambda obj: color(obj) == 5)
  O = cover(I, five_obj)
  O = paint(O, shift(five_obj, (13 - 2 * uppermost(five_obj) - height(five_obj) + 1, 0)))
  return O 
 
14.0, tensor(0.0109), Description: Move the gray shape to the left edge of the grid, keeping it in the same row. If the gray shape is on the right half of the grid, move it to the bottom of the grid, keeping it in the same column. The gray shape should be directly to the left of the gray shape or directly below the gray shape. 
:: def cbdaifjeaabaejfeieadcfeeadecdheb(I):
  five_obj = extract(objects(I, True, False, False), lambda obj: color(obj) == 5)
  O = cover(I, five_obj)
  if leftmost(five_obj) > len(I[0]) // 2:  # If '5' is on the right half
    new_position = (uppermost(five_obj), leftmost(five_obj) - width(five_obj) - 1)
  else:
    new_position = (13 - uppermost(five_obj) - height(five_obj) + 1, leftmost(five_obj))
  O = paint(O, shift(five_obj, new_position))
  return O
 
14.0, tensor(0.0173), Description: Move the gray shape to the left or right so that it is in the same row as the red shape and its left edge is one space away from the right edge of the red shape. If the red shape is in the left half of the grid, move the gray shape to the left. If the red shape is in the right half of the grid, move the gray shape to the right. 
:: def deffdadeidbfeceijabdajeegfjcaide(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  midpoint = leftmost(obj_5) + width(obj_5) // 2
  left_5 = frozenset({(v, (i, j - midpoint + leftmost(obj_2) - 1)) for v, (i, j) in obj_5 if j < midpoint})
  right_5 = frozenset({(v, (i, j - midpoint + rightmost(obj_2) + 1)) for v, (i, j) in obj_5 if j >= midpoint})
  O = paint(paint(cover(I, obj_5), left_5), right_5)
  return O
 
14.0, tensor(0.0136), Description: Copy the input grid. Then, move the gray shape two spaces up if it is taller than it is wide, or two spaces to the left if it is wider than it is tall. The gray shape should remain in its original position. 
:: def dadgcbeacdideghgjghedadbieaccddb(I):
  target_color = 5
  target_obj = first(colorfilter(objects(I, T, F, T), target_color))
  shift_amount = (-2, 0) if height(target_obj) > width(target_obj) else (0, -2) 
  shifted_obj = shift(target_obj, shift_amount)
  O = paint(cover(I, target_obj), shifted_obj)
  return O
 
14.0, tensor(0.0139), Description: Description: Copy the input grid. Then, move the gray shape two spaces to the left if it is wider than it is tall, or two spaces up if it is taller than it is wide. The gray shape should remain in its original position. 
:: def aaffiichhdabeceejfcbgafegedfcfbe(I):
  get_obj = lambda I: first(colorfilter(objects(I, T, F, T), 5))
  shift_left = lambda obj: shift(obj, (0, -2))
  shift_up = lambda obj: shift(obj, (-2, 0))
  return branch(
      width(get_obj(I)) > height(get_obj(I)),
      paint(cover(I, get_obj(I)), shift_left(get_obj(I))),
      branch(
          height(get_obj(I)) > width(get_obj(I)),
          paint(cover(I, get_obj(I)), shift_up(get_obj(I))),
          I
      )
  )
 
36.0, tensor(0.0147), Description: Move the red shape to the middle of the grid, keeping it in the same column. Then, move the gray shape to the left or right so that it is in the same row as the red shape and its left edge is one space away from the right edge of the red shape. If the red shape is in the left half of the grid, move the gray shape to the left. If the red shape is in the right half of the grid, move the gray shape to the right. 
:: def abeeeiaaeabhebhejadccdbaefdajcce(I):
  objs = fgpartition(I)
  obj2 = first(colorfilter(objs, 2))
  obj5 = first(colorfilter(objs, 5))
  center_row = center(obj2)[0]
  obj2 = recolor(2, {(center_row, j) for j in range(width(obj2))})
  obj5 = shift(obj5, (center_row - uppermost(obj5), leftmost(obj2) - leftmost(obj5) + width(obj2) * (leftmost(obj2) * 2 < len(I[0])))) 
  O = paint(paint(canvas(0, shape(I)), obj2), obj5)
  return O
 
24.666666666666668, tensor(0.0147), Description: Move the red shape to the middle of the grid, keeping it in the same column. Then, move the gray shape to the left or right so that it is in the same row as the red shape and its left edge is one space away from the right edge of the red shape. If the red shape is in the left half of the grid, move the gray shape to the left. If the red shape is in the right half of the grid, move the gray shape to the right. 
:: def abebfcejbeaeebihiehfceadabegdbed(I):
  obj2 = first(colorfilter(objects(I, T, F, T), 2))
  obj5 = first(colorfilter(objects(I, T, F, T), 5))
  target_row = center(obj2)[0]
  obj2 = recolor(2, {(target_row, j) for j in range(leftmost(obj2), leftmost(obj2) + width(obj2))})
  horizontal_shift = width(obj2) if leftmost(obj2) * 2 < len(I[0]) else -width(obj5)
  obj5 = shift(obj5, (target_row - uppermost(obj5), horizontal_shift))
  O = paint(paint(canvas(0, shape(I)), obj2), obj5)
  return O
 
33.666666666666664, tensor(0.0147), Description: Move the red shape to the middle of the grid, keeping it in the same column. Then, move the gray shape to the left or right so that it is in the same row as the red shape and its left edge is one space away from the right edge of the red shape. If the red shape is in the left half of the grid, move the gray shape to the left. If the red shape is in the right half of the grid, move the gray shape to the right. 
:: def fgfjhdecaceheegfbedjeajhbgjjafde(I):
  obj2 = extract(fgpartition(I), lambda obj: color(obj) == 2)
  obj5 = extract(fgpartition(I), lambda obj: color(obj) == 5)
  row = center(obj2)[0]
  obj2 = recolor(2, {(row, j) for j in range(width(obj2))})
  obj5 = shift(obj5, (row - uppermost(obj5), (width(obj2) if leftmost(obj2) * 2 < len(I[0]) else -width(obj5))))
  return paint(paint(canvas(0, shape(I)), obj2), obj5)
 
27.333333333333332, tensor(0.0147), Description: Move the red shape to the middle of the grid, keeping it in the same column. Then, move the gray shape to the left or right so that it is in the same row as the red shape and its left edge is one space away from the right edge of the red shape. If the red shape is in the left half of the grid, move the gray shape to the left. If the red shape is in the right half of the grid, move the gray shape to the right. 
:: def ajeiaahbjfacedefiifcffegecibgiff(I):
  obj2 = argmax(objects(I, T, F, T), lambda obj: colorcount(obj, 2))
  obj5 = argmax(objects(I, T, F, T), lambda obj: colorcount(obj, 5))
  target_row = uppermost(obj2) + height(obj2) // 2
  obj2 = recolor(2, {(target_row, j) for j in range(width(obj2))})
  obj5 = shift(obj5, (target_row - uppermost(obj5), width(obj2) * (leftmost(obj2) * 2 < len(I[0])) - width(obj5) * (leftmost(obj2) * 2 >= len(I[0]))))
  return paint(paint(canvas(0, shape(I)), obj2), obj5)
 
12.666666666666666, tensor(0.0567), Description: Copy the input grid. Then, for each gray square, move it to the right edge of the grid, keeping it in the same column. The gray square should be directly to the right of the gray square. Then, change the color of the gray shape to light blue. 
:: def iaacfahicadceehbaaciefffgbfabafc(I):
  objs = objects(I, True, False, True)
  fives = colorfilter(objs, 5)
  moved_fives = frozenset(
      shift(obj, (i - uppermost(obj), 14 - rightmost(obj)))
      for i, obj in enumerate(fives)
  )
  O = paint(cover(I, merge(fives)), merge(moved_fives))
  return O
 
12.666666666666666, tensor(0.0145), Description: Copy the input grid. Then, for each gray square, move it to the position (i - j, 14 - j) where i is the row of the gray square and j is the column of the gray square. The gray square should remain in its original position. 
:: def ibbfeaacafcjecfejfeeeeegcicffbbj(I):
  O = I
  for i, row in enumerate(I):
    for j, value in enumerate(row):
      if value == 5:
        O = move(O, {(5, (i, j))}, (i - j, 14 - j))
  return O
 
14.0, tensor(0.0128), Description: Move the gray shape so that its bottom left corner aligns with the top center of the red shape. The gray shape should remain in its original position. 
:: def gcbjbaaejebjedfdbhdefcccfaedacee(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  center_2 = centerofmass(obj_2)
  offset = (uppermost(obj_2) - lowermost(obj_5), center_2[1] - centerofmass(obj_5)[1])
  O = paint(cover(I, obj_5), shift(obj_5, offset))
  return O
 
14.0, tensor(0.0129), Description: Move the gray shape so that its center is directly above the center of the red shape. The gray shape should remain in its original position. 
:: def ebdiegfhfedbecdfiigffegafdfacidb(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  v_offset = uppermost(obj_2) - lowermost(obj_5)
  h_offset = leftmost(obj_2) + width(obj_2) // 2 - leftmost(obj_5) - width(obj_5) // 2
  O = paint(cover(I, obj_5), shift(obj_5, (v_offset, h_offset)))
  return O
 
13.666666666666666, tensor(0.0135), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left or right so that its center is aligned with the center of the red shape. The gray shape should remain in its original position. 
:: def dddafjiafheceajeijidgdhddefdcajg(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  top_left_target = (uppermost(obj_2) - height(obj_5), (leftmost(obj_2) + rightmost(obj_2) - width(obj_5)) // 2)
  O = paint(cover(I, obj_5), shift(obj_5, subtract(top_left_target, ulcorner(obj_5))))
  return O 
 
22.666666666666668, tensor(0.0103), Description: Move the red shape to the bottom center of the grid. Then, move the gray shape to the bottom right corner of the grid so that its bottom right corner aligns with the bottom right corner of the grid. The gray shape should remain in its original position. 
:: def didbaffafbjeeeadjfeffaefggfcedgb(I):
  objs = objects(I, F, F, T)
  obj2 = argmax(objs, lambda obj: color(obj) == 2)
  obj5 = argmax(objs, lambda obj: color(obj) == 5)
  new_2 = shift(obj2, (height(I) - height(obj2), width(I) // 2 - width(obj2) // 2))
  new_5 = shift(obj5, (height(I) - height(obj2) - height(obj5), width(I) - width(obj5)))
  O = paint(paint(cover(I, obj2), new_2), new_5)
  return O
 
19.666666666666668, tensor(0.0103), Description: Move the red shape to the bottom center of the grid. Then, move the gray shape to the bottom right corner of the grid so that its bottom right corner aligns with the bottom right corner of the grid. The gray shape should remain in its original position. 
:: def gbhdiebfiafeeaebajfbgdadfccajace(I):
  objs = objects(I, F, F, T)
  obj2 = extract(objs, lambda obj: color(obj) == 2)
  obj5 = extract(objs, lambda obj: color(obj) == 5)
  bottom_center = (height(I) - height(obj2), width(I) // 2 - width(obj2) // 2)
  right_edge = (height(I) - height(obj2) - height(obj5), width(I) - width(obj5))
  O = paint(cover(I, obj2), shift(obj2, bottom_center))
  O = paint(cover(O, obj5), shift(obj5, right_edge))
  return O
 
31.333333333333332, tensor(0.0103), Description: Move the red shape to the bottom center of the grid. Then, move the gray shape to the bottom right corner of the grid so that its bottom right corner aligns with the bottom right corner of the grid. The gray shape should remain in its original position. 
:: def ciebdbfebaeaefbgaddcciiabfdebfef(I):
  bg = mostcolor(I)
  obj2 = recolor(2, ofcolor(I, 2))
  obj5 = recolor(5, ofcolor(I, 5))
  target2 = (height(I) - height(obj2), (width(I) - width(obj2)) // 2)
  target5 = (target2[0] - height(obj5), width(I) - width(obj5))
  O = canvas(bg, shape(I))
  O = paint(O, shift(obj2, target2))
  O = paint(O, shift(obj5, target5))
  return O
 
24.333333333333332, tensor(0.0103), Description: Move the red shape to the bottom center of the grid. Then, move the gray shape to the bottom right corner of the grid so that its bottom right corner aligns with the bottom right corner of the grid. The gray shape should remain in its original position. 
:: def jieeddecfadeefbdijcfffjifjcfdefb(I):
  h = height(I)
  w = width(I)
  objs = objects(I, F, F, T)
  obj2 = extract(objs, lambda obj: color(obj) == 2)
  obj5 = extract(objs, lambda obj: color(obj) == 5)
  O = canvas(0, (h, w))
  O = paint(O, shift(obj2, (h - height(obj2), (w - width(obj2)) // 2)))
  O = paint(O, shift(obj5, (h - height(obj2) - height(obj5), w - width(obj5))))
  return O
 
33.666666666666664, tensor(0.0146), Description: Move the red shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left or right so that it is in the same row as the red shape and its left edge is one space away from the right edge of the red shape. If the red shape is in the left half of the grid, move the gray shape to the left. If the red shape is in the right half of the grid, move the gray shape to the right. 
:: def iechbdedfdfeedaebghgcffhfhbcfbec(I):
  obj2 = first(colorfilter(objects(I, T, F, T), 2))
  obj5 = first(colorfilter(objects(I, T, F, T), 5))
  obj2_center = center(obj2)
  obj2_dest = (0, obj2_center[1])
  obj5_dest = (obj2_center[0], rightmost(obj2) + 1) if obj2_center[1] >= len(I[0]) // 2 else (obj2_center[0], leftmost(obj2) - width(obj5) - 1) 
  return paint(paint(canvas(0, shape(I)), shift(obj2, subtract(obj2_dest, ulcorner(obj2)))), shift(obj5, subtract(obj5_dest, ulcorner(obj5))))
 
43.666666666666664, tensor(0.0146), Description: Move the red shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left or right so that it is in the same row as the red shape and its left edge is one space away from the right edge of the red shape. If the red shape is in the left half of the grid, move the gray shape to the left. If the red shape is in the right half of the grid, move the gray shape to the right. 
:: def haaaaifbaaacedfhbdhbcdajhidebbda(I):
  obj2 = extract(fgpartition(I), lambda obj: color(obj) == 2)
  obj5 = extract(fgpartition(I), lambda obj: color(obj) == 5)
  mid = len(I[0]) // 2 
  obj5_offset = (width(obj2) + 1) if center(obj2)[1] < mid else (-width(obj5) - 1)
  return paint(paint(canvas(0, shape(I)), shift(obj2, (-uppermost(obj2), center(obj2)[1] - leftmost(obj2)))), shift(obj5, (-uppermost(obj5) + center(obj2)[0], obj5_offset)))
 
32.0, tensor(0.0146), Description: Move the red shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left or right so that it is in the same row as the red shape and its left edge is one space away from the right edge of the red shape. If the red shape is in the left half of the grid, move the gray shape to the left. If the red shape is in the right half of the grid, move the gray shape to the right. 
:: def fchabeeiaiaaeiheieaedbbaajdbeede(I):
  objs = objects(I, T, F, T)
  obj2 = extract(objs, lambda obj: color(obj) == 2)
  obj5 = extract(objs, lambda obj: color(obj) == 5)
  c2 = center(obj2)
  return paint(paint(canvas(0, shape(I)), shift(obj2, (-c2[0], -c2[1] + len(I[0])//2))), shift(obj5, (-uppermost(obj5) + c2[0], (width(obj2) + 1) if c2[1] < len(I[0]) // 2 else -width(obj5) - 1))) 
 
34.333333333333336, tensor(0.0146), Description: Move the red shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left or right so that it is in the same row as the red shape and its left edge is one space away from the right edge of the red shape. If the red shape is in the left half of the grid, move the gray shape to the left. If the red shape is in the right half of the grid, move the gray shape to the right. 
:: def jbagecjhafajecefiagdcabehabhejfc(I):
  obj2 = first(colorfilter(objects(I, T, F, T), 2))
  obj5 = first(colorfilter(objects(I, T, F, T), 5))
  return paint(paint(canvas(0, shape(I)), shift(obj2, (-uppermost(obj2), -leftmost(obj2) + len(I[0])//2 - width(obj2)//2))), shift(obj5, (-uppermost(obj5) + center(obj2)[0], (width(obj2) + 1) if center(obj2)[1] < len(I[0]) // 2 else -width(obj5) - 1)))
 
34.0, tensor(0.0146), Description: Move the red shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left or right so that it is in the same row as the red shape and its left edge is one space away from the right edge of the red shape. If the red shape is in the left half of the grid, move the gray shape to the left. If the red shape is in the right half of the grid, move the gray shape to the right. 
:: def dbdebadcegbheecfaicbfafiebefehif(I):
  obj2 = extract(fgpartition(I), lambda obj: color(obj) == 2)
  obj5 = extract(fgpartition(I), lambda obj: color(obj) == 5)
  obj2_x = center(obj2)[1]
  offset_5 = width(obj2) + 1 if obj2_x < len(I[0]) // 2 else -width(obj5) - 1
  return paint(paint(canvas(0, shape(I)), recolor(2, {(0, j) for j in range(obj2_x - width(obj2)//2, obj2_x + width(obj2)//2 + (width(obj2) % 2))})), shift(obj5, (center(obj2)[0] - uppermost(obj5), offset_5)))
 
7.0, tensor(0.0658), Description: Copy the input grid. Then, for each gray square, move it to the bottom of the grid, keeping it in the same column. The gray square should be directly below the gray square. Then, change the color of the gray shape to light blue. 
:: def ceedacjdbacfebdcbaccafejidbdcfie(I):
  fives = colorfilter(objects(I, True, False, True), 5)
  O = I
  for obj in fives:
    new_obj = shift(obj, (len(I) - uppermost(obj), 0))
    O = paint(cover(O, obj), new_obj)
  return O
 
14.0, tensor(0.0631), Description: Description: Copy the input grid. Then, for each gray square, move it to the bottom of the grid, keeping it in the same column. The gray square should be directly below the gray square. Then, change the color of the gray shape to light blue. 
:: def cffifjiefgfeecceiicecjebcfcifbaa(I):
  five_indices = ofcolor(I, 5)
  O = fill(I, 0, five_indices) 
  for i, j in five_indices:
    O = paint(O, {(5, (len(I) - 1 - i, j))})
  return O
 
14.0, tensor(0.0129), Description: Move the gray shape so that its center is directly above the center of the red shape. The gray shape should remain in its original position. 
:: def cjgdbghdcffcecdabihabbfffaeaeeac(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  O = paint(cover(I, obj_5), shift(obj_5, gravitate(obj_5, obj_2)))
  return O
 
13.666666666666666, tensor(0.0135), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left or right so that its center is aligned with the center of the red shape. The gray shape should remain in its original position. 
:: def agbbcdajdecaeaciiajcfeiahaeefbcb(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  target_pos = (uppermost(obj_2) - height(obj_5), (leftmost(obj_2) + rightmost(obj_2)) // 2 - width(obj_5) // 2)
  O = paint(cover(I, obj_5), shift(obj_5, subtract(target_pos, ulcorner(obj_5))))
  return O
 
16.666666666666668, tensor(0.0082), Description: Move the gray shape to the bottom of the grid, keeping it in the same column. Then, move the gray shape to the left so that its left edge aligns with the left edge of the red shape. The gray shape should remain in its original position. 
:: def dfjjicdfdebgededaaajcbaebdahedeb(I):
  obj2 = first(colorfilter(objects(I, F, F, T), 2))
  obj5 = first(colorfilter(objects(I, F, F, T), 5))
  target_pos = (lowermost(obj2) + 1, leftmost(obj5))
  moved_obj5 = shift(obj5, subtract(target_pos, ulcorner(obj5)))
  O = paint(paint(I, obj2), moved_obj5)
  return O 
 
18.333333333333332, tensor(0.0066), Description: Move the gray shape to the bottom of the grid, keeping it in the same column. The gray shape should be directly below the red shape. 
:: def ccaabfbececcecidjaccgdhedcajahgb(I):
  objs = objects(I, F, F, T)
  obj2 = first(sfilter(objs, lambda obj: color(obj) == 2))
  obj5 = first(sfilter(objs, lambda obj: color(obj) == 5))
  O = paint(paint(canvas(0, shape(I)), shift(obj5, (lowermost(obj2) - uppermost(obj5) + 1, 0))), obj2)
  return O
 
16.666666666666668, tensor(0.0082), Description: Move the gray shape to the bottom of the grid, keeping it in the same column. Then, move the gray shape to the left so that its left edge aligns with the left edge of the red shape. The gray shape should remain in its original position. 
:: def dhedgcfaaffaegedbfbcfdjbdghicgaa(I):
  obj2 = first(colorfilter(objects(I, F, F, T), 2))
  obj5 = first(colorfilter(objects(I, F, F, T), 5))
  shift_amount = subtract((lowermost(obj2) + 1, leftmost(obj2)), ulcorner(obj5))
  moved_obj5 = shift(obj5, shift_amount)
  O = paint(paint(I, obj2), moved_obj5)
  return O
 
16.666666666666668, tensor(0.0083), Description: Move the gray shape to the bottom of the grid, keeping it in the same column. Then, move the gray shape to the right so that its right edge aligns with the right edge of the red shape. The gray shape should remain in its original position. 
:: def jhaibaichihcejbfajdfdhfheajgeccc(I):
  obj2 = first(colorfilter(objects(I, F, F, T), 2))
  obj5 = first(colorfilter(objects(I, F, F, T), 5))
  target = (lowermost(obj2) + 1, lrcorner(obj2)[1])
  O = paint(paint(I, obj2), shift(obj5, subtract(target, ulcorner(obj5))))
  return O
 
15.666666666666666, tensor(0.0136), Description: Copy the input grid. Then, move the gray shape two spaces to the left if it is wider than it is tall, or two spaces up if it is taller than it is wide. The gray shape should remain in its original position. 
:: def hjaceggabheaejdfbgjgdchecfihcdfa(I):
  obj_five = extract(objects(I, T, F, T), lambda obj: color(obj) == FIVE)
  offset = (0, -2) if width(obj_five) > height(obj_five) else (2, 0)
  O = paint(I, shift(obj_five, add(ulcorner(obj_five), offset)))
  return O
 
14.0, tensor(0.0139), Description: Description: Copy the input grid. Then, move the gray shape two spaces to the left if it is wider than it is tall, or two spaces up if it is taller than it is wide. The gray shape should remain in its original position. 
:: def dabhggadacfeefjeidhgachejgcbdbhi(I):
  five_indices = ofcolor(I, FIVE)
  move_up = width(five_indices) > height(five_indices)
  new_indices = shift(five_indices, (0, -2)) if move_up else shift(five_indices, (2, 0)) 
  O = fill(cover(I, five_indices), FIVE, new_indices)
  return O 
 
13.666666666666666, tensor(0.0104), Description: Move the red shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the bottom of the grid, keeping it in the same column. The gray shape should be directly below the red shape. 
:: def degeideeiffeehfgabbehbhgbcedhbje(I):
  obj2 = extract(fgpartition(I), lambda obj: color(obj) == 2)
  obj5 = extract(fgpartition(I), lambda obj: color(obj) == 5)
  grid_center = (len(I) // 2, len(I[0]) // 2)
  obj2_new_ulcorner = (uppermost(obj2), grid_center[1] - width(obj2) // 2)
  obj5_new_ulcorner = (lowermost(obj2) + 1, grid_center[1] - width(obj5) // 2)
  return paint(paint(canvas(0, shape(I)), shift(obj2, subtract(obj2_new_ulcorner, ulcorner(obj2)))), 
               shift(obj5, subtract(obj5_new_ulcorner, ulcorner(obj5))))
 
34.0, tensor(0.0104), Description: Move the red shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the bottom of the grid, keeping it in the same column. The gray shape should be directly below the red shape. 
:: def dfcicebdhhbaefccaeaiddcjicbaifie(I):
  obj2 = extract(fgpartition(I), matcher(color, 2))
  obj5 = extract(fgpartition(I), matcher(color, 5))
  return paint(paint(canvas(0, shape(I)), 
               shift(obj2, subtract((0, len(I[0]) // 2), centerofmass(obj2)))),
               shift(obj5, subtract((lowermost(obj2) + 1, len(I[0]) // 2), centerofmass(obj5))))
 
13.0, tensor(0.0567), Description: Copy the input grid. Then, for each gray square, move it to the right edge of the grid, keeping it in the same column. The gray square should be directly to the right of the gray square. Then, change the color of the gray shape to light blue. 
:: def deacdfaciffbebbbiagbaafdfiabbccf(I):
  fives = colorfilter(objects(I, True, False, True), 5)  # Extract '5'-objects
  shifted_fives = frozenset(shift(obj, (len(I[0]) - rightmost(obj) - 1, 0)) for obj in fives)  # Shift each object
  return paint(cover(I, merge(fives)), merge(shifted_fives))  # Paint shifted objects onto a cleared grid
 
10.333333333333334, tensor(0.0505), Description: Description: Copy the input grid. Then, for each gray square, move it to the right edge of the grid, keeping it in the same row. The gray square should be directly to the right of the gray square. Then, change the color of the gray shape to light blue. 
:: def eebbajadfbfaeefeaehcbdfbgabchabj(I):
  five_indices = ofcolor(I, 5)  # Get indices of all '5's
  O = fill(I, 0, five_indices)  # Clear the original '5's
  for i, j in five_indices:
    new_j = len(I[0]) - 1  # Calculate the new column index for right edge alignment
    O = paint(O, {(5, (i, new_j))})  # Paint individual '5's at the new positions
  return O
 
18.333333333333332, tensor(0.0169), Description: Move the gray shape so that its center is aligned with the center of the red shape. Then, split the gray shape in half vertically. The left half of the gray shape should be moved to the left so that its left edge aligns with the left edge of the red shape. The right half of the gray shape should be moved to the right so that its right edge aligns with the right edge of the red shape. The gray shape should remain in its original position. 
:: def beaddedhfbbeedfeaajfhhffijbbdfgb(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  split_index = leftmost(obj_5) + width(obj_5) // 2
  O = cover(I, obj_5)
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if val == 5:
        new_j = leftmost(obj_2) + (j - leftmost(obj_5)) if j < split_index else rightmost(obj_2) - (rightmost(obj_5) - j)
        new_i = uppermost(obj_2) - (lowermost(obj_5) - i) if j < split_index else lowermost(obj_2) - (uppermost(obj_5) - i)
        O = paint(O, {(5, (new_i, new_j))})
  return O
 
16.666666666666668, tensor(0.0082), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left so that its left edge aligns with the left edge of the red shape. The gray shape should remain in its original position. 
:: def ceejfhhijfgheffcifaddaafdaddddfi(I):
  obj2 = first(colorfilter(objects(I, F, F, T), 2))
  obj5 = first(colorfilter(objects(I, F, F, T), 5))
  target_pos = (uppermost(obj2) - (height(obj5) // 2), leftmost(obj2)) # Calculate target position
  moved_obj5 = shift(obj5, subtract(target_pos, ulcorner(obj5))) # Move object
  O = paint(paint(I, obj2), moved_obj5) # Paint objects onto the input grid
  return O 
 
17.0, tensor(0.0085), Description: Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left so that its left edge aligns with the left edge of the red shape. The gray shape should remain in its original position. 
:: def decjacjbbcccefjfbecefbdchcfdfdif(I):
  obj2 = extract(objects(I, F, F, T), lambda obj: color(obj) == 2)
  obj5 = extract(objects(I, F, F, T), lambda obj: color(obj) == 5)
  offset = subtract((uppermost(obj2) - (height(obj5) // 2), leftmost(obj2)), ulcorner(obj5))
  O = paint(I, shift(obj5, offset))
  return O
 
17.666666666666668, tensor(0.0082), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left so that its left edge aligns with the left edge of the red shape. The gray shape should remain in its original position. 
:: def caccchbdadddeaefifigdaijibejfige(I):
  objs = objects(I, F, F, T)
  obj2, obj5 = argmax(objs, lambda obj: color(obj) == 2), argmax(objs, lambda obj: color(obj) == 5)
  target = (uppermost(obj2) - height(obj5) // 2, leftmost(obj2))
  O = paint(paint(canvas(0, shape(I)), shift(obj5, subtract(target, ulcorner(obj5)))), obj2)
  return O
 
14.0, tensor(0.0085), Description: Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left so that its left edge aligns with the left edge of the red shape. The gray shape should remain in its original position. 
:: def ichediijgbdeecahbcbafbfjgbcaeacc(I):
  obj2 = first(sfilter(objects(I, F, F, T), lambda obj: color(obj) == 2))
  obj5 = first(sfilter(objects(I, F, F, T), lambda obj: color(obj) == 5))
  O = paint(fill(I, 0, obj5), shift(obj5, (uppermost(obj2) - height(obj5) // 2 - uppermost(obj5), leftmost(obj2) - leftmost(obj5))))
  return O 
 
16.666666666666668, tensor(0.0148), Description: Description: Move the red shape to the middle of the grid, keeping it in the same column. Then, move the gray shape to the left or right so that it is in the same row as the red shape and its left edge is one space away from the right edge of the red shape. If the red shape is in the left half of the grid, move the gray shape to the left. If the red shape is in the right half of the grid, move the gray shape to the right. 
:: def edgedbeaddgieadaiffgcececgdaffja(I):
  obj2 = first(colorfilter(objects(I, T, F, T), 2))
  obj5 = first(colorfilter(objects(I, T, F, T), 5))
  target_row = center(obj2)[0]
  new_obj5 = recolor(5, {(target_row, j) for j in range(leftmost(obj5), leftmost(obj5) + width(obj5))}) 
  O = paint(paint(canvas(0, shape(I)), obj2), new_obj5)
  return O
 
29.0, tensor(0.0108), Description: Move the gray shape to the top half of the grid, keeping it in the same column. Then, move the red shape to the bottom half of the grid, keeping it in the same column. The gray shape should be directly above the red shape. 
:: def baffeccjfbddecegbbabdaibahcdacjd(I):
  obj2 = first(colorfilter(objects(I, T, F, T), 2))
  obj5 = first(colorfilter(objects(I, T, F, T), 5))
  top_half = paint(canvas(0, (len(I) // 2, len(I[0]))), obj5)
  bottom_half = paint(canvas(0, (len(I) - len(I) // 2, len(I[0]))), obj2)
  return vconcat(top_half, bottom_half)
 
14.0, tensor(0.0505), Description: Description: Copy the input grid. Then, for each gray square, move it to the right edge of the grid, keeping it in the same row. The gray square should be directly to the right of the gray square. Then, change the color of the gray shape to light blue. 
:: def ddbeegagbbhieaeciacehcafcjfbaied(I):
  fives = ofcolor(I, 5)  # Get indices of all '5's
  shifted_fives = frozenset((i, len(I[0]) - 1 - j) for i, j in fives)  # Calculate new indices after shifting
  return paint(replace(I, 5, 0), recolor(5, shifted_fives))  # Paint onto a blank canvas 
 
46.333333333333336, tensor(0.0115), Description: Move all gray squares to the right edge of the grid, keeping them in the same row. If there are no gray squares in a row, leave that row unchanged. 
:: def ffccffdajijfejghigjbiafecdcfhaad(I):
  return tuple(
      tuple(
          5 if 5 in row[j:] else 0 
          for j in range(len(row))
      ) 
      for row in I
  )
 
14.0, tensor(0.0123), Description: Move the gray shape so that its top right corner aligns with the top right corner of the red shape. The gray shape should remain in its original position. 
:: def hffgjebafdeiefcfabfacbcdhdbaaidj(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  O = paint(cover(I, obj_5), shift(obj_5, (uppermost(obj_2) - uppermost(obj_5), rightmost(obj_2) - rightmost(obj_5))))
  return O
 
14.0, tensor(0.0122), Description: Move the gray shape so that its top left corner aligns with the top left corner of the red shape. The gray shape should remain in its original position. 
:: def dgagibabdecdeidbjdejiicfcfaiebif(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  h_offset = leftmost(obj_2) - leftmost(obj_5) 
  v_offset = uppermost(obj_2) - uppermost(obj_5)
  O = paint(cover(I, obj_5), shift(obj_5, (v_offset, h_offset)))
  return O
 
17.0, tensor(0.0089), Description: Move the gray shape so that its top left corner aligns with the top right corner of the red shape. The gray shape should remain in its original position. 
:: def fbidbbecbcbfeffbbeaejcieahfaecbf(I):
  objs = objects(I, F, F, T)
  obj2 = extract(objs, lambda obj: color(obj) == 2)
  obj5 = extract(objs, lambda obj: color(obj) == 5)
  new_obj5 = shift(obj5, (uppermost(obj2) - uppermost(obj5), rightmost(obj2) - leftmost(obj5) + 1))
  O = paint(paint(I, obj2), new_obj5)
  return O
 
16.666666666666668, tensor(0.0072), Description: Move the gray shape to the right so that its left edge aligns with the right edge of the red shape. The gray shape should remain in its original position. 
:: def cfhdidcgfjjbeahaiechcfbhddjbdigd(I):
  obj2 = first(colorfilter(objects(I, F, F, T), 2))
  obj5 = first(colorfilter(objects(I, F, F, T), 5))
  h_shift = width(obj2) - leftmost(obj5) + 1
  O = paint(paint(I, obj2), shift(obj5, (uppermost(obj2) - uppermost(obj5), h_shift)))
  return O
 
16.666666666666668, tensor(0.0073), Description: Move the gray shape to the right so that its top right corner aligns with the top right corner of the red shape. The gray shape should remain in its original position. 
:: def habiadbbbhibefcfjjbdcdaaacfifcgc(I):
  obj2 = first(colorfilter(objects(I, F, F, T), 2))
  obj5 = first(colorfilter(objects(I, F, F, T), 5))
  target_corner = add(lrcorner(obj2), (0, 1))
  O = paint(paint(I, obj2), shift(obj5, subtract(target_corner, urcorner(obj5))))
  return O
 
14.0, tensor(0.0135), Description: Copy the input grid. Then, move the gray shape two spaces to the right if it is wider than it is tall, or two spaces down if it is taller than it is wide. The gray shape should remain in its original position. 
:: def iaggebeacabheefjjfbabfjcbcahifbe(I):
  for obj in objects(I, T, F, T):
    if color(obj) == 5:
      x_shift = 2 if width(obj) > height(obj) else 0
      y_shift = 2 if height(obj) > width(obj) else 0
      I = paint(cover(I, obj), shift(obj, (y_shift, x_shift)))
  return I
 
14.0, tensor(0.0139), Description: Description: Copy the input grid. Then, move the gray shape two spaces to the right if it is wider than it is tall, or two spaces down if it is taller than it is wide. The gray shape should remain in its original position. 
:: def jcbgefbjdbbaedfgbdjgaeaaaefdcbch(I):
  obj = argmax(objects(I, T, F, T), lambda o: color(o) == 5)
  h_move = tojvec(2) if width(obj) > height(obj) else tojvec(0)
  v_move = toivec(2) if height(obj) > width(obj) else toivec(0)
  return paint(cover(I, obj), shift(obj, add(h_move, v_move))) 
 
14.0, tensor(0.0136), Description: Copy the input grid. Then, move each gray shape two spaces down if it is taller than it is wide, or two spaces to the right if it is wider than it is tall. The gray shape should remain in its original position. 
:: def hficdgdhfahdedigihgfajfcaefaedfe(I):
  for obj in objects(I, T, F, T):
    if color(obj) != 5:
      continue
    if portrait(obj):
      I = move(I, obj, (2, 0)) # Move down
    else:
      I = move(I, obj, (0, 2)) # Move right
  return I 
 
18.333333333333332, tensor(0.0099), Description: Move the gray shape so that its center is directly above the center of the red shape. Then, move the gray shape one space to the right. The gray shape should remain in its original position. 
:: def dfjfhfecaeifeffiifiiccceabejfdac(I):
  obj2 = first(colorfilter(objects(I, T, F, T), 2))
  obj5 = first(colorfilter(objects(I, T, F, T), 5))
  return paint(
      paint(canvas(0, shape(I)), obj2),
      shift(obj5, add(subtract(center(obj2), center(obj5)), (0, 1)))
  ) 
 
12.666666666666666, tensor(0.0567), Description: Copy the input grid. Then, for each gray square, move it to the right edge of the grid, keeping it in the same column. The gray square should be directly to the right of the gray square. Then, change the color of the gray shape to light blue. 
:: def ebbjgichajjjeaaabfbfaceceegidfhb(I):
  return paint(replace(I, 5, 0),
               frozenset((5, (i, len(I[0]) - rightmost(obj) - 1)) for obj in objects(I, True, False, True) if color(obj) == 5 for i in range(uppermost(obj), lowermost(obj) + 1)))
 
14.0, tensor(0.0183), Description: Move the gray shape so that its center is aligned with the center of the red shape. Then, move the gray shape to the left or right so that its left edge aligns with the left edge of the red shape if the gray shape is on the left half of the grid, or its right edge aligns with the right edge of the red shape if the gray shape is on the right half of the grid. The gray shape should remain in its original position. 
:: def fdfcaeacabijeaffaddfddcgcedebbaa(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  O = cover(I, obj_5)
  h_offset = leftmost(obj_2) - leftmost(obj_5) if leftmost(obj_5) < leftmost(obj_2) + width(obj_2) // 2 else rightmost(obj_2) - rightmost(obj_5)
  v_offset = centerofmass(obj_2)[0] - centerofmass(obj_5)[0]
  O = paint(O, shift(obj_5, (v_offset, h_offset)))
  return O 
 
14.0, tensor(0.0183), Description: Move the gray shape so that its center is directly above the center of the red shape. Then, move the gray shape to the left or right so that its left edge aligns with the left edge of the red shape if the gray shape is on the left half of the grid, or its right edge aligns with the right edge of the red shape if the gray shape is on the right half of the grid. The gray shape should remain in its original position. 
:: def jbefeaigffeeedehidiceafbbeffcfdd(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  v_offset = centerofmass(obj_2)[0] - centerofmass(obj_5)[0]
  obj_5_shifted = shift(obj_5, (v_offset, 0))
  h_direction = position(obj_5_shifted, obj_2)[1]
  h_offset = (0, h_direction * (abs(leftmost(obj_5_shifted) - leftmost(obj_2)) if h_direction == -1 else abs(rightmost(obj_5_shifted) - rightmost(obj_2)))) 
  O = paint(cover(I, obj_5), shift(obj_5_shifted, h_offset))
  return O
 
14.0, tensor(0.0183), Description: Move the gray shape so that its center is aligned with the center of the red shape. Then, move the gray shape to the left or right so that its left edge aligns with the left edge of the red shape if the gray shape is on the left half of the grid, or its right edge aligns with the right edge of the red shape if the gray shape is on the right half of the grid. The gray shape should remain in its original position. 
:: def aebccfbbcahaeiecibaighghefedehic(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  O = cover(I, obj_5)
  target_left = leftmost(obj_2) if leftmost(obj_5) < centerofmass(obj_2)[1] else rightmost(obj_2) - width(obj_5) + 1
  target_top = uppermost(obj_2) + (centerofmass(obj_2)[0] - centerofmass(obj_5)[0])
  O = paint(O, shift(obj_5, (target_top - uppermost(obj_5), target_left - leftmost(obj_5))))
  return O
 
16.666666666666668, tensor(0.0084), Description: Move the gray shape so that its center is directly above the center of the red shape. Then, move the gray shape to the right so that its left edge aligns with the right edge of the red shape. The gray shape should remain in its original position. 
:: def jgbhbhbbcejeejfjadjiabcfifaaieeb(I):
  obj2 = first(sfilter(objects(I, F, F, T), lambda obj: color(obj) == 2))
  obj5 = first(sfilter(objects(I, F, F, T), lambda obj: color(obj) == 5))
  O = paint(I, shift(obj5, (uppermost(obj2) + height(obj2) // 2 - uppermost(obj5) - height(obj5) // 2, rightmost(obj2) - leftmost(obj5) + 1)))
  return O
 
17.0, tensor(0.0072), Description: Move the gray shape so that its center is directly above the center of the red shape. Then, move the gray shape one space to the right. The gray shape should remain in its original position. 
:: def cfhbbecbdfffeheeaceeaajdaddageag(I):
  obj2 = extract(objects(I, F, F, T), lambda obj: color(obj) == 2)
  obj5 = extract(objects(I, F, F, T), lambda obj: color(obj) == 5)
  target_pos = (uppermost(obj2) + height(obj2) // 2 - height(obj5) // 2, rightmost(obj2) + 1)
  O = paint(I, shift(obj5, subtract(target_pos, ulcorner(obj5))))
  return O
 
15.666666666666666, tensor(0.0072), Description: Move the gray shape so that its center is directly above the center of the red shape. Then, move the gray shape one space to the right. The gray shape should remain in its original position. 
:: def bafhhafdgaaceacajbciddjgdhbfeiae(I):
  obj2 = argmax(objects(I, F, F, T), lambda obj: color(obj) == 2)
  obj5 = argmax(objects(I, F, F, T), lambda obj: color(obj) == 5)
  v_offset = uppermost(obj2) + height(obj2) // 2 - uppermost(obj5) - height(obj5) // 2
  h_offset = width(obj2) + 1
  O = paint(I, shift(obj5, (v_offset, h_offset)))
  return O
 
17.0, tensor(0.0072), Description: Move the gray shape so that its center is directly above the center of the red shape. Then, move the gray shape one space to the right. The gray shape should remain in its original position. 
:: def hhedbcebebafedbbibiebfjgcghdedac(I):
  obj2 = next(filter(lambda obj: color(obj) == 2, objects(I, F, F, T)))
  obj5 = next(filter(lambda obj: color(obj) == 5, objects(I, F, F, T)))
  v_shift = centerofmass(obj2)[0] - centerofmass(obj5)[0]
  h_shift = rightmost(obj2) - leftmost(obj5) + 1
  O = paint(I, shift(obj5, (v_shift, h_shift)))
  return O
 
16.0, tensor(0.0140), Description: Description: Copy the input grid. Then, move the gray shape two spaces up if it is taller than it is wide, or two spaces to the left if it is wider than it is tall. The gray shape should remain in its original position. 
:: def cfegagfbddccedfhbbdfjefbeecfccfh(I):
  def move_obj(obj):
    return shift(obj, (-2, 0) if height(obj) >= width(obj) else (0, -2))
  return paint(
      I, 
      move_obj(extract(objects(I, T, F, T), lambda o: color(o) == 5))
  )
 
30.333333333333332, tensor(0.0147), Description: Description: Move the red shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left or right so that it is in the same row as the red shape and its left edge is one space away from the right edge of the red shape. If the red shape is in the left half of the grid, move the gray shape to the left. If the red shape is in the right half of the grid, move the gray shape to the right. 
:: def gfaibeieeecfehjficiiidaeibgefacf(I):
  obj2 = first(colorfilter(objects(I, T, F, T), 2))
  obj5 = first(colorfilter(objects(I, T, F, T), 5))
  obj2_center = center(obj2)
  obj2_dest = (uppermost(obj2), obj2_center[1])
  obj5_dest = (obj2_dest[0], rightmost(obj2) + 1) if obj2_center[1] < len(I[0]) // 2 else (obj2_dest[0], leftmost(obj2) - width(obj5) - 1) 
  return paint(paint(canvas(0, shape(I)), shift(obj2, subtract(obj2_dest, ulcorner(obj2)))), shift(obj5, subtract(obj5_dest, ulcorner(obj5))))
 
12.0, tensor(0.0528), Description: Description: Copy the input grid. Then, for each gray square, move it to the right edge of the grid, keeping it in the same column. The gray square should be directly to the right of the gray square. Then, change the color of the gray shape to light blue. 
:: def eifbdjeaeefheiddiccgbfbiffbaceeb(I):
  O = I
  for obj in colorfilter(objects(I, True, False, True), 5):
    O = paint(cover(O, obj), shift(obj, (0, len(I[0]) - rightmost(obj) - 1)))
  return O 
 
13.666666666666666, tensor(0.0142), Description: Move the gray shape so that its center is aligned with the center of the red shape. Then, move the gray shape one space to the right. If the gray shape is above the red shape, flip the gray shape vertically before moving it. If the gray shape is below the red shape, flip the gray shape horizontally before moving it. The gray shape should remain in its original position. 
:: def acfcbbgbcbfjefgdbaddahdccdeicjac(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  h_offset = width(obj_2) + 1
  v_offset = (uppermost(obj_2) + centerofmass(obj_2)[0] - centerofmass(obj_5)[0]) - uppermost(obj_5)
  if uppermost(obj_5) < uppermost(obj_2):
    O = paint(cover(I, obj_5), shift(vmirror(obj_5), (v_offset, h_offset)))
  else:
    O = paint(cover(I, obj_5), shift(hmirror(obj_5), (v_offset, h_offset)))
  return O
 
14.0, tensor(0.0142), Description: Move the gray shape so that its center is aligned with the center of the red shape. Then, move the gray shape one space to the right. If the gray shape is above the red shape, flip the gray shape vertically before moving it. If the gray shape is below the red shape, flip the gray shape horizontally before moving it. The gray shape should remain in its original position. 
:: def hbedebgdbgcceahabfddibhgcecdbijj(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  target_pos = (uppermost(obj_2) + centerofmass(obj_2)[0] - centerofmass(obj_5)[0], rightmost(obj_2) + 1)
  mirrored_obj_5 = vmirror(obj_5) if uppermost(obj_5) < uppermost(obj_2) else hmirror(obj_5)
  offset = subtract(target_pos, ulcorner(mirrored_obj_5))
  O = paint(cover(I, obj_5), shift(mirrored_obj_5, offset))
  return O
 
13.666666666666666, tensor(0.0142), Description: Move the gray shape so that its center is aligned with the center of the red shape. Then, move the gray shape one space to the right. If the gray shape is above the red shape, flip the gray shape vertically before moving it. If the gray shape is below the red shape, flip the gray shape horizontally before moving it. The gray shape should remain in its original position. 
:: def edccfbcfbcfeedfaajddejeiddedbdaa(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  if uppermost(obj_5) < uppermost(obj_2):
    O = paint(cover(I, obj_5), shift(vmirror(obj_5), (uppermost(obj_2) - uppermost(obj_5) + centerofmass(obj_2)[0] - centerofmass(obj_5)[0], width(obj_2) + 1)))
  else:
    O = paint(cover(I, obj_5), shift(hmirror(obj_5), (uppermost(obj_2) + centerofmass(obj_2)[0] - centerofmass(obj_5)[0], width(obj_2) + 1)))
  return O
 
16.666666666666668, tensor(0.0072), Description: Move the gray shape to the right so that its left edge aligns with the right edge of the red shape. The gray shape should remain in its original position. 
:: def dacaejighcahefaijcfajceaacfdbfda(I):
  obj2 = first(colorfilter(objects(I, F, F, T), 2))
  obj5 = first(colorfilter(objects(I, F, F, T), 5))
  hdiff = height(obj2) - height(obj5)
  wdiff = width(obj2)
  shift_amount = (0, wdiff)
  moved_obj5 = shift(obj5, shift_amount)
  O = paint(paint(I, obj2), moved_obj5)
  return O
 
14.0, tensor(0.0072), Description: Move the gray shape to the right so that its left edge aligns with the right edge of the red shape. The gray shape should remain in its original position. 
:: def gaabafcchhbcefagaeddciaebgcaabab(I):
  obj2 = first(colorfilter(objects(I, F, F, T), 2))
  obj5 = first(colorfilter(objects(I, F, F, T), 5))
  new_obj5 = toobject(shift(toindices(obj5), subtract((0, leftmost(obj5)), (0, rightmost(obj2) + 1))), I)
  O = paint(paint(I, obj2), new_obj5)
  return O
 
16.666666666666668, tensor(0.0078), Description: Description: Move the gray shape to the right so that its left edge aligns with the right edge of the red shape. The gray shape should remain in its original position. 
:: def hdabacccdeegeaaebfhfiacgchffedad(I):
  obj2 = first(colorfilter(objects(I, F, F, T), 2))
  obj5 = first(colorfilter(objects(I, F, F, T), 5))
  shift_amount = (uppermost(obj2) - uppermost(obj5), width(obj2))
  moved_obj5 = shift(obj5, shift_amount)
  O = paint(paint(I, obj2), moved_obj5)
  return O
 
14.0, tensor(0.0111), Description: Move the gray shape to the bottom of the grid, keeping it in the same column. Then, move the gray shape to the left or right so that its center is aligned with the center of the red shape. The gray shape should remain in its original position. 
:: def cahcgafdejgfejahbahdbchhdicajbhf(I):
  obj2 = first(colorfilter(objects(I, T, F, T), TWO))
  obj5 = first(colorfilter(objects(I, T, F, T), FIVE))
  h2, w2 = shape(obj2)
  h5, w5 = shape(obj5)
  new_pos = (lowermost(obj2), leftmost(obj2) + (w2 - w5)//2)
  O = paint(cover(I, obj5), shift(obj5, subtract(new_pos, ulcorner(obj5))))
  return O
 
14.0, tensor(0.0108), Description: Move the gray shape so that its center is directly below the center of the red shape. The gray shape should remain in its original position. 
:: def egcbedhcheiaeedjbcfafbfgabbedbbd(I):
  obj2 = first(colorfilter(objects(I, T, F, T), TWO))
  obj5 = first(colorfilter(objects(I, T, F, T), FIVE))
  center2 = centerofmass(obj2)
  center5 = centerofmass(obj5)
  offset = subtract((lowermost(obj2) + height(obj5)//2, center2[1]), center5)
  O = paint(cover(I, obj5), shift(obj5, offset))
  return O
 
14.0, tensor(0.0163), Description: Move the gray shape so that its top left corner aligns with the top left corner of the red shape if the gray shape is to the left of the red shape, or its top right corner aligns with the top right corner of the red shape if the gray shape is to the right of the red shape. The gray shape should remain in its original position. 
:: def jaefafdcgfcjebfdiecfeeibjdhhchec(I):
  obj2 = first(colorfilter(objects(I, T, F, T), TWO))
  obj5 = first(colorfilter(objects(I, T, F, T), FIVE))
  direction = position(obj5, obj2)
  new_pos = add(ulcorner(obj5), gravitate(obj5, shift(obj2, multiply(direction, (height(obj5), 0)))))
  O = paint(cover(I, obj5), shift(obj5, subtract(new_pos, ulcorner(obj5))))
  return O
 
27.666666666666668, tensor(0.0111), Description: Move the red shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the right so that its left edge aligns with the right edge of the red shape. The gray shape should remain in its original position. 
:: def dcjhcbhejcgceehcjdbhdbedbijbihbd(I):
  obj2 = first(colorfilter(objects(I, T, F, T), 2))
  obj5 = first(colorfilter(objects(I, T, F, T), 5))
  target_row = uppermost(obj5) 
  obj2_shifted = shift(obj2, (target_row - uppermost(obj2), 0))
  obj5_shifted = shift(obj5, (target_row - uppermost(obj5), rightmost(obj2_shifted) - leftmost(obj5) + 1)) 
  return paint(paint(canvas(0, shape(I)), obj2_shifted), obj5_shifted)
 
27.666666666666668, tensor(0.0111), Description: Move the red shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the right so that its left edge aligns with the right edge of the red shape. The gray shape should remain in its original position. 
:: def bbjafiddaihiefecbdeabaifafeeafih(I):
  obj2 = first(colorfilter(objects(I, T, F, T), 2))
  obj5 = first(colorfilter(objects(I, T, F, T), 5))
  shift_amount = (uppermost(obj5) - uppermost(obj2), 0)
  return paint(paint(canvas(0, shape(I)), shift(obj2, shift_amount)), shift(obj5, add(shift_amount, (0, rightmost(obj2)-leftmost(obj5) + 1))))
 
25.333333333333332, tensor(0.0115), Description: Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the right so that its left edge aligns with the right edge of the red shape. The gray shape should remain in its original position. 
:: def ffbhhdffiaigefdfighdcdaedgdgdhhf(I):
  obj2 = first(colorfilter(objects(I, T, F, T), 2))
  obj5 = first(colorfilter(objects(I, T, F, T), 5))
  return paint(
      fill(I, 0, obj2), 
      shift(obj5, (uppermost(obj2) - uppermost(obj5), rightmost(obj2) - leftmost(obj5) + 1))
  )
 
11.333333333333334, tensor(0.0474), Description: Copy the input grid. Then, for each gray square, move it to the bottom right corner of the grid, keeping it in the same column. The gray square should be directly below and to the right of the gray square. Then, change the color of the gray shape to light blue. 
:: def ibddccabbhheeceebechcagbhdfgfcia(I):
  five_objs = colorfilter(objects(I, True, False, True), 5)
  O = cover(I, merge(five_objs))
  for obj in five_objs:
    new_position = (lowermost(obj), len(I[0]) - rightmost(obj) - 1)
    O = paint(O, shift(obj, new_position))
  return O
 
14.0, tensor(0.0171), Description: Move the gray shape so that its top left corner aligns with the top center of the red shape if the red shape is vertical, or its top left corner aligns with the left edge of the red shape if the red shape is horizontal. The gray shape should remain in its original position. 
:: def gdffccfcjbfjecfdidagiaaeheabedga(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  center_2 = centerofmass(obj_2)
  
  if portrait(obj_2):
    offset = (uppermost(obj_2) - height(obj_5) , center_2[1] - centerofmass(obj_5)[1])
  else:
    offset = (center_2[0] - centerofmass(obj_5)[0], leftmost(obj_2) - width(obj_5))
    
  O = paint(cover(I, obj_5), shift(obj_5, offset))
  return O
 
14.0, tensor(0.0173), Description: Move the gray shape so that its left edge aligns with the left edge of the red shape if the gray shape is above the red shape, or its right edge aligns with the right edge of the red shape if the gray shape is below the red shape. The gray shape should remain in its original position. 
:: def ceaacfdcdjceeahcabdcddchfihejjja(I):
    obj_5 = first(colorfilter(objects(I, T, F, T), 5))
    obj_2 = first(colorfilter(objects(I, T, F, T), 2))
    
    O = cover(I, obj_5)
    for _, (i, j) in obj_5:
      if i < uppermost(obj_2):
        O = paint(O, {(5, (i, j + leftmost(obj_2) - leftmost(obj_5)))})
      else:
        O = paint(O, {(5, (i, j + rightmost(obj_2) - rightmost(obj_5)))})
    return O
 
13.666666666666666, tensor(0.0135), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left so that its left edge aligns with the left edge of the red shape. The gray shape should remain in its original position. 
:: def fjfabjjcbcecefhfjbcfadaciaadhcac(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  
  h_offset = leftmost(obj_2) - leftmost(obj_5)
  v_offset = uppermost(obj_2) - uppermost(obj_5) - height(obj_5)
  
  shifted_5 = shift(obj_5, (v_offset, h_offset))
  O = paint(cover(I, obj_5), shifted_5)
  return O
 
11.333333333333334, tensor(0.0135), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left so that its left edge aligns with the left edge of the red shape. The gray shape should remain in its original position. 
:: def cdidbejdahceecbdjfccdghhdiccjcgd(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  
  top_row_2 = uppermost(obj_2)
  left_col_2 = leftmost(obj_2)
  
  O = cover(I, obj_5)
  for _, (i, j) in obj_5:
    new_i = top_row_2 - height(obj_5) + i
    new_j = left_col_2 + j
    O = paint(O, {(5, (new_i, new_j))})
  
  return O
 
13.666666666666666, tensor(0.0170), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left so that its left edge aligns with the left edge of the red shape if the red shape is vertical, or its right edge aligns with the right edge of the red shape if the red shape is horizontal. The gray shape should remain in its original position. 
:: def gchijhdfjbdgeieaifgcbaddaadiehfe(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  O = cover(I, obj_5)
  
  if portrait(obj_2):
    offset = (uppermost(obj_2) - height(obj_5), leftmost(obj_2) - leftmost(obj_5))
  else:
    offset = (uppermost(obj_2) - height(obj_5), rightmost(obj_2) + 1)
  
  O = paint(O, shift(obj_5, offset))
  return O
 
16.333333333333332, tensor(0.0082), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left so that its left edge aligns with the left edge of the red shape. The gray shape should remain in its original position. 
:: def ejhebdjbdcadeffiiajjffaggjaicchd(I):
  obj2 = first(colorfilter(objects(I, F, F, T), 2))
  obj5 = first(colorfilter(objects(I, F, F, T), 5))
  target_pos = (uppermost(obj2) - height(obj5), leftmost(obj2))
  moved_obj5 = shift(obj5, subtract(target_pos, ulcorner(obj5)))
  O = paint(paint(I, obj2), moved_obj5)
  return O
 
15.333333333333334, tensor(0.0082), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left so that its center is aligned with the center of the red shape. The gray shape should remain in its original position. 
:: def ecigbjbbdebdecdeidbgfefhfbhfacja(I):
  obj2 = first(colorfilter(objects(I, F, F, T), 2))
  obj5 = first(colorfilter(objects(I, F, F, T), 5))
  h2 = height(obj2)
  h5 = height(obj5)
  target_pos = (uppermost(obj2) - h5 - (h2 // 2) + (h5 // 2), leftmost(obj2))
  moved_obj5 = shift(obj5, subtract(target_pos, ulcorner(obj5)))
  O = paint(paint(I, obj2), moved_obj5)
  return O
 
13.666666666666666, tensor(0.0111), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left or right so that its center is aligned with the center of the red shape. The gray shape should remain in its original position. 
:: def ffhhfibffecheceiagdabfdafcjehibj(I):
  obj2 = first(colorfilter(objects(I, T, F, T), TWO))
  obj5 = first(colorfilter(objects(I, T, F, T), FIVE))
  new_pos = (uppermost(obj2) - height(obj5), leftmost(obj2) + (width(obj2) - width(obj5))//2) 
  O = paint(cover(I, obj5), shift(obj5, subtract(new_pos, ulcorner(obj5))))
  return O
 
16.666666666666668, tensor(0.0124), Description: Move the gray shape to the left so that its left edge aligns with the left edge of the red shape. Then, move a copy of the gray shape to the right so that its left edge aligns with the right edge of the red shape. The gray shape should remain in its original position. 
:: def aahdaehjhddceacfiihdehdhgfgbffaf(I):
  obj2 = first(colorfilter(objects(I, T, F, T), TWO))
  obj5 = first(colorfilter(objects(I, T, F, T), FIVE))
  left_pos = (uppermost(obj2), leftmost(obj2) - width(obj5))
  right_pos = (uppermost(obj2), rightmost(obj2) + 1)
  O = paint(cover(I, obj5), shift(obj5, subtract(left_pos, ulcorner(obj5))))
  O = paint(O, shift(obj5, subtract(right_pos, ulcorner(obj5))))
  return O
 
37.0, tensor(0.0124), Description: Move the gray shape to the left so that its left edge aligns with the left edge of the red shape. Then, move a copy of the gray shape to the right so that its left edge aligns with the right edge of the red shape. The gray shape should remain in its original position. 
:: def hccaceeebdebehbeadedhcjfdbagjjca(I):
  obj2 = first(colorfilter(objects(I, T, F, T), TWO))
  obj5 = first(colorfilter(objects(I, T, F, T), FIVE))
  indices2 = toindices(obj2)
  shifted_obj5 = set()
  for i, j in indices2:
    left_pos = (i, j - width(obj5))
    right_pos = (i, j + 1)
    shifted_obj5.add(shift(obj5, subtract(left_pos, ulcorner(obj5))))
    shifted_obj5.add(shift(obj5, subtract(right_pos, ulcorner(obj5))))
  O = cover(I, obj5)
  for obj in shifted_obj5:
    O = paint(O, obj)
  return O
 
14.0, tensor(0.0111), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left or right so that its center is aligned with the center of the red shape. The gray shape should remain in its original position. 
:: def dbejdfeejjbjeiefbeajacggaefdgbab(I):
  obj2 = first(colorfilter(objects(I, T, F, T), TWO))
  obj5 = first(colorfilter(objects(I, T, F, T), FIVE))
  h5 = height(obj5)
  new_pos = (uppermost(obj2) - h5 // 2 - h5 % 2, leftmost(obj2) + (width(obj2) - width(obj5)) // 2)
  O = paint(cover(I, obj5), shift(obj5, subtract(new_pos, ulcorner(obj5))))
  return O 
 
22.333333333333332, tensor(0.0125), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move copies of the gray shape to the left and right so that they are in the same row as the red shape and their left edges align with the left and right edges of the red shape, respectively. The gray shape should remain in its original position. 
:: def bcbcfgfceaebedecbdfjhdiagieffifa(I):
  obj2 = first(colorfilter(objects(I, T, F, T), TWO))
  obj5 = first(colorfilter(objects(I, T, F, T), FIVE))
  O = cover(I, obj5)
  for j in range(leftmost(obj2) - width(obj5), rightmost(obj2) + 1 + width(obj5), width(obj5)):
    new_pos = (uppermost(obj2) - height(obj5), j)
    O = paint(O, shift(obj5, subtract(new_pos, ulcorner(obj5))))
  return O
 
18.333333333333332, tensor(0.0111), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the right so that its left edge aligns with the right edge of the red shape. The gray shape should remain in its original position. 
:: def eadcecccigafegfijfebbchjadjdghcc(I):
  obj2 = first(colorfilter(objects(I, T, F, T), 2))
  obj5 = first(colorfilter(objects(I, T, F, T), 5))
  return paint(paint(canvas(0, shape(I)), shift(obj2, (0, 0))), shift(obj5, (uppermost(obj2) - uppermost(obj5), rightmost(obj2) - leftmost(obj5) + 1)))
 
18.666666666666668, tensor(0.0111), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the right so that its left edge aligns with the right edge of the red shape. The gray shape should remain in its original position. 
:: def ehefacgdhecjefcaiccdehceajbccffj(I):
  obj2 = argmax(objects(I, T, F, T), lambda obj: colorcount(obj, 2))
  obj5 = argmax(objects(I, T, F, T), lambda obj: colorcount(obj, 5))
  return paint(paint(canvas(0, shape(I)), shift(obj5, (uppermost(obj2) - uppermost(obj5), rightmost(obj2) - leftmost(obj5) + 1))), obj2)
 
14.0, tensor(0.0161), Description: Move the gray shape to the position (1, 7) in the grid. The gray shape should remain in its original position. 
:: def ggfeffaeebeheecbjcadeicejhcfidhb(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  grid_without_5 = cover(I, obj_5)
  new_position = (1, 7)  # Example position for Output_0
  shifted_obj_5 = shift(obj_5, subtract(new_position, ulcorner(obj_5)))
  O = paint(grid_without_5, shifted_obj_5)
  return O
 
16.666666666666668, tensor(0.0169), Description: Copy the input grid. Then, move the gray shape to the position (1, 7) in the grid. The gray shape should remain in its original position. 
:: def dhjcfefcejheeccfbggbbcabdedcchhc(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  target_indices = shift(toindices(obj_5), (1 - uppermost(obj_5), 7 - leftmost(obj_5))) # Example for Output_0
  O = canvas(mostcolor(I), shape(I))
  for i in range(len(I)):
    for j in range(len(I[0])):
      if (i, j) in target_indices:
        O = fill(O, 5, {(i, j)})
      else:
        O = fill(O, I[i][j], {(i, j)})
  return O
 
14.0, tensor(0.0069), Description: Move the gray shape six spaces to the right, keeping it in the same row. The gray shape should remain in its original position. 
:: def fecjfebffhcfecabacacdccifccjdfjd(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  offset = (0, 6)  # Determined from input-output analysis
  new_obj_5 = shift(obj_5, offset) 
  O = paint(cover(I, obj_5), new_obj_5)
  return O
 
14.0, tensor(0.0211), Description: Move the gray shape to the position (2, 6) in the grid, keeping its original orientation. The gray shape should remain in its original position. 
:: def djadadafcjbfedeeagidecejcfhaejdc(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  new_loc = add(ulcorner(obj_5), (2, 6))  # New upper-left corner location
  O = paint(cover(I, obj_5), shift(obj_5, subtract(new_loc, ulcorner(obj_5)))) 
  return O
 
14.0, tensor(0.0092), Description: Move the gray shape to the position (1, 6) in the grid, keeping it in the same column. The gray shape should be directly above the gray shape. 
:: def ejdjdjedacdbeahhiidgheedbdeeccbi(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  target_row = 1 # Row index where the top of the "5" object should be placed
  vertical_shift = target_row - uppermost(obj_5)
  O = paint(cover(I, obj_5), shift(obj_5, (vertical_shift, 6)))
  return O 
 
11.666666666666666, tensor(0.0229), Description: Move the gray shape to the position (2, 9) in the grid, keeping its original orientation. The gray shape should remain in its original position. 
:: def abcfdhaaifeeehejjefifebccceggbdc(I):
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  ref_point = add(ulcorner(obj_2), (2, 9)) # Reference point relative to the "2" object
  O = paint(cover(I, obj_5), shift(obj_5, subtract(ref_point, ulcorner(obj_5))))
  return O
 
14.0, tensor(0.0106), Description: Move the gray shape to the position (2, 7) in the grid, keeping it in the same column. The gray shape should be directly above the gray shape. 
:: def dccdacdeaidjeefcbfcbehdcfaebidec(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  h, w = len(I), len(I[0])
  target_column = w - width(obj_5) - 1  # Target column for the right edge of the "5" object
  horizontal_shift = target_column - rightmost(obj_5) 
  O = paint(cover(I, obj_5), shift(obj_5, (2, horizontal_shift)))
  return O
 
14.0, tensor(0.0071), Description: Move the gray shape to the right edge of the grid, keeping it in the same row. The gray shape should be directly to the right of the gray shape. 
:: def dfdhibacfajeehebjcgfcheceheijadd(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  right_shift = (0, width(I) - rightmost(obj_5) - 1)
  O = paint(cover(I, obj_5), shift(obj_5, right_shift))
  return O
 
16.666666666666668, tensor(0.0071), Description: Move the gray shape to the right edge of the grid, keeping it in the same row. The gray shape should be directly to the right of the gray shape. 
:: def ahbbiaeefeejechabibedghjjibcjbfd(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  O = paint(I, shift(obj_5, (0, len(I[0]) - rightmost(obj_5) - 1)))
  return O
 
14.0, tensor(0.0071), Description: Move the gray shape to the right edge of the grid, keeping it in the same row. The gray shape should be directly to the right of the gray shape. 
:: def edhfeecicbaceecdjeaccddfecefgbea(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  shift_amount = width(I) - width(obj_5)
  O = paint(I, shift(obj_5, (0, shift_amount)))
  return O
 
14.0, tensor(0.0039), Description: Move the gray shape to the left edge of the grid, keeping it in the same row. The gray shape should be directly to the left of the gray shape. 
:: def dejdicjgjccceiacjeebajbeeebdfaca(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  left = crop(I, (0, 0), (len(I), leftmost(obj_5)))
  right = crop(I, (0, leftmost(obj_5)), (len(I), len(I[0]) - leftmost(obj_5)))
  O = hconcat(left, right)
  return O
 
14.0, tensor(0.0038), Description: Move the gray shape to the right edge of the grid, keeping it in the same row. The gray shape should be directly to the right of the gray shape. 
:: def bajcbcehhchgegabbdgdcjafedcdcghe(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  shift_amount = (len(I[0]) - 1) - rightmost(obj_5)
  O = paint(cover(I, obj_5), shift(obj_5, (0, shift_amount)))
  return O
 
16.666666666666668, tensor(0.0038), Description: Move the gray shape to the right edge of the grid, keeping it in the same row. The gray shape should be directly to the right of the gray shape. 
:: def jeheadcgiddjejjdigcgdbddebifcfcf(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  O = paint(I, shift(obj_5, (0, (len(I[0]) - 1) - rightmost(obj_5))))
  return O
 
14.0, tensor(0.0057), Description: Move the gray shape to the bottom of the grid, keeping it in the same column. The gray shape should be three spaces below the gray shape. 
:: def dagadbaicgegeajbjidfdddfajfiajdd(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  O = paint(cover(I, obj_5), shift(obj_5, (lowermost(obj_5) - uppermost(obj_5) + 3, 0)))
  return O
 
64.0, tensor(0.0057), Description: Move the gray shape to the bottom of the grid, keeping it in the same column. The gray shape should be three spaces below the gray shape. 
:: def fidedcdeaaibeaagjfahfjacafdcabbd(I):
  rows = tuple(row for row in I)
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  target_index = lowermost(obj_5) + 3 
  upper_rows = rows[:target_index]
  lower_rows = rows[target_index:]
  obj_5_row = rows[uppermost(obj_5):uppermost(obj_5) + height(obj_5)]
  O = tuple(y for x in (upper_rows, obj_5_row, lower_rows) for y in x) 
  return O
 
29.0, tensor(0.0057), Description: Move the gray shape to the bottom of the grid, keeping it in the same column. The gray shape should be three spaces below the gray shape. 
:: def dhcajiibbbjeebdhiichgjebjegcccjb(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  temp_grid = vconcat(I, canvas(0, (3, len(I[0])))) 
  O = vconcat(temp_grid[:lowermost(obj_5) + 3], temp_grid[lowermost(obj_5) + 3 + height(obj_5):])
  return O
 
16.666666666666668, tensor(0.0066), Description: Move the gray shape to the bottom of the grid, keeping it in the same column. Then, move the gray shape two spaces to the right. The gray shape should be directly below the red shape and two spaces to the right. 
:: def cjdhdhcebfedecdbbehfbjfjdeieeieb(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  target_col = rightmost(obj_2) + 2
  target_indices = shift(toindices(obj_5), (lowermost(obj_2) - uppermost(obj_5), target_col - leftmost(obj_5)))
  O = canvas(mostcolor(I), shape(I))
  for i in range(len(I)):
    for j in range(len(I[0])):
      if (i, j) in target_indices:
        O = fill(O, 5, {(i, j)})
      else:
        O = fill(O, I[i][j], {(i, j)})
  return O
 
14.0, tensor(0.0066), Description: Move the gray shape to the bottom of the grid, keeping it in the same column. Then, move the gray shape two spaces to the right. The gray shape should be directly below the red shape and two spaces to the right. 
:: def ffdffadiaajaecddiagaejefbibedgdd(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  O = paint(
      cover(I, obj_5), 
      shift(obj_5, (lowermost(obj_2) - uppermost(obj_5), rightmost(obj_2) - leftmost(obj_5) + 2))
  )
  return O
 
16.666666666666668, tensor(0.0086), Description: Move the gray shape two spaces to the right. Then, move the gray shape to the bottom of the grid, keeping it in the same column. The gray shape should be directly below the red shape and two spaces to the right. 
:: def dgegeadffjifeaeeiebaebcececdbhib(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  h_offset = rightmost(obj_2) - leftmost(obj_5) + 2
  O = I
  for _ in range(h_offset):
    O = move(O, obj_5, RIGHT)
  O = move(O, obj_5, (lowermost(obj_2) - uppermost(obj_5), 0))
  return O
 
14.0, tensor(0.0074), Description: Move the gray shape to the right edge of the grid, keeping it in the same row. The gray shape should be directly to the right of the gray shape. 
:: def aeeacaaidbhaebfgjaihdbaajdefcaff(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  right_shift = len(I[0]) - rightmost(obj_5) - 1 
  O = paint(cover(I, obj_5), shift(obj_5, (0, right_shift)))
  return O
 
14.0, tensor(0.0102), Description: Description: Copy the input grid. Then, for each gray square, move it to the right edge of the grid, keeping it in the same row. The gray square should be directly to the right of the gray square. 
:: def dbfiajadifbcedacjedbffaagbbdfbdb(I):
  for obj in objects(I, T, F, T):
    if color(obj) == 5:
      O = paint(cover(I, obj), shift(obj, (0, len(I[0]) - rightmost(obj) - 1)))
  return O
 
17.0, tensor(0.0074), Description: Move the gray shape to the right edge of the grid, keeping it in the same row. The gray shape should be directly to the right of the gray shape. 
:: def adecagbdjeacefffibigfjccfbhciabg(I):
  obj_5 = first(filter(lambda obj: color(obj) == 5, objects(I, T, F, T)))
  O = paint(I, shift(obj_5, (0, len(I[0]) - rightmost(obj_5) - 1)))
  return O
 
16.666666666666668, tensor(0.0177), Description: Move the gray shape to the position (1, 0) in the grid, keeping its original orientation. The gray shape should remain in its original position. 
:: def igbdcefhaaddeafhjhiidfhajeaiedje(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  O = paint(I, shift(obj_5, (-uppermost(obj_5) + 1, -leftmost(obj_5))))
  return O
 
30.333333333333332, tensor(0.0177), Description: Move the gray shape to the position (1, 0) in the grid, keeping its original orientation. The gray shape should remain in its original position. 
:: def cdadaiaeeaaheeaciaacijhgbieefdfe(I):
  obj_5 = asobject(crop(I, ulcorner(ofcolor(I, 5)), shape(ofcolor(I, 5))))
  O = paint(canvas(0, shape(I)), shift(obj_5, (1, -leftmost(obj_5))))
  return O
 
14.0, tensor(0.0187), Description: Description: Move the gray shape to the position (1, 0) in the grid, keeping its original orientation. The gray shape should remain in its original position. 
:: def caifabgcffbceiehagjfccffadajefcj(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  shifted_obj_5 = shift(obj_5, (1 - uppermost(obj_5), -leftmost(obj_5)))
  O = paint(cover(I, obj_5), shifted_obj_5)
  return O
 
7.0, tensor(0.0187), Description: Description: Move the gray shape to the position (1, 0) in the grid, keeping its original orientation. The gray shape should remain in its original position. 
:: def ecjafacdecagecadbfabdcggcicebjfj(I):
  indices_5 = ofcolor(I, 5)
  obj_5 = toobject(indices_5, I)
  shifted_indices = shift(indices_5, (1 - uppermost(indices_5), -leftmost(indices_5)))
  O = paint(fill(I, 0, indices_5), toobject(shifted_indices, I))
  return O
 
16.666666666666668, tensor(0.0081), Description: Move the gray shape two spaces to the right. Then, mirror the gray shape horizontally. The gray shape should remain in its original position. 
:: def hgcgdecdbeidedbabcdcahjhfdcgebjh(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  center_j = len(I[0]) // 2
  shift_amount = (center_j - 1) - rightmost(obj_5)
  mirrored_obj = hmirror(shift(obj_5, (0, 2 * shift_amount)))
  O = paint(I, mirrored_obj)
  return O
 
15.333333333333334, tensor(0.1282), Description: Mirror the gray shape horizontally. The gray shape should remain in its original position. 
:: def diidcbeadgcgefeaigdefbdgfjabdfec(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  center_j = len(I[0]) // 2
  mirrored_obj = frozenset((v, (i, 2 * center_j - j - 1)) for v, (i, j) in obj_5) 
  O = paint(I, mirrored_obj)
  return O
 
40.0, tensor(0.0055), Description: Copy the left half of the input grid to the left half of the output grid. Then, mirror the left half of the input grid horizontally and copy it to the right half of the output grid. 
:: def accgjgaejdbdefaiijhjdacfaabdhibf(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  left_grid = crop(I, (0, 0), (len(I), len(I[0]) // 2))
  right_grid = hmirror(left_grid)
  O = hconcat(left_grid, right_grid)
  return O
 
15.0, tensor(0.1282), Description: Mirror the gray shape horizontally. The gray shape should remain in its original position. 
:: def gaegeaejdfcbedfbaiieeggaafdfbdaa(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  indices_5 = toindices(obj_5)
  mirrored_indices = frozenset((i, len(I[0]) - j - 1) for i, j in indices_5)
  O = fill(I, 5, mirrored_indices)
  return O
 
11.0, tensor(0.0063), Description: Move the gray shape to the right so that its left edge aligns with the right edge of the red shape. The gray shape should remain in its original position. 
:: def ffhgbbcgdgdcehcbidbeddbicafjhjed(I):
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  O = paint(cover(I, obj_5), shift(obj_5, (uppermost(obj_2) - uppermost(obj_5), rightmost(obj_2) + width(obj_2) - rightmost(obj_5))))
  return O
 
14.0, tensor(0.0088), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the right edge of the grid, keeping it in the same row. The gray shape should be directly above the red shape and directly to the right of the gray shape. 
:: def iajbdiffcbaeeibaifiaebeifaiedjba(I):
  objs = objects(I, T, F, T)
  obj_5 = first(colorfilter(objs, 5))
  rightmost_col = max(rightmost(obj) for obj in objs)
  target_row = min(uppermost(obj) for obj in objs if color(obj) == 2)
  O = paint(cover(I, obj_5), shift(obj_5, (target_row - uppermost(obj_5), rightmost_col - rightmost(obj_5))))
  return O
 
11.333333333333334, tensor(0.0066), Description: Move the gray shape to the bottom of the grid, keeping it in the same column. Then, move the gray shape two spaces to the right. The gray shape should be directly below the red shape and two spaces to the right. 
:: def dgfejcbjcahaegacbcgajcheedbcgfcb(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  O = paint(
      cover(I, obj_5), 
      shift(
          obj_5, 
          (uppermost(obj_2) - uppermost(obj_5), rightmost(obj_2) - leftmost(obj_5) + 2)
      )
  )
  return O
 
14.0, tensor(0.0066), Description: Move the gray shape to the bottom of the grid, keeping it in the same column. Then, move the gray shape two spaces to the right. The gray shape should be directly below the red shape and two spaces to the right. 
:: def ffagihfgedfeechbaaecajahfhdaejea(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  target_indices = shift(toindices(obj_5), (uppermost(obj_2) - uppermost(obj_5), rightmost(obj_2) - leftmost(obj_5) + 2))
  O = canvas(mostcolor(I), shape(I))
  for i, j in asindices(I):
      O = fill(O, 5 if (i, j) in target_indices else I[i][j], {(i, j)})
  return O
 
11.333333333333334, tensor(0.0066), Description: Move the gray shape to the bottom of the grid, keeping it in the same column. Then, move the gray shape two spaces to the right. The gray shape should be directly below the red shape and two spaces to the right. 
:: def ebcccgbedibdeffgieachhcbdhfcdgcj(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  O = paint(
      cover(I, obj_5), 
      toobject(
          shift(
              toindices(obj_5), 
              (uppermost(obj_2) - uppermost(obj_5), rightmost(obj_2) - leftmost(obj_5) + 2)
          ),
          I
      )
  )
  return O
 
13.333333333333334, tensor(0.0220), Description: Move the gray shape to the position (2, 7) in the grid, keeping its original orientation. The gray shape should remain in its original position. 
:: def ebebcieaedieeahcjadbigaabcfehjdh(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  target_position = (2, 7)  # Example specific target
  offset = subtract(target_position, ulcorner(obj_5))
  new_obj_5 = shift(obj_5, offset) 
  O = paint(cover(I, obj_5), new_obj_5)
  return O
 
16.333333333333332, tensor(0.0137), Description: Description: Copy the input grid. Then, split the gray shape in half horizontally and vertically. Move the top left quarter of the gray shape two spaces up and two spaces to the left. Move the bottom right quarter of the gray shape two spaces down and two spaces to the right. The gray shape should remain in its original position. 
:: def aedeadjajbddecfdjahehgjcfeeffbda(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  left_part = shift(obj_5, (-2, -2))  # Example specific split and shift
  right_part = shift(obj_5, (2, 2))  # Example specific split and shift
  O = paint(paint(cover(I, obj_5), left_part), right_part)
  return O
 
13.0, tensor(0.0079), Description: Move the gray shape to the top of the grid, keeping it in the same column. If the gray shape is in the bottom half of the grid, move it to the top of the grid. The gray shape should remain in its original position. 
:: def fcjdbijifcfjebfaafafeeacfbdedhji(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  com = centerofmass(obj_5)
  target_row = 1 if com[0] > len(I) // 2 else len(I) - 2  # Example specific logic
  target_col = com[1]
  target_position = (target_row, target_col)
  offset = subtract(target_position, ulcorner(obj_5))
  new_obj_5 = shift(obj_5, offset) 
  O = paint(cover(I, obj_5), new_obj_5)
  return O
 
33.333333333333336, tensor(0.0063), Description: Move the gray shape to the top of the grid, keeping it in the same column. The gray shape should be directly above the gray shape. 
:: def bjejecgdfdbfedfcahaadfjcfaeacbfe(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  target_row =  uppermost(obj_5) - height(obj_5)  # Example specific target row
  O = vconcat(I[:target_row], vconcat(I[target_row + height(obj_5):], I[target_row:target_row + height(obj_5)]))
  return O
 
13.666666666666666, tensor(0.0067), Description: Move the gray shape to the top of the grid, keeping it in the same column. The gray shape should be directly above the red shape. 
:: def djehbhdefdbiefbajbadecedjebfadah(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  top_shift = (uppermost(obj_2) - lowermost(obj_5) - 1, 0)
  O = paint(cover(I, obj_5), shift(obj_5, top_shift))
  return O
 
11.333333333333334, tensor(0.0072), Description: Move the gray shape to the left edge of the grid, keeping it in the same row. The gray shape should be directly to the left of the gray shape. 
:: def ehjceidbgfhgeedcjggidbhbcaebdafe(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  left_edge = 0
  left_shift = (0, left_edge - leftmost(obj_5)) 
  O = paint(cover(I, obj_5), shift(obj_5, left_shift))
  return O
 
14.0, tensor(0.0108), Description: Move the gray shape so that its center is aligned with the center of the red shape and its left edge aligns with the left edge of the red shape. The gray shape should remain in its original position. 
:: def cacefcefdbdceebabeaihddhaefidddi(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  target_center = (centerofmass(obj_2)[0], leftmost(obj_2))
  shift_amount = subtract(target_center, centerofmass(obj_5))
  O = paint(cover(I, obj_5), shift(obj_5, shift_amount))
  return O
 
13.666666666666666, tensor(0.0100), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left edge of the grid, keeping it in the same row. The gray shape should be directly above the red shape and directly to the left of the gray shape. 
:: def ieaaadeaafecedceagifieaadfaiefjf(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  v_shift = uppermost(obj_2) - lowermost(obj_5) - 1 
  h_shift = -leftmost(obj_5)
  O = paint(cover(I, obj_5), shift(obj_5, (v_shift, h_shift)))
  return O
 
14.0, tensor(0.0109), Description: Move the gray shape so that its center is aligned with the center of the red shape. Then, flip the gray shape vertically before moving it. The gray shape should remain in its original position. 
:: def bcfgbafdbfeeefgfjehjbcciedaaabbf(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  center_2 = center(obj_2)
  shift_amount = (center_2[0] - center(obj_5)[0], center_2[1] - center(obj_5)[1])
  O = paint(cover(I, obj_5), shift(vmirror(obj_5), shift_amount))
  return O
 
11.333333333333334, tensor(0.0051), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left or right so that its center is aligned with the center of the red shape. Flip the gray shape vertically before moving it. The gray shape should remain in its original position. 
:: def beehdbgbijbcecfiighbfiacaifbagbb(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  target_pos = (uppermost(obj_2)-height(obj_5)-1, leftmost(obj_2) + width(obj_2) // 2 - width(obj_5) // 2)
  O = paint(cover(I, obj_5), shift(vmirror(obj_5), target_pos))
  return O
 
14.0, tensor(0.0063), Description: Move the gray shape so that its center is aligned with the center of the red shape. Then, flip the gray shape vertically and move it one space up. The gray shape should remain in its original position. 
:: def bcbjfdcedddiedecafcehcgbfeeaedia(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  offset = gravitate(obj_5, obj_2)
  O = paint(cover(I, obj_5), shift(vmirror(obj_5), (offset[0] - 1, offset[1])))
  return O
 
13.666666666666666, tensor(0.0063), Description: Move the gray shape so that its center is aligned with the center of the red shape. Then, flip the gray shape vertically and move it one space up. The gray shape should remain in its original position. 
:: def cacbahdaghgjedecbfbfccebeecgheab(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  center_5 = center(obj_5)
  center_2 = center(obj_2)
  h_shift = center_2[1] - center_5[1]
  v_shift =  (uppermost(obj_2) - 1) - lowermost(obj_5)
  O = paint(cover(I, obj_5), shift(vmirror(obj_5), (v_shift, h_shift)))
  return O
 
14.0, tensor(0.0072), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the right so that its center is aligned with the center of the red shape. The gray shape should remain in its original position. 
:: def djhfbfjecaeiedcdbafjgidacfhgiiab(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  target_row = uppermost(obj_2)
  target_col = rightmost(obj_2) - width(obj_5) // 2 + width(obj_2) // 2
  O = paint(cover(I, obj_5), shift(obj_5, (target_row - lowermost(obj_5), target_col - leftmost(obj_5))))
  return O
 
14.0, tensor(0.0131), Description: Move the gray shape so that its center is aligned with the center of the red shape. The gray shape should remain in its original position. 
:: def fggahjchfdeieffcihbedbdcfbbgaebg(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  vertical_shift = uppermost(obj_2) - lowermost(obj_5)
  horizontal_shift = centerofmass(obj_2)[1] - centerofmass(obj_5)[1]
  O = paint(cover(I, obj_5), shift(obj_5, (vertical_shift, horizontal_shift)))
  return O
 
14.0, tensor(0.0075), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left or right so that its center is aligned with the center of the red shape. The gray shape should remain in its original position. 
:: def hdecbedidafgedcfbcjcfagdacbacaca(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  target_loc = (uppermost(obj_2), leftmost(obj_2) + width(obj_2) // 2 - width(obj_5) // 2)
  O = paint(cover(I, obj_5), shift(obj_5, subtract(target_loc, ulcorner(obj_5))))
  return O
 
14.0, tensor(0.0096), Description: Move the gray shape so that its center is directly above the center of the red shape. Then, move the gray shape to the left or right so that its center is aligned with the center of the red shape. If the gray shape is to the left of the red shape, move it to the left. If the gray shape is to the right of the red shape, move it to the right. The gray shape should remain in its original position. 
:: def biheddaaggdfebcaiibccfhfcbghdiee(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  v_shift = uppermost(obj_2) - lowermost(obj_5)
  h_shift = (lambda a, b: a if even(abs(a-b)) else a - sign(a-b))(center(obj_2)[1], center(obj_5)[1]) - center(obj_5)[1]
  O = paint(cover(I, obj_5), shift(obj_5, (v_shift, h_shift)))
  return O
 
14.0, tensor(0.0070), Description: Move the gray shape two spaces above the red shape and two spaces to the right. The gray shape should remain in its original position. 
:: def jddfdcjddjedebbbaicdjhbccfaefabd(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  target_row = uppermost(obj_2) - 2 
  offset = (target_row - uppermost(obj_5), rightmost(obj_2) - leftmost(obj_5) + 2)
  O = paint(cover(I, obj_5), shift(obj_5, offset))
  return O
 
11.666666666666666, tensor(0.0070), Description: Move the gray shape two spaces above the red shape and two spaces to the right. The gray shape should remain in its original position. 
:: def bahabdabafeeebaabdfebcbebfbaedbf(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  target_point = (uppermost(obj_2) - 2, rightmost(obj_2) + 2)  # Target top-right corner of '5'
  v_offset, h_offset = gravitate(toindices(obj_5), {target_point}) # 'gravitate' finds the move vector
  moved_5 = shift(obj_5, (v_offset, h_offset))
  O = paint(cover(I, obj_5), moved_5)
  return O
 
33.333333333333336, tensor(0.0068), Description: Move the gray shape to the top of the grid, keeping it in the same column. The gray shape should be directly above the red shape. 
:: def cdbgbdebhefcedafjdcbaeefcaacbacd(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  target_row = uppermost(obj_2) + VERTICAL_OFFSET 
  O = vconcat(I[:target_row], vconcat(I[target_row + height(obj_5):], I[target_row:target_row + height(obj_5)]))
  return O
 
14.0, tensor(0.0111), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left so that its left edge aligns with the left edge of the red shape. The gray shape should be directly above the red shape and directly to the left of the gray shape. 
:: def feaadcaebadfebebjcadddaddfgfbcbh(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  vertical_shift = uppermost(obj_2) - uppermost(obj_5) + VERTICAL_OFFSET
  horizontal_shift = leftmost(obj_2) - leftmost(obj_5)
  O = paint(cover(I, obj_5), shift(obj_5, (vertical_shift, horizontal_shift)))
  return O
 
14.0, tensor(0.0068), Description: Move the gray shape to the top of the grid, keeping it in the same column. The gray shape should be directly above the red shape. 
:: def iacbgciafcfjeheibfieacfefgedfcbd(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  # Create a dummy object above obj_2 for gravitate to target
  dummy_obj = shift(obj_2, (-VERTICAL_OFFSET, 0)) 
  v_shift, h_shift = gravitate(obj_5, dummy_obj) 
  O = paint(cover(I, obj_5), shift(obj_5, (v_shift, h_shift)))
  return O
 
23.333333333333332, tensor(0.0068), Description: Move the gray shape to the top of the grid, keeping it in the same column. The gray shape should be directly above the red shape. 
:: def iicfaddccadbeabgiebdecdebcgbeaeb(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  target_row = uppermost(obj_2) + VERTICAL_OFFSET
  above = I[:target_row]
  obj5_section = I[uppermost(obj_5):uppermost(obj_5) + height(obj_5)]
  below = I[target_row + height(obj_5):] 
  O = vconcat(above, vconcat(obj5_section, below))
  return O
 
14.0, tensor(0.0110), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left edge of the grid, keeping it in the same row. If the gray shape is above the red shape, move it one space up. The gray shape should be directly above the red shape and directly to the left of the gray shape. 
:: def ecgajcbfddabecabjbjchbcedcccabjd(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  v_pos, h_pos = position(obj_5, obj_2)
  v_shift = (VERTICAL_OFFSET - v_pos) if v_pos != 0 else 0
  h_shift = -h_pos 
  O = paint(cover(I, obj_5), shift(obj_5, (v_shift, h_shift)))
  return O
 
14.0, tensor(0.0063), Description: Move the gray shape so that its center is aligned with the center of the red shape. Then, flip the gray shape vertically and move it one space up. The gray shape should remain in its original position. 
:: def acbefjeabbjdegjdafegajcbciijdfie(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  offset = gravitate(obj_5, obj_2)
  O = paint(cover(I, obj_5), shift(vmirror(obj_5), (offset[0] - height(obj_5), offset[1])))
  return O
 
13.666666666666666, tensor(0.0061), Description: Move the gray shape so that its center is directly above the center of the red shape. Then, flip the gray shape vertically and move it one space up. The gray shape should remain in its original position. 
:: def edbgccefccjaeeaaafedidibeaedfeid(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  target_center = (uppermost(obj_2) - height(obj_5) // 2 - 1, centerofmass(obj_2)[1])
  offset = subtract(target_center, centerofmass(obj_5))
  O = paint(cover(I, obj_5), shift(vmirror(obj_5), offset))
  return O
 
16.333333333333332, tensor(0.0075), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left so that its left edge aligns with the left edge of the red shape. The gray shape should remain in its original position. 
:: def gfcgaehbdgbaeagfbcdejgbdgejahcaa(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  target_row = uppermost(obj_2) - height(obj_5) 
  target_col = leftmost(obj_2) - width(obj_5) 
  new_obj_5 = shift(obj_5, (target_row - uppermost(obj_5), target_col - leftmost(obj_5)))
  O = paint(I, new_obj_5)
  return O
 
18.666666666666668, tensor(0.0077), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move copies of the gray shape down so that their top edges align with the top edge of the red shape. The gray shape should remain in its original position. 
:: def fifaeagbajcceceebbbdbcaadbacbhad(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  target_row = uppermost(obj_2)
  target_col = leftmost(obj_2) - width(obj_5)
  new_objects = frozenset({shift(obj_5, (target_row + i * height(obj_5), target_col - leftmost(obj_5))) for i in range(height(obj_2))})
  O = paint(I, merge(new_objects))
  return O
 
19.0, tensor(0.0082), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move a copy of the gray shape to the bottom of the grid, keeping it in the same column. The gray shapes should be directly above and below the red shape, respectively. The gray shape should remain in its original position. 
:: def dfbcibedbfaeejibbbbbeccdefbeiidc(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  target_row_top = uppermost(obj_2) - height(obj_5)
  target_row_bottom = lowermost(obj_2) + 1 
  target_col = leftmost(obj_2) - width(obj_5)
  new_obj_top = shift(obj_5, (target_row_top - uppermost(obj_5), target_col - leftmost(obj_5)))
  new_obj_bottom = shift(obj_5, (target_row_bottom - uppermost(obj_5), target_col - leftmost(obj_5)))
  O = paint(paint(I, new_obj_top), new_obj_bottom)
  return O
 
17.0, tensor(0.0089), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left so that its left edge aligns with the left edge of the red shape. If the red shape is more than one row tall, move a copy of the gray shape down one row. The gray shape should remain in its original position. 
:: def fbggdjbahcahecjaiacacdaafbfgfeij(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  target_row = uppermost(obj_2) - height(obj_5)
  target_col = leftmost(obj_2) - width(obj_5)
  new_obj = shift(obj_5, (target_row - uppermost(obj_5), target_col - leftmost(obj_5)))
  O = paint(I, new_obj)
  if height(obj_2) > 1:
    O = paint(O, shift(new_obj, (height(obj_2) - 1, 0)))
  return O
 
17.0, tensor(0.0077), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move copies of the gray shape down so that their top edges align with the top edge of the red shape. The gray shape should remain in its original position. 
:: def dafahffbgcceeidaacebhdefcbbfcced(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  rows = interval(uppermost(obj_2), lowermost(obj_2) + 1, height(obj_5))
  target_col = leftmost(obj_2) - width(obj_5)
  new_objects = frozenset({shift(obj_5, (row - uppermost(obj_5), target_col - leftmost(obj_5))) for row in rows})
  O = paint(I, merge(new_objects))
  return O
 
16.666666666666668, tensor(0.0070), Description: Move the gray shape two spaces above the red shape and two spaces to the right. The gray shape should remain in its original position. 
:: def bddbfefefefbeegdbfbbfaedajadjhaf(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  new_5 = shift(obj_5, (uppermost(obj_2) - uppermost(obj_5) - 2, rightmost(obj_2) - leftmost(obj_5) + 2))
  O = canvas(mostcolor(I), shape(I))
  for v, (i, j) in asobject(I):
    if (i, j) in toindices(new_5):
      O = fill(O, 5, {(i, j)})
    else:
      O = fill(O, v, {(i, j)})
  return O
 
14.0, tensor(0.0093), Description: Move the gray shape two spaces above the red shape and keep it in the same column. The gray shape should remain in its original position. 
:: def iahabeadidggeiaibfcbccgeadefdcff(I):
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  offset = subtract(ulcorner(obj_2), ulcorner(obj_5))
  offset = (offset[0] - 2, offset[1])
  O = paint(cover(I, obj_5), shift(obj_5, offset))
  return O
 
14.0, tensor(0.0093), Description: Move the gray shape two spaces above the red shape and keep it in the same column. The gray shape should remain in its original position. 
:: def ffbeccefcabaebdaiebdbceacacjjgbg(I):
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  center_2 = centerofmass(obj_2)
  center_5 = centerofmass(obj_5)
  offset = (center_2[0] - center_5[0] - 2, center_2[1] - center_5[1])
  O = paint(cover(I, obj_5), shift(obj_5, offset))
  return O
 
14.0, tensor(0.0093), Description: Move the gray shape two spaces above the red shape and keep it in the same column. The gray shape should remain in its original position. 
:: def fffedbbfhgeaeagjjbgeebedebidbfee(I):
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  h, w = shape(I)
  target = (uppermost(obj_2) - 2, leftmost(obj_2) + width(obj_2) // 2 - width(obj_5) // 2)
  offset = (target[0] - uppermost(obj_5), target[1] - leftmost(obj_5))
  O = paint(cover(I, obj_5), shift(obj_5, offset))
  return O
 
14.0, tensor(0.0104), Description: Move the gray shape to the center of the grid. The gray shape should remain in its original position. 
:: def bihdhjaebffaeddfafijfadfhceidejb(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  center_shift = subtract(center(asindices(I)), center(obj_5))
  O = paint(cover(I, obj_5), shift(obj_5, center_shift))
  return O
 
29.666666666666668, tensor(0.0104), Description: Move the gray shape to the center of the grid. The gray shape should remain in its original position. 
:: def jfacfddccdcfebbeicdggcaadbecjefe(I):
  obj_5 = asobject(crop(I, ulcorner(ofcolor(I, 5)), shape(ofcolor(I, 5))))
  new_location = center(asindices(I))
  O = paint(canvas(0, shape(I)), shift(obj_5, subtract(new_location, ulcorner(obj_5))))
  return O
 
14.0, tensor(0.0064), Description: Move the gray shape to the middle of the grid, keeping it in the same column. The gray shape should be in the middle row of the grid. 
:: def fhjhffaecbfhedhcjddaidecdgbcgcib(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  target_row = height(I) // 2 - height(obj_5) // 2
  O = paint(cover(I, obj_5), shift(obj_5, (target_row - uppermost(obj_5), 0)))
  return O
 
14.0, tensor(0.0064), Description: Move the gray shape to the middle of the grid, keeping it in the same row. The gray shape should be in the middle column of the grid. 
:: def abfbjbifgcfiebdabaaefeagjfcjgjdh(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  target_col = width(I) // 2 - width(obj_5) // 2
  O = paint(cover(I, obj_5), shift(obj_5, (0, target_col - leftmost(obj_5))))
  return O
 
31.333333333333332, tensor(0.0104), Description: Move the gray shape to the center of the grid. The gray shape should remain in its original position. 
:: def bcgdccfdjdieeeeaicdfgaihijgabbfb(I):
  obj_5 = asobject(crop(I, ulcorner(ofcolor(I, 5)), shape(ofcolor(I, 5))))
  grid_center = center(asindices(I))
  obj_center = center(obj_5)
  shift_amount = subtract(grid_center, obj_center)
  O = paint(canvas(0, shape(I)), shift(obj_5, shift_amount))
  return O
 
14.0, tensor(0.0049), Description: Move the gray shape to the right so that its top right corner aligns with the top right corner of the red shape. Flip the gray shape vertically before moving it. The gray shape should remain in its original position. 
:: def fdheeebgeaaceceebahcddhaddefdgbh(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  right_2 = (uppermost(obj_2), rightmost(obj_2) + 1) 
  O = paint(cover(I, obj_5), shift(vmirror(obj_5), subtract(right_2, ulcorner(obj_5))))
  return O
 
14.0, tensor(0.0065), Description: Move the gray shape so that its center is directly above the center of the red shape. Then, move the gray shape one space to the right. The gray shape should remain in its original position. 
:: def bceaeddcidieeeeeafbbfebdgbceefdf(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  target_row = uppermost(obj_2) + height(obj_2) // 2 - height(obj_5) // 2 
  target_col = rightmost(obj_2) + 1
  O = paint(cover(I, obj_5), shift(obj_5, (target_row - uppermost(obj_5), target_col - leftmost(obj_5))))
  return O
 
9.333333333333334, tensor(0.0066), Description: Move the gray shape so that its center is aligned with the center of the red shape. Then, move the gray shape one space to the right. The gray shape should remain in its original position. 
:: def ghhgageebgcfedfabfdecbafgddahddh(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  v_shift = height(obj_2) // 2 - height(obj_5) // 2
  h_shift = width(obj_2) + 1
  new_obj_5 = shift(obj_5, (uppermost(obj_2) - uppermost(obj_5) + v_shift, leftmost(obj_2) - leftmost(obj_5) + h_shift)) 
  O = paint(cover(I, obj_5), new_obj_5)
  return O 
 
9.333333333333334, tensor(0.0066), Description: Move the gray shape so that its center is aligned with the center of the red shape. Then, move the gray shape one space to the right. The gray shape should remain in its original position. 
:: def dcbabcdeecafeffcbfjiaacdiaidiehb(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  target_center = add(center(obj_2), (0, width(obj_2) // 2 + 1)) 
  O = paint(cover(I, obj_5), shift(obj_5, subtract(target_center, center(obj_5))))
  return O
 
14.0, tensor(0.0084), Description: Move the gray shape so that its center is aligned with the center of the red shape. Then, move the gray shape one space to the right. If the gray shape is taller than the red shape, move it up by half the difference in their heights. The gray shape should remain in its original position. 
:: def jdacdcbdbfecefadjfejbbdadgebebfc(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  h_diff = height(obj_2) - height(obj_5)
  offset = (uppermost(obj_2) - uppermost(obj_5) + h_diff // 2, rightmost(obj_2) - leftmost(obj_5) + 1)
  O = paint(cover(I, obj_5), frozenset({(v, add(index, offset)) for v, index in obj_5}))
  return O
 
10.666666666666666, tensor(0.0066), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape two spaces to the right. The gray shape should be directly above the red shape and two spaces to the right. 
:: def djfecbcaehiheehcaaiafbhifeccaacc(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  temp_grid = paint(cover(I, obj_5), shift(obj_5, (uppermost(obj_2) - uppermost(obj_5), 0)))
  O = paint(
      cover(temp_grid, obj_5), 
      shift(obj_5, (0, rightmost(obj_2) - leftmost(obj_5) + 2))
  )
  return O
 
16.333333333333332, tensor(0.0102), Description: Move the gray shape one space up and to the left edge of the grid, keeping it in the same column. The gray shape should be directly above the gray shape and directly to the left of the gray shape. 
:: def gababfbcejjbeifajfdahjfeifchafdg(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  O = paint(I, shift(obj_5, (uppermost(obj_5) - 1, len(I[0]) - rightmost(obj_5) - 1)))
  return O
 
16.666666666666668, tensor(0.0074), Description: Move the gray shape to the right edge of the grid, keeping it in the same row. The gray shape should be directly to the right of the gray shape. 
:: def cjdfegjdjfbcedcbbejhebdfgfacebcj(I):
    obj_5 = first(colorfilter(objects(I, T, F, T), 5))
    h, w = len(I), len(I[0])
    new_obj = shift(obj_5, (0, w - rightmost(obj_5) - width(obj_5))) 
    O = paint(I, new_obj)
    return O
 
11.333333333333334, tensor(0.0101), Description: Move the gray shape one space down and to the right edge of the grid, keeping it in the same column. The gray shape should be directly below the gray shape and directly to the right of the gray shape. 
:: def dffaggheejiaejhbbgfdjcdcaagffiaf(I):
    five = first(colorfilter(objects(I, T, F, T), 5))
    g = cover(I, five)
    h = paint(g, shift(five, (1, len(g[0]) - width(five)))) 
    return h
 
14.0, tensor(0.0101), Description: Move the gray shape one space up and to the right edge of the grid, keeping it in the same column. The gray shape should be directly above the gray shape and directly to the right of the gray shape. 
:: def aagigcfifdidebfjbhjiffdidafcichh(I):
    f = first(colorfilter(objects(I, T, F, T), 5))
    O = paint(cover(I, f), shift(f, (- uppermost(f) + 1, len(I[0]) - rightmost(f) - width(f))))
    return O
 
14.0, tensor(0.0092), Description: Move the gray shape to the top left corner of the grid so that its top left corner aligns with the top left corner of the red shape. The gray shape should remain in its original position. 
:: def dijdfejihaagedjjbibacedfieeifabg(I):
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  target_pos = ulcorner(obj_2)
  shift_vector = subtract(target_pos, ulcorner(obj_5))
  O = move(I, obj_5, shift_vector)
  return O
 
81.66666666666667, tensor(0.0067), Description: Move the gray shape to the top of the grid, keeping it in the same column. The gray shape should be directly above the red shape. 
:: def iffbjddfdbbaeabdbhcdageibdbebdai(I):
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  target_row = uppermost(obj_2) - height(obj_5)
  O = vconcat(I[:target_row], vconcat(I[target_row + height(obj_5):], I[target_row:target_row + height(obj_5)]))
  return O
 
7.666666666666667, tensor(0.0091), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left so that its left edge aligns with the left edge of the red shape. The gray shape should remain in its original position. 
:: def bjejdegdcejfeicbjgcbefjbeeciefcc(I):
  indices_2 = ofcolor(I, 2)
  indices_5 = ofcolor(I, 5)
  obj_5 = toobject(indices_5, I)
  target_indices = shift(indices_5, (uppermost(indices_2) - uppermost(indices_5), leftmost(indices_2) - leftmost(indices_5)))
  O = paint(fill(I, 0, indices_5), toobject(target_indices, I))
  return O
 
13.666666666666666, tensor(0.0107), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left so that its left edge aligns with the left edge of the red shape. The gray shape should be directly above the red shape and directly to the left of the gray shape. 
:: def degcccddechaeajcjihecfdahebahbjc(I):
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  h_diff = leftmost(obj_2) - leftmost(obj_5)
  v_diff = uppermost(obj_2) - uppermost(obj_5) - height(obj_5)
  O = move(I, obj_5, (v_diff, h_diff))
  return O
 
11.666666666666666, tensor(0.0046), Description: Move the gray shape so that its center is aligned with the center of the red shape. Then, move the gray shape to the right so that its left edge aligns with the right edge of the red shape. The gray shape should remain in its original position. 
:: def jddghacaacdieefdiajbcaghaaedjjdf(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  center_2 = center(obj_2)
  center_5 = center(obj_5)
  O = paint(cover(I, obj_5), shift(obj_5, (center_2[0] - center_5[0], 2 * center_2[1] - center_5[1])))
  return O
 
13.666666666666666, tensor(0.0049), Description: Move the gray shape to the top of the grid, keeping it in the same column. The gray shape should be directly above the red shape. 
:: def cidagjfcfibdebcabcfaiagjcjeicbic(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  v_offset =  uppermost(obj_2) - lowermost(obj_5) - 1 
  O = paint(cover(I, obj_5), shift(obj_5, (v_offset, 0)))
  return O
 
13.666666666666666, tensor(0.0065), Description: Move the gray shape one space to the right. Flip the gray shape horizontally before moving it. The gray shape should remain in its original position. 
:: def aifaefcchdieecifiddaejceebecabee(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  h_offset =  width(obj_2) + 1
  O = paint(cover(I, obj_5), shift(hmirror(obj_5), (0, h_offset)))
  return O
 
14.0, tensor(0.0049), Description: Move the gray shape to the top of the grid, keeping it in the same column. The gray shape should be directly above the red shape. 
:: def ibbgfdaidacfeccbadcbbjbfaeidadei(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  center_2 = center(obj_2)
  O = paint(cover(I, obj_5), shift(obj_5, (center_2[0] - uppermost(obj_5) - height(obj_5) // 2, 0)))
  return O
 
13.333333333333334, tensor(0.0046), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, flip the gray shape vertically and move it one space to the right. The gray shape should be directly above the red shape and one space to the right. 
:: def chageaehdbdjecaabihahcdcaeacjccb(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  O = paint(cover(I, obj_5), shift(vmirror(obj_5), (uppermost(obj_2) - lowermost(obj_5) - 1, width(obj_2) + 1)))
  return O
 
13.666666666666666, tensor(0.0094), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the right so that its left edge aligns with the right edge of the red shape. The gray shape should be directly above the red shape and directly to the right of the gray shape. 
:: def hecijffhejhgehbiabdefcjcjhefihja(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  target_row = uppermost(obj_2) - height(obj_5)
  target_col = leftmost(obj_2) + width(obj_2)
  O = paint(cover(I, obj_5), shift(obj_5, (target_row - uppermost(obj_5), target_col - leftmost(obj_5))))
  return O
 
13.666666666666666, tensor(0.0094), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the right so that its left edge aligns with the right edge of the red shape. The gray shape should be directly above the red shape and directly to the right of the gray shape. 
:: def hjfcfhfhfbgeeedcjdebfddcdifijggd(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  O = paint(cover(I, obj_5), shift(obj_5, (uppermost(obj_2) - height(obj_5) - uppermost(obj_5), rightmost(obj_2) - leftmost(obj_5))))
  return O
 
14.0, tensor(0.0085), Description: Move the gray shape two spaces above the red shape and to the right edge of the grid, keeping it in the same column. The gray shape should be directly above the red shape and directly to the right of the gray shape. 
:: def eiebeefcgebgejdebeebaeifaigcafde(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  new_ulcorner = (uppermost(obj_2) - 2, rightmost(obj_2)) 
  offset = subtract(new_ulcorner, ulcorner(obj_5))
  moved_5 = shift(obj_5, offset)
  O = paint(cover(I, obj_5), moved_5)
  return O 
 
16.666666666666668, tensor(0.0070), Description: Move the gray shape two spaces above the red shape and two spaces to the right. The gray shape should remain in its original position. 
:: def fjdaabjceicfeibaiaeidgabceidbjfc(I):
  fives = toindices(first(colorfilter(objects(I, T, F, T), 5)))
  two = toindices(first(colorfilter(objects(I, T, F, T), 2)))
  target = {(uppermost(two) - 2 + i, rightmost(two) + j) for (i, j) in normalize(fives)}
  O = canvas(mostcolor(I), shape(I))
  for i, j in asindices(I):
    O = fill(O, 5 if (i, j) in target else I[i][j], {(i, j)})
  return O
 
14.0, tensor(0.0085), Description: Move the gray shape two spaces above the red shape and to the right edge of the grid, keeping it in the same column. The gray shape should be directly above the red shape and directly to the right of the gray shape. 
:: def dbbebdaeffigefbhjhcabcebafccjjad(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  new_position = add((uppermost(obj_2) - 2, rightmost(obj_2)), (0, -leftmost(obj_5)))
  moved_5 = shift(obj_5, subtract(new_position, ulcorner(obj_5)))
  O = paint(cover(I, obj_5), moved_5)
  return O
 
14.0, tensor(0.0093), Description: Move the gray shape two spaces above the red shape and keep it in the same column. The gray shape should remain in its original position. 
:: def ddhfbchbiabgefhiiaaefifgebiibibe(I):
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  center_2 = centerofmass(obj_2)
  center_5 = centerofmass(obj_5)
  offset = (center_2[0] - center_5[0] - height(obj_5) // 2 - 2, center_2[1] - center_5[1])
  O = paint(cover(I, obj_5), shift(obj_5, offset))
  return O
 
11.333333333333334, tensor(0.0127), Description: Move the gray shape so that its center is aligned with the center of the red shape. If the gray shape is above the red shape, move it to the top of the grid, keeping it in the same column. If the gray shape is below the red shape, move it to the bottom of the grid, keeping it in the same column. If the gray shape is in the same row as the red shape, move it to the left or right so that its center is aligned with the center of the red shape. The gray shape should remain in its original position. 
:: def eecfbbcddbjaecfeifghadfhcbhgejei(I):
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  center_2 = center(obj_2)
  center_5 = center(obj_5)
  h_shift = (center_2[0], leftmost(obj_2)) 
  v_shift = (uppermost(obj_2) - height(obj_5), center_2[1]) if center_5[0] < center_2[0] else (lowermost(obj_2), center_2[1]) if center_5[0] > center_2[0] else (center_5[0], center_2[1])
  O = paint(cover(I, obj_5), shift(obj_5, v_shift if center_5[0] != center_2[0] else h_shift))
  return O
 
14.0, tensor(0.0106), Description: Move the gray shape so that its center is aligned with the center of the red shape. If the gray shape is below the red shape, move it to the bottom of the grid, keeping it in the same column. If the gray shape is above the red shape, move it to the top of the grid, keeping it in the same column. The gray shape should remain in its original position. 
:: def cijchejdajifegiaiffebdaeffdacefa(I):
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  p = position(obj_5, obj_2)
  v_shift = (height(obj_2), 0) if p == (-1, 0) else (-height(obj_5), 0) if p == (1, 0) else (0, 0)
  O = paint(cover(I, obj_5), shift(obj_5, add(gravitate(obj_5, obj_2), v_shift)))
  return O 
 
13.666666666666666, tensor(0.0113), Description: Move the gray shape to the left so that its left edge aligns with the left edge of the red shape. If the gray shape is above the red shape, move it to the top of the grid, keeping it in the same column. If the gray shape is below the red shape, move it to the bottom of the grid, keeping it in the same column. The gray shape should remain in its original position. 
:: def aeeeehghfbdjegfebcfedfjeacechcbg(I):
    obj_2 = first(colorfilter(objects(I, T, F, T), 2))
    obj_5 = first(colorfilter(objects(I, T, F, T), 5))
    target_x = leftmost(obj_2)
    shift_amount = (0, target_x - leftmost(obj_5))
    if uppermost(obj_5) < uppermost(obj_2):
        shift_amount = (uppermost(obj_2) - height(obj_5), shift_amount[1])
    elif lowermost(obj_5) > lowermost(obj_2):
        shift_amount = (lowermost(obj_2), shift_amount[1])
    O = paint(cover(I, obj_5), shift(obj_5, shift_amount))
    return O
 
14.0, tensor(0.0134), Description: Move the gray shape so that its center is aligned with the center of the red shape. If the gray shape is to the left of the red shape, move it to the top of the grid, keeping it in the same column. If the gray shape is to the right of the red shape, move it to the bottom of the grid, keeping it in the same column. If the gray shape is in the same row as the red shape, move it to the left so that its left edge aligns with the left edge of the red shape. The gray shape should remain in its original position. 
:: def eehcfefcefabejbebbcchbadgjciehab(I):
    obj_2 = first(colorfilter(objects(I, T, F, T), 2))
    obj_5 = first(colorfilter(objects(I, T, F, T), 5))
    h_diff = subtract(center(obj_2), center(obj_5))
    v_adj = (height(obj_2) if h_diff[0] < 0 else -height(obj_5)) if h_diff[0] != 0 else 0
    shift_vector = (h_diff[0] + v_adj, h_diff[1] + leftmost(obj_2) - leftmost(obj_5))
    O = paint(cover(I, obj_5), shift(obj_5, shift_vector))
    return O 
 
14.0, tensor(0.0038), Description: Move the gray shape one space to the right. Flip the gray shape vertically before moving it. The gray shape should be directly above the red shape and one space to the right. 
:: def aefeehfegfijefdeabbcdgeabgbhdffg(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  O = paint(cover(I, obj_5), shift(vmirror(obj_5), (2, rightmost(obj_2) - leftmost(obj_5) + 1)))
  return O
 
16.666666666666668, tensor(0.0058), Description: Move the gray shape so that its top left corner aligns with the bottom right corner of the red shape. Flip the gray shape vertically before moving it. The gray shape should remain in its original position. 
:: def ebdabcbaebciecgdajbcbcaebchbcegb(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  O = paint(I, shift(vmirror(obj_5), subtract(lrcorner(obj_2), ulcorner(obj_5))))
  return O 
 
14.0, tensor(0.0047), Description: Move the gray shape two spaces below the red shape and one space to the right. Flip the gray shape vertically before moving it. The gray shape should remain in its original position. 
:: def fciiabhidffbedaabedabggeeggbddfe(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  new_obj_5 = shift(vmirror(obj_5), (lowermost(obj_5) - uppermost(obj_5) + 2, rightmost(obj_2) - leftmost(obj_5) + 1))
  O = paint(cover(I, obj_5), new_obj_5)
  return O
 
14.0, tensor(0.0071), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape one space to the right. The gray shape should be directly above the red shape and one space to the right. 
:: def ageggcadgbcbeijebcaffchjadcjeagc(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  target_row = uppermost(obj_2) 
  target_col = rightmost(obj_2) + 1
  O = paint(cover(I, obj_5), shift(obj_5, (target_row - uppermost(obj_5), target_col - leftmost(obj_5))))
  return O
 
14.0, tensor(0.0071), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape one space to the right. The gray shape should be directly above the red shape and one space to the right. 
:: def gajjjcbieaedebgbbgeddffacicdfbdb(I):
  obj_5 = extract(objects(I, T, F, T), lambda obj: color(obj) == 5)
  obj_2 = extract(objects(I, T, F, T), lambda obj: color(obj) == 2)
  O = paint(cover(I, obj_5), shift(obj_5, (uppermost(obj_2) - uppermost(obj_5), rightmost(obj_2) + 1 - leftmost(obj_5))))
  return O
 
14.0, tensor(0.0065), Description: Move the gray shape one space above the red shape and one space to the right. The gray shape should remain in its original position. 
:: def dbhfaebbajdgecdcbccbdfdfbccicjhe(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  O = paint(
      cover(I, obj_5),
      shift(obj_5, (uppermost(obj_2) - uppermost(obj_5) - 1, rightmost(obj_2) - leftmost(obj_5) + 1))
  )
  return O
 
9.0, tensor(0.0065), Description: Move the gray shape one space above the red shape and one space to the right. The gray shape should remain in its original position. 
:: def aabdefabdcfdefacjaahafafhgceeccc(I):
  obj_5 = extract(objects(I, T, F, T), lambda obj: color(obj) == 5)
  obj_2 = extract(objects(I, T, F, T), lambda obj: color(obj) == 2)
  new_ulcorner = (uppermost(obj_2) - 1, rightmost(obj_2) + 1)
  O = canvas(mostcolor(I), shape(I))
  for v, (i, j) in asobject(I):
    if v == 5:
      ni, nj = add((i, j), subtract(new_ulcorner, ulcorner(obj_5)))
      O = fill(O, v, {(ni, nj)})
    else:
      O = fill(O, v, {(i, j)})
  return O
 
11.666666666666666, tensor(0.0065), Description: Move the gray shape one space above the red shape and one space to the right. The gray shape should remain in its original position. 
:: def cijfcjbfcgfbejffahiefafcfcicfbdd(I):
  five_indices = ofcolor(I, 5)
  two_indices = ofcolor(I, 2)
  O = canvas(mostcolor(I), shape(I))
  for i, j in asindices(I):
    if (i, j) in five_indices:
      new_i = i + uppermost(two_indices) - uppermost(five_indices) - 1
      new_j = j + rightmost(two_indices) - leftmost(five_indices) + 1
      O = fill(O, 5, {(new_i, new_j)})
    else:
      O = fill(O, I[i][j], {(i, j)})
  return O 
 
16.666666666666668, tensor(0.0125), Description: Move the gray shape two spaces above the red shape. Then, move a copy of the gray shape to the left so that its right edge aligns with the left edge of the red shape, and move another copy of the gray shape to the right so that its left edge aligns with the right edge of the red shape. The gray shape should remain in its original position. 
:: def fibfcbbedceaebfbaagaeabebicecich(I):
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  offset = (uppermost(obj_2) - height(obj_5) - 2, 0)
  O = paint(I, shift(obj_5, add(offset, (-width(obj_2), 0))))
  O = paint(O, shift(obj_5, add(offset, (width(obj_2), 0))))
  return O
 
18.666666666666668, tensor(0.0125), Description: Move the gray shape two spaces above the red shape. Then, move a copy of the gray shape to the left so that its right edge aligns with the left edge of the red shape, and move another copy of the gray shape to the right so that its left edge aligns with the right edge of the red shape. The gray shape should remain in its original position. 
:: def ciaejchgajaaebbbbficjdgdadjgcdec(I):
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  v_shift = uppermost(obj_2) - height(obj_5) - 2
  h_shift = width(obj_2) // 2
  O = paint(I, shift(obj_5, (v_shift,  -h_shift - 1)))
  O = paint(O, shift(obj_5, (v_shift,  h_shift + 1)))
  return O
 
17.0, tensor(0.0125), Description: Move the gray shape two spaces above the red shape. Then, move a copy of the gray shape to the left so that its right edge aligns with the left edge of the red shape, and move another copy of the gray shape to the right so that its left edge aligns with the right edge of the red shape. The gray shape should remain in its original position. 
:: def ffdjfbjfjabeefeeabiiabbfaedhdcjf(I):
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  target_position = (uppermost(obj_2) - height(obj_5) - 2, 0)
  O = paint(I, shift(obj_5, add(target_position, (-width(obj_2) // 2 - 1, 0))))
  O = paint(O, shift(obj_5, add(target_position, (width(obj_2) // 2 + 1, 0))))
  return O
 
13.666666666666666, tensor(0.0107), Description: Move the gray shape to the top of the grid, keeping it in the same column. The gray shape should be directly above the topmost colored shape that is not gray. 
:: def fafhbdghaihdebeciccebcbabdfigbdb(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  other_objects = objects(I, T, F, T) - {obj_5}
  O = paint(cover(I, obj_5), shift(obj_5, (min(uppermost(obj) for obj in other_objects) - height(obj_5) - uppermost(obj_5), 0)))
  return O
 
106.33333333333333, tensor(0.0107), Description: Move the gray shape to the top of the grid, keeping it in the same column. The gray shape should be directly above the topmost colored shape that is not gray. 
:: def caffeajccdfdecebaaddgecebcdbcajd(I):
  obj5 = first(colorfilter(objects(I, T, F, T), 5))
  top_non5 = uppermost(argmin(objects(I, T, F, T) - {obj5}, lambda obj: uppermost(obj)))
  return vconcat(I[:top_non5 - height(obj5)], vconcat(I[top_non5:], I[uppermost(obj5):top_non5]))
 
13.666666666666666, tensor(0.0058), Description: Move the gray shape one space below the red shape and one space to the right. The gray shape should remain in its original position. 
:: def ihddfigeedafeedeafcibggcadebhcje(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  O = paint(cover(I, obj_5), shift(obj_5, (lowermost(obj_2) - uppermost(obj_5) + 1, width(obj_2) + 1)))
  return O
 
13.666666666666666, tensor(0.0044), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape one space to the right. The gray shape should be directly above the red shape and one space to the right. 
:: def aeefdefbbehcefjdabfacjcadbaabece(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  v_offset = uppermost(obj_2) - uppermost(obj_5)  
  h_offset = width(obj_2) + 1 
  O = paint(cover(I, obj_5), shift(obj_5, (v_offset, h_offset)))
  return O
 
14.0, tensor(0.0048), Description: Move the gray shape two spaces to the right of the red shape and keep it in the same row. The gray shape should remain in its original position. 
:: def bfdbcddaeajbegijijbgfdhcbacejcaa(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  target_position = add(lrcorner(obj_2), (0, 2)) # Position two cells to the right of obj_2's lower right corner
  offset = subtract(target_position, ulcorner(obj_5)) 
  O = paint(cover(I, obj_5), shift(obj_5, offset))
  return O
 
16.666666666666668, tensor(0.0048), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape one space to the right. The gray shape should be directly above the red shape and one space to the right. If the gray shape is already in the correct position, do not move it. 
:: def ichbfijbihdbeifijihbbgdhbgbbahfj(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  offset = (uppermost(obj_2) - uppermost(obj_5), rightmost(obj_2) - leftmost(obj_5) + 1)
  O = paint(I, shift(obj_5, offset)) if offset != (0, 0) else I  # Handle cases with no movement
  return O
 
14.0, tensor(0.0089), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left or right so that its center is aligned with the center of the red shape. If the gray shape is wider than the red shape, move it to the left. If the gray shape is narrower than the red shape, move it to the right. The gray shape should remain in its original position. 
:: def dfibjfefeaajecghaadhccajjdcbfffb(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  h_diff = width(obj_2) - width(obj_5)
  h_shift = h_diff // 2 - (1 if h_diff % 2 else 0)
  target_loc = (uppermost(obj_2), leftmost(obj_2) + h_shift)
  O = paint(cover(I, obj_5), shift(obj_5, subtract(target_loc, ulcorner(obj_5))))
  return O
 
14.0, tensor(0.0089), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left or right so that its center is aligned with the center of the red shape. If the gray shape is wider than the red shape, move it to the left. If the gray shape is narrower than the red shape, move it to the right. The gray shape should remain in its original position. 
:: def cghcdcdecjejefadjgbdieaehgejebfe(I):
  obj5 = first(colorfilter(objects(I, T, F, T), 5))
  obj2 = first(colorfilter(objects(I, T, F, T), 2))
  v_diff = uppermost(obj2) - uppermost(obj5)
  h_diff =  leftmost(obj2) + width(obj2) // 2 - leftmost(obj5) - width(obj5) // 2 - (1 if (width(obj2) - width(obj5)) % 2 else 0)
  return paint(cover(I, obj5), shift(obj5, (v_diff, h_diff)))
 
14.0, tensor(0.0099), Description: Move the gray shape so that its center is aligned with the center of the red shape. If the gray shape is wider than the red shape, move it to the left. If the gray shape is narrower than the red shape, move it to the right. If the gray shape is in the same row as the red shape, move it to the left so that its left edge aligns with the left edge of the red shape. The gray shape should remain in its original position. 
:: def ejedhdgaedfieiadjegjiafeefecdjbc(I):
  five = extract(objects(I, T, F, T), lambda obj: color(obj) == 5)
  two = extract(objects(I, T, F, T), lambda obj: color(obj) == 2)
  return move(I, five, (uppermost(two) - uppermost(five), centerofmass(two)[1] - centerofmass(five)[1] - ((width(two) - width(five)) % 2))) 
 
13.666666666666666, tensor(0.0090), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left so that its left edge aligns with the left edge of the red shape. The gray shape should be directly above the red shape and directly to the left of the gray shape. 
:: def dheddgaddbfbejfcbihbbabgadeiccdf(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  grid_without_5 = cover(I, obj_5)
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  new_position = (uppermost(obj_2) - height(obj_5), leftmost(obj_2)) 
  shifted_obj_5 = shift(obj_5, subtract(new_position, ulcorner(obj_5)))
  O = paint(grid_without_5, shifted_obj_5)
  return O
 
12.0, tensor(0.0093), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left so that its bottom right corner aligns with the top left corner of the red shape. The gray shape should be directly above the red shape and directly to the left of the gray shape. 
:: def iajiabeeaahaeaadjbecihhbbhhabeac(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  grid_without_5 = cover(I, obj_5)
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  new_position = ulcorner(obj_2)
  shifted_obj_5 = shift(obj_5, subtract(new_position,  lrcorner(obj_5)))
  shifted_obj_5 = shift(shifted_obj_5, (-height(obj_5),0))
  O = paint(grid_without_5, shifted_obj_5)
  return O
 
14.0, tensor(0.0086), Description: Move the gray shape so that its top left corner aligns with the top left corner of the red shape. The gray shape should remain in its original position. 
:: def iadeiicedhbhedfgidhedgebjcigfejd(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  v_distance = abs(uppermost(obj_2) - uppermost(obj_5)) - height(obj_5)
  h_distance = leftmost(obj_2) - leftmost(obj_5)
  O = I
  O = move(O, obj_5, (v_distance, h_distance)) 
  return O
 
14.0, tensor(0.0090), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left or right so that its center is aligned with the center of the red shape. The gray shape should remain in its original position. 
:: def afeaceedaceeeddgjabeaddfdcbedgjf(I):
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  target = (uppermost(obj_2) - 1, leftmost(obj_2) + width(obj_2) // 2 - width(obj_5) // 2) 
  offset = subtract(target, ulcorner(obj_5))
  O = paint(cover(I, obj_5), shift(obj_5, offset))
  return O 
 
14.0, tensor(0.0090), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left or right so that its center is aligned with the center of the red shape. The gray shape should remain in its original position. 
:: def hcijhadghaedecdfieffdceadfddcbdc(I):
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  center_2 = centerofmass(obj_2)
  target = (uppermost(obj_2) - 1, center_2[1] - width(obj_5) // 2)
  O = paint(cover(I, obj_5), shift(obj_5, subtract(target, ulcorner(obj_5))))
  return O
 
13.666666666666666, tensor(0.0107), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left so that its center is aligned with the center of the red shape. The gray shape should be directly above the red shape and directly to the left of the gray shape. 
:: def gdcajaefdgfhebfcjbdgajbebabfdbec(I):
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  h_diff = uppermost(obj_2) - (lowermost(obj_5) + 1) 
  target_j = centerofmass(obj_2)[1] - width(obj_5) // 2
  offset = (h_diff, target_j - leftmost(obj_5))
  O = paint(cover(I, obj_5), shift(obj_5, offset))
  return O
 
14.0, tensor(0.0094), Description: Move the gray shape so that its center is aligned with the center of the red shape. If the gray shape is taller than the red shape, move it one space up. The gray shape should remain in its original position. 
:: def cafbhidcficbedacbfjacajbjaddjhah(I):
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  h_offset = height(obj_2) - height(obj_5) - 1
  w_offset =  centerofmass(obj_2)[1] - centerofmass(obj_5)[1]
  O = paint(cover(I, obj_5), shift(obj_5, (h_offset, w_offset)))
  return O
 
14.0, tensor(0.0107), Description: Move the gray shape to the top of the grid, keeping it in the same column. The gray shape should be directly above the topmost colored shape that is not gray. 
:: def dgaafcfdbbeheediaeicbbccdbccfbaj(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  target_row = min(uppermost(obj) for obj in objects(I, T, F, T) if obj != obj_5)
  O = paint(cover(I, obj_5), shift(obj_5, (target_row - uppermost(obj_5), 0)))
  return O
 
14.0, tensor(0.0107), Description: Move the gray shape to the top of the grid, keeping it in the same column. The gray shape should be directly above the topmost colored shape that is not gray. 
:: def ebijbbgjcjbbeddajecddddcbbeacibc(I):
  objs = objects(I, T, F, T)
  obj_5 = extract(objs, lambda obj: color(obj) == 5)
  target_row = valmin(objs - {obj_5}, uppermost)
  O = paint(cover(I, obj_5), shift(obj_5, (target_row - uppermost(obj_5), 0)))
  return O
 
14.0, tensor(0.0122), Description: Move the largest gray shape to the top of the grid, keeping it in the same column. The gray shape should be directly above the topmost colored shape that is not gray. 
:: def jdffbabbbbfdedeabgefafafgfcbbchb(I):
  obj_5 = argmax(objects(I, T, F, T), lambda obj: color(obj) == 5 and size(obj))
  target_row = min(uppermost(obj) for obj in objects(I, T, F, T) if obj != obj_5)
  O = move(I, obj_5, (target_row - uppermost(obj_5), 0))
  return O
 
9.333333333333334, tensor(0.0107), Description: Move the gray shape so that its center is aligned with the center of the red shape. Then, mirror the gray shape horizontally. The gray shape should remain in its original position. 
:: def jcedbfecdacbeaabbgaaehjabdiadbci(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  center_2 = center(obj_2)
  mirror_line = center_2[1]
  mirrored_obj_5 = frozenset((5, (i, 2 * mirror_line - j)) for v, (i, j) in obj_5)
  O = paint(cover(I, obj_5), mirrored_obj_5)
  return O 
 
14.0, tensor(0.0058), Description: Move the gray shape one space below the red shape and one space to the right. The gray shape should remain in its original position. 
:: def ajcbjhacdhjheicaiefabhhehbdcafjc(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  new_obj_5 = shift(obj_5, (lowermost(obj_2) - uppermost(obj_5) + 1, rightmost(obj_2) - leftmost(obj_5) + 1)) 
  O = paint(cover(I, obj_5), new_obj_5)
  return O
 
13.666666666666666, tensor(0.0058), Description: Move the gray shape one space below the red shape and one space to the right. The gray shape should remain in its original position. 
:: def bfgediiiacjbejchbdhfdacaadbafdfa(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  h_shift = width(obj_2) + 1
  v_shift = height(obj_2) + 1
  new_obj_5 = shift(obj_5, (uppermost(obj_2) - uppermost(obj_5) + v_shift, leftmost(obj_2) - leftmost(obj_5) + h_shift))
  O = paint(cover(I, obj_5), new_obj_5)
  return O
 
14.0, tensor(0.0059), Description: Move the gray shape one space down and one space to the right. The gray shape should remain in its original position. 
:: def abbfgcfahcaaefaijfcchbfheehhdaac(I):
  objs = objects(I, T, F, T)
  obj_5 = first(colorfilter(objs, 5))
  obj_2 = first(colorfilter(objs, 2))
  new_obj_5 = shift(obj_5, gravitate(obj_5, shift(obj_2, (1, 1))))
  O = paint(cover(I, obj_5), new_obj_5)
  return O
 
13.666666666666666, tensor(0.0090), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the right so that its left edge aligns with the right edge of the red shape. The gray shape should be directly above the red shape and directly to the right of the gray shape. 
:: def fdbajieiebdceaigifcdbfaegfhidcca(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  target_position = (uppermost(obj_2) - height(obj_5), rightmost(obj_2) - width(obj_5) + 1) 
  O = move(I, obj_5, subtract(target_position, ulcorner(obj_5)))
  return O
 
14.0, tensor(0.0090), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the right so that its right edge aligns with the right edge of the red shape. The gray shape should be directly above the red shape and directly to the right of the gray shape. 
:: def cacchfehbdcfeafbjigeidbaedfeaehc(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  O = cover(I, obj_5)
  O = paint(O, shift(obj_5, (uppermost(obj_2) - uppermost(obj_5), rightmost(obj_2) - rightmost(obj_5))))
  return O
 
14.0, tensor(0.0065), Description: Move the gray shape one space below the red shape and one space to the right. The gray shape should remain in its original position. 
:: def ghejidhccbcjedbcbdfahagjfacbhgag(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  h_diff = uppermost(obj_2) - uppermost(obj_5) - height(obj_5) + 1
  w_diff = rightmost(obj_2) - rightmost(obj_5) 
  O = I
  for i, row in enumerate(I):
    for j, v in enumerate(row):
      if (i, j) in toindices(obj_5):
        O = fill(O, 0, {(i, j)})
        O = fill(O, 5, {(i + h_diff, j + w_diff)})
  return O 
 
13.666666666666666, tensor(0.0092), Description: Move the gray shape two spaces above the red shape and to the left so that its left edge aligns with the left edge of the red shape. The gray shape should remain in its original position. 
:: def gcdeiafcjiffebbfbjjeigbcbhbgdebc(I):
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  offset = (uppermost(obj_2) - height(obj_5) - 2, leftmost(obj_2) - leftmost(obj_5)) 
  O = paint(cover(I, obj_5), shift(obj_5, offset))
  return O
 
13.666666666666666, tensor(0.0093), Description: Move the gray shape two spaces above the red shape and keep it in the same column. The gray shape should remain in its original position. 
:: def jgadecffidbdehbfaafdicbjfbhibcaj(I):
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  center_2 = centerofmass(obj_2)
  offset = (center_2[0] - height(obj_5) // 2 - 2, center_2[1] - centerofmass(obj_5)[1])
  O = paint(cover(I, obj_5), shift(obj_5, offset))
  return O
 
13.666666666666666, tensor(0.0106), Description: Move the gray shape two spaces above the red shape and to the right edge of the grid, keeping it in the same column. The gray shape should be directly above the red shape and directly to the right of the gray shape. 
:: def acbfcahfeacbebagbbfeaieaejiiffbe(I):
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  offset = (uppermost(obj_2) - height(obj_5) - 2, rightmost(obj_2) - rightmost(obj_5))
  O = paint(cover(I, obj_5), shift(obj_5, offset))
  return O
 
11.666666666666666, tensor(0.0071), Description: Move the gray shape to the top of the grid, keeping it in the same column. The gray shape should be one space above the red shape. 
:: def afebhbbbccbceehfadiaicdcibbefjdd(I):
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  O = paint(cover(I, obj_5), shift(obj_5, gravitate(obj_5, shift(obj_2, (-height(obj_2) - 1, 0))))) 
  return O
 
14.0, tensor(0.0134), Description: Move the gray shape so that its center is aligned with the center of the red shape. Then, flip the gray shape vertically. The gray shape should remain in its original position. 
:: def fddjedheadfjehdaiaedaefadcabbbdf(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  offset = gravitate(obj_5, obj_2)
  O = paint(cover(I, obj_5), shift(vmirror(obj_5), offset))
  return O
 
14.0, tensor(0.0071), Description: Move the gray shape so that its center is aligned with the center of the red shape. If the gray shape is above the red shape, move it one space up. If the gray shape is below the red shape, move it one space down. If the gray shape is in the same row as the red shape, do not move it. Flip the gray shape vertically before moving it. The gray shape should remain in its original position. 
:: def jebaaeaedbfeefcbadbebhbciddddfdf(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  center_5 = centerofmass(obj_5)
  center_2 = centerofmass(obj_2)
  vertical_offset = (1 if center_5[0] < center_2[0] else -1) if not hmatching(obj_5, obj_2) else 0
  O = paint(cover(I, obj_5), shift(vmirror(obj_5), (vertical_offset, 0)))
  return O
 
14.0, tensor(0.0077), Description: Move the gray shape one space above the red shape. Flip the gray shape vertically before moving it. The gray shape should remain in its original position. 
:: def dbffeiciafjaeccdahhabgbggfceadbg(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  offset = tuple(map(lambda x: x[1] - x[0], zip(ulcorner(obj_5), ulcorner(obj_2))))
  shift_vector = (crement(offset[0]), 0) 
  O = paint(cover(I, obj_5), shift(vmirror(obj_5), shift_vector))
  return O
 
14.0, tensor(0.0088), Description: Move the gray shape so that its center is aligned with the center of the red shape. Then, flip the gray shape vertically. If the gray shape is below the red shape, move it up by half the difference in their heights. If the gray shape is above the red shape, move it down by half the difference in their heights. The gray shape should remain in its original position. 
:: def dcafibaaejhjeadhbfiaihfabieddcai(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  vdist = abs(centerofmass(obj_5)[0] - centerofmass(obj_2)[0])
  shift_amount = vdist // 2 - (1 if vdist % 2 == 0 else 0) 
  shift_direction = 1 if centerofmass(obj_5)[0] < centerofmass(obj_2)[0] else -1
  O = paint(cover(I, obj_5), shift(vmirror(obj_5), (shift_amount * shift_direction, 0)))
  return O
 
14.0, tensor(0.0072), Description: Move the gray shape one space below the red shape and to the left so that its center is aligned with the center of the red shape. The gray shape should remain in its original position. 
:: def iigddabaaacaeceijgdhbbgiegeijeid(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  target_row = lowermost(obj_2) + 1  # Below the '2' object
  target_col = leftmost(obj_2) + (width(obj_2) - width(obj_5)) // 2  # Centered
  O = paint(cover(I, obj_5), shift(obj_5, (target_row - uppermost(obj_5), target_col - leftmost(obj_5))))
  return O 
 
14.0, tensor(0.0058), Description: Move the gray shape one space below the red shape and one space to the right. The gray shape should remain in its original position. 
:: def bgabaabgggijebcajcidgaecgfidhhfe(I):
  obj_5 = extract(objects(I, T, F, T), lambda obj: color(obj) == 5)
  obj_2 = extract(objects(I, T, F, T), lambda obj: color(obj) == 2)
  new_5 = shift(obj_5, (lowermost(obj_2) - uppermost(obj_5) + 1, rightmost(obj_2) - leftmost(obj_5) + 1))
  O = paint(cover(I, obj_5), new_5)
  return O
 
12.666666666666666, tensor(0.0058), Description: Move the gray shape one space below the red shape and one space to the right. The gray shape should remain in its original position. 
:: def cfjggeiddcjeeiahbcdbdcgcfeghbihb(I):
  fives = colorfilter(objects(I, True, False, True), 5)
  twos = colorfilter(objects(I, True, False, True), 2)
  five = first(fives)
  two = first(twos)
  h = height(two)
  five_new = shift(five, add((h, 1), subtract(llcorner(two), ulcorner(five))))
  O = paint(cover(I, five), five_new)
  return O
 
14.0, tensor(0.0058), Description: Move the gray shape one space below the red shape and one space to the right. The gray shape should remain in its original position. 
:: def addibcefegbcejfciccgbbeadgedabga(I):
  five = first(colorfilter(objects(I, T, F, T), 5))
  two = first(colorfilter(objects(I, T, F, T), 2))
  h_diff = height(two) - height(five) 
  new_five = shift(five, (lowermost(two) - uppermost(five) + 1, leftmost(two) - leftmost(five) + 1))
  O = paint(cover(I, five), new_five)
  return O
 
32.0, tensor(0.0091), Description: Copy the input grid. Then, create copies of the gray shape and place them above, below, to the left, and to the right of the original gray shape. The copies should be positioned so that their centers are aligned with the center of the original gray shape. The gray shape should remain in its original position. 
:: def aehejbgddfacegabjjfaiideeceiiegf(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  center_5 = centerofmass(obj_5)
  top_obj = shift(obj_5, (-height(obj_5), 0))
  bottom_obj = shift(obj_5, (height(obj_5), 0))
  left_obj = shift(obj_5, (0, leftmost(top_obj) - leftmost(obj_5)))
  right_obj = shift(obj_5, (0, rightmost(top_obj) - rightmost(obj_5)))
  O = paint(paint(paint(paint(I, top_obj), bottom_obj), left_obj), right_obj)
  return O 
 
35.0, tensor(0.0091), Description: Copy the input grid. Then, create copies of the gray shape and place them above, below, to the left, and to the right of the original gray shape. The copies should be positioned so that their top left corners align with the top left corner of the original gray shape. The gray shape should remain in its original position. 
:: def ddcachceagjdejfdjfiddhfjaacbfehb(I):
  obj_5 = extract(objects(I, T, F, T), lambda obj: color(obj) == 5)
  h = height(obj_5) 
  w = width(obj_5)
  top_left = ulcorner(obj_5)
  O = paint(I, shift(obj_5, (-h, -w)))
  O = paint(O, shift(obj_5, (-h, w)))
  O = paint(O, shift(obj_5, (h, -w)))
  O = paint(O, shift(obj_5, (h, w)))
  return O
 
28.333333333333332, tensor(0.0066), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the middle of the grid, keeping it in the same row. The gray shape should be directly above the red shape and in the middle column of the grid. 
:: def ibfgcaebbcfeebfcafgdfebaifibdaee(I):
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  target_row = uppermost(obj_2)
  target_col = width(I) // 2 - width(obj_5) // 2 
  O = paint(cover(I, obj_5), shift(obj_5, (target_row - uppermost(obj_5), target_col - leftmost(obj_5))))
  return O
 
27.666666666666668, tensor(0.0066), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the middle of the grid, keeping it in the same row. The gray shape should be directly above the red shape and in the middle column of the grid. 
:: def dbagfgeegcggecdciiecffeaeechjfdh(I):
  twos = ofcolor(I, 2)
  fives = ofcolor(I, 5)
  target_row = uppermost(twos)
  target_col = width(I) // 2 - width(fives) // 2 
  O = paint(fill(I, 0, fives), shift(recolor(5, fives), (target_row - uppermost(fives), target_col - leftmost(fives))))
  return O
 
28.333333333333332, tensor(0.0121), Description: Move the gray shape so that its center is aligned with the center of the red shape. If the gray shape is below the red shape, move it one space up. If the gray shape is in the same row as the red shape, do not move it. The gray shape should remain in its original position. 
:: def gfbbbacddaebehdeafccdjffdchddgcb(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  v_shift = uppermost(obj_2) - lowermost(obj_5) - 1 
  h_shift = centerofmass(obj_2)[1] - centerofmass(obj_5)[1]
  O = paint(cover(I, obj_5), shift(obj_5, (v_shift, h_shift)))
  return O
 
28.333333333333332, tensor(0.0094), Description: Move the gray shape so that its center is aligned with the center of the red shape. Then, move the gray shape up by half the difference in their heights. The gray shape should remain in its original position. 
:: def aejaegebeaehehbejebeedbggbdjbeba(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  target_center = center(obj_2)
  shift_vector = subtract(target_center, center(obj_5))
  shift_vector = (shift_vector[0] - height(obj_5) // 2 - height(obj_2) // 2, shift_vector[1])
  O = paint(cover(I, obj_5), shift(obj_5, shift_vector))
  return O
 
28.333333333333332, tensor(0.0164), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left or right so that its center is aligned with the center of the red shape. The gray shape should be directly above the red shape and directly to the left of the gray shape. 
:: def dedbfdcfcjgfegfijfbdagbcfaeeafbg(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  O = paint(cover(I, obj_5), 
            shift(obj_5, 
                  (uppermost(obj_2)-lowermost(obj_5)-1, 
                   leftmost(obj_2) + width(obj_2)//2 - width(obj_5)//2 - leftmost(obj_5)))) 
  return O
 
28.333333333333332, tensor(0.0141), Description: Move the gray shape one space below the red shape. Flip the gray shape vertically before moving it. The gray shape should be directly below the red shape and directly to the left of the gray shape. 
:: def defcejeecdeeediaaajbaffcdhfjafaa(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  h_shift = leftmost(obj_2) + width(obj_2)//2 - centerofmass(obj_5)[1]
  O = paint(
      cover(I, obj_5), 
      shift(vmirror(obj_5), (uppermost(obj_2) + 1, h_shift))
  )
  return O
 
28.333333333333332, tensor(0.0171), Description: Move the gray shape so that its center is aligned with the center of the rightmost red shape. The gray shape should remain in its original position. 
:: def edcbcbfjacdbeacaiidfgbdaddgbbbij(I):
  five_obj = extract(objects(I, T, F, T), matcher(color, 5))
  two_obj = argmax(objects(I, T, F, T), lambda obj: color(obj) == 2 and rightmost(obj))
  target_center = center(toindices(two_obj))
  five_center = center(toindices(five_obj))
  offset = subtract(target_center, five_center)
  O = paint(cover(I, five_obj), shift(five_obj, offset))
  return O 
 
28.666666666666668, tensor(0.0106), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the right so that its center is aligned with the center of the rightmost red shape. If there are no red shapes on the right edge of the grid, do not move the gray shape. The gray shape should remain in its original position. 
:: def fdfecifbaccdeebgbbaebabehdbfbicf(I):
  five_obj = first(colorfilter(objects(I, T, F, T), 5))
  rightmost_twos = sfilter(objects(I, T, F, T), lambda obj: color(obj) == 2 and rightmost(obj) == lrcorner(I)[1])
  two_obj = argmax(rightmost_twos, size) if len(rightmost_twos) > 0 else initset((0,0))
  target_i = uppermost(two_obj) 
  target_j = rightmost(two_obj) - width(five_obj) // 2
  offset = (target_i - uppermost(five_obj), target_j - leftmost(five_obj))
  O = paint(cover(I, five_obj), shift(five_obj, offset))
  return O
 
28.333333333333332, tensor(0.0179), Description: Move the gray shape to the right so that its center is aligned with the center of the rightmost red shape. If there are no red shapes on the right edge of the grid, do not move the gray shape. The gray shape should remain in its original position. 
:: def ecgbcdaibdceebaiacaajdeeadibafcf(I):
  five_obj = extract(objects(I, T, F, T), lambda obj: color(obj) == 5)
  two_objs = sfilter(objects(I, T, F, T), lambda obj: color(obj) == 2)
  rightmost_two = argmax(two_objs, rightmost)
  target_j = rightmost(rightmost_two) - width(five_obj) // 2
  offset = (0, target_j - leftmost(five_obj))
  O = paint(cover(I, five_obj), shift(five_obj, offset))
  return O 
 
28.666666666666668, tensor(0.0581), Description: Move the gray shape so that its center is aligned with the center of the rightmost red shape. If there are no red shapes on the right edge of the grid, do not move the gray shape. The gray shape should remain in its original position. 
:: def igidiabfgdicejdejjdbdaacfbegcdcb(I):
    obj5 = first(colorfilter(objects(I, T, F, T), 5))
    rightmost_2s = sfilter(objects(I, T, F, T), lambda obj: color(obj) == 2 and rightmost(obj) == lrcorner(I)[1])
    target_2 = argmax(rightmost_2s, size) if rightmost_2s else ((2, (0,0)),)
    
    offset_i = uppermost(target_2) - uppermost(obj5)
    offset_j = center(target_2)[1] - center(obj5)[1]
    
    O = paint(cover(I, obj5), shift(obj5, (offset_i, offset_j)))
    return O
 
28.666666666666668, tensor(0.0061), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape one space to the right. The gray shape should be directly above the red shape and one space to the right. 
:: def aaabifhahdjeeeibibbeccbjgccejaeb(I):
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  O = paint(cover(I, obj_5), shift(obj_5, (uppermost(obj_2) - uppermost(obj_5), rightmost(obj_2) - leftmost(obj_5) + 1)))
  return O
 
28.666666666666668, tensor(0.0082), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the right so that its left edge aligns with the right edge of the red shape. The gray shape should be directly above the red shape and directly to the right of the gray shape. 
:: def gdfcbehdagfdebehbgddbcefcfabdche(I):
  obj2 = first(colorfilter(objects(I, T, F, T), 2))
  obj5 = first(colorfilter(objects(I, T, F, T), 5))
  new_obj5 = shift(obj5, (uppermost(obj2)-uppermost(obj5), width(obj2)-leftmost(obj5)+rightmost(obj2)+1))
  O = paint(cover(I, obj5), new_obj5)
  return O
 
27.0, tensor(0.0061), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape one space to the right. The gray shape should be directly above the red shape and one space to the right. 
:: def igceaigfbibbefjdidagifabcdbccgaf(I):
  obj2_indices = toindices(first(colorfilter(objects(I, T, F, T), 2)))
  obj5_indices = toindices(first(colorfilter(objects(I, T, F, T), 5)))
  shift_amount = (uppermost(obj2_indices) - uppermost(obj5_indices), rightmost(obj2_indices) - leftmost(obj5_indices) + 1)
  new_obj5_indices = shift(obj5_indices, shift_amount)
  O = paint(fill(I, 0, obj5_indices), toobject(new_obj5_indices, I))
  return O
 
28.333333333333332, tensor(0.0069), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left or right so that its center is aligned with the center of the red shape. The gray shape should remain in its original position. 
:: def ahaccdeeadhbeabcacfdfbeeeichdfba(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  target_pos = (uppermost(obj_2) - height(obj_5), leftmost(obj_2) + width(obj_2) // 2 - width(obj_5) // 2)
  offset = subtract(target_pos, ulcorner(obj_5))
  O = paint(cover(I, obj_5), shift(obj_5, offset))
  return O
 
28.666666666666668, tensor(0.0105), Description: Move the gray shape so that its center is aligned with the center of the red shape. Then, move the gray shape up by the height of the gray shape. The gray shape should remain in its original position. 
:: def fhagiefhcfdfeajfjgdejjajddiadggd(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  center_5 = centerofmass(obj_5)
  center_2 = centerofmass(obj_2)
  offset = subtract(center_2, center_5)
  offset = (offset[0] - height(obj_5), offset[1])
  O = paint(cover(I, obj_5), shift(obj_5, offset))
  return O
 
28.666666666666668, tensor(0.0105), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left or right so that its center is aligned with the center of the red shape. The gray shape should remain in its original position. If there is more than one gray shape or more than one red shape, do not move any shapes. 
:: def bdadfhcafdigehedahbbgebffffdjehf(I):
  fives = colorfilter(objects(I, T, F, T), 5)
  twos = colorfilter(objects(I, T, F, T), 2)
  if len(fives) == 1 and len(twos) == 1:
    five = first(fives)
    two = first(twos)
    target_pos = (uppermost(two) - height(five), leftmost(two) + width(two) // 2 - width(five) // 2)
    offset = subtract(target_pos, ulcorner(five))
    O = paint(cover(I, five), shift(five, offset))
    return O
  else:
    return I
 
28.333333333333332, tensor(0.0310), Description: Move the gray shape so that its center is aligned with the center of the red shape. If there is more than one gray shape or more than one red shape, do not move any shapes. 
:: def cdgaefaddcacebjfafbadcciaddgbddg(I):
  obj_5 = extract(objects(I, T, F, T), lambda obj: color(obj) == 5)
  obj_2 = extract(objects(I, T, F, T), lambda obj: color(obj) == 2)
  if obj_5 and obj_2:
    offset_i = uppermost(obj_2) - uppermost(obj_5) - height(obj_5)
    offset_j = leftmost(obj_2) + width(obj_2) // 2 - leftmost(obj_5) - width(obj_5) // 2
    return paint(cover(I, obj_5), shift(obj_5, (offset_i, offset_j)))
  return I
 
27.0, tensor(0.0053), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left or right so that its center is aligned with the center of the red shape. The gray shape should remain in its original position. 
:: def cjeabegaddeaecbcicdcjidgchcccfae(I):
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  target_col = leftmost(obj_2) + width(obj_2) // 2 - width(obj_5) // 2
  O = paint(cover(I, obj_5), shift(obj_5, (uppermost(obj_2) - uppermost(obj_5), target_col)))
  return O
 
28.333333333333332, tensor(0.0053), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left or right so that its center is aligned with the center of the red shape. The gray shape should remain in its original position. 
:: def aadhadfbeiaceaibiecjcdcbcgjeeage(I):
  twos = ofcolor(I, 2)
  fives = ofcolor(I, 5)
  target_row = uppermost(twos)
  target_col = leftmost(twos) + (width(twos) - width(fives)) // 2
  O = paint(fill(I, 0, fives), shift(recolor(5, fives), (target_row - uppermost(fives), target_col)))
  return O
 
28.666666666666668, tensor(0.0113), Description: Move the gray shape so that its center is aligned with the center of the red shape. The gray shape should remain in its original position. 
:: def afcaiccfecdeejgjacgiaeefbcgbbhaf(I):
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  shift_amount = (uppermost(obj_2) - uppermost(obj_5), centerofmass(obj_2)[1] - centerofmass(obj_5)[1])
  O = paint(cover(I, obj_5), shift(obj_5, shift_amount))
  return O
 
28.333333333333332, tensor(0.0141), Description: Move the gray shape one space below the red shape. Flip the gray shape vertically before moving it. The gray shape should be directly below the red shape and directly to the left of the gray shape. 
:: def fefcagbadjfhehbfadieiaajafjacaga(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  h_shift = leftmost(obj_2) + width(obj_2)//2 - centerofmass(obj_5)[1] 
  O = paint(
      cover(I, obj_5), 
      shift(vmirror(obj_5), (lowermost(obj_2) + 1, h_shift))
  )
  return O
 
28.333333333333332, tensor(0.0141), Description: Move the gray shape one space below the red shape. Flip the gray shape vertically before moving it. The gray shape should be directly below the red shape and directly to the left of the gray shape. 
:: def eachbcdeigcbehgfbeadfheibebdcdba(I):
  obj_5 = extract(objects(I, T, F, T), lambda obj: color(obj) == 5)
  obj_2 = extract(objects(I, T, F, T), lambda obj: color(obj) == 2)
  target_x = leftmost(obj_2) + width(obj_2)//2
  target_y = lowermost(obj_2) + 1 
  O = paint(
      cover(I, obj_5), 
      shift(vmirror(obj_5), (target_y - uppermost(vmirror(obj_5)), target_x - centerofmass(obj_5)[1]))
  )
  return O
 
28.333333333333332, tensor(0.0106), Description: Move the gray shape so that its center is aligned with the center of the red shape. Then, flip the gray shape vertically and move it one space down. The gray shape should remain in its original position. 
:: def hdfiaebebjgceahbjccfeebcbgifeeed(I):
  obj_5 = argmax(objects(I, T, F, T), lambda obj: color(obj) == 5)
  obj_2 = argmax(objects(I, T, F, T), lambda obj: color(obj) == 2)
  v_shift = lowermost(obj_2) - uppermost(obj_5)
  h_shift = centerofmass(obj_2)[1] - centerofmass(obj_5)[1]
  O = paint(
      cover(I, obj_5), 
      shift(vmirror(obj_5), (v_shift + 1, h_shift)) 
  )
  return O
 
28.666666666666668, tensor(0.0061), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape one space to the right. The gray shape should be directly above the red shape and one space to the right. 
:: def cbidfffgjbadedihaeaabjfbjejajebb(I):
  objs = objects(I, F, F, T)
  obj2 = next(obj for obj in objs if color(obj) == 2)
  obj5 = next(obj for obj in objs if color(obj) == 5)
  O = paint(
      cover(I, obj5),
      shift(obj5, (uppermost(obj2) - uppermost(obj5), rightmost(obj2) - leftmost(obj5) + 1))
  )
  return O
 
28.333333333333332, tensor(0.0080), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the left or right so that its center is aligned with the center of the red shape. The gray shape should be directly above the red shape and directly to the left of the gray shape. 
:: def gbddihfdfdffeeaficeecfdjfajgeabf(I):
  five = extract(objects(I, T, F, T), lambda obj: color(obj) == 5)
  two = extract(objects(I, T, F, T), lambda obj: color(obj) == 2)
  new_five = shift(five, (uppermost(two) - height(five) - uppermost(five), centerofmass(two)[1] - centerofmass(five)[1]))
  return paint(cover(I, five), new_five) 
 
28.333333333333332, tensor(0.0094), Description: Move the gray shape to the top of the grid, keeping it in the same column. If the red shape is wider than it is tall, move the gray shape to the left so that its center is aligned with the center of the red shape. If the red shape is taller than it is wide, move the gray shape to the left or right so that its center is aligned with the center of the red shape. If the gray shape is to the left of the red shape, move it to the left. If the gray shape is to the right of the red shape, move it to the right. The gray shape should remain in its original position. 
:: def eabccccebahbebhjbdddegggiadjgeba(I):
  obj_2 = next(iter(colorfilter(objects(I, T, F, T), 2)))
  obj_5 = next(iter(colorfilter(objects(I, T, F, T), 5)))
  center_2 = center(toindices(obj_2))
  target_row = uppermost(obj_2) - height(obj_5) if width(obj_2) > height(obj_2) else center_2[0] - height(obj_5) // 2
  target_col = center_2[1] - width(obj_5) // 2 if width(obj_2) > height(obj_2) else (leftmost(obj_2) - width(obj_5) if centerofmass(obj_5)[1] < center_2[1] else rightmost(obj_2) + 1)
  O = paint(cover(I, obj_5), shift(obj_5, (target_row - uppermost(obj_5), target_col - leftmost(obj_5))))
  return O
 
28.333333333333332, tensor(0.0117), Description: Move the gray shape to the top of the grid, keeping it in the same column. If the red shape is wider than it is tall, move the gray shape to the middle of the grid, keeping it in the same row. If the red shape is taller than it is wide, move the gray shape to the left so that its center is aligned with the center of the red shape if the gray shape is to the left of the red shape, or move it to the right so that its center is aligned with the center of the red shape if the gray shape is to the right of the red shape. The gray shape should remain in its original position. 
:: def fecddcccccbfegahabiaibbideehaghj(I):
  obj_2 = argmax(objects(I, T, F, T), lambda obj: color(obj) == 2) 
  obj_5 = argmax(objects(I, T, F, T), lambda obj: color(obj) == 5)
  if width(obj_2) > height(obj_2): 
    O = paint(cover(I, obj_5), shift(obj_5, (uppermost(obj_2) - height(obj_5) - uppermost(obj_5), width(I) // 2 - width(obj_5) // 2 - leftmost(obj_5))))
  else:
    if centerofmass(obj_5)[1] < centerofmass(obj_2)[1]:
      O = paint(cover(I, obj_5), shift(obj_5, (centerofmass(obj_2)[0] - height(obj_5) // 2 - uppermost(obj_5), leftmost(obj_2) - width(obj_5) - leftmost(obj_5))))
    else:
      O = paint(cover(I, obj_5), shift(obj_5, (centerofmass(obj_2)[0] - height(obj_5) // 2 - uppermost(obj_5), rightmost(obj_2) + 1 - leftmost(obj_5))))
  return O
 
28.666666666666668, tensor(0.0086), Description: Move the gray shape so that its center is aligned with the center of the red shape. If the red shape is vertical, move the gray shape to the left or right so that its center is aligned with the center of the red shape. If the gray shape is to the left of the red shape, move it to the left. If the gray shape is to the right of the red shape, move it to the right. If the red shape is horizontal, move the gray shape to the top of the grid, keeping it in the same column. The gray shape should remain in its original position. 
:: def agafadigahbceejjaebcdhfibjffcgdb(I):
  objs = objects(I, T, F, T)
  obj_2 = extract(objs, lambda obj: color(obj) == 2)
  obj_5 = extract(objs, lambda obj: color(obj) == 5)
  center_2 = centerofmass(obj_2)
  if portrait(obj_2):
    target = (center_2[0] - height(obj_5) // 2, leftmost(obj_2) - width(obj_5)) if centerofmass(obj_5)[1] < center_2[1] else (center_2[0] - height(obj_5) // 2, rightmost(obj_2) + 1)
  else:
    target = (uppermost(obj_2) - height(obj_5), center_2[1] - width(obj_5) // 2)
  O = paint(cover(I, obj_5), shift(obj_5, subtract(target, ulcorner(obj_5))))
  return O
 
38.666666666666664, tensor(1.7957), Description: Replace the gray shape with the outline of the red shape. The outline should be the same color as the gray shape. 
:: def jjefchfdddaeeechiaadfddfffchbaec(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  frame = outbox(obj_2)
  O = paint(cover(I, obj_5), recolor(5, frame))
  return O
 
28.666666666666668, tensor(0.0101), Description: Move the gray shape so that its top left corner aligns with the top left corner of the outline of the red shape. The gray shape should remain in its original position. 
:: def eaacfgdfbhieedefaabbfcbhbbfaffae(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  shifted_5 = shift(obj_5, subtract(ulcorner(outbox(obj_2)), ulcorner(obj_5)))
  O = paint(cover(I, obj_5), shifted_5)
  return O
 
27.333333333333332, tensor(1.7739), Description: Replace the gray shape with the outline of the red shape. The outline should be one square thick and the same color as the gray shape. 
:: def djadccceeehcegcdjbbjedcccacbeaaa(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  frame = delta(inbox(obj_2))
  O = paint(cover(I, obj_5), recolor(5, frame))
  return O
 
28.333333333333332, tensor(0.0106), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the right so that its center is aligned with the center of the rightmost red shape. If there are no red shapes on the right edge of the grid, do not move the gray shape. The gray shape should remain in its original position. 
:: def edehbjbcdaaeehacbaafheegejbdbjbe(I):
  obj5 = first(colorfilter(objects(I, T, F, T), 5))
  all_2s = sfilter(objects(I, T, F, T), lambda obj: color(obj) == 2)
  rightmost_2 = argmax(all_2s, rightmost)
  target_row = uppermost(rightmost_2)
  target_col = center(rightmost_2)[1]
  offset = (target_row - uppermost(obj5), target_col - leftmost(obj5))
  O = paint(cover(I, obj5), shift(obj5, offset))
  return O
 
29.333333333333332, tensor(0.0091), Description: Copy the input grid. Then, create copies of the gray shape and place them above, below, to the left, and to the right of the original gray shape. The copies should be positioned so that their centers are aligned with the center of the original gray shape. The gray shape should remain in its original position. 
:: def cadedfafcieaeaifbedcecdibddieihg(I):
  obj_5 = extract(objects(I, T, F, T), lambda obj: color(obj) == 5)
  center_5 = centerofmass(obj_5)
  O = paint(cover(I, obj_5), shift(obj_5, (-(height(obj_5)//2), 0)))
  O = paint(O, shift(obj_5, ((height(obj_5)//2), 0)))
  O = paint(O, shift(obj_5, (0, -(width(obj_5)//2))))
  O = paint(O, shift(obj_5, (0, (width(obj_5)//2))))
  return O
 
35.333333333333336, tensor(0.0091), Description: Copy the input grid. Then, create copies of the gray shape and place them above, below, to the left, and to the right of the original gray shape. The copies should be positioned so that their top left corners align with the top left corner of the original gray shape. The gray shape should remain in its original position. 
:: def hijfdcbadfcbeddfjifcdiebdigfajac(I):
  obj_5 = extract(objects(I, T, F, T), lambda obj: color(obj) == 5)
  h = height(obj_5)
  w = width(obj_5)
  offsets = ((-h,0),(h,0),(0,-w),(0,w))
  O = I
  for offset in offsets:
    O = paint(O, shift(obj_5, offset))
  return O
 
41.666666666666664, tensor(0.0091), Description: Copy the input grid. Then, create copies of the gray shape and place them above, below, to the left, and to the right of the original gray shape. The copies should be positioned so that their top left corners align with the top left corner of the original gray shape. The gray shape should remain in its original position. 
:: def hfhbedfhabfbebfcaibddebigabhfcdh(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  top_left = ulcorner(obj_5)
  h = height(obj_5)
  w = width(obj_5)
  O = paint(I, shift(obj_5, (-h, -w)))
  O = paint(O, shift(obj_5, (-h, 0)))
  O = paint(O, shift(obj_5, (-h, w)))
  O = paint(O, shift(obj_5, (0, -w)))
  O = paint(O, shift(obj_5, (0, w)))
  O = paint(O, shift(obj_5, (h, -w)))
  O = paint(O, shift(obj_5, (h, 0)))
  O = paint(O, shift(obj_5, (h, w)))
  return O
 
29.0, tensor(0.0087), Description: Move the smallest gray shape so that its top left corner aligns with the top left corner of the largest red shape if the red shape is wider than it is tall. If the red shape is taller than it is wide, move the gray shape so that its center is aligned with the center of the red shape. If the gray shape is to the left of the red shape, move it to the left. If the gray shape is to the right of the red shape, move it to the right. The gray shape should remain in its original position. Then, change the color of the gray shape to the most common color in the input grid. 
:: def afbcecgcjdeaeifabicieeaeecceajaf(I):
  obj_2 = argmax(objects(I, T, F, T), size)
  obj_5 = argmin(objects(I, T, F, T), size)
  if width(obj_2) > height(obj_2):
    target_row = uppermost(obj_2)
    target_col = leftmost(obj_2)
  else:
    target_row = centerofmass(obj_2)[0] - height(obj_5) // 2
    target_col = leftmost(obj_2) - width(obj_5) if centerofmass(obj_5)[1] < centerofmass(obj_2)[1] else rightmost(obj_2) + 1
  O = paint(fill(I, mostcolor(I), toindices(obj_5)), shift(obj_5, (target_row - uppermost(obj_5), target_col - leftmost(obj_5))))
  return O
 
28.666666666666668, tensor(0.0100), Description: Move the gray shape one space above the red shape and one space to the left. The gray shape should remain in its original position. 
:: def fccbghjcbiabefffbdejdebbjbfihecj(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  vertical_shift = uppermost(obj_2) - lowermost(obj_5) - 1
  horizontal_shift = leftmost(obj_2) - leftmost(obj_5) - 1
  O = paint(cover(I, obj_5), shift(obj_5, (vertical_shift, horizontal_shift)))
  return O 
 
28.0, tensor(0.0094), Description: Move the gray shape one space up and one space to the left. The gray shape should remain in its original position. 
:: def aieccbdhfbeaebacbedefebfhhedhfhe(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  shift_vector = gravitate(obj_5, shift(obj_2, (-1, -1)))
  O = paint(cover(I, obj_5), shift(obj_5, shift_vector))
  return O
 
28.666666666666668, tensor(0.0094), Description: Move the gray shape one space up and one space to the left. The gray shape should remain in its original position. 
:: def bicadfajcciaecfgbeaeffdebijbabaf(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  target_center = subtract(center(obj_2), (1, 1))
  shift_vector = subtract(target_center, centerofmass(obj_5))
  O = paint(cover(I, obj_5), shift(obj_5, shift_vector))
  return O 
 
28.666666666666668, tensor(0.0100), Description: Move the gray shape to the middle of the grid, keeping it in the same row. Then, move the gray shape to the right so that its center is aligned with the center of the rightmost red shape. If there are no red shapes on the right edge of the grid, do not move the gray shape. The gray shape should remain in its original position. 
:: def fcdeeabebbheehfdjicbabcidhchafeb(I):
  obj5 = first(colorfilter(objects(I, T, F, T), 5))
  # Find the rightmost column occupied by a '2'-object
  target_col = max(j for obj in objects(I, T, F, T) if color(obj) == 2 for i, j in toindices(obj))
  # Calculate target row as the center row of the grid
  target_row = lrcorner(I)[0] // 2 
  # Calculate the offset to center the '5'-object above the target column
  offset = (target_row - uppermost(obj5), target_col - leftmost(obj5) - width(obj5) // 2)
  O = paint(cover(I, obj5), shift(obj5, offset))
  return O
 
28.0, tensor(0.0102), Description: Move the gray shape to the bottom of the grid, keeping it in the same column. Then, move the gray shape to the right so that its center is aligned with the center of the rightmost red shape. If there are no red shapes on the right edge of the grid, do not move the gray shape. The gray shape should remain in its original position. 
:: def ggfddfeedejaeihdadedbbcadfjajaha(I):
  obj5 = first(colorfilter(objects(I, T, F, T), 5))
  # Identify the bottommost row containing a '2'-object
  target_row = max(i for obj in objects(I, T, F, T) if color(obj) == 2 for i, j in toindices(obj))
  # Find the rightmost '2'-object
  rightmost_two = argmax(sfilter(objects(I, T, F, T), lambda obj: color(obj) == 2), rightmost)
  # Calculate target column for centering the '5'-object
  target_col = rightmost(rightmost_two) - width(obj5) // 2
  O = paint(cover(I, obj5), shift(obj5, (target_row - uppermost(obj5), target_col - leftmost(obj5))))
  return O
 
27.0, tensor(0.0064), Description: Move the gray shape to the bottom of the grid, keeping it in the same column. Then, move the gray shape to the right so that its center is aligned with the center of the rightmost column. The gray shape should remain in its original position. 
:: def gbhfcbefgcacegefbegfhdcchafbcfga(I):
  obj5 = first(colorfilter(objects(I, T, F, T), 5))
  # Directly use the grid dimensions for positioning
  target_row = lrcorner(I)[0] - height(obj5) - 1 
  target_col = lrcorner(I)[1] // 2 - width(obj5) // 2
  O = paint(cover(I, obj5), shift(obj5, (target_row - uppermost(obj5), target_col - leftmost(obj5))))
  return O
 
27.333333333333332, tensor(0.0104), Description: Move the gray shape so that its center is aligned with the center of the red shape. If the red shape is horizontal, move the gray shape to the left so that its left edge aligns with the left edge of the red shape. If the red shape is vertical, move the gray shape to the left or right so that its center is aligned with the center of the red shape. If the gray shape is to the left of the red shape, move it to the left. If the gray shape is to the right of the red shape, move it to the right. If there is more than one gray shape or more than one red shape, do not move any shapes. 
:: def chddfeehebifedfabcadffdfdeabffaa(I):
  obj_5 = extract(objects(I, T, F, T), lambda obj: color(obj) == 5)
  obj_2 = extract(objects(I, T, F, T), lambda obj: color(obj) == 2)
  if obj_5 and obj_2:
    center_2 = centerofmass(obj_2)
    if width(obj_2) > height(obj_2):  # Horizontal '2'
      offset = (center_2[0] - centerofmass(obj_5)[0], leftmost(obj_2) - leftmost(obj_5))
    else:  # Vertical '2'
      offset_left = (uppermost(obj_2) - uppermost(obj_5), leftmost(obj_2) - width(obj_5) - 1)
      offset_right = (uppermost(obj_2) - uppermost(obj_5), rightmost(obj_2) + 1)
      I = paint(cover(I, obj_5), shift(obj_5, offset_left))
      offset = offset_right
    return paint(cover(I, obj_5), shift(obj_5, offset))
  return I
 
29.333333333333332, tensor(0.0116), Description: Move the gray shape so that its center is aligned with the center of the red shape. If the red shape is vertical, move a copy of the gray shape to the left so that its right edge aligns with the left edge of the red shape, and move another copy of the gray shape to the right so that its left edge aligns with the right edge of the red shape. If the red shape is horizontal, do not move the gray shape. If there is more than one gray shape or more than one red shape, do not move any shapes. 
:: def adadeafcbhjbebefiefhadcecbhheabg(I):
  obj_5 = extract(objects(I, T, F, T), lambda obj: color(obj) == 5)
  obj_2 = extract(objects(I, T, F, T), lambda obj: color(obj) == 2)
  if obj_5 and obj_2:
    if portrait(obj_2): # Vertical '2'
      I = paint(cover(I, obj_5), shift(obj_5, gravitate(obj_5, shift(obj_2, (0,-width(obj_5))))))
      return paint(I, shift(obj_5, gravitate(obj_5, shift(obj_2, (0, width(obj_2))))))
    else: # Horizontal '2'
      return paint(cover(I, obj_5), shift(obj_5, gravitate(obj_5, obj_2)))
  return I
 
28.333333333333332, tensor(0.0102), Description: Move the gray shape so that its center is aligned with the center of the red shape. If the red shape is horizontal, move the gray shape to the left so that its left edge aligns with the left edge of the red shape. If the red shape is vertical, move the gray shape to the left so that its right edge aligns with the left edge of the red shape. If there is more than one gray shape or more than one red shape, do not move any shapes. 
:: def iccjefchbaeeedcbabbefaeaecbcjcbc(I):
  obj_5 = extract(objects(I, T, F, T), lambda obj: color(obj) == 5)
  obj_2 = extract(objects(I, T, F, T), lambda obj: color(obj) == 2)
  if obj_5 and obj_2:
    h_diff = centerofmass(obj_2)[0] - centerofmass(obj_5)[0]
    if width(obj_2) > height(obj_2):  # Horizontal '2'
      return paint(cover(I, obj_5), shift(obj_5, (h_diff, leftmost(obj_2) - leftmost(obj_5))))
    else:  # Vertical '2'
      return paint(cover(I, obj_5), shift(obj_5, (h_diff, -width(obj_5))))
  return I
 
27.666666666666668, tensor(0.0118), Description: Move the gray shape so that its top left corner aligns with the top left corner of the red shape. If the red shape is vertical, move a copy of the gray shape to the left so that its right edge aligns with the left edge of the red shape, and move another copy of the gray shape to the right so that its left edge aligns with the right edge of the red shape. If the red shape is horizontal, do not move the gray shape. If there is more than one gray shape or more than one red shape, do not move any shapes. 
:: def dcejffaceccaedaibhigdjiefhabiacj(I):
  obj_5 = extract(objects(I, T, F, T), lambda obj: color(obj) == 5)
  obj_2 = extract(objects(I, T, F, T), lambda obj: color(obj) == 2)
  if obj_5 and obj_2:
    v_diff = uppermost(obj_2) - uppermost(obj_5)
    if portrait(obj_2): # Vertical '2'
      I = paint(cover(I, obj_5), shift(obj_5, (v_diff, leftmost(obj_2) - width(obj_5) - 1)))
      return paint(I, shift(obj_5, (v_diff, rightmost(obj_2) + 1)))
    else: # Horizontal '2'
      return paint(cover(I, obj_5), shift(obj_5, (v_diff, leftmost(obj_2) - leftmost(obj_5))))
  return I
 
28.0, tensor(0.0122), Description: Move the gray shape so that its left edge aligns with the left edge of the red shape if they are aligned vertically. If they are not aligned vertically, move the gray shape to the top of the grid, keeping it in the same column. Then, move a copy of the gray shape to the left so that its right edge aligns with the left edge of the red shape, and move another copy of the gray shape to the right so that its left edge aligns with the right edge of the red shape. If there is more than one gray shape or more than one red shape, do not move any shapes. 
:: def eafffigbcfeaecciiiiihiebaabedgcb(I):
  obj_5 = extract(objects(I, T, F, T), lambda obj: color(obj) == 5)
  obj_2 = extract(objects(I, T, F, T), lambda obj: color(obj) == 2)
  if obj_5 and obj_2:
    if hmatching(obj_5, obj_2): # Aligned vertically
      return paint(cover(I, obj_5), shift(obj_5, (0, leftmost(obj_2) - leftmost(obj_5))))
    else: # Needs vertical alignment
      I = paint(cover(I, obj_5), shift(obj_5, (uppermost(obj_2) - uppermost(obj_5), leftmost(obj_2) - width(obj_5) - 1)))
      return paint(I, shift(obj_5, (uppermost(obj_2) - uppermost(obj_5), rightmost(obj_2) + 1)))
  return I
 
29.0, tensor(0.0083), Description: Move the smallest shape to the top left corner of the largest shape if the largest shape is wider than it is tall. If the largest shape is taller than it is wide, move the smallest shape so that its center is aligned with the center of the largest shape. If the smallest shape is to the left of the largest shape, move it to the left. If the smallest shape is to the right of the largest shape, move it to the right. The smallest shape should remain in its original position. Then, change the color of the smallest shape to the most common color in the input grid. 
:: def jcgbejaeegfdeefhaidfbjaaaeijahcc(I):
  obj_2 = argmax(objects(I, T, F, T), size) if colorcount(I, 2) > colorcount(I, 5) else argmin(objects(I, T, F, T), size)
  obj_5 = argmin(objects(I, T, F, T), size) if colorcount(I, 2) > colorcount(I, 5) else argmax(objects(I, T, F, T), size)
  target_row = uppermost(obj_2) - height(obj_5) if width(obj_2) > height(obj_2) else centerofmass(obj_2)[0] - height(obj_5) // 2
  target_col = leftmost(obj_2) + width(obj_2) // 2 - width(obj_5) // 2 if width(obj_2) > height(obj_2) else leftmost(obj_2) - width(obj_5) if centerofmass(obj_5)[1] < centerofmass(obj_2)[1] else rightmost(obj_2) + 1
  O = paint(cover(I, obj_5), shift(obj_5, subtract((target_row, target_col), ulcorner(obj_5))))
  return O
 
27.0, tensor(0.0208), Description: Split the gray shape horizontally in half. Move the left half of the gray shape one space up and one space to the left so that its bottom right corner aligns with the top left corner of the red shape. Move the right half of the gray shape one space up and one space to the right so that its top left corner aligns with the bottom right corner of the red shape. The gray shape should remain in its original position. 
:: def gfbeaedcefcfehhijhgedcaceaabdbfc(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  h_split_5 = hsplit(subgrid(obj_5, I), 2)
  shifted_left = shift(asobject(h_split_5[0]), subtract(ulcorner(obj_2), (1, 1)))
  shifted_right = shift(asobject(h_split_5[1]), subtract(lrcorner(obj_2), (1, shape(h_split_5[1])[1])))
  O = paint(cover(I, obj_5), shifted_left)
  O = paint(O, shifted_right)
  return O
 
28.333333333333332, tensor(0.0089), Description: Move the gray shape so that its center is aligned with the center of the red shape. Then, flip the gray shape vertically if the red shape is below the gray shape. The gray shape should remain in its original position. 
:: def bbdcbddbbafceabcafbechecegjaeddc(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  center_2 = center(obj_2)
  shift_vector = subtract(center_2, centerofmass(obj_5))
  mirrored_5 = vmirror(obj_5) if center_2[0] > centerofmass(obj_5)[0] else obj_5
  O = paint(cover(I, obj_5), shift(mirrored_5, shift_vector))
  return O
 
31.666666666666668, tensor(0.0147), Description: Move the gray shape to each of the four corners of the red shape, aligning the top left corner of the gray shape with the corresponding corner of the red shape. The gray shape should remain in its original position. 
:: def jcjaeafcebceebbhbaiafdgcebajedbb(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  target_locations =  ulcorner(obj_2), urcorner(obj_2), llcorner(obj_2), lrcorner(obj_2)
  shift_vectors = tuple(subtract(target_loc, ulcorner(obj_5)) for target_loc in target_locations)
  O = cover(I, obj_5)
  for shift_vector in shift_vectors:
    O = paint(O, shift(obj_5, shift_vector))
  return O
 
27.666666666666668, tensor(0.0195), Description: Split the gray shape horizontally or vertically in half, depending on whether it is taller or wider. Move the left half of the gray shape one space up and one space to the left so that its bottom right corner aligns with the top left corner of the red shape. Move the right half of the gray shape one space up and one space to the right so that its top left corner aligns with the bottom right corner of the red shape. The gray shape should remain in its original position. 
:: def bgaecjhcjccgehgaaajfedbaibdifeec(I):
    obj_5 = first(colorfilter(objects(I, T, F, T), 5))
    obj_2 = first(colorfilter(objects(I, T, F, T), 2))
    h, w = shape(obj_5)
    if h > w:
        split_objects = vsplit(subgrid(obj_5, I), 2)
    else:
        split_objects = hsplit(subgrid(obj_5, I), 2)
    
    shifted_left = shift(asobject(split_objects[0]), subtract(ulcorner(obj_2), (1, 1)))
    shifted_right = shift(asobject(split_objects[1]), subtract(lrcorner(obj_2), (1, shape(split_objects[1])[1])))
    O = paint(cover(I, obj_5), shifted_left)
    O = paint(O, shifted_right)
    return O
 
28.0, tensor(0.0106), Description: Move the gray shape to the top of the grid, keeping it in the same column. Then, move the gray shape to the right so that its center is aligned with the center of the rightmost red shape. If there are no red shapes on the right edge of the grid, do not move the gray shape. The gray shape should remain in its original position. 
:: def jbaeajeiadfdeffdadidjcfadjjgcafc(I):
  obj5 = first(colorfilter(objects(I, T, F, T), 5))
  rightmost_two = argmax(objects(I, T, F, T), lambda obj: (color(obj) == 2 and rightmost(obj), uppermost(obj))) 
  target_i = uppermost(rightmost_two)
  target_j = rightmost(rightmost_two) - width(obj5) // 2
  O = paint(cover(I, obj5), shift(obj5, (target_i - uppermost(obj5), target_j - leftmost(obj5))))
  return O
 
39.0, tensor(0.0064), Description: Move each red shape to the top of the grid, keeping it in the same column. The red shape should be directly above the gray shape. 
:: def dbjifjccedhiefcbjgddfcigegacffah(I):
  objs_2 = colorfilter(objects(I, T, F, T), 2)
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  O = I
  for obj_2 in objs_2:
    O = move(O, obj_2, (-(uppermost(obj_2) - uppermost(obj_5)), 0)) 
  return O
 
35.666666666666664, tensor(0.0064), Description: Move each red shape to the top of the grid, keeping it in the same column. The red shape should be directly above the gray shape. 
:: def cddfcfhadbbeeiecjdbhiehefahjbcid(I):
  def move_2_to_5(obj):
    if color(obj) != 2:
      return obj
    obj_5 = first(colorfilter(objects(I, T, F, T), 5))
    return shift(obj, (-(uppermost(obj) - uppermost(obj_5)), 0))
  return paint(I, merge(apply(move_2_to_5, objects(I, T, F, T))))
 
28.333333333333332, tensor(0.0094), Description: Move the gray shape to the top of the grid, keeping it in the same column. If the red shape is wider than it is tall, move the gray shape to the left so that its center is aligned with the center of the red shape. If the red shape is taller than it is wide, move the gray shape to the left or right so that its center is aligned with the center of the red shape. If the gray shape is to the left of the red shape, move it to the left. If the gray shape is to the right of the red shape, move it to the right. The gray shape should remain in its original position. 
:: def cfhgdebhbccaehabicdgfbgbcbaaiiee(I):
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  target_row = uppermost(obj_2) - height(obj_5)
  target_col =  leftmost(obj_2) + width(obj_2) // 2 - width(obj_5) // 2 if width(obj_2) > height(obj_2) else (leftmost(obj_2) if centerofmass(obj_5)[1] < centerofmass(obj_2)[1] else rightmost(obj_2) + 1)
  O = paint(cover(I, obj_5), shift(obj_5, (target_row - uppermost(obj_5), target_col - leftmost(obj_5))))
  return O
 
28.333333333333332, tensor(0.0117), Description: Move the gray shape to the top of the grid, keeping it in the same column. If the red shape is wider than it is tall, move the gray shape to the middle of the grid, keeping it in the same row. If the red shape is taller than it is wide, move the gray shape to the left so that its center is aligned with the center of the red shape if the gray shape is to the left of the red shape, or move it to the right so that its center is aligned with the center of the red shape if the gray shape is to the right of the red shape. The gray shape should remain in its original position. 
:: def dddfedhgajfdeceijcfjegbaecbfiice(I):
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  v_offset = uppermost(obj_2) - height(obj_5) - uppermost(obj_5)
  h_offset = (width(obj_2) // 2 - width(obj_5) // 2) if width(obj_2) > height(obj_2) else (-width(obj_5) if centerofmass(obj_5)[1] < centerofmass(obj_2)[1] else width(obj_2) - width(obj_5) + 1)
  O = paint(cover(I, obj_5), shift(obj_5, (v_offset, h_offset)))
  return O 
 
27.333333333333332, tensor(0.0160), Description: Split the gray shape horizontally or vertically in half, depending on whether it is taller or wider. Move the top left half of the gray shape so that its bottom right corner aligns with the center of the red shape. Move the bottom right half of the gray shape so that its top left corner aligns with the center of the red shape. The gray shape should remain in its original position. 
:: def cifdehdcbibjeecajicfdbaeahfeddcd(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  center_2 = center(obj_2)
  h, w = shape(obj_5)
  split_objects = vsplit(subgrid(obj_5, I), 2) if h > w else hsplit(subgrid(obj_5, I), 2)
  shifted_topleft  =  shift(asobject(split_objects[0]), subtract(center_2,  (h // 2 + 1, w // 2 + 1)))
  shifted_bottomright  =  shift(asobject(split_objects[1]),  add(center_2,  (-h // 2, -w // 2)))
  O  =  paint(cover(I,  obj_5),  shifted_topleft)
  O  =  paint(O,  shifted_bottomright)
  return O
 
27.666666666666668, tensor(0.0171), Description: Split the gray shape horizontally or vertically in half, depending on whether it is taller or wider. Move the top left half of the gray shape so that its bottom right corner aligns with the top left corner of the red shape. Move the bottom right half of the gray shape so that its top left corner aligns with the bottom right corner of the red shape. The gray shape should remain in its original position. 
:: def bdbhdjiediafeaadbcefcbaeebfagaia(I):
  obj_5  =  first(colorfilter(objects(I,  T,  F,  T),  5))
  obj_2  =  first(colorfilter(objects(I,  T,  F,  T),  2))
  topLeft_2  =  ulcorner(obj_2)
  bottomRight_2  =  lrcorner(obj_2)
  h,  w  =  shape(obj_5)
  split_objects  =  vsplit(subgrid(obj_5,  I),  2) if h > w else hsplit(subgrid(obj_5,  I),  2)
  shifted_topleft  =  shift(asobject(split_objects[0]),  (topLeft_2[0]  -  h // 2,  topLeft_2[1]  -  w // 2))
  shifted_bottomright  =  shift(asobject(split_objects[1]),  (bottomRight_2[0]  -  h // 2,  bottomRight_2[1]  -  w // 2))
  O  =  paint(cover(I,  obj_5),  shifted_topleft)
  O  =  paint(O,  shifted_bottomright)
  return  O
 
27.666666666666668, tensor(0.0171), Description: Split the gray shape horizontally or vertically in half, depending on whether it is taller or wider. Move the top left half of the gray shape so that its bottom right corner aligns with the top left corner of the red shape. Move the bottom right half of the gray shape so that its top left corner aligns with the bottom right corner of the red shape. The gray shape should remain in its original position. 
:: def fdgggiaeedeaeaddiddcfbfjfbebcbdh(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  h, w = shape(obj_5)
  mid = (h // 2, w // 2)
  split_objects = vsplit(subgrid(obj_5, I), 2) if h > w else hsplit(subgrid(obj_5, I), 2)
  topLeft_offset = subtract(ulcorner(obj_2), add(mid, (1, 1)))
  bottomRight_offset = subtract(lrcorner(obj_2), subtract(shape(split_objects[1]), (1, 1)))
  shifted_topleft = shift(asobject(split_objects[0]), topLeft_offset)
  shifted_bottomright = shift(asobject(split_objects[1]), bottomRight_offset)
  O = paint(cover(I, obj_5), shifted_topleft)
  O = paint(O, shifted_bottomright)
  return O
 
27.666666666666668, tensor(0.0168), Description: Split the gray shape horizontally or vertically in half, depending on whether it is taller or wider. Move the left half of the gray shape so that its bottom right corner aligns with the top left corner of the red shape. Move the right half of the gray shape so that its top left corner aligns with the bottom right corner of the red shape. The gray shape should remain in its original position. 
:: def dgdfeaeeeijaecehbfcceeebdcbfcgbd(I):
    obj_5 = first(colorfilter(objects(I, T, F, T), 5))
    obj_2 = first(colorfilter(objects(I, T, F, T), 2))
    h5, w5 = shape(obj_5)
    h2, w2 = shape(obj_2)
    split_objects = vsplit(subgrid(obj_5, I), 2) if h5 > w5 else hsplit(subgrid(obj_5, I), 2)
    
    offset_left = subtract(ulcorner(obj_2), (h5 // 2, w5 // 2))
    offset_right = subtract(lrcorner(obj_2), (h5 - h5 // 2, w5 - w5 // 2))

    shifted_left = shift(asobject(split_objects[0]), offset_left)
    shifted_right = shift(asobject(split_objects[1]), offset_right)
    
    O = paint(cover(I, obj_5), shifted_left)
    O = paint(O, shifted_right)
    return O
 
28.666666666666668, tensor(0.0059), Description: Move the gray shape one space above the red shape and one space to the left. The gray shape should remain in its original position. 
:: def ahgheiabbjdeecaibbcecagbijcjeifg(I):
  obj_5 = extract(objects(I, T, F, T), lambda obj: color(obj) == 5)
  obj_2 = extract(objects(I, T, F, T), lambda obj: color(obj) == 2)
  offset = (uppermost(obj_2) - uppermost(obj_5) - 1, leftmost(obj_2) - leftmost(obj_5) - 1)
  return paint(cover(I, obj_5), shift(obj_5, offset))
 
28.666666666666668, tensor(0.0059), Description: Move the gray shape one space above the red shape and one space to the left. The gray shape should remain in its original position. 
:: def dcebgeadadedeigcbebieaaeaifbaddj(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  target_ulcorner = (uppermost(obj_2) - 1, leftmost(obj_2) - 1) 
  offset = subtract(target_ulcorner, ulcorner(obj_5))
  return paint(cover(I, obj_5), shift(obj_5, offset))
 
28.666666666666668, tensor(0.0128), Description: Move the gray shape one space to the right of the red shape and keep it in the same row. Flip the gray shape vertically before moving it. The gray shape should remain in its original position. 
:: def ababbibfccaeeabjjadgjadhgdfceddg(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  target_x = rightmost(obj_2) + 1 
  target_y = uppermost(obj_2)
  O = paint(
      cover(I, obj_5), 
      shift(vmirror(obj_5), (target_y - uppermost(vmirror(obj_5)), target_x - leftmost(vmirror(obj_5))))
  )
  return O
 
28.666666666666668, tensor(0.0128), Description: Move the gray shape one space to the right of the red shape and keep it in the same row. Flip the gray shape vertically before moving it. The gray shape should remain in its original position. 
:: def dhgeedbchhejehehicefcjcfhbdhchac(I):
  obj_5 = extract(objects(I, T, F, T), lambda obj: color(obj) == 5)
  obj_2 = extract(objects(I, T, F, T), lambda obj: color(obj) == 2)
  ref_point = (uppermost(obj_2), rightmost(obj_2) + 1)
  O = paint(
      cover(I, obj_5),
      shift(vmirror(obj_5), subtract(ref_point, ulcorner(vmirror(obj_5))))
  )
  return O
 
28.666666666666668, tensor(0.0128), Description: Move the gray shape one space to the right of the red shape and keep it in the same row. Flip the gray shape vertically before moving it. The gray shape should remain in its original position. 
:: def bgccgfaedcjgeecdajcdeccecceigeej(I):
    obj5 = extract(objects(I, True, False, True), lambda obj: color(obj) == 5)
    obj2 = extract(objects(I, True, False, True), lambda obj: color(obj) == 2)
    target_pos = add(lrcorner(obj2), (0, 1))
    shift_vec = subtract(target_pos, ulcorner(vmirror(obj5)))
    return paint(cover(I, obj5), shift(vmirror(obj5), shift_vec))
 
55.666666666666664, tensor(0.3088), Description: Copy the input grid. Then, for each red square, place two gray squares, one above and one below the red square. The gray squares should be one space away from the red square. If the red square is on the top or bottom row, only place one gray square. 
:: def eciddhjacbcbedgabcigjceejdcfbadc(I):
  obj5 = first(colorfilter(objects(I, T, F, T), 5))
  obj2s = colorfilter(objects(I, T, F, T), 2)
  O = cover(I, obj5)
  for i, row in enumerate(I):
    if any(v == 2 for v in row):
      for j, v in enumerate(row):
        if v == 2:
          O = paint(O, shift(recolor(5, {(0, 0)}), (i - 1, j - 1)))
          O = paint(O, shift(recolor(5, {(0, 0)}), (i - 1, j + 1)))
  return O 
 
58.666666666666664, tensor(0.4546), Description: Copy the input grid. Then, for each red square, place a gray square in each of the four adjacent squares (above, below, left, and right). If the red square is on the edge of the grid, only place the gray squares that are within the grid. 
:: def abccacjjjcddeedfbfjibcefjdcheecc(I):
  obj5 = first(colorfilter(objects(I, T, F, T), 5))
  obj2s = colorfilter(objects(I, T, F, T), 2)
  O = I
  for obj2 in obj2s:
    for i, j in toindices(obj2):
      for di, dj in ((-1, 0), (1, 0), (0, -1), (0, 1)):
        if 0 <= i + di < len(I) and 0 <= j + dj < len(I[0]) and I[i + di][j + dj] == 0:
          O = paint(O, {(5, (i + di, j + dj))})
  return O
 
81.33333333333333, tensor(0.4638), Description: Copy the input grid. Then, for each red square, place a gray square in each of the eight surrounding squares (above, below, left, right, and diagonally). If the red square is on the edge of the grid, only place the gray squares that are within the grid. 
:: def ibhbbeeebgfdeffbicgaaiafddbigdhi(I):
  obj5 = first(colorfilter(objects(I, T, F, T), 5))
  O = cover(I, obj5)
  for i in range(len(I)):
    for j in range(len(I[0])):
      if I[i][j] == 2:
        for di, dj in ((-1, 0), (-1, -1), (-1, 1), (1, 0), (1, -1), (1, 1), (0, -1), (0, 1)):
          if 0 <= i + di < len(I) and 0 <= j + dj < len(I[0]):
            O = paint(O, {(5, (i + di, j + dj))})
  return O
 
31.333333333333332, tensor(0.0080), Description: Move the gray shape so that its center is aligned with the center of the red shape. Then, move copies of the gray shape to the top, bottom, left, and right of the original gray shape. The copies should be positioned so that their centers are aligned with the center of the original gray shape. The gray shape should remain in its original position. 
:: def iaffcbaigjdjebcfbecbijedggacdefh(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  target_pos_up = (uppermost(obj_2) - height(obj_5), centerofmass(obj_2)[1] - centerofmass(obj_5)[1])
  target_pos_down = (lowermost(obj_2) + 1, centerofmass(obj_2)[1] - centerofmass(obj_5)[1])
  target_pos_left = (centerofmass(obj_2)[0] - centerofmass(obj_5)[0], leftmost(obj_2) - width(obj_5))
  target_pos_right = (centerofmass(obj_2)[0] - centerofmass(obj_5)[0], rightmost(obj_2) + 1)
  O = paint(I, shift(obj_5, target_pos_up))
  O = paint(O, shift(obj_5, target_pos_down))
  O = paint(O, shift(obj_5, target_pos_left))
  O = paint(O, shift(obj_5, target_pos_right))
  return O
 
38.0, tensor(0.0111), Description: Move the gray shape so that its center is aligned with the center of the red shape. Then, create copies of the gray shape and place them in the eight surrounding squares (above, below, left, right, and diagonally). The copies should be positioned so that their centers are aligned with the center of the original gray shape. The gray shape should remain in its original position. 
:: def fhdaaeeeefdaecjgiaeajeajefdiabid(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  center_2 = centerofmass(obj_2)
  O = cover(I, obj_5)
  for i in range(-1, 2):
    for j in range(-1, 2):
      if (i, j) != (0, 0):
        offset = (center_2[0] - centerofmass(obj_5)[0] + i * height(obj_5), center_2[1] - centerofmass(obj_5)[1] + j * width(obj_5))
        O = paint(O, shift(obj_5, offset))
  return O
 
32.333333333333336, tensor(0.0091), Description: Move the gray shape so that its center is aligned with the center of the red shape. Then, create copies of the gray shape and place them above and below the original gray shape, and to the left and right of the original gray shape. The copies should be positioned so that their centers are aligned with the center of the original gray shape. The gray shape should remain in its original position. 
:: def cjbhcjcieeibedbaijbacfcdcfaaidec(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  O = cover(I, obj_5)
  for i in (-1, 1):
    O = paint(O, shift(obj_5, (uppermost(obj_2) - uppermost(obj_5) + i * height(obj_5), centerofmass(obj_2)[1] - centerofmass(obj_5)[1])))
    O = paint(O, shift(obj_5, (centerofmass(obj_2)[0] - centerofmass(obj_5)[0], leftmost(obj_2) - leftmost(obj_5) + i * width(obj_5))))
  return O
 
29.666666666666668, tensor(0.0091), Description: Move the gray shape so that its center is aligned with the center of the red shape. Then, create copies of the gray shape and place them above and below the original gray shape, and to the left and right of the original gray shape. The copies should be positioned so that their centers are aligned with the center of the original gray shape. The gray shape should remain in its original position. 
:: def aacjdgbhbjbdeibbbjfifbfcacdbcghg(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  h_offset = centerofmass(obj_2)[1] - centerofmass(obj_5)[1]
  v_offset = centerofmass(obj_2)[0] - centerofmass(obj_5)[0]
  O = cover(I, obj_5)
  O = paint(O, shift(obj_5, (uppermost(obj_2) - height(obj_5), h_offset)))
  O = paint(O, shift(obj_5, (lowermost(obj_2) + 1, h_offset)))
  O = paint(O, shift(obj_5, (v_offset, leftmost(obj_2) - width(obj_5))))
  O = paint(O, shift(obj_5, (v_offset, rightmost(obj_2) + 1)))
  return O
 
28.666666666666668, tensor(0.0126), Description: Move the gray shape so that its top left corner aligns with the top left corner of the red shape if the red shape is wider than it is tall. If the red shape is taller than it is wide, move the gray shape to the left so that its center is aligned with the center of the red shape if the gray shape is to the left of the red shape, or move it to the right so that its center is aligned with the center of the red shape if the gray shape is to the right of the red shape. The gray shape should remain in its original position. 
:: def idfhgbddccbieegfijjfbidaaefabjdb(I):
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  offset = (0, (width(obj_2) - width(obj_5)) // 2) if width(obj_2) > height(obj_2) else ((-height(obj_5)) // 2, leftmost(obj_2) - width(obj_5) - leftmost(obj_5) if centerofmass(obj_5)[1] < centerofmass(obj_2)[1] else rightmost(obj_2) - leftmost(obj_5) + 1)
  target = add(ulcorner(obj_2), offset)
  O = paint(cover(I, obj_5), shift(obj_5, subtract(target, ulcorner(obj_5))))
  return O
 
28.0, tensor(0.0112), Description: Move the gray shape to the top of the grid, keeping it in the same column. If the red shape is wider than it is tall, move the gray shape to the middle of the grid, keeping it in the same row. If the red shape is taller than it is wide, move the gray shape to the left so that its center is aligned with the center of the red shape if the gray shape is to the left of the red shape, or move it to the right so that its center is aligned with the center of the red shape if the gray shape is to the right of the red shape. The gray shape should remain in its original position. Then, change the color of the gray shape to the most common color in the input grid. 
:: def fcfdfbcaaeahedfbbfgacfafceafafeb(I):
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  target_row = uppermost(obj_2) - height(obj_5) if width(obj_2) > height(obj_2) else uppermost(obj_2) - height(obj_5) // 2
  target_col = leftmost(obj_2) + (width(obj_2) - width(obj_5)) // 2 if width(obj_2) > height(obj_2) else (leftmost(obj_2) - width(obj_5) if centerofmass(obj_5)[1] < centerofmass(obj_2)[1] else rightmost(obj_2) + 1)
  O = paint(fill(I, 0, toindices(obj_5)), shift(obj_5, (target_row - uppermost(obj_5), target_col - leftmost(obj_5))))
  return O
 
28.666666666666668, tensor(0.0156), Description: Move the gray shape one space below the red shape. Flip the gray shape vertically before moving it. Then, move the gray shape to the left so that its center is aligned with the center of the red shape. If the gray shape is wider than the red shape, move it to the left. If the gray shape is narrower than the red shape, move it to the right. Finally, change the color of the gray shape to the most common color in the input grid. 
:: def haaceddbaghfeeafbheabaeaiafdfbhg(I):
  obj_2 = extract(objects(I, T, F, T), matcher(color, 2))
  obj_5 = extract(objects(I, T, F, T), matcher(color, 5))
  O = paint(
      I, 
      shift(vmirror(obj_5), add(subtract((lowermost(obj_2) + 1, 0), ulcorner(obj_5)), (0, (width(obj_2) - width(obj_5)) // 2)))
  )
  return fill(O, mostcolor(I), toindices(obj_5))
 
28.333333333333332, tensor(0.0064), Description: Move the gray shape one space above the topmost red shape and to the right so that its center is aligned with the center of the rightmost red shape. The gray shape should remain in its original position. 
:: def aecfafhcbjceefjbacedbceaajaeaibc(I):
  obj5 = first(colorfilter(objects(I, T, F, T), 5))
  obj2s = colorfilter(objects(I, T, F, T), 2)
  target_i = min(uppermost(obj2) for obj2 in obj2s) - height(obj5) - 1
  target_j = rightmost(merge(obj2s)) - width(obj5) // 2 
  O = paint(cover(I, obj5), shift(obj5, (target_i - uppermost(obj5), target_j - leftmost(obj5))))
  return O
 
28.0, tensor(0.0064), Description: Move the gray shape one space above the topmost red shape and to the right so that its center is aligned with the center of the rightmost red shape. The gray shape should remain in its original position. 
:: def ccadaehcbcecegiebabffddggdeagiba(I):
  obj5 = first(colorfilter(objects(I, T, F, T), 5))
  obj2_rightmost = argmax(colorfilter(objects(I, T, F, T), 2), rightmost) 
  target_i = uppermost(obj2_rightmost) - height(obj5) - 1
  target_j = leftmost(obj2_rightmost) + width(obj2_rightmost) // 2 - width(obj5) // 2
  O = paint(cover(I, obj5), shift(obj5, (target_i - uppermost(obj5), target_j - leftmost(obj5))))
  return O
 
28.666666666666668, tensor(0.0041), Description: Move the gray shape one space below the red shape and one space to the right. The gray shape should remain in its original position. 
:: def jbaafaaacfjcecjhjafafeabfhjfccai(I):
  obj2 = first(colorfilter(objects(I, T, F, T), 2))
  obj5 = first(colorfilter(objects(I, T, F, T), 5))
  new_obj5 = shift(obj5, (lowermost(obj2)-uppermost(obj5), rightmost(obj2)+1-leftmost(obj5)))
  O = paint(cover(I, obj5), new_obj5)
  return O
 
28.666666666666668, tensor(0.0069), Description: Move the gray shape so that its center is aligned with the center of the red shape. Then, move the gray shape to the right so that its left edge aligns with the right edge of the red shape. The gray shape should remain in its original position. 
:: def ddafeddajhgaeaeajficebhdgcfgchcc(I):
  obj_5 = extract(objects(I, T, F, T), lambda obj: color(obj) == 5)
  obj_2 = extract(objects(I, T, F, T), lambda obj: color(obj) == 2)
  offset_i = uppermost(obj_2) + height(obj_2) // 2 - uppermost(obj_5) - height(obj_5) // 2
  offset_j = rightmost(obj_2) - leftmost(obj_5)
  return paint(cover(I, obj_5), shift(obj_5, (offset_i, offset_j))) 
 
28.333333333333332, tensor(0.0094), Description: Move the gray shape to the top of the grid, keeping it in the same column. If the red shape is wider than it is tall, move the gray shape to the left so that its center is aligned with the center of the red shape. If the red shape is taller than it is wide, move the gray shape to the left or right so that its center is aligned with the center of the red shape. If the gray shape is to the left of the red shape, move it to the left. If the gray shape is to the right of the red shape, move it to the right. The gray shape should remain in its original position. 
:: def daecfdcadcfceaeabeidjdbeehdcgaag(I):
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  h_offset = (width(obj_2) - width(obj_5)) // 2 if width(obj_2) > height(obj_2) else (0 if centerofmass(obj_5)[1] < centerofmass(obj_2)[1] else width(obj_2) - width(obj_5))
  v_offset = -height(obj_5) if width(obj_2) > height(obj_2) else -height(obj_5) // 2
  O = paint(cover(I, obj_5), shift(obj_5, (uppermost(obj_2) + v_offset - uppermost(obj_5), leftmost(obj_2) + h_offset - leftmost(obj_5))))
  return O
 
28.666666666666668, tensor(0.0168), Description: Split the gray shape horizontally or vertically in half, depending on whether it is taller or wider. Move the left half of the gray shape so that its bottom right corner aligns with the top left corner of the red shape. Move the right half of the gray shape so that its top left corner aligns with the bottom right corner of the red shape. The gray shape should remain in its original position. 
:: def ehechdefdffcedajidcbeehafddbbffa(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  h, w = shape(obj_5)
  
  if h > 1 and w > 1: # Only split if object is not a line
    columns = hsplit(subgrid(obj_5, I), w) if w <= h else vsplit(subgrid(obj_5, I), h)
    O = I
    for i, column in enumerate(columns):
      offset = (ulcorner(obj_2)[0] - h // 2, ulcorner(obj_2)[1] - w // 2 + (w + 1) * i)
      O = paint(cover(O, obj_5), shift(asobject(column), offset)) 
    return O
  else:
    return I # No change for lines
 
28.666666666666668, tensor(0.0088), Description: Copy the input grid. Then, create copies of the gray shape and place them one space above, below, to the left, and to the right of the original gray shape. The copies should be positioned so that their centers are aligned with the center of the original gray shape. The gray shape should remain in its original position. 
:: def bfbhbdaeijcjedibadadcebgfdhcgeac(I):
  two_obj = extract(objects(I, T, F, T), lambda obj: color(obj) == 2)
  five_obj = extract(objects(I, T, F, T), lambda obj: color(obj) == 5)
  center_two = center(toindices(two_obj))
  
  O = I
  for offset in [(1,0), (-1,0), (0,1), (0,-1)]:
    O = paint(O, shift(five_obj, add(center_two, offset)))

  return O
 
35.0, tensor(0.4638), Description: Copy the input grid. Then, for each red square, place a gray square in each of the eight surrounding squares (above, below, left, right, and diagonally). If the red square is on the edge of the grid, only place the gray squares that are within the grid. 
:: def ehcciadgeaciedaeaahabadacceffida(I):
  two_obj = extract(objects(I, T, F, T), lambda obj: color(obj) == 2)
  five_obj = extract(objects(I, T, F, T), lambda obj: color(obj) == 5)
  O = cover(I, five_obj)
  for loc in outbox(toindices(two_obj)):
    if manhattan(initset(loc), toindices(two_obj)) == 2:
      O = paint(O, shift(five_obj, subtract(loc, center(five_obj))))
  return O 
 
41.666666666666664, tensor(0.0187), Description: Copy the input grid. Then, for each corner of the red shape, place a copy of the gray shape so that its top left corner aligns with the corresponding corner of the red shape. The gray shape should remain in its original position. 
:: def ghbhfbfbefabeacbbechjejbbcbafcdb(I):
  two_obj = first(colorfilter(objects(I, T, F, T), 2))
  five_obj = first(colorfilter(objects(I, T, F, T), 5))
  target_corners = corners(toindices(two_obj))
  corner_offsets = [(1,1), (1,-1), (-1,1), (-1,-1)] 
  O = I
  for corner in target_corners:
    for offset in corner_offsets:
      new_corner = add(corner, offset)
      O = underpaint(O, shift(five_obj, subtract(new_corner, ulcorner(five_obj)))) 
  return O
 
37.333333333333336, tensor(0.0268), Description: Copy the input grid. Then, create a 3x3 gray square around the red shape, both above and below the red shape. The gray squares should be one space away from the red shape. The gray shape should remain in its original position. 
:: def bbfagejjihecejdaahdjaefhagdbfcic(I):
  two_obj = argmax(objects(I, T, F, T), lambda obj: color(obj) == 2)
  five_obj = argmax(objects(I, T, F, T), lambda obj: color(obj) == 5)
  h_span = astuple(leftmost(two_obj), rightmost(two_obj))
  v_span = astuple(uppermost(two_obj), lowermost(two_obj))
  O = I
  O = underfill(O, 5, product(interval(v_span[0] - 1, v_span[0] + 2, 2), interval(h_span[0] - 1, h_span[1] + 2, 1)))
  O = underfill(O, 5, product(interval(v_span[1] - 1, v_span[1] + 2, 2), interval(h_span[0] - 1, h_span[1] + 2, 1)))
  return O
 
38.333333333333336, tensor(0.0088), Description: Copy the input grid. Then, create copies of the gray shape and place them to the left and right of the original gray shape. The copies should be positioned so that their top left corners align with the top left corner of the original gray shape. The gray shape should remain in its original position. 
:: def abdadbeibjeeegbhjiccfccdfedcehhh(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  h = height(obj_5)
  w = width(obj_5)
  O = I
  for i in range(-h, h + 1):
    O = paint(O, shift(obj_5, (i, -w)))
    O = paint(O, shift(obj_5, (i, w)))
  return O
 
42.0, tensor(0.0100), Description: Copy the input grid. Then, create copies of the gray shape and place them above and below the original gray shape. The copies should be positioned so that their top left corners align with the top left corner of the original gray shape. The gray shape should remain in its original position. 
:: def ifdbdffgfbcbecajaccghdcabgefdbgc(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  h = height(obj_2)
  w = width(obj_2)
  O = I
  for i in range(-w, w + 1):
    O = paint(O, shift(obj_5, (-h, i)))
    O = paint(O, shift(obj_5, (h, i)))
  return O
 
28.666666666666668, tensor(0.0117), Description: Move the gray shape to the top of the grid, keeping it in the same column. If the red shape is wider than it is tall, move the gray shape to the middle of the grid, keeping it in the same row. If the red shape is taller than it is wide, move the gray shape to the left so that its center is aligned with the center of the red shape if the gray shape is to the left of the red shape, or move it to the right so that its center is aligned with the center of the red shape if the gray shape is to the right of the red shape. The gray shape should remain in its original position. 
:: def caeafeefibheebdbiddgbfddccafhcec(I):
  obj_2 = first(sfilter(objects(I, T, F, T), lambda obj: color(obj) == 2))
  obj_5 = first(sfilter(objects(I, T, F, T), lambda obj: color(obj) == 5))
  target = (uppermost(obj_2) - height(obj_5), 
            leftmost(obj_2) + (width(obj_2) - width(obj_5)) // 2 if width(obj_2) > height(obj_2)
            else leftmost(obj_2) - width(obj_5) if centerofmass(obj_5)[1] < centerofmass(obj_2)[1] 
            else rightmost(obj_2) + 1)
  O = paint(cover(I, obj_5), shift(obj_5, subtract(target, ulcorner(obj_5))))
  return O
 
28.666666666666668, tensor(0.0117), Description: Move the gray shape to the top of the grid, keeping it in the same column. If the red shape is wider than it is tall, move the gray shape to the middle of the grid, keeping it in the same row. If the red shape is taller than it is wide, move the gray shape to the left so that its center is aligned with the center of the red shape if the gray shape is to the left of the red shape, or move it to the right so that its center is aligned with the center of the red shape if the gray shape is to the right of the red shape. The gray shape should remain in its original position. 
:: def cibdefhhadeiehabiafbefebabdaabaf(I):
  obj_2 = argmax(objects(I, T, F, T), lambda obj: colorcount(obj, 2))
  obj_5 = argmax(objects(I, T, F, T), lambda obj: colorcount(obj, 5))
  v_offset = uppermost(obj_2) - height(obj_5) - uppermost(obj_5)
  h_offset = branch(
    width(obj_2) > height(obj_2),
    (width(obj_2) - width(obj_5)) // 2,
    branch(
      centerofmass(obj_5)[1] < centerofmass(obj_2)[1],
      -width(obj_5),
      width(obj_2) - width(obj_5) + 1
    )
  )
  O = paint(cover(I, obj_5), shift(obj_5, (v_offset, h_offset)))
  return O
 
28.666666666666668, tensor(0.0168), Description: Split the gray shape horizontally or vertically in half, depending on whether it is taller or wider. Move the left half of the gray shape so that its bottom right corner aligns with the top left corner of the red shape. Move the right half of the gray shape so that its top left corner aligns with the bottom right corner of the red shape. The gray shape should remain in its original position. 
:: def gefecddddgececccagdccafhbcbjefgf(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  h, w = shape(obj_5)
  columns = hsplit(subgrid(obj_5, I), w)
  O = I
  for i, column in enumerate(columns):
    offset = (0, (rightmost(obj_2) - leftmost(obj_2) + 1) * i + leftmost(obj_2) - w // 2) 
    O = paint(cover(O, obj_5), shift(asobject(column), offset))
  return O
 
30.0, tensor(0.0143), Description: Copy the input grid. Then, for each gray square, draw a vertical line of gray squares, starting at the gray square and going down to the bottom of the grid. The vertical line should be one square thick and should be aligned with the left edge of the gray square. The vertical line should stop when it reaches the bottom of the grid or when it encounters a red square. If the vertical line encounters a red square, it should stop one square before the red square. 
:: def ccebbfgfeieceajebhccfbgafcibfeab(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2 = first(colorfilter(objects(I, T, F, T), 2))
  O = I
  for j in range(width(obj_5)):
      start = (uppermost(obj_5), leftmost(obj_5) + j)
      target = (0, leftmost(obj_2) + j * (width(obj_2) + 1)) 
      O = paint(cover(O, toobject(shoot(start, DOWN), I)), 
                shift(toobject(shoot(start, DOWN), I), subtract(target, start))) 
  return O
 
30.0, tensor(0.0064), Description: Move the gray shape two spaces to the left of each red shape, keeping it in the same row. The gray shape should remain in its original position. 
:: def eefibfidhddeeajbafcbijbhfjejdfde(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2s = colorfilter(objects(I, T, F, T), 2)
  O = I
  for obj_2 in obj_2s:
    target_pos = (uppermost(obj_2), leftmost(obj_2) - 2)
    offset = subtract(target_pos, ulcorner(obj_5))
    O = paint(cover(O, obj_5), shift(obj_5, offset))
  return O
 
37.666666666666664, tensor(0.0064), Description: Move the gray shape two spaces to the left of each red shape, keeping it in the same row. The gray shape should remain in its original position. 
:: def ceffdgfjdcbjecefbjefdebffajcjdia(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  indices_2 = ofcolor(I, 2)
  target_indices = frozenset((i, j - 2) for i, j in indices_2)
  O = paint(cover(I, obj_5), recolor(5, target_indices))
  return O
 
30.666666666666668, tensor(0.0080), Description: Copy the input grid. Then, for each red square, move the first gray square to the left of the red square, keeping it in the same row. The gray square should be two spaces to the left of the red square. The gray square should remain in its original position. 
:: def acfbhedddiefecabbjfebfegicahfdda(I):
  obj_5 = first(colorfilter(objects(I, T, F, T), 5))
  obj_2s = colorfilter(objects(I, T, F, T), 2)
  O = I
  for i, obj_2 in enumerate(obj_2s):
    target_loc = (uppermost(obj_2), leftmost(obj_2) - 2)
    O = paint(cover(O, {(5, (0,i))}), shift({(5, (0,i))}, target_loc))
  return O
 
