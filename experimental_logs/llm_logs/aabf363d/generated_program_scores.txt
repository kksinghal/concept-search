13.0, tensor(0.0094), Description: Change the color of each shape to the color of the shape itself. 
:: def iacdddaaheaeejfdjgceedehefadbcbe(I):
  objs = objects(I, T, F, F)
  for obj in objs:
    new_color = color(obj)
    I = paint(cover(I, obj), recolor(new_color, obj))
  return I
 
13.0, tensor(0.0133), Description: Copy the input grid. Then, for each colored shape, change the color of the shape to the color of the upper left corner of the shape. 
:: def efgeaifbebgbegifiidebdcfibibjgga(I):
  O = canvas(mostcommon(I), shape(I))
  for obj in objects(I, T, F, F):
    O = paint(O, recolor(index(I, ulcorner(obj)), obj))
  return O
 
12.0, tensor(0.0138), Description: Copy the input grid. Then, for each colored shape, change the color of the shape to the color of the upper left corner of the shape. If the shape is the same color as the most common color in the grid, keep the original color. 
:: def edcfebadbafcefcjbcajehdccjaebfcc(I):
  new_grid = []
  for i, row in enumerate(I):
    new_row = []
    for j, val in enumerate(row):
      if val != mostcommon(I):
        obj = list(objects(crop(I, (i, j), (1, 1)), T, F, F))[0]
        new_color = index(I, ulcorner(obj))
        new_row.append(new_color)
      else:
        new_row.append(val)
    new_grid.append(tuple(new_row))
  return tuple(new_grid)
 
0.0, tensor(1.9819), Description: Replace the second largest colored object with the least common color in the input grid. 
:: def fcfdfecbdcbheefajeeafecdiicgahia(I):
    # Find all objects excluding background
    objs = objects(I, F, T, T) 
    # Identify the target object (assuming it's the second largest)
    target_obj =  last(order(objs, size))
    # Get the replacement digit (assuming it's the least common)
    replace_digit = leastcolor(I)
    # Recolor the target object
    recolored_obj = recolor(replace_digit, target_obj)
    # Paint the recolored object back onto a blank canvas
    O = paint(canvas(ZERO, shape(I)), recolored_obj)
    return O 
 
