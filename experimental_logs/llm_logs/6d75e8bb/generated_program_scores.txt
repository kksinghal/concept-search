43.666666666666664, tensor(1.1336), Description: For each square in the input grid, if the sum of its row and column indices is even, change its color to 2 (red), otherwise keep its original color. 
:: def feifeiffacjbeiddahddecdfagcbafhb(I):
  objs = objects(I, T, F, F)
  recolored_objs = set()
  for obj in objs:
    new_obj = set()
    for v, (i, j) in obj:
      new_obj.add((2 if j % 2 == i % 2 else v, (i, j)))
    recolored_objs.add(frozenset(new_obj))
  O = paint(I, merge(recolored_objs))
  return O
 
20.0, tensor(1.1336), Description: For each square in the input grid, if the sum of its row and column indices is even, change its color to 2 (red), otherwise keep its original color. 
:: def jehicfcddbgeehbbjbfhceijaadffbef(I):
  O = I
  for i, row in enumerate(I):
    for j, v in enumerate(row):
      if v != mostcolor(I) and i % 2 == j % 2:
        O = paint(O, {(2, (i, j))})
  return O
 
34.666666666666664, tensor(1.1336), Description: For each square in the input grid, if the sum of its row and column indices is even, change its color to 2 (red), otherwise keep its original color. 
:: def jjibgffigbchedigaacabjfgdfchjhcc(I):
  indices = asindices(I)
  recolored_indices = sfilter(indices, lambda ij: ij[0] % 2 == ij[1] % 2)
  recolored_obj = recolor(2, recolored_indices)
  O = underpaint(I, recolored_obj)
  return O
 
30.0, tensor(1.1336), Description: For each square in the input grid, if the sum of its row and column indices is even, change its color to 2 (red), otherwise keep its original color. 
:: def eeeccefeagfbeaaiidiedggfcbfejefb(I):
  h, w = shape(I)
  checkerboard = tuple(tuple(2 if i % 2 == j % 2 else 0 for j in range(w)) for i in range(h))
  O = cellwise(checkerboard, I, mostcolor(I))
  return O
 
11.333333333333334, tensor(1.1510), Description: For each colored shape in the input grid, if the shape is taller than it is wide, color every other row in the shape red, starting from the second row. If the shape is wider than it is tall, color every other column in the shape red, starting from the second column.  
:: def fbadjajdcabaefehajdcdeibjieifffa(I):
    objs = objects(I, F, F, T)
    recolored_objs = set()
    for obj in objs:
        if portrait(obj):
            start_row = uppermost(obj) + 1
            for i in range(start_row, lowermost(obj) + 1, 2):
                recolored_objs.add(recolor(2, toobject(frozenset((i, j) for j in range(leftmost(obj), rightmost(obj) + 1)), I)))
        else:
            start_col = leftmost(obj) + 1
            for j in range(start_col, rightmost(obj) + 1, 2):
                recolored_objs.add(recolor(2, toobject(frozenset((i, j) for i in range(uppermost(obj), lowermost(obj) + 1)), I)))
    O = I
    for obj in recolored_objs:
        O = paint(O, obj)
    return O 
 
15.333333333333334, tensor(1.9923), Description: For each colored shape in the input grid, if the shape is taller than it is wide, shift the shape down by its vertical period. If the shape is wider than it is tall, shift the shape to the right by its horizontal period. Then, change the color of the shifted shape to red. 
:: def febdjbhaijccehdhjchjahdfjedeebbe(I):
  objs = objects(I, F, F, T)
  new_objs = set()
  for obj in objs:
    if portrait(obj):
      p = vperiod(obj)
      new_objs.add(recolor(2, shift(obj, (p, 0))))
    else:
      p = hperiod(obj)
      new_objs.add(recolor(2, shift(obj, (0, p))))
  O = I
  for obj in new_objs:
    O = underpaint(O, obj)
  return O
 
16.0, tensor(1.9831), Description: For each colored shape in the input grid, color every other square in the shape red, starting from the second square in the top row and moving down in a diagonal pattern. 
:: def fiagacdfaidfedfdjaabjafdheeabice(I):
  objs = objects(I, F, F, T)
  modified_grid = I
  for obj in objs:
    ul = ulcorner(obj)
    for i in range(uppermost(obj), lowermost(obj) + 1):
      for j in range(leftmost(obj), rightmost(obj) + 1):
        if (i - ul[0] + j - ul[1]) % 2 == 1:
          modified_grid = fill(modified_grid, 2, frozenset({(i, j)}))
  return modified_grid
 
0.0, tensor(0.0200), Description: For each object in the input grid, fill the outline of the object with red (color 2). 
:: def aadbaaifcdeeebbfibjdgacjacgejdhi(I):
  O = I  # Initialize the output grid
  for obj in objects(I, T, T, T): # Find all objects
    for i, j in delta(obj): # Iterate over the outline of each object
      if 0 <= i < len(I) and 0 <= j < len(I[0]):  # Boundary check
        O = fill(O, 2, {(i, j)})  # Fill the outline cells with '2'
  return O
 
