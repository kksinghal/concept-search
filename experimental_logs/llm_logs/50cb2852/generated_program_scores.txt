143.33333333333334, tensor(0.0486), Description: For each non-square shape in the input grid, fill in the 8 squares surrounding it with light blue. 
:: def fjbagbfhbjaaeaajaifbfdgiaeicibaj(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=False)
  for obj in objs:
    if height(obj) != width(obj) and size(obj) > 1:
      I = fill(I, EIGHT, shift(toindices(obj), (1,1)))
      I = fill(I, EIGHT, shift(toindices(obj), (-1,-1)))
      I = fill(I, EIGHT, shift(toindices(obj), (1,-1)))
      I = fill(I, EIGHT, shift(toindices(obj), (-1,1)))
      I = fill(I, EIGHT, shift(toindices(obj), (1,0)))
      I = fill(I, EIGHT, shift(toindices(obj), (-1,0)))
      I = fill(I, EIGHT, shift(toindices(obj), (0,1)))
      I = fill(I, EIGHT, shift(toindices(obj), (0,-1)))
  O = I
  return O
 
116.66666666666667, tensor(0.0491), Description: For each non-square shape in the input grid, fill in all the squares inside it with light blue. 
:: def bbfibfbefgccejdaadccgcbedaabfiib(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=False)
  for obj in objs:
    if height(obj) != width(obj) and size(obj) > 1:
      for i in range(1, height(obj) - 1):
        for j in range(1, width(obj) - 1):
          I = fill(I, EIGHT, shift(toindices(obj), (i,j)))
  O = I
  return O
 
94.33333333333333, tensor(0.1518), Description: For each non-square shape in the input grid, fill in the area surrounding it with light blue, excluding the corners. 
:: def fcccfbfhdddaebahjeabiacaiiddebdb(I):
    objs = objects(I, univalued=True, diagonal=False, without_bg=False)
    for obj in objs:
        if not square(obj) and size(obj) > 1:
            I = fill(I, EIGHT, difference(backdrop(obj), box(obj)))
    O = I
    return O
 
45.333333333333336, tensor(0.0594), Description: For each shape in the input grid that is not a square and has an area greater than 1, fill in the area inside the shape with light blue. 
:: def fbfiiaeedecceaebaahadeejhijfbdcb(I):
    objs = objects(I, univalued=True, diagonal=False, without_bg=False)
    for obj in objs:
        if size(obj) > 1 and (height(obj) > 1 or width(obj) > 1):
            if not square(obj):
                I = underfill(I, EIGHT, inbox(obj)) 
    O = I
    return O
 
62.0, tensor(1.1835), Description: For each connected object in the input grid, fill in all the cells that are not on the object's border with light blue (color 8). 
:: def ebaegfcabdecebbeifiabffcdaagccij(I):
    objs = objects(I, T, F, F)  # Find all connected objects
    for obj in objs:
        for value, (i, j) in obj:
            if (i, j) not in box(obj):  # Check if the cell is not on the object's border
                I = fill(I, 8, {(i, j)})  # Replace with '8' if not on the border
    O = I
    return O
 
20.0, tensor(0.6582), Description: For each cell in the input grid that is not adjacent to a cell of the same color, fill that cell with light blue (color 8). 
:: def addbeaidgjdceebbbcaejfcdbeifcedj(I):
  O = I
  for i in range(1, height(I)-1):
    for j in range(1, width(I)-1):
      if index(I,(i,j)) != index(I,(i-1,j)) and index(I,(i,j)) != index(I,(i+1,j)) and index(I,(i,j)) != index(I,(i,j-1)) and index(I,(i,j)) != index(I,(i,j+1)):
        O = fill(O, 8, {(i,j)})
  return O
 
0.0, tensor(0.8944), Description: For each object in the input grid that is not the background color, fill in all the cells inside the object's border with light blue (color 8). 
:: def fgcdhaceecfheeaejefifdfdjgfacddb(I):
    objs = objects(I, T, F, F)
    bg = mostcolor(I)
    for obj in objs:
        if color(obj) != bg:  # Skip background object if it exists
            border = box(obj)
            for i in range(uppermost(obj) + 1, lowermost(obj)):
                for j in range(leftmost(obj) + 1, rightmost(obj)):
                    if (i, j) not in border:
                        I = fill(I, 8, {(i, j)})
    O = I
    return O
 
