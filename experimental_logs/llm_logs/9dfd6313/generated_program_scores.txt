11.0, tensor(0.0387), Description: Sort each row of the input grid in ascending order, with 0s coming first. 
:: def eeabeejjcjjeegjfjejgbcdeaifecfdc(I):
  return tuple(
    tuple(sorted(row, key=lambda x: (x == 0, x)))
    for row in I
  )
 
9.0, tensor(0.0387), Description: Sort each row of the input grid in ascending order, with 0s coming first. 
:: def gbahdcbhcaedeedfidhiabchhdgbdbbg(I):
  return tuple(
    tuple(v for k in sorted(set(row)) for v in repeat(k, row.count(k))) 
    for row in I
  )
 
9.0, tensor(0.0226), Description: Move each colored shape to the leftmost column of the grid, keeping the original shape and color.  The output grid should have all the colored shapes in the leftmost column, with the rest of the grid filled with black. 
:: def eadcbadcbcbcehccbcfaceajhchccfai(I):
    objs = objects(I, False, False, True)  
    new_grid = canvas(0, shape(I))  
    for obj in objs:
        leftmost_j = leftmost(obj)
        new_obj = shift(obj, (0, -leftmost_j))
        new_grid = paint(new_grid, new_obj) 
    return new_grid
 
10.666666666666666, tensor(0.0137), Description: Move all non-zero values in each row to the left, filling the remaining spaces with zeros.  The output grid should have all the non-zero values in each row clustered together on the left side, with zeros filling the rest of the row. 
:: def dbibeacieebdeebbibbaafjbbbbifbdf(I):
    new_rows = []
    for i, row in enumerate(I):
        non_zeros = tuple(v for v in row if v != 0) 
        padding = (0,) * (len(row) - len(non_zeros))
        new_row = non_zeros + padding
        new_rows.append(new_row)
    return tuple(new_rows)
 
8.666666666666666, tensor(0.0137), Description: Move all non-zero values in each row to the left, filling the remaining spaces with zeros.  The output grid should have all the non-zero values in each row clustered together on the left side, with zeros filling the rest of the row. 
:: def bdfibhgcebfheheejeffcafecaffaaba(I):
    h, w = len(I), len(I[0])
    return tuple(tuple(index(I, (i, j - sum(index(I, (i, k)) == 0 for k in range(j)))) if j - sum(index(I, (i, k)) == 0 for k in range(j)) >= 0 else 0 for j in range(w)) for i in range(h))
 
6.666666666666667, tensor(0.2479), Description: For each colored square, move it to the right by a number of columns equal to its color minus the minimum color in the grid.  The output grid should have all the colored squares shifted to the right, with the rest of the grid filled with black. 
:: def gfbfchjaecjceajfacadagfjcifjaifd(I):
  min_color = minimum(palette(I))
  objs = objects(I, T, F, T)
  moved_objs = frozenset(shift(obj, tojvec(color(obj) - min_color)) for obj in objs)
  O = I
  for obj in moved_objs:
    O = paint(O, obj)
  return O
 
4.666666666666667, tensor(0.2479), Description: For each colored square, move it to the right by a number of columns equal to its color minus the minimum color in the grid.  The output grid should have all the colored squares shifted to the right, with the rest of the grid filled with black. 
:: def jhadceedgejeecbdaaeaeehbcghdcgba(I):
  min_color = minimum(palette(I))
  O = I
  for c in palette(I):
    if c != min_color:
      obj = first(colorfilter(objects(I, T, F, T), c))
      O = move(O, obj, tojvec(c - min_color))
  return O
 
13.0, tensor(0.2479), Description: For each colored square, move it to the right by a number of columns equal to its color minus the minimum color in the grid.  The output grid should have all the colored squares shifted to the right, with the rest of the grid filled with black. 
:: def aejdjccfbecjehdgjbfifdbdfccijfbc(I):
  min_color = minimum(palette(I))
  return tuple(tuple(index(I, (i, j - (I[i][j] - min_color) if I[i][j] != min_color else 0)) for j in range(len(I[0]))) for i in range(len(I)))
 
7.333333333333333, tensor(0.4140), Description: For each color in the input grid, except for the most common color, move the corresponding shape to the right by a number of columns equal to the difference between its color and the most common color. The output grid should have all the shapes shifted to the right, with the rest of the grid filled with black. 
:: def bfibfbcacbaeeiddidffeafjjedbjgaa(I):
    O = I  
    for v in palette(I) - {mostcolor(I)}:
        obj = toobject(ofcolor(I, v), I)
        direction = (0, v - mostcolor(I))
        O = paint(cover(O, obj), shift(obj, direction))
    return O
 
7.333333333333333, tensor(0.4176), Description: For each color in the input grid, except for the most common color, move the corresponding shape to the right by a number of columns equal to the difference between its color and the most common color. The output grid should have all the shapes shifted to the right, with the rest of the grid filled with the most common color. 
:: def ecgdagcgdaideccbbhhdichddbehfdae(I):
    O = canvas(mostcolor(I), shape(I))
    for v in sorted(palette(I) - {mostcolor(I)}):
        obj = toobject(ofcolor(I, v), I)
        shift_magnitude = abs(v - mostcolor(I))
        direction = (0, shift_magnitude * sign(v - mostcolor(I)))
        O = paint(O, shift(obj, direction))
    return O
 
10.333333333333334, tensor(0.0100), Description: Shift each row of the input grid one position to the right, wrapping the last element to the beginning of the row. The output grid should have the same colors as the input grid, but with each row shifted one position to the right. 
:: def daecjdbgbfbbejaejcjecaacjhfbbiec(I):
  h = height(I)
  O = tuple(
      tuple(I[(i+j-1)%h][j] for j in range(width(I))) 
      for i in range(h)
  )
  return O
 
10.666666666666666, tensor(0.0100), Description: Shift each row of the input grid one position to the left, wrapping the first element to the end of the row. The output grid should have the same colors as the input grid, but with each row shifted one position to the left. 
:: def ecegeddggceeeccgbeafcaiafcideiig(I):
    h = height(I)
    w = width(I)
    O = tuple(
        tuple(I[(i-j)%h][j] for j in range(w)) 
        for i in range(h)
    )
    return O
 
14.666666666666666, tensor(0.2348), Description: For each row in the input grid, find the first non-zero element and repeat it for the entire row. If a row contains only zeros, fill the entire row with zeros. The output grid should have the same colors as the input grid, but with each row containing only one unique color (or all zeros). 
:: def cdffhdbegbfiefffbfedjaeefgbacbii(grid):
    return tuple(
        tuple(
            next(element for element in row if element != 0) if any(element != 0 for element in row) else 0 
            for _ in range(len(row))
        ) if any(element != 0 for element in row) else tuple(0 for _ in range(len(row)))
        for row in grid
    )
 
9.666666666666666, tensor(0.2479), Description: For each colored square, move it to the right by a number of columns equal to its color minus the minimum color in the grid.  The output grid should have all the colored squares shifted to the right, with the rest of the grid filled with black. 
:: def acdihjbbidabeaeajjbdbcjbdcebbada(I):
  return tuple(
    tuple(
      index(I, (i, j - (I[i][j] - minimum(palette(I))) if I[i][j] != minimum(palette(I)) else j))
      for j in range(len(I[0]))
    )
    for i in range(len(I))
  )
 
5.333333333333333, tensor(0.0105), Description: Shift each element of the input grid one position to the left and one position up, wrapping around the edges. The output grid should have the same colors as the input grid, but with each element shifted diagonally one position to the top-left. 
:: def fcciadehjejgejcdjbbegbjfhffejhif(I):
  h = height(I)
  w = width(I)
  O = tuple(
      tuple(I[(i-1)%h][(j-1)%w] for j in range(w))
      for i in range(h)
  )
  return O
 
11.333333333333334, tensor(0.0118), Description: Rotate the input grid 270 degrees, then shift each row one position to the right, wrapping the first element to the end of the row. Finally, rotate the result 90 degrees. The output grid should have the same colors as the input grid, but with each row shifted one position to the right and rotated 90 degrees clockwise. 
:: def hafhejafadcaeebbifeadjafcfbdbdch(I):
  O = rot90(tuple(
      tuple(v for i, v in enumerate(row) if i > 0) + (row[0],) 
      for row in rot270(I)
  ))
  return O
 
6.0, tensor(0.0105), Description: Shift each element of the input grid one position to the left and one position up, wrapping around the edges. The output grid should have the same colors as the input grid, but with each element shifted diagonally one position to the top-left. 
:: def cicbacbefehjeebijbedfabddbdeadad(I):
  h = height(I)
  w = width(I)
  O = tuple(
      tuple(I[(i-1)%h][(j-1)%w] if 0 <= i-1 < h and 0 <= j-1 < w else I[i][j] for j in range(w)) 
      for i in range(h)
  )
  return O
 
5.333333333333333, tensor(0.0116), Description: Shift each element of the input grid one position to the left and one position up, wrapping around the edges. The output grid should have the same colors as the input grid, but with each element shifted diagonally one position to the top-left. The background should be filled with the most common color in the input grid. 
:: def acdbahbgagaheefeacddjcchjffbfbab(I):
  obj = asobject(I)
  shifted_obj = frozenset({(v, ((i-1)%height(I), (j-1)%width(I))) for v, (i, j) in obj})
  O = canvas(mostcolor(I), shape(I))
  O = paint(O, shifted_obj)
  return O
 
10.666666666666666, tensor(0.0121), Description: Move all non-zero values in each row to the left, filling the remaining spaces with zeros.  The output grid should have all the non-zero values in each row clustered together on the left side, with zeros filling the rest of the row. 
:: def ccacgfbfedifeggfijebhahgaeejajbh(I):
  return tuple(
    tuple(x for x in row if x != 0) + repeat(0, row.count(0))
    for row in I
  )
 
10.0, tensor(0.0099), Description: Rotate the input grid 90 degrees clockwise. Then, for each row, move all non-zero values to the left, filling the remaining spaces with zeros. Finally, rotate the result 270 degrees counterclockwise. The output grid should have the same colors as the input grid, but with each row shifted to the left and rotated 90 degrees counterclockwise. 
:: def ddcidfdihgbiegedbbeaaecadeebfaff(I):
  x1 = rot90(I)
  x2 = apply(lambda c: tuple(v for v in c if v != 0) + tuple(0 for _ in range(len(c) - len([v for v in c if v != 0]))), x1)
  O = rot270(x2)
  return O
 
9.333333333333334, tensor(0.0265), Description: For each column in the input grid, move all non-zero values to the top, filling the remaining spaces with zeros. The output grid should have all the non-zero values in each column clustered together at the top, with zeros filling the rest of the column. 
:: def fdcghbaejjdfeiabafccedfedbdcgbji(I):
  O = tuple(
    tuple(
      I[j][k] 
      for j in range(len(I)) if I[j][k] != 0
    ) + tuple(0 for _ in range(len(I) - len([I[j][k] for j in range(len(I)) if I[j][k] != 0])))
    for k in range(len(I[0]))
  )
  return O
 
8.0, tensor(0.0168), Description: For each colored shape in the input grid, move it to the top row of the grid, keeping the original shape and color. The output grid should have all the colored shapes in the top row, with the rest of the grid filled with black. 
:: def ajaidfjcdfcheadfbggfdabdaicacjif(I):
  x1 = objects(I, T, F, T)
  O = canvas(0, shape(I))
  for obj in x1:
    x2 = ulcorner(obj)[1]
    x3 = shift(obj, (-uppermost(obj), 0))
    O = paint(O, shift(x3, (0, x2)))
  return O
 
6.333333333333333, tensor(1.9853), Description: For each column in the input grid, find the first non-zero element from the top and repeat it for the entire column. If a column contains only zeros, fill the entire column with zeros. The output grid should have the same colors as the input grid, but with each column containing only one unique color (or all zeros). 
:: def gegfhadbdfcjebagacjbddcabgadhdcc(I):
  O = tuple(
      tuple(
        next((I[l][j] for l in range(i + 1) if I[l][j] != 0), 0) 
        for i in range(len(I))
      ) 
      for j in range(len(I[0]))
  )
  return O
 
10.0, tensor(0.0100), Description: Shift each row of the input grid one position to the right, wrapping the last element to the beginning of the row. The output grid should have the same colors as the input grid, but with each row shifted one position to the right. 
:: def chehchbdfdddehfcbageeehihgfcabeg(I):
  return tuple(
      tuple(I[(i+j)%height(I)][j] for j in range(width(I)))
      for i in range(height(I))
  )
 
21.0, tensor(0.0126), Description: The output grid is a diagonal line of colored squares, starting from the top left corner and extending to the bottom right corner. The colors of the squares in the output grid correspond to the colors of the squares in the input grid, following a diagonal pattern. For example, if the input grid has a red square in the top left corner, a blue square in the top middle, and a green square in the top right corner, the output grid will have a red square in the top left corner, a blue square in the second square on the diagonal, and a green square in the third square on the diagonal. This pattern continues down the diagonal line. 
:: def ecfgfaddefajedbfbdbdcjafcfgaaadd(I):
    h, w = len(I), len(I[0])
    O = canvas(0, (h + w - 1, w))
    for i in range(h):
        for j in range(w):
            O = fill(O, I[i][j], ((i+j, j),))
    return rot90(O)[:w]
 
20.666666666666668, tensor(0.0088), Description: For each row in the input grid, shift the elements to the right, padding the beginning and end with zeros. The output grid should have the same colors as the input grid, but with each row shifted to the right, with zeros filling the empty spaces. 
:: def abgfahebagececfgijecfdegebfecade(I):
    return tuple(zip(*[
        [0] * i + list(row) + [0] * (len(I) - i - 1) 
        for i, row in enumerate(I)
    ]))
 
20.666666666666668, tensor(0.0126), Description: The output grid is a diagonal line of colored squares, starting from the top left corner and extending to the bottom right corner. The colors of the squares in the output grid correspond to the colors of the squares in the input grid, following a diagonal pattern. For example, if the input grid has a red square in the top left corner, a blue square in the top middle, and a green square in the top right corner, the output grid will have a red square in the top left corner, a blue square in the second square on the diagonal, and a green square in the third square on the diagonal. This pattern continues down the diagonal line. 
:: def dhfcecbddjacedhfaadfbhedcbfadcfa(I):
  O = tuple()
  for j in range(len(I[0])):
      diag = tuple(I[i][j-i] for i in range(j+1) if 0 <= i < len(I) and 0 <= j-i < len(I[0]))
      O = O + (diag + (0,) * (len(I) + len(I[0]) - 1 - len(diag)),)
  return O
 
10.0, tensor(0.3543), Description: Sort the colored shapes in the input grid in descending order based on their color values. Then, for each shape, move it to the right by a number of columns equal to its index in the sorted list multiplied by the width of the shape. The output grid should have all the colored shapes shifted to the right, with the rest of the grid filled with the most common color in the input grid. 
:: def ehcdehbabadfedfijibcejfdbhbebgce(I):
  objs = sorted(objects(I, F, F, T), key=lambda obj: -color(obj))
  O = canvas(mostcolor(I), shape(I))
  for i, obj in enumerate(objs):
    O = paint(O, shift(normalize(obj), (0, i * width(obj))))
  return O
 
7.333333333333333, tensor(0.0313), Description: Sort the colors in each column of the input grid in ascending order. Then, for each column, place the colors in the output grid in the order they appear in the sorted list. The output grid should have the same colors as the input grid, but with the colors in each column sorted in ascending order. 
:: def bghcbfcadaeeedieabijaabafjehdiej(I):
    O = canvas(mostcolor(I), shape(I))
    for j, v in enumerate(sorted({I[i][j] for i in range(height(I))} for j in range(width(I)))):
        for k, x in enumerate(v):
            O = paint(O, {(x, (k, j))})
    return O
 
9.666666666666666, tensor(0.0459), Description: Sort the colors in each column of the input grid in descending order. Then, for each column, place the colors in the output grid in the order they appear in the sorted list. The output grid should have the same colors as the input grid, but with the colors in each column sorted in descending order. The background should be filled with the most common color in the input grid. 
:: def hcajjajbhegfebcdieedgieddbaedaed(I):
  O = canvas(mostcolor(I), (height(I), width(I)))
  for j in range(width(I)):
    column = tuple(I[i][j] for i in range(height(I)))
    for i, v in enumerate(sorted(set(column), reverse=True)):
      O = paint(O, {(v, (i, j))})
  return O
 
10.0, tensor(0.3317), Description: Sort the colored shapes in the input grid in descending order based on their color values, and then in ascending order based on their top-left corner's row index. Then, for each shape, move it to the right by a number of columns equal to its index in the sorted list multiplied by the width of the shape. The output grid should have all the colored shapes shifted to the right, with the rest of the grid filled with the most common color in the input grid. 
:: def eabdjjcbecfiecibjiifaiggaefgjdde(I):
    h, w = shape(I)
    objs = sorted(objects(I, False, False, True), key=lambda x: (-color(x), ulcorner(x)[0]))
    O = canvas(mostcolor(I), (h, w))
    x = 0
    for obj in objs:
        O = paint(O, shift(normalize(obj), (0, x)))
        x += width(obj)
    return O
 
11.333333333333334, tensor(0.0164), Description: For each row in the input grid, move all elements that are not the most common color in that row to the left, followed by the most common color repeated as many times as it appears in the row. The output grid should have the same colors as the input grid, but with each row containing all the elements that are not the most common color clustered together on the left side, followed by the most common color repeated for the rest of the row. 
:: def cdbacfacfjebeefdidedcfihdaegbbbc(I):
  return tuple(
      tuple(x for x in row if x != mostcommon(row)) + repeat(mostcommon(row), row.count(mostcommon(row)))
      for row in I
  )
 
10.666666666666666, tensor(0.0841), Description: Sort each row of the input grid in ascending order, with 0s coming last. The output grid should have the same colors as the input grid, but with each row sorted in ascending order. 
:: def cibicbcahiajedaibaajbdaiiafabhfi(I):
  return tuple(
      tuple(v for k in sfilter(set(row), lambda x: x != 0) for v in repeat(k, row.count(k))) + 
      tuple(0 for _ in range(row.count(0))) 
      for row in I
  )
 
10.0, tensor(0.0126), Description: The output grid is a diagonal line of colored squares, starting from the top left corner and extending to the bottom right corner. The colors of the squares in the output grid correspond to the colors of the squares in the input grid, following a diagonal pattern. For example, if the input grid has a red square in the top left corner, a blue square in the top middle, and a green square in the top right corner, the output grid will have a red square in the top left corner, a blue square in the second square on the diagonal, and a green square in the third square on the diagonal. This pattern continues down the diagonal line. 
:: def cfdfcagaaeabefhciabdddcffdaeiidc(I):
  h, w = len(I), len(I[0])
  O = canvas(0, (h, w))
  for i in range(h):
    for j in range(w):
      if 0 <= i - j < h:
        O = fill(O, I[i][j], ((i - j, j),))
  return O
 
9.0, tensor(0.0125), Description: The output grid is a diagonal line of colored squares, starting from the bottom left corner and extending to the top right corner. The colors of the squares in the output grid correspond to the colors of the squares in the input grid, following a diagonal pattern. For example, if the input grid has a red square in the bottom left corner, a blue square in the bottom middle, and a green square in the bottom right corner, the output grid will have a red square in the bottom left corner, a blue square in the second square on the diagonal, and a green square in the third square on the diagonal. This pattern continues up the diagonal line. The output grid is then mirrored diagonally. 
:: def bbjcgjabdjfeehedafghaabegdejfcaf(I):
  return dmirror(tuple(
    tuple(
      I[j][i + j] if 0 <= i + j < len(I[0]) else 0
      for j in range(len(I)) 
    ) 
    for i in range(len(I) - len(I[0]), len(I))
  ))
 
9.333333333333334, tensor(0.0126), Description: The output grid is a diagonal line of colored squares, starting from the top left corner and extending to the bottom right corner. The colors of the squares in the output grid correspond to the colors of the squares in the input grid, following a diagonal pattern. For example, if the input grid has a red square in the top left corner, a blue square in the top middle, and a green square in the top right corner, the output grid will have a red square in the top left corner, a blue square in the second square on the diagonal, and a green square in the third square on the diagonal. This pattern continues down the diagonal line. 
:: def eccgeededabfejfbachhjehiadaajdhe(I):
  O = canvas(0, shape(I))
  indices = asindices(I)
  for i, j in indices:
    new_i = max(0, i - j)
    O = fill(O, I[i][j], ((new_i, j),))
  return O
 
8.0, tensor(0.2461), Description: For each color in the input grid, except for the most common color, move the corresponding shape to the right by a number of columns equal to its color modulo the width of the grid. The output grid should have all the shapes shifted to the right, wrapping around to the beginning of the row if necessary, with the rest of the grid filled with the most common color. 
:: def dfdafihbijfhehfdadhebdedbeaecbbb(I):
  O = I 
  for c in palette(I) - {mostcommon(I)}: # Iterate over each color except background
    obj = recolor(c, ofcolor(I, c)) # Create an object representing the current color
    shift_amount = c % width(I) # Calculate the wrap-around shift amount
    O = paint(cover(O, obj), shift(obj, (0, shift_amount))) # Cover the original object, shift, and repaint
  return O 
 
6.0, tensor(0.0218), Description: For each row in the input grid, move all elements that are not the most common color in that row to the left, followed by the most common color repeated as many times as it appears in the row. The output grid should have the same colors as the input grid, but with each row containing all the elements that are not the most common color clustered together on the left side, followed by the most common color repeated for the rest of the row. The background should be filled with the most common color in the input grid. 
:: def eceefjddacageefeajbeebebbcfahdcf(I):
  O = canvas(mostcommon(I), shape(I))
  for i, row in enumerate(I):
    x = 0
    for j, v in enumerate(row):
      if v != mostcommon(I):
        O = paint(O, {(v, (i, x))})
        x += 1
  return O
 
10.0, tensor(0.0245), Description: For each column in the input grid, move all non-zero values to the top, filling the remaining spaces with zeros. The output grid should have all the non-zero values in each column clustered together at the top, with zeros filling the rest of the column. 
:: def icbhfchejbfbeddfadjfhaafdibegbfa(grid):
    h = height(grid)
    w = width(grid)
    new_grid = canvas(0, (h, w))
    for j in range(w):
        column = tuple(grid[i][j] for i in range(h))
        shifted_column = tuple(v for v in column if v != 0) + tuple(0 for _ in range(h - len(tuple(v for v in column if v != 0))))
        for i in range(h):
            new_grid = fill(new_grid, shifted_column[i], ((i, j),))
    return new_grid
 
36.666666666666664, tensor(0.0324), Description: For each column in the input grid, sort the colors in ascending order. Then, for each column, place the colors in the output grid in the order they appear in the sorted list. The output grid should have the same colors as the input grid, but with the colors in each column sorted in ascending order. 
:: def abeeebfbfaebeeecacaebjeffbdffcaa(grid):
    h = height(grid)
    return tuple(tuple(v for i in range(h) if grid[i][j] == v) + tuple(0 for _ in range(h - len(tuple(v for i in range(h) if grid[i][j] == v)))) for j in range(width(grid)) for v in set(grid[i][j] for i in range(h)))
 
9.333333333333334, tensor(0.0245), Description: For each column in the input grid, move all non-zero values to the top, filling the remaining spaces with zeros. The output grid should have all the non-zero values in each column clustered together at the top, with zeros filling the rest of the column. 
:: def fcebefeffecgeachjdegbfdbabacjafc(grid):
    w = width(grid)
    return tuple(tuple(v for v in (grid[i][j] for i in range(height(grid))) if v != 0) + tuple(0 for _ in range(height(grid) - len(tuple(v for v in (grid[i][j] for i in range(height(grid))) if v != 0)))) for j in range(w))
 
7.0, tensor(1.9886), Description: For each column in the input grid, find the first non-zero element from the bottom and repeat it for the entire column. If a column contains only zeros, fill the entire column with zeros. The output grid should have the same colors as the input grid, but with each column containing only one unique color (or all zeros). 
:: def baiccfbjaegdehbcjcffcgcadcdcabcd(grid):
    h = height(grid)
    w = width(grid)
    return tuple(tuple(next((grid[i][j] for i in range(k, h) if grid[i][j] != 0), 0) for k in range(h)) for j in range(w))
 
10.0, tensor(0.0133), Description: For each row in the input grid, move all non-zero values to the left, filling the remaining spaces with zeros. Then, mirror the result diagonally. The output grid should have all the non-zero values in each row clustered together on the left side, with zeros filling the rest of the row, and the entire grid mirrored diagonally. 
:: def gjcafdeacjahedfcafhcfabbffhfjjac(I):
    return dmirror(tuple(
        tuple(v for v in r if v != 0) + tuple(0 for _ in range(len(I[0]) - len([v for v in r if v != 0]))) 
        for r in dmirror(I)
    ))
 
8.666666666666666, tensor(0.0158), Description: For each column in the input grid, move all non-zero values to the top, filling the remaining spaces with zeros. Then, rotate the result 90 degrees clockwise. The output grid should have all the non-zero values in each column clustered together at the top, with zeros filling the rest of the column, and the entire grid rotated 90 degrees clockwise. 
:: def dbhadedcfefaeecfiifaajbjfbcgfjjf(I):
    return rot90(tuple(
        tuple(I[j][i] for j in range(len(I)) if I[j][i] != 0) + tuple(0 for _ in range(len(I) - len([I[j][i] for j in range(len(I)) if I[j][i] != 0])))
        for i in range(len(I[0]))
    ))
 
11.0, tensor(0.0148), Description: For each column in the input grid, move all non-zero values to the bottom, filling the remaining spaces with zeros. Then, reverse the order of the non-zero values in each column. Finally, rotate the result 270 degrees counterclockwise. The output grid should have all the non-zero values in each column clustered together at the bottom, with zeros filling the rest of the column, and the entire grid rotated 270 degrees counterclockwise. 
:: def geddegffedbbeceibdaffbccgddiadee(I):
  return rot270(tuple(
      tuple(I[len(I)-1-j][i] for j in range(len(I)) if I[len(I)-1-j][i] != 0)[::-1] + tuple(0 for _ in range(len(I) - len([I[len(I)-1-j][i] for j in range(len(I)) if I[len(I)-1-j][i] != 0])))
      for i in range(len(I[0]))
  ))
 
11.0, tensor(0.0123), Description: Rotate the input grid 90 degrees clockwise. Then, for each row, move all non-zero values to the left, filling the remaining spaces with zeros. Finally, mirror the result diagonally. The output grid should have all the non-zero values in each row clustered together on the left side, with zeros filling the rest of the row, and the entire grid mirrored diagonally. 
:: def eicfaffeddibeihdaibdahfiacecfhde(I):
    return dmirror(tuple(
        tuple(v for v in r if v != 0) + tuple(0 for _ in range(len(r) - len([v for v in r if v != 0])))
        for r in rot90(I)
    ))
 
10.666666666666666, tensor(0.0139), Description: Mirror the input grid diagonally, then mirror it horizontally. The output grid should be a mirrored version of the input grid, first diagonally and then horizontally. 
:: def baffffdfiaadeefbafegiafeaeaabffj(I):
  O = dmirror(I)
  O = hmirror(O)
  return O
 
5.333333333333333, tensor(0.0126), Description: The output grid is a diagonal line of colored squares, starting from the top left corner and extending to the bottom right corner. The colors of the squares in the output grid correspond to the colors of the squares in the input grid, following a diagonal pattern. For example, if the input grid has a red square in the top left corner, a blue square in the top middle, and a green square in the top right corner, the output grid will have a red square in the top left corner, a blue square in the second square on the diagonal, and a green square in the third square on the diagonal. This pattern continues down the diagonal line. 
:: def ffggffjcaddaefjdiadacgbadecebdcb(grid):
  h, w = len(grid), len(grid[0])
  output = canvas(0, (max(h, w), min(h, w)))
  for i in range(h):
    for j in range(w):
      output = paint(output, {(grid[i][j], (j, i + j))})
  return output
 
0.0, tensor(0.0126), Description: The output grid is a diagonal line of colored squares, starting from the top left corner and extending to the bottom right corner. The colors of the squares in the output grid correspond to the colors of the squares in the input grid, following a diagonal pattern. For example, if the input grid has a red square in the top left corner, a blue square in the top middle, and a green square in the top right corner, the output grid will have a red square in the top left corner, a blue square in the second square on the diagonal, and a green square in the third square on the diagonal. This pattern continues down the diagonal line. 
:: def cbdehjhjdbcbeedebjbheeedcicagdjf(grid):
  h, w = len(grid), len(grid[0])
  output = canvas(0, (max(h, w), min(h, w)))
  for i in range(h):
    diag = tuple(grid[i + k][k] if 0 <= i + k < h and 0 <= k < w else 0 for k in range(min(h - i, w)))
    output = paint(output, {(v, (j, i + j)) for j, v in enumerate(diag)})
  return output
 
