12.666666666666666, tensor(0.0125), Description: Move the green shape from the bottom half of the grid to the top half, so that it is directly above the green shape in the top half. The green shapes should be touching. The rest of the grid should remain the same. 
:: def dchceigajfjceecebcaacgcffedahbde(I):
    target_value = 2 
    target_object = first(colorfilter(objects(I, F, T, T), target_value))
    upper_half = tophalf(I)
    lower_half = bottomhalf(I)
    object_height = height(target_object)
    if contained(target_value, palette(upper_half)):
        offset = (-(object_height + 1), 0)
    else:
        offset = (-object_height, 0) 
    moved_lower_half = move(lower_half, target_object, offset)
    O = vconcat(upper_half, moved_lower_half)
    return O 
 
7.0, tensor(0.0564), Description: Find the row that contains the green square. Copy all rows above that row to the output. Copy the row with the green square to the output. Replace all green squares in the rows below the green square with black squares. 
:: def gddebaefcecaeebaaedbdcgdheccgaff(I):
    target_value = 2
    target_row_index = next((i for i, row in enumerate(I) if target_value in row), None)
    if target_row_index is not None:
        target_row = I[target_row_index]
        O = I[:target_row_index] + (target_row,) + replace(I[target_row_index + 1:], target_value, 0) 
    else:
        O = I
    return O
 
32.666666666666664, tensor(0.0117), Description: Move the green shape from the bottom of the grid to the top of the grid, so that it is directly above the original green shape. The green shapes should be touching. The rest of the grid should remain the same. 
:: def cageeigccdihebdcabdbbjfdjgeghfbb(I):
    target_value = 2
    target_object = first(colorfilter(objects(I, F, T, T), target_value))
    target_height = height(target_object)
    top_part = crop(I, (0, 0), (len(I) - target_height, len(I[0])))
    bottom_part = crop(I, (len(I) - target_height, 0), (target_height, len(I[0])))
    O = vconcat(bottom_part, top_part)
    return O
 
4.333333333333333, tensor(1.7863), Description: For each green square, draw a vertical line of green squares upwards until it reaches a blue square. 
:: def gdgabefecighejciihebeiiccaahjheb(I):
  twos = ofcolor(I, TWO)
  others = ofcolor(I, ONE)
  for i, j in twos:
    while (i-1, j) not in others and i > 0:
      I = paint(cover(I, {(TWO, (i, j))}), {(TWO, (i-1, j))})
      i -= 1
  return I
 
12.333333333333334, tensor(0.0460), Description: For each colored shape, move it upwards until it touches another colored shape or the top of the grid. The shapes should remain their original colors. 
:: def cgbcacbafecieiajifacffacddegfeff(I):
    objs = objects(I, F, F, T)
    bg = mostcolor(I)
    for obj in objs:
        upper = uppermost(obj)
        while upper > 0:
            shifted = shift(obj, (-1, 0))
            if any(index(I, (i, j)) != bg for v, (i, j) in shifted):
                break
            upper -= 1
            obj = shifted
        I = paint(cover(I, obj), obj)
    O = I
    return O
 
8.666666666666666, tensor(0.0289), Description: For each colored square that is not black, move it upwards until it touches a black square. The colored squares should remain their original colors. 
:: def ddfibfeggbcaeagabjjcbadhhiifcdbd(I):
  O = I
  for i in range(1, len(I)):
    for j in range(len(I[0])):
      if I[i][j] != mostcolor(I) and I[i - 1][j] == mostcolor(I):
        k = i
        while k > 0 and I[k - 1][j] == mostcolor(I):
          k -= 1
        O = paint(cover(O, {(I[i][j], (i, j))}), {(I[i][j], (k, j))})
  return O
 
25.333333333333332, tensor(0.0432), Description: For each colored shape, move all of its squares to the same row as the shape's lowest square. The shapes should remain their original colors. 
:: def cicecjabbiceebgajffdidedehhedabe(I):
  objs = objects(I, F, F, T)
  for obj in objs:
    min_row = min(i for _, (i, _) in obj)
    new_obj = {(v, (min_row, j)) for v, (_, j) in obj}
    I = paint(cover(I, obj), new_obj)
  O = I
  return O
 
5.666666666666667, tensor(0.0289), Description: For each colored square that is not black, move it upwards until it touches a black square. The colored squares should remain their original colors. 
:: def haacadgcdcffejdebadfbgifejciacgg(I):
    O = I
    for j in range(len(I[0])):
        for i in range(1, len(I)):
            if I[i][j] != mostcolor(I) and I[i-1][j] == mostcolor(I):
                temp = I[i][j]
                k = i
                while k > 0 and I[k-1][j] == mostcolor(I):
                    k -= 1
                O = replace(O, temp, mostcolor(I))
                O = paint(O, {(temp, (k, j))})
    return O
 
0.0, tensor(0.0405), Description: For each column in the input grid, move all the colored squares to the bottom of the column, leaving the black squares at the top. The colored squares should remain their original colors. 
:: def iifjaebjhecfeeaabeifbhdcdhfcjaed(I):
  O = canvas(mostcolor(I), shape(I))
  for j in range(width(I)):
    column = tuple(I[i][j] for i in range(height(I)))
    new_column = tuple(v for v in column if v != mostcolor(I)) + tuple(v for v in column if v == mostcolor(I))
    for i in range(len(new_column)):
      O = paint(O, {(new_column[i], (i, j))})
  return O
 
