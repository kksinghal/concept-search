39.0, tensor(0.0748), Description: 
If the first object is to the right of the second object, color the first object red, otherwise color it blue. If the second object is above the third object, color the second object green, otherwise color it red. If the first object is above the third object, color the third object blue, otherwise color it green. 
:: def dfcaihiciffdebeejhfajeaccgadaaja(I):
  objs = objects(I, T, F, F)
  obj1 = first(objs)
  obj2 = first(remove(obj1, objs))
  obj3 = first(remove(obj2, remove(obj1, objs)))
  p1 = position(obj1, obj2)
  p2 = position(obj2, obj3)
  O = paint(paint(paint(canvas(0, shape(I)), recolor(1, obj1) if p1[0] >= 0 else recolor(3, obj1)), recolor(2, obj2) if p2[1] <= 0 else recolor(1, obj2)), recolor(3, obj3) if p1[1] <= 0 else recolor(2, obj3))
  return O
 
98.66666666666667, tensor(0.1158), Description:
Color the largest object red if it is above the second largest object, otherwise color it blue. Color the second largest object green if it is to the left of the third largest object, otherwise color it red. Color the third largest object blue if the largest object is above it, otherwise color it green. 
:: def dbdaaaicchgfecbfjhfhifhcbjccaidj(I):
  objs = objects(I, T, F, F)
  obj1 = argmax(objs, size)
  objs = remove(obj1, objs)
  obj2 = argmax(objs, size)
  objs = remove(obj2, objs)
  obj3 = argmax(objs, size)
  cond1 = uppermost(obj1) < uppermost(obj2)
  cond2 = leftmost(obj2) < leftmost(obj3)
  O = paint(paint(paint(canvas(0, shape(I)), recolor(1 if cond1 else 3, obj1)), recolor(2 if cond2 else 1, obj2)), recolor(3 if cond1 else 2, obj3))
  return O
 
10.666666666666666, tensor(0.6481), Description:
Color the object with the most yellow squares red if it is above the second object with the most yellow squares, otherwise color it blue. Color the second object with the most yellow squares green if it is to the left of the third object with the most yellow squares, otherwise color it red. Color the third object with the most yellow squares blue if the first object with the most yellow squares is above it, otherwise color it green. 
:: def baddhdhfabbbeiffjaajhhifaifjfibc(I):
  objs = objects(I, T, F, F)
  obj1 = argmax(objs, lambda obj: colorcount(obj, 5))
  rest = remove(obj1, objs)
  obj2 = argmax(rest, lambda obj: colorcount(obj, 5))
  obj3 = first(remove(obj2, rest))
  O = paint(paint(paint(canvas(0, shape(I)), recolor(branch(uppermost(obj1) < uppermost(obj2), 1, 3), obj1)), recolor(branch(leftmost(obj2) < leftmost(obj3), 2, 1), obj2)), recolor(branch(uppermost(obj1) < uppermost(obj3), 3, 2), obj3))
  return O
 
97.66666666666667, tensor(0.0882), Description:
Color the object that is the top-left most red, otherwise color it blue. Color the object that is the second top-left most green if it is the same object as the third top-left most, otherwise color it red. Color the object that is the third top-left most blue if it is the same object as the first top-left most, otherwise color it green. 
:: def aibfbcbfhhfdebgfbfffieadbieeadcb(I):
  objs = objects(I, T, F, F)
  obj1 = min(objs, key=lambda obj: (uppermost(obj), leftmost(obj)))
  rest = remove(obj1, objs)
  obj2 = min(rest, key=lambda obj: (uppermost(obj), leftmost(obj)))
  obj3 = first(remove(obj2, rest))
  O = paint(paint(paint(canvas(0, shape(I)), recolor(3 if obj1 == obj3 else 1, obj1)), recolor(2 if obj2 == obj3 else 1, obj2)), recolor(3 if obj1 == obj2 else 2, obj3))
  return O
 
12.0, tensor(0.7858), Description:
Color the objects in the input grid based on their vertical position. The object that is the lowest is colored 1, the second lowest is colored 2, and so on. 
:: def jebfjcbegdaceigcijcfhafabebihdee(I):
  objs = objects(I, T, F, T)  # Extract objects (without background)
  
  def bottom_first(obj):
    return uppermost(obj)

  sorted_objs = order(objs, bottom_first) # Sort objects by uppermost row
  
  output = I
  for i, obj in enumerate(sorted_objs):
    output = fill(output, i+1, toindices(obj)) 
  
  return output 
 
10.666666666666666, tensor(0.7379), Description:
Color the bottom-most object in the input grid red (color 1). Color the top-most object green (color 2). If there is a third object, color it blue (color 3). 
:: def fbjeidfdbeieedgcbajgjefhcjcfjgah(I):
    objs = objects(I, T, F, T)
    
    bottom_obj = argmax(objs, lambda obj: lowermost(obj)) # Find bottom-most
    top_obj = argmin(objs, lambda obj: uppermost(obj))     # Find top-most

    remaining_objs = remove(bottom_obj, objs)
    remaining_objs = remove(top_obj, remaining_objs)
    other_obj = first(remaining_objs) if remaining_objs else None
    
    output = I
    output = fill(output, 1, toindices(bottom_obj))
    output = fill(output, 2, toindices(top_obj)) 
    if other_obj:
        output = fill(output, 3, toindices(other_obj))
    
    return output
 
15.0, tensor(0.7910), Description:
Color the objects in the input grid based on their position. The object that is the top-left most is colored 1, the second top-left most is colored 2, and so on. If an object has the same position as another object, it is colored with the same color. 
:: def cehegbeadbecebdbifeiaieffjbfghdi(I):
  objs = objects(I, T, T, F)
  obj_list = sorted(objs, key=lambda obj: min(i * 100 + j for v, (i, j) in obj))
  mapping = {color(obj): i + 1 if i > 0 else color(obj) for i, obj in enumerate(obj_list)}
  O = canvas(ZERO, shape(I))
  for i, obj in enumerate(obj_list):
    O = paint(O, recolor(mapping[color(obj)], obj))
  return O
 
65.33333333333333, tensor(1.1108), Description:
Color the objects in the input grid based on their color. The object with the lowest color is colored 1, the second lowest is colored 2, and so on. The background color is then colored with the color of the object that was originally colored 1. 
:: def bfdbddihhfgiefbaaaijaffiadgdcehg(I):
    objs = objects(I, T, T, F)
    O = I
    count = 1
    for i, obj in enumerate(objs):
        if i == 0:
            first_color = color(obj)
        else:
            O = replace(O, color(obj), count + 1)
            count += 1
    O = replace(O, ZERO, count + 1)
    O = replace(O, first_color, ZERO)
    return O
 
13.0, tensor(1.1174), Description:
This code implements a connected component labeling algorithm. It iterates through the input grid, identifying connected components of non-zero pixels. Each connected component is assigned a unique label, starting from 1. The output grid is then filled with these labels, representing the different connected components. 
:: def deejcdajadbfebbjjfbdcedhgffcdcfb(I):
    O = canvas(ZERO, shape(I))
    seen = set()
    label = 1
    for i in range(height(I)):
        for j in range(width(I)):
            if I[i][j] != 0 and (i, j) not in seen:
                seen.add((i, j))
                queue = [(i, j)]
                while queue:
                    ci, cj = queue.pop(0)
                    for ni, nj in neighbors((ci, cj)):
                        if 0 <= ni < height(I) and 0 <= nj < width(I) and I[ni][nj] != 0 and (ni, nj) not in seen:
                            seen.add((ni, nj))
                            queue.append((ni, nj))
                            O = paint(O, {(label, (ni, nj))})
                label += 1
    return O
 
11.0, tensor(0.5471), Description:
Color the top-most object in the input grid red (color 1). Color the left-most object blue (color 3). Color all other objects green (color 2). 
:: def cgbdecifcfjfegecbfjdgedgdebbedae(I):
    objs = objects(I, univalued=True, diagonal=False, without_bg=True)
    top_obj = argmax(objs, uppermost) 
    left_obj = argmin(objs, leftmost)
    other_objs = objs - {top_obj, left_obj}
    O = I
    O = paint(O, recolor(ONE, toindices(top_obj)))
    O = paint(O, recolor(THREE, toindices(left_obj)))
    for obj in other_objs:
        O = paint(O, recolor(TWO, toindices(obj))) 
    return O
 
97.0, tensor(0.4979), Description:
Color the top-most object red (color 1) if it is above the second top-most object, otherwise color it blue (color 3). Color the second top-most object green (color 2) if it is to the left of the third top-most object, otherwise color it red (color 1). Color the third top-most object blue (color 3) if the top-most object is above it, otherwise color it green (color 2). 
:: def dcceaddcggabeiaejfbjjbgccbfcdaee(I):
  objs = objects(I, T, F, F)
  sorted_objs = order(objs, lambda obj: (uppermost(obj), leftmost(obj)))
  obj1, obj2, obj3 = sorted_objs[:3] # Extract only the first three objects
  O = paint(paint(paint(canvas(0, shape(I)), 
                       recolor(1 if uppermost(obj1) < uppermost(obj2) else 3, obj1)), 
                   recolor(2 if leftmost(obj2) < leftmost(obj3) else 1, obj2)), 
                   recolor(3 if uppermost(obj1) < uppermost(obj3) else 2, obj3))
  return O
 
98.33333333333333, tensor(0.8395), Description:
Color the top-left most object red (color 1). Color the second top-left most object green (color 2) if it is to the left of the third top-left most object, otherwise color it blue (color 3). Color the third top-left most object blue (color 3) if it is to the left of the second top-left most object, otherwise color it green (color 2). 
:: def fahjfcaafffieabcibfbfdfachefeijh(I):
  objs = objects(I, T, F, F)
  if len(objs) < 3: 
    return I # Handle cases with less than three objects
  sorted_objs = order(objs, lambda obj: (uppermost(obj), leftmost(obj)))
  obj1, obj2, obj3 = sorted_objs[:3]
  O = paint(paint(paint(canvas(0, shape(I)), recolor(1, obj1)),
                   recolor(2 if leftmost(obj2) < leftmost(obj3) else 3, obj2)), 
                   recolor(3 if leftmost(obj2) < leftmost(obj3) else 2, obj3))
  return O
 
14.0, tensor(0.5983), Description:
Color the object with the largest area red (color 1). Color the second largest object green (color 2) if it is to the left of the third largest object, otherwise color it blue (color 3). Color the third largest object blue (color 3) if it is to the left of the second largest object, otherwise color it green (color 2). If there are less than three objects, the second and third largest objects will be the same. 
:: def dccdiebabhaiegaibjeddhdhacejgccf(I):
  objs = objects(I, T, F, F)
  sorted_objs = order(objs, lambda obj: len(obj))
  obj1, obj2, *rest = sorted_objs # Unpack with rest to avoid errors
  obj3 = rest[0] if rest else obj2 # If less than 3 objects, obj3 = obj2
  O = paint(paint(paint(canvas(0, shape(I)), recolor(1, obj1)), 
                   recolor(2 if leftmost(obj2) < leftmost(obj3) else 3, obj2)), 
                   recolor(3 if leftmost(obj2) < leftmost(obj3) else 2, obj3))
  return O
 
99.0, tensor(0.5802), Description:
Color the top-left most object red (color 1) if it is above the second top-left most object, otherwise color it blue (color 3). Color the second top-left most object green (color 2) if it is above the third top-left most object, otherwise color it red (color 1). Color the third top-left most object blue (color 3) if it is above the first top-left most object, otherwise color it green (color 2). 
:: def fahcdgfhaajeebebbgbfgegdcchbddag(I):
  objs = objects(I, T, F, F)
  if len(objs) < 3:
    return I
  obj1 = min(objs, key=lambda obj: (uppermost(obj), leftmost(obj)))
  objs = remove(obj1, objs)
  obj2 = min(objs, key=lambda obj: (uppermost(obj), leftmost(obj)))
  obj3 = first(objs)
  O = paint(paint(paint(canvas(0, shape(I)), 
                       recolor(1 if uppermost(obj1) < uppermost(obj2) else 3, obj1)),
                   recolor(2 if uppermost(obj2) < uppermost(obj3) else 1, obj2)),
                   recolor(3 if uppermost(obj1) < uppermost(obj3) else 2, obj3))
  return O
 
8.666666666666666, tensor(1.2010), Description:
Color the largest object in the input grid red (color 1). Color the top-most object green (color 2). Color all other objects blue (color 3). 
:: def ihfbfdjicacieafhjaaagibbhebefaae(I):
  objs = objects(I, T, F, T)  # Get all objects, excluding background

  largest_obj = argmax(objs, lambda obj: len(obj)) # Find the largest object
  top_obj = argmin(objs, lambda obj: uppermost(obj)) # Find the top-most object

  remaining_objs = remove(largest_obj, objs)
  remaining_objs = remove(top_obj, remaining_objs)

  output = fill(I, 1, toindices(largest_obj))  # Fill largest with '1'
  output = fill(output, 2, toindices(top_obj))    # Fill top-most with '2'

  for obj in remaining_objs:                      # Fill remaining with '3'
      output = fill(output, 3, toindices(obj)) 
  return output
 
6.666666666666667, tensor(1.1386), Description:
Color the largest object in the input grid red (color 1). Color the second largest object green (color 2). Color the third largest object blue (color 3). If there are less than three objects, the second and third largest objects will be the same. The background color is the most common color in the input grid. 
:: def ijfgfdbcbjafeicgjaeibcfcbadbafga(I):
  objs = objects(I, T, F, T)  
  bg = mostcommon(sum(I, ())) 
  
  def sort_key(obj):
    return (len(obj), -uppermost(obj))  # Sort by size (descending), then uppermost (ascending)

  sorted_objs = sorted(objs, key=sort_key, reverse=True) # Sort objects
  
  output = canvas(bg, shape(I))

  labels = (1, 2, 3) 
  for i, obj in enumerate(sorted_objs):
    output = paint(output, recolor(labels[min(i, 2)], toindices(obj))) # Label based on sorted order

  return output
 
16.0, tensor(1.1172), Description: This code implements a connected component labeling algorithm. It iterates through the input grid, identifying connected components of non-zero pixels. Each connected component is assigned a unique label, starting from 1. If there is only one connected component, the output grid is filled with the original color of that component. Otherwise, the output grid is filled with these labels, representing the different connected components. 
:: def hgafgfgdbaggejjbjhgabbdeagebgaef(I):
  O = canvas(ZERO, shape(I))
  visited = set()
  label = 1
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if val != ZERO and (i, j) not in visited:
        obj = objects(crop(I, (i, j), (1, 1)), T, T, F)
        visited |= toindices(merge(obj))
        O = paint(O, recolor(label if len(visited) > 1 else val, merge(obj)))
        label += 1
  return O
 
12.0, tensor(0.7910), Description:
Color the objects in the input grid based on their position. The object that is the top-left most is colored 1, the second top-left most is colored 2, and so on. If an object has the same position as another object, it is colored with the same color. 
:: def baaacbceegfhedbeijcbehceaehegfce(I):
  O = canvas(ZERO, shape(I))
  objs = objects(I, T, T, F)
  obj_list = sorted(objs, key=lambda obj: min(i * 100 + j for v, (i, j) in obj))
  label = 1
  for i, obj in enumerate(obj_list):
    O = paint(O, recolor(label if i > 0 else color(obj), obj))
    label += 1 if i > 0 else 0
  return O
 
9.666666666666666, tensor(0.3374), Description:
Color the left-most object in the input grid blue (color 3). Color the top-most object red (color 1). Color all other objects green (color 2). 
:: def eddjeebiajdcefacbjiibdeeiiafjdeg(I):
    objs = objects(I, univalued=True, diagonal=False, without_bg=True)
    leftmost_obj = argmin(objs, leftmost) 
    topmost_obj = argmin(objs, uppermost)
    O = paint(I, recolor(THREE, toindices(leftmost_obj))) # Leftmost is 3
    O = paint(O, recolor(ONE, toindices(topmost_obj)))  # Topmost is 1
    O = paint(O, recolor(TWO, toindices(merge(objs - {leftmost_obj, topmost_obj})))) # Others are 2
    return O
 
10.0, tensor(0.3374), Description:
Color the left-most object in the input grid blue (color 3). Color the top-most object red (color 1). Color all other objects green (color 2). 
:: def acfbdbddgchdefajjdadcaiaechhbfcf(I):
    objs = objects(I, univalued=True, diagonal=False, without_bg=True)
    O = I
    for obj in objs:
        if leftmost(obj) == min(leftmost(o) for o in objs):
            O = paint(O, recolor(THREE, toindices(obj)))
        elif uppermost(obj) == min(uppermost(o) for o in objs):
            O = paint(O, recolor(ONE, toindices(obj)))
        else:
            O = paint(O, recolor(TWO, toindices(obj)))
    return O
 
8.666666666666666, tensor(0.3374), Description:
Color the left-most object in the input grid blue (color 3). Color the top-most object red (color 1). Color all other objects green (color 2). 
:: def jjgddjjhjhfeecbhbdajjcgcjfdffjcf(I):
    objs = objects(I, univalued=True, diagonal=False, without_bg=True)
    leftmost_obj =  merge(sfilter(objs, lambda obj: leftmost(obj) == min(leftmost(o) for o in objs)))
    topmost_obj = merge(sfilter(objs, lambda obj: uppermost(obj) == min(uppermost(o) for o in objs)))
    other_objs = objs - {leftmost_obj, topmost_obj}
    O = paint(I, recolor(THREE, toindices(leftmost_obj))) 
    O = paint(O, recolor(ONE, toindices(topmost_obj)))
    O = paint(O, recolor(TWO, toindices(merge(other_objs))))
    return O
 
12.333333333333334, tensor(1.0136), Description:
Color the largest object red (color 1). Color the second largest object blue (color 3) if it is below the third largest object, otherwise color it green (color 2). Color the third largest object green (color 2) if it is below the second largest object, otherwise color it blue (color 3). 
:: def eajbgffbebbdeaaciffadedibffdbcgi(I):
  objs = objects(I, T, F, F)
  objs = order(objs, lambda obj: len(obj))
  obj1, obj2, obj3 = objs[:3] 
  O = paint(paint(paint(canvas(0, shape(I)),
                       recolor(1, obj1)),
                   recolor(3 if uppermost(obj2) > uppermost(obj3) else 2, obj2)),
                   recolor(2 if uppermost(obj2) > uppermost(obj3) else 3, obj3))
  return O
 
15.0, tensor(0.9635), Description:
Color the largest object red (color 1) if it is above the second largest object, otherwise color it green (color 2). Color the second largest object green (color 2) if the largest object is above it, otherwise color it red (color 1). Color the third largest object blue (color 3). 
:: def dcaeadfhcieaebdfbhihcbdbgeabjgbg(I):
  objs = objects(I, T, F, F)
  objs = order(objs, lambda obj: len(obj))
  obj1, obj2, obj3 = objs[:3]
  cond = uppermost(obj1) < uppermost(obj2)
  O = paint(paint(paint(canvas(0, shape(I)), 
                       recolor(1 if cond else 2, obj1)), 
                   recolor(2 if cond else 1, obj2)), 
                   recolor(3, obj3))
  return O
 
11.666666666666666, tensor(1.1063), Description:
Color the largest object red (color 1), the second largest object green (color 2), and the third largest object blue (color 3). If there are less than three objects, the second and third largest objects will be the same. 
:: def ebjejdfahcceecaabeegbebdgcdbiebj(I):
  objs = objects(I, T, F, F)
  objs = order(objs, lambda obj: len(obj))
  obj1, obj2, obj3 = objs[:3]
  color_map = {color(obj1): 1, color(obj2): 2, color(obj3): 3} 
  O = paint(paint(paint(canvas(0, shape(I)),
                       recolor(color_map[color(obj1)], obj1)),
                   recolor(color_map[color(obj2)], obj2)),
                   recolor(color_map[color(obj3)], obj3))
  return O
 
12.333333333333334, tensor(0.9592), Description:
Color the objects in the input grid based on their order of appearance. The first object is colored 1, the second object is colored 2, and so on. 
:: def afffadabcbdbecbdjaaaffccbabaedfd(I):
    objs = objects(I, T, F, T) 
    O = canvas(ZERO, shape(I))
    label = 1
    for obj in objs:
        O = paint(O, recolor(label, obj))
        label += 1
    return O
 
10.0, tensor(0.5877), Description:
Color the top-most object in the input grid red (color 1). Color the bottom-most object green (color 2). Color all other objects blue (color 3). 
:: def bdeciehjcddfedchbgccjjafajbbchga(I):
    objs = objects(I, univalued=True, diagonal=False, without_bg=True)
    topmost_obj = argmin(objs, uppermost)
    bottommost_obj = argmax(objs, lowermost)
    O = paint(I, recolor(ONE, toindices(topmost_obj)))
    O = paint(O, recolor(TWO, toindices(bottommost_obj)))
    O = paint(O, recolor(THREE, toindices(merge(objs - {topmost_obj, bottommost_obj}))))
    return O
 
10.666666666666666, tensor(0.5877), Description:
Color the top-most object in the input grid red (color 1). Color the bottom-most object green (color 2). Color all other objects blue (color 3). 
:: def aacffefceicaeaagicbbeebbfddcjdde(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  O = I
  for obj in objs:
    if uppermost(obj) == min(map(uppermost, objs)):
      O = paint(O, recolor(ONE, toindices(obj)))
    elif lowermost(obj) == max(map(lowermost, objs)):
      O = paint(O, recolor(TWO, toindices(obj)))
    else:
      O = paint(O, recolor(THREE, toindices(obj)))
  return O
 
9.333333333333334, tensor(1.0758), Description:
Color the largest object in the input grid red (color 1), the second largest object green (color 2), and the third largest object blue (color 3). If there are less than three objects, the second and third largest objects will be the same. 
:: def aaejebefdbdeejcebaacahfaccbaicgb(I):
  objs = objects(I, T, F, T)  # Extract objects, excluding background
  sorted_objs = sorted(objs, key=size, reverse=True)  # Sort objects by size
  O = I  # Use input grid as the base
  for i, obj in enumerate(sorted_objs[:3]):  # Iterate over top 3 objects
    O = paint(O, recolor(i + 1, obj))  # Paint objects with 1, 2, 3
  return O
 
6.0, tensor(1.0758), Description:
Color the largest object in the input grid red (color 1), the second largest object green (color 2), and the third largest object blue (color 3). If there are less than three objects, the second and third largest objects will be the same. 
:: def gbdafbaaaeaceefdabcadcaieabifida(I):
  objs = objects(I, T, F, T)
  sizes = sorted(list({size(obj) for obj in objs}), reverse=True)  # Get unique object sizes
  O = I
  for i in range(min(3, len(sizes))):
    obj = extract(objs, lambda obj: size(obj) == sizes[i])  # Find object with current size
    O = paint(O, recolor(i + 1, obj))
  return O
 
99.0, tensor(1.0037), Description:
Color the largest object in the input grid red (color 1), the second largest object green (color 2), and the smallest object blue (color 3). 
:: def cdhbcffdbafceafbbgefaahifcceciai(I):
  objs = objects(I, T, F, F)
  objs = order(objs, size)
  largest = first(objs)
  second_largest = first(remove(largest, objs))
  smallest = last(objs)
  O = paint(paint(paint(canvas(0, shape(I)), recolor(1, largest)), recolor(2, second_largest)), recolor(3, smallest))
  return O
 
100.0, tensor(1.1163), Description:
Color the objects in the input grid based on their size. The largest object is colored 1, the second largest is colored 2, and so on. 
:: def jedieebjeheheaegiddecfbbdcjafcic(I):
  objs = order(objects(I, T, F, F), lambda obj: -len(obj)) 
  O = canvas(0, shape(I))
  for i, obj in enumerate(objs):
    O = paint(O, recolor(i + 1, obj))
  return O
 
96.66666666666667, tensor(1.0561), Description:
Color the largest object in the input grid red (color 1). Color the second largest object green (color 2). Color all other objects blue (color 3). 
:: def ecdaebebbfgbeddajaaaeacefcaigfaf(I):
  objs = objects(I, T, F, F)
  size_map = {obj: len(obj) for obj in objs}
  O = canvas(0, shape(I))
  for obj in objs:
    color = 1 if size_map[obj] == max(size_map.values()) else 2 if size_map[obj] == sorted(size_map.values())[-2] else 3
    O = paint(O, recolor(color, obj))
  return O
 
97.0, tensor(1.1225), Description:
Color the objects in the input grid based on their size. The smallest object is colored 3, the second smallest is colored 2, and the largest object is colored 1. 
:: def dijedfbcdajhehabahbdehfechgebaac(I):
  objs = sorted(objects(I, T, F, F), key=len)
  O = I
  for i, obj in enumerate(objs):
    O = paint(O, recolor(3 - i, obj))
  return O
 
8.333333333333334, tensor(0.9592), Description:
Color the objects in the input grid based on their order of appearance. The first object is colored 1, the second object is colored 2, and so on. 
:: def eabffdcaaedgejecbdfccbfbdegeefde(I):
  O = canvas(ZERO, shape(I))
  objs = fgpartition(I)  # Use fgpartition to get objects without background
  for label, obj in enumerate(objs, 1):
    O = paint(O, recolor(label, obj))
  return O
 
12.0, tensor(0.0815), Description:
Color the top-most object in the input grid red (color 1), the second top-most object green (color 2), and the third top-most object blue (color 3). If there are less than three objects, the second and third top-most objects will be the same. 
:: def chbdagbccbccefcbbhbjjdejiccgajbc(I):
  objs = sorted(objects(I, univalued=True, diagonal=False, without_bg=True), key=uppermost)
  O = I
  for i, obj in enumerate(objs[:3]):
    O = paint(O, recolor({0: ONE, 1: TWO, 2: THREE}[i], toindices(obj)))
  return O 
 
9.0, tensor(1.0404), Description:
Find the first object in the input grid that is not red (color 1) and has a gray (color 5) square in its top-left corner. Color this object red. Then, find the first object in the input grid that is not green (color 2) and has a gray (color 5) square in its top-left corner. Color this object green. Finally, find the first object in the input grid that is not blue (color 3) and has a gray (color 5) square in its top-left corner. Color this object blue. 
:: def bfegdcfbcbejeigdajejddccdfhchhcd(I):
  O = I
  for i, v in enumerate([ONE, TWO, THREE]):
    try:
      obj = next(obj for obj in objects(O, univalued=True, diagonal=False, without_bg=True) if color(obj) != v and index(O, (uppermost(obj), leftmost(obj))) == FIVE)
      O = paint(O, recolor(v, toindices(obj)))
    except:
      pass
  return O
 
12.0, tensor(0.0894), Description:
Color the top-left most object in the input grid red (color 1), the second top-left most object green (color 2), and the third top-left most object blue (color 3). If there are less than three objects, the second and third top-left most objects will be the same. 
:: def edajdjejjecfeiafjhdcadfeedegccic(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  top_objs = sorted(objs, key=lambda obj: (uppermost(obj), leftmost(obj)))[:3]
  O = I
  for i, obj in enumerate(top_objs):
    O = paint(O, recolor({0: ONE, 1: TWO, 2: THREE}[i], toindices(obj)))
  return O
 
14.0, tensor(1.1000), Description: Color the largest object in the input grid red (color 1), the second largest object green (color 2), and the third largest object blue (color 3). If there are less than three objects, the second and third largest objects will be the same. The background color is black (color 0). 
:: def gafedbfeaieaebefagaecidecedeagcc(I):
    objs = objects(I, T, F, T)
    
    # Sort objects by size
    sorted_objs = order(objs, size)
    
    # Extract the three largest objects
    largest = first(sorted_objs)
    second_largest = first(remove(largest, sorted_objs))
    third_largest = first(remove(second_largest, remove(largest, sorted_objs)))
    
    # Recolor objects
    I = replace(I, FIVE, ZERO)
    I = paint(I, recolor(ONE, largest))
    I = paint(I, recolor(TWO, second_largest))
    O = paint(I, recolor(THREE, third_largest))
    return O
 
8.333333333333334, tensor(1.0758), Description:
Color the largest object in the input grid red (color 1), the second largest object green (color 2), and the third largest object blue (color 3). If there are less than three objects, the second and third largest objects will be the same. 
:: def dddbfjccafjfegcajgdjcgjdghfghdaf(I):
  objs = objects(I, T, F, T)
  
  # Create a list to store object sizes and their corresponding colors
  size_color_map = []
  
  for obj in objs:
    size_color_map.append((size(obj), color(obj)))
  
  # Sort the list by object size in descending order
  size_color_map = order(size_color_map, lambda x: -x[0])
  
  # Get the colors of the three largest objects
  largest_color = size_color_map[0][1]
  second_largest_color = size_color_map[1][1]
  third_largest_color = size_color_map[2][1]
  
  # Recolor the grid based on object sizes
  I = replace(I, largest_color, ONE)
  I = replace(I, second_largest_color, TWO)
  O = replace(I, third_largest_color, THREE)
  return O
 
9.333333333333334, tensor(1.1000), Description: Color the largest object in the input grid red (color 1), the second largest object green (color 2), and the third largest object blue (color 3). If there are less than three objects, the second and third largest objects will be the same. The background color is black (color 0). 
:: def hebbjadeiidgebbfajdjbadaaaieeebb(I):
    objs = objects(I, T, F, T)
    
    largest = argmax(objs, size)
    rest = remove(largest, objs)
    second_largest = argmax(rest, size)
    third_largest = argmax(remove(second_largest, rest), size)
    
    O = paint(
        paint(
            paint(replace(I, FIVE, ZERO), recolor(ONE, largest)),
            recolor(TWO, second_largest)
        ),
        recolor(THREE, third_largest)
    )
    return O
 
0.0, tensor(1.0758), Description:
Color the largest object in the input grid red (color 1), the second largest object green (color 2), and the third largest object blue (color 3). If there are less than three objects, the second and third largest objects will be the same. 
:: def dhaaaadbgeffedbgidageeegcbafjeba(I):
  objs = objects(I, T, F, T)

  # Find the sizes of the three largest objects
  largest_size = valmax(objs, size)
  second_largest_size = valmax(sfilter(objs, lambda obj: size(obj) != largest_size), size)
  third_largest_size = valmax(sfilter(objs, lambda obj: size(obj) != largest_size and size(obj) != second_largest_size), size)

  # Recolor the grid based on object sizes
  O = I
  for obj in objs:
    if size(obj) == largest_size:
      O = paint(O, recolor(ONE, obj))
    elif size(obj) == second_largest_size:
      O = paint(O, recolor(TWO, obj))
    elif size(obj) == third_largest_size:
      O = paint(O, recolor(THREE, obj))
  return O
 
