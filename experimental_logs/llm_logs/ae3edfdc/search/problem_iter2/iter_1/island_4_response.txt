## Transformation Analysis:

The transformation takes all non-zero digits from the input grid and arranges them vertically at the horizontal center of the grid. The order of the digits is determined by their original vertical position, starting from the top row and moving downwards. The original spatial relationships between the digits are otherwise disregarded.

**Example:**

Input:
```
0 0 3 0
0 2 0 0
0 0 1 0
```

Output:
```
0 0 0 0
0 3 0 0
0 2 0 0
0 1 0 0
```


## Program Version 1:

**Code:**

```python
def program_v1(I):
  O = canvas(0, shape(I))
  digits = [(I[i][j], (i, j)) for i in range(len(I)) for j in range(len(I[0])) if I[i][j] != 0]
  h = 0
  for v, _ in digits:
    O = paint(O, {(v, (h, len(I[0]) // 2))})
    h += 1
  return O
```

**Explanation:**

1. **Initialization:** Create an empty canvas `O` with the same dimensions as the input `I`.
2. **Extract Digits:**  Iterate through the input grid and store all non-zero digits and their locations in the `digits` list.
3. **Vertical Arrangement:** Iterate through the `digits` list. For each digit `v`, paint it on the output canvas at a new row `h` and the middle column `len(I[0]) // 2`. Increment `h` for the next digit.

## Program Version 2:

**Code:**

```python
def program_v2(I):
  O = canvas(0, shape(I))
  non_zeros = [(i, j) for i in range(len(I)) for j in range(len(I[0])) if I[i][j] != 0]
  for h, (i, j) in enumerate(non_zeros):
    O = paint(O, {(I[i][j], (h, len(I[0]) // 2))})
  return O
```

**Explanation:**

1. **Initialization:** Create an empty canvas `O` with the same dimensions as input `I`.
2. **Find Non-Zero Cells:** Store the locations of all non-zero cells in the `non_zeros` list.
3. **Paint Digits:** Iterate through the `non_zeros` list. For each location `(i, j)`, extract the corresponding digit from the input grid `I` and paint it on the output canvas at a new row `h` and the middle column `len(I[0]) // 2`.

## Program Version 3:

**Code:**

```python
def program_v3(I):
  O = canvas(0, (sum(1 for r in I for v in r if v != 0), len(I[0])))
  h = 0
  for i, row in enumerate(I):
    for j, v in enumerate(row):
      if v != 0:
        O = paint(O, {(v, (h, len(I[0]) // 2))})
        h += 1
  return O
```

**Explanation:**

1. **Initialization:** Create an empty canvas `O` with height equal to the count of non-zero digits in the input and the same width as the input.
2. **Iterate and Paint:**  Iterate through each cell in the input grid. If the cell value is not zero, paint it on the output canvas at a new row `h` and the middle column, then increment `h`.

## Program Version 4:

**Code:**

```python
def program_v4(I):
  digits = [v for row in I for v in row if v != 0]
  h = len(digits)
  O = canvas(0, (h, len(I[0])))
  for i in range(h):
    O = paint(O, {(digits[i], (i, len(I[0]) // 2))})
  return O
```

**Explanation:**

1. **Extract Non-Zero Digits:**  Create a list `digits` containing all non-zero digits from the input grid.
2. **Initialization:** Create an empty canvas `O` with height equal to the number of non-zero digits and the same width as the input.
3. **Paint Digits:** Iterate through the `digits` list and paint each digit at a new row `i` and the middle column of the output canvas.

## Program Version 5:

**Code:**

```python
def program_v5(I):
  O = canvas(0, (sum(1 for v in r if v != 0 for r in I), len(I[0])))
  return paint(O, {(v, (h, len(I[0]) // 2)) for h, v in enumerate([v for row in I for v in row if v != 0])})
```

**Explanation:**

1. **Initialization:** Create an empty canvas `O` with height equal to the count of non-zero digits in the input and the same width as the input.
2. **One-liner Painting:**  Use a nested list comprehension to extract non-zero digits and their desired output locations, then paint them onto the canvas in a single `paint` function call.
