14.25, tensor(0.0412), Description: Change the color of all objects that are not touching the border or other objects to light blue. 
:: def hcffhdiahdgeeiagicbjihbeiigbgabh(I):
  objs = objects(I, T, T, F) 
  border_objs = mfilter(objs, lambda obj: bordering(obj, I)) # Identify objects touching the border
  connected_objs = mfilter(objs, lambda obj: any(adjacent(obj, other_obj) for other_obj in objs - {obj})) # Identify directly or diagonally connected objects
  unchanged_objs = border_objs | connected_objs # Combine border and connected objects
  transformed_objs = apply(lambda obj: recolor(EIGHT, obj), objs - unchanged_objs)  # Transform remaining (isolated) objects to '8's
  O = I
  for obj in transformed_objs:
    O = paint(O, obj)
  return O
 
6.75, tensor(0.0518), Description: Change the color of all '3's that are not adjacent to other '3's to light blue. 
:: def deiaffebfgbceceajceadaaaeieefbfa(I):
  threes = ofcolor(I, THREE) # Get indices of all '3's
  connected = mapply(neighbors, threes) # Find all indices adjacent to '3's
  isolated = threes - connected # Isolate '3' indices not adjacent to others
  eights = recolor(EIGHT, isolated) # Create an object of '8's at the isolated indices
  O = paint(I, eights)  # Paint the '8' object onto the input grid
  return O
 
13.75, tensor(0.0295), Description: Change the color of all objects that are touching the border to light blue. 
:: def bfbagcjbgcaiedfebgdedbacfbfdffid(I):
  x1 = objects(I, T, F, F)  # Extract objects (no diagonals, no background exclusion)
  x2 = lambda obj: any(i == 0 or j == 0 or i == len(I) - 1 or j == len(I[0]) - 1 for i, j in toindices(obj)) 
  x3 = sfilter(x1, x2)     # Filter for objects touching the border using a lambda function
  x4 = recolor(8, merge(x3)) # Recolor the merged border objects to '8'
  O = paint(I, x4)          # Paint the recolored objects onto the input grid
  return O
 
2.25, tensor(0.0480), Description: Change the color of all '3's that are touching the border to light blue. 
:: def bcbaeaaibddfedcgbaecaaeaddaibfhe(I):
  x1 = partition(I)         # Partition the grid into objects based on color
  x2 = rbind(bordering, I) # Function to check if an object is on the border
  x3 = sfilter(x1, x2)     # Filter for objects touching the border
  x4 = apply(lambda obj: recolor(8, obj) if color(obj) == 3 else obj, x3) # Recolor '3'-colored border objects to '8'
  O = paint(I, merge(x4))   # Paint the modified objects back onto the grid
  return O
 
3.75, tensor(0.0594), Description: Change the color of all '3's that have a neighbor outside the grid to light blue. 
:: def caijgeidigafebbdjegjibcechcgihgd(I):
  x1 = lambda loc: index(I, loc) == 3 and any(i < 0 or j < 0 or i >= len(I) or j >= len(I[0]) for i, j in neighbors(loc))
  x2 = asindices(I)       # Get indices of all cells in the grid
  x3 = sfilter(x2, x1)     # Filter for '3'-colored cells with a neighbor outside the grid
  O = fill(I, 8, x3)      # Fill the filtered cells with '8'
  return O
 
14.25, tensor(1.0938), Description: Change the color of all objects that are in the top row to light blue. 
:: def gbgdjbahddbjehaijhjddeaaaecgeecc(I):
  objs = objects(I, False, False, False)
  top_objs = sfilter(objs, lambda obj: uppermost(obj) == 0)
  merged_obj = merge(top_objs)
  recolored_obj = recolor(8, merged_obj)
  O = paint(I, recolored_obj)
  return O
 
3.0, tensor(1.0851), Description: Change the color of all '3's that are in the top row or adjacent to a '3' in the top row to light blue. 
:: def ceddahdhdfbbeeddbdjgbhddbfcjdjdc(I):
  h, w = len(I), len(I[0])
  top_indices = {(0, j) for j in range(w) if I[0][j] == 3}
  expanded_indices = set(top_indices)
  for i, j in top_indices:
    expanded_indices |= dneighbors((i, j))

  O = tuple(
      tuple(8 if (i, j) in expanded_indices and I[i][j] == 3 else I[i][j] for j in range(w))
       for i in range(h)
  )
  return O
 
2.25, tensor(0.0575), Description: Change the color of all '3's to light blue. 
:: def afacicfadgibeffcaibjbceicibadhha(I):
    indices_3 = ofcolor(I, THREE)
    obj = toobject(indices_3, I)
    recolored_obj = recolor(EIGHT, obj)
    O = paint(cover(I, obj), recolored_obj)
    return O
 
0.0, tensor(0.0361), Description: Change the color of all '3's that are adjacent to another '3' to light blue. 
:: def gbfeajccjacgeccdjbjiadjhfadaechb(I):
    O = I
    for i in range(len(I)):
      for j in range(len(I[0])):
        if I[i][j] == THREE:
          if any([I[k][l] == THREE for k, l in dneighbors((i, j)) if 0 <= k < len(I) and 0 <= l < len(I[0])]):
            O = fill(O, EIGHT, {(i, j)})
    return O
 
