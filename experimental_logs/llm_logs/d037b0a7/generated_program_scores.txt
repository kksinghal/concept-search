15.0, tensor(0.0075), Description: copy the first column of the input grid and paste it to the left of the input grid. 
:: def bjghfeefeghgefahjdgfbehfaeabeeig(I):
  return hconcat((I[0],), I)
 
3.0, tensor(0.0080), Description: Copy the first row of the input grid and paste it to every row of the output grid. 
:: def hcdifffjbgdjeaccjhdafcdbjcjbfeja(I):
  h = len(I)
  w = len(I[0])
  O = [[0 for _ in range(w)] for _ in range(h)]
  for i in range(h):
    for j in range(w):
      O[i][j] = I[0][j]
  return tuple(tuple(row) for row in O)
 
2.6666666666666665, tensor(0.0080), Description: Copy the first column of the input grid and paste it to every column of the output grid. 
:: def dbdhfcifabfeeajficebfaagiafjhfce(I):
  O = I
  for j in range(width(I)):
    O = fill(O, I[0][j], ((0, j), (height(I) - 1, j)))
  return O
 
1.0, tensor(0.1489), Description: For each column, find the first non-zero element and fill the rest of the column with that element. 
:: def ddehabefihidecahbbedcajcfcbifagf(grid):
  h = height(grid)
  w = width(grid)
  for j in range(w):
    for i in range(h):
      if grid[i][j] != 0:
        value = grid[i][j]
        grid = fill(grid, value, ((i,j),(h-1,j)))
        break
  return grid
 
5.333333333333333, tensor(0.0102), Description: For each row, find the first non-zero element and fill the rest of the row with that element. 
:: def caahgagaccdfedgebdjdebcdeieafdgb(grid):
  return tuple(tuple(next((grid[k][j] for k in range(i, height(grid)) if grid[k][j] != 0), 0) for j in range(width(grid))) for i in range(height(grid)))
 
0.0, tensor(0.0167), Description: For each colored shape in the input grid, extend the shape downwards by one square, using the same color. If the shape already touches the bottom of the grid, do nothing. 
:: def babbdibbfiieebefbcceacdahiadecfd(I):
  objs = objects(I, False, False, True)
  for obj in objs:
    bottom_right_corner = lrcorner(obj)
    bottom_i, bottom_j = bottom_right_corner
    if bottom_i < len(I) - 1:
      extension = frozenset({(color(obj), (i, bottom_j)) for i in range(bottom_i + 1, len(I))})
      obj = obj | extension
    I = paint(I, obj)
  return I
 
