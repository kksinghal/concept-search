23.333333333333332, 4.8713465, def cdfedffbcabaecdcibbcgicbbaaaafdf(I):
    """ Rotates the input grid 90 degrees counter-clockwise. """
    O = rot270(I)
    return O
 
21.333333333333332, 4.316336, def daaffbbgidhjeicfbadcfjijjbifdeea(I):
    """ Rotates the input grid by transposing and reversing each row. """
    x1 = dmirror(I)  # Transpose the grid
    O = tuple(tuple(row[::-1]) for row in x1)  # Reverse each row
    return O
 
25.333333333333332, 4.7365723, def ifhbdefdggieefadighcegcacabaahed(I):
    """ Rotates the grid by shifting each row and stacking them. """
    O = tuple()
    for j in range(len(I[0])):
        row = tuple(I[i][j] for i in range(len(I) - 1, -1, -1))
        O = (row,) + O
    return O
 
21.333333333333332, 4.316336, def ajchhaabddaeedeabecfdeeccdafbeee(I):
  O = rot90(I)
  return O
 
23.333333333333332, 4.8713465, def fgjabgeeacgbeaaaihcdafideahefeca(I):
  O = rot270(I)
  return O 
 
21.333333333333332, 4.316336, def cihedichaebfecadaejfbebfbbahcagc(I):
  O = tuple(zip(*I[::-1]))
  return O
 
21.333333333333332, 4.316336, def gedabjbfeccfebbcifbcbdjbdefgajff(I):
  """
  Rotates the input grid 90 degrees clockwise using rot90 function.
  """
  O = rot90(I)
  return O
 
23.333333333333332, 4.8713465, def ddaadgcbcfehehdbbefcgegjfhbbaeab(I):
  """
  Rotates the input grid 90 degrees clockwise by iterating through cells and reconstructing the grid.
  """
  h, w = len(I), len(I[0])
  O = tuple(tuple(I[j][w-i-1] for j in range(h)) for i in range(w))
  return O
 
23.333333333333332, 4.8713465, def bciacecgifdbeefajdgdhgfehibffhdf(I):
    O = rot270(I)
    return O
 
25.333333333333332, 4.534427, def hfjcabbhfbehedidbfaffdgdbcaicbai(I):
    O = vmirror(dmirror(hmirror(I)))
    return O
 
23.333333333333332, 4.8713465, def ddeadggbahfdebedjgidjeiddagbgddg(I):
  O = rot270(I)
  return O
 
25.333333333333332, 4.7365723, def ibifgcjhdiaiecheiafcegahfcbafidc(I):
  O = hmirror(rot90(I))
  return O
 
25.333333333333332, 4.534427, def bgcahfdgacjdebffjbeaebfdcjffiadh(I):
  O = rot270(vmirror(I))
  return O
 
19.333333333333332, 4.475607, def fjaaheeibjgieehgiebaaddehaeedaaf(I):
  min_index = argmin(interval(0, width(I), 1), lambda j: I[0][j])
  shifted_grid = tuple(r[min_index:] + r[:min_index] for r in I)
  return shifted_grid
 
18.666666666666668, 4.2900505, def bcefjeccfjaaefehjccdcgaggjfabbfg(I):
  shift_amount = argmin(I[0], lambda x: x)
  shifted_rows = apply(lambda r: r[shift_amount:] + r[:shift_amount], I)
  return tuple(shifted_rows)
 
24.333333333333332, 5.454091, def ddhbdaehcbcjehbdbcacdcgdbfbdabad(I):
  """ Rotates the grid 90 degrees clockwise with a column-based shift. """
  h, w = len(I), len(I[0])
  O = canvas(0, (w, h)) 
  for i in range(h):
    for j in range(w):
      O = fill(O, I[i][j], ((j, (i + j) % h),))
  return O
 
23.333333333333332, 5.8385115, def afaijbedigbceeeeifefgbchdefabbie(I):
    """ Rotates the grid by transposing and applying a custom shift function. """
    def shift_row(row, n):
        return row[-n:] + row[:-n]
    
    transposed = rot90(I)  # Counter-clockwise rotation is transpose then reverse rows
    O = tuple(shift_row(row, i) for i, row in enumerate(transposed))
    return O
 
23.666666666666668, 5.9067636, def dbdgcbadfegbeaebbacieidfdcicbecg(I):
    """ Rotates the grid using nested list comprehensions and modulo operation. """
    h, w = len(I), len(I[0])
    return tuple(
        tuple(I[(k - j) % h][j] for j in range(w))
        for k in range(h)
    )
 
22.0, 18.0388, def gehjcbedadebeafaaebbjdeacfjfdcbj(I):
  O = I
  for j in range(width(I)):
    O = move(O, toobject(asindices(hsplit(O, width(I))[j]), O), (0, index(I, (0, j))))
  return O
 
20.333333333333332, 32.460587, def fcdcibdjacjcefhfjdajieeadeechbih(I):
  O = canvas(mostcolor(I), shape(I))
  for j in range(width(I)):
    O = paint(O, shift(toobject(asindices(hsplit(I, width(I))[j]), I), (0, index(I, (0, j)))))
  return O
 
20.0, 4.886279, def fdcjgfeddhhdehchicacccbedcdddaaf(I):
  h, w = shape(I)
  O = tuple(tuple(I[i][(j + index(I, (0, j))) % w] for j in range(w)) for i in range(h))
  return O
 
22.333333333333332, 12.404309, def dabiccadicfeejdcifjcfgafgeeehied(I):
  O = I
  for _ in range(height(I)):
    for j in range(width(I)-1, 0, -1):
      value = index(O, (0, j))
      O = move(O, toobject(asindices(hsplit(O, width(O))[j]), O), (0, value))
  return O
 
21.333333333333332, 5.0577755, def edhbbeccjdjiejbdiaghgeffcihfadjf(I):
  O = tuple(tuple(I[i][(j - index(I, (0, j))) % width(I)] for j in range(width(I))) for i in range(height(I)))
  return O
 
13.333333333333334, 3.7982044, def cebfdihfdfededbebhbfafadddgjafda(I):
  min_index = argmin(interval(0, width(I), 1), lambda j: I[0][j])
  shifted_grid = tuple(r[min_index:] + r[:min_index] for r in I)
  return vmirror(shifted_grid)
 
25.333333333333332, 6.5889916, def ifcefbbjbdddebidifeibeadecddiddb(I):
  """ Rotates the grid counterclockwise and shifts each row. """
  return tuple(
      tuple(rot90(I)[j][(i + j) % len(rot90(I))] for j in range(len(I[0])))
      for i in range(len(I))
  )
 
23.666666666666668, 6.0725193, def bfbeefbdfdbcefcaabeiaaeideddbjfj(I):
  """ Uses nested function for shifting and applies it after rotation. """
  def shift_left(row, n):
    return row[n:] + row[:n]
  
  return tuple(shift_left(row, i) for i, row in enumerate(rot90(I)))
 
25.333333333333332, 4.534427, def cfbdbggjfdeaecffidjeaccfebdfjiee(I):
  O = vmirror(dmirror(hmirror(I)))
  return O
 
0.0, 0.0, def gaehfadbadieeedcahcibaadbcabajef(I):
  return rot90(dmirror(I))
 
