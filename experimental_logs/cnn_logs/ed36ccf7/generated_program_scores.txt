5.5, 16.236074, def fdfcjfgaeebaeifaibgdjbeebeahbcfc(I):
    # 1. Partition the grid into objects
    objs = partition(I)
    # 2. Find the smallest object
    smallest_obj = argmin(objs, size)
    # 3. Get the color of the smallest object
    target_color = color(smallest_obj)
    # 4. Recolor all objects except the smallest one 
    recolored_objs = frozenset({recolor(target_color, obj) if obj != smallest_obj else obj for obj in objs})
    # 5. Paint the recolored objects onto the original grid
    O = paint(I, merge(recolored_objs))
    return O
 
4.0, 3.140549, def fbafeehieecaedafaaccfjiahcgaijbb(I):
  target_color = leastcolor(I)  # Identify the target object by its color
  obj = first(colorfilter(objects(I, T, F, F), target_color))  # Extract the target object
  if portrait(obj):
    mirrored_obj = vmirror(obj)  # Vertical mirroring for portrait objects
  else:
    mirrored_obj = hmirror(obj)  # Horizontal mirroring for landscape objects
  O = paint(cover(I, obj), mirrored_obj)  # Paint the mirrored object onto a clean canvas
  return O
 
5.5, 16.236074, def dbchfiafbcgeeedebgdeddaeaedaeecc(I):
  target_color = leastcolor(I)
  is_vertical = portrait(first(colorfilter(objects(I, T, F, F), target_color)))
  O = branch(is_vertical, lambda x: vmirror(x), lambda x: hmirror(x))(replace(I, target_color, 7))
  O = replace(O, 7, mostcolor(I))
  O = replace(O, mostcolor(O), target_color)
  return O
 
4.0, 7.800457, def abcbdbdbcedaedidjaeicccgafeddeee(I):
  obj = argmax(objects(I, T, F, F), size)
  bg = mostcolor(I)
  obj_color = color(obj)
  if portrait(obj):
    O = paint(canvas(bg, shape(I)), vmirror(recolor(bg, obj)))
  else:
    O = paint(canvas(bg, shape(I)), hmirror(recolor(bg, obj)))
  O = paint(O, recolor(obj_color, obj))
  return O
 
4.75, 10.064335, def ijhgdbacacbaefbgahfbffjfjccdehfb(I):
  target_color = leastcolor(I)
  objs = objects(I, T, F, F)
  obj = first(colorfilter(objs, target_color))
  bg = mostcolor(I)
  mirrored_obj = branch(portrait(obj), vmirror, hmirror)(obj)
  O = paint(canvas(bg, shape(I)), mirrored_obj)
  if target_color == bg:
    O = paint(O, first(colorfilter(objs, other(palette(I), bg))))
  else:
    O = paint(O, recolor(target_color, first(colorfilter(objs, bg))))
  return O
 
4.0, 4.66468, def dbciabjhgifhedfajeaicccbjejfjchg(I):
  objs = objects(I, T, F, F)
  transformed_objs = set()
  for obj in objs:
    h = height(obj)
    w = width(obj)
    new_obj = {(color(obj), (i, j)) for i in range(h) for j in range(w) if (i == 0 or j == 0 or j == w - 1)}
    transformed_objs.add(frozenset(new_obj))
  O = paint(I, merge(transformed_objs))
  return O
 
3.75, 3.5850732, def hidehhcdfgdaechdjdfcdaidcbajcbdg(I):
  return paint(I, mapply(lambda obj: shift(obj, (size(obj) // 3, 0)), objects(I, T, F, F))) 
 
4.0, 3.7363222, def dhegadaaebebejdfbefcbaccbecebebf(I):
  objs = objects(I, T, F, F)
  transformed_objs = set()
  for obj in objs:
    h = height(obj)
    w = width(obj)
    new_obj = {(color(obj), (i, j)) for i in range(h) for j in range(w) if i == h - 1 or j == w - 1 or (i == 0 and j == 0)}
    transformed_objs.add(frozenset(new_obj))
  O = paint(I, merge(transformed_objs))
  return O
 
3.5, 10.2578535, def bdbfajfefibaehefjbhfadjhdaeaabdb(I):
  O = I # Initialize output grid
  for color in palette(I):
    obj = toobject(ofcolor(I, color), I)
    if uppermost(obj) == 0:
      O = move(O, obj, (0,1)) # Shift right if at the top
    elif leftmost(obj) == 0:
      O = move(O, obj, (1,0)) # Shift down if at the left edge
    elif lowermost(obj) == len(I) - 1:
      O = move(O, obj, (0,-1)) # Shift left if at the bottom
    elif rightmost(obj) == len(I[0]) - 1:
      O = move(O, obj, (-1,0)) # Shift up if at the right edge
  return O
 
0.0, 0.0, def achcacedefdbediebaaggefhcefcacae(I):
  if uppermost(asobject(I)) == 0:
    return rot270(I)
  elif leftmost(asobject(I)) == 0:
    return rot90(I)
  elif lowermost(asobject(I)) == len(I)-1:
    return rot90(I)
  elif rightmost(asobject(I)) == len(I[0])-1:
    return rot270(I)
  return I
 
