43.474426def dahajfaccjhdefaabgfgabbcbjdbfjba(I):
  # Partition based on color
  objs = partition(I)
  obj1 = extract(objs, matcher(color, leastcolor(I)))
  obj2 = other(objs, obj1)
  
  # Create output by vertically concatenating the objects
  O = vconcat(
      crop(canvas(0, shape(I)), (0, 0), (height(obj2), width(I))), 
      crop(canvas(0, shape(I)), (height(obj2), 0), (height(obj1), width(I)))
  )
  return paint(paint(O, obj2), shift(obj1, (height(obj2), 0)))

13.294391def fhaaiccegieeefcaifaaaacbbjcdejeg(I):
  # Find objects based on unique colors
  p = palette(I)
  obj1 = toobject(ofcolor(I, first(p)), I)
  obj2 = toobject(ofcolor(I, other(p, first(p))), I)
  
  # Determine the destination rows based on object heights
  h1, h2 = height(obj1), height(obj2)
  row1 = len(I) - h1
  row2 = 0

  # Move the objects 
  O = move(move(I, obj1, (row1 - uppermost(obj1), 0)), obj2, (row2 - uppermost(obj2), 0))
  return O

16.78334def edbejeajijejeafiadicdcbfhefjehfc(I):
  # Directly move objects based on color
  c1 = leastcolor(I)
  c2 = other(palette(I), c1)
  O = I
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if val == c1:
        O = move(O, {(val, (i, j))}, (len(I) - height(toindices(ofcolor(I, c1))), 0))
      elif val == c2:
        O = move(O, {(val, (i, j))}, (-uppermost(toindices(ofcolor(I, c2))), 0))
  return O

50.54659def bjcaeefbbbaaeecciefecejcafeachff(I):
  # Split, filter, and combine
  top = canvas(0, (height(toindices(ofcolor(I, other(palette(I), leastcolor(I))))), width(I)))
  bottom = canvas(0, (height(toindices(ofcolor(I, leastcolor(I)))), width(I)))
  O = vconcat(top, bottom)
  return paint(paint(O, toobject(ofcolor(I, other(palette(I), leastcolor(I))), I)), shift(toobject(ofcolor(I, leastcolor(I)), I), (height(top), 0)))

41.61748def egebhfdcacifebfaajfidddfffeagfjd(I):
    objs = objects(I, F, T, T)
    bg = mostcolor(I)
    h = height(I)
    new_objs = []
    for i, obj in enumerate(sorted(objs, key=lambda obj: uppermost(obj))):
        new_objs.append(shift(obj, (h - height(obj) - i * height(obj), 0)))
    O = paint(canvas(bg, shape(I)), merge(new_objs))
    return O

26.31164def iaebicdcdacfeihcbdbgfcbacfdehdhf(I):
  objs = objects(I, F, T, T)
  h = height(I)
  O = I
  for i, obj in enumerate(sorted(objs, key=lambda x: -uppermost(x))):
    O = paint(cover(O, obj), shift(obj, (h - height(obj) * (i + 1), 0)))
  return O

39.375725def fcdeichdaedceaddahdcgcdigdedgbdb(I):
  bg = mostcolor(I)
  objs = sorted(objects(I, F, T, T), key=lambda x: uppermost(x))
  O = canvas(bg, shape(I))
  bottom = height(I)
  for obj in objs:
    O = paint(O, shift(obj, (bottom - height(obj), 0)))
    bottom -= height(obj)
  return O 

25.673504def eadcbfifjefcegifiedhaaegcggfhedi(I):
  objs = sorted(objects(I, F, T, T), key=lambda x: -uppermost(x))
  O = I
  offset = 0
  for i, obj in enumerate(objs):
    O = paint(cover(O, obj), shift(obj, (height(I) - height(obj) - offset, 0)))
    offset += height(obj)
  return O

14.191591def dfccafijaaccedjajeacdbfaeacefaid(I):
    objs = fgpartition(I)  # Identify all objects
    h = height(I)  # Get grid height
    sorted_objs = order(objs, lambda obj: uppermost(obj))  # Sort objects by uppermost row
    shifted_objs = apply(lambda obj: shift(obj, (h - height(obj) - uppermost(obj), 0)), sorted_objs)  # Shift each object to the bottom
    O = paint(I, merge(shifted_objs))  # Paint the shifted objects onto the input grid
    return O 

39.375725def ffegaiajabfbebgbjdbjafcbbfbbahci(I):
    objs = order(fgpartition(I), lambda obj: uppermost(obj))  # Identify & sort objects by top row
    O = canvas(mostcolor(I), shape(I))  # Create an empty canvas
    current_height = height(I)  # Start from the bottom row
    for obj in objs:
        obj_height = height(obj)  # Get the height of the current object
        O = paint(O, shift(obj, (current_height - obj_height, 0)))  # Paint the object at the bottom
        current_height -= obj_height  # Update the current height
    return O

12.065797def ceagfhhaagiaedaaiaibcbdbecagcagd(I):
    objs = fgpartition(I)  # Identify objects
    O = canvas(mostcolor(I), shape(I))  # Create an empty canvas
    for i in range(height(I) - 1, -1, -1):  # Iterate through rows from bottom to top
        row_objs = sfilter(objs, lambda obj: uppermost(obj) == i)  # Find objects starting at current row
        if row_objs:
            O = paint(O, merge(apply(lambda obj: shift(obj, (i - uppermost(obj), 0)), row_objs)))  # Paint objects to their bottom positions
    return O

32.084244def feciiidgdaidebdaigdabfhghahbfagc(I):
    h, w = shape(I)  # Get grid dimensions
    O = canvas(mostcolor(I), (h, w))  # Create an empty canvas
    for j in range(w):  # Iterate through columns
        column_obj = frozenset((I[i][j], (i, j)) for i in range(h) if I[i][j] != mostcolor(I))  # Get the object in the current column
        if column_obj:
            O = paint(O, shift(column_obj, (h - height(column_obj), 0)))  # Shift the column object to the bottom and paint it
    return O

21.098206def gbihedabedabeaiejcaacdffcajfhhgc(I):
  objs = objects(I, T, F, T)
  h = height(I)
  moved_objs = frozenset({shift(obj, (h - uppermost(obj) - height(obj), 0)) for obj in objs})
  O = paint(canvas(mostcolor(I), shape(I)), merge(moved_objs))
  return O

21.477991def ddbfafacdcececjbachfdcdcdfdciaea(I):
  bg = mostcolor(I)
  filled = fill(I, bg, asindices(I))
  objs = objects(I, T, F, T)
  bottom_y = height(I) - 1
  moved_objs = {frozenset({(v, (bottom_y - i + uppermost(obj), j)) for v, (i, j) in obj}) for obj in objs}
  O = paint(filled, merge(moved_objs))
  return O

21.43018def caieeeififehegfabbbjchfiddegffji(I):
  objs = objects(I, T, F, T)
  sorted_objs = order(objs, lambda obj: -uppermost(obj))
  O = I
  for obj in sorted_objs:
    O = move(O, obj, (height(I) - uppermost(obj) - height(obj), 0))
  return O

31.119171def jdgcaafaefcfeddjiaihcejeaebehefd(I):
    objs = objects(I, T, F, T)
    return paint(canvas(ZERO, shape(I)), frozenset((v, add((i, j), (height(I) - lowermost(obj), 0))) for obj in objs for v, (i, j) in obj))

41.42614def dhecabcgbfbeebdhjjeaiefacbiefdfa(I):
  objs = objects(I, T, F, T)
  O = canvas(ZERO, shape(I))
  current_right = 0
  for obj in order(objs, lambda obj: -lowermost(obj)):  # Sort by bottom row
    h = height(obj)
    w = width(obj)
    O = paint(O, shift(obj, (len(I) - h, current_right)))  # Place at bottom, update right edge
    current_right += w  # Update rightmost position for next object 
  return O

41.87718def jiffbiabadciedfdjehbhhajcbefedbb(I):
  objs = objects(I, T, F, T)
  O = canvas(ZERO, shape(I))
  right_edge = 0
  for obj in objs:
    obj_width = width(obj)
    O = paint(O, shift(obj, (len(I) - height(obj), right_edge)))
    right_edge += obj_width
  return O

52.397247def aedffdeafjgheefebjfeafdacffabebc(I):
    # Identify and separate objects based on color in a single iteration
    obj1_indices = set()
    obj2_indices = set()
    c1 = leastcolor(I)
    for i, row in enumerate(I):
        for j, v in enumerate(row):
            if v == c1:
                obj1_indices.add((i, j))
            else:
                obj2_indices.add((i, j))

    # Calculate dimensions and positions
    obj1_h = max([i for i, _ in obj1_indices]) - min([i for i, _ in obj1_indices]) + 1
    obj1_w = max([j for _, j in obj1_indices]) - min([j for _, j in obj1_indices]) + 1
    obj2_h = max([i for i, _ in obj2_indices]) - min([i for i, _ in obj2_indices]) + 1
    obj2_w = max([j for _, j in obj2_indices]) - min([j for _, j in obj2_indices]) + 1

    obj1_pos = (len(I) - obj1_h, 0)
    obj2_pos = ((len(I) - obj2_h) // 2, (len(I[0]) - obj2_w) // 2)

    # Construct the output grid
    O = canvas(0, shape(I))
    for i, j in obj1_indices:
        O = fill(O, c1, {(i + obj1_pos[0], j + obj1_pos[1])})
    for i, j in obj2_indices:
        O = fill(O, other(palette(I), c1), {(i + obj2_pos[0], j + obj2_pos[1])})

    return O

42.026466def ehadcbijdidfegffjcfhgdbhbajbccfb(I):
  bg = mostcolor(I)
  objs = objects(I, False, True, True)
  shifted_objs = frozenset({shift(obj, (height(I) - uppermost(obj) - 1, 0)) for obj in objs})
  O = paint(canvas(bg, shape(I)), merge(shifted_objs))
  return O

16.017544def gfedfbdhfagceabiabaaidcgdhdfcgff(I):
    bg = mostcolor(I)
    O = tuple()
    non_bg_rows = tuple()
    for row in I:
        if any(v != bg for v in row):
            non_bg_rows += (row,)
        else:
            O += (row,)
    O += non_bg_rows
    return O 

15.683053def bcaicecdfghfehffieeaaiegeegceehd(I):
  bg = mostcolor(I)
  h = height(I)
  objs = objects(I, False, True, True)
  bottom_frontier = frozenset((h - 1, j) for j in range(width(I)))
  O = I
  for obj in objs:
    O = move(O, obj, gravitate(obj, bottom_frontier))
  return O

13.976378def dgefihdgeeehebdeafdbeffefdfgicda(I):
  bg = mostcolor(I)
  objs = objects(I, False, True, True)
  O = canvas(bg, shape(I))
  y = height(I)
  for obj in objs:
    shifted_obj = shift(obj, (y - uppermost(obj) - height(obj), 0))
    O = paint(O, shifted_obj)
    y -= height(obj)
  return O

21.088112def geaebcdjfeageafdaaefdcecdijgdfaf(I):
  h = height(I)
  return paint(
      canvas(ZERO, shape(I)),  # Create a blank canvas.
      frozenset({(v, (h - lowermost(obj) + i - 1, j)) for obj in objects(I, T, F, T) for v, (i, j) in obj})  # Calculate new cell positions for painting.
  )

28.882156def abijgadcfefbedhjaahdidjejiffcbbb(I):
    return tuple(
        tuple(
            I[i + (height(I) - height(compress(I)))][j] if i + (height(I) - height(compress(I))) < height(I) else 0 
            for j in range(width(I))
        )
        for i in range(height(I))
    )

14.903043def abfficdbcejiecbficdbdfjdbdheiiac(I):
  objs = objects(I, T, F, T)  # Identify all objects
  sorted_objs = order(objs, lambda obj: -lowermost(obj)) # Sort by bottom row
  O = canvas(ZERO, shape(I))  # Create empty canvas
  current_height = height(I) # Start placing from the bottom
  for obj in sorted_objs:
    O = paint(O, shift(obj, (current_height - height(obj) - uppermost(obj), 0))) # Place object at the bottom
    current_height -= height(obj) # Update current height
  return O

21.43018def jgibedbcbdideheijeejajeefigefbdd(I):
  objs = objects(I, T, F, T)
  placed_objs = initset(())  # Initialize set of placed objects
  O = I
  for i in range(len(I) - 1, -1, -1):
    for j in range(len(I[0])):
      if (i, j) in toindices(merge(objs)) and (i, j) not in toindices(merge(placed_objs)):
        obj = extract(objs, lambda obj: (i, j) in toindices(obj)) # Find the object at this location
        O = paint(cover(O, obj), shift(obj, (len(I) - height(obj) - uppermost(obj), 0))) # Move object to bottom
        placed_objs = insert(obj, placed_objs)  # Add to placed objects
  return O

22.81413def acdbbebediddedgjibbbadehbejabfae(I):
    objs = objects(I, T, F, T)
    O = canvas(ZERO, shape(I)) # Create empty canvas
    bottom = height(I)  # Get the bottom row index
    for obj in objs:
        offset = (bottom - lowermost(obj), 0) # Calculate vertical offset
        O = paint(O, shift(obj, offset))  # Shift and paint
        bottom = uppermost(shift(obj, offset)) # Update bottom for the next object
    return O

15.683053def ejacahdhgffeehjdaieaacggaeaibfgb(I):
    objs = objects(I, T, F, T)
    bottom_line = frozenset((len(I) - 1, j) for j in range(len(I[0]))) # Indices of the bottom row
    O = I
    for obj in objs:
        O = paint(cover(O, obj), shift(obj, gravitate(toindices(obj), bottom_line)))  # Gravitate to bottom row
    return O

21.440563def ihhadffeefjceibejdcgaddieddfebef(I):
  objs = objects(I, T, F, T)
  max_height = valmax(objs, height)  # Find the height of the tallest object
  O = canvas(ZERO, (len(I) + max_height, len(I[0]))) # Create an extended canvas
  O = paint(O, shift(asobject(I), (max_height, 0))) # Paint the input onto the extended canvas
  O = paint(cover(O, asobject(I)), shift(asobject(I), (-max_height, 0))) # Shift the painted input downwards
  return O

21.501308def eehjdbdcedjfeheeaagcacccccachged(I):
  bg = mostcolor(I)
  objs = sorted(fgpartition(I), key=lambda obj: uppermost(obj))  # Sort objects by their topmost row
  O = canvas(bg, shape(I))
  for obj in objs:
    O = paint(O, shift(obj, (height(I) - 1 - lowermost(obj), 0)))  # Paint objects from top to bottom
  return O

41.464def hcaeabhdbdfdegcfjgjfdaedbdebfiic(I):
  h = height(I)
  transposed = dmirror(I)  # Transpose the grid
  compressed = compress(transposed)  # Remove empty rows (originally columns)
  O = dmirror(vconcat(compressed, canvas(mostcolor(I), (h - height(compressed), width(compressed)))))  # Add back empty rows and transpose back
  return O

37.09247def bggbdefdgggaebcfiacffdheahfdcahf(I):
  # Find the least common color
  least_color = leastcolor(I)
  
  # Extract objects based on color
  least_color_obj = toobject(extract(objects(I, True, False, False), lambda obj: color(obj) == least_color), I)
  other_objs = toobject(extract(objects(I, True, False, False), lambda obj: color(obj) != least_color), I)

  # Calculate object dimensions
  least_h, least_w = shape(least_color_obj)
  other_h, other_w = shape(other_objs)

  # Calculate new positions
  least_pos = (len(I) - least_h, 0)
  other_pos = ((len(I) - other_h) // 2, (len(I[0]) - other_w) // 2) 

  # Construct the output grid
  O = paint(paint(canvas(0, shape(I)), shift(least_color_obj, least_pos)), shift(other_objs, other_pos))
  return O

52.397247def fdbfhccabjhcecfgicbjdbgbcdeagafa(I):
  bg = mostcolor(I)
  indices = asindices(I)
  bg_indices = frozenset((i, j) for i, r in enumerate(I) for j, v in enumerate(r) if v == bg)
  obj_indices = indices - bg_indices
  obj = toobject(obj_indices, I)
  O = paint(fill(I, bg, indices), shift(obj, (height(I) - 1, 0)))
  return O 

17.31205def ejcdabdgdccaeifbjgeeciajchhgbbef(I):
    objs = objects(I, T, F, T)
    bg = mostcolor(I)
    h = height(I)
    moved_objs = set()
    for obj in objs:
        lowest = lowermost(obj)
        for i in range(1, h - lowest):
            shifted = shift(obj, (i, 0))
            if len(intersection(toindices(shifted), merge(moved_objs))) == 0 and lowermost(shifted) < h:
                obj = shifted
            else:
                break
        moved_objs.add(obj)
    O = paint(canvas(bg, shape(I)), merge(moved_objs))
    return O

12.219608def bhebjhbeaaddejebjhaheigbgafhfbac(I):
    objs = objects(I, T, F, T)
    bg = mostcolor(I)
    h = height(I)
    O = canvas(bg, shape(I))
    for obj in sorted(objs, key=uppermost):
        temp_grid = paint(O, obj)
        for i in range(1, h):
            shifted = shift(obj, (i, 0))
            if lowermost(shifted) < h and index(temp_grid, (uppermost(shifted), leftmost(shifted))) == bg:
                temp_grid = move(temp_grid, obj, (i, 0))
            else:
                break
        O = temp_grid
    return O

12.065797def bchjcibdejaiefjdjcdeahedfcbcceae(I):
  objs = objects(I, T, F, T)
  bg = mostcolor(I)
  h = height(I)
  new_grid = canvas(bg, shape(I))
  for obj in sorted(objs, key=lambda obj: -uppermost(obj)):
    for dy in range(h):
      shifted_obj = shift(obj, (dy, 0))
      if lowermost(shifted_obj) < h and not any(len(intersection(toindices(shifted_obj), toindices(other_obj))) > 0 for other_obj in objs if other_obj != obj):
        new_grid = paint(new_grid, shifted_obj)
        break
  O = new_grid
  return O

21.43018def fbafchecddgeebfhidedhbdecaifdfei(I):
  bg = mostcolor(I)  # Identify the background color
  O = canvas(bg, shape(I))  # Create a canvas filled with the background color
  for obj in fgpartition(I):  # Iterate over foreground objects
    new_obj = shift(obj, (height(I) - height(obj) - uppermost(obj), 0))  # Calculate and apply downward shift
    O = paint(O, new_obj)  # Paint the shifted object onto the canvas
  return O

12.98403def ccbgbfjhebcaejhabeehjfeeedbfjcdc(I):
  bg = mostcolor(I)
  h = height(I)
  return tuple(
    tuple(next((v for v, (i, k) in asobject(I) if k == j and i == h - row - 1 and v != bg), bg) for j in range(len(I[0])))
    for row in range(h)
  )

18.396618def dabefgjbcfgaehicicacbbeececjdbgf(I):
    output = []
    bg = mostcolor(I)
    for j in range(len(I[0])):  # Iterate over columns
        column = [I[i][j] for i in range(len(I))]  # Extract the column
        fg_indices = [i for i, v in enumerate(column) if v != bg]  # Find foreground indices
        new_column = [bg] * len(column)  # Initialize new column with background
        for k, idx in enumerate(fg_indices):
            new_column[len(column) - len(fg_indices) + k] = column[idx]  # Place foreground at the bottom
        output.append(new_column)
    return tuple(tuple(row) for row in rot90(output))  # Rotate back to original orientation

27.372128def bbaecacafaiaeiccadcdffacgfeebdhf(I):
  # Directly extract object indices based on color
  obj1 = toindices(extract(objects(I, True, False, False), lambda obj: color(obj) == leastcolor(I)))
  obj2 = difference(asindices(I), obj1) # Everything else is the other object(s)

  # Calculate dimensions and new positions 
  h1, w1 = shape(obj1)
  h2, w2 = shape(obj2)
  pos1 = (len(I) - h1, 0)
  pos2 = ((len(I) - h2) // 2, (len(I[0]) - w2) // 2)

  # Construct output grid using paint and shift directly on indices
  O = paint(paint(canvas(0, shape(I)), shift(recolor(1, obj1), pos1)), shift(recolor(2, obj2), pos2))
  return O

24.403051def cegdfdgfhbfgeiefabebcgieieeaaage(I):
  # Define a lambda function to extract objects based on a color condition
  extract_obj = lambda color_condition: toindices(extract(objects(I, True, False, False), lambda obj: color_condition(obj)))

  # Extract objects using the lambda function
  least_color_obj = extract_obj(lambda obj: color(obj) == leastcolor(I))
  other_objs = extract_obj(lambda obj: color(obj) != leastcolor(I))

  # Define a lambda function for repositioning based on object type
  reposition = lambda obj, is_least: shift(obj, (len(I) - height(obj), 0)) if is_least else shift(obj, ((len(I) - height(obj)) // 2, (len(I[0]) - width(obj)) // 2))

  # Reposition the objects
  obj1_new = reposition(least_color_obj, True)
  obj2_new = reposition(other_objs, False)

  # Construct the output grid
  O = paint(paint(canvas(0, shape(I)), recolor(1, obj1_new)), recolor(2, obj2_new))
  return O

44.096962def jbgfcafjfaidebfeideeedagadefdaid(I):
  # Identify least common color
  least_color = leastcolor(I) 

  # Define a lambda function to calculate the new position based on object and grid dimensions
  calculate_position = lambda obj, is_least: (len(I) - height(obj), 0) if is_least else ((len(I) - height(obj)) // 2, (len(I[0]) - width(obj)) // 2) 

  # Construct the output grid by iterating over objects
  O = canvas(mostcolor(I), shape(I))  
  for obj in objects(I, True, False, False):
    is_least_color_obj = color(obj) == least_color
    O = paint(O, shift(obj, calculate_position(toindices(obj), is_least_color_obj))) 
  return O

13.204129def idihibajdaedebchbdddaijbafebbfjj(I):
  bg = mostcolor(I)
  obj_indices = difference(asindices(I), ofcolor(I, bg))
  shifted_indices = frozenset((height(I) - 1 - i, j) for i, j in obj_indices)
  O = fill(canvas(bg, shape(I)), 1, shifted_indices)
  return O

46.458324def fcebcibiciceeecbjbgchadcfhjacfad(I):
  bg = mostcolor(I)
  h = height(I)
  O = tuple(tuple(branch((i, j) in {(h - 1 - k, j) for k, l in ofcolor(I, v) for v in palette(I) - {bg}}, v, bg) for j, v in enumerate(row)) for i, row in enumerate(I))
  return O

31.379087def hcdijcfbeafbeciijhcbdfacggdeehge(I):
  objs = objects(I, T, F, T)
  bg = mostcolor(I)
  h, w = shape(I)
  O = canvas(bg, (h, w))
  for obj in objs:
    O = paint(O, shift(obj, (h - lowermost(obj), 0)))
  return O

24.398289def efbgdgcgbceeedbdibecibhfedbifjbd(I):
  objs = sorted(objects(I, T, F, T), key=lambda obj: uppermost(obj))
  bg = mostcolor(I)
  h, w = shape(I)
  O = canvas(bg, (h, w))
  for i, obj in enumerate(objs):
    O = paint(O, shift(obj, (h - lowermost(obj) - i, 0)))
  return O

13.149296def haibfadghaagejhhiabcdbahfjbdbeaf(I):
  objs = objects(I, T, F, T)
  bg = mostcolor(I)
  h, w = shape(I)
  O = canvas(bg, (h, w))
  y = h - 1
  for obj in sorted(objs, key=lambda obj: uppermost(obj)):
    O = paint(O, shift(obj, (y - lowermost(obj), 0)))
    y -= height(obj)
  return O

52.397247def cibjgddachahedegjcbheiajajaceaja(I):
  h, w = shape(I)
  grid_t = dmirror(I)
  O = tuple(
      tuple(v for v in r if v != mostcolor(I))
      for r in grid_t
  )
  O = dmirror(O)
  return canvas(mostcolor(I), (h, w - width(O))) + O

17.716427def cbaababajbdaebbhacafdcfcjbfaaeea(I):
  bg = mostcolor(I)
  objs = fgpartition(I)
  O = canvas(bg, shape(I))
  for obj in objs:
    O = vconcat(
      cover(O, shift(obj, (height(O) - lowermost(obj), 0))),  # Move object to bottom and cover
      crop(I, (0, 0), (height(O) - height(obj), width(O)))  # Take the top part excluding the object
    )
  return O

50.394566def ifdfcbcbfhafeaicaaijhacdadabgedb(I):
  bg = mostcolor(I)
  transformed_rows = []
  for j in range(width(I)):  # Iterate through columns
    column = [I[i][j] for i in range(height(I))]  # Extract column
    non_bg_indices = [i for i, v in enumerate(column) if v != bg]  # Find non-background indices
    shifted_indices = [i + (height(I) - 1 - max(non_bg_indices)) if i in non_bg_indices else i for i in range(len(column))]  # Calculate shifted indices
    transformed_column = [column[i] for i in shifted_indices]  # Construct transformed column
    transformed_rows.append(transformed_column)  # Append to list of transformed rows
  return tuple(zip(*transformed_rows))  # Transpose and convert to tuple

39.63937def diccecfafdebejegjejecebhgffedaci(I):
  bg = mostcolor(I)
  h, w = shape(I)
  O = canvas(bg, (h, w))
  for j in range(w):
    column = [I[i][j] for i in range(h)]
    for i, v in enumerate(column):
      if v != bg:
        O = paint(O, {(v, (h - 1 - i + next((k for k in range(i, h) if column[k] != bg), i), j))})
  return O

41.61748def abgffcgeabcceegfjdeddchahbjfhiac(I):
  x1 = mostcolor(I)
  x2 = canvas(x1, shape(I))
  x3 = objects(I, univalued=False, diagonal=False, without_bg=True)
  x4 = order(x3, uppermost)
  x5 = lambda obj: shift(obj, (height(I)-height(obj), 0))
  x6 = apply(x5, x4)
  O = paint(x2, merge(x6))
  return O

16.170626def bgafdgafgidbeadeahebeifdfifcdceb(I):
  h = height(I)
  return vconcat(
      canvas(ZERO, (h - valmax(objects(I, T, F, T), lambda o: lowermost(o)), width(I))),
      crop(I, (valmin(objects(I, T, F, T), lambda o: uppermost(o)), 0), (valmax(objects(I, T, F, T), lambda o: lowermost(o)) - valmin(objects(I, T, F, T), lambda o: uppermost(o)) + 1, width(I)))
  )

12.98403def bcebejdaeaibedjdjdfijffebaaajded(I):
    output_grid = canvas(ZERO, shape(I))
    for i, row in enumerate(I):
        for j, val in enumerate(row):
            if val != mostcommon(I):
                output_grid = paint(output_grid, {(val, (height(I) - 1 - i, j))})
    return output_grid

12.660789def hehdjedacafieafbjcccaaeecfdcchhc(I):
  objs = objects(I, T, F, T)
  target_row = uppermost(extract(objs, lambda o: color(o) == 8))
  moved_objs = frozenset(
    shift(obj, (target_row - uppermost(obj), 0))
    if color(obj) != 8 else obj for obj in objs
  )
  O = paint(canvas(0, shape(I)), merge(moved_objs))
  return O

17.992464def dgjbbchjgbegefbabcidcadajfbeeeah(I):
  for i, row in enumerate(I):
    if 8 in row:
      target_row = i
      break
  O = tuple(
    tuple(v if i >= target_row and v != 8 else 0 for v in r)
    if i < target_row else r
    for i, r in enumerate(I)
  )
  return O

24.486668def cacefibdjbbcebbhieejeaifdiebgehd(I):
  h, w = shape(I)
  for i in range(h):
    if 8 in I[i]:
      target_row = i
      break
  O = tuple(
      tuple(I[i + target_row][j] if i + target_row < h else 0 for j in range(w))
      for i in range(h)
  )
  return O

21.088112def ghjbagifadgdeffcacccicfbggdjdehc(I):
    bg = mostcolor(I)
    objs = fgpartition(I)
    moved_objs = apply(lambda obj: shift(obj, (height(I)-lowermost(obj)-1, 0)), objs)
    O = paint(canvas(bg, shape(I)), merge(moved_objs))
    return O

18.041582def cecfaegfdhbbeaaabdgaaefeabdcbfba(I):
  bg = mostcolor(I)
  new_grid = []
  for j in range(width(I)):
    column = [I[i][j] for i in range(height(I))]  # Extract column
    fg_indices = [i for i, v in enumerate(column) if v != bg]  # Find foreground indices
    column = [bg] * (height(I) - len(fg_indices)) + [column[i] for i in fg_indices]  # Move foreground to bottom
    new_grid.append(column)
  return tuple(zip(*new_grid))  # Transpose back to original orientation

21.098206def fbdfadfebgeeebbbicedbhdfaaeiicdf(I):
    bg = mostcolor(I)
    objs = objects(I, univalued=False, diagonal=False, without_bg=True)
    shifted_objs = frozenset(shift(obj, (height(I) - uppermost(obj) - height(obj), 0)) for obj in objs)
    O = paint(canvas(bg, shape(I)), merge(shifted_objs))
    return O

21.43018def dcdhhbbafeddefjajfbbedbhdajfbicf(I):
    bottom = height(I)
    O = canvas(mostcolor(I), shape(I)) 
    for obj in objects(I, univalued=False, diagonal=False, without_bg=True):
        O = paint(O, shift(obj, (bottom - uppermost(obj) - height(obj), 0)))
    return O

21.501308def gcbgafffajaceggbbbebdacaffjbecfb(I):
  x1 = objects(I, univalued=False, diagonal=False, without_bg=True)
  x2 = order(x1, uppermost)
  O = canvas(mostcolor(I), shape(I))
  for i in range(size(x2)):
    obj = x2[i]
    O = paint(O, shift(obj, (height(I) - uppermost(obj) - height(obj), 0)))
  return O

31.49962def biajbdhhibjbebfjbdhcfaacbfcfaabj(I):
  bg = mostcolor(I)  # Identify the background color
  objs = objects(I, F, T, T)  # Extract all objects (excluding background)
  shifted_objs = frozenset(shift(obj, (height(I) - lowermost(obj), 0)) for obj in objs)  # Shift each object down
  O = paint(canvas(bg, shape(I)), merge(shifted_objs))  # Paint the shifted objects onto a blank canvas
  return O

12.98403def beafiafibibbejhcbiciiaddcfgaacdc(I):
  bg = mostcolor(I)
  h = height(I)
  new_grid = canvas(bg, shape(I))  # Create a blank canvas
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if val != bg:
        new_grid = fill(new_grid, val, {(h-1-i, j)}) # Place each non-background cell at the bottom
  return new_grid

34.086773def ebjadaabfdaaedcfjbbedhceefjecbib(I):
  return tuple(
      tuple(
          index(I, (i - uppermost(ofcolor(I, v)), j)) if v != ZERO else ZERO # Access the correct cell from the input based on the object's topmost row
          for j, v in enumerate(row)
      )
      for i, row in enumerate(I)
  )

32.030796def ebgccdabdaefeehfbdaafhechiadibcd(I):
    h = height(I)
    return tuple(
        tuple(
            index(I, (i - h + 1 + uppermost(ofcolor(I, v)) + height(ofcolor(I, v)), j)) if v != ZERO else ZERO
            for j, v in enumerate(row)
        )
        for i, row in enumerate(I)
    )

10.22875def ddgegfdahdadeeedbdeghaaaaaefbfda(I):
  objs = objects(I, T, F, T)  # Get all objects
  eight_obj = extract(objs, lambda obj: 8 in palette(obj))  # Find object containing 8
  other_objs = remove(eight_obj, objs)  # All objects except the '8' object
  highest_other = valmax(other_objs, lambda obj: lowermost(obj))  # Find the lowermost point of other objects
  target_pos = (highest_other + 1, leftmost(eight_obj))  # Target position is one row above
  O = paint(cover(I, eight_obj), shift(eight_obj, subtract(target_pos, ulcorner(eight_obj))))  # Move the '8' object
  return O

16.78334def cgeadfffidheeehbbfaiebcaheihcdja(I):
  eight_indices = ofcolor(I, 8)  # Get indices of all '8's
  other_indices = difference(asindices(I), eight_indices)  # Get indices of everything else
  highest_other = valmax(other_indices, lambda ind: ind[0])  # Find the highest row index among other indices
  target_row = highest_other + 1  # Target row is one row above
  O = tuple(
    tuple(8 if (i, j) in eight_indices else v for j, v in enumerate(r)) if i >= target_row else 
    tuple(v if (i, j) in other_indices else 0 for j, v in enumerate(r))
    for i, r in enumerate(I)
  )
  return O

27.095444def hbbcedhieajbebdbiaebgcjffbejjcdd(I):
  h, w = shape(I)  # Get grid dimensions
  eight_row = min(i for i, r in enumerate(I) if 8 in r)  # Find the first row containing an '8'
  non_eight_rows = tuple(r for i, r in enumerate(I) if i < eight_row and any(v != 0 for v in r))  # Get rows above '8's containing non-zero values
  offset =  h - eight_row - len(non_eight_rows)  # Calculate the offset to move the '8' object
  O = tuple(
    tuple(0 for _ in range(w)) if i < len(non_eight_rows) else
    I[i - offset] if i >= len(non_eight_rows) and i < h - offset else 
    tuple(0 for _ in range(w))
    for i in range(h)
  )
  return O 

18.222849def bcfeecdbiejieedfagfiedfediieibcj(I):
    bg = mostcolor(I)
    h = height(I)
    w = width(I)
    return tuple(
        tuple(
            next((I[h - 1 - i][j] for i in range(h) if I[h - 1 - i][j] != bg), bg)
            for j in range(w)
        )
        for i in range(h)
    )

17.693392def dccbegbadjibehjgadjihcfbcbdibaad(I):
    bg = mostcolor(I)
    return tuple(
        tuple(v for v in r[::-1] if v != bg) + tuple(bg for _ in range(len(r) - len([v for v in r[::-1] if v != bg])))
        for r in I
    )

41.61748def efcdicdegfffejacjebibeeidibaffcd(I):
  bg = mostcolor(I)
  objs = sorted(fgpartition(I), key=lambda obj: uppermost(obj))  # Sort objects by their topmost row
  O = canvas(bg, shape(I))
  for i, obj in enumerate(objs):
    O = paint(O, shift(obj, (height(I) - height(obj) - i * height(obj), 0)))
  return O

12.966843def ffbfejecbifdefabiddfbbbaahigdecf(I):
  bg = mostcolor(I)
  painted = I
  for i in range(height(I)-1, -1, -1): # Iterate through rows from bottom to top
    row_objs = objects(crop(I, (i, 0), (1, width(I))), univalued=False, diagonal=False, without_bg=True) # Extract objects in the current row
    for obj in row_objs:
      painted = move(painted, obj, (height(I) - lowermost(obj) - 1, 0)) # Move each object to the bottom
  O = painted
  return O

15.268439def aajcjffbgffhehaaibdbcfceighebbba(I):
  bg = mostcolor(I)
  objs = objects(I, univalued=False, diagonal=False, without_bg=True)
  max_height = valmax(objs, height) # Find the height of the tallest object
  result = canvas(bg, shape(I))
  current_height = height(I) - max_height # Start placing from bottom
  for obj in objs:
    result = paint(result, shift(obj, (current_height - uppermost(obj), 0))) # Place the object 
    current_height -= height(obj) # Update current height
  O = result
  return O

21.088112def biffebhcdcdhefhajjfdefbfjciceffd(I):
  bg = mostcolor(I) # identify background color
  objs = fgpartition(I) # partition into objects excluding background
  h = height(I) # get grid height
  moved_objs = frozenset(shift(obj, (h - uppermost(obj) - height(obj), 0)) for obj in objs) # move each object down
  O = paint(canvas(bg, shape(I)), merge(moved_objs)) # paint onto a blank canvas
  return O

12.065797def dddfhcjbdfegecdfjbfddeadadfefded(I):
  bg = mostcolor(I)
  inverted = replace(I, bg, 1) # Invert background and foreground
  inverted = replace(inverted, lambda x: x != 1, 0) # Set all non-background to a single color
  objs = objects(inverted, F, T, T) # Extract objects (now representing empty space)
  filled = paint(canvas(bg, shape(I)), merge(objs)) # Paint objects onto a blank canvas
  O = cellwise(I, filled, bg) # Combine original and filled grids, prioritizing original colors
  return O

22.88914def ffafaebhbbdieefcaijcfccfbeefdfde(I):
  h, w = shape(I) # Get the height and width of the input grid.
  grid = list(list(row) for row in I) # Convert the input grid to a list of lists for easier manipulation.
  for j in range(w): # Iterate through each column.
    non_zero_indices = [i for i in range(h) if grid[i][j] != ZERO] # Find indices of non-zero values in the column.
    num_non_zeros = len(non_zero_indices) # Count non-zero values.
    for k, i in enumerate(non_zero_indices): # Move non-zero values to the bottom of the column.
      grid[h - num_non_zeros + k][j] = grid[i][j]
      if i < h - num_non_zeros + k:
        grid[i][j] = ZERO
  return tuple(tuple(row) for row in grid) # Convert the modified grid back to a tuple of tuples.

11.820124def djjgjhcidaacecccaeaifdcaagecjcac(I):
  objs = objects(I, T, F, T)
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  for obj in objs:
    temp = paint(O, obj)
    for i in range(1, height(I) - uppermost(obj) + 1):
      shifted = shift(obj, (i, 0))
      if lowermost(shifted) < height(I) and index(temp, ulcorner(shifted)) == bg:
        temp = paint(temp, shifted)
      else:
        break
    O = temp
  return O

13.149296def ihfaeefafbdbegaibjbfffecfdddcccd(I):
    bg = mostcolor(I)
    objs = sorted(fgpartition(I), key=lambda obj: uppermost(obj))
    new_grid = canvas(bg, shape(I))
    current_height = height(I)
    for obj in objs:
        obj_height = height(obj)
        new_grid = paint(new_grid, shift(obj, (current_height - obj_height - uppermost(obj), 0)))
        current_height -= obj_height
    return new_grid

24.56411def fdddfafjeabfecgfifaijaaccaefjajc(I):
  bg = mostcolor(I)
  objs = fgpartition(I)
  new_I = canvas(bg, shape(I))
  for obj in objs:
    min_i = uppermost(obj)
    max_i = lowermost(obj) + 1
    for i in range(min_i, max_i):
      new_I = paint(new_I, shift(toobject(frozenset({(i, j) for j in range(len(I[0]))}), I), (height(I) - max_i, 0)))
  return new_I

45.463787def fcdjchfbdbjbedaeahaijhbafcigbceg(I):
    bg = mostcolor(I)
    shifted_rows = []
    for i, row in enumerate(I):
        if len(set(row)) != 1:
            shifted_rows.append(shift(toobject(frozenset({(i, j) for j in range(len(row))}), I), (height(I)-i-1, 0)))
    return paint(canvas(bg, shape(I)), merge(shifted_rows))

21.868929def fcichdhfdcigejjebdagaeeeebiaehaa(I):
  O = I
  for value in palette(I) - {mostcolor(I)}:
    obj = frozenset((value, (i, j)) for i, row in enumerate(I) for j, v in enumerate(row) if v == value)
    O = paint(cover(O, obj), shift(obj, (height(I) - lowermost(obj) - 1, 0)))
  return O

11.546778def agfaeigadgcbecddjbecddbjjedaffdd(I):
  bg = mostcolor(I)
  compressed = tuple(r for r in I if any(v != bg for v in r)) # Remove empty rows from the top
  O = vconcat(compressed, canvas(bg, (height(I) - height(compressed), width(I)))) # Add empty rows at the bottom
  return O

15.851666def bfibfedfbfbaeddfadbgdbihggefehdh(I):
  bg = mostcolor(I)
  objs = objects(I, False, True, True)
  bottom_edge = {(height(I) - 1, j) for j in range(width(I))} # Create a destination patch representing the bottom edge
  shifted_objs = frozenset(shift(obj, gravitate(obj, bottom_edge)) for obj in objs) # "Gravitate" each object towards the bottom edge
  cleared_grid = canvas(bg, shape(I))
  O = paint(cleared_grid, merge(shifted_objs))
  return O

45.140434def begieebfdeghefffbaejbbbfiadebbbf(I):
  mirrored = vmirror(I)  # Mirror the grid vertically
  compressed = tuple(r for r in mirrored if any(v != mostcolor(I) for v in r)) # Remove empty rows (which are now at the top)
  O = vmirror(compressed) # Mirror the grid back to its original orientation
  return O

26.591108def ccjjfceafeefeaajacjebicdccddccbb(I):
  bg = mostcolor(I)
  empty_rows = sum(1 for row in I if all(v == bg for v in row)) # Count the number of empty rows at the top
  shifted = shift(asobject(I), (empty_rows, 0)) # Shift all objects (including background) downwards
  O = crop(paint(canvas(bg, (30, 30)), shifted), (0, 0), shape(I)) # Crop the shifted grid to the original size
  return O

31.946302def bbbieibfdfbaeicibefcaeabdgcbdheh(I):
  objs = objects(I, T, F, T)
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  for obj in sorted(objs, key=lambda x: (uppermost(x), leftmost(x))):
    O = paint(O, shift(obj, (height(I) - lowermost(obj), 0)))
  return O

37.47232def babjfebgfacbeiggidfdhfdaedcfahjb(I):
  objs = sorted(objects(I, T, F, T), key=lambda x: (uppermost(x), leftmost(x)))
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  i = height(O) - height(objs[0])
  for obj in objs:
    O = paint(O, shift(obj, (i, 0)))
    i -= height(obj)
  return O

17.726446def hfcgfbaidaccefibbfefgefecdfaefih(I):
  bg = mostcolor(I)  # Find the background color
  obj_height = max(height(obj) for obj in fgpartition(I))  # Find the height of the tallest object
  return tuple(
      tuple(bg for _ in range(len(I[0]))) 
      for _ in range(len(I) - obj_height)  # Create empty rows based on the tallest object height
  ) + tuple(row for row in I if len(set(row)) != 1)  # Append the rows with objects

66.44493def adcifabdeedfedbdaffaeedfbjfiibcf(I):
  bg = mostcolor(I)
  transposed_grid = rot90(I)  # Rotate the grid by 90 degrees
  compressed_grid = compress(transposed_grid) # Remove empty rows (originally columns)
  restored_grid = rot270(compressed_grid) # Rotate back to the original orientation
  return  restored_grid # Output the restored grid

31.379087def abjccacbcfjaebaaaejjhabefibeefhd(I):
  O = canvas(mostcolor(I), shape(I))
  for obj in objects(I, univalued=False, diagonal=False, without_bg=True):
    O = paint(O, shift(obj, (height(I) - lowermost(obj), 0)))
  return O

31.49962def ecieccbeccabefadbdajbjbfdaddceaf(I):
  return paint(canvas(mostcolor(I), shape(I)), 
               mapply(
                 lambda obj: shift(obj, (height(I) - lowermost(obj), 0)), 
                 objects(I, univalued=False, diagonal=False, without_bg=True)
               )
              )

13.149296def adcdbhfbifbgedjeaebfecfbjeebffda(I):
  bg = mostcolor(I)
  objs = sorted(objects(I, False, True, True), key=lambda obj: uppermost(obj)) # Extract and sort objects by their top row
  O = canvas(bg, shape(I)) # Create a blank canvas
  current_height = height(I)
  for obj in objs:
    shifted_obj = shift(obj, (current_height - uppermost(obj) - height(obj), 0)) # Shift object to current height
    O = paint(O, shifted_obj) # Paint the shifted object
    current_height -= height(obj) # Update current height
  return O

18.041582def bbecajcbbbjieceebcbeccjbgcefchfd(I):
  bg = mostcolor(I)
  h, w = shape(I)
  O = canvas(bg, (h, w)) # Create a blank canvas
  for j in range(w): # Iterate through columns
    column = tuple(I[i][j] for i in range(h)) # Extract the column
    non_bg_indices = tuple(i for i, v in enumerate(column) if v != bg) # Find non-background indices
    for k, i in enumerate(non_bg_indices):
      O = paint(O, {(I[i][j], (h - len(non_bg_indices) + k, j))}) # Place non-background values at the bottom
  return O

12.916903def ffcbhdcebifiejdeihfehffabafeggab(I):
  bg = mostcolor(I)
  transposed = dmirror(I) # Transpose the grid
  compressed = tuple(r for r in transposed if any(v != bg for v in r)) # Remove empty columns
  O = dmirror(vconcat(compressed, canvas(bg, (height(I) - height(compressed), width(I))))) # Add empty columns at the right and transpose back
  return O

38.937523def adaicchdedhfefdebibbhbajfecdfbef(I):
  objs = objects(I, T, F, T)
  sorted_objs = order(objs, lowermost)  # Sort objects from top to bottom
  shifted_objs = set()
  occupied = set()
  for obj in sorted_objs:
    for v, (i, j) in obj:
      new_i = i
      while (new_i, j) not in occupied and new_i < height(I) - 1:
        new_i += 1  # Find the next available space below
      shifted_objs.add((v, (new_i, j)))
      occupied.add((new_i, j))
  return paint(canvas(ZERO, shape(I)), frozenset(shifted_objs))

21.501308def aebbjfahbbcjecccbjaffefihchfadad(I):
  objs = objects(I, T, F, T)
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  for obj in sorted(objs, key=lambda obj: uppermost(obj)): # Sort by top row
    target_pos = (height(I) - height(obj), leftmost(obj)) # Calculate target position
    O = paint(O, shift(obj, subtract(target_pos, ulcorner(obj)))) # Move to target
  return O

14.903043def fhhggfbfacaiebidbeacedgbdcbieaai(I):
  bg = mostcolor(I)
  objs = sorted(fgpartition(I), key=lambda x: -uppermost(x)) # Sort by uppermost row in descending order
  bottom = height(I) # Get the height of the input grid
  O = canvas(bg, shape(I)) # Create a canvas filled with the background color
  for obj in objs:
    O = paint(O, shift(obj, (bottom - uppermost(obj) - height(obj), 0))) # Shift each object to the bottom and paint it
    bottom -= height(obj) # Update the bottom position for the next object
  return O

16.78334def cbiabbdhifaieeaaifeiiacfgebddbaf(I):
  eights = ofcolor(I, 8)
  other_indices = difference(asindices(I), eights)
  lowest_row = maximum(apply(lambda ij: ij[0], other_indices))
  shifted_eights = shift(eights, (lowest_row + 1 - uppermost(eights), 0))
  O = paint(cover(I, eights), recolor(8, shifted_eights))
  return O

13.267115def eddeabchceagedcfjacbdgfcacedgjdh(I):
  target_row = max([i for i in range(len(I)) if any(v != 0 for v in I[i])]) + 1
  eights = {(8, (i, j)) for i, row in enumerate(I) for j, val in enumerate(row) if val == 8}
  O = paint(cover(I, eights), shift(eights, (target_row - uppermost(eights), 0)))
  return O

14.054698def hbeeddijaidaegefidjfjccbbbaadbed(I):
  eight_obj = extract(objects(I, T, F, T), lambda obj: 8 in palette(obj))
  bottom_edge =  max(i for i, j in toindices(eight_obj)) 
  shifted_obj = shift(eight_obj, (len(I) - bottom_edge - 1, 0))
  O = paint(cover(I, eight_obj), shifted_obj) 
  return O

21.098206def ccbdaeeaacdaeeaejdgdbehadhjhghce(I):
  bg = mostcolor(I)
  objs = objects(I, univalued=False, diagonal=False, without_bg=True)
  shifted_objs = frozenset(shift(obj, (height(I) - uppermost(obj) - height(obj), 0)) for obj in objs)
  O = paint(canvas(bg, shape(I)), merge(shifted_objs))
  return O

18.041582def gbhaddbifbaiebefjdgdacfadecfcbji(I):
  bg = mostcolor(I)
  h, w = shape(I)
  O = canvas(bg, (h, w))
  for j in range(w):
    column = tuple(I[i][j] for i in range(h))
    filtered_column = tuple(v for v in column if v != bg)
    O = paint(O, {(v, (i + h - len(filtered_column), j)) for i, v in enumerate(filtered_column)})
  return O

13.149296def cdefecdjagfdebjcagfajfbdbbfceafd(I):
  bg = mostcolor(I)
  objs = sorted(objects(I, univalued=False, diagonal=False, without_bg=True), key=lambda obj: uppermost(obj))
  O = canvas(bg, shape(I))
  current_height = height(I)
  for obj in objs:
    O = paint(O, shift(obj, (current_height - uppermost(obj) - height(obj), 0)))
    current_height -= height(obj)
  return O

17.278688def becjfbiffecdeeggjdeeadifaaeaeifc(I):
  bg = mostcolor(I)
  transposed = dmirror(I)
  transformed_transposed = tuple(tuple(v for v in r if v != bg) + tuple(bg for _ in range(len(r) - len(tuple(v for v in r if v != bg)))) for r in transposed)
  O = dmirror(transformed_transposed)
  return O

29.025784def jciacgacaeaheadabbacdiefjfachehc(I):
  bg = mostcolor(I)
  h, w = shape(I)
  flattened = tuple(v for r in I for v in r if v != bg)
  O = canvas(bg, (h, w))
  i = h - 1
  j = 0
  for v in flattened:
    O = paint(O, {(v, (i, j))})
    j += 1
    if j == w:
      j = 0
      i -= 1
  return O

15.2192335def bjegjifgegceedebidbeafjgdabebcbc(I):
  objs = objects(I, False, True, True)  # Extract all objects (excluding background)
  h = height(I)  # Get the grid height
  moved_objs = set()
  for obj in objs:
    upper = uppermost(obj)  # Get the top row index of the object
    new_obj = shift(obj, (h - 4 - upper, 0))  # Calculate the downward shift
    moved_objs.add(new_obj)  # Add the shifted object
  O = paint(canvas(0, shape(I)), merge(moved_objs)) # Paint the shifted objects onto a blank canvas
  return O

21.098206def fbhaicbbddfaejihaedcdhdafdibeaia(I):
  objs = objects(I, T, F, T)
  h = height(I)
  moved_objs = frozenset({shift(obj, (h - uppermost(obj) - height(obj), 0)) for obj in objs})
  O = paint(canvas(ZERO, shape(I)), merge(moved_objs))
  return O

21.501308def edhihhjidajdedaiifacjbchfeaceefe(I):
  bg = mostcolor(I)
  filled = fill(I, bg, asindices(I))
  objs = objects(I, T, F, T)
  for i, obj in enumerate(objs):
    filled = underpaint(filled, shift(obj, (height(I) - uppermost(obj) - height(obj), 0)))
  O = filled
  return O

12.191571def baafcdifbeefefdjbfadacaggcghgcie(I):
  transposed = rot90(I)
  objs = objects(transposed, T, F, T)
  moved_objs = frozenset({shift(obj, (0, width(transposed) - rightmost(obj) - width(obj))) for obj in objs})
  O = rot270(paint(canvas(ZERO, shape(transposed)), merge(moved_objs)))
  return O

13.149296def baecdebdajggeccfaccgfabbjeaabjba(I):
  objs = objects(I, T, F, T)
  sorted_objs = order(objs, lambda obj: uppermost(obj))
  O = canvas(ZERO, shape(I))
  current_height = height(I)
  for obj in sorted_objs:
    O = paint(O, shift(obj, (current_height - uppermost(obj) - height(obj), 0)))
    current_height -= height(obj)
  return O

18.041582def acfcbcefbdjgecfjibabehcecahadegd(I):
  h, w = shape(I)
  O = canvas(ZERO, (h, w))
  for j in range(w):
    column = tuple(I[i][j] for i in range(h))
    non_zero = tuple(v for v in column if v != ZERO)
    O = paint(O, frozenset(((v, (i + h - len(non_zero), j)) for i, v in enumerate(non_zero))))
  return O

13.191714def ifeacgbjdbdiejadbgdeiebjibgiigbd(I):
  objs = fgpartition(I) 
  bottom_obj = argmax(objs, lambda obj: lowermost(obj))
  moved_objs = set()
  for obj in objs:
    if obj == bottom_obj:
      moved_objs.add(obj)
    else:
      move_down = height(I) - lowermost(obj) - 1 
      moved_objs.add(shift(obj, (move_down, 0)))
  O = paint(canvas(0, shape(I)), merge(moved_objs))
  return O

16.256432def eaihedaigjaeeiafbjcbjjejefcfafag(I):
  objs = sorted(fgpartition(I), key=lambda obj: uppermost(obj))
  O = I
  for i in range(len(objs)-1, 0, -1):
    top_obj = objs[i-1]
    bottom_obj = objs[i]
    offset = gravitate(top_obj, bottom_obj)
    O = move(O, top_obj, offset)
  last_obj = objs[0]
  O = move(O, last_obj, (height(I) - lowermost(last_obj) - 1, 0))
  return O

16.834126def cigeiigjhagaeibaaaabcifhgiehaddg(I):
  objs = fgpartition(I)
  O = canvas(mostcolor(I), shape(I))
  for obj in objs:
    bottom_edge =  {(i,j) for i,j in product(interval(0, height(I), 1), interval(leftmost(obj), rightmost(obj)+1, 1))}
    obj_projection =  intersection(bottom_edge, backdrop(obj))
    shifted_obj = shift(obj, gravitate(obj_projection, obj))
    O = paint(O, shifted_obj)
  return O

11.883071def bcijfcbgacjaeahabbbcdbhcbbhbfeee(I):
  objs = sorted(fgpartition(I), key=lambda obj: lowermost(obj))
  O = I
  for i in range(len(objs)-1):
    bottom_obj = objs[i]
    top_obj = objs[i + 1]
    diff = lowermost(bottom_obj) - uppermost(top_obj) - 1 
    O = move(O, top_obj, (diff, 0))
  return O

21.43018def dieefeddhcbfechjbafjdbagbgddaeia(I):
  objs = fgpartition(I)
  max_bottom = height(I) - 1
  moved_objs = []
  for obj in objs:
    current_bottom = lowermost(obj)
    shift_amount = (max_bottom - current_bottom, 0)
    moved_objs.append(shift(obj, shift_amount))
  O = paint(canvas(0, shape(I)), merge(moved_objs))
  return O 

11.632015def cebfdhadafaaecdfigiaeehdibeehgeb(I):
  objs = objects(I, T, F, T)  # Extract all objects from the input grid
  eight_obj = extract(objs, lambda obj: 8 in palette(obj))  # Find the object containing the digit '8'
  other_objs = remove(eight_obj, objs)  # Get a set of all objects except the '8' object
  lowest_other = valmax(other_objs, lambda obj: uppermost(obj))  # Find the uppermost row index among all objects except the '8' object
  target_pos = (lowest_other - 1, leftmost(eight_obj))  # Define the target position for the '8' object - one row above the lowest_other object
  O = paint(cover(I, eight_obj), shift(eight_obj, subtract(target_pos, ulcorner(eight_obj))))  # Move the '8' object to the target position
  return O

14.445587def bhfafbacgeeceeaabefbchfiacefgfbj(I):
  eight_obj = extract(objects(I, T, F, T), lambda obj: 8 in palette(obj))
  target_loc = subtract(ulcorner(extract(objects(I, T, F, T) - {eight_obj}, lambda obj: uppermost(obj) == valmin(objects(I, T, F, T) - {eight_obj}, lambda o: uppermost(o)))), (1, 0))
  O = paint(cover(I, eight_obj), shift(eight_obj, subtract(target_loc, ulcorner(eight_obj))))
  return O

12.877157def adfgddbdaghjebbhjaabheefbecehhhc(I):
  e = lambda o: 8 in palette(o)
  t = lambda o: uppermost(o)
  O = paint(
    cover(I, extract(objects(I, T, F, T), e)), 
    shift(
      extract(objects(I, T, F, T), e), 
      subtract(
        (valmin(objects(I, T, F, T), t) - 1, leftmost(extract(objects(I, T, F, T), e))), 
        ulcorner(extract(objects(I, T, F, T), e))
      )
    )
  )
  return O

52.397247def bfeabbhfccieegacaaagdjecbfhdcfeg(I):
    objs = sorted(objects(I, False, False, True), key=lambda obj: uppermost(obj))
    bg = mostcolor(I)
    O = canvas(bg, shape(I))
    for obj in objs:
        shifted_obj = shift(obj, (height(I), 0))
        for i in range(height(I)):
            if len(intersection(toindices(shifted_obj), asindices(O))) == 0:
                O = paint(O, shifted_obj)
                break
            shifted_obj = shift(shifted_obj, (-1, 0))
    return O

12.796181def gjicffeffjggeacdbbacehgeacehaahc(I):
  objs = sorted(objects(I, False, False, True), key=lambda obj: -uppermost(obj))
  bg = mostcolor(I)
  O = I
  for obj in objs:
    for i in range(1, height(I) + 1):
      new_obj = shift(obj, (i, 0))
      if len(intersection(toindices(new_obj), asindices(O))) == len(obj):
        O = paint(cover(O, obj), new_obj)
        break
  return O

19.734861def jcjdbjjfchdjeiiajeaafbeiaebchafe(I):
  obj2 = first(colorfilter(objects(I, False, True, True), 2))
  obj8 = first(colorfilter(objects(I, False, True, True), 8))
  O = paint(paint(canvas(0, shape(I)), shift(obj2, (6, 0) if len(I) == 14 else (3, 5) if len(I[0]) == 10 else (-3, 0))),
            shift(obj8, (6, 0) if len(I) == 14 else (0, 0)))
  return O

11.382983def faedjdhjhefhecfaaaecidgjjgchbija(I):
  twos = ofcolor(I, TWO)
  eights = ofcolor(I, EIGHT)
  center_eights = center(eights)
  center_twos = center(twos)
  diff = subtract((center_eights[0], 0), (center_twos[0], 0))
  shifted_twos = shift(twos, diff)
  O = fill(fill(I, ZERO, twos), TWO, shifted_twos)
  return O

14.971343def bhcjdajbihbbeeeabdgigdbfcebdcdcb(I):
  obj2 = first(colorfilter(objects(I, T, F, F), TWO))
  obj8 = first(colorfilter(objects(I, T, F, F), EIGHT))
  h = height(I)
  target_uppermost = h - height(obj2)
  O = paint(cover(I, obj2), shift(obj2, (target_uppermost - uppermost(obj2), center(obj8)[1] - center(obj2)[1])))
  return O

19.289104def aahfdaddddafedfgjhacaededaideffe(I):
    two_indices = ofcolor(I, 2)
    eight_indices = ofcolor(I, 8)
    
    two_ulcorner = ulcorner(two_indices)
    eight_center = center(eight_indices)
    
    horizontal_shift = eight_center[1] - two_ulcorner[1] - width(two_indices) // 2
    vertical_shift = height(I) - lowermost(two_indices)
    
    shifted_indices = shift(two_indices, (vertical_shift, horizontal_shift))
    O = fill(fill(I, 0, two_indices), 2, shifted_indices)
    
    return O

31.946302def djchddefbcdcefbcigbafdfgeahehhbh(I):
  objs = sorted(fgpartition(I), key=lambda obj: uppermost(obj))
  O = I
  for obj in objs:
    diff = height(I) - lowermost(obj)
    O = move(O, obj, (diff, 0))
  return O

15.393886def jaggddcfheaeebcbbbbdecadddghebfe(I):
  objs = fgpartition(I)
  h = height(I)
  return paint(I, merge({shift(obj, (h - lowermost(obj) - 1, 0)) for obj in objs}))

52.397247def bdbbececbdbeeaaiidcjggedfciibccc(I):
  O = I
  for i in range(height(I)):
    for j in range(width(I)):
      if index(I, (i, j)) != mostcommon(I):
        O = move(O, {(index(O, (i, j)), (i, j))}, (height(I) - i - 1, 0))
  return O

29.903273def deegcadifiaaeabbaiceebacbffbbcda(I):
  h = height(I)
  return tuple(tuple(v for row in I for v in row if v != mostcommon(I)) + tuple(mostcommon(I) for _ in range(h * width(I) - sum(v != mostcommon(I) for row in I for v in row))) for i in range(h))

12.405691def jajaihchifjfedcbidcciicefbdfdabg(I):
  objs = objects(I, T, F, T)
  eight_obj = extract(objs, lambda obj: color(obj) == 8)
  target_row = len(I) - height(eight_obj)
  target_col = (len(I[0]) - width(eight_obj)) // 2
  new_eight_obj = shift(eight_obj, (target_row - uppermost(eight_obj), target_col - leftmost(eight_obj)))
  I = cover(I, eight_obj)
  I = paint(I, new_eight_obj)
  for obj in remove(eight_obj, objs):
    target_row -= height(obj)
    target_col = (len(I[0]) - width(obj)) // 2
    new_obj = shift(obj, (target_row - uppermost(obj), target_col - leftmost(obj)))
    I = paint(I, new_obj)
  return I 

19.878061def eciiacbcjjbdedddbbbfagiibigebhbj(I):
  e = extract(objects(I, T, F, T), lambda o: 8 in palette(o))
  t = (len(I) - height(e), (len(I[0]) - width(e)) // 2)
  I = paint(cover(I, e), shift(e, subtract(t, ulcorner(e))))
  for o in order(objects(I, T, F, T) - {e}, lambda o: -uppermost(o)):
    t = (t[0] - height(o), t[1])
    I = paint(I, shift(o, subtract(t, ulcorner(o))))
  return I

8.972498def ehdjcjeiebhieffdbcejeicjcbfedbdg(I):
  objs = objects(I, T, F, T)
  eight = extract(objs, lambda o: 8 in palette(o))
  others = order(objs - {eight}, lambda o: -uppermost(o))
  bottom = len(I)
  for obj in [eight] + list(others):
    left = (len(I[0]) - width(obj)) // 2
    I = paint(cover(I, obj), shift(obj, (bottom - height(obj) - uppermost(obj), left - leftmost(obj))))
    bottom -= height(obj)
  return I

24.721996def ffdaddigfgfceigcjjhghffjfcgeejgj(I):
    eight = extract(objects(I,T,F,T), lambda obj: 8 in palette(obj))
    rest = objects(I,T,F,T) - {eight}
    height_eight = height(eight)
    width_eight = width(eight)
    height_rest = sum(height(obj) for obj in rest)
    I = canvas(0, (len(I), len(I[0])))
    I = paint(I, shift(eight, (len(I)-height_eight, (len(I[0])-width_eight)//2)))
    current_height = len(I)-height_eight-1
    for obj in rest:
        current_width = (len(I[0])-width(obj))//2
        I = paint(I, shift(obj, (current_height - uppermost(obj), current_width - leftmost(obj))))
        current_height -= height(obj)
    return I

12.98403def jhcghdffeahdeagejbdchbcieahccdjc(I):
  h = height(I)
  O = tuple(tuple(0 for _ in range(width(I))) for _ in range(h))
  for i, row in enumerate(I):
    for j, v in enumerate(row):
      if v != 0:
        O = fill(O, v, {(h - i - 1, j)})
  return O

21.43018def eeefihdfhafcehceiadhgaiidfgceide(I):
  objs = partition(I) - colorfilter(partition(I), 0)
  O = canvas(0, shape(I))
  for obj in objs:
    O = paint(O, shift(obj, (height(I) - lowermost(obj) - 1, 0)))
  return O

12.804115def gahagfjeagdeecfdibcedefbedghdgeg(I):
  obj_twos = first(colorfilter(objects(I, True, False, False), TWO))
  obj_eights = first(colorfilter(objects(I, True, False, False), EIGHT))
  target_ulcorner = subtract(ulcorner(obj_eights), ulcorner(obj_twos))
  shifted_obj = shift(obj_twos, target_ulcorner)
  O = paint(fill(I, ZERO, obj_twos), shifted_obj)
  return O

12.474563def cahjcgcdjhdfecbaacdhfeiebheaffhj(I):
  obj2 = first(colorfilter(objects(I, True, False, False), TWO))
  obj8 = first(colorfilter(objects(I, True, False, False), EIGHT))
  v_shift = uppermost(obj8) - uppermost(obj2)
  shifted_obj2 = shift(obj2, (v_shift, 0))
  O = paint(fill(I, ZERO, obj2), shifted_obj2)
  return O

12.98403def fbjdecfdcedfedebjhfbfbifgfgfigaf(I):
  O = canvas(mostcommon(I), shape(I)) # Create a blank canvas
  for i, row in enumerate(I): # Iterate through rows and their indices
    for j, value in enumerate(row): # Iterate through cell values and their indices
      if value != mostcommon(I): # If the cell is not background
        O = paint(O, {(value, (height(I) - i - 1, j))}) # Paint the cell at the bottom
  return O

10.064455def dcbdceacffjeedcgaaaheaihhfffbhgb(I):
  objs = objects(I, T, F, T)
  eight_obj = extract(objs, lambda obj: color(obj) == 8)
  other_objs = list(remove(eight_obj, objs))
  target_pos = (len(I) - height(eight_obj), width(I) // 2 - width(eight_obj) // 2)
  O = canvas(mostcolor(I), shape(I))
  O = paint(O, shift(eight_obj, subtract(target_pos, ulcorner(eight_obj))))
  current_pos = (target_pos[0] - 1, target_pos[1])
  for obj in other_objs:
    obj_pos = (current_pos[0] - height(obj) + 1, current_pos[1])
    O = paint(O, shift(obj, subtract(obj_pos, ulcorner(obj))))
    current_pos = (current_pos[0] - height(obj), current_pos[1])
  return O

14.270952def egafaecdbbdgecdjjcbdfecbdeebeagj(I):
  objs = objects(I, T, F, T)
  eight_obj = extract(objs, lambda obj: 8 in palette(obj))
  other_objs = remove(eight_obj, objs)
  bottom_center = (len(I) - height(eight_obj), (len(I[0]) - width(eight_obj)) // 2)
  O = paint(canvas(mostcolor(I), shape(I)), shift(eight_obj, subtract(bottom_center, ulcorner(eight_obj))))
  current_y = bottom_center[0] - height(eight_obj)
  for obj in other_objs:
    obj_x = (len(I[0]) - width(obj)) // 2
    O = paint(O, shift(obj, subtract((current_y, obj_x), ulcorner(obj))))
    current_y -= height(obj)
  return O

13.976378def eeifhcicbbdiebhdjhdbacebgbbcbbac(I):
  objs = objects(I, univalued=False, diagonal=False, without_bg=True)
  bottom = height(I)
  O = canvas(0, shape(I))
  for obj in objs:
    O = paint(O, shift(obj, (bottom - height(obj) - uppermost(obj), 0)))
    bottom = uppermost(shift(obj, (bottom - height(obj) - uppermost(obj), 0)))
  return O

16.017544def ghjdaahdifdiefafbbdeacfbaccbcfbi(I):
  rows = list(I)
  non_empty_rows = [row for row in rows if any(v != 0 for v in row)]
  empty_rows = [tuple(0 for _ in range(width(I))) for _ in range(height(I) - len(non_empty_rows))]
  return tuple(empty_rows + non_empty_rows)

66.44493def icbadbhjfgafeifabbjdcajecifebcbj(I):
  return rot180(compress(rot180(I)))

12.484478def aefeccccabecegccbbggafccfdciadaj(I):
  two_obj = toobject(ofcolor(I, 2), I) # Extract the '2' object as an object
  eight_obj = toobject(ofcolor(I, 8), I) # Extract the '8' object as an object
  
  target_pos = subtract(center(eight_obj), (height(two_obj) // 2, 0)) # Calculate the target position for the '2' object's center
  offset = subtract(target_pos, center(two_obj)) # Calculate the offset needed to reach the target
  
  O = move(I, two_obj, offset) # Move the '2' object on the original grid
  return O

18.409332def jddieaafaadhebefafjfifcgaefafdcj(I):
  two_indices = ofcolor(I, 2) # Get indices of all '2' cells
  eight_indices = ofcolor(I, 8) # Get indices of all '8' cells

  if any(i < min(eight_indices)[0] for i, j in two_indices):  # Check if any '2' is above '8'
    offset = (min(eight_indices)[0] - min(two_indices)[0], 0)
  else: 
    offset = (max(eight_indices)[0] - max(two_indices)[0] + 1, 0)

  O = paint(canvas(0, shape(I)), shift(toobject(two_indices, I), offset)) # Paint shifted '2' object onto a blank canvas
  return O

16.975048def ccaecbjigcaaejbdadfcgafebcfcgeje(I):
  two_obj = toobject(ofcolor(I, 2), I) # Extract '2' object
  eight_obj = toobject(ofcolor(I, 8), I) # Extract '8' object

  offset = (0, 0)  # Initialize offset

  # Determine vertical direction based on center of mass difference:
  if centerofmass(two_obj)[0] < centerofmass(eight_obj)[0]:
    offset = (uppermost(eight_obj) - lowermost(two_obj), 0) 
  else:
    offset = (lowermost(eight_obj) - uppermost(two_obj) + 1, 0)

  O = paint(canvas(0, shape(I)), shift(two_obj, offset)) # Paint the shifted '2' object
  return O

11.691709def cchdbaghjdadefcejhfcecedafcfceac(I):
  objs = objects(I, T, F, T)
  h = height(I)
  for obj in objs:
    for _ in range(h):
      shifted = shift(obj, DOWN)
      if not any(vmatching(shifted, o) for o in objs - {obj}):
        obj = shifted
    I = paint(cover(I, obj), obj)
  return I

12.796181def dfcicebijgbceicajagfbbddbfgbcdfc(I):
  h = height(I)
  for i in range(h - 1, 0, -1):
    for j in range(width(I)):
      if index(I, (i, j)) == ZERO and index(I, (i - 1, j)) != ZERO:
        I = paint(cover(I, {(index(I, (i - 1, j)), (i - 1, j))}), {(index(I, (i - 1, j)), (i, j))})
  return I

13.149296def aefbddfhfiaieccaiedaadfddejbcbaj(I):
  objs = objects(I, T, F, T)
  bg = mostcolor(I)
  sorted_objs = order(objs, lambda obj: uppermost(obj))
  O = canvas(bg, shape(I))
  current_height = len(I)
  for obj in sorted_objs:
    O = paint(O, shift(obj, (current_height - uppermost(obj) - height(obj), 0)))
    current_height -= height(obj)
  return O

29.338907def fhcbjgdgebefefifaabjfcdacbfffjaj(I):
  objs = objects(I, T, F, T)
  bg = mostcolor(I)
  bottom_objs = sfilter(objs, lambda obj: uppermost(obj) > len(I) // 2)
  top_objs = sfilter(objs, lambda obj: uppermost(obj) <= len(I) // 2)
  bottom_height = sum(height(obj) for obj in bottom_objs)
  O = canvas(bg, shape(I))
  current_height = len(I) - bottom_height
  for obj in top_objs:
    O = paint(O, shift(obj, (current_height - uppermost(obj), 0)))
    current_height -= height(obj)
  current_height = len(I)
  for obj in bottom_objs:
    O = paint(O, shift(obj, (current_height - uppermost(obj), 0)))
    current_height -= height(obj)
  return O

18.041582def accgfaefjcfaeffabhhjdfadgceceahc(I):
  O = canvas(mostcolor(I), shape(I))
  for j in range(len(I[0])):
    column = tuple(I[i][j] for i in range(len(I)))
    non_bg_values = tuple(v for v in column if v != mostcolor(I))
    O = paint(O, {(v, (i + len(I) - len(non_bg_values), j)) for i, v in enumerate(non_bg_values)})
  return O

16.40903def eaebechbigiaedgajheceaajacaejhac(I):
  O = I
  for i in range(len(I) - 1, 0, -1):  # Iterate from the second to last row upwards
    for j in range(len(I[0])):
      if I[i][j] != mostcolor(I) and I[i - 1][j] == mostcolor(I):
        temp = I[i][j]
        O = paint(cover(O, {(temp, (i, j))}), {(temp, (i - 1, j))})
  return O

11.840365def eebcbghbedabeidajbdhccjbfbdaiafd(I):
  two_indices = ofcolor(I, 2)  # Find indices of '2'
  eight_indices = ofcolor(I, 8) # Find indices of '8'
  
  # Align based on relative vertical positions
  if uppermost(two_indices) > lowermost(eight_indices):
    offset = (lowermost(eight_indices) - uppermost(two_indices), 0)
  else:
    offset = (uppermost(eight_indices) - lowermost(two_indices) - height(two_indices) + 1, 0)

  # Move '2' by changing its indices
  moved_two_indices = shift(two_indices, offset) 
  O = fill(canvas(0, shape(I)), 2, moved_two_indices) # Fill with '2' at new indices
  O = underpaint(O, asobject(I)) # Paint other objects on top
  return O 

15.491249def feaadeahicdbeafgbfejdddeheciddhb(I):
    for j in range(width(I)):
        for i in range(height(I)-1, -1, -1):
            if index(I, (i, j)) == TWO:
                offset = 0
                while i + offset + 1 < height(I) and index(I, (i + offset + 1, j)) == ZERO:
                    offset += 1
                I = paint(cover(I, {(TWO, (i, j))}), {(TWO, (i + offset, j))})
    return I

13.860639def dgdgajbhcgdjecbdjbabefadfadigibg(I):
  objs = objects(I, T, F, T)  # Extract objects
  bg = mostcolor(I)  # Identify background color
  def sort_key(obj): return (uppermost(obj), -leftmost(obj)) # Sort by uppermost row, then rightmost column in case of tie
  sorted_objs = order(objs, sort_key)  # Sort objects based on their top row index
  bottom_obj = sorted_objs[0]
  O = paint(canvas(bg, shape(I)), bottom_obj)  # Place the bottom object
  current_height = uppermost(bottom_obj)
  for i in range(1, len(sorted_objs)):
    obj = sorted_objs[i]
    O = paint(O, shift(obj, (current_height - uppermost(obj), 0)))  # Shift and paint remaining objects
    current_height -= height(obj)
  return O

15.565005def bfghfiaeacbfeaagagdjbbgddibdcefc(I):
  objs = objects(I, T, F, T)
  bg = mostcolor(I)
  heights = apply(height, objs)
  total_height = sum(heights) # Calculate the total height occupied by all objects
  current_height = total_height
  O = canvas(bg, shape(I))
  for obj in objs:
    O = paint(O, shift(obj, (current_height - height(obj) - uppermost(obj), 0))) # Calculate the shift based on total and current height
    current_height -= height(obj)
  return O

6.7295995def haiabhjfdifeedeeibfafccaecgehebg(I):
  objs = objects(I, T, F, T)
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  bottom_obj = argmax(objs, lambda obj: lowermost(obj)) # Find the object with the lowest bottom row
  O = paint(O, bottom_obj)  # Place the bottom object
  remaining_objs = remove(bottom_obj, objs)
  current_height = uppermost(bottom_obj)
  for i in range(len(remaining_objs)):
    next_obj = argmax(remaining_objs, lambda obj: lowermost(obj)) # Find the next lowest object
    O = paint(O, shift(next_obj, (current_height - uppermost(next_obj) - height(next_obj), 0)))
    current_height -= height(next_obj)
    remaining_objs = remove(next_obj, remaining_objs)
  return O

21.501308def debehaedbfdcebecafcgbgebajjedbcb(I):
  objs = objects(I, univalued=False, diagonal=False, without_bg=True)
  bottom_positions = sorted((uppermost(obj) + height(obj), obj) for obj in objs) # Calculate the bottom edge Y-coordinate of each object and sort by it
  shifted_objs = [shift(obj, (height(I) - bottom_pos, 0)) for bottom_pos, obj in bottom_positions] # Shift objects based on sorted bottom positions
  return paint(canvas(0, shape(I)), merge(shifted_objs))

12.939599def adejjjcghbicedeibcggacfecdgegcfb(I):
  two_indices = ofcolor(I, 2)
  eight_indices = ofcolor(I, 8)
  offset = (uppermost(eight_indices) - uppermost(two_indices), 0)
  moved_two_indices = shift(two_indices, offset)
  O = fill(canvas(0, shape(I)), 2, moved_two_indices)
  O = underpaint(O, asobject(I))
  return O

29.351538def cddfieiaafibedeibfafdaiafccifcab(I):
  twos = toindices(first(colorfilter(objects(I, True, False, True), TWO)))
  eights = toindices(first(colorfilter(objects(I, True, False, True), EIGHT)))
  height_diff = uppermost(eights) - lowermost(twos) - 1
  shifted_twos = shift(twos, (height_diff, 0))
  O = fill(I, ZERO, asindices(I))
  O = fill(O, TWO, shifted_twos)
  return O

13.541089def aefjdbghfjbeeahaidfjeeibjiefaadj(I):
  obj2 = first(colorfilter(objects(I, True, False, True), TWO))
  obj8 = first(colorfilter(objects(I, True, False, True), EIGHT))
  v_diff = uppermost(obj8) - lowermost(obj2) - 1
  obj2 = shift(obj2, (v_diff, 0))
  O = paint(fill(I, ZERO, asindices(I)), obj2)
  O = paint(O, recolor(EIGHT, obj8))
  return O

31.334219def eigccbiefghaecgeaefjgbeadejhbcji(I):
  objs = objects(I, T, F, T)
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  eights = sfilter(objs, lambda o: color(o) == 8)
  twos = sfilter(objs, lambda o: color(o) == 2)
  other_objs = objs - eights - twos
  bottom = len(I)
  for eight in order(eights, lambda o: -leftmost(o)):
    left = (len(I[0]) - width(eight)) // 2
    O = paint(O, shift(eight, (bottom - height(eight), left)))
    bottom -= height(eight)
  for two in order(twos, lambda o: -leftmost(o)):
    left = (len(I[0]) - width(two)) // 2
    O = paint(O, shift(two, (bottom - height(two), left)))
    bottom -= height(two)
  for obj in order(other_objs, lambda o: -leftmost(o)):
    left = (len(I[0]) - width(obj)) // 2
    O = paint(O, shift(obj, (bottom - height(obj), left)))
    bottom -= height(obj)
  return O

29.530653def ehaaidebbaebeaccadjiiejdchbagaie(I):
  objs = objects(I, T, F, T)
  bg = mostcolor(I)
  height_8 = sum(height(o) for o in sfilter(objs, lambda o: color(o) == 8))
  height_2 = sum(height(o) for o in sfilter(objs, lambda o: color(o) == 2))
  O = canvas(bg, shape(I))
  current_height = len(I)
  for obj in objs:
    if color(obj) == 8:
      O = paint(O, shift(obj, (current_height - height_8, (len(I[0]) - width(obj)) // 2)))
      current_height -= height(obj)
    elif color(obj) == 2:
      O = paint(O, shift(obj, (current_height - height_2, (len(I[0]) - width(obj)) // 2)))
      current_height -= height(obj)
    else:
      O = paint(O, shift(obj, (current_height - height(obj), (len(I[0]) - width(obj)) // 2)))
      current_height -= height(obj)
  return O

12.515225def faagccefeibaeejgagfcajhdcbeebigg(I):
  objs = sorted(objects(I, True, False, True), key=lambda obj: (lowermost(obj), leftmost(obj)))
  O = I
  for obj in objs:
    O = paint(cover(O, obj), shift(obj, (height(I) - lowermost(obj) - height(obj), 0)))
  return O

38.569096def icceaebcfbgdeejdifedcacdbdahgieh(I):
  h, w = shape(I)
  O = canvas(mostcolor(I), (h, w))
  for j in range(w):
    column_objs = sorted(objects(crop(I, (0, j), (h, 1)), True, False, True), key=height)
    current_height = 0
    for obj in column_objs:
      O = paint(O, shift(obj, (h - current_height - height(obj), j - leftmost(obj))))
      current_height += height(obj)
  return O

12.474563def gaaeigbigjbbeaheijdcdbgecabcdecc(I):
  two_indices = ofcolor(I, 2) # Get indices of '2' cells
  eight_indices = ofcolor(I, 8) # Get indices of '8' cells
  offset = uppermost(eight_indices) - uppermost(two_indices) # Calculate vertical offset
  moved_indices = shift(two_indices, (offset, 0)) # Calculate new indices for '2' cells
  O = fill(fill(I, 0, two_indices), 2, moved_indices) # Fill old '2' positions with 0, then new with 2
  return O

12.065797def febgfbeffgeceejhjbiebcaccdgcgcbd(I):
  """
  This version directly modifies the input grid by iterating 
  through rows from bottom to top and moving non-background cells down. 
  """
  grid = list(list(row) for row in I)
  h, w = len(grid), len(grid[0])
  bg = mostcommon(I)
  for i in range(h - 2, -1, -1):
    for j in range(w):
      if grid[i][j] != bg:
        k = i + 1
        while k < h and grid[k][j] == bg:
          grid[k][j], grid[k - 1][j] = grid[k - 1][j], grid[k][j]
          k += 1
  return tuple(tuple(row) for row in grid)

120.84098def cfbddaabhcjfebccadbiehjedgaafedj(I):
  """
  This version uses recursion to shift the objects down one row
  at a time until all objects have reached the bottom. 
  """
  def shift_down(grid):
    h = height(grid)
    if h <= 1:
      return grid
    top = grid[:h - 1]
    bottom = grid[h - 1:]
    shifted = tuple(
        tuple(
            bottom[i][j] if bottom[i][j] != mostcommon(I) else top[i][j]
            for j in range(len(bottom[0]))
        )
        for i in range(len(bottom))
    )
    return shift_down(shifted)
  return shift_down(I)

25.239933def ediajedfddfdeacabihcefdbgfddgjid(I):
  objs = objects(I, T, F, T)
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  bottom = height(I) - 1
  for obj in sorted(objs, key=lambda o: -uppermost(o)):
    left = (width(I) - width(obj)) // 2
    O = paint(O, shift(obj, (bottom - height(obj) + 1, left)))
    bottom -= height(obj)
  return O

17.184813def jdbdjeajjgbhecijibgfgbbeefjajhjj(I):
  objs = objects(I, T, F, T)
  bg = mostcolor(I)
  heights = {obj: height(obj) for obj in objs}
  total_height = sum(heights.values())
  current_height = total_height
  O = canvas(bg, (height(I), width(I)))
  for obj in objs:
    left = (width(I) - width(obj)) // 2
    O = paint(O, shift(obj, (current_height - heights[obj], left)))
    current_height -= heights[obj]
  return O

36.85843def eddahaghbdbdechcahfaebcahehdcdcb(I):
  obj2 = first(colorfilter(objects(I, True, False, True), TWO)) # Identify the object made of '2's.
  obj8 = first(colorfilter(objects(I, True, False, True), EIGHT)) # Identify the object made of '8's.
  new_obj2 = shift(obj2, (uppermost(obj8)-lowermost(obj2)-height(obj2)+1, 0)) # Calculate the shift needed to move '2' object above '8' object and apply it.
  O = paint(fill(I, ZERO, asindices(I)), new_obj2) # Create a blank canvas and paint the shifted '2' object.
  return O

40.92724def ccgcbdigcfbdeeadjbagdfabhcdbeicc(I):
  obj2 = toobject(ofcolor(I, TWO), I) # Find the '2' object using indices.
  obj8 = toobject(ofcolor(I, EIGHT), I) # Find the '8' object using indices.
  offset = (uppermost(obj8) - height(obj2) - lowermost(obj2), 0) # Calculate the vertical offset.
  O = paint(fill(I, ZERO, asindices(I)), shift(obj2, offset)) # Shift the '2' object and paint it on a blank canvas.
  return O

52.397247def aeefabbgccdcedceiaadgfcbjbcacfac(I):
  objs = objects(I, T, F, T)
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  for obj in sorted(objs, key=lambda o: uppermost(o)):
    left = (width(I) - width(obj)) // 2 
    O = paint(fill(O, bg, toindices(asobject(O[:lowermost(obj)]))), shift(obj, (lowermost(obj) - height(obj), left)))
  return O

18.190168def chgdfgfhfdgeeaiiihedcicfcdicacfi(I):
  obj2 = extract(objects(I, True, False, True), lambda obj: color(obj) == 2)
  obj8 = extract(objects(I, True, False, True), lambda obj: color(obj) == 8)
  new_obj2 = shift(obj2, (height(I) - uppermost(obj2) - height(obj2), 0))
  new_obj8 = shift(obj8, (2, 0))
  O = paint(paint(fill(I, 0, asindices(I)), new_obj2), new_obj8)
  return O

15.979022def dccffbfddgbjehddjhgacfdefadbafah(I):
  obj2 = first(colorfilter(objects(I, True, False, False), TWO))
  grid_height = height(I)
  obj2_height = height(obj2)
  vertical_shift = grid_height - obj2_height - uppermost(obj2)
  shifted_obj2 = shift(obj2, (vertical_shift, 0))
  O = paint(fill(I, ZERO, obj2), shifted_obj2)
  return O

12.065797def igedefdgibjfefefahaheaiebadddfgf(I):
  objs = objects(I, True, False, False)
  obj2 = first(colorfilter(objs, TWO))
  other_objs = difference(objs, {obj2})
  shifted_obj2 = shift(obj2, (height(I) - height(obj2) - uppermost(obj2), 0))
  O = paint(I, shifted_obj2)
  for obj in other_objs:
    O = paint(O, obj)
  return O

14.278925def fjhfbffeagdaeideigedcgeaaedgbgbf(I):
  objs = sorted(objects(I, T, F, T), key=lambda o: uppermost(o))
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  current_height = height(I)
  for obj in objs:
    center_offset = (width(O) - width(obj)) // 2
    obj = shift(obj, (current_height - uppermost(obj) - height(obj), center_offset))
    O = paint(O, obj)
    current_height -= height(obj)
  return O 

14.123837def afacddfeedideajdbfddhijjedhbaeee(I):
  objs = objects(I, T, F, T)
  bg = mostcolor(I)
  out = canvas(bg, shape(I))
  top = 0
  for obj in sorted(objs, key=lambda obj: uppermost(obj)):
    h = height(obj)
    w = width(obj)
    left = (width(I) - w) // 2
    out = paint(out, shift(obj, (top - uppermost(obj), left)))
    top += h
  return out

12.6275215def cfafdiaeeebfeciaacehifcabbiehgdj(I):
    objs = sorted(objects(I, T, F, T), key=lambda x: -lowermost(x))
    bg = mostcolor(I)
    output = canvas(bg, shape(I))
    current_height = 0
    for obj in objs:
        w = width(obj)
        offset = (width(I) - w) // 2
        obj = shift(obj, (current_height, offset))
        output = paint(output, obj)
        current_height += height(obj)
    return output

18.509668def ehhdebabbdgeejadadghhcchaffccaed(I):
  objs = objects(I, True, False, True)
  O = I
  for obj in objs:
    if color(obj) == 2:
      for i in range(uppermost(obj) + 1, height(I) - height(obj) + 1):
        new_obj = shift(obj, (i - uppermost(obj), 0))
        if len(intersection(toindices(new_obj), asindices(O))) != len(obj):
          O = paint(cover(O, obj), shift(new_obj, (-1, 0)))
          break
      else:
        O = paint(cover(O, obj), shift(obj, (height(I) - uppermost(obj) - height(obj), 0)))
    elif color(obj) == 8:
      O = paint(cover(O, obj), shift(obj, (2, 0)))
  return O

20.306293def ajdddjiffacceadfbcbbchdcagbdegej(I):
  objs = objects(I, True, False, True)
  O = I
  for obj in objs:
    if color(obj) == 2:
      O = paint(cover(O, obj), shift(obj, gravitate(obj, ((height(I) - 1, 0), (height(I) - 1, width(I) - 1)))))
    elif color(obj) == 8:
      O = paint(cover(O, obj), shift(obj, (2, 0)))
  return O

12.660789def bbeaefifjehbeddgicaegededdjhcdbj(I):
  two_indices = ofcolor(I, 2) # Get indices of cells with color 2
  eight_top = uppermost(ofcolor(I, 8)) # Find the top row of the object with color 8
  two_top = uppermost(two_indices) # Find the top row of the object with color 2
  row_diff = eight_top - two_top # Calculate the difference in row positions
  new_two_indices = shift(two_indices, (row_diff, 0)) # Shift the indices of '2' object
  O = paint(canvas(0, shape(I)), recolor(2, new_two_indices) | recolor(8, ofcolor(I, 8))) # Paint the moved '2' and the '8' object onto a blank canvas
  return O

52.397247def fjajgdgbccffeacaifddaacbfahfiibf(I):
  objs = objects(I, T, F, T)  # Extract non-background objects
  bg = mostcolor(I)  # Identify the background color
  h = height(I)  # Get the height of the grid
  for obj in objs:
    for i in range(h):
      shifted = shift(obj, (i,0))  # Shift object downwards
      if not any(v != bg for v, (si, sj) in shifted if 0 <= si < h): 
        # If no object collision and within grid bounds
        I = paint(cover(I, obj), shifted)  # Update the grid
        break
  return I

14.367688def ejcehebheeieechdiabfdebeiacdhgag(I):
  objs = sorted(objects(I, T, F, T), key=lambda obj: uppermost(obj))  # Sort objects from top to bottom
  for obj in objs:
    shifted = obj  # Initialize shifted object
    for i in range(1, height(I)):
      down = shift(shifted, (1, 0))
      if not any(toindices(down) & toindices(o) for o in objs if o != obj) and lowermost(down) < height(I):
        # If no collision and within grid, move object down
        shifted = down
      else:
        break
    I = paint(cover(I, obj), shifted)  # Update the grid with the final shifted object
  return I 

21.43018def jhgcbabbacfiefbjjjcfdegedfjfcbci(I):
  h = height(I)
  new_grid = canvas(mostcolor(I), shape(I))  # Create an empty grid
  for obj in objects(I, T, F, T):
    upper = uppermost(obj)
    lower_bound = h - height(obj)
    new_pos = max(0, lower_bound - upper)  # Calculate the new upper position
    new_grid = paint(new_grid, shift(obj, (new_pos, 0)))  # Place the object in the new position
  return new_grid

30.912306def cgeefdechgcdeebebbaahhdjbacicbej(I):
  objs = objects(I, T, F, T)
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  current_height = height(I) 
  for color in sorted(palette(I) - {bg}):
    for obj in sizefilter(colorfilter(objs, color), maximum(apply(size, colorfilter(objs, color)))):
      O = paint(O, shift(obj, (current_height - height(obj), 0)))
      current_height -= height(obj)
  return O

24.936594def baeiihaedbdgeiaeiffehedaddcefecb(I):
  objs = objects(I, T, F, T)
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  placement = {
      2: (height(I) - 4, 0),
      8: (height(I) - 8, 0)
  }
  for color, (i, j) in placement.items():
    for obj in sizefilter(colorfilter(objs, color), maximum(apply(size, colorfilter(objs, color)))):
      O = paint(O, shift(obj, (i, j)))
  return O

30.451738def cfcdhfdfcacbeceeaigiijbjciecdaee(I):
  objs = objects(I, T, F, T)
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  sorted_objs = sorted(objs, key=lambda obj: (-color(obj), -size(obj))) 
  current_height = height(I)
  for obj in sorted_objs:
    O = paint(O, shift(obj, (current_height - height(obj), 0)))
    current_height -= height(obj)
  return O

19.233837def bdccigebgbcaeafcaaebbheabcacbeaf(I):
    # Identify objects
    objs = objects(I, T, T, T) 
    
    # Apply transformations to each object based on color
    new_objs = set()
    for obj in objs:
        color_val = color(obj)
        if color_val == 2:
            new_objs.add(shift(obj, (6, 0))) # Shift down by 6 rows
        elif color_val == 8:
            new_objs.add(shift(obj, (1, 0))) # Shift up by 1 row
        else: 
            new_objs.add(obj) # Keep other objects in place

    # Create a new object (8s) for input 0 and 1 
    if height(I) in (10, 14): 
        new_objs.add(recolor(8, shift(extract(objs, matcher(color, 2)), (2, 0))))
    
    # Paint the transformed objects onto a blank canvas
    O = paint(canvas(0, shape(I)), merge(new_objs))
    return O

37.717857def ffebfdadacjgecgcaffaejbhdcabbice(I):
    # Partition the grid based on color
    parts = partition(I)

    # Move each partition based on color
    new_parts = set()
    for part in parts:
        color_val = color(part)
        if color_val == 2:
            new_parts.add(shift(part, (6,0)))
        elif color_val == 8:
            new_parts.add(shift(part, (1, 0)))
        else:
            new_parts.add(part)

    # Create a new "8" object for input 0 and 1
    if height(I) in (10, 14):
        two_obj = extract(parts, matcher(color, 2))
        new_parts.add(recolor(8, shift(two_obj, (2,0))))
    
    # Paint the transformed partitions onto a blank canvas
    O = paint(canvas(0, shape(I)), merge(new_parts))
    return O

26.498861def fhcjdibefggiehadiabcabdaecfigfid(I):
    h, w = shape(I)
    O = canvas(0, (h, w))

    # Iterate through the grid and move colors based on their count
    for i in range(h):
        for j in range(w):
            color_val = I[i][j]
            if color_val == 2:
                new_i = (i + 6) % h
                O = fill(O, color_val, {(new_i, j)})
            elif color_val == 8 and i > 0:
                new_i = (i - 1) % h
                O = fill(O, color_val, {(new_i, j)})
            else:
                O = fill(O, color_val, {(i, j)})

    return O

24.622972def fcffffcdaegaeebbafeicghfbdfaadca(I):
    objs = objects(I, T, T, T)
    new_objs = set()
    for obj in objs:
        color_val = color(obj)
        if color_val == 2:
            new_objs.add(shift(obj, (6, 0)))
        elif color_val == 8:
            mirrored_obj = vmirror(obj)
            new_objs.add(shift(mirrored_obj, (1, 0)))
        else:
            new_objs.add(obj)
    O = paint(canvas(0, shape(I)), merge(new_objs))
    return O

10.795535def begfgccaefieebbbbcbdchaaichadged(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True) 
  shifted_objs = frozenset()
  for obj in objs:
    color_val = color(obj)
    upper = uppermost(obj)
    shift_amount = (6 if color_val == 2 else 3) if upper == 2 else (2 if color_val == 2 else 1)
    shifted_objs = shifted_objs | {shift(obj, (shift_amount, 0))}
  O = paint(I, merge(shifted_objs))
  return O

11.900845def bcaabidfahdfefaaadfdhafaajbcadfi(I):
  if 2 in I[2]:
    O = vconcat(crop(I, (8, 0), (3, width(I))), crop(I, (0, 0), (8, width(I))))
  elif 2 in I[1]:
    O = vconcat(crop(I, (2, 0), (8, width(I))), crop(I, (0, 0), (2, width(I))))
  else: 
    O = I
  return O

31.177082def ceadbcgjadaceidhijfbjchcjcacdcca(I):
    bg = mostcolor(I)
    objs = sorted(objects(I, T, F, T), key=lambda x: -uppermost(x))
    output = canvas(bg, shape(I))
    current_height = height(I)
    for obj in objs:
        h = height(obj)
        w = width(obj)
        offset = (width(I) - w) // 2
        obj = shift(obj, (current_height - h, offset))
        output = paint(output, obj)
        current_height -= h
    return output

30.79198def ghjbdegdbdceehfbbejdafbbaafdfaee(I):
    bg = mostcolor(I)
    objs = objects(I, T, F, T)
    output = canvas(bg, shape(I))
    y = height(I)
    for obj in objs:
        h = height(obj)
        w = width(obj)
        x = (width(I) - w) // 2
        output = paint(output, shift(obj, (y - h, x)))
        y -= h
    return output

53.166367def hdcaeecgieaiehcajgbiedihficgajfb(I):
  bg = mostcolor(I)
  objs = objects(I, T, F, T)
  compressed = I
  for obj in objs:
    compressed = cover(compressed, obj)
  output = vconcat(canvas(bg, (height(I) - len(objs), width(I))), compressed)
  return output

15.453856def ecbfdghaadeeefjbjdffcbbdacdcdici(I):
  bg = mostcolor(I)
  objs = objects(I, T, F, T)
  output = canvas(bg, shape(I))
  bottom_edge = frozenset((height(I) - 1, j) for j in range(width(I)))
  for obj in objs:
    offset = gravitate(obj, bottom_edge)
    output = paint(output, shift(obj, offset))
  return output

18.788424def edacjdebjjccedecjefafgcbgcfcfeaa(I):
    for j in range(width(I)): # Iterate over each column
        for i in range(height(I) - 1, -1, -1): # Iterate from bottom to top
            if index(I, (i, j)) != 0: # If a non-background cell is found
                obj = toobject(initset((i, j)), I)  # Create an object from the cell
                I = paint(cover(I, obj), shift(obj, (height(I) - 1 - i, 0)))  # Move the object to the bottom
                break  # Move to the next column
    return I

24.9224def ecdeaijcjigiebjejaaabjbaficeafae(I):
  objs = objects(I, T, F, T)
  for obj in objs:
    i, j = ulcorner(obj) # Get top-left corner of the object
    empty_space = height(I) - i - height(obj)  # Calculate empty space below the object
    I = paint(cover(I, obj), shift(obj, (empty_space, 0)))  # Shift the object down by empty_space
  return I

52.397247def hdcdcfcabcedeaafagbecgccfcbceffe(I):
  h = height(I)
  for j in range(width(I)):
    k = h - 1
    for i in range(h - 1, -1, -1):
      if index(I, (i, j)) != 0:
        if i != k:
          I = paint(cover(I, toobject(initset((i, j)), I)), toobject(initset((k, j)), I))
        k -= 1
  return I

28.840971def ehjeacegfbcbeeahbbeebgccdceijeah(I):
  objs = objects(I, T, F, T)
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  sorted_objs = sorted(objs, key=lambda obj: color(obj))
  current_height = height(I)
  for obj in sorted_objs:
    O = paint(O, shift(obj, (current_height - height(obj), leftmost(obj))))
    current_height -= height(obj)
  return O

11.396784def aifahbaeecfaecegbcacbhgeeeaeidid(I):
  objs = objects(I, T, F, T)
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  for obj in sorted(objs, key=lambda obj: -uppermost(obj)):
    O = paint(O, obj)
  return O

31.662786def cfacaeeebbgaeebcjehicbbfffifbebg(I):
  objs = objects(I, T, F, T)
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  heights = {c: sum(height(obj) for obj in objs if color(obj) == c) for c in palette(I)}
  current_height = {c: heights[c] for c in heights}
  for obj in objs:
    c = color(obj)
    O = paint(O, shift(obj, (height(I) - current_height[c], leftmost(obj))))
    current_height[c] -= height(obj)
  return O

10.018521def fggjdjahgcbeeaiiigfccfhafccbcdha(I):
  objs = sorted(objects(I, T, T, T), key=lambda obj: color(obj))
  h = height(I)
  positions = [(8, 2), (10, 2)] if h == 14 else [(4, 3), (6, 5)] if h == 10 else [(1, 2), (4, 2)] 
  O = canvas(0, shape(I))
  for i, obj in enumerate(objs):
    O = paint(O, shift(obj, positions[i]))
  return O

15.693247def eebhdfedcbdieffeaicafafhcegaagaj(I):
  h = height(I)
  obj2 = toobject(ofcolor(I, 2), I)
  obj8 = toobject(ofcolor(I, 8), I)
  if h == 14:
    O = paint(paint(canvas(0, (14, 9)), shift(obj2, (8, 2))), shift(obj8, (10, 2)))
  elif h == 10:
    O = paint(paint(canvas(0, (10, 10)), shift(obj2, (4, 3))), shift(obj8, (6, 5)))
  else:
    O = paint(paint(canvas(0, (11, 10)), shift(obj8, (1, 2))), shift(obj2, (4, 2)))
  return O

21.829918def jbeeefajeaidejjdifbabefcaecceijd(I):
  objs = objects(I, T, T, T)
  sorted_objs = sorted(objs, key=lambda obj: -color(obj)) # Sort in descending order
  h = height(I)
  base_pos = (h // 2, width(I) // 2) # Base position at the center
  O = canvas(0, shape(I))
  for i, obj in enumerate(sorted_objs):
    offset = (i * 2, 0)  # Vertical offset based on object order
    O = paint(O, shift(obj, add(base_pos, offset)))
  return O

14.493203def eeiadgjfahjceeccbdajccegdbfeafhi(I):
  objs = objects(I, True, False, True)
  O = I
  for color_val in (2, 8):
    for obj in sfilter(objs, lambda o: color(o) == color_val):
      shift_amount = (6 if color_val == 2 else 3) if uppermost(obj) == 2 else (2 if color_val == 2 else 1)
      O = move(O, obj, (shift_amount, 0))
  return O

11.853999def baeacgffjddaegbdbcidfgbhcjcaaafa(I):
  O = I
  for i, row in enumerate(I):
    for color_val, shift1, shift2 in ((2, 6, 2), (8, 3, 1)):
      if color_val in row:
        shift_amount = shift1 if i == 2 else shift2
        O = fill(O, 0, {(i, j) for j in range(width(I))})
        O = fill(O, color_val, {(i + shift_amount, j) for j in range(width(I))})
  return O

16.290524def fbhaeafegcieeciejaaeibjihgheceae(I):
  h = height(I)
  O = canvas(0, (h, width(I)))
  for color_val, shift1, shift2 in ((2, 6, 2), (8, 3, 1)):
    indices = ofcolor(I, color_val)
    shifted_indices = frozenset({(i + (shift1 if i == 2 else shift2), j) for i, j in indices})
    O = fill(O, color_val, shifted_indices)
  return O

15.692924def aaffcbbaaegcebcebeegabhfjibhabfc(I):
  objs = objects(I, True, False, True)
  O = I
  for obj in objs:
    c = color(obj)
    u = uppermost(obj)
    O = move(O, obj, ((6 if c == 2 else 3) if u == 2 else (2 if c == 2 else 1), 0))
  return O

19.566847def hbcacahbjfececcfabjjjicccgieaehd(I):
  objs = sorted(objects(I, T, F, T), key=lambda x: len(x), reverse=True)
  output = canvas(mostcolor(I), shape(I))
  current_height = height(I)
  for obj in objs:
    current_height -= min(height(obj), current_height)
    obj = shift(normalize(obj), (current_height, 0))
    output = paint(output, obj)
  return output

20.716444def cibcjdiebecaebjaifbaeaebjdhghcba(I):
  objs = objects(I, T, F, T)
  bg = mostcolor(I)
  output = canvas(bg, shape(I))
  for i, obj in enumerate(sorted(objs, key=lambda x: -len(x))):
    obj = normalize(obj)
    h, w = shape(obj)
    output = paint(output, shift(obj, (height(output) - h * (i + 1), 0)))
  return output

17.920479def ieihbaebdcbdejjcajifibjdfjcdcddd(I):
    objs = sorted(objects(I, T, F, T), key=len, reverse=True)
    output = canvas(mostcolor(I), shape(I))
    top = 0
    for obj in objs:
        h = height(obj)
        output = paint(output, shift(obj, (top, 0)))
        top += h 
    return output

20.485344def bbfbaicdfahdedceafdcaaaahbcaieca(I):
  objs = objects(I, T, F, T)
  new_objs = {shift(obj, (height(I) - height(obj) - uppermost(obj), 0)) for obj in objs} 
  # Calculate new positions for all objects
  return paint(canvas(0, shape(I)), merge(new_objs)) # Paint all objects onto a blank canvas

20.882292def aicdcfacadcaecadjdchcbjefaeibaee(I):
  objs = sorted(objects(I, T, F, T), key=lambda obj: color(obj))
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  h = height(I)
  for obj in objs:
    O = paint(O, shift(obj, (h - uppermost(obj) - height(obj), 0)))
  return O

16.091988def acfifgddeabbehjbbffbgiabbifaajbg(I):
  objs = objects(I, T, F, T)
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  y = height(O)
  for obj in objs:
    if color(obj) != bg:
      O = paint(O, shift(obj, (y - uppermost(obj) - height(obj), 0)))
      y -= height(obj)
  return O

14.856662def agcdbeibbijdehaaicbecfhbbefhhbcf(I):
  objs = objects(I, T, T, T)
  obj2 = extract(objs, lambda obj: color(obj) == 2)
  obj8 = extract(objs, lambda obj: color(obj) == 8) if any(color(o) == 8 for o in objs) else recolor(8, {(0, 0)})
  h = height(I)
  if h == 14:
    O = paint(paint(canvas(0, (14, 9)), shift(obj2, (9, 1))), shift(obj8, (8, 1)))
  elif h == 10:
    O = paint(paint(canvas(0, (10, 10)), shift(obj2, (4, 4))), shift(obj8, (4, 6)))
  else:
    O = paint(paint(canvas(0, (11, 10)), shift(obj2, (3, 2))), shift(obj8, (0, 2)))
  return O

16.569592def cfbcjbjfjdfiefhdadahgfdhjbacjaif(I):
  obj2 = toobject(ofcolor(I, 2), I)
  obj8 = toobject(ofcolor(I, 8), I) if colorcount(I, 8) > 0 else recolor(8, {(0, 0)})
  h = height(I)
  if h == 14:
    O = paint(paint(canvas(0, shape(I)), shift(obj2, (9, 1))), shift(obj8, (8, 1)))
  elif h == 10:
    O = paint(paint(canvas(0, shape(I)), shift(obj2, (5, 3))), shift(obj8, (5, 5)))
  else:
    O = paint(paint(canvas(0, shape(I)), shift(obj2, (4, 2))), shift(obj8, (0, 2)))
  return O

15.375145def hbbhaceajhbjehfaaejiadajeaehcfai(I):
  h = height(I)
  objs = objects(I, T, T, T)
  obj2 = extract(objs, lambda obj: color(obj) == 2)
  obj8 = extract(objs, lambda obj: color(obj) == 8) if any(color(o) == 8 for o in objs) else recolor(8, {(0, 0)})
  if h == 14:
    O = paint(canvas(0, (14, 9)), shift(obj2, (9, 1)))
    O = paint(O, shift(obj8, (8, 1)))
  elif h == 10:
    O = paint(canvas(0, (10, 10)), shift(obj2, (4, 4)))
    O = paint(O, shift(obj8, (4, 6)))
  else:
    O = paint(canvas(0, (11, 10)), shift(obj2, (4, 2)))
    O = paint(O, shift(obj8, (0, 2)))
  return O

36.479557def dibddefgebifeddejabhbeafecgefafc(I):
  objs = objects(I, True, False, False)
  shifted_objs = [(shift(obj, (height(obj), 0)), obj) for obj in objs]
  painted = I
  for shifted_obj, obj in shifted_objs:
    painted = paint(cover(painted, obj), shifted_obj) 
  O = painted
  return O

43.523655def dfiaachefdcgeebhbgjeffdchfagdajj(I):
  objs = fgpartition(I)
  painted = I
  for obj in objs:
    painted = paint(cover(painted, obj), shift(obj, (colorcount(obj, color(obj)), 0)))
  O = painted
  return O 

18.686285def dghbcgaabjaiecdcadbeaejadagiiafe(I):
  O = canvas(mostcolor(I), shape(I))
  for n in palette(I):
    obj = extract(objects(I, True, False, False), matcher(color, n))
    O = paint(O, shift(obj, (uppermost(obj), 0)))
  return O

52.397247def acbbdhfadabbeafdjcbjfbdadcbafehi(I):
  O = I
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if val != mostcommon(I):
        O = paint(cover(O, {(val, (i, j))}), {(val, (i + i, j))})
  return O

30.451738def fecdacbcdgafejiabjiffbbbafaeaici(I):
  objs = sorted(objects(I, T, F, T), key=size, reverse=T)
  O = canvas(mostcolor(I), shape(I))
  h = height(O)
  i = h
  for obj in objs:
    obj_h = height(obj)
    if i - obj_h >= 0:
      O = paint(O, shift(obj, (i - obj_h, 0)))
      i -= obj_h
  return O

30.912306def gddjedadfebjefaejedjeabccfcechej(I):
  O = canvas(mostcolor(I), shape(I))
  i = height(O)
  for s in sorted({size(obj) for obj in objects(I, T, F, T)}, reverse=T):
    for obj in sizefilter(objects(I, T, F, T), s):
      h = height(obj)
      if i - h >= 0:
        O = paint(O, shift(obj, (i - h, 0)))
        i -= h
  return O

13.211031def feibaabfdeeaedadaifccdhfcadficid(I):
  objs = sorted(objects(I, T, F, T), key=lambda obj: (color(obj), -uppermost(obj))) 
  h = height(I)
  for obj in objs:
    target_row = h - height(obj) - uppermost(obj) # Determine the target row
    obj = shift(obj, (target_row, 0)) # Shift object directly to the target row
    I = paint(cover(I, obj), obj)
  return I

13.625352def bfcghdhcffifefdfbhfafbgbgdcebfce(I):
  for c in palette(I) - {mostcolor(I)}: # Iterate over each color
    obj = extract(objects(I, T, F, T), lambda o: color(o) == c) # Extract object of that color
    h = height(I)
    target_row = h - height(obj) 
    while uppermost(obj) < target_row:
      obj = shift(obj, DOWN)
      I = paint(cover(I, obj), obj)
  return I

20.722548def dajhbcafafaiedbajdifbdbijfaebbff(I):
  new_grid = canvas(mostcolor(I), shape(I)) # Create an empty canvas
  for c in palette(I) - {mostcolor(I)}:
    obj = extract(objects(I, T, F, T), lambda o: color(o) == c)
    new_grid = paint(new_grid, shift(obj, (height(I) - height(obj) - uppermost(obj), 0)))
  return new_grid

12.515541def cfcgebfhaibeeacbafdggffgafdfddia(I):
  objs = objects(I, T, F, T)
  bottom = height(I)
  for obj in objs:
    I = paint(I, shift(obj, (bottom - uppermost(obj) - height(obj), 0)))
  return I

30.34997def cfbijbabfdjfeebdaefaifaffahacacf(I):
  objs = objects(I, T, F, T)
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  for i, obj in enumerate(sorted(objs, key=lambda obj: (color(obj), uppermost(obj)))):
    O = paint(O, shift(obj, (height(I) - height(obj) - i, 0)))
  return O

16.62252def jidabbfhjbceeeifbafabcaacdchajfa(I):
  objs = sorted(objects(I, T, T, T), key=lambda obj: color(obj)) # Separate objects
  h = height(I)
  w = width(I)
  positions = {(14, 9): ((6, 0), (12, 3)), # Predefined positions based on grid size 
               (9, 10): ((2, 3), (8, 5)), 
               (11, 10): ((3, 0), (0, 3))
              }[shape(I)]
  O = canvas(0, shape(I)) # Create an empty canvas
  for i, obj in enumerate(objs): # Place each object at its new position
    O = paint(O, shift(obj, positions[i])) 
  return O 

14.389662def hgaffjgdeibieecbaifcahbffdbcceib(I):
  obj2 = toobject(ofcolor(I, 2), I) # Identify the object with value 2
  obj8 = toobject(ofcolor(I, 8), I) # Identify the object with value 8
  h = height(I)
  w = width(I)
  offsets = {(14, 9): ((6, 0), (0, 0)), # Predefined movement offsets 
               (9, 10): ((2, 3), (0, 0)), 
               (11, 10): ((3, 0), (0, 0))
              }[shape(I)]
  obj2 = shift(obj2, offsets[0]) # Apply offset to object 2
  if colorcount(I, 8) == 0: # If object 8 doesn't exist, create it
    obj8 = recolor(8, ((h - 3, w // 2 - 1), (h - 3, w // 2))) 
  else:
    obj8 = shift(obj8, offsets[1]) # Apply offset to object 8
  O = paint(paint(canvas(0, shape(I)), obj2), obj8) # Combine objects onto the canvas
  return O

15.405058def ibcebfbgbbbiehidadffijjfjajcdegg(I):
    h = height(I)
    w = width(I)
    O = canvas(0, shape(I))
    for j in range(w):
        if h == 14:
            O = paint(O, {(2, (9 + i, j)) if 2 in I[i] else (0, (i, j)) for i in range(h)}) # Move '2's down in 14-row grids
            O = paint(O, {(8, (12, j)) if j in (3, 4) else (0, (12, j))}) # Place '8's in 14-row grids
        elif h == 9:
            O = paint(O, {(2, (2 + i, 3 + j)) if 2 in I[i] else (0, (i, j)) for i in range(h)}) # Move '2's in 9-row grids
            O = paint(O, {(8, (8, 5 + j)) if j in (0, 1) else (0, (8, j))}) # Place '8's in 9-row grids
        else:
            O = paint(O, {(2, (3 + i, j)) if 2 in I[i] else (0, (i, j)) for i in range(h)}) # Move '2's down in other grids
    return O

34.732834def hiefbfiaefeceehdbebcggecffbdieie(I):
  objs = objects(I, True, False, True)
  O = I
  for obj in objs:
    c = color(obj)
    if c == TWO:
      O = move(O, obj, (height(I) - height(obj), 0))
    elif c == EIGHT:
      O = move(O, obj, (height(I) // 2 - centerofmass(obj)[0], 0))
  return O

17.920479def ciieadjciicdeeajaccdbbaahjbbdfge(I):
  objs = sorted(objects(I, T, F, T), key=lambda obj: (color(obj), uppermost(obj)))
  h = height(I)
  for obj in objs:
    I = paint(canvas(0, shape(I)), obj) # Paint the object on a blank canvas
  return I

14.734819def jagfdbcfgaebedbfiddbjaiggghbdhec(I):
  objs = sorted(objects(I, T, F, T), key=lambda obj: (-color(obj), uppermost(obj)))
  for i in range(1, len(objs)):
    I = paint(cover(I, objs[i]), shift(objs[i], (height(I) - height(objs[i]) - uppermost(objs[i]), 0)))
  return I

30.66651def icfgegagcadfeabejfbbdcebjhccfgfj(I):
  objs = order(objects(I, T, F, T), lambda obj: (color(obj), uppermost(obj)))
  painted = canvas(0, shape(I))
  for i, obj in enumerate(objs):
    painted = paint(painted, shift(obj, (height(painted) - height(obj) * (i + 1), 0)))
  return painted

20.882292def iebegjagceafeeghahiebdigbfabbgcb(I):
  objs = sorted(objects(I, T, F, T), key=lambda o: (color(o), uppermost(o)))
  return paint(canvas(0, shape(I)), merge(apply(lambda o: shift(o, (height(I)-height(o)-uppermost(o),0)), objs))) 

22.029245def dadfdjgfdcgcebchigebfhdafdaedfbj(I):
  objs = objects(I, T, F, T)  # Extract objects
  bg = mostcolor(I)  # Get background color
  O = canvas(bg, shape(I)) # Create empty canvas
  y = height(I) # Starting height for placing objects
  for color in sorted(palette(I) - {bg}): # Iterate through colors in ascending order
    for obj in sizefilter(objs, colorcount(I, color)): # Get all objects of the current color
      obj_h = height(obj) # Get object height
      O = vconcat(O[:y-obj_h], paint(O[y-obj_h:], obj)) # Place object at the bottom
      y -= obj_h # Update current height
  return O

17.881842def aabaeffegcadechcbdhdgacfbahaaccc(I):
  objs = sorted(objects(I, T, F, T), key=lambda obj: color(obj)) # Extract and sort objects by color
  bg = mostcolor(I) # Get background color
  O = canvas(bg, shape(I)) # Create empty canvas
  bottom = height(I) # Starting height
  for obj in objs:
    obj_h = height(obj) # Get object height
    O = paint(O, shift(obj, (bottom - obj_h - uppermost(obj), 0))) # Shift and paint object
    bottom -= obj_h # Update bottom position
  return O

39.66564def aebjdjjhdhfdebceibeghfaeafgachba(I):
  objs = objects(I, T, F, T) # Extract objects
  bg = mostcolor(I) # Get background color
  O = canvas(bg, shape(I)) # Create an empty canvas
  for obj in objs:
    O = vconcat(crop(O, (0,0), (height(O)-height(obj), width(O))), paint(canvas(bg, (height(obj), width(O))), obj)) # Create a row for the object and paint the object there
  return O

52.397247def acicaceiecbfedbjaabdadehedffacea(I):
  objs = objects(I, T, F, T) # Extract objects
  bg = mostcolor(I) # Get background color
  O = canvas(bg, shape(I)) # Create an empty canvas
  heights = sorted([height(obj) for obj in objs]) # Get the heights of all objects and sort them
  y = height(I) # Starting height for placing objects
  for h in heights:
    for obj in sizefilter(objs, h): # Get objects of the current height
      O = vconcat(O[:y-h], paint(O[y-h:], obj)) # Place the object at the bottom
      y -= h # Update current height
  return O

9.814995def cagijfaeefbhefdajgcafddccbfigjbi(I):
  h = height(I)
  w = width(I)
  obj2 = toobject(ofcolor(I, 2), I)
  obj8 = toobject(ofcolor(I, 8), I)
  if h == 14:
    obj2 = shift(obj2, (h-4-uppermost(obj2), w//2-leftmost(obj2)))
    obj8 = recolor(8, {(h-2, w//2-1), (h-2, w//2)})
  elif h == 9:
    obj2 = shift(obj2, (1-uppermost(obj2), w//2-leftmost(obj2)+1))
    obj8 = recolor(8, {(h-2, w//2), (h-2, w//2+1)})
  else:
    obj2 = shift(obj2, (3-uppermost(obj2), 0))
  O = paint(paint(canvas(0, shape(I)), obj2), obj8)
  return O

9.146435def eccgcgdcbcbaegabiggdaaeedgijbche(I):
  h, w = shape(I)
  if h == 14:
    O = paint(canvas(0, (h,w)), shift(toobject(ofcolor(I, 2), I), (h-4-uppermost(toobject(ofcolor(I, 2), I)), w//2-leftmost(toobject(ofcolor(I, 2), I)))))
    O = paint(O, recolor(8, {(h-2, w//2-1), (h-2, w//2)}))
  elif h == 9:
    O = paint(canvas(0, (h,w)), shift(toobject(ofcolor(I, 2), I), (1-uppermost(toobject(ofcolor(I, 2), I)), w//2-leftmost(toobject(ofcolor(I, 2), I))+1)))
    O = paint(O, recolor(8, {(h-2, w//2), (h-2, w//2+1)}))
  else:
    O = paint(canvas(0, (h,w)), shift(toobject(ofcolor(I, 8), I), (6-uppermost(toobject(ofcolor(I, 8), I)), 0)))
    O = paint(O, shift(toobject(ofcolor(I, 2), I), (3-uppermost(toobject(ofcolor(I, 2), I)), 0)))
  return O 

31.371326def hfbcfbcecbjeefihiadbdecgicaaeccb(I):
  h, w = shape(I)
  obj2 = {(TWO, (i + h - height(toobject(ofcolor(I, TWO), I)), j)) for _, (i, j) in toobject(ofcolor(I, TWO), I)}
  obj8 = {(EIGHT, (i + h // 2 - height(toobject(ofcolor(I, EIGHT), I)) // 2 - uppermost(toobject(ofcolor(I, EIGHT), I)), j)) for _, (i, j) in toobject(ofcolor(I, EIGHT), I)}
  return paint(paint(canvas(ZERO, (h, w)), obj2), obj8)

11.398449def efbgbceccjejebbdadeaaeeijcacahhf(I):
  objs = sorted(objects(I, T, F, T), key=lambda x: color(x))
  bg = mostcolor(I)
  output = canvas(bg, shape(I))
  current_height = 0
  for i, obj in enumerate(objs):
    if i == 0:
        offset = (width(I) - width(obj)) // 2
        obj = shift(obj, (current_height, offset))
    else:
        obj = shift(obj, (current_height, 0))
    output = paint(output, obj)
    current_height += height(obj)
  return output 

11.396784def cabbbbfcbiehefbfibjaabcdbjbbjacb(I):
  objs = sorted(objects(I, T, F, T), key=lambda x: color(x))
  bg = mostcolor(I)
  output = canvas(bg, shape(I))
  current_pos = (0, 0)
  for i, obj in enumerate(objs):
    if i > 0:
        direction = gravitate(obj, objs[i-1])
        obj = shift(obj, direction)
    output = paint(output, obj)
    current_pos =  (current_pos[0] + height(obj), current_pos[1])
  return output

32.67429def cfffeajfcdiaeijbafefjffgjbdiddjc(I):
    objs = sorted(objects(I, T, F, T), key=lambda x: color(x))
    bg = mostcolor(I)
    output = canvas(bg, shape(I))
    h = 0
    for i, obj in enumerate(objs):
        if i == 0:
            corner = ulcorner(shift(obj, (h, (width(I) - width(obj)) // 2)))
            obj = shift(obj, subtract((h, 0), corner))
        else:
            obj = shift(obj, (h, 0))
        output = paint(output, obj)
        h += height(obj)
    return output

11.79914def haheceaadaiaeejeacajcaaiaiebbibg(I):
  objs = sorted(objects(I, T, F, T), key=lambda x: color(x))
  bg = mostcolor(I)
  output = canvas(bg, shape(I))
  current_pos = (0, (width(I) - width(objs[0])) // 2)
  output = paint(output, shift(objs[0], current_pos))
  for i in range(1, len(objs)):
    obj = objs[i]
    prev_obj = objs[i-1]
    center_current = centerofmass(obj)
    center_prev = centerofmass(prev_obj)
    obj = shift(obj, subtract(center_prev, center_current))
    current_pos =  (current_pos[0] + height(prev_obj), current_pos[1])
    obj = shift(obj, (current_pos[0] - uppermost(obj), 0))
    output = paint(output, obj)
  return output

29.684315def ddeecdbajabaegiijebdceiadddaecbc(I):
    objs = objects(I, T, T, T) 
    bg = mostcolor(I)
    O = canvas(bg, shape(I))
    sorted_objs = order(objs, lambda obj: -height(obj))
    current_height = height(I)
    for obj in sorted_objs:
      O = paint(O, shift(obj, (current_height - height(obj), leftmost(obj))))
      current_height -= height(obj)
    return O

15.132703def ehcjdacaffadegiaiehjadffiadfeedf(I):
    objs = objects(I, T, T, T)
    bg = mostcolor(I)
    O = canvas(bg, shape(I))
    for obj in objs:
        obj_height = height(obj)
        top_boundary = uppermost(obj)
        new_top = top_boundary + obj_height - 1
        O = paint(O, shift(obj, (new_top - uppermost(obj), 0)))
    return O

15.65696def fgieaadebfeaebicjdafheebfchbccgb(I):
  objs = objects(I, T, T, T)
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  y = height(I)
  for obj in objs:
    x = leftmost(obj)
    obj_height = height(obj)
    O = paint(O, shift(obj, (y - obj_height - uppermost(obj), x))) 
    y -= obj_height 
  return O

11.661868def afcjgeedddejecehiffchdfadjighfec(I):
  h, w = shape(I)
  target_positions = {(14, 9): {2: (h-4, 0), 8: (h-2, w//2-1)},
                    (9, 10): {2: (1, w//2-1), 8: (5, w//2-1)},
                    (11, 10): {2: (0, 0), 8: (1, w//2-1)}}
  O = canvas(0, (h, w))
  for v in [2, 8]:
    obj = toobject(ofcolor(I, v), I)
    if len(obj) > 0: # Check if object exists
        target_i, target_j = target_positions[(h, w)][v]
        O = paint(O, shift(obj, (target_i - uppermost(obj), target_j - leftmost(obj))))
  return O

14.392395def edfgceeeaibfebffajdffgfdbfcibefa(I):
  h, w = shape(I)
  obj2 = toobject(ofcolor(I, 2), I)
  obj8 = toobject(ofcolor(I, 8), I)
  if h == 14:
    O = paint(canvas(0, (h, w)), shift(obj2, (h-4, 0)))
    O = paint(O, shift(obj8, (h-2, w//2-1)))
  elif h == 9:
    O = paint(canvas(0, (h, w)), shift(obj2, (1, w//2-1)))
    O = paint(O, shift(obj8, (5, w//2-1)))
  else:
    O = paint(canvas(0, (h, w)), shift(obj2, (0, 0)))
    O = paint(O, shift(obj8, (1, w//2-1)))
  return O

15.127981def cdicihabejbdehcdafjafdiejdbbafed(I):
    h, w = shape(I)
    O = canvas(0, (h, w))
    for obj in objects(I, True, True, False):
        c = color(obj)
        if c == 2:
            target_i, target_j = [(h-4, 0), (1, w//2-1), (0, 0)][h//10]
        elif c == 8:
            target_i, target_j = [(h-2, w//2-1), (5, w//2-1), (1, w//2-1)][h//10]
        else:
            continue
        O = paint(O, shift(obj, (target_i - uppermost(obj), target_j - leftmost(obj))))
    return O

28.99203def cbedggaibfcjecadbfiaehebfdbahdhb(I):
    O = I
    for c in sorted(palette(I) - {mostcolor(I)}):
        obj = toobject(ofcolor(I, c), I)
        O = cover(O, obj)
        obj = shift(obj, (height(I) - lowermost(obj), (width(I) - width(obj)) // 2))
        O = paint(O, obj)
    return O 

33.191677def aiabgbhbgfcfehgjideiabbecbfgehba(I):
  objs = sorted(partition(I), key=lambda x: color(x))
  bg = mostcolor(I)
  output = canvas(bg, shape(I))
  h = height(I)
  for obj in objs:
    if color(obj) != bg:
      output = paint(output, shift(obj, (h - height(obj), (width(I) - width(obj)) // 2)))
  return output

19.587952def ecedhdecbgcaecfjahcaddbdccbcaafc(I):
  O = I
  for obj in sorted(objects(I, True, False, True), key=lambda obj: color(obj)):
    O = cover(O, obj)
    O = paint(O, shift(obj, (height(I) - height(obj) - uppermost(obj), (width(I) - width(obj)) // 2)))
  return O

16.647326def fcbaefjiechiejgajiaedafcebcbaedg(I):
  h, w = shape(I)
  O = canvas(0, (h, w))
  for v, (di, dj) in {2: (h-4, w//2-1), 8: (h-2, w//2-1)}.items():
    obj = toobject(ofcolor(I, v), I)
    if len(obj) > 0:
      O = paint(O, shift(obj, (di - uppermost(obj), dj - leftmost(obj))))
  return O

20.882656def hdjcdjgeeaefeeddiiaccifbfhcgdcfa(I):
  h = height(I)
  obj2 = extract(objects(I, True, False, True), lambda obj: color(obj) == TWO)
  obj8 = toobject(ofcolor(I, EIGHT), I)
  
  # Move '2' object
  obj2_shifted = shift(obj2, (h - height(obj2), width(obj2)))

  # Place '8' object (create new if it doesn't exist)
  if len(obj8) == 0:
    obj8_shifted = toobject(ofcolor(canvas(EIGHT, (2, 2)), EIGHT), canvas(EIGHT, (2, 2)))
    obj8_shifted = shift(obj8_shifted, (h // 2 - 1, width(obj2) + 1))
  else:
    obj8_shifted = obj8

  O = paint(paint(canvas(ZERO, shape(I)), obj2_shifted), obj8_shifted)
  return O

27.488852def bgefccihheccegfdjecbehcihdfdbdae(I):
  h, w = shape(I)
  obj2 = toobject(ofcolor(I, TWO), I)
  obj8 = toobject(ofcolor(I, EIGHT), I)
  
  # Move '2' object
  obj2_shifted = shift(obj2, (h - uppermost(obj2) - height(obj2), w - rightmost(obj2)))

  # Place '8' object (create new if it doesn't exist)
  if len(obj8) == 0:
    obj8_shifted = recolor(EIGHT, toindices(crop(I, (h // 2 - 1, w // 2 - 1), (2, 2))))
  else:
    obj8_shifted = obj8

  O = paint(paint(canvas(ZERO, shape(I)), obj2_shifted), obj8_shifted)
  return O

15.445986def fbiadcdabfcfeefjafcceaebjihcbebc(I):
  h = height(I)
  w = width(I)
  obj2 = toobject(ofcolor(I, TWO), I)
  obj8 = toobject(ofcolor(I, EIGHT), I)

  # Move '2' object
  obj2_shifted = shift(obj2, (h - uppermost(obj2) - height(obj2), 0)) 

  # Place '8' object (create new if it doesn't exist)
  if len(obj8) == 0:
    obj8_shifted = recolor(EIGHT, {(h // 2 - 1, w // 2 - 1), (h // 2, w // 2 - 1), (h // 2 - 1, w // 2), (h // 2, w // 2)}) 
  else:
    obj8_shifted = obj8

  O = paint(paint(canvas(ZERO, (h, w)), obj2_shifted), obj8_shifted)
  return O

29.469812def bffddcbcdabdehddjicfjeebfdbddhbc(I):
  obj2 = extract(objects(I, True, False, True), lambda obj: color(obj) == TWO)
  obj8 = toobject(ofcolor(I, EIGHT), I)
  h = height(I)

  # Move '2' object
  obj2_shifted = shift(obj2, (h - height(obj2), 0)) 

  # Place '8' object (create new if it doesn't exist)
  if len(obj8) == 0:
    obj8_shifted = recolor(EIGHT, toindices(crop(canvas(ZERO, shape(I)), (h // 2 - 1, len(I[0]) // 2 - 1), (2, 2))))
  else:
    obj8_shifted = obj8

  O = paint(paint(canvas(ZERO, shape(I)), obj8_shifted), obj2_shifted)
  return O

11.062427def ehebcaebifafeccbbfcahaaffahddfhd(I):
  objs = sorted(objects(I, T, F, T), key=lambda x: color(x))
  bg = mostcolor(I)
  output = canvas(bg, shape(I))
  current_height = 0
  for obj in objs:
    obj = shift(obj, (current_height, leftmost(obj)))
    output = paint(output, obj)
    current_height += height(obj)
  return output

52.397247def bdieeejecgdcehffbciicbihjbbjcidf(I):
  objs = objects(I, T, F, T)
  bg = mostcolor(I)
  output = canvas(bg, shape(I))
  y = 0
  for v in sorted(palette(I) - {bg}):
    for obj in sizefilter(colorfilter(objs, v), 1):
      output = paint(output, shift(obj, (y, leftmost(obj))))
      y += 1
    for obj in sizefilter(colorfilter(objs, v), 2):
      output = paint(output, shift(obj, (y, leftmost(obj))))
      y += 2
  return output

13.212658def cecccffffbhaeabfbicbacfaiaeafjee(I):
  h, w = shape(I)
  obj2 = normalize(toobject(ofcolor(I, 2), I))
  obj8 = normalize(toobject(ofcolor(I, 8), I))
  O = canvas(0, (h, w))
  if h == 14:
    O = paint(O, shift(obj2, (h - 4 - height(obj2), w // 2 - width(obj2) // 2)))
    O = paint(O, shift(obj8, (h - 2 - height(obj8), w // 2 - width(obj8) // 2 - 1)))
  elif h == 9:
    O = paint(O, shift(obj2, (1, w // 2 - width(obj2) // 2 + 1)))
    O = paint(O, shift(obj8, (h - 2 - height(obj8), w // 2 - width(obj8) // 2)))
  else:
    O = paint(O, shift(obj2, (3, 0)))
    O = paint(O, obj8)
  return O

14.55616def hdeafcjcdcceeabcbcfafefjbdjeaacd(I):
  obj2 = argmax(objects(I, True, False, True), lambda obj: color(obj) == 2)
  obj8 = argmax(objects(I, True, False, True), lambda obj: color(obj) == 8)
  h, w = shape(I)

  obj2_shifted = shift(obj2, (h - uppermost(obj2) - height(obj2), -leftmost(obj2)))

  if len(obj8) == 0:
    obj8_shifted = recolor(8, frozenset((h//2 + i - 1, w//2 + j - 1) for i in range(2) for j in range(2)))
  else:
    obj8_shifted = obj8

  O = paint(canvas(0, (h, w)), obj2_shifted)
  O = paint(O, obj8_shifted)
  return O

32.449707def hdagcafddjaiebfbjaffcibicdejifah(I):
  objs = sorted(objects(I, T, F, T), key=lambda x: ulcorner(x)[0]) # Extract objects, sort by top row
  bg = mostcolor(I) # Identify background color
  output = canvas(bg, shape(I)) # Create empty canvas
  h = height(I) # Get grid height
  current_pos = (h - 1, 0) # Start at bottom left corner
  for i, obj in enumerate(objs):
    obj_h = height(obj) # Get object height
    obj_w = width(obj) # Get object width
    output = paint(output, shift(obj, (current_pos[0]-obj_h+1, current_pos[1]))) # Place object
    current_pos = (current_pos[0], current_pos[1] + obj_w) # Update position for next object
  return output

44.308666def fcjacbigefddeajajabfaifejijhgdee(I):
  objs = objects(I, T, F, T) # Extract all objects
  bg = mostcolor(I) # Identify background color
  output = canvas(bg, shape(I)) # Create empty canvas
  for i, obj in enumerate(objs):
    shifted_obj = shift(obj, (height(I)-1-uppermost(obj), 0)) # Shift each object down
    output = paint(output, shifted_obj) 
  return output

42.918434def abcchajjfebbedeiigcbfhfcbicbjega(I):
  objs = sorted(objects(I, T, F, T), key=lambda x: lrcorner(x)[1]) # Extract and sort by rightmost column
  bg = mostcolor(I)
  output = canvas(bg, shape(I))
  current_pos = (height(output) - 1, 0)
  for obj in objs:
    output = paint(output, shift(obj, subtract(current_pos, ulcorner(obj)))) 
    current_pos = (current_pos[0], current_pos[1] + width(obj))
  return output

33.191677def cfadgefaafdgefadbedeeccgidcejedc(I):
  h = height(I)
  w = width(I)
  for value in palette(I) - {0}: # Iterate through colors, excluding background
    obj = extract(objects(I, T, F, T), lambda obj: color(obj) == value)
    I = paint(cover(I, obj), shift(obj, (h - height(obj), (w - width(obj)) // 2)))
  return I

12.395117def abajiadafjfiehacjifadfibdchdhfca(I):
  def move_down(I, obj):
    shifted = shift(obj, DOWN)
    if lowermost(shifted) < height(I) and not any(vmatching(shifted, o) for o in objects(I, T, F, T) - {obj}):
      return move_down(I, shifted)
    return shifted

  objs = objects(I, T, F, T)
  for obj in objs:
    I = paint(cover(I, obj), move_down(I, obj))
  return I

12.206363def deffhidgecdeedbeajccdcaidefbagee(I):
    bg = mostcolor(I)
    objs = sorted(objects(I, T, F, T), key=lambda x: -color(x))
    acc = canvas(bg, shape(I))
    for obj in objs:
        acc = vconcat(paint(acc[:height(acc)-height(obj)], obj), acc[height(acc)-height(obj):])
    return acc

23.754498def hjhbeadaecceeibdihjebheefhghaffa(I):
  h, w = shape(I)
  obj2 = extract(objects(I, True, False, True), lambda obj: color(obj) == TWO)
  obj8 = next((obj for obj in objects(I, True, False, True) if color(obj) == EIGHT), None)

  obj2_shifted = shift(obj2, (h - height(obj2), w // 2 - leftmost(obj2) - width(obj2) // 2)) 

  if obj8:
    obj8_shifted = shift(obj8, (h // 2 - uppermost(obj8) - height(obj8) // 2, 0))
  else:
    obj8_shifted = recolor(EIGHT, {(h//2 - 1, w//2 - 1), (h//2, w//2 - 1), (h//2 - 1, w//2), (h//2, w//2)})

  O = paint(paint(canvas(ZERO, (h, w)), obj2_shifted), obj8_shifted)
  return O

13.407484def bigceajeejcdebbbiehbcaffaecjdehg(I):
  h, w = shape(I)
  objs = objects(I, True, False, True)
  obj2 = next((obj for obj in objs if color(obj) == TWO), None)
  
  bottom_row = h - 1
  obj2_shifted = shift(obj2, (bottom_row - lowermost(obj2), w // 2 - leftmost(obj2) - width(obj2) // 2))

  if any(color(obj) == EIGHT for obj in objs):
    obj8 = next(obj for obj in objs if color(obj) == EIGHT)
    obj8_shifted = shift(obj8, (h // 2 - uppermost(obj8) - height(obj8) // 2, w // 2 - leftmost(obj8) - width(obj8) // 2))
  else:
    obj8_shifted = recolor(EIGHT, product(range(h//2 - 1, h//2 + 1), range(w//2 - 1, w//2 + 1)))

  O = paint(canvas(ZERO, (h, w)), obj2_shifted)
  O = paint(O, obj8_shifted)
  return O

27.54177def eadefdhedjcjeajfjbdcfbgebadcbhfa(I):
  h, w = len(I), len(I[0]) 
  obj2 = next((frozenset(((I[i][j], (i, j)) for j in range(w) if I[i][j] == 2)) 
               for i in range(h) if any(I[i][j] == 2 for j in range(w))), frozenset())

  obj2_shifted = shift(obj2, (h - uppermost(obj2) - height(obj2), w//2 - leftmost(obj2) - width(obj2)//2))

  obj8_indices = set((i, j) for i in range(h) for j in range(w) if I[i][j] == 8)
  if obj8_indices:
    obj8_shifted = recolor(8, obj8_indices) 
  else:
    obj8_shifted = recolor(8, {(h//2-1, w//2-1), (h//2, w//2-1), (h//2-1, w//2), (h//2, w//2)})

  O = paint(canvas(0, (h, w)), obj2_shifted)
  O = paint(O, obj8_shifted) 
  return O

35.21682def bfgadhhbabacebjbaadbcbdfejeggadh(I):
  h, w = shape(I)
  
  obj2 = next((frozenset((I[row][col], (row, col)) for col in range(w) if I[row][col] == 2) 
               for row in range(h) if 2 in I[row]), frozenset()) 

  obj2_shifted = shift(obj2, (h - uppermost(obj2) - height(obj2), (w - width(obj2)) // 2))

  if 8 in merge(I): 
    obj8 = next((frozenset((I[row][col], (row, col)) for col in range(w) if I[row][col] == 8) 
                 for row in range(h) if 8 in I[row]), frozenset())
    obj8_shifted = shift(obj8, (h // 2 - uppermost(obj8) - height(obj8) // 2, w // 2 - leftmost(obj8) - width(obj8) // 2))
  else:
    obj8_shifted = recolor(8, {(h//2-1, w//2-1), (h//2, w//2-1), (h//2-1, w//2), (h//2, w//2)})

  O = paint(canvas(0, (h, w)), obj2_shifted)
  O = paint(O, obj8_shifted)
  return O

40.56392def iadcahedfbdfeeceadcbhdcfgbebjdff(I):
  objs = sorted(objects(I, T, F, T), key=lambda x: (lowermost(x), rightmost(x)))  # Sort objects from bottom-right to top-left
  bg = mostcolor(I)
  output = canvas(bg, shape(I))
  current_height = height(I)  # Start placing objects from the bottom
  for obj in objs:
    offset = (0, width(output) - width(obj)) # Align object to the right edge
    obj = shift(obj, (current_height - height(obj), offset[1]))  # Shift object 
    output = paint(output, obj)
    current_height -= height(obj) 
  return output

45.795288def cfgaefbihdjdeaeiiecbcdfeaadjagfb(I):
    objs = objects(I, T, F, T)
    bg = mostcolor(I)
    output = canvas(bg, shape(I))
    bottom_right = (height(I), width(I))
    for obj in sorted(objs, key=lambda x: (-lowermost(x), -rightmost(x))):  # Sort by bottom edge, then right edge
        offset = (bottom_right[0] - height(obj), bottom_right[1] - width(obj))
        output = paint(output, shift(obj, offset))
        bottom_right = (bottom_right[0] - height(obj), bottom_right[1])  # Update placement for next object
    return output

30.79198def cachagfedefceegiadfdcebddbfaeehf(I):
  objs = objects(I, T, F, T)  # Extract objects
  h = height(I) 
  w = width(I)
  sorted_objs = order(objs, lambda obj: -len(obj)) # Sort by size (descending)
  output = canvas(0, shape(I))  # Create empty canvas
  current_height = h 
  for obj in sorted_objs:
    obj_h = height(obj)
    output = paint(output, shift(obj, (current_height - obj_h, (w - width(obj)) // 2)))  # Place objects from bottom up
    current_height -= obj_h  # Update current height
  return output 

31.283945def babejehdffgdegcdjjdjagafacdcehdc(I):
    objs = objects(I, T, F, T)
    h = height(I)
    w = width(I)
    sorted_objs = sorted(objs, key=lambda obj: (len(obj), -uppermost(obj)))  # Sort by size (ascending), then uppermost (descending)
    new_objs = []
    for i, obj in enumerate(sorted_objs):
        new_objs.append(shift(obj, (h - height(obj) - i * height(obj), (w - width(obj)) // 2)))
    return paint(canvas(0, (h, w)), merge(new_objs)) 

32.04918def jdifcccgdfdaeeicbegdebfgbfjehhbf(I):
  objs = objects(I, True, False, True)
  output = canvas(0, shape(I))
  for obj in sorted(objs, key=lambda obj: (len(obj), uppermost(obj))):
    h_offset = height(output) - height(obj) - sum(height(o) for o in objects(output, True, False, True) if len(o) < len(obj))
    w_offset = (width(output) - width(obj)) // 2
    output = paint(output, shift(obj, (h_offset, w_offset)))
  return output

31.177082def bdabiafafbjiecdbbeagbaghehecjjbb(I):
    bg = mostcolor(I)
    O = canvas(bg, (height(I), width(I)))
    objs = sorted(objects(I, T, F, T), key=lambda obj: color(obj))  # Sort objects by color
    current_height = height(I)
    for obj in objs:
        if color(obj) != bg:
          obj_height = height(obj)
          O = paint(O, shift(obj, (current_height - obj_height, (width(I)-width(obj))//2)))  # Place objects from bottom and center horizontally
          current_height -= obj_height
    return O

21.600029def aabddijfhdabeacdijaiefjdeicgahfb(I):
  h, w = shape(I)
  obj2 = toobject(ofcolor(I, 2), I)
  obj8 = toobject(ofcolor(I, 8), I)
  O = canvas(0, (h, w))
  if h == 14:
    O = paint(O, shift(obj2, (9, 0)))
    O = paint(O, shift(obj8, (7, 0)))
  elif h == 9:
    O = paint(O, shift(obj2, (4, 4)))
    O = paint(O, shift(obj8, (2, 6)))
  elif h == 11:
    O = paint(O, shift(obj2, (8, 0)))
    O = paint(O, shift(obj8, (6, 0)))
  return O

11.361753def hbcdhebcdeagejbdjaacgiejcgfbhfcg(I):
  h, w = shape(I)
  obj2 = toobject(ofcolor(I, TWO), I)
  obj8 = toobject(ofcolor(I, EIGHT), I)

  obj2_center = centerofmass(obj2)
  obj8_center = centerofmass(obj8) if len(obj8) > 0 else (h // 2, w // 2)

  obj2_shifted = shift(obj2, subtract((h // 2, w // 2), obj2_center))
  obj8_shifted = shift(obj8, subtract((h // 2, w // 2), obj8_center)) if len(obj8) > 0 else recolor(EIGHT, product(interval(h//2 - 1, h//2 + 1, 1), interval(w//2 - 1, w//2 + 1, 1)))

  O = paint(canvas(ZERO, (h, w)), obj2_shifted)
  O = paint(O, obj8_shifted)
  return O

12.534622def acchacedbciaecjbbfiacghcjjcebdbb(I):
  objs = order(objects(I, T, F, T), lambda o: (-lowermost(o), -size(o)))  # Sort by lowermost row then size
  h, w = shape(I)
  canvas_ = canvas(0, (h, w))
  for obj in objs:
      bottom_row = lowermost(obj)
      shift_amount = (h - bottom_row - height(obj), (w - width(obj)) // 2)
      canvas_ = paint(canvas_, shift(obj, shift_amount))
  return canvas_

31.177082def ccifadchcfdcebcabejecfdbiijgajbg(I):
  h, w = shape(I)
  objs = objects(I, T, F, T)
  sorted_objs = order(objs, lambda o: -lowermost(o)) # Sort objects by their lowermost row
  canvas_ = canvas(0, (h, w))
  current_height = h 
  for obj in sorted_objs:
    obj_height = height(obj)
    canvas_ = paint(canvas_, shift(obj, (current_height - obj_height, (w - width(obj)) // 2)))
    current_height -= obj_height
  return canvas_

24.03047def egdfahgbbicfefecbcaebdfacfafadbj(I):
    objs = objects(I, T, F, T)
    h, w = shape(I)
    sorted_objs = order(objs, lambda o: (-size(o), uppermost(o)))  # Sort by size then uppermost row
    canvas_ = canvas(0, (h, w))
    current_height = h
    for obj in sorted_objs:
        obj_height = height(obj)
        canvas_ = paint(canvas_, shift(obj, (current_height - obj_height, (w - width(obj)) // 2)))
        current_height = min(current_height - obj_height, uppermost(obj))  
    return canvas_ 

12.14586def gbieefgddedeeehgjbcbdfhccdgjfefa(I):
  objs = objects(I, True, True, True) 
  h, w = shape(I)

  for obj in objs:
    value = color(obj) 
    if value == 2:
      obj = shift(obj, (h - height(obj) - uppermost(obj), -leftmost(obj)))  
    elif value == 8:
      obj = shift(obj, (-uppermost(obj), 0))  
    I = paint(cover(I, obj), obj) 

  return I

31.071548def ageffjjfahfdeacejefhdadbebbhdaba(I):
  objs = objects(I, True, True, True)
  h = height(I)
  I = canvas(0, shape(I)) # Clear the grid
  for obj in objs:
    c = color(obj)
    if c == 2: 
      I = paint(I, shift(obj, (h-height(obj), 0)))
    elif c == 8: 
      I = paint(I, shift(obj, (-uppermost(obj), 0))) 
  return I

30.79198def bbbihfdjefacehcdbdcddhacfehcccdd(I):
  objs = objects(I, T, T, T)
  bg = mostcolor(I)
  sorted_objs = order(objs, lambda obj: uppermost(obj))
  current_height = height(I)
  O = canvas(bg, shape(I))
  for obj in sorted_objs:
    height_obj = height(obj)
    left_offset = (width(I) - width(obj)) // 2
    O = paint(O, shift(obj, (current_height - height_obj, left_offset)))
    current_height -= height_obj
  return O

33.191677def dcgcjechcbbdeegjiicaidjffdiafeig(I):
  objs = objects(I, T, T, T)
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  for i, obj in enumerate(sorted(objs, key=lambda obj: uppermost(obj))):
    O = paint(O, shift(obj, (height(I)-height(obj)*(i+1), (width(I)-width(obj))//2)))
  return O

31.283945def bjacbegadicfeecbacfdcdacjjfcebdi(I):
  objs = objects(I, T, T, T)
  bg = mostcolor(I)
  canvas_height = height(I)
  O = canvas(bg, (canvas_height, width(I)))
  for i, obj in enumerate(sorted(objs, key=lambda o: canvas_height - uppermost(o) - height(o))):
    obj_height = height(obj)
    top_position = canvas_height - obj_height * (i + 1)
    O = paint(O, shift(obj, (top_position, (width(O) - width(obj)) // 2)))
  return O

36.391975def egiaifbfdfehechbbajagacdjfhhigbb(I):
  objs = objects(I, True, False, True)
  h = height(I)
  grid = I
  for i, obj in enumerate(sorted(objs, key=lambda obj: uppermost(obj))):
    grid = paint(cover(grid, obj), shift(obj, (h-height(obj)-i, 0)))
  return grid

18.411203def febcbaccbbcfeaejihbcfgabcfafjdbc(I):
  objs = objects(I, True, False, True)
  grid = I
  for i, obj in enumerate(sorted(objs, key=lambda obj: uppermost(obj))):
    destination = recolor(color(obj), {(len(I)-1-i, j) for j in range(width(obj))})
    direction = gravitate(obj, destination)
    grid = move(grid, obj, direction)
  return grid

30.912306def fbecgdfjgjeeeeebjhfefdibaefegdfg(I):
  h, w = len(I), len(I[0])
  colors = sorted(palette(I) - {mostcolor(I)})
  grid = canvas(mostcolor(I), (h, w)) 
  y = h
  for c in colors:
    obj = next(o for o in objects(I, True, False, True) if color(o) == c)
    y -= height(obj)
    grid = paint(grid, shift(obj, (y, 0)))
  return grid

20.356522def aehdafdceafiecjijchbeebhddfgfaad(I):
  grid = I
  for j in range(width(I)):
    column = [grid[i][j] for i in range(height(I))]
    filtered_column = [v for v in column if v != mostcommon(column)]
    shifted_column = [mostcommon(column)] * (len(column) - len(filtered_column)) + filtered_column
    for i, v in enumerate(shifted_column):
      grid = fill(grid, v, {(i,j)})
  return grid

27.849308def iffdfgedbcbiehbajgbcfjfchggideci(I):
  def move_down(color_val):
    indices = ofcolor(I, color_val)
    return recolor(color_val, shift(indices, (height(I) - lowermost(indices), 0)))

  O = canvas(0, shape(I))
  for color_val in palette(I) - {0}:
    O = paint(O, move_down(color_val))
  return O

20.485344def bfhafiaaejbaedecbedafffeeeegibbb(I):
  def new_pos(obj):
    return (height(I) - height(obj) - uppermost(obj), 0)
  
  return paint(
      canvas(0, shape(I)), 
      merge(apply(lambda obj: shift(obj, new_pos(obj)), objects(I, T, F, T)))
  )

23.335344def hifdbifcbeffedabbjgaebbbbccgehaa(I):
  twos = toobject(ofcolor(I, 2), I)
  eights = toobject(ofcolor(I, 8), I)
  h = height(I)
  I = cover(I, twos)
  I = cover(I, eights)
  I = paint(I, shift(twos, (h - height(twos) - uppermost(twos), 0)))  
  I = paint(I, shift(eights, (h - height(twos) - uppermost(twos) - height(eights), 0)))
  return I

17.881842def fjdeidccfdgcedcdbfjcfadcabbbefbc(I):
  objs = objects(I, True, False, True)
  h = height(I)
  moved_objs = frozenset({
    shift(obj, (h - height(obj) - uppermost(obj), 0)) if color(obj) == 2
    else shift(obj, (h - height(toobject(ofcolor(I, 2), I)) - uppermost(obj) - height(obj), 0)) if color(obj) == 8
    else obj 
    for obj in objs
  })
  I = canvas(0, shape(I))
  for obj in moved_objs:
    I = paint(I, obj)
  return I

20.354052def hgcciaedcbcaeeciabjcigaegbbeadfb(I):
  objs = objects(I, T, T, T)
  bg = mostcolor(I)
  acc = canvas(bg, shape(I))
  for obj in sorted(objs, key=lambda obj: uppermost(obj)):
    left = (width(acc) - width(obj)) // 2
    acc = vconcat(crop(acc, (0,0), (height(acc)-height(obj), width(acc))), hconcat(canvas(bg, (height(obj), left)), hconcat(subgrid(obj, I), canvas(bg, (height(obj), width(acc)-width(obj)-left)))))
  return acc

31.177082def iicicedhfagjecfdadehieefciabdebd(I):
  objs = objects(I, T, T, T)
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  y = height(I)
  for obj in sorted(objs, key=lambda obj: -uppermost(obj)):
    h = height(obj)
    x = (width(O) - width(obj)) // 2
    O = paint(O, shift(obj, (y - h, x)))
    y -= h 
  return O

17.861992def hhjjfieficdaedgeaiaecfcbjbabfhae(I):
  objs = objects(I, T, T, T)
  bg = mostcolor(I)
  output = canvas(bg, shape(I))
  y_offset = 0
  for obj in sorted(objs, key=lambda x: uppermost(x)):
    obj_height = height(obj)
    x_offset = (width(I) - width(obj)) // 2
    output = paint(output, shift(obj, (y_offset, x_offset)))
    y_offset += obj_height
  return output

49.239548def djaaajjbhedeebcciiehfdiggcfcigga(I):
  objs = objects(I, T, T, T)
  bg = mostcolor(I)
  result = canvas(bg, shape(I))
  current_height = 0
  for obj in sorted(objs, key=lambda obj: uppermost(obj)):
    obj_h = height(obj)
    obj_w = width(obj)
    x_offset = (width(result) - obj_w) // 2
    result = vconcat(crop(result, (0, 0), (current_height, width(result))), 
                       hconcat(canvas(bg, (obj_h, x_offset)), 
                               hconcat(subgrid(obj, I), 
                                       canvas(bg, (obj_h, width(result) - obj_w - x_offset)))))
    current_height += obj_h
  return result 

15.342547def hfhjhdehffcdeiaeaeffcagjbeaddbbf(I):
  h = height(I)
  obj2 = toobject(ofcolor(I, 2), I)
  obj8 = toobject(ofcolor(I, 8), I)
  
  new_obj2 = shift(obj2, (h - height(obj2) - uppermost(obj2) - 1, 0)) if len(obj2) > 0 else obj2 
  new_obj8 = shift(obj8, (h - height(obj8) - uppermost(obj8) - 2, 0)) if len(obj8) > 0 else obj8

  return paint(paint(canvas(0, shape(I)), new_obj2), new_obj8)

25.147816def ceihdigcaefbecieabafdcijhaebaeaf(I):
  objs = objects(I, True, False, True)
  h = height(I)
  
  def reposition(obj):
    c = color(obj)
    offset = h - height(obj) - (1 if c == 2 else 2) 
    return shift(obj, (offset, 0))
  
  moved_objs = apply(reposition, objs)
  
  return paint(canvas(0, shape(I)), merge(moved_objs)) 

19.323408def addiegdccebceefdjdfaeiefdicbgfje(I):
  h = height(I)
  bottom_padding_2 = (h - lowermost(ofcolor(I, 2))) - 1 if len(ofcolor(I, 2)) > 0 else 0 
  bottom_padding_8 = (h - lowermost(ofcolor(I, 8))) - 2 if len(ofcolor(I, 8)) > 0 else 0

  return paint(
    paint(
      canvas(0, shape(I)), 
      recolor(2, shift(ofcolor(I, 2), (bottom_padding_2, 0)))
    ),
    recolor(8, shift(ofcolor(I, 8), (bottom_padding_8, 0)))
  )

52.397247def cbhfjadahfdfeibibdfaeejbffaagbed(I):
  h = height(I)

  def move_and_paint(grid, color, empty_rows):
    obj = toobject(ofcolor(grid, color), grid)
    if len(obj) == 0:
      return grid
    offset = h - height(obj) - uppermost(obj) - empty_rows
    return paint(grid, shift(obj, (offset, 0)))

  canvas_grid = canvas(0, shape(I))
  moved_grid = move_and_paint(canvas_grid, 2, 1)
  final_grid = move_and_paint(moved_grid, 8, 2)

  return final_grid

35.362396def ehfcccehdbbbefaeaceaddebgacgicea(I):
  h, w = shape(I)
  obj2 = toobject(ofcolor(I, 2), I)
  obj8 = toobject(ofcolor(I, 8), I)
  obj2 = shift(obj2, (h - height(obj2), 0))
  if h > 10:
    obj8 = shift(obj8, (uppermost(obj2) - height(obj8) - 2, (w - width(obj8)) // 2))
  else:
    obj8 = shift(obj8, (h - height(obj8), (w - width(obj8)) // 2))
  return paint(paint(canvas(0, (h, w)), obj2), obj8)

30.851662def eeaadihddbchegddabejcdajgcdbcgif(I):
  h, w = shape(I)
  obj2 = toobject(ofcolor(I, 2), I)
  obj8 = toobject(ofcolor(I, 8), I)
  if h > 10:
    return paint(paint(canvas(0, (h, w)), shift(obj2, (h - height(obj2), 0))), shift(obj8, (h - height(obj2) - height(obj8) - 2, (w - width(obj8)) // 2)))
  else:
    return paint(paint(canvas(0, (h, w)), shift(obj2, (h - height(obj2), 0))), shift(obj8, (h - height(obj8), (w - width(obj8)) // 2))) 

32.449707def haieacgdaidjeifdibbcccdbfgjfabce(I):
  h = height(I)
  objs = objects(I, T, T, T)
  out = canvas(0, shape(I))
  for i, obj in enumerate(objs):
    out = paint(out, shift(obj, (h - height(obj) - i*height(obj), 0)))
  return out

39.754105def feicfdcgdbgfefcajbfdebghadiaadfd(I):
  h = height(I)
  return paint(
      paint(
          canvas(0, shape(I)), 
          shift(toobject(ofcolor(I, mostcolor(I)), I), (h - height(toobject(ofcolor(I, mostcolor(I)), I)), 0))
      ),
      shift(toobject(ofcolor(I, leastcolor(I)), I), (h - height(toobject(ofcolor(I, mostcolor(I)), I)) - height(toobject(ofcolor(I, leastcolor(I)), I)), 0))
  )

16.709175def hdffebchfgfhegeibejacfbbicceccfi(I):
  used = initset(0)
  h = height(I)
  def helper(I, color):
    obj = toobject(ofcolor(I, color), I)
    return shift(obj, (h - height(obj) - size(used)*height(obj), 0))
  O = canvas(0, shape(I))
  for color in palette(I):
    if color != 0:
      O = paint(O, helper(I, color))
      used = insert(1, used)
  return O

30.577213def deaecdffjedeeddfjbehajfdecgcfhca(I):
  h = height(I)
  objs = objects(I, T, T, T)
  def pos(obj):
    return h - height(obj) - sum(height(o) for o in objs if uppermost(o) < uppermost(obj))
  return paint(canvas(0, shape(I)), merge(apply(lambda obj: shift(obj, (pos(obj), 0)), objs)))

10.931639def efadffijchebeefdjdbacjbbdjcdhgcf(I):
  O = I
  for v in palette(I) - {mostcolor(I)}:
    obj = extract(objects(I, T, F, T), lambda obj: color(obj) == v)
    direction = (1 if v == 2 else -1, 0)
    while any(index(O, add(loc, direction)) == mostcolor(O) for loc in toindices(obj)):
      obj = shift(obj, direction)
    O = paint(cover(O, obj), obj)
  return O

11.396784def baffcfcfehicecagjfadddiefjbaedcg(I):
  O = I
  for obj in objects(I, T, F, T):
    v = color(obj)
    direction = (1 if v == 2 else -1, 0)
    new_obj = shift(obj, direction)
    while not any(index(O, loc) != mostcolor(O) for loc in toindices(new_obj)):
      obj = new_obj
      new_obj = shift(obj, direction)
    O = paint(cover(O, obj), obj)
  return O

20.652191def aeecffghcecjeedebgegcaabegacfjfd(I):
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  for obj in objects(I, T, F, T):
    v = color(obj)
    new_obj = shift(obj, (height(I) - height(obj) - uppermost(obj) if v == 2 else -uppermost(obj), 0))
    O = paint(O, new_obj)
  return O

15.2009535def hacedfhdhdfdejddbcbedichchefgacf(I):
  objs = sorted(objects(I, True, False, True), key=lambda obj: uppermost(obj))
  grid = canvas(mostcolor(I), shape(I))
  current_height = 0
  for obj in objs:
    obj_height = height(obj)
    grid = paint(grid, shift(normalize(obj), (current_height, leftmost(obj))))
    current_height += obj_height
  return grid

39.758022def dfjahfihcgjdeegiahebjcajfibeeafg(I):
  objs = sorted(objects(I, True, False, True), key=lambda obj: uppermost(obj))
  grid = canvas(mostcolor(I), shape(I))
  bottom = height(grid) - 1
  for obj in objs[::-1]:
    offset = gravitate(obj, {(0, 0)})
    grid = paint(grid, shift(obj, (bottom + offset[0], offset[1])))
    bottom -= height(obj)
  return grid 

38.94666def bgafahecabjfeadcbfjjgbcgjecccfei(I):
  colors = sorted(palette(I) - {mostcolor(I)})
  grid = canvas(mostcolor(I), shape(I))
  row_index = 0
  for color in colors:
    for i in range(height(I)):
      row = I[i]
      if color in row:
        grid = tuple(grid[:row_index] + (row,) + grid[row_index + 1:])
        row_index += 1
        break
  return grid

32.449707def cdhbejedddcdeidcjaebabeadahbacab(I):
  objs = objects(I, T, F, T)
  sorted_objs = order(objs, lambda obj: -valmax(obj, lambda x: x[0]))
  h = height(I)
  acc = canvas(0, shape(I))
  for i, obj in enumerate(sorted_objs):
    acc = paint(acc, shift(obj, (h - height(obj) * (i + 1), 0)))
  return acc

21.946115def dcehddbhachceiabjacafegjebffbbcb(I):
  objs = sorted(objects(I, T, F, T), key=lambda obj: -valmax(obj, lambda x: x[0]))
  O = I
  for i, obj in enumerate(objs):
    O = move(O, obj, (height(I) - lowermost(obj) - i*height(obj), 0))
  return O

11.396784def acadfdejfeiieeifjfadbgaededhbadd(I):
  values = sorted(palette(I) - {0}, reverse=True)
  offsets = {v: 0 for v in values}
  O = canvas(0, shape(I))
  for i, v in enumerate(values):
    obj = asobject(I) & recolor(v, asindices(I))
    O = paint(O, shift(obj, (offsets[v], 0)))
    offsets[v] = height(obj) + offsets[v] 
  return O

35.02665def gebddhjcdcddeiibjdedghbchdcgedhc(I):
  O = canvas(0, shape(I))
  for v in sorted(palette(I) - {0}, reverse=True):
    O = vconcat(
        crop(O, (0, 0), (height(O) - height(asobject(I) & recolor(v, asindices(I))), width(O))), 
        crop(I, (0, 0), (height(asobject(I) & recolor(v, asindices(I))), width(I)))
    )
  return O

31.283945def beffbificadeejfgiaijechgecibeicg(I):
    h, w = shape(I)
    obj2 = toobject(ofcolor(I, 2), I)
    obj8 = toobject(ofcolor(I, 8), I)
    canvas_ = canvas(0, (h, w))
    if h > 10:
        obj2 = shift(obj2, (h - height(obj2), 0)) # Move '2' for taller grids.
        obj8 = shift(obj8, (h - height(obj2) - height(obj8) - 2, (w - width(obj8)) // 2)) # Position '8' for taller grids.
    else:
        obj2 = shift(obj2, (h - height(obj2), (w - width(obj2)) // 2)) # Center '2' for shorter grids.
        obj8 = shift(obj8, (h - height(obj8), (w - width(obj8)) // 2)) # Center '8' for shorter grids.
    return paint(paint(canvas_, obj2), obj8) # Combine on the canvas.

8.29222def gdgdaceiccedeajiadjaehfbcehbchfe(I):
  objs = objects(I, T, T, T)
  h, w = shape(I)
  bg = mostcolor(I)
  if h == 14:
    two_obj = extract(objs, lambda obj: color(obj) == 2)
    eight_obj = recolor(8, {(h-2, w//2-1), (h-2, w//2)})
    O = paint(canvas(bg, (h,w)), shift(two_obj, (h-4-uppermost(two_obj), w//2-leftmost(two_obj))))
    O = paint(O, eight_obj)
  elif h == 9:
    two_obj = extract(objs, lambda obj: color(obj) == 2)
    eight_obj = recolor(8, {(h-2, w//2), (h-2, w//2+1)})
    O = paint(canvas(bg, (h,w)), shift(two_obj, (1-uppermost(two_obj), w//2-leftmost(two_obj)+1)))
    O = paint(O, eight_obj)
  else:
    two_obj = extract(objs, lambda obj: color(obj) == 2)
    eight_obj = extract(objs, lambda obj: color(obj) == 8)
    O = paint(canvas(bg, (h,w)), shift(eight_obj, (2-uppermost(eight_obj), 0)))
    O = paint(O, shift(two_obj, (3-uppermost(two_obj), 0)))
  return O

10.229028def bhaeggiejcbfecfgjdefedafdeebafbi(I):
  objs = objects(I, T, T, T)
  h, w = shape(I)
  bg = mostcolor(I)
  O = canvas(bg, (h,w))
  for obj in objs:
    c = color(obj)
    if c == 2:
      if h == 14:
        O = paint(O, shift(obj, (h-4-uppermost(obj), w//2-leftmost(obj))))
      elif h == 9:
        O = paint(O, shift(obj, (1-uppermost(obj), w//2-leftmost(obj)+1)))
      else:
        O = paint(O, shift(obj, (3-uppermost(obj), 0)))
    elif c == 8:
      if h == 14:
        O = paint(O, recolor(8, {(h-2, w//2-1), (h-2, w//2)}))
      elif h == 9:
        O = paint(O, recolor(8, {(h-2, w//2), (h-2, w//2+1)}))
      else:
        O = paint(O, shift(obj, (2-uppermost(obj), 0)))
  return O 

30.451738def aababfgecdjeeifgacacfgaibfbaiaec(I):
  objs = objects(I, T, F, T) # Identify all objects in the grid
  bg = mostcolor(I) # Identify the background color
  O = canvas(bg, shape(I)) # Create a blank canvas with the same shape as input
  current_height = height(I) # Start placing objects from the bottom
  for obj in objs:
    O = paint(O, shift(obj, (current_height - height(obj), 0))) # Place the object
    current_height -= height(obj) # Update the height for the next object
  return O

20.847895def acaeciaacjijehdebgcdfjfjcahccigc(I):
  objs = sorted(objects(I, T, F, T), key=lambda obj: uppermost(obj)) # Objects sorted by top row
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  bottom = height(I) 
  for obj in objs:
    O = paint(O, shift(obj, (bottom - lowermost(obj), 0))) # Position based on lowermost row
    bottom = uppermost(shift(obj, (bottom - lowermost(obj), 0))) # Update bottom for next object
  return O 

117.841995def eafaeffcagdgeefejagjjhddcdcjbbig(I):
  return totuple(rot270(tuple(
      tuple(v for v in row if v != mostcommon(row))
      for row in rot90(I)
      if any(v != mostcommon(row) for v in row)
  )))

22.767378def fdaajaiheiiaeeffibbdcagcbceedffc(I):
  objs = sorted(objects(I, True, False, True), key=lambda obj: uppermost(obj))
  h = height(I)
  combined = canvas(mostcolor(I), shape(I))
  for obj in objs:
    obj_h = height(obj)
    combined = paint(combined, shift(normalize(obj), (h-obj_h, 0))) 
  return combined

20.882292def edbccbcafjgeegbaaefbgdajjabddcee(I):
  objs = sorted(objects(I, True, False, True), key=lambda o: -uppermost(o))
  out = canvas(mostcolor(I), shape(I))
  for obj in objs:
    out = paint(out, shift(obj, (height(I) - height(obj) - uppermost(obj), 0)))
  return out

30.451738def decfcbhaeaaeeibgjdbfabcaceegdfdi(I):
    objs = sorted(objects(I, True, False, True), key=lambda obj: uppermost(obj))
    bottom = height(I)
    result = canvas(mostcolor(I), shape(I))
    for obj in objs:
        height_obj = height(obj)
        result = paint(result, shift(obj, (bottom - height_obj, 0)))
        bottom -= height_obj
    return result

45.899197def defgjcjfggfaeibeihegbdjedcggfbfj(I):
  objs = sorted(objects(I, True, False, True), key=lambda obj: uppermost(obj))
  acc = canvas(mostcolor(I), (0, width(I)))
  for obj in objs:
    acc = vconcat(acc, canvas(mostcolor(I), (height(obj), width(I))))
  return paint(acc, merge(apply(normalize, objs)))

19.533562def cchefigdcjhfeffbbhddccfjefgdgdcj(I):
    obj2 = argmax(objects(I, T, F, T), lambda x: color(x) == TWO and size(x))
    obj8 = argmax(objects(I, T, F, T), lambda x: color(x) == EIGHT and size(x))
    O = canvas(ZERO, shape(I))
    O = paint(O, shift(obj2, (height(I) - height(obj2), 0)))
    O = paint(O, shift(obj8, (height(O) - height(obj2) - height(obj8), 0)))
    return O

16.266565def bcdeibhdaebdeabfabhgajccbdjgfjef(I):
  objs = objects(I, T, T, T)
  h, w = shape(I)
  bg = mostcolor(I)
  two_obj = extract(objs, lambda obj: color(obj) == 2)
  eight_obj = extract(objs, lambda obj: color(obj) == 8) if colorcount(I, 8) > 0 else recolor(8, {(0, 0)}) 
  if h == 14:
    O = paint(canvas(bg, (h,w)), shift(two_obj, (h - height(two_obj), 0)))
    O = paint(O, shift(eight_obj, (h - 2 - height(eight_obj), w // 2 - width(eight_obj) // 2)))
  elif h == 9:
    O = paint(canvas(bg, (h,w)), shift(two_obj, (1, w // 2 - leftmost(two_obj))))
    O = paint(O, shift(eight_obj, (h - 1 - height(eight_obj), w - width(eight_obj) - 2)))
  else:
    O = paint(canvas(bg, (h,w)), shift(eight_obj, (uppermost(eight_obj), leftmost(eight_obj))))
    O = paint(O, shift(two_obj, (1, 0)))
  return O

18.381926def jjeaefahbdhbejcbadeadadibefeahbf(I):
  h, w = shape(I)
  bg = mostcolor(I)
  two_indices = ofcolor(I, 2)
  eight_indices = ofcolor(I, 8) 
  if h == 14:
    O = paint(canvas(bg, (h,w)), shift(toobject(two_indices, I), (h - height(toobject(two_indices, I)), 0)))
    O = paint(O, shift(toobject(eight_indices, I), (h - 2 - height(toobject(eight_indices, I)), w // 2 - width(toobject(eight_indices, I)) // 2)))
  elif h == 9:
    O = paint(canvas(bg, (h,w)), shift(toobject(two_indices, I), (1, w // 2 - leftmost(toobject(two_indices, I)))))
    O = paint(O, shift(toobject(eight_indices, I), (h - 1 - height(toobject(eight_indices, I)), w - width(toobject(eight_indices, I)) - 2)))
  else:
    O = paint(canvas(bg, (h,w)), shift(toobject(eight_indices, I), (uppermost(toobject(eight_indices, I)), leftmost(toobject(eight_indices, I)))))
    O = paint(O, shift(toobject(two_indices, I), (1, 0)))
  return O

10.320863def jiaaceiahcgeedhbiaedjdhdbcidgiah(I):
  h, w = shape(I)
  bg = mostcolor(I)
  if h == 14:
    O = fill(canvas(bg, (h, w)), 2, shift(ofcolor(I, 2), (h - 4, w // 2 - leftmost(ofcolor(I, 2)))))
    O = fill(O, 8, {(h-2, w//2-1), (h-2, w//2)})
  elif h == 9:
    O = fill(canvas(bg, (h, w)), 2, shift(ofcolor(I, 2), (1, w // 2 - leftmost(ofcolor(I, 2)) + 1)))
    O = fill(O, 8, {(h-2, w//2), (h-2, w//2+1)})
  else:
    O = fill(canvas(bg, (h, w)), 8, shift(ofcolor(I, 8), (2 - uppermost(ofcolor(I, 8)), 0)))
    O = fill(O, 2, shift(ofcolor(I, 2), (3 - uppermost(ofcolor(I, 2)), 0)))
  return O 

12.583957def bcjbgebbbdaaegcejibbccaacdabacbf(I):
  h, w = shape(I)
  bg = mostcolor(I)
  two_obj = extract(objects(I, T, T, T), lambda obj: color(obj) == 2)
  eight_obj = extract(objects(I, T, T, T), lambda obj: color(obj) == 8) if colorcount(I, 8) > 0 else recolor(8, {(0, 0)})
  if h == 14:
    O = paint(canvas(bg, (h, w)), shift(two_obj, (h - uppermost(two_obj) - height(two_obj), w // 2 - leftmost(two_obj))))
    O = paint(O, shift(eight_obj, (h - uppermost(eight_obj) - 2, w // 2 - leftmost(eight_obj)))) 
  elif h == 9:
    O = paint(canvas(bg, (h, w)), shift(two_obj, (1,  w // 2 - leftmost(two_obj))))
    O = paint(O, shift(eight_obj, (h - uppermost(eight_obj) - height(eight_obj), w - leftmost(eight_obj) - width(eight_obj) - 1)))
  else:
    O = paint(canvas(bg, (h,w)), shift(eight_obj, (uppermost(eight_obj), leftmost(eight_obj))))
    O = paint(O, shift(two_obj, (1, 0)))
  return O

10.538181def cccfeejfcadbecabieaedfgahbdijcfd(I):
  h, w = shape(I)
  bg = mostcolor(I)
  if h == 14:
    O = paint(canvas(bg, (h, w)), shift(toobject(ofcolor(I, 2), I), (h - 4 - uppermost(toobject(ofcolor(I, 2), I)), w // 2 - leftmost(toobject(ofcolor(I, 2), I)))))
    O = underfill(O, 8, {(h-2, w//2-1), (h-2, w//2)})
  elif h == 9:
    O = paint(canvas(bg, (h, w)), shift(toobject(ofcolor(I, 2), I), (1 - uppermost(toobject(ofcolor(I, 2), I)), w // 2 - leftmost(toobject(ofcolor(I, 2), I)) + 1)))
    O = underfill(O, 8, {(h-2, w//2), (h-2, w//2+1)})
  else:
    O = paint(canvas(bg, (h,w)), toobject(ofcolor(I, 8), I))
    O = paint(O, shift(toobject(ofcolor(I, 2), I), (1, 0)))
  return O

21.639088def ecfbjccehjabeafeagbgafbaehjjdfbe(I):
  objs = objects(I, True, False, True) 
  bg = mostcolor(I)
  h = height(I)
  
  # Create a canvas filled with the background color
  output = canvas(bg, (h, width(I))) 
  
  # Define sorting function based on object's uppermost row
  def sort_key(obj): 
    return uppermost(obj)
  
  # Sort objects based on their vertical position
  sorted_objs = sorted(objs, key=sort_key) 
  
  current_height = h - sum(height(obj) for obj in sorted_objs) 
  
  # Place objects on the canvas from bottom to top
  for obj in sorted_objs:
    output = paint(output, shift(obj, (current_height - uppermost(obj), 0)))
    current_height -= height(obj)
  
  return output

17.881842def affdggihaaciecfcjijicaebccccjdfe(I):
  objs = objects(I, True, False, True)
  bg = mostcolor(I)
  h, w = height(I), width(I)

  # Calculate the height of the stacked objects
  stacked_height = sum(height(obj) for obj in objs)

  # Create the bottom part of the output grid
  bottom = canvas(bg, (stacked_height, w))

  current_height = 0
  for obj in sorted(objs, key=lambda obj: uppermost(obj)):
    bottom = paint(bottom, shift(obj, (current_height - uppermost(obj), 0)))
    current_height += height(obj)

  # Concatenate the top (empty) and bottom parts
  return vconcat(canvas(bg, (h - stacked_height, w)), bottom)

15.490216def eegehiihcfecejcajjibeaegcchacbja(I):
    objs = objects(I, True, False, True)
    bg = mostcolor(I)
    sorted_objs = sorted(objs, key=lambda obj: uppermost(obj))
    
    def place_object(grid, obj):
        return paint(grid, shift(normalize(obj), (uppermost(obj), 0)))

    final_grid = I
    for obj in sorted_objs:
        final_grid = cover(final_grid, obj)
        final_grid = place_object(final_grid, obj)
    return final_grid

12.441224def eggdgahaabffehbdbceddcejbccfgfag(I):
    objs = objects(I, True, False, True)
    bg = mostcolor(I)
    h, w = height(I), width(I)

    # Create a list to store the objects for each column
    columns = [[] for _ in range(w)]

    # Group the objects by their columns
    for obj in objs:
        for i, j in toindices(obj):
            columns[j].append(obj)

    # Sort objects in each column based on their vertical position
    for col in columns:
        col.sort(key=lambda obj: uppermost(obj))

    # Create the output grid
    output = canvas(bg, (h, w))

    # Place the objects onto the output grid
    for j, col in enumerate(columns):
        current_height = h - sum(height(obj) for obj in col)
        for obj in col:
            output = paint(output, shift(obj, (current_height - uppermost(obj), 0)))
            current_height += height(obj)

    return output

24.9224def gaeeeffcjhfbeddhjafchagefajebbga(I):
    objs = sorted(objects(I, True, False, True), key=lambda obj: uppermost(obj))
    bg = mostcolor(I)
    h, w = height(I), width(I)

    def place_obj_at_bottom(grid, obj):
        empty_rows = h - (lowermost(obj) + 1) 
        return paint(grid, shift(obj, (empty_rows, 0))) 

    output_grid = I
    for obj in objs:
        output_grid = cover(output_grid, obj)  
        output_grid = place_obj_at_bottom(output_grid, obj) 

    return output_grid

30.912306def dbgcjhahaecfehajjcbfjfdjifbaceje(I):
  obj2 = next((o for o in objects(I, T, F, T) if color(o) == TWO), frozenset())
  obj8 = next((o for o in objects(I, T, F, T) if color(o) == EIGHT), frozenset())
  h, w = shape(I)
  O = canvas(ZERO, (h, w))
  O = paint(O, shift(obj2, (h - height(obj2), 0)))
  O = paint(O, shift(obj8, (h - height(obj2) - height(obj8), 0)))
  return O

18.50794def cggieebhidafeaeaadcfhfdiigbfhgea(I):
  objs = objects(I, T, T, T)
  h, w = shape(I)
  bg = mostcolor(I)
  O = canvas(bg, (h, w))
  for obj in objs:
    c = color(obj)
    if c == 8:
      O = paint(O, shift(obj, (h - height(obj) - uppermost(obj), 0)))
    elif c == 2:
      O = paint(O, shift(obj, (h - height(obj) - uppermost(obj), w//2 - leftmost(obj) - width(obj)//2)))
  return O

11.046383def eaceddijbfbeecbdbifadehbcafghcag(I):
  h, w = shape(I)
  bg = mostcolor(I)
  O = canvas(bg, (h, w))
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if val == 8:
        O = fill(O, 8, {(h - 1 - i, j)})
      elif val == 2:
        O = fill(O, 2, {(h - 1 - i, w // 2 - (sum(1 for k in row if k == 2) // 2) + j)})
  return O

24.670128def ifediihjdbfeedfbicdhafgaejaafadf(I):
  objs = objects(I, T, T, T) # Identify all objects
  bg = mostcolor(I) # Get background color
  O = canvas(bg, shape(I)) # Create empty canvas

  for i, obj in enumerate(objs):
    if color(obj) == 2:
      # Logic for placing '2' object (adapt from Program B)
      target_row = height(I) - 2 - i  # Adjust target row based on object index
      target_col = (width(I) - width(obj)) // 2
      O = paint(O, shift(obj, (target_row - uppermost(obj), target_col - leftmost(obj))))
    elif color(obj) == 8:
      # Logic for placing '8' object (potentially no movement needed)
      O = paint(O, obj)

  return O

23.641685def iaciafeahgafeaibbabcebieaahbeegi(I):
  objs = fgpartition(I)  # Partition grid into objects without background
  bg = mostcolor(I)
  h, w = shape(I)
  O = canvas(bg, (h, w))

  for obj in objs:
    if color(obj) == 2:
      if hmatching(obj, {(0,0)}):  # Check if object starts in the top row
        O = paint(O, shift(obj, (h - 3, (w - width(obj)) // 2)))
      else:
        O = paint(O, shift(obj, (-3, (w - width(obj)) // 2)))
    else:
      O = paint(O, obj)

  return O 

19.657389def adcdbibgfciiebdeieffedajdedjefda(I):
  h, w = shape(I)
  rows = tuple(I[i] for i in range(h))  # Extract rows as tuples
  
  # Identify rows containing "2" objects
  object_rows = tuple(i for i, row in enumerate(rows) if 2 in row)

  # Reorder rows (adjust logic based on specific transformations)
  new_rows = rows[:object_rows[0]] + rows[object_rows[-1] + 1:] + rows[object_rows[0]:object_rows[-1] + 1]

  return tuple(new_rows) 

15.4304285def gegacbbbjbiheccgjiebfagediegdcgc(I):
  objs = objects(I, T, T, T)
  bg = mostcolor(I)
  h, w = shape(I)
  O = canvas(bg, (h, w))

  for obj in objs:
    if color(obj) == 2:
      if uppermost(obj) < h // 2: # Check if object is in the top half
          O = paint(O, shift(obj, (h - 3 - uppermost(obj), (w - width(obj)) // 2)))
      else:
          O = paint(O, shift(obj, (-3, (w - width(obj)) // 2)))
    else:
      O = paint(O, obj)

  return O

16.091988def abgdiigbfeicefigaefbiegabeeabfah(I):
  objs = order(objects(I, True, False, True), lambda obj: -color(obj))
  shifted_objs = set()
  current_height = height(I)
  for obj in objs:
    shifted_obj = shift(obj, (current_height - height(obj) - uppermost(obj), 0))
    shifted_objs.add(shifted_obj)
    current_height = uppermost(shifted_obj)
  O = paint(canvas(0, shape(I)), merge(shifted_objs))
  return O

30.451738def aijedjffdgejecdbjfbdfiaediadbchd(I):
  objs = objects(I, T, F, T)
  h = height(I)
  O = canvas(ZERO, shape(I))
  current_height = h
  for obj in objs:
    if color(obj) == TWO:
      O = paint(O, shift(obj, (current_height - height(obj), 0)))
      current_height -= height(obj)
    elif color(obj) == EIGHT:
      O = paint(O, shift(obj, (current_height - height(obj), 0)))
      current_height -= height(obj)
  return O

19.564499def ahbjcbjdhgejebdeabeehedehdecbbfg(I):
  objs = order(objects(I, T, F, T), lambda obj: uppermost(obj))
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  pos = (height(I) - 1, (width(I) - 2) // 2)
  for obj in objs:
    O = paint(O, shift(obj, subtract(pos, lrcorner(obj))))
    pos = subtract(pos, (height(obj), 0))
    pos = add(pos, (0, (width(obj) - 2) // 2 - leftmost(obj)))
  return O

20.782286def cdeeebebjajaegjfidcdbecdefgjdbfa(I):
  objs = objects(I, True, True, True)
  h, w = shape(I)
  bg = mostcolor(I)
  O = canvas(bg, (h, w))
  for obj in objs:
    if color(obj) == 2:
      O = paint(O, shift(obj, (h - height(obj) - uppermost(obj), w // 2 - width(obj) // 2 - leftmost(obj))))
    elif color(obj) == 8:
      O = paint(O, shift(obj, (h - height(obj) - uppermost(obj), -leftmost(obj))))
  return O

24.477182def gbdgafaadiafehbdjccgcbfejbehifib(I):
  objs = objects(I, T, F, T)  # Extract all objects except the background.
  bg = mostcolor(I) # Get background color.
  O = canvas(bg, shape(I)) # Create empty canvas of same size as input.
  bottom = height(I) # Get bottom row index.
  rightmost_pos = 0 # Initialize rightmost position of stacked objects.
  for obj in objs: 
    if color(obj) != EIGHT: # Skip the 8-colored object if it exists.
      obj_w = width(obj) # Get width of the object.
      offset = (width(I) - obj_w) // 2  # Calculate horizontal offset for centering.
      O = paint(O, shift(obj, (bottom - height(obj), offset))) # Paint object at calculated position.
      rightmost_pos = max(rightmost_pos, rightmost(obj)) # Update rightmost position if current object extends further.
      bottom -= height(obj) # Update bottom position for next object.
  new_obj = recolor(EIGHT, asindices(canvas(ZERO, (TWO, TWO)))) # Create new 2x2 object of color 8.
  O = paint(O, shift(new_obj, (bottom - TWO, rightmost_pos - ONE))) # Paint 8 object at calculated position.
  return O 

23.567842def bedaecgieafjedcjbeaiiafdjdgegifa(I):
  non_8_objs = sfilter(objects(I, T, F, T), lambda obj: color(obj) != EIGHT) # Filter out objects of color 8.
  bg = mostcolor(I) # Get background color.
  O = canvas(bg, shape(I)) # Create empty canvas.
  current_y = height(I) # Initialize current vertical position.
  rightmost_x = 0 # Initialize rightmost horizontal position.
  for obj in non_8_objs:
    obj_width = width(obj) # Get object width.
    x_offset = (width(I) - obj_width) // 2 # Calculate center offset.
    O = paint(O, shift(obj, (current_y - height(obj), x_offset))) # Paint the object.
    rightmost_x = max(rightmost_x, rightmost(obj) + x_offset) # Update rightmost position.
    current_y -= height(obj) # Update current vertical position.
  eight_obj = recolor(EIGHT, asindices(canvas(ZERO, (TWO, TWO)))) # Create new 8-colored object.
  O = paint(O, shift(eight_obj, (current_y - TWO, rightmost_x - ONE))) # Paint 8 object.
  return O

30.513525def bbbfcbjfaafbebgcjfefcebbeedddfea(I):
  h, w = shape(I)
  bg = mostcolor(I)
  two_obj = toobject(ofcolor(I, 2), I)
  eight_obj = toobject(ofcolor(I, 8), I)
  O = paint(canvas(bg, (h, w)), shift(two_obj, (h - height(two_obj), 0)))
  O = paint(O, shift(eight_obj, (h - height(eight_obj) - 2, 0)))
  return O

23.10831def cbcdjdfejfgbefadjfgefcgjfceecdea(I):
  non_eights = sfilter(objects(I, T, F, T), lambda obj: color(obj) != EIGHT)
  O = canvas(mostcolor(I), shape(I))
  top = height(I)
  right = 0
  for obj in order(non_eights, lambda obj: -height(obj)):
    left = (width(I) - width(obj)) // 2
    O = paint(O, shift(obj, (top - height(obj), left)))
    top -= height(obj)
    right = max(right, rightmost(obj) + left)
  O = paint(O, shift(recolor(EIGHT, asindices(canvas(ZERO, (TWO, TWO)))), (top - ONE, right - ONE)))
  return O

21.366028def ffcdhbgddgcbeicgaiccgeggaffbegdi(I):
  h, w = shape(I)
  obj2 = toobject(ofcolor(I, 2), I)
  obj8 = toobject(ofcolor(I, 8), I)
  obj2 = shift(obj2, (h - height(obj2) - uppermost(obj2), (w - width(obj2)) // 2 - leftmost(obj2)))
  obj8 = shift(obj8, (uppermost(obj2) - height(obj8) - 2, leftmost(obj2) + width(obj2) - width(obj8)))
  return paint(paint(canvas(0, (h, w)), obj2), obj8) 

18.927269def eeafffgeafbcebedjbeeadfbcddafcai(I):
  h, w = shape(I)
  obj2 = toobject(ofcolor(I, 2), I)
  obj8 = toobject(ofcolor(I, 8), I)
  obj2 = shift(obj2, (h - 1 - lowermost(obj2), (w - width(obj2)) // 2 - leftmost(obj2)))
  obj8_new_pos = add((uppermost(obj2) - height(obj8) - 2, 0),  ((w - width(obj8)) // 2, 0))
  obj8 = shift(obj8, obj8_new_pos)
  return paint(paint(canvas(0, (h, w)), obj2), obj8)

20.41903def gfdeibffcghiebifbdehdchdaabcdajj(I):
  h, w = shape(I)
  obj2 = toobject(ofcolor(I, 2), I)
  obj8 = toobject(ofcolor(I, 8), I)
  obj2 = shift(obj2, subtract((h - height(obj2), (w - width(obj2)) // 2), ulcorner(obj2)))
  if height(obj8) != 0:  # Check if '8' object exists
    obj8 = shift(obj8, subtract((uppermost(obj2) - height(obj8) - 2, (w - width(obj8)) // 2), ulcorner(obj8)))
  return paint(paint(canvas(0, (h, w)), obj2), obj8) 

16.651377def ecbhbeedbidaeebfjcdecdhjbecdidcd(I):
  h, w = shape(I)
  bg = mostcolor(I)
  two_obj = normalize(toobject(ofcolor(I, 2), I))
  eight_obj = normalize(toobject(ofcolor(I, 8), I))
  O = canvas(bg, (h, w))
  O = paint(O, shift(two_obj, (h - height(two_obj), w // 2 - width(two_obj) // 2)))
  O = paint(O, shift(eight_obj, (h - height(eight_obj) - 2, w // 2 - width(eight_obj) // 2)))
  return O

18.336306def aaibdcdjbbeaejcfbieegccebbcbbdbg(I):
  """
  Identifies objects, sorts by height, centers, and stacks them vertically at the bottom, 
  placing a 2x2 square of '8's on top.
  """
  objs = order(objects(I, T, F, T), lambda obj: -height(obj)) # Identify and sort objects by height
  bg = mostcolor(I)  # Determine background color
  O = canvas(bg, shape(I))  # Create output canvas
  current_height = height(I)  # Start at the bottom of the grid
  for obj in objs:
    offset = (width(I) - width(obj)) // 2  # Calculate horizontal offset for centering
    O = paint(O, shift(obj, (current_height - height(obj), offset)))  # Position object
    current_height -= height(obj)  # Update current height for the next object
  new_obj = recolor(EIGHT, asindices(canvas(ZERO, (2, 2))))  # Create 2x2 '8' square
  O = paint(O, shift(new_obj, (current_height - 1, offset - 1)))  # Position the square
  return O

20.090885def efajgafgfbeaefaeiifagdejbdifiece(I):
  """
  Uses a recursive approach to position objects one by one from top to bottom.
  """
  def place_objects(objs, grid, current_height):
    """Recursive function to place objects."""
    if not objs:
      return grid
    obj = objs[0]
    offset = (width(I) - width(obj)) // 2
    new_grid = paint(grid, shift(obj, (current_height - height(obj), offset)))
    return place_objects(objs[1:], new_grid, current_height - height(obj))

  objs = order(objects(I, T, F, T), lambda obj: -height(obj))
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  O = place_objects(objs, O, height(I))
  new_obj = recolor(EIGHT, asindices(canvas(ZERO, (2, 2))))
  O = paint(O, shift(new_obj, (find_top(O) - 2, (width(I) - 2) // 2)))  # Find top and center
  return O

17.246208def cbjafdgeeiaaegijiagbcggiejdcdfac(I):
  """
  Treats the grid as a list of rows, directly manipulating row strings to place objects.
  """
  objs = order(objects(I, T, F, T), lambda obj: -height(obj))
  bg = mostcolor(I)
  O = list(list(row) for row in canvas(bg, shape(I)))  # Grid as list of lists
  current_height = height(I)
  for obj in objs:
    obj_grid = subgrid(obj, I)  # Extract object as subgrid
    offset = (width(I) - width(obj)) // 2
    for i in range(height(obj)):
      O[current_height - height(obj) + i][offset:offset + width(obj)] = obj_grid[i]
    current_height -= height(obj)
  eight_square = [[EIGHT] * 2 for _ in range(2)]  # Create 2x2 square as list of lists
  O[current_height - 2:current_height][(width(I) - 2) // 2:(width(I) - 2) // 2 + 2] = eight_square
  return tuple(tuple(row) for row in O)  # Convert back to tuple of tuples

18.077946def hajbhehajiifeaefjbbbbcfedffecccg(I):
  """
  Employs a single loop to place objects, calculating positions based on cumulative heights.
  """
  objs = order(objects(I, T, F, T), lambda obj: -height(obj))
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  cumulative_height = 0
  for obj in objs:
    offset = (width(I) - width(obj)) // 2
    position = (height(I) - cumulative_height - height(obj), offset)  # Calculate position directly
    O = paint(O, shift(obj, position))
    cumulative_height += height(obj)
  new_obj = recolor(EIGHT, asindices(canvas(ZERO, (2, 2))))
  O = paint(O, shift(new_obj, (height(I) - cumulative_height - 2, (width(I) - 2) // 2)))
  return O

20.722548def cceahcdehhjaedbhbifibifbfgedecbj(I):
    h, w = shape(I)
    objs = objects(I, True, False, True)
    def shift_bottom(obj):
        return shift(obj, (h - uppermost(obj) - height(obj), 0))
    shifted_objs = apply(shift_bottom, objs)
    O = canvas(0, (h, w))
    for obj in shifted_objs:
        O = paint(O, obj)
    return O

20.485344def ibgcaddgjeejegbfihahefeacafeebhc(I):
  h = height(I)
  def move_to_bottom(obj):
    return shift(obj, (h - uppermost(obj) - height(obj), 0))
  filtered_objs = sfilter(objects(I, True, False, True), lambda obj: color(obj) in (2, 8))
  return paint(canvas(0, shape(I)), merge(apply(move_to_bottom, filtered_objs)))

12.509439def jfjebciacjeaegeaiaffedbbhgbbjhdd(I):
  h = height(I)
  grid = canvas(ZERO, shape(I))
  for i, row in enumerate(I):
    for j, v in enumerate(row):
      if v in [TWO, EIGHT]:
        grid = paint(grid, {(v, (h - 1 - i, j))})
  return grid

