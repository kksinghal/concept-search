11.878174def djjeifaibaecebfdiajfeefcaahedddb(I):
    objs = objects(I, True, True, True)  # Find all objects (without background)
    target_obj = extract(objs, lambda o: color(o) == 1) # Find the object with color 1
    lowest_row = lowermost(merge(objs)) # Find the lowest row containing any object
    shift_amount = lowest_row - lowermost(target_obj) # Calculate the downward shift 
    shifted_obj = shift(target_obj, (shift_amount, 0)) # Shift the target object
    O = paint(cover(I, target_obj), shifted_obj) # Paint the shifted object back onto a blank canvas
    return O

9.550714def chaejcdjjfdjeabciagegcdaeehfbijj(I):
  # Identify the object of interest
  obj = first(colorfilter(objects(I, True, False, False), 1))
  
  # Calculate the dimensions of the object
  h, w = shape(obj)
  
  # Define a function to identify cells to replace based on object dimensions
  def replace_logic(i, j):
    return (i == h//2 or i == (h-1)//2) and (j == w//2 or j == (w-1)//2)
  
  # Generate indices of cells to replace
  to_replace = frozenset((i, j) for i in range(h) for j in range(w) if replace_logic(i, j))
  
  # Shift indices to object's location
  to_replace = shift(to_replace, ulcorner(obj))
  
  # Replace the cells
  O = fill(I, 2, to_replace)
  return O

14.176388def jchgdbffghccedfiafbcibbdgbeaacha(I):
  # Find the object
  obj = first(colorfilter(objects(I, True, False, False), 1))
  
  # Calculate center of mass
  ci, cj = centerofmass(obj)
  
  # Define a radius for replacement
  radius = 1
  
  # Generate indices to replace within the radius from the center of mass
  to_replace = frozenset((i, j) for i, j in toindices(obj) if abs(i - ci) <= radius and abs(j - cj) <= radius)
  
  # Replace cells
  O = fill(I, 2, to_replace)
  return O

11.529552def dfdfeecjfgcdedheacdcihdadjhebigh(I):
  # Locate the object
  obj = first(colorfilter(objects(I, True, False, False), 1))
  
  # Get the upper-left corner of the object
  ui, uj = ulcorner(obj)
  
  # Define the diagonal line length
  diag_len = min(height(obj), width(obj))
  
  # Generate indices for a diagonal line from the upper-left corner
  to_replace = frozenset((ui + i, uj + i) for i in range(diag_len))
  
  # Replace cells on the diagonal
  O = fill(I, 2, to_replace)
  return O

11.553654def jhdaebeedfceecbdbfaebbdcdfaafbej(I):
  # Find the object
  obj = first(colorfilter(objects(I, True, False, False), 1))
  
  # Check if the object is wider than it is tall
  wide = width(obj) > height(obj)
  
  # Define a function to calculate the column index for replacement
  def col_logic(i, w):
    return w//2 - (height(obj)//2 - i) if wide else w//2 + (height(obj)//2 - i) 
  
  # Generate indices for replacement based on object dimensions
  to_replace = frozenset((i, col_logic(i, width(obj))) for i in range(height(obj)))
  
  # Shift indices to the object's position
  to_replace = shift(to_replace, (ulcorner(obj)[0], 0))
  
  # Replace cells 
  O = fill(I, 2, to_replace)
  return O

13.81913def cfhcbcbdeddfejaabeaaddbdeaeffgag(I):
  # Find the object
  obj = first(colorfilter(objects(I, True, False, False), 1))

  # Calculate the object's center
  ci, cj = center(obj)

  # Define a function to check if a cell is on the diagonal
  def on_diagonal(i, j):
    return abs(i - ci) == abs(j - cj)

  # Generate indices for cells on the diagonal within the object
  to_replace = frozenset((i, j) for i, j in toindices(obj) if on_diagonal(i, j))

  # Replace cells
  O = fill(I, 2, to_replace)
  return O

10.947606def fbajfdidifdhefjfaaaffbagdhaihdaa(I):
  # Get a set of all unique colors in the grid
  colors = palette(I) - {0} 
  
  # Find the color with the fewest occurrences
  minority_color = min(colors, key=lambda c: colorcount(I, c)) 
  
  # Get objects of the minority color
  minority_objs = colorfilter(objects(I, T, F, T), minority_color) 
  
  # Find the rightmost object of the minority color
  rightmost_index = rightmost(merge(minority_objs)) 
  
  # Move each object towards the rightmost one
  new_objs = set()
  for obj in minority_objs:
    if rightmost(obj) < rightmost_index:
      new_objs.add(shift(obj, RIGHT))
    else:
      new_objs.add(obj)
  
  # Paint the new objects onto the original image
  O = paint(I, merge(new_objs)) 
  return O

14.347805def cfbecfhbcficeieijcfiheddaajjhhgb(I):
    # Get grid dimensions
    h, w = shape(I)
    # Generate all possible diagonal directions 
    directions = ((1, 1), (1, -1), (-1, 1), (-1, -1))
    # Function to find adjacent indices for a diagonal line
    def find_adjacent(i, j, di, dj):
      return {(i + di, j + dj), (i - di, j - dj)}
    # Initialize the output grid as a copy of the input
    O = I
    # Iterate through each cell in the grid
    for i in range(h):
      for j in range(w):
        # If the cell contains a '1'
        if I[i][j] == ONE:
          # Check each diagonal direction
          for di, dj in directions:
            # Check if the adjacent cells in the diagonal direction also contain '1's
            if 0 <= i + di < h and 0 <= j + dj < w and 0 <= i - di < h and 0 <= j - dj < w and I[i + di][j + dj] == ONE and I[i - di][j - dj] == ONE:
              # If true, update the output grid by replacing the adjacent '1's with '2's
              O = fill(O, TWO, find_adjacent(i, j, di, dj))
    return O

10.872807def ahcfggcbbcifegbeafecfgciaeeeihec(I):
    # Find objects in the grid (connected components of '1's)
    objs = objects(I, True, True, False) 
    to_replace = set()
    for obj in objs:
        # Check if the object is a diagonal line
        if len(obj) > 1 and (hline(obj) or vline(obj) or len(obj) == 2):
            continue
        # Add adjacent indices of the diagonal line to be replaced
        for (v, (i, j)) in obj:
            to_replace |= {(i + 1, j + 1), (i - 1, j - 1), (i + 1, j - 1), (i - 1, j + 1)}
    # Filter out indices that are out of bounds or don't contain '1'
    to_replace = {(i, j) for (i, j) in to_replace if 0 <= i < len(I) and 0 <= j < len(I[0]) and I[i][j] == 1}
    # Replace '1's at the filtered indices with '2's
    O = underfill(I, 2, to_replace)
    return O

25.257517def adaacabfcjccedhcbiibfedeeeiaccba(I):
    shifted_grids = (
        shift(asobject(I), (1, 1)),
        shift(asobject(I), (-1, -1)),
        shift(asobject(I), (1, -1)),
        shift(asobject(I), (-1, 1)),
    )
    diag_mask = canvas(0, shape(I))
    for shifted_grid in shifted_grids:
        diag_mask = cellwise(diag_mask, paint(diag_mask, shifted_grid), 1)
    diag_indices = ofcolor(diag_mask, 1)
    O = underfill(I, 2, diag_indices)
    return O

10.872807def jibebfbbeegiehdabfdgafbehdcjhfdg(I):
    objs = objects(I, T, F, T) # Find all objects, excluding background
    target_objs = colorfilter(objs, 2) # Select objects of color '2'
    for obj in target_objs:
        while not bordering(obj, I) and index(I, add(ulcorner(obj), UP)) == 0:
            I = move(I, obj, UP) # Move object one step up if possible
    return I

7.514062def jjcdhjdajcfhebbbibgaehabcibjbhef(I):
    target_color = 2
    for j in range(len(I[0])):  # Iterate over columns
        for i in range(len(I) - 1, -1, -1):  # Iterate over rows from bottom to top
            if I[i][j] == target_color:  # If cell contains target color
                k = i - 1 
                while k >= 0 and I[k][j] == 0: # Find empty space above
                    k -= 1
                if k != i - 1: # If there was empty space
                    I = paint(cover(I, {(target_color, (i, j))}), {(target_color, (k + 1, j))}) # Move the '2' up
    return I

10.412079def ccggecicdefaeigeiddcabbbciibhfgh(I):
  movable = ofcolor(I, 2)
  fixed = difference(asindices(I), movable)
  moved = frozenset()
  for i, j in movable:
    if (i - 1, j) not in fixed and 0 <= i - 1:
      k = 1
      while (i - k, j) not in fixed and 0 <= i - k:
        k += 1
      moved = insert((2, (i - k + 1, j)), moved)
    else:
      moved = insert((2, (i, j)), moved)
  return paint(cover(I, movable), moved)

8.342071def dbdacijhfdgdecddibgbaaaaddbccgfb(I):
    def up(obj):
        return shift(obj, (-1, 0))
    def is_valid(obj):
        return all(0 <= i < len(I) and 0 <= j < len(I[0]) and (I[i][j] == 0 or (i, j) in toindices(obj)) for _, (i, j) in obj)
    objs = objects(I, T, F, T)
    for obj in objs:
        if color(obj) == 2:
            new_obj = obj
            while is_valid(up(new_obj)):
                new_obj = up(new_obj)
            I = paint(cover(I, obj), new_obj)
    return I 

10.872807def bddjfifgifdfecccaibcfjbfgjeaciia(I):
  objs = objects(I, T, T, T)
  movable_objs = colorfilter(objs, TWO)
  for obj in movable_objs:
    i = 1
    while index(I, add(ulcorner(obj), (i, 0))) == ZERO and i < height(I):
      i += 1
    O = move(I, obj, (i - 1, 0))
  return O

11.445077def ddacefgfaaidebecaefbedijagidfbej(I):
  O = I
  for j in range(width(I)):
    for i in range(height(I) - 1):
      if index(O, (i, j)) == ZERO and index(O, (i + 1, j)) == TWO:
        O = switch(O, index(O, (i, j)), index(O, (i + 1, j)))
  return O

10.961756def beddhbjbbfcdebfjbdiaeidjecheahcd(I):
  O = I
  for obj in objects(I, T, T, T):
    if color(obj) == TWO:
      while uppermost(obj) > 0 and index(O, add(ulcorner(obj), (-1, 0))) == ZERO:
        O = move(O, obj, (-1, 0))
  return O

10.87668def iacahgiecbjfecchbfbbgcjbibchfech(I):
  O = canvas(ZERO, shape(I))
  for j in range(width(I)):
    column = tuple(I[i][j] for i in range(height(I)))
    filtered_column = tuple(v for v in column if v != ZERO)
    new_column = tuple(ZERO for _ in range(height(I) - len(filtered_column))) + filtered_column
    for i, v in enumerate(new_column):
      O = paint(O, {(v, (i, j))})
  return O

9.633256def fajeehceiafgegfejcfjjgcbcfaiciaj(I):
  # Find all objects made of '1'
  objs = colorfilter(objects(I, True, False, False), 1)
  
  # Process each object
  new_objs = set()
  for obj in objs:
    # Get object dimensions
    h, w = shape(obj)
    # Define function to identify center cells
    def is_center(i, j):
      return (i in [h//2, (h-1)//2]) and (j in [w//2, (w-1)//2])
    # Generate indices of center cells within the object
    center_indices = frozenset((i, j) for i, j in toindices(obj) if is_center(i-uppermost(obj), j-leftmost(obj)))
    # Recolor center cells to '2'
    new_objs.add(recolor(2, center_indices))

  # Combine re-colored objects with original grid
  O = I
  for obj in new_objs:
    O = paint(O, obj)
  return O

9.625012def igibhgbacbafeebgaaadfbciggdibjab(I):
  for obj in colorfilter(objects(I, True, False, False), 1):
    h, w = shape(obj)
    center_i = uppermost(obj) + h // 2
    center_j = leftmost(obj) + w // 2
    if h % 2 == 0:
      I = fill(I, 2, frozenset({(center_i, center_j)}))
    else:
      I = fill(I, 2, frozenset({(center_i, center_j), (center_i - 1, center_j)}))
  return I

10.936989def bdebcddibaaeefdfadbedgfghdajbfjd(I):
  objs = objects(I, True, False, False)
  for v in palette(I) - {mostcommon(I)}:
    for obj in sizefilter(colorfilter(objs, v), 1):
      I = paint(I, recolor(2, obj))
    for obj in sfilter(colorfilter(objs, v), lambda o: size(o) > 1):
      h, w = shape(obj)
      ci = uppermost(obj) + h // 2
      cj = leftmost(obj) + w // 2
      I = fill(I, 2, frozenset({(ci, cj), (ci - (h % 2), cj)}))
  return I

9.905644def jafchehjbebgedaajiifcfbicjbbigfc(I):
    objs = objects(I, True, True, False)
    to_replace = set()
    for obj in objs:
        for (v, (i, j)) in obj:
            diag_neighbors = {(i + 1, j + 1), (i - 1, j - 1), (i + 1, j - 1), (i - 1, j + 1)}
            valid_neighbors = {(x, y) for (x, y) in diag_neighbors if 0 <= x < len(I) and 0 <= y < len(I[0])}
            if len(valid_neighbors) >= 2 and all(index(I, n) == 1 for n in valid_neighbors):
                to_replace.add((i, j))
    O = underfill(I, TWO, frozenset(to_replace))
    return O

14.786322def hjabbebecidheibeaiddgiegeaifaife(I):
  def check_and_replace(i, j, I):
    if I[i][j] != ONE:
      return I[i][j]
    count = 0
    h, w = len(I), len(I[0])
    for x, y in [(i+1,j+1), (i-1,j-1), (i+1, j-1), (i-1, j+1)]:
      if 0 <= x < h and 0 <= y < w and I[x][y] == ONE:
        count += 1
    return TWO if count == 2 else I[i][j]
  O = canvas(ZERO, shape(I))
  for i in range(len(I)):
    for j in range(len(I[0])):
      O = paint(O, {(check_and_replace(i, j, I), (i, j))})
  return O

12.686579def fjacafbaiiceedeabgddbifiibcfaihc(I):
  def is_diagonal_center(I, i, j):
    if I[i][j] != ONE:
      return False
    h, w = len(I), len(I[0])
    return (0 <= i+1 < h and 0 <= j+1 < w and I[i+1][j+1] == ONE and 0 <= i-1 < h and 0 <= j-1 < w and I[i-1][j-1] == ONE) or \
           (0 <= i+1 < h and 0 <= j-1 < w and I[i+1][j-1] == ONE and 0 <= i-1 < h and 0 <= j+1 < w and I[i-1][j+1] == ONE)
  O = canvas(ZERO, shape(I))
  for i in range(len(I)):
    for j in range(len(I[0])):
      if is_diagonal_center(I, i, j):
        O = paint(O, {(TWO, (i, j))})
      else:
        O = paint(O, {(I[i][j], (i, j))})
  return O

8.495893def hdbedibecgdbefffacdgfacjceaebfbf(I):
    h, w = shape(I)
    O = canvas(ZERO, (h, w))
    for i in range(h):
        for j in range(w):
            if I[i][j] == ONE:
                O = paint(O, {(ONE, (i, j))})
                if (i > 0 and j > 0 and I[i-1][j-1] == ONE and i < h-1 and j < w-1 and I[i+1][j+1] == ONE) or \
                   (i > 0 and j < w-1 and I[i-1][j+1] == ONE and i < h-1 and j > 0 and I[i+1][j-1] == ONE):
                    O = paint(O, {(TWO, (i, j))})
    return O

12.869398def aedfgdebhficedcdibjfabefjfdaahhg(I):
    objs = objects(I, True, False, True)  # Extract objects
    target = recolor(2, {(0, 0)}) # Define a virtual target at the top
    for obj in objs:
        if color(obj) == 2: # Check if the object is of color '2'
            direction = gravitate(obj, target)  # Get the direction towards the target
            new_obj = shift(obj, direction)  # Move the object 
            I = paint(cover(I, obj), new_obj) # Paint the final position
    return I

10.082386def ddeebaefddceeicijfeaiadifdcbaeii(I):
    twos = ofcolor(I, 2)  # Get indices of all '2's
    for i, j in twos:
        empty = {(k, j) for k in range(i) if I[k][j] == 0}  # Find empty indices above
        if empty:
            highest_empty = (max(empty)[0], j)  # Get the highest empty index
            I = paint(cover(I, {(2, (i, j))}), {(2, highest_empty)})  # Move the '2'
    return I

9.585566def cbdidbbaaiffeadfjbfgefbbheabjbfi(I):
  twos = ofcolor(I, TWO)
  shifted_twos = frozenset((0, j) for i, j in twos)
  O = paint(cover(I, twos), recolor(TWO, shifted_twos))
  return O

7.514062def baebfaedfdideiagidaaghffbbdcgjei(I):
  O = I
  for i in range(height(I)-1, -1, -1):
    for j in range(width(I)):
      if index(O, (i,j)) == TWO:
        k = i
        while k > 0 and index(O, (k-1,j)) == ZERO:
          k -= 1
        O = paint(cover(O, {(TWO, (i,j))}), {(TWO, (k,j))})
  return O

8.342071def daaafegefgceeidbaejfijibadccijjd(I):
  O = I
  for obj in objects(I, True, True, False):
    if color(obj) == TWO:
      shift_amount = uppermost(obj)
      O = paint(cover(O, obj), shift(obj, (-shift_amount, 0)))
  return O

10.412079def cibegfcdeegfefghigcbajgefdccedci(I):
  O = I
  for j in range(width(I)):
    two_indices = [i for i in range(height(I)) if index(O, (i, j)) == TWO]
    if two_indices:
      top_index = min(two_indices)
      for i in two_indices:
        O = paint(cover(O, {(TWO, (i, j))}), {(TWO, (top_index, j))})
      top_index += 1
  return O

10.364657def gechabfjcddcejafjcbejfaabedecdbh(I):
  objs = objects(I, True, False, False)
  target_objs = colorfilter(objs, 1)
  new_grid = I
  for obj in target_objs:
    h = height(obj)
    center_row = uppermost(obj) + h // 2
    left_col = leftmost(obj)
    new_grid = fill(new_grid, 2, frozenset({(center_row, left_col), (center_row + 1, left_col)}))
  return new_grid

11.09045def dbaabjccdeacedbjicfjcgcgefhaaada(I):
  diags = objects(I, True, True, True)
  to_fill = frozenset()
  for diag in diags:
    if len(diag) >= 2 and hline(diag) == False and vline(diag) == False:
      i, j = ulcorner(diag)
      to_fill = to_fill | {(i - 1, j - 1), (i + height(diag), j + width(diag) - 1)}
  h, w = shape(I)
  to_fill = frozenset((i, j) for i, j in to_fill if 0 <= i < h and 0 <= j < w)
  O = underfill(I, TWO, to_fill)
  return O

20.794188def afjbacfbdfgieiahjhffeicehegicfbe(I):
  h, w = shape(I)
  def check_diag(i, j, di, dj):
    if 0 <= i + di < h and 0 <= j + dj < w and I[i + di][j + dj] == ONE:
      return (i + 2 * di, j + 2 * dj) if 0 <= i + 2 * di < h and 0 <= j + 2 * dj < w else None
    return None
  to_fill = set()
  for i in range(h):
    for j in range(w):
      if I[i][j] == ONE:
        for di, dj in [(1, 1), (1, -1)]:
          new_i, new_j = check_diag(i, j, di, dj) or (None, None)
          if new_i is not None:
            to_fill.add((new_i, new_j))
  O = underfill(I, TWO, frozenset(to_fill))
  return O

1.2794839def abhacbbeijaieeheiegeheabfdecgbfc(I):
  objs = objects(I, T, F, T) 
  for obj in objs:
    if color(obj) == 2:
      new_obj = obj
      while uppermost(new_obj) > 0 and all(I[i-1][j] != 1 for _, (i, j) in new_obj):
        new_obj = shift(new_obj, (-1, 0))
      I = paint(cover(I, obj), new_obj)
  return I

13.024674def dggejbaafhfdejhgbhebbjdjfaadhfaa(I):
  def move_up(obj, grid):
    new_obj = obj
    while uppermost(new_obj) > 0 and all(grid[i-1][j] != 1 for _, (i, j) in new_obj):
      new_obj = shift(new_obj, (-1, 0))
    return new_obj
  return paint(I, merge(apply(lambda obj: move_up(obj, I), colorfilter(objects(I, T, F, T), 2)))) 

6.965877def fbibecdbbcdeedfgiedhhfefgjegebce(I):
    objs = objects(I, T, T, T)
    shifted_objs = []
    for obj in objs:
        if color(obj) == 2:
            uppermost_row = uppermost(obj)
            new_obj = shift(obj, (-uppermost_row, 0))
            shifted_objs.append(new_obj)
        else:
            shifted_objs.append(obj)
    O = paint(canvas(0, shape(I)), merge(shifted_objs))
    return O

4.9250298def bcgbhibajcddeaeeaabafhddfbcbffef(I):
    twos = ofcolor(I, 2)
    for i, j in twos:
        k = i
        while k > 0 and index(I, (k - 1, j)) == 0:
            k -= 1
        I = paint(cover(I, {(2, (i, j))}), {(2, (k, j))})
    O = I
    return O

10.874048def acabdbdfegjaefjdbcdcdidaeggahdcd(I):
  # Find objects, excluding background
  objs = objects(I, T, F, T)
  
  # Find the least frequent color 
  min_color = leastcolor(I)  # Directly apply leastcolor to the grid

  # Find target column using the rightmost object of the least frequent color
  target_col = rightmost(merge(colorfilter(objs, min_color))) 

  # Move objects to the target column
  moved_objs = frozenset(shift(obj, (0, target_col - centerofmass(obj)[1])) for obj in colorfilter(objs, min_color))

  # Paint onto the input grid
  return paint(I, merge(moved_objs))

10.872101def cfbefhedahfaegabaiejaicdgbdbgjad(I):
  # Directly find the least frequent color on the grid
  min_color = leastcolor(I) 

  # Get all indices of the least frequent color
  min_indices = ofcolor(I, min_color) 

  # Find the target column - the rightmost occurrence of the least frequent color
  target_col = rightmost(min_indices)

  # Create a set to store the moved indices
  moved_indices = set()

  # Iterate through each index of the least frequent color
  for i, j in min_indices:
    # Move the index horizontally to the target column
    moved_indices.add((i, target_col))  

  # Paint the moved indices with the least frequent color on the input grid
  return paint(I, {(min_color, idx) for idx in moved_indices})

14.779404def iefggcebjdhbeabajefacjbcaadidhab(I):
  h, w = shape(I)
  def is_diagonal_center(i, j):
    if I[i][j] != ONE:
      return False
    count = 0
    for di, dj in [(1, 1), (1, -1), (-1, 1), (-1, -1)]:
      ni, nj = i + di, j + dj
      if 0 <= ni < h and 0 <= nj < w and I[ni][nj] == ONE:
        count += 1
    return count >= 2
  O = canvas(ZERO, (h, w))
  for i in range(h):
    for j in range(w):
      if is_diagonal_center(i, j):
        O = paint(O, {(TWO, (i, j))})
      else:
        O = paint(O, {(I[i][j], (i, j))})
  return O

7.5032063def ajaahdffahciebeeiaicjaaaeeaedggh(grid):
  def find_obstacle(obj, grid):
    path = shoot(ulcorner(obj), (-1, 0)) 
    return extract(path, lambda loc: index(grid, loc) == 1) or (-1, -1)

  for obj in colorfilter(objects(grid, T, F, T), 2):
    obstacle = find_obstacle(obj, grid)
    new_obj = shift(obj, (-manhattan(obj, {obstacle}), 0))
    grid = paint(cover(grid, obj), new_obj)
  return grid

11.978109def hihcbjefaedeedgijfccdgbdfbcdcjga(grid):
  def free_path(obj, grid):
    path = set(toindices(obj))
    while uppermost(path) > 0:
      next_row = {(i - 1, j) for i, j in path}
      if any(index(grid, loc) == 1 for loc in next_row):
        break
      path = next_row
    return path

  for obj in colorfilter(objects(grid, T, F, T), 2):
    grid = paint(cover(grid, obj), toobject(free_path(obj, grid), grid))
  return grid

12.560421def aaeeddheaaedegcdahaafbfbcfbihdhf(I):
  objs = objects(I, T, T, T) # identify all objects in the grid
  twos = colorfilter(objs, 2) # filter for objects made of '2'
  for obj in twos:
    upper = uppermost(obj) # find the top row of the object
    while upper > 0 and index(I, (upper-1, leftmost(obj))) == 0:
      # move object up as long as the cell above is '0'
      obj = shift(obj, (-1, 0)) 
      upper -= 1
    I = paint(cover(I, obj), obj) # update the grid with the moved object
  O = I
  return O

0.0def fgeecbjcdbdaeegdjbgjdhejfaffggej(I):
  for j in range(len(I[0])): # iterate over columns
    for i in range(len(I)): # iterate over rows from top to bottom
      if I[i][j] == 2: # if cell contains '2'
        k = i
        while k > 0 and I[k-1][j] == 0: # find the highest empty row
          k -= 1
        I = paint(cover(I, {(2, (i, j))}), {(2, (k, j))}) # move the '2'
  O = I
  return O

