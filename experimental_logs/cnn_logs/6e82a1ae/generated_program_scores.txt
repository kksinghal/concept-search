0.13999999999999999, 2.2671273, def jafbbaecdaeceafbaifbafcbefbacfee(I):
  objs = objects(I, T, F, T)
  objs_sorted = order(objs, size)
  new_objs =  papply(
      lambda i, obj: recolor(i + 1, obj),
      interval(ZERO, size(objs_sorted), ONE),
      objs_sorted
  )
  O = paint(I, merge(new_objs))
  return O
 
0.13999999999999999, 2.45258, def jcbagchadaeaeedeabfcccfdhcjbffed(I):
  objs = objects(I, T, F, T)
  n_objs = size(objs)
  O = I
  for i in range(n_objs):
    largest = argmax(objs, size)
    O = fill(O, n_objs - i, largest)
    objs = remove(largest, objs)
  return O
 
0.09999999999999999, 1.977495, def gbafadigbbafefeejjbfeiaiadfhdjbb(I):
  objs = objects(I, T, F, T)
  sizes = apply(size, objs)
  sorted_sizes = order(sizes, identity)
  mapping = dict(zip(sorted_sizes, interval(ONE, size(sizes) + ONE, ONE)))
  O = I
  for obj in objs:
    O = fill(O, mapping[size(obj)], obj)
  return O
 
0.06, 1.587134, def facjfdefiaiheaajjfiahabaafebejcb(I):
    objs = objects(I, T, F, T)
    def rank_obj(obj):
        return len(sfilter(objs, lambda x: size(x) > size(obj))) + 1
    O = I
    for obj in objs:
        O = fill(O, rank_obj(obj), obj)
    return O
 
0.09333333333333334, 1.9267244, def cdcaaafebccgeeciabdccjdgdaacfbaa(I):
    labeled = canvas(ZERO, shape(I))
    objs = objects(I, T, F, T)
    for i, obj in enumerate(order(objs, lambda x: -size(x))):
        labeled = paint(labeled, recolor(i + 1, obj))
    return labeled
 
0.09333333333333334, 1.9267244, def fbgfggafibbfeaegjbcdchcfbaeiaafd(I):
  objs = objects(I, T, T, T) # Get all objects, treating diagonals as connected
  sized_objs = sorted(objs, key=size, reverse=T) # Sort objects by size (largest first)
  O = I
  for i, obj in enumerate(sized_objs):
    O = fill(O, i + 1, obj) # Fill each object with a unique digit based on size ranking
  return O
 
0.11666666666666668, 2.2707236, def fieeefjhiegbedggidfcgeafacdcbffb(I):
  objs = objects(I, T, T, T) 
  def obj_key(obj):
    return (colorcount(I, color(obj)), -uppermost(obj)) # Sort by color count then uppermost row
  sorted_objs = order(objs, obj_key)
  O = I
  for i, obj in enumerate(sorted_objs):
    O = fill(O, i+1, toindices(obj)) # Fill directly with new color based on index
  return O 
 
0.09333333333333334, 2.234735, def egcaddfbccbbeaaaicfdjidighdceejf(I):
    objs = objects(I, T, T, T)
    def key_func(obj):
        return (-size(toindices(obj)), uppermost(obj))
    sorted_objs = order(objs, key_func)
    O = canvas(0, shape(I))
    for i, obj in enumerate(sorted_objs):
        O = paint(O, recolor(i + 1, obj))
    return O
 
0.9333333333333332, 21.396666, def cebcdhiabfcfeddjiacedfcbddbfjeea(I):
  objs = objects(I, True, False, False)
  even_objs = sfilter(objs, lambda obj: even(size(obj)))
  odd_objs = difference(objs, even_objs)
  
  even_indices = merge(apply(toindices, even_objs))
  odd_indices = merge(apply(toindices, odd_objs))
  
  O = fill(I, 1, even_indices)
  O = fill(O, 3, odd_indices)
  
  bottom_row = lowermost(odd_indices) if odd_indices else 0
  two_obj = {(2, (bottom_row + 2, 9)), (2, (bottom_row + 3, 9))}
  O = paint(O, frozenset(two_obj))
  
  return O
 
0.9499999999999998, 29.378056, def faefegedcifdejbhaeddfjgeigidebhf(I):
  objs = objects(I, True, False, False)
  
  def recolor_obj(obj):
    obj_size = size(obj)
    if obj_size >= 3:
      return recolor(2, obj)
    elif obj_size == 2:
      return recolor(1, obj)
    else:
      return recolor(3, obj)
  
  recolored_objs = apply(recolor_obj, objs)
  O = I
  for obj in recolored_objs:
    O = paint(O, obj)
  return O
 
1.0, 30.394165, def ecfddehebabeebbgadccfhejjffaahbg(I):
    objs = objects(I, True, False, False)
    
    size_map = {1: 1, 2: 2, 3: 3}
    def recolor_by_size(obj):
        size_key = min(size(obj), 3)  # Cap size key at 3
        new_color = size_map[size_key]
        return recolor(new_color, obj)
    
    recolored_objs = apply(recolor_by_size, objs)
    O = I
    for obj in recolored_objs:
        O = paint(O, obj)
    
    return O
 
1.0, 29.684696, def adffjgdbejedefjfihebbedefbfbdhef(I):
  def process_object(obj, grid):
    obj_size = size(obj)
    new_color = 1 if even(obj_size) else 3
    if obj_size > 2:
      new_color = 3
    elif obj_size == 2:
      new_color = 2 if mostcommon(grid) == 1 else 1 
    grid = paint(grid, recolor(new_color, obj))
    return grid

  objs = objects(I, True, False, False)
  O = I
  for obj in objs:
    O = process_object(obj, O)
  
  return O
 
1.0, 29.711605, def eaeafbajibgbebheabgbibddhebadjgj(I):
    def recolor_rule(obj):
        if size(obj) > 2:
            return 3
        return 2 if even(sum(i for i, j in toindices(obj))) else 1

    objs = objects(I, True, False, False)
    recolored = apply(lambda obj: recolor(recolor_rule(obj), obj), objs)
    O = paint(canvas(0, shape(I)), merge(recolored))
    return O
 
0.09333333333333334, 1.8568418, def bjfafibgfcadeehdjaghdcbejhffbhda(I):
    objs = objects(I, T, F, T)
    
    # Sort objects by size, then by uppermost row
    sorted_objs = order(objs, lambda obj: (-size(obj), uppermost(obj)))

    obj1 = first(sorted_objs)
    obj2 = sorted_objs[1] 
    obj3 = sorted_objs[2] 

    O = fill(I, 1, toindices(obj1))
    O = fill(O, 2, toindices(obj2))
    O = fill(O, 3, toindices(obj3))
    return O 
 
0.13, 2.1379557, def ccebfcdafhcfegdbjgafdceagjebbjhi(I):
  objs = objects(I, T, F, T)

  # Sort objects by their vertical center
  sorted_objs = order(objs, lambda obj: center(obj)[0]) 

  obj1 = sorted_objs[0]
  obj2 = sorted_objs[1]
  obj3 = sorted_objs[2]

  O = fill(I, 1, toindices(obj1))
  O = fill(O, 2, toindices(obj2))
  O = fill(O, 3, toindices(obj3))
  return O
 
0.13, 2.8340268, def ecbeciahgeebeaigjbcfcfifacchicec(I):
  objs = objects(I, T, F, T)

  # Find pairs of objects
  pairs = [(a, b) for a in objs for b in objs if a != b]

  O = I
  for a, b in pairs:
    # Determine relative position
    pos = position(a, b)
    
    # Recolor based on relative position
    if pos == (0, 1): 
      O = fill(O, 1, toindices(a))
      O = fill(O, 2, toindices(b))
    elif pos == (0, -1):
      O = fill(O, 2, toindices(a))
      O = fill(O, 1, toindices(b))

  return O
 
0.12, 2.135417, def gahjceagcgdbeedbbefbcegfbgedadbb(I):
  objs = objects(I, T, F, T)

  # Sort objects based on distance from the top-left corner
  sorted_objs = order(objs, lambda obj: manhattan(obj, {(0,0)})) 

  obj1 = sorted_objs[0]
  obj2 = sorted_objs[1]
  obj3 = sorted_objs[2]

  O = fill(I, 1, toindices(obj1))
  O = fill(O, 2, toindices(obj2))
  O = fill(O, 3, toindices(obj3))
  return O
 
0.060000000000000005, 1.77814, def jbdafgdbhdjheddiiachafccbcaccbjh(I):
  objs = objects(I, T, F, T)

  # Find object with the maximum count of the most common color
  target_obj = argmax(objs, lambda obj: colorcount(obj, mostcolor(obj)))

  O = I
  for obj in objs:
    if obj == target_obj:
      O = fill(O, 1, toindices(obj))
    else:
      O = fill(O, 2, toindices(obj))

  return O
 
0.12333333333333334, 2.3351789, def fihaebidfedgeefejabgjdbbgbfbecjh(I):
  objs = objects(I, True, False, True)
  O = I
  for i, obj in enumerate(objs):
    O = paint(O, recolor(i + 1, obj))
  return O
 
0.12000000000000001, 1.7865059, def dcfhbbcacfjgegbbaebdegdejeedbidc(I):
    O = canvas(mostcolor(I), shape(I))
    objs = objects(I, True, False, True)
    for i, obj in enumerate(sorted(objs, key=lambda x: ulcorner(x))):
        O = paint(O, recolor(i + 1, obj))
    return O
 
0.09333333333333334, 2.234735, def cbeedcebdagcedafibdheadbdcbicdef(I):
    objs = objects(I, T, F, T)
    sorted_objs = order(objs, lambda obj: (-size(obj), ulcorner(obj)))
    O = canvas(ZERO, shape(I))
    for i, obj in enumerate(sorted_objs):
        O = paint(O, recolor(i + 1, obj))
    return O
 
0.09333333333333334, 1.7983192, def fbcfeecdagfeeidfbffacbgiceijbacb(I):
    labeled = canvas(ZERO, shape(I))
    objs = objects(I, T, F, T)
    for i, obj in enumerate(sorted(objs, key=lambda x: (size(x), ulcorner(x)), reverse=True)):
        labeled = underpaint(labeled, recolor(i + 1, obj))
    return labeled
 
0.12000000000000001, 1.7865059, def cjgdafbgcfcfegaebcbagbefahbadigd(I):
  objs = objects(I, T, T, T)
  def top_left_sort(obj): 
    return (uppermost(obj), leftmost(obj))
  sorted_objs = sorted(objs, key=top_left_sort)
  O = I
  for i, obj in enumerate(sorted_objs):
    O = fill(O, i + 1, obj)
  return O
 
0.12666666666666668, 2.7724912, def bdbgbciadccdeibbjcdedbjaecccifch(I):
  O = canvas(0, shape(I))
  for i, row in enumerate(I):
    for j, value in enumerate(row):
      if value != 0:
        obj = extract(objects(I, T, T, T), lambda obj: (i,j) in toindices(obj))
        O = paint(O, recolor(len(objects(O, T, T, T)) + 1, obj))
  return O
 
0.12666666666666668, 4.669363, def jheefjaebicbedbfaedfefhfdaibfadf(I):
  O = I
  for i in range(height(I)):
    for j in range(width(I)):
      if I[i][j] != 0:  # Assuming 0 is background
        O = fill(O, len(objects(crop(O, (0, 0), (i+1, j+1)), T, T, T)), {(i, j)}) 
  return O
 
0.9033333333333333, 25.96578, def hebaaagccfefeejabcaeiddfafjafaea(I):
  objs = objects(I, T, F, F)  # Identify all objects
  output = I # Initialize output grid
  for obj in objs:
    if square(obj):
      output = fill(output, 1, obj)  # Recolor squares to 1
    elif hline(obj) and width(obj) == 2:
      output = fill(output, 2, obj)  # Recolor 1x2 horizontal lines to 2
    elif vline(obj) and height(obj) == 2:
      output = fill(output, 3, obj)  # Recolor 2x1 vertical lines to 3
    elif hline(obj) and width(obj) == 3:
      output = fill(output, 2, obj)  # Recolor 1x3 horizontal lines to 2
    elif vline(obj) and height(obj) == 3:
      output = fill(output, 1, obj)  # Recolor 3x1 vertical lines to 1
    else:
      output = fill(output, 1, obj)  # Recolor all other objects to 1 
  O = output
  return O
 
0.10333333333333333, 2.476913, def edegbhbbfaacefeijgbcdachgaccadhj(I):
  objs = objects(I, T, F, F)
  squares = sfilter(objs, square)
  hlines = sfilter(objs, hline)
  vlines = sfilter(objs, vline)
  O = fill(fill(fill(I, 1, merge(squares)), 2, merge(sfilter(hlines, lambda x: width(x) == 2))), 3, merge(sfilter(vlines, lambda x: height(x) == 2)))
  return O
 
0.9133333333333334, 29.537018, def dfhehichcfdbedciaacbbjbejgafadcj(I):
  def recolor_logic(obj):
    if square(obj): return 1
    if hline(obj): return 2 if width(obj) == 2 else 1 
    if vline(obj): return 3 if height(obj) == 2 else 1
    return 1 # Default recolor for other shapes
  O = I
  for obj in objects(I, T, F, F):
    O = fill(O, recolor_logic(obj), obj)
  return O
 
0.15, 3.0614707, def bhhbfjeeeabaeeicadfbfibeaaeeadfe(I):
  def recolor_rule(obj, c):
    return (1 if square(obj) else c,
            2 if hline(obj) and width(obj) == 2 else c,
            3 if vline(obj) and height(obj) == 2 else c)
  O = I
  for obj in objects(I, T, F, F):
    O = fill(O, mostcommon(recolor_rule(obj, mostcolor(obj))), obj)
  return O
 
0.12666666666666668, 2.604863, def fcibbdaajeideieibfbccddbiibgadhi(I):
  shape_map = {(1, 1): 1, (2, 1): 3, (1, 2): 2, (3, 1): 1, (1, 3): 2} # Define shape-color mapping
  O = I
  for obj in objects(I, T, F, F):
    shape_key = (width(obj), height(obj))
    new_color = shape_map.get(shape_key, mostcolor(obj)) # Get new color based on shape, defaulting to the original color
    O = fill(O, new_color, obj)
  return O
 
0.09333333333333334, 2.0521865, def abbehgbfdbaaehjabjjgegeahafigbaa(I):
  objs = objects(I, T, F, T)
  sorted_objs = order(objs, lambda obj: -size(obj))
  obj1 = first(sorted_objs)
  obj2 = sorted_objs[1] if size(sorted_objs) > 1 else obj1
  obj3 = sorted_objs[2] if size(sorted_objs) > 2 else obj1
  O = fill(I, 1, toindices(obj1))
  O = fill(O, 2, toindices(obj2))
  O = fill(O, 3, toindices(obj3))
  return O 
 
0.06, 1.9537634, def jfjccegdccidechijeddbabgciehfedh(I):
  objs = objects(I, T, F, T)
  sizes = apply(size, objs)
  size_order = order(sizes, lambda s: -s)
  O = I
  for i in range(min(3, size(sizes))):
    target_size = size_order[i]
    obj = extract(objs, lambda obj: size(obj) == target_size)
    O = fill(O, i + 1, toindices(obj))
  return O
 
0.15, 27.12001, def iidifhbaifddececahjdgbcaiefaieae(I):
  O = I
  for label in range(1, 4):
    largest_obj = argmax(objects(O, T, F, T), size)
    if largest_obj:
      O = fill(O, label, toindices(largest_obj))
      O = cover(O, largest_obj) 
  return O
 
0.0, 0.0, def dgdcjahadjhaeajfaegjjbeebcbddebe(I):
  objs = objects(I, T, F, T)
  def rank_obj(obj):
    return sorted(apply(size, objs), reverse=True).index(size(obj)) + 1
  return tuple(tuple(rank_obj(extract(objs, lambda o: contained((v, (i, j)), o))) if v != 0 else 0 for j, v in enumerate(r)) for i, r in enumerate(I))
 
