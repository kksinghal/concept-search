4.25, 4.253696, def cbdiefjgageeedfdafbcdaabbcdfibff(I):
    objs = objects(I, T, T, T)  # Extract objects, allow diagonal connections, without background
    target_objs = colorfilter(objs, 3) # Filter objects with color 3
    target_indices = mapply(toindices, target_objs) # Get indices of target objects
    O = fill(I, 8, target_indices)  # Fill target indices with color 8
    return O
 
2.25, 5.8479548, def ebfedaaecdihegaaaagdafeeaahfiadd(I):
    parts = partition(I)  # Partition the grid into objects based on color
    target_color = 3
    O = I  # Initialize output as input
    for obj in parts:
        if color(obj) == target_color:  # Check if the object's color is 3
            O = paint(O, recolor(8, obj))  # Recolor the object to 8 and paint it onto the output
    return O
 
2.25, 5.8479548, def fggebbedfidcedfajccaehhccejggfbh(I):
  return tuple(tuple(EIGHT if v == THREE else v for v in r) for r in I)
 
5.75, 2.9164476, def iegeedcfchgjeedabggaebefageecbff(I):
  objs = objects(I, T, F, T)  # Get all objects, excluding background
  largest_obj = argmax(objs, size)  # Find the largest object by size
  O = paint(I, recolor(8, largest_obj))  # Recolor the largest object to 8
  return O
 
5.75, 2.7553084, def bhchhchgbdicebfeadieeejgfabefcbj(I):
    objs = objects(I, T, F, T)
    obj_sizes = apply(size, objs)  # Calculate sizes of all objects
    max_size_index = argmax(enumerate(obj_sizes), lambda x: x[1])[0]  # Get index of the largest size
    largest_obj = totuple(objs)[max_size_index]  # Extract object using the index
    O = paint(I, recolor(8, largest_obj))
    return O
 
5.0, 3.5718048, def fffbcgbfjbadejeaacadhjdageghiggh(I):
  # Find all non-background objects
  x1 = objects(I, T, F, T) 
  # Find the largest object by size
  x2 = argmax(x1, size) 
  # Get the color of the largest object
  x3 = color(x2) 
  # Find all occurrences of the largest object
  x4 = occurrences(I, x2)  
  # Recolor the occurrences to '8'
  O = fill(I, 8, x4) 
  return O 
 
6.0, 4.696315, def caaaaehbcgaaefadaiabehabebejfded(I):
  objs = objects(I, T, T, T) # Identify all objects in the grid
  largest_obj = argmax(objs, size) # Find the largest object
  recolored_obj = recolor(8, largest_obj) # Recolor the largest object to '8'
  O = paint(I, recolored_obj) # Paint the recolored object onto the original grid
  return O
 
7.0, 4.938055, def hbacaddbeeccebadabfhdedfdaiijbbc(I):
  objs = objects(I, T, T, T)
  def recolor_if_largest(obj, largest_obj):
    return recolor(8, obj) if obj == largest_obj else obj
  largest_obj = argmax(objs, size)
  recolored_objs = apply(lbind(recolor_if_largest, largest_obj), objs)
  O = paint(I, merge(recolored_objs))
  return O
 
3.0, 2.4816792, def ejabbdhjaeijeffdbgefehcbbhcefeeb(I):
  h = height(I) // 2  # Calculate the height of the top half
  top = I[:h]  # Extract the top half of the grid
  bottom = I[h:]  # Extract the bottom half of the grid
  top = tuple(tuple(8 if v == 3 else v for v in r) for r in top) # Recolor '3's to '8's in the top half
  return top + bottom # Concatenate the modified top and original bottom halves
 
6.25, 8.07207, def eegjfchdbfbeecdcbjibeafficciabef(I):
    return vconcat(
        tuple(tuple(8 if c == 3 else c for c in r) for r in tophalf(I)),
        bottomhalf(I),
    )
 
6.0, 4.696315, def eefefjadbcfbebgjbdigffaifhgaejab(I):
  # Find all objects in the grid
  x1 = objects(I, T, T, T)
  # Find the largest object
  x2 = argmax(x1, size)
  # Get the original color of the largest object
  x3 = color(x2)
  # Recolor the largest object to '8'
  O = paint(I, recolor(8, x2))
  return O
 
6.75, 3.3802006, def aeefbgccfaahefejideeedaadcbbfgaa(I):
  # Get a set of all colors
  x1 = palette(I)
  # Find the largest object by iterating over each color
  x2 = argmax([first(objects(replace(I, c, 1), T, F, T)) for c in x1], size)
  # Recolor occurrences to '8'
  O = fill(I, 8, toindices(x2))
  return O
 
16.25, 6.825792, def icjgeiffdcadebfibbfefajidiadehde(I):
  # Find all objects without considering the background
  x1 = objects(I, T, T, F)
  # Find the largest object
  x2 = argmax(x1, size)
  # Get the indices of the largest object
  x3 = toindices(x2)
  # Recolor the grid by filling '8' at the object's indices
  O = fill(I, 8, x3)
  return O
 
5.5, 4.114896, def dcdjibaceebbeeedbeedbccheibbccca(I):
  objs = objects(I, T, T, T)  # Get all connected objects (with diagonal connections)
  largest_obj = argmax(objs, size)  # Find the largest object
  O = underpaint(I, recolor(8, largest_obj))  # Recolor the largest object to '8' and paint it onto the original grid
  return O
 
4.0, 4.1537967, def facfajhbfeecefjajhbcajedgcgabcia(I):
    h, w = len(I), len(I[0])
    O = canvas(0, (h, w)) # Create an empty canvas with same dimensions as I
    for j in range(w): # Iterate over columns
        bottom_three_found = False # Flag to track bottom-most '3' in each column
        for i in range(h): # Iterate over rows
            if I[i][j] == 3: # If a '3' is found
                if i == h-1 or bottom_three_found: # If it's the bottom-most or we've already seen one in this column
                    O = paint(O, {(3, (i, j))}) # Paint it as '3'
                else:
                    O = paint(O, {(8, (i, j))}) # Otherwise, paint it as '8'
                    bottom_three_found = True # Mark that we've seen a '3' in this column
            else:
                O = paint(O, {(I[i][j], (i, j))}) # Paint other digits as is
    return O
 
5.25, 3.7249691, def cdddajfhjdgfefeijaajjeeggaaaeiai(I):
  objs = fgpartition(I) # Partition the input into objects without background
  O = I # Start with the original grid
  for obj in objs:
    if color(obj) == 3: # If the object's color is 3
      bottom_row = lowermost(obj) # Find the bottom-most row of the object
      shifted_obj = shift(obj, (1, 0)) # Shift the object down by one row
      O = paint(O, recolor(8, difference(obj, shifted_obj))) # Recolor and paint everything except the bottom row
      O = underpaint(O, recolor(3, intersection(obj, shifted_obj))) # Recolor and paint the bottom row back to 3
  return O
 
2.5, 3.566292, def beeeaeacedaaeeicjdaefcbddcfeacie(I):
    h, w = len(I), len(I[0])
    O = paint(canvas(0, (h, w)), asobject(I)) # Initialize O with the content of I
    for j in range(w): # For each column
        bottom_three = max((i for i in range(h) if I[i][j] == 3), default=None) # Find the row index of the bottom-most '3'
        if bottom_three is not None: # If there's a '3' in the column
            for i in range(bottom_three): # For each row above the bottom-most '3'
                if I[i][j] == 3:
                    O = paint(O, {(8, (i, j))}) # Paint with '8' if it's a '3'
    return O
 
3.5, 2.4644945, def cdcdcaggaibgeeeeadcefchddceghbce(I):
  objs = partition(I)
  threes = sfilter(objs, lambda obj: color(obj) == 3) # Find all objects of color '3'
  other_objs = difference(objs, threes) # Objects that are not '3'
  O = I # Start with the original grid
  for obj in threes:
    bottom_row = {(v, (i, j)) for v, (i, j) in obj if i == lowermost(obj)} # Identify the bottom row of the object
    O = underpaint(O, recolor(8, difference(obj, bottom_row))) # Recolor and paint everything except the bottom row to 8
  return O
 
4.0, 3.3093145, def jfhadcaacebhecedaafhbdcgfcijbicd(I):
    objs = objects(I, T, F, F)  # Identify all '3' objects (non-diagonal)
    recolored_objs = set()
    for obj in objs:
        if color(obj) == 3: # Check if the object color is '3'
            top_edge = sfilter(obj, lambda c: c[1][0] == uppermost(obj))  # Identify the top edge
            left_edge = sfilter(obj, lambda c: c[1][1] == leftmost(obj))  # Identify the left edge
            recolored_obj = (combine(recolor(8, top_edge), recolor(8, left_edge))) # Recolor edges to '8'
            recolored_objs.add(recolored_obj) 
    return paint(I, merge(recolored_objs))  # Paint the changes back onto the grid 
 
15.0, 4.7167354, def gdbcfjhjgfbeeadfjdaageedajfifhea(I):
  is_bg = lambda x: x == mostcommon(I)  # Define a function to check if a color is the background color
  objs = objects(I, T, F, F)  # Find all objects in the grid
  filtered_objs = tuple(obj for obj in objs if not is_bg(color(obj))) # Filter out objects consisting of the background color
  largest_obj = argmax(filtered_objs, size)  # Find the largest object that's not the background
  O = paint(I, recolor(8, largest_obj))  # Recolor the largest object to 8
  return O
 
5.5, 4.114896, def dbebechhdeedefedjcchiccbdefeccde(I):
  # Find the largest object by iterating over each color
  largest_obj = argmax([first(objects(replace(I, c, 1), T, F, T)) for c in palette(I)], size)
  # Recolor occurrences to '8' while keeping the background
  O = underpaint(I, recolor(8, largest_obj))
  return O
 
3.25, 5.232362, def edegecibidjbebdhihaefjadbdgjedjj(I):
  h, w = len(I), len(I[0])
  bottom_threes = frozenset((i, j) for j in range(w) for i in range(h) if I[i][j] == 3 and (i == h - 1 or I[i + 1][j] != 3))
  target_threes = difference(ofcolor(I, 3), bottom_threes)
  O = fill(I, 8, target_threes)
  return O
 
1.5, 1.9789906, def ijjegafhiaadeadaicfcbdaabbccedgd(I):
  objs = objects(I, True, True, False)
  modified_objs = frozenset(frozenset((8 if (i != lowermost(obj)) else v, (i, j)) for v, (i, j) in obj) for obj in objs if color(obj) == 3)
  O = paint(canvas(0, shape(I)), merge(modified_objs))
  return O
 
4.5, 3.7961845, def ffhabffecehieccficdicddhecdffgdd(I):
  h, w = len(I), len(I[0])
  O = list(list(row) for row in I)
  for j in range(w):
    for i in range(h):
      if I[i][j] == 3 and (i < h-1 and I[i+1][j] != 3):
        O[i][j] = 8
  return tuple(tuple(row) for row in O)
 
2.25, 2.81583, def ecedehihacdbebafahfcdbagceidieef(I):
  threes = ofcolor(I, 3)
  bottom_row = frozenset((len(I) - 1, j) for j in range(len(I[0])))
  to_replace = difference(threes, intersection(threes, bottom_row))
  O = fill(I, 8, to_replace)
  return O
 
4.0, 4.071227, def cabjedgfhbhgececbbjbabhbgdfhiiae(I):
    h = height(I) // 2
    top = I[:h]
    bottom = I[h:]
    top = tuple(tuple(8 if (i == 0 or j == 0) and v == 3 else v for j, v in enumerate(r)) for i, r in enumerate(top))  # Recolor top row and leftmost column
    return top + bottom
 
14.5, 5.7787156, def ijffebaecefbecbfjccbecfchbcffddc(I):
  # Find all objects
  objs = objects(I, T, T, F) 
  # Sort objects by size in descending order
  sorted_objs = order(objs, size)[::-1]
  # Get the largest object (first element after sorting)
  largest_obj = first(sorted_objs)
  # Recolor the largest object to '8' if it's not the entire grid
  O = underpaint(I, recolor(8, largest_obj)) if size(largest_obj) != len(I) * len(I[0]) else I
  return O
 
4.5, 3.3006825, def dgdbcdchfjjfehdfabhhicceaeefhbdc(I):
  h, w = len(I), len(I[0])
  O = list(list(row) for row in I)
  for i in range(h):
    for j in range(w):
      if I[i][j] == 3 and (i == 0 or I[i-1][j] != 3):
        O[i][j] = 8
  return tuple(tuple(row) for row in O)
 
4.25, 3.5342135, def fbcfbgheecdeegbdaedcdeciiddcgfca(I):
  h, w = shape(I)
  transformed_top = tuple(8 if v == 3 else v for v in I[0])
  return (transformed_top,) + I[1:]
 
4.25, 2.880564, def eabhdgdfcccgecbhbhbdabiedgdfjjcb(I):
    x1 = asobject(I)  # Convert the grid to an object
    x2 = sfilter(x1, lambda c: c[0] == 3) # Filter for cells with value '3'
    x3 = frozenset((8, c[1]) if c[1][0] == uppermost(x2) or c[1][1] == leftmost(x2) else c for c in x2)  # Recolor top and left edges
    return paint(I, x3)  # Paint back onto the grid
 
5.75, 2.9164476, def bdffidhbhafdedjebacffebffccjgjif(I):
  # Find objects excluding the background
  objs = objects(I, T, F, T)
  # Find the largest object
  largest_obj = argmax(objs, size)
  # Recolor the largest object to '8' if it's not the background
  O = paint(I, branch(color(largest_obj) != mostcolor(I), recolor(8, largest_obj), largest_obj)) 
  return O
 
1.25, 2.1035433, def hgfdibdfcfbdefgeicjbaffbahjfdcai(I):
    objs = objects(I, True, True, False)  # Extract all objects
    modified_objs = frozenset(
        frozenset(
            (8 if (i, j) != llcorner(obj) else v, (i, j)) for v, (i, j) in obj
        )
        for obj in objs
        if color(obj) == 3  # Only modify objects with color 3
    )
    O = paint(canvas(0, shape(I)), merge(modified_objs))  # Paint onto a blank canvas
    return O
 
8.0, 3.990265, def faabjbhabcbaeabfjgfcdbbhbbhedaig(I):
  objs = objects(I, T, F, T) # Extract objects without considering background
  largest_obj = argmax(objs, lambda obj: colorcount(I, first(palette(obj)))) # Identify largest object based on the count of its color in the grid
  O = paint(I, recolor(8, largest_obj)) # Recolor the identified largest object to 8
  return O
 
7.0, 5.830821, def geaffecgcfddeibhjdaadgcfeaiffcdi(I):
    h, w = len(I), len(I[0])
    largest_size = 0
    largest_color = None
    # Find the most frequent color (excluding the background)
    for color in palette(I) - {mostcolor(I)}:
        count = colorcount(I, color)
        if count > largest_size:
            largest_size = count
            largest_color = color
    # Replace the most frequent color with '8'
    O = tuple(tuple(8 if v == largest_color else v for v in r) for r in I)
    return O
 
12.75, 6.401233, def ibagggcaahfaedbfjfjaadjjieefhadf(I):
    # Function to count color occurrences in a row
    count_color = lambda r, c: sum(1 for v in r if v == c) 
    # Find the most frequent color, excluding background
    largest_color = argmax(palette(I) - {mostcommon(I)}, lambda c: sum(count_color(r, c) for r in I))
    # Create a new grid with the most frequent color replaced by '8'
    O = tuple(tuple(8 if cell == largest_color else cell for cell in row) for row in I) 
    return O
 
2.75, 8.950353, def abbhaefbfaafecdfabccafbafbchhgfe(I):
  objs = objects(I, True, True, False)
  modified_objs = frozenset(
    recolor(8, difference(toindices(obj), {llcorner(obj)})) 
    if color(obj) == 3 else obj for obj in objs
  )
  O = paint(canvas(0, shape(I)), merge(modified_objs))
  return O
 
2.0, 4.505918, def ecfbbdchggbgeiidbaaaiiiejaaeagbd(I):
  objs = objects(I, True, True, False)
  modified_objs = {
    recolor(8, difference(toindices(obj), {llcorner(obj)})): obj 
    for obj in objs if color(obj) == 3
  }
  O = I
  for new_obj, old_obj in modified_objs.items():
    O = paint(cover(O, old_obj), new_obj)
  return O
 
8.0, 3.990265, def befbgeehjcfeefecjbfeefgedgcfiabf(I):
  objs = objects(I, T, F, T) 
  largest_obj = argmax(objs, lambda obj: colorcount(I, color(obj))) # Largest obj by color count
  O = paint(I, recolor(8, toindices(largest_obj))) # Paint recolor on original
  return O
 
15.0, 4.7167354, def afaecbhgaeaieebcjbeddjedefeeibhi(I):
  bg = mostcolor(I) # Identify background color
  filtered_grid = replace(I, bg, -1) # Temporary replace bg with unique value
  objs = objects(filtered_grid, T, F, F) # Find objects on modified grid
  largest_obj = argmax(objs, size) # Find the largest object
  O = paint(I, recolor(8, largest_obj)) # Recolor and paint back on original
  return O
 
9.0, 13.972196, def fbgfdefbjbebefhcaacifadebddfidad(I):
  h = height(I) // 2
  top = tuple(tuple(8 if v == 3 else v for v in r) for r in I[:h]) 

  def is_edge_connected(grid, i, j):
    if i == 0 or i == len(grid)-1 or j == 0 or j == len(grid[0])-1:
      return True
    if grid[i][j] != 3:
      return False
    return (i > 0 and is_edge_connected(grid, i-1, j)) or \
           (i < len(grid)-1 and is_edge_connected(grid, i+1, j)) or \
           (j > 0 and is_edge_connected(grid, i, j-1)) or \
           (j < len(grid[0])-1 and is_edge_connected(grid, i, j+1))

  bottom = tuple(tuple(8 if is_edge_connected(I[h:], i, j) else I[h+i][j] for j in range(len(I[0]))) for i in range(len(I[h:])))
  return top + bottom 
 
9.5, 15.389682, def ffafadgeaeifehadbhbfbjdbcbfhjhbg(I):
  h = height(I) // 2
  top = tuple(tuple(8 if v == 3 else v for v in r) for r in I[:h]) 

  objs = objects(I[h:], T, F, F) # Get connected objects in the bottom half
  def recolor_edge(obj):
    if color(obj) != 3:
      return obj
    return frozenset(((8 if any((i == 0 or i == len(I[h:])-1 or j == 0 or j == len(I[0])-1) for _, (i, j) in obj) else 3, (i, j)) for v, (i, j) in obj))
  return top + tuple(tuple(v if (i, j) not in merge(mapply(recolor_edge, objs)) else 8 for j, v in enumerate(r)) for i, r in enumerate(I[h:]))
 
2.75, 5.1529045, def bcbgfaibgfbgedjcicfedccgfbbdcjih(I):
  h = height(I) // 2
  top = tuple(tuple(8 if v == 3 else v for v in r) for r in I[:h])

  edge_indices = (
      frozenset((0, j) for j in range(len(I[0]))) |
      frozenset((len(I[h:])-1, j) for j in range(len(I[0]))) |
      frozenset((i, 0) for i in range(len(I[h:]))) |
      frozenset((i, len(I[0])-1) for i in range(len(I[h:])))
  )
  threes = frozenset((i, j) for i, r in enumerate(I[h:]) for j, v in enumerate(r) if v == 3)
  connected_to_edge = threes.intersection(edge_indices)
  bottom = tuple(tuple(8 if (i,j) in connected_to_edge else I[h+i][j] for j in range(len(I[0]))) for i in range(len(I[h:])))
  return top + bottom
 
2.75, 4.234205, def jccdagafdfebedidbhjdeabbgeegdjia(I):
  h = height(I) // 2  
  return tuple(
      tuple(
          8 if (v == 3 and (i < h or i == len(I)-1 or j == 0 or j == len(I[0])-1)) else v 
          for j, v in enumerate(r)
      ) 
      for i, r in enumerate(I)
  )
 
14.25, 25.8348, def ejdbaebicceceadhiagcejbahagffibd(I):
  bottom_row = frozenset((len(I) - 1, j) for j in range(len(I[0]))) # Get indices of the bottom row
  O = paint(
      canvas(8, shape(I)), # Create a canvas filled with '8's
      recolor(3, intersection(ofcolor(I, 3), bottom_row)) # Recolor bottom row '3's back to '3'
  )
  return O
 
3.75, 3.4100263, def fdahcgeegbcheffcidcdagedegcfdjdg(I):
  O = I
  h = height(I)
  w = width(I)
  for i in range(h):
    for j in range(w):
      if (i == 0 or i == h - 1 or j == 0 or j == w - 1) and I[i][j] == 3:
        O = fill(O, 8, {(i, j)})
  return O
 
15.75, 13.953954, def fedcdjcfeafaefebbcedfjdaffeeffhf(I):
  return paint(
      fill(I, 8, asindices(I)), 
      recolor(3, toobject(inbox(asindices(I)), I))
  )
 
9.75, 40.035713, def bbjdbbaaeeffedhaibbahbefdccafdgf(I):
  # Find the most common color in the grid (representing the largest object)
  target_color = mostcolor(I)
  # Create a new grid filled with '8's
  new_grid = canvas(8, shape(I))
  # Combine the new grid with the original, keeping the original color where it matches the target color
  O = cellwise(I, new_grid, target_color)
  return O
 
2.25, 2.81583, def bcdfdadhadcdeffabfdhjdfjbaiicgba(I):
  objs = partition(I)  # Partition the grid into objects based on color
  modified_grid = canvas(0, shape(I))  # Create a blank canvas
  for obj in objs:
    if color(obj) == 3:  # Process only objects of color 3
      bottom_row = max(i for _, (i, _) in obj) # Find the bottom-most row of the object
      modified_grid = paint(modified_grid, frozenset((8 if i < bottom_row else v, (i, j)) for v, (i, j) in obj)) # Recolor
    else:
      modified_grid = paint(modified_grid, obj) # Keep other objects as they are
  return modified_grid
 
2.5, 3.566292, def cffcfefdedeaeigcbachhideaffgjggg(I):
  return tuple(
    tuple(
      8 if any(I[k][j] == 3 for k in range(i+1, len(I))) and I[i][j] == 3 else I[i][j]
      for j in range(len(I[0]))
    ) 
    for i in range(len(I))
  )
 
2.25, 5.8479548, def accaccagbfabefddjbdejebcecfaddba(I):
  objs = partition(I)
  threes = sfilter(objs, lambda obj: color(obj) == 3 and uppermost(obj) < height(I) // 2)
  return paint(
      cover(I, merge(threes)), 
      recolor(8, merge(threes))
  ) 
 
2.75, 2.872182, def feidfjchbfjceihfjieaciadaifigfea(I):
  return tuple(
      tuple(8 if j < len(r) // 2 and v == 3 else v for j, v in enumerate(r)) 
      if i < height(I) // 2 else r 
      for i, r in enumerate(I)
  )
 
5.5, 4.114896, def dgfgbffhbfcbeiaejagbaeahidficiia(I):
  objs = objects(I, T, F, T)
  largest_obj = argmax(objs, size)
  target_color = 3
  recolored_obj = recolor(8, intersection(largest_obj, ofcolor(I, target_color)))
  O = paint(I, recolored_obj)
  return O
 
7.75, 6.0572042, def eagfcfbbiaahejjjjcfehddcjaabhhcj(I):
  objs = fgpartition(I)
  target_obj = argmax(objs, lambda obj: size(obj) if color(obj) == 3 else 0)
  O = paint(replace(I, 3, 0), recolor(8, target_obj))
  return O
 
5.25, 3.0528908, def ffbebgfjjjecejbcighbiaacbbccfgfi(I):
  objs = objects(I, T, F, T) # Extract all objects excluding background
  recolored_objs = frozenset() # Initialize an empty set to store recolored objects
  for obj in objs:
    if color(obj) == 3:  # Check if the object has color 3
      top_row = sfilter(obj, lambda c: c[1][0] == uppermost(obj)) # Extract the top row of the object
      left_column = sfilter(obj, lambda c: c[1][1] == leftmost(obj)) # Extract the leftmost column of the object
      recolored_obj = (recolor(8, top_row) | recolor(8, left_column) | (obj - top_row - left_column)) # Combine recolored parts
      recolored_objs = insert(recolored_obj, recolored_objs)  # Add the recolored object to the set
    else:
      recolored_objs = insert(obj, recolored_objs) # Keep other objects unchanged
  return paint(I, merge(recolored_objs))  # Paint all objects back onto the grid
 
6.75, 3.8580618, def ajcieeaecffjejafagaaffbbfdeffeef(I):
  objs = objects(I, T, F, T)  # Identify objects
  new_objs = set()
  for obj in objs:
    top_row = sfilter(obj, lambda cell: cell[1][0] == uppermost(obj)) # Find top row
    recolored_top = recolor(8, top_row) # Recolor top row to 8
    new_obj = (obj - top_row) | recolored_top # Combine with rest of the object
    new_objs.add(new_obj)
  return paint(I, merge(new_objs))  # Paint the modified objects back onto the grid
 
6.75, 8.299364, def bbahfjfjahbcegdhaccdiagfdjfajfee(I):
  h = height(I)
  return tuple(tuple(8 if i == 0 and v != mostcommon(I) else v for j, v in enumerate(r)) for i, r in enumerate(I))
 
3.0, 7.8632736, def abhbefigbaaaehcaafcgbefjifdbbfcc(I):
  objs = objects(I, True, True, False)
  modified_objs = frozenset(recolor(8, difference(obj, {(color(obj), (lowermost(obj), j)) for j in range(width(obj))})) for obj in objs if color(obj) == 3)
  return paint(canvas(0, shape(I)), merge(modified_objs)) 
 
2.25, 2.81583, def hbabjifbafjeeaajiahecadgeeeafaca(I):
  objs = partition(I)
  threes = sfilter(objs, lambda obj: color(obj) == 3) 
  for obj in threes:
    bottom_row = sfilter(toindices(obj), lambda idx: idx[0] == lowermost(obj))
    I = fill(I, 8, difference(toindices(obj), bottom_row))
  return I
 
4.25, 4.4843564, def ajjefaaecafgefdijgadefdbbjacfidf(I):
  objs = partition(I)
  threes = sfilter(objs, lambda obj: color(obj) == 3)
  return tuple(
      tuple(
          8 if any((i, j) in toindices(difference(obj, sfilter(obj, lambda c: c[0] == lowermost(obj)))) for obj in threes) else v 
          for j, v in enumerate(r)
      )
      for i, r in enumerate(I)
  )
 
5.0, 13.762452, def dcfehdjfddbeeiedibecjgfejfcfedfc(I):
  def modify_object(obj):
    if color(obj) == 3:
      bottom_row = sfilter(obj, lambda c: c[0] == lowermost(obj))
      return recolor(8, difference(obj, bottom_row))
    return obj
  return paint(canvas(mostcolor(I), shape(I)), merge(apply(modify_object, partition(I)))) 
 
5.25, 3.536701, def dcjeijejjcjjeebfbcdbdgibjhdejjej(I):
  objs = objects(I, T, F, T)  # Identify all objects
  bottom_row = frozenset((len(I) - 1, j) for j in range(len(I[0])))  # Define the bottom row
  recolor_objs = lambda obj: paint(I, recolor(8, difference(toindices(obj), bottom_row)))  # Recolor function
  O = I  # Initialize output as input
  for obj in objs:
    if color(obj) == 3:  # Check if object color is 3
      O = recolor_objs(obj) # Apply recoloring to the object
  return O
 
6.75, 4.3996434, def iacefcjeabfheeedjafccafaidbdcabd(I):
  objs = objects(I, T, F, T)  # Extract objects from the grid
  recolored_objs = frozenset()  # Initialize an empty set for recolored objects
  for obj in objs:
    top_row = sfilter(toindices(obj), lambda c: c[0] == uppermost(obj)) # Find indices of the top row
    left_col = sfilter(toindices(obj), lambda c: c[1] == leftmost(obj)) # Find indices of the leftmost column
    recolored_obj = recolor(8, top_row) | recolor(8, left_col)  # Recolor top row and left column to 8
    recolored_objs = recolored_objs | recolored_obj # Add recolored object to the set
  return paint(I, recolored_objs)  # Paint the recolored objects onto the input grid
 
8.75, 6.0711603, def fcbdahdcfeafecdcjcfiacfeeeggcaej(I):
  grid = asobject(I)  # Convert grid to object
  top_left = mfilter(grid, lambda c: c[1][0] == uppermost(grid) and c[1][1] == leftmost(grid))  # Find top-left corner
  recolored = frozenset((8, c[1]) if c[1][0] == uppermost(grid) or c[1][1] == leftmost(grid) else c for c in grid)  # Recolor top and left edges
  return paint(I, recolored - top_left)  # Paint back onto the grid
 
5.5, 4.114896, def dddbhjehjfabegefagffegdebccdbegb(I):
    objs = objects(I, True, True, False)  # Extract objects
    modified_objs = frozenset(
        frozenset(
            (8 if (i, j) in obj and i != lowermost(obj) else v, (i, j)) for v, (i, j) in obj 
        )
        for obj in objs
        if color(obj) == 3
    )
    return paint(canvas(0, shape(I)), merge(modified_objs))
 
3.0, 2.533415, def daebbdaghbdfecdjifcfjajbfhbecbcb(I):
    return tuple(
        tuple(
            8 if I[i][j] == 3 and any(I[k][j] != 3 for k in range(i + 1, len(I))) else I[i][j] 
            for j in range(len(I[0]))
        )
        for i in range(len(I))
    )
 
4.5, 4.0643806, def fbdeegcbhbdaeeegbddfegffejdfeicd(I):
    h, w = shape(I)
    return tuple(
        tuple(
            8 if I[i][j] == 3 and (i + 1, j) not in  ofcolor(I, 3) else I[i][j]
            for j in range(w)
        )
        for i in range(h)
    )
 
2.5, 3.8374648, def cedahbfbgccfeeecigehieccccaaahgd(I):
  objs = objects(I, True, False, False)  # Identify objects formed by '3'
  for obj in objs:
    if color(obj) == 3:  # Only process objects with color '3'
      bottom_row = sfilter(toindices(obj), lambda idx: idx[0] == lowermost(obj))  # Get bottom row indices
      I = fill(I, 8, difference(toindices(obj), bottom_row))  # Fill '8' except for the bottom row
  return I
 
0.0, 0.0, def jdbdecibcgcgejfajfhcdcfaabacaaeb(I):
  return tuple(
    tuple(
      8 if (v == 3 and any((i != lowermost(obj)) for _, (i, _) in obj)) else v
      for j, v in enumerate(r)
      for obj in objects(I, True, False, False) if (i, j) in toindices(obj)
    )
    for i, r in enumerate(I)
  )
 
