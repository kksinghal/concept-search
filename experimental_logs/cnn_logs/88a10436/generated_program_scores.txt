8.666666666666666, 13.429035, def eafejdaddgfdebcdifhbfibjadidjaff(I):
    objs = objects(I, True, False, True)
    moved_objs = set()
    for obj in objs:
        upper = uppermost(obj)
        while upper > 0:
            shifted = shift(obj, (-1, 0))
            collision = any(v != 0 for v, (i, j) in toobject(shifted, I) if (i, j) not in toindices(obj))
            if collision:
                break
            obj = shifted
            upper -= 1
        moved_objs.add(obj)
    O = paint(I, merge(moved_objs))
    return O 
 
6.333333333333333, 17.152925, def adhebffcjeafeecfjcfhcbdbeeeddchj(I):
  objs = sorted(objects(I, True, False, True), key=lambda obj: uppermost(obj))
  moved_objs = set()
  for obj in objs:
    shifted_obj = obj
    for i in range(uppermost(obj), 0, -1):
      new_obj = shift(shifted_obj, (-1, 0))
      if len(toobject(new_obj, I) - obj) == 0:
        shifted_obj = new_obj
    moved_objs.add(shifted_obj)
  return paint(I, merge(moved_objs))
 
16.0, 26.41404, def gfffjbjhacfjebejbceaabdebjieibbi(I):
  objs = objects(I, True, False, True)
  grid = I
  for obj in objs:
    h = height(obj)
    upper = uppermost(obj)
    grid = cover(grid, obj)
    new_obj = shift(obj, (-upper, 0))
    new_obj = shift(new_obj, (h, 0))
    grid = paint(grid, new_obj)
  return grid
 
10.333333333333334, 12.556729, def ddhbdhcdcjceeegjjfbijcebaefdebeg(I):
  objs = objects(I, True, False, True)
  for obj in objs:
    i = uppermost(obj)
    while i > 0 and len(toobject(shift(obj, (-1, 0)), I)) == len(obj):
      i -= 1
      obj = shift(obj, (-1, 0))
    I = paint(cover(I, obj), obj)
  return I 
 
16.333333333333332, 28.134867, def bciaifcdbbdaebcejaadcedafdbgieeh(I):
  objs = objects(I, False, True, True)
  obj = argmax(objs, size)
  n = numcolors(I) - 1
  offset = (n if n < 3 else 2, n if n < 3 else 2)
  O = move(I, obj, offset)
  return O
 
13.0, 23.197546, def jeiefacehbeeefjejeabgadfebjhfece(I):
  objs = objects(I, False, True, True)
  obj = argmax(objs, lambda o: colorcount(o, leastcolor(o)))
  bg = mostcolor(I)
  target = ulcorner(shift(obj, (2, 2)))
  O = paint(fill(I, bg, obj), shift(obj, gravitate(obj, {target})))
  return O
 
11.0, 21.855238, def ihbaaddccecfefeebfdcbaaafehejjcc(I):
  objs = fgpartition(I)
  obj = argmax(objs, size)
  n = min(numcolors(I) - 1, 2)
  O = paint(fill(I, mostcolor(I), obj), shift(obj, (n, n)))
  return O
 
8.666666666666666, 21.671198, def idgdgcfdegdeejecicaecfbddfaafhfc(I):
  objs = objects(I, False, True, True)
  obj = argmax(objs, lambda o: manhattan(o, {(len(I) - 1, len(I[0]) - 1)}))
  O = move(I, obj, position(obj, {(0, 0)})) 
  return O
 
13.333333333333334, 27.872526, def bbgjghdcgddaeedibcccjafebibcfigb(I):
  # 1. Identify the anchor object (containing value 5).
  anchor_obj = first(colorfilter(objects(I, T, F, T), FIVE))
  
  # 2. Get the upper-left corner of the anchor object.
  anchor_loc = ulcorner(anchor_obj)
  
  # 3. Define a function to calculate the shift offset.
  def get_offset(obj):
    return subtract(anchor_loc, ulcorner(obj))

  # 4. Apply the transformation to all objects (excluding background).
  new_objs = frozenset(shift(obj, get_offset(obj)) for obj in objects(I, T, F, T) if color(obj) != ZERO)

  # 5. Cover the original objects with background color.
  covered_grid = cover(I, merge(objects(I, T, F, T)))
  
  # 6. Paint the shifted objects onto the covered grid.
  O = paint(covered_grid, merge(new_objs)) 
  return O 
 
16.666666666666668, 25.616056, def bbcjceigaahaedejjfffgaafdddidaci(I):
    # 1. Identify all objects in the input grid.
    objs = objects(I, T, F, T)
    
    # 2.  Find the object containing the value '5'.
    five_obj = first(obj for obj in objs if FIVE in palette(obj))

    # 3.  Calculate the row and column difference between the upper-left corners of the '5' object and the entire input grid.
    row_diff, col_diff = subtract(ulcorner(five_obj), ulcorner(asindices(I)))

    # 4.  Define a function to move an object to its new location.
    def move_to_new_loc(obj): 
        return shift(obj, (row_diff, col_diff))

    # 5. Move all objects to their new locations.
    moved_objs = frozenset(move_to_new_loc(obj) for obj in objs if obj != five_obj)

    # 6. Combine the moved objects with the original '5' object.
    combined_objs = combine(moved_objs, {five_obj})

    # 7.  Create the output grid by painting the combined objects onto a blank canvas.
    O = paint(canvas(ZERO, shape(I)), merge(combined_objs))
    return O
 
12.666666666666666, 47.526016, def dbdggacicdbdecjajfdbaagfddaabdgb(I):
    # 1. Find the anchor object containing the value '5'.
    five_obj = first(colorfilter(objects(I, T, F, T), FIVE))

    # 2. Determine the offset needed to shift objects based on the anchor's position.
    offset = subtract(ulcorner(asindices(I)), ulcorner(five_obj))
    
    # 3. Define a function to move objects.
    def move_obj(obj):
        return shift(obj, offset) 

    # 4. Apply the move function to all objects except the anchor.
    moved_objs = frozenset(move_obj(obj) for obj in objects(I, T, F, T) if obj != five_obj)

    # 5. Create the output grid by painting the moved objects and the anchor onto a blank canvas.
    O = paint(canvas(ZERO, shape(I)), merge(combine(moved_objs, {five_obj})))
    return O
 
8.333333333333334, 10.152879, def bhhiaggaccahefedahbdheicedieffei(I):
  objs = objects(I, False, False, True) 
  moved_objs = set()
  for obj in objs:
    upper = uppermost(obj)
    while upper > 0:
      shifted_obj = shift(obj, (-1, 0))
      collision = any(vmatching(shifted_obj, other_obj) for other_obj in objs if other_obj != obj)
      if collision or upper - 1 < 0:
        break
      obj = shifted_obj
      upper -= 1
    moved_objs.add(obj)
  O = paint(I, merge(moved_objs))
  return O
 
11.666666666666666, 21.565273, def gfbbcdhjcdcjeiadiejifdcdecaeiecb(I):
  objs = objects(I, False, False, True)
  new_grid = canvas(mostcolor(I), shape(I))
  for obj in objs:
    upper = uppermost(obj)
    new_grid = paint(new_grid, shift(obj, (-upper, 0)))
  O = new_grid
  return O 
 
9.666666666666666, 15.99873, def eibchdeccjeceaabbecejcgdfffgahaa(I):
  objs = objects(I, False, False, True)
  for obj in objs:
    for i in range(uppermost(obj), 0, -1):
      I = move(I, obj, (-1, 0))
  O = I
  return O
 
9.333333333333334, 10.921548, def ejbafgbeafbbefdebdhffchdiacfcafc(I):
    objs = objects(I, False, False, True)
    new_objs = set()
    for obj in objs:
        offset = (0, 0)
        for i in range(uppermost(obj), 0, -1):
            new_pos = shift(obj, (offset[0] - 1, 0))
            collision = any(vmatching(new_pos, other_obj) for other_obj in objs if other_obj != obj)
            if collision:
                break
            offset = (offset[0] - 1, 0)
        new_objs.add(shift(obj, offset))
    O = paint(I, merge(new_objs))
    return O 
 
6.666666666666667, 18.074148, def dadcdcjdcjfcebccbfabbbahjeabbace(I):
  five_indices = ofcolor(I, 5)
  target_row = 6
  offset = (target_row - uppermost(five_indices), 1 if leftmost(five_indices) == 0 else 0)
  shifted_indices = shift(five_indices, offset)
  O = paint(cover(I, five_indices), recolor(5, shifted_indices))
  return O
 
12.666666666666666, 28.262623, def fdaffbgfcaceedefabjgdffcfhdcbdaf(I):
  obj = first(objects(I, F, T, T))
  O = underpaint(cover(I, obj), shift(obj, subtract(llcorner(obj), (1, -3))))
  return O
 
16.333333333333332, 17.82197, def dbjbahajhcgiebjbadacacfbeeeccjce(I):
  obj = argmax(objects(I, F, T, T), size) 
  O = underpaint(cover(I, obj), shift(obj, (5 - uppermost(obj), 1 - leftmost(obj))))
  return O
 
7.0, 18.304783, def ahcfgfhcedgeecaeibaffieagadhbbde(I):
  obj = first(order(objects(I, F, T, T), size))
  target_position = (5, 1)
  offset = subtract(target_position, ulcorner(obj))
  O = underpaint(cover(I, obj), shift(obj, offset))
  return O 
 
13.666666666666666, 41.23891, def adcbieiecdabefjeahbbaacfeccgbddf(I):
  obj = argmax(objects(I, F, T, T), lambda obj: colorcount(obj, 1))
  target_corner = (6, 0) 
  offset = subtract(target_corner, lrcorner(obj))
  O = underpaint(cover(I, obj), shift(obj, offset)) 
  return O
 
11.0, 16.125908, def ddcgcjfejebbejabadbedhbcieibdfgf(I):
  objs = objects(I, F, T, T)
  obj = argmax(objs, lambda obj: -uppermost(obj)) # Get the topmost object
  center_i = len(I) // 2  
  center_j = len(I[0]) // 2
  offset = (center_i - uppermost(obj), center_j - leftmost(obj))
  O = underpaint(cover(I, obj), shift(obj, offset))
  return O
 
9.0, 8.246231, def fcjfagheaeiiefjcjgjdddbcddddbahg(I):
  objs = objects(I, False, False, True)
  moved_objs = set()
  for obj in objs:
    destination_row = min((i for i in range(uppermost(obj)) if any(index(I, (i,j)) != mostcolor(I) for j in range(width(obj)))), default=0) # Find the highest non-background row
    destination = {(destination_row, j) for j in range(leftmost(obj), rightmost(obj) + 1)} # Create a destination patch at that row
    offset = gravitate(obj, destination)
    moved_objs.add(shift(obj, offset))
  O = paint(I, merge(moved_objs))
  return O
 
15.0, 24.076883, def jafibaeceeaeefajibbhgfcfeedfaecd(I):
  O = canvas(mostcolor(I), shape(I)) # Create a blank canvas filled with the background color
  for j in range(width(I)): # Iterate column-wise
    column = tuple(I[i][j] for i in range(height(I))) 
    filtered_column = tuple(v for v in column if v != mostcolor(I)) # Remove background color cells
    O = paint(O, {(v,(i,j)) for i, v in enumerate(filtered_column + tuple(mostcolor(I) for _ in range(height(I) - len(filtered_column))))}) # Paint the non-background cells from the top 
  return O
 
62.333333333333336, 56.428314, def icfacdabefhaefffachbadebfffbcgec(I):
  O = rot90(compress(rot270(I))) # Rotate, compress, rotate back
  return O
 
15.666666666666666, 24.29826, def hdaficgaheebedjhbdiccjchddddhdjg(I):
  O = canvas(mostcolor(I), shape(I))
  for i in range(height(I)):
    row = I[i]
    filtered_row = tuple(v for v in row if v != mostcolor(I))
    k = 0 
    for j in range(width(I)):
        if k < len(filtered_row):
          O = paint(O, {(filtered_row[k], (i, j))})
          k += 1
  return O
 
6.666666666666667, 17.357468, def cgeacadcffcbeeahjedgjhhafajaeefb(I):
  five_indices = ofcolor(I, 5)
  horizontal_shift = 1 if leftmost(five_indices) == 0 else 0
  new_five_indices = shift(five_indices, (5 - uppermost(five_indices), horizontal_shift))
  O = paint(cover(I, five_indices), recolor(5, new_five_indices))
  return O
 
6.333333333333333, 17.152925, def ceaeccfacbecedfijcbaeaadegegeecf(I):
  five_obj = next((obj for obj in objects(I, False, False, False) if color(obj) == 5), frozenset())
  if five_obj:
    vertical_shift = 5 - uppermost(five_obj)
    horizontal_shift = 1 if leftmost(five_obj) == 0 else 0
    shifted_obj = shift(five_obj, (vertical_shift, horizontal_shift))
    O = paint(cover(I, five_obj), shifted_obj)
  else:
    O = I 
  return O
 
19.333333333333332, 15.037653, def aggegedhebheeibdaedagbegcbdeebff(I):
  objs = sorted(objects(I, T, T, T), key=lambda obj: (size(obj), uppermost(obj)))
  bg = mostcolor(I)
  h, w = shape(I)
  new_grid = [[bg for _ in range(w)] for _ in range(h)]
  current_i = h - 1
  for obj in objs:
    obj_h, obj_w = shape(obj)
    start_j = (w - obj_w) // 2
    for i in range(obj_h):
      for j in range(obj_w):
        new_grid[current_i - i][start_j + j] = index(subgrid(obj, I), (i, j))
    current_i -= obj_h
  O = tuple(tuple(row) for row in new_grid)
  return O
 
10.333333333333334, 28.934582, def addfaedcfejgehebiicebdfbhbjfaife(I):
  objs = objects(I, T, T, T)
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  for obj1 in objs:
    for obj2 in objs:
      if obj1 != obj2:
        if size(obj1) < size(obj2):
          O = paint(O, shift(obj1, gravitate(obj1, obj2)))
        else:
          O = paint(O, shift(obj2, gravitate(obj2, obj1)))
  return O
 
13.0, 9.671471, def bbejaefaifidebeejbfdieffbiafbgab(I):
  moved_objs = mapply(lambda obj: shift(obj, (len(I)-lowermost(obj)-1, 0)), objects(I, False, False, True))
  O = paint(I, moved_objs)
  return O
 
16.666666666666668, 30.503021, def fegfhabfhdhfecgajcjfffehhdahgbbc(I):
  five_bottom = uppermost(ofcolor(I, FIVE)) + height(ofcolor(I, FIVE)) - 1 # Find the bottom row of the '5'
  return paint(
      canvas(ZERO, shape(I)), # Blank canvas
      mapply(lambda obj: shift(obj, (five_bottom + 1 - uppermost(toindices(obj)), 0)), sfilter(objects(I, T, F, T), lambda obj: color(obj) != FIVE)) # Move objects below '5'
  )
 
14.0, 46.17405, def feacbgccfdhbeghajjcjadecicabedae(I):
  objs = order(objects(I, T, T, T), size) # Get objects and order by size
  bg = mostcolor(I) # Background color
  h, w = shape(I) # Grid dimensions
  O = canvas(bg, (h, w)) # Create output grid
  current_height = h - 1 # Start at bottom row
  center_j = w // 2  # Center column
  for obj in objs:
    obj_h, obj_w = shape(obj)
    offset = (current_height - obj_h + 1, center_j - obj_w // 2)
    O = paint(O, shift(obj, offset)) # Place object 
    current_height -= obj_h  # Update height for next object
  return O
 
21.666666666666668, 41.10962, def dgggfgbiccccedbcbidbbeaafdcefaad(I):
  objs = order(objects(I, T, T, T), size)
  bg = mostcolor(I)
  h, w = shape(I)
  half_grid = canvas(bg, (h, w // 2 + (w % 2))) # Create half-width grid
  current_height = h - 1  
  for obj in objs:
    obj_h, obj_w = shape(obj)
    offset = (current_height - obj_h + 1, (w // 2  - obj_w // 2) // 2) # Center on half-grid
    half_grid = paint(half_grid, shift(obj, offset)) 
    current_height -= obj_h 
  O = hconcat(half_grid, hmirror(half_grid)) # Concatenate mirrored halves
  return O
 
15.333333333333334, 36.76413, def hjciecaiddcdeciiiadadbehcgeaddef(I):
    objs = order(objects(I, T, T, T), lambda obj: -size(obj))  # Sort by descending size
    bg = mostcolor(I)
    h, w = shape(I)
    O = canvas(bg, (h, w))
    current_height = 0  # Start from the top row
    center_j = w // 2
    for obj in objs:
        obj_h, obj_w = shape(obj)
        offset = (current_height, center_j - obj_w // 2)
        O = paint(O, shift(obj, offset))  # Place object
        current_height += obj_h  # Update height for the next object
    return O
 
19.0, 21.353579, def djefbbfbaafgeedjiedccaciedbahbee(I):
  return vconcat(hconcat(canvas(mostcolor(I), (height(I) - height(compress(I)), width(I) - height(compress(I)))), canvas(mostcolor(I), (height(I) - height(compress(I)), height(compress(I))))), hconcat(canvas(mostcolor(I), (height(compress(I)), width(I) - height(compress(I)))), compress(I)))
 
9.333333333333334, 11.880467, def ebbaijfgjgaaebjdiiadjbbedebfdcig(I):
    objs = objects(I, False, False, True)
    return paint(I, frozenset((v, (height(I) - height(toindices(obj)) + i, j + height(toindices(obj)) - 1)) for obj in objs for v, (i, j) in obj))
 
12.333333333333334, 9.6894455, def edebbajcbcbdeheeadjaeeaefeaieefa(I):
  objs = objects(I, False, False, True)
  bottom = height(I) - 1
  return paint(I, frozenset((v, (bottom - i + uppermost(toindices(obj)), j + height(toindices(obj)) - 1)) for obj in objs for v, (i, j) in obj))
 
16.666666666666668, 28.42095, def gafbgcfadddbeidhjeaaaeijbdibedbd(I):
  objs = order(objects(I, T, T, T), size)
  bg = mostcolor(I)
  h, w = shape(I)
  O = canvas(bg, (h, w))
  bottom_center = (h - 1, w // 2)
  
  for i, obj in enumerate(objs):
    if i == 0:
      offset = subtract(bottom_center, subtract(centerofmass(obj), (0, 0)))
    else:
      prev_obj_center = centerofmass(objs[i-1])
      obj_center = centerofmass(obj)
      offset = (prev_obj_center[0] - obj_center[0] - height(obj), prev_obj_center[1] - obj_center[1])
    O = paint(O, shift(obj, offset))
  return O
 
16.0, 40.193565, def eieacbghjcjiedfijddfehcgifbihace(I):
  objs = order(objects(I, T, T, T), lambda x: -size(x))  # Order by decreasing size
  bg = mostcolor(I)
  h, w = shape(I)
  O = canvas(bg, (h, w))
  current_pos = (h, w // 2)  # Start at a point below the grid
  
  for obj in objs:
    obj_h, obj_w = shape(obj)
    current_pos = (current_pos[0] - obj_h, current_pos[1] - obj_w // 2)
    O = paint(O, shift(obj, current_pos))
  
  return O
 
14.333333333333334, 45.685368, def acfbgedajeagefagbebjchiaebcddfaf(I):
  objs = order(objects(I, T, T, T), size)
  bg = mostcolor(I)
  h, w = shape(I)
  O = canvas(bg, (h, w))
  
  for i in range(len(objs) - 1, -1, -1):
    obj = objs[i]
    obj_h, obj_w = shape(obj)
    offset = (h - obj_h * (len(objs) - i), (w - obj_w) // 2)
    O = paint(O, shift(obj, offset))
  
  return O
 
9.333333333333334, 15.486902, def ceaddfcifdaaefcgjbeacebhbaiccbfa(I):
    objs = objects(I, F, T, T)
    O = I
    for i, obj in enumerate(objs):
      offset = (i, 0)
      O = move(O, obj, offset)
    return O
 
10.666666666666666, 22.279675, def cbcbccehgegeegafjccjidaaadfjfccg(I):
  bg = mostcolor(I)
  objs = objects(I, False, True, True)
  obj = first(objs)
  cmirrored = cmirror(obj)
  shifted = shift(cmirrored, (height(obj) + 1, 0))
  O = paint(paint(canvas(bg, shape(I)), obj), shifted)
  return O
 
13.0, 25.37719, def dbeidacdcdjcedgbjaeeebiichgecbbd(I):
  bg = mostcolor(I)
  objs = objects(I, False, True, True)
  obj = first(objs)
  mirrored_indices = cmirror(toindices(obj))
  shifted_indices = shift(mirrored_indices, (height(obj) + 1, 0))
  O = fill(fill(canvas(bg, shape(I)), index(I, first(obj)[1]), shifted_indices), index(I, first(obj)[1]), obj)
  return O
 
10.333333333333334, 12.419836, def caabhecfdifdeacjabaeejddbdaiacfb(I):
  bg = mostcolor(I)
  obj = toobject(extract(objects(I, False, True, True), lambda x: len(x) > 1), I)
  cmirrored = cmirror(obj)
  shifted = shift(cmirrored, (height(obj) + 1, 0))
  O = paint(paint(canvas(bg, shape(I)), obj), shifted)
  return O
 
10.333333333333334, 8.400461, def effjebdaaccaeiiejfdchdcediebbebi(I):
  obj = toobject(extract(objects(I, False, True, True), lambda x: len(x) > 1), I)
  mirrored = cmirror(obj)
  O = paint(I, shift(mirrored, (height(obj) + 1, 0)))
  return O
 
8.666666666666666, 12.265109, def abfageddcaabeddjbceciadagebeebff(I):
  bg = mostcolor(I)
  objs = objects(I, False, True, True)
  obj = first(objs)
  mirrored_indices = cmirror(toindices(obj))
  O = I
  for i, j in mirrored_indices:
    O = fill(O, index(I, first(obj)[1]), {(i + height(obj) + 1, j)})
  return O
 
11.0, 43.18545, def dbeaecjiahdeejbcbdjaeddfabhdgeda(I):
    objs = objects(I, F, T, T)
    sorted_objs = order(objs, size)
    O = canvas(ZERO, shape(I)) # Create a blank canvas

    for i, obj in enumerate(sorted_objs):
        if i == 0: # For the largest object
            offset = ((height(O) - height(obj)) // 2, (width(O) - width(obj)) // 2)
        else:
            prev_center = centerofmass(sorted_objs[i-1])
            curr_center = centerofmass(obj)
            offset = (offset[0] + curr_center[0] - prev_center[0], 
                      offset[1] + curr_center[1] - prev_center[1]) 
        O = paint(O, shift(obj, offset)) # Paint each object with calculated offset

    return O
 
11.0, 10.108138, def fdccjcgfagfaedefihheideabbafdjea(I):
  obj = toobject(extract(objects(I, False, True, True), lambda x: size(x) > 1), I) 
  mirrored = cmirror(obj)
  shift_distance = height(obj)
  O = paint(I, shift(mirrored, (shift_distance, 0)))
  return O
 
7.666666666666667, 15.598932, def dibedebchdgeebhcigaaibhgihdeheea(I):
  target_color = leastcolor(extract(objects(I, False, True, True), lambda x: size(x) > 1)) 
  obj = toobject(ofcolor(I, target_color), I)
  mirrored = cmirror(obj)
  O = paint(I, shift(mirrored, (height(obj), 0)))
  return O
 
10.666666666666666, 9.652019, def fjaehbgacaidehdfbdchacafggjgeafi(I):
  obj_indices = extract(objects(I, False, True, True), lambda x: size(x) > 1)
  mirrored_indices = cmirror(obj_indices)
  mirrored_obj = toobject(mirrored_indices, I)
  O = paint(I, shift(mirrored_obj, (height(obj_indices), 0)))
  return O
 
16.666666666666668, 18.056688, def efbgfahhccheeiaabebijccdddadedje(I):
  obj = toobject(ofcolor(I, ONE) | ofcolor(I, TWO) | ofcolor(I, THREE), I)
  ref_point = centerofmass(obj)
  offset = subtract((4, 4), ref_point)
  O = move(I, obj, offset)
  return O
 
8.0, 6.877389, def accdeefadfgaehagbcgbecddecbajecf(I):
  target_pos = (5, 5) 
  obj = toobject(ofcolor(I, ONE) | ofcolor(I, TWO) | ofcolor(I, THREE), I)
  O = paint(I, shift(obj, subtract(target_pos, centerofmass(obj))))
  return O
 
16.666666666666668, 20.23547, def cdachbbcccccegcibjjbdjdjajfibdcf(I):
  obj = toobject((ofcolor(I, ONE) | ofcolor(I, TWO) | ofcolor(I, THREE)), I)
  h, w = shape(obj)
  offset = (4 - (uppermost(obj) + h // 2), 4 - (leftmost(obj) + w // 2))
  O = move(I, obj, offset)
  return O
 
7.333333333333333, 18.16824, def aiahieegacdfeaaibjbfeeeheefaaada(I):
    target_indices = ofcolor(I, 5)
    up_shift = -2 if min(i for i, j in target_indices) > 0 else -1
    new_indices = frozenset((i + up_shift, j) for i, j in target_indices)
    O = paint(cover(I, target_indices), recolor(5, new_indices))
    return O
 
16.666666666666668, 25.538815, def fbghfgbedeiaecagjcbhfbcgeabddcbd(I):
  five_row = lowermost(ofcolor(I, FIVE)) + 1
  new_grid = canvas(ZERO, shape(I))
  for obj in objects(I, T, F, T):
    offset = five_row - uppermost(obj)
    for v, (i, j) in obj:
      new_grid = paint(new_grid, {(v, (i + offset, j))})
  return new_grid
 
8.666666666666666, 27.880228, def cdgegcafbhchegbhjiabjgdadeebgedg(I):
    five_bottom = lowermost(ofcolor(I, FIVE))
    return vconcat(
        I[:five_bottom + 1],
        tuple(
            tuple(ZERO for _ in range(width(I))) 
            for _ in range(height(I) - five_bottom - 1)
        )
    )
 
11.666666666666666, 32.96501, def gfafdfhedfcaeffhigjfibfffjbbgege(I):
  obj1 = toobject(ofcolor(I, ONE) | ofcolor(I, TWO), I)
  obj2 = toobject((ofcolor(I, THREE) | ofcolor(I, FIVE) | ofcolor(I, SIX)), I) 
  if lowermost(obj1) < uppermost(obj2):
    v_distance = uppermost(obj2) - lowermost(obj1) - 1
  else: 
    v_distance = -(lowermost(obj1) - uppermost(obj2) + 1)
  O = move(I, obj1, (v_distance, 0))
  return O
 
10.333333333333334, 10.555599, def jfdfeedfjjcaedhbicaiaagchbaejdaa(I):
  obj1 = toobject(ofcolor(I, ONE) | ofcolor(I, TWO), I)
  obj2 = toobject((ofcolor(I, THREE) | ofcolor(I, FIVE) | ofcolor(I, SIX)), I)
  if lowermost(obj1) < uppermost(obj2):
    target_row = uppermost(obj2) - height(obj1)
  else:
    target_row = lowermost(obj2) + 1
  O = paint(I, shift(obj1, (target_row - uppermost(obj1), 0)))
  return O
 
12.0, 13.52259, def efebefhceeegecagaeaedebdecaiceif(I):
  obj1 = toobject(ofcolor(I, ONE) | ofcolor(I, TWO), I)
  obj2 = toobject((ofcolor(I, THREE) | ofcolor(I, FIVE) | ofcolor(I, SIX)), I)
  if lowermost(obj1) < uppermost(obj2):
    v_distance = centerofmass(obj2)[0] - centerofmass(obj1)[0]
  else:
    v_distance = -(centerofmass(obj1)[0] - centerofmass(obj2)[0])
  O = move(I, obj1, (v_distance, 0))
  return O
 
6.333333333333333, 17.152925, def fcdejcdccbdcedaajjfjbdiigccaaajc(I):
  obj1 = toobject(ofcolor(I, ONE) | ofcolor(I, TWO), I)
  obj2 = toobject((ofcolor(I, THREE) | ofcolor(I, FIVE) | ofcolor(I, SIX)), I)
  v_distance = gravitate(obj1, obj2)[0]
  O = move(I, obj1, (v_distance, 0))
  return O
 
11.666666666666666, 21.565273, def gbcfcbdjeddfedhdiejgheibhdbbbfeb(I):
  # Find background color
  bg = mostcolor(I)
  
  # Create a new grid filled with background color
  x1 = canvas(bg, shape(I))
  
  # Get all objects and their upper-left corners
  x2 = [(o, ulcorner(o)) for o in objects(I, False, False, True)]
  
  # Sort objects based on their row index
  x3 = order(x2, lambda x: x[1][0])
  
  #  Paint objects onto the new grid from top to bottom
  x4 = x1
  for obj, (i, j) in x3:
    x4 = paint(x4, shift(obj, (-i, 0)))
    
  return x4
 
6.333333333333333, 17.152925, def geafaeeebjffeifbaeaicaafcdaeddbj(I):
  # Get grid height
  h = height(I)

  # Find the non-background rows
  x1 = [i for i, row in enumerate(I) if any(v != mostcolor(I) for v in row)]

  # Create a new grid by rearranging the rows
  x2 = tuple(I[i] if i in x1 else tuple(mostcolor(I) for _ in range(width(I))) for i in range(h))
  
  return x2
 
7.0, 20.81407, def cddhaijeigieeeceaaaebcbcbeacjeea(I):
  obj = toobject(ofcolor(I, FIVE), I)  # Identify object with color 5
  target = add(ulcorner(obj), (2, -4)) # Calculate target position (2 rows down, 4 columns left)
  shifted_obj = shift(obj, subtract(target, ulcorner(obj))) # Shift object to target
  covered_grid = cover(I, obj) # Remove original object from grid
  O = paint(covered_grid, shifted_obj) # Paint the shifted object onto the grid
  return O
 
6.333333333333333, 21.914875, def aehedeiccfeeebecbbaiaahecebbdbcj(I):
  obj_indices = ofcolor(I, FIVE) # Get indices of object with color 5
  offset = (-2, 4) # Define the offset for the move (2 rows up, 4 columns right) 
  target_indices = shift(obj_indices, offset) # Calculate target indices
  obj = toobject(obj_indices, I) # Extract the object from the grid
  O = paint(cover(I, obj), toobject(target_indices, I)) # Paint the object at the new location
  return O
 
6.333333333333333, 17.152925, def ejjehdcdbecfefaabaebafeafeciagfe(I):
  objs = objects(I, False, True, True) 
  O = I
  for obj in objs:
    shifted_obj = obj
    while uppermost(shifted_obj) > 0 and len(toobject(shift(toindices(shifted_obj), UP), I) - obj) == 0:
      shifted_obj = shift(shifted_obj, UP)
    O = paint(cover(O, obj), shifted_obj) 
  return O
 
12.666666666666666, 25.646181, def cecfeddbdcbbeicfigaagecbeeecbddj(I):
  O = I
  for i in range(1, len(I)):
    for j in range(len(I[0])):
      if I[i][j] != mostcolor(I):
        k = i
        while k > 0 and I[k-1][j] == mostcolor(I):
          k -= 1
        O = paint(cover(O, {(I[i][j], (i, j))}), {(I[i][j], (k, j))})
  return O
 
12.333333333333334, 53.559875, def gjfdfcefhfbfechfbaceacbhdjfbhhfb(I):
  return paint(canvas(mostcolor(I), shape(I)), 
               merge(apply(lambda obj: toobject(
                 {(i, min(range(uppermost(obj), -1, -1), key=lambda r: index(I, (r, j)) != mostcolor(I))): (v, (i, j)) for v, (i, j) in obj},
                 I), 
               objects(I, False, True, True))))
 
8.666666666666666, 15.270952, def eceeaegfcffeecheafahedefbicfbehe(I):
  return paint(I, mapply(lambda obj: shift(obj, (lowermost(obj) - uppermost(obj), 0)), objects(I, T, T, T)))
 
10.333333333333334, 18.851086, def fihccddbcdfgecigiffbihafbdfcadab(I):
  painted = I
  for obj in objects(I, T, T, T):
    painted = paint(cover(painted, obj), shift(obj, (lowermost(obj) - uppermost(obj), 0)))
  return painted
 
6.666666666666667, 21.736547, def eejhhcafajhdecabaibcadabcddidfid(I):
    anchor_color = FIVE
    anchor_loc = ulcorner(ofcolor(I, anchor_color))

    def transform_object(obj):
        obj_center = center(toindices(obj))
        relative_pos = subtract(obj_center, anchor_loc)
        new_center = add(anchor_loc, (relative_pos[0] * -1, relative_pos[1] * -1)) 
        offset = subtract(new_center, obj_center)
        return shift(obj, offset)

    objects_to_move = objects(I, T, F, T) - colorfilter(objects(I, T, F, T), anchor_color)
    transformed_objects = apply(transform_object, objects_to_move)
    painted_grid = paint(I, merge(transformed_objects))
    O = replace(painted_grid, anchor_color, ZERO)
    return O
 
16.666666666666668, 33.471043, def aedjhacbbibaeaeajcbigddehcbgfbhc(I):
  # Get background color
  bg = mostcolor(I)

  # Create a new empty grid filled with background color
  new_grid = canvas(bg, shape(I))
  
  # Iterate through objects and paint them onto the new grid from bottom up
  for i, obj in enumerate(objects(I, False, False, True)):
    offset = (len(I) - height(obj) - i, 0)
    new_grid = paint(new_grid, shift(obj, offset))
  
  return new_grid
 
18.333333333333332, 20.228104, def cghbdfbcgbbfeegciddcagabjfcicccj(I):
  # Split the grid into rows
  rows = tuple(tuple(v for v in r) for r in I)
  
  # Filter out rows containing only background
  non_bg_rows = sfilter(rows, lambda row: any(v != mostcolor(I) for v in row))
  
  # Calculate the number of missing rows
  missing_rows = len(I) - len(non_bg_rows)
  
  # Add empty rows (filled with background color) at the top
  return tuple(tuple(mostcolor(I) for _ in range(len(I[0]))) for _ in range(missing_rows)) + non_bg_rows
 
9.666666666666666, 33.508045, def cceeeaafghjbeejbachfffbdcecddcce(I):
  def move_object(obj, grid, offset):
    return toobject(toindices(shift(obj, offset)), grid)
  objs = objects(I, False, True, True)
  moved_objs = frozenset()
  for obj in objs:
    if color(obj) == ONE and TWO in palette(obj):
      new_obj = move_object(obj, I, (2, 2)) 
    elif color(obj) == ONE:
      new_obj = move_object(obj, I, (3, -leftmost(obj)))
    elif color(obj) == THREE:
      new_obj = move_object(obj, I, (-2, 0))
    else:
      new_obj = obj
    moved_objs = moved_objs | {new_obj}
  return paint(canvas(mostcolor(I), shape(I)), merge(moved_objs))
 
15.0, 15.235236, def chhbdchecbdeehedaabhccfdfccaeadj(I):
  def move_to_target(obj, target):
    return shift(obj, subtract(target, centerofmass(obj)))
  objs = objects(I, False, True, True)
  moved_objs = frozenset()
  for obj in objs:
    if color(obj) == ONE and TWO in palette(obj):
      new_obj = move_to_target(obj, (len(I) // 2, len(I[0]) // 2)) 
    elif color(obj) == ONE:
      new_obj = move_to_target(obj, (len(I) - 2, 0)) 
    elif color(obj) == THREE:
      new_obj = move_to_target(obj, (uppermost(obj) - 2, leftmost(obj))) 
    else:
      new_obj = obj
    moved_objs = moved_objs | {new_obj}
  return paint(canvas(mostcolor(I), shape(I)), merge(moved_objs))
 
9.666666666666666, 11.006875, def bedcaciddjbeedhfjiciedbbcbbdcdee(I):
  def move_and_paint(grid, obj, offset):
    return paint(grid, shift(obj, offset))
  O = I
  for obj in objects(I, False, True, True):
    if color(obj) == ONE and TWO in palette(obj):
      O = move_and_paint(O, toobject(toindices(obj), I), (2, 2))
    elif color(obj) == ONE:
      O = move_and_paint(O, toobject(toindices(obj), I), (3, -leftmost(obj)))
    elif color(obj) == THREE:
      O = move_and_paint(O, toobject(toindices(obj), I), (-2, 0))
  return O
 
11.333333333333334, 9.2735405, def dbhdjafcaeegebccaeaaedceifeadbgb(I):
  return paint(I, 
               merge(apply(lambda obj: shift(obj, (height(obj), 0)), 
                           objects(I, T, T, T))))
 
17.666666666666668, 17.994793, def baaebchfdfbdeiibahiaaehfcaefacff(I):
  # Identify non-background objects
  objs = objects(I, False, False, True)

  # Find the maximum bottom edge for all objects
  max_bottom = maximum(apply(lambda o: lowermost(o), objs))
  
  # Calculate the offset needed to move each object downwards
  offset = (len(I) - max_bottom - 1, 0)

  # Shift each object downwards and paint it back onto the grid
  return paint(canvas(mostcolor(I), shape(I)), merge(apply(lambda o: shift(o, offset), objs)))
 
18.333333333333332, 24.904716, def dhddagdgbbaeebchijabhffhbeaaabdf(I):
  # Identify non-background objects
  objs = objects(I, False, False, True)

  # Calculate offset for each object and shift
  shifted_objs = apply(lambda o: shift(o, (len(I) - lowermost(o) - 1, 0)), objs)

  # Paint shifted objects onto a blank canvas
  return paint(canvas(mostcolor(I), shape(I)), merge(shifted_objs))
 
6.666666666666667, 19.879255, def cbeejdeadfbdedceidhjbjehcbdedfbb(I):
  five_loc = first(ofcolor(I, FIVE)) # Find the '5'
  if not five_loc:
    return I
  obj = toobject(neighbors(five_loc), I) # Extract the object containing '5'
  target = ulcorner(obj) # Target is the upper-left corner of the object
  while index(I, add(target, (-1, -1))) == ZERO and target != (0, 0): # Move diagonally towards top-left until blocked
    target = add(target, (-1, -1))
  O = paint(cover(I, obj), shift(obj, subtract(target, five_loc)))  # Move the object
  return O
 
6.333333333333333, 17.152925, def decdaeecbdiaejhhbfcfgbifeajcbcai(I):
  five_indices = ofcolor(I, FIVE)
  if not five_indices:
    return I
  obj = toobject(five_indices, I)
  h, w = shape(obj)
  target_i = max(0, uppermost(obj) - h + 1) # Calculate the target row
  target_j = max(0, leftmost(obj) - w + 1) # Calculate the target column
  target = (target_i, target_j)
  O = paint(cover(I, obj), shift(obj, subtract(target, ulcorner(obj))))
  return O
 
7.333333333333333, 20.00587, def edfcbjadafcbeadfjcfeeddfeebhjdab(I):
    five_loc = first(ofcolor(I, FIVE))
    if not five_loc:
        return I
    obj = toobject(dneighbors(five_loc) | ineighbors(five_loc) | {five_loc}, I)  # Include diagonals for object
    target = ulcorner(obj)
    while index(I, add(target, (-1, -1))) == ZERO and target != (0, 0):
        target = add(target, (-1, -1))
    O = paint(cover(I, obj), shift(obj, subtract(target, five_loc)))
    return O
 
8.666666666666666, 18.252935, def gfijecbifcchejigjbejghijfaajhefa(I):
  def relocate(obj, condition, target):
      return shift(obj, subtract(target, centerofmass(obj))) if condition(obj) else obj
  objs = objects(I, False, True, True)
  moved_objs = frozenset(relocate(obj, lambda o: color(o) == ONE and TWO in palette(o), (5, 5)) for obj in objs)
  moved_objs = frozenset(relocate(obj, lambda o: color(o) == ONE, (len(I) - 2, 0)) for obj in objs)
  moved_objs = frozenset(relocate(obj, lambda o: color(o) == TWO, (2, 0)) for obj in objs)
  return paint(canvas(mostcolor(I), shape(I)), merge(moved_objs))
 
17.0, 31.01833, def jgdeefbgfbfgeidbacbifbcdhjjjafac(I):
  O = I  
  for obj in objects(I, T, T, T):
    h = height(obj)
    offset = (h, h // h + 1)
    O = paint(cover(O, obj), shift(obj, offset))
  return O
 
17.0, 29.569271, def bbaifedchieheidabfciabidfahdgcec(I):
    return paint(canvas(mostcolor(I), shape(I)), 
                 merge(apply(lambda obj: shift(obj, (height(obj), height(obj)//height(obj) + 1)), 
                             objects(I, T, T, T))))
 
17.333333333333332, 28.266783, def edcceiabbbededghjddgcchefijceafb(I):
    objs = objects(I, False, False, True)
    bg = mostcolor(I)
    new_objs = set()
    for obj in objs:
        s = size(obj)
        # Example movement rule (replace with actual logic)
        if s == 1:
            offset = (3,-1) 
        elif s == 3:
            offset = (1,1)
        else:
            offset = (s - len(objs), 0)  
        new_objs.add(shift(obj, offset))
    O = paint(canvas(bg, shape(I)), merge(new_objs))
    return O
 
13.0, 20.08154, def hajcgcddfgdceeafijceaebjfacfbjch(I):
  def move_object(obj, target):
    return shift(obj, subtract(target, ulcorner(obj))) 
  objs = objects(I, False, True, True)
  moved_objs = frozenset({
    move_object(obj, (5,5)) if color(obj) == ONE else 
    move_object(obj, (5,4)) if color(obj) == TWO else 
    obj 
    for obj in objs
  })
  return paint(canvas(mostcolor(I), shape(I)), merge(moved_objs))
 
12.666666666666666, 24.430801, def ejchhadaicbcebaaicjcjdbcbjdffchb(I):
  def move_color(I, color, target):
    return paint(cover(I, ofcolor(I, color)), shift(toobject(ofcolor(I, color), I), subtract(target, ulcorner(toobject(ofcolor(I, color), I)))))
  O = move_color(I, ONE, (5, 5))
  O = move_color(O, TWO, (5, 4))
  return O 
 
15.333333333333334, 24.15843, def djgfcbbbeachecbgbfhabdiefgcedfji(I):
  return paint(
      fill(I, mostcolor(I), mapply(toindices, objects(I, T, T, T))), 
      merge(apply(lambda obj: shift(obj, (height(obj), 1)), objects(I, T, T, T)))
  )
 
15.0, 27.773241, def gibcccahifefeedcbjbgadeihdedbdeb(I):
  O = canvas(0, shape(I))
  for i in reversed(range(height(I))):
    for j in range(width(I)):
      if index(I, (i, j)) != 0:
        new_i = i
        while new_i > 0 and index(O, (new_i - 1, j)) == 0:
          new_i -= 1
        O = paint(O, {(index(I, (i, j)), (new_i, j))})
  return O
 
11.666666666666666, 28.275757, def cbdecbabdffceafjbfchdadjgfccgdhe(I):
  objs = objects(I, F, F, T)
  def shift_up(obj, other_objs):
    for i in range(uppermost(obj), -1, -1):
      new_obj = recolor(index(I, (i, leftmost(obj))), toindices(shift(obj, (-i + uppermost(obj), 0))))
      if all(not intersection(toindices(new_obj), toindices(other)) for other in other_objs):
        return new_obj
    return obj
  shifted_objs = []
  for obj in objs:
    shifted_objs.append(shift_up(obj, shifted_objs))
  O = paint(canvas(0, shape(I)), merge(shifted_objs))
  return O
 
7.333333333333333, 18.050392, def ffeajffdgcjcecdcicddiehdhfafdega(I):
  five_loc = first(ofcolor(I, FIVE))
  if not five_loc:
    return I
  obj = toobject(initset(five_loc), I)
  O = paint(cover(I, obj), shift(obj, (-2, 1)))
  return O
 
15.666666666666666, 22.91756, def djccfdaibhfdegjhiddcbjicfbfhadag(I):
  def column_free(grid, col):
    return all(grid[i][col] == 0 for i in range(len(grid)))
  objs = objects(I, False, True, True)
  output = canvas(0, shape(I))
  for obj in sorted(objs, key=lambda obj: ulcorner(obj)[0]):
    c = 0
    while not column_free(output, c):
      c += 1
    output = paint(output, shift(obj, (-uppermost(obj), c - leftmost(obj))))
  return output
 
101.0, 106.67553, def cdidebchhbdcebhiafbgjeaceicbccei(I):
  objs = objects(I, False, True, True)
  output = canvas(0, shape(I))
  for obj in objs:
    temp = canvas(0, shape(obj))
    temp = paint(temp, normalize(obj))
    output = hconcat(output, temp)
  return output
 
8.666666666666666, 19.354599, def jgfdefafcfgjegbabehicjchgjhgbbig(I):
  objs = objects(I, False, True, True)
  output = I
  for obj in objs:
    if color(obj) == 2:
      output = paint(cover(output, obj), shift(obj, (-1, 0)))
  return output
 
15.333333333333334, 25.424406, def cbbfgaaiccbfedggifccabjccbcgbehf(I):
  objs = objects(I, False, False, True)
  shifted_objs = set()
  for obj in objs:
    normalized_obj = normalize(obj)
    shifted_obj = shift(normalized_obj, (0, -ulcorner(normalized_obj)[0]))
    shifted_objs.add(shifted_obj)
  O = paint(canvas(mostcolor(I), shape(I)), merge(shifted_objs))
  return O
 
15.0, 32.740463, def aeaigiccegeeebibbdfecbefffffhabf(I):
  objs = fgpartition(I)
  shifted_objs = apply(lambda obj: shift(obj, (-uppermost(obj), 0)), objs)
  O = paint(canvas(mostcolor(I), shape(I)), merge(shifted_objs))
  return O
 
14.0, 23.587967, def deifeebiebhdebcaibfjeffaehfdeigd(I):
  shifted_objs =  mapply(lambda obj: recolor(color(obj), shift(toindices(obj), (-uppermost(obj), 0))), objects(I, False, False, True))
  O = paint(canvas(mostcolor(I), shape(I)), shifted_objs)
  return O
 
7.333333333333333, 12.830412, def gfhcjedcjgedeccdadeibgjacaaebfaj(I):
    five_indices = ofcolor(I, FIVE)
    mirrored_indices = frozenset((height(I) - 1 - i, j) for i, j in five_indices)
    O = paint(I, recolor(FIVE, mirrored_indices)) 
    return O
 
6.333333333333333, 14.07319, def jghebcbfgafheagbbgbiihhhedagefda(I):
    five_obj = first(colorfilter(objects(I, T, F, F), FIVE))
    mirrored_obj =  vmirror(five_obj)
    shift_amount = (height(five_obj), 0)
    shifted_obj = shift(mirrored_obj, shift_amount)
    O = paint(I, shifted_obj)
    return O
 
6.666666666666667, 13.733815, def ceibfdibdhdeeeaajgiafihbeiebaefc(I):
  five_indices = ofcolor(I, FIVE)
  top_row = uppermost(five_indices)
  mirrored_indices = frozenset((top_row - 1 - (i - top_row), j) for i, j in five_indices)
  O = paint(I, recolor(FIVE, mirrored_indices))
  return O
 
6.666666666666667, 15.5797205, def cejacibgbedcehadjgfjgihejbhiaida(I):
  objs = objects(I, T, F, F)
  five_obj = first(colorfilter(objs, FIVE))
  top_left_corner = ulcorner(five_obj)
  mirrored_obj =  shift(vmirror(five_obj), (2 * top_left_corner[0], 0))
  O = paint(I, mirrored_obj)
  return O
 
15.0, 22.178318, def djaeceabeeceefebiafdhhigfhgfcdga(I):
  def move_to_center(obj, grid):
    return paint(cover(grid, obj), shift(obj, subtract((5, 5), centerofmass(obj))))
  def move_to_left(obj, grid):
    c = 0
    while index(grid, (uppermost(obj), c)) is not None:
      c += 1
    return paint(cover(grid, obj), shift(obj, (0, c - leftmost(obj))))
  objs = objects(I, False, True, True)
  output = I
  for obj in objs:
    if color(obj) in {1, 2, 3}:
      output = move_to_center(obj, output)
    else:
      output = move_to_left(obj, output)
  return output
 
14.666666666666666, 20.24802, def jdeibddjbdfbehgijddhfigecefcfabh(I):
  objs = objects(I, False, True, True)
  output = canvas(mostcolor(I), shape(I))
  for obj in objs:
    if color(obj) in {1, 2, 3}:
      output = paint(output, shift(obj, subtract((5, 5), centerofmass(obj))))
    else:
      j = 0
      while any(index(output, (i, j)) is not None for i in range(height(obj))):
        j += 1
      output = paint(output, shift(obj, (-uppermost(obj), j)))
  return output
 
17.666666666666668, 24.656494, def ccgifadefbcaebcfjaceefbedejfecej(I):
  def move_object(obj, grid, target):
    return paint(cover(grid, obj), shift(obj, subtract(target, ulcorner(obj))))
  objs = objects(I, False, True, True)
  output = I
  for obj in objs:
    if color(obj) in {1, 2, 3}:
      output = move_object(obj, output, (5, 5))
    else:
      c = 0
      while any(index(output, (i, c)) is not None for i in range(height(I))):
        c += 1
      output = move_object(obj, output, (-uppermost(obj), c))
  return output
 
16.0, 21.343918, def cidbddefibejejbbbadcehabffcjddfd(I):
  return paint(
      canvas(ZERO, shape(I)),
      merge(apply(lambda obj: shift(obj, (height(obj), 0)), objects(I, T, T, T)))
  )
 
9.666666666666666, 5.1530194, def fehbacadcbeaeaeeiacchedaebjajifc(I):
  objs = objects(I, False, False, True) # Extract objects without background
  target = ulcorner(ofcolor(I, 5)) # Find the target location (top-left corner of digit '5')
  
  def move_object(obj):
    obj_corner = ulcorner(obj) 
    offset = subtract(target, obj_corner) # Calculate the offset to move the object
    return shift(obj, offset) # Shift the object

  moved_objs = apply(move_object, objs)
  O = paint(I, merge(moved_objs))
  return O 
 
8.666666666666666, 5.154496, def gcfibcebjeddecidabbiccdhfiihiaif(I):
  objs = objects(I, False, False, True)
  target_obj = next(obj for obj in objs if any(v == 5 for v, _ in obj)) # Find object containing '5'
  target = llcorner(target_obj) # Get lower-left corner of target object

  def move_object(obj):
    offset = subtract(target, lrcorner(obj)) # Calculate offset for bottom-left alignment
    return shift(obj, offset)

  moved_objs = apply(move_object, objs)
  O = paint(I, merge(moved_objs))
  return O
 
7.333333333333333, 14.636314, def dcagfhjedacbedjhiecadbeecdeidbff(I):
  objs = objects(I, False, False, True)
  max_obj = argmax(objs, size) # Find the largest object
  target = ulcorner(shift(max_obj, (height(max_obj), 0))) # Target is below the largest object

  def move_object(obj):
    if obj == max_obj: 
      return obj # Don't move the largest object
    offset = subtract(target, ulcorner(obj))
    return shift(obj, offset)

  moved_objs = apply(move_object, objs)
  O = paint(I, merge(moved_objs))
  return O
 
11.666666666666666, 13.30586, def bhbjcabbbhbjeaaeadiajbejddfcebad(I):
  objs = objects(I, False, False, True)
  target = (len(I) // 2, len(I[0]) // 2) # Target is the center of the grid

  def move_object(obj):
    offset = subtract(target, centerofmass(obj)) # Align object's center of mass with target
    return shift(obj, offset)

  moved_objs = apply(move_object, objs)
  O = paint(I, merge(moved_objs))
  return O 
 
13.0, 54.102325, def ecefagibcbheefafahhegadjhabdceej(I):
    objs = objects(I, F, F, T)
    moved_objs = set()
    for obj in objs:
        if size(obj) == ONE:
            ci, cj = centerofmass(obj)
            offset = (THREE * sign(ci - FOUR), TWO)
        else:
            offset = gravitate(obj, ofcolor(I, FIVE))
        moved_objs.add(shift(obj, offset))
    O = paint(cover(I, merge(objs)), merge(moved_objs))
    return O
 
13.666666666666666, 48.163353, def febdiideahcjeaediecccjefeihdhead(I):
    five_loc = first(toindices(ofcolor(I, FIVE)))
    objs = objects(I, F, F, T)
    moved_objs = set()
    for obj in objs:
        if size(obj) == ONE:
            offset = (THREE * sign(uppermost(obj) - five_loc[0]), TWO) 
        else:
            offset = gravitate(obj, ofcolor(I, FIVE))
        moved_objs.add(shift(obj, offset))
    O = paint(cover(I, merge(objs)), merge(moved_objs))
    return O
 
17.333333333333332, 22.14198, def bheifaebdfceedbbbdbfccdejdiebfce(I):
  objs = objects(I, False, True, True)
  output = I
  j = 0
  for obj in objs:
    if color(obj) in {1, 2, 3}:
      output = paint(cover(output, obj), shift(obj, (len(I)-height(obj)-uppermost(obj), j)))
      j += width(obj)
  return output
 
17.0, 25.456911, def dchdfbdbigjiebcgahefffhfgajadeec(I):
  objs = objects(I, False, True, True)
  output = I
  for obj in objs:
    if color(obj) in {1, 2, 3}:
      output = paint(cover(output, obj), shift(obj, (len(I)-height(obj)-uppermost(obj), -(leftmost(obj)))))
  return output
 
17.0, 29.57278, def gedabafdcfabebccjiaebafedadjfcae(I):
  objs = objects(I, False, True, True)
  output = canvas(mostcolor(I), shape(I))
  for obj in objs:
    if color(obj) in {1, 2, 3}:
      new_pos = (len(I) - height(obj), 0)  
      output = paint(output, shift(obj, subtract(new_pos, ulcorner(obj))))
  return output
 
17.333333333333332, 22.052784, def chiafhjfdaebebdgjdbhddgbjiecgjfe(I):
    objs = objects(I, False, True, True)
    output = I
    for obj in objs:
        if color(obj) in {1, 2, 3}:
            output = paint(cover(output, obj), shift(obj, (2, -(leftmost(obj) - (len(I[0]) // 2 - width(obj) // 2)))))
    return output
 
12.333333333333334, 23.393394, def cbdaaeddcjacecjeihcffaagjdgbbcba(I):
    objs = objects(I, T, T, T)
    small_obj = argmax(objs, size) if len(objs) > 1 else first(objs)
    bg_color = mostcolor(I)
    center_j = width(I) // 2 - width(small_obj) // 2
    offset = (height(I) - height(small_obj) - uppermost(small_obj), center_j - leftmost(small_obj))
    moved_obj = shift(small_obj, offset)
    O = paint(fill(I, bg_color, small_obj), moved_obj)
    return O
 
8.666666666666666, 20.362717, def ffadbihfbdbiejcaabbbedajdcjcefah(I):
  obj = argmin(objects(I, T, T, T), lambda o: uppermost(o))
  h, w = shape(obj)
  center_offset = tojvec((width(I) - w) // 2)
  bottom_offset = toivec(height(I) - h)
  O = paint(cover(I, obj), shift(obj, add(bottom_offset, center_offset)))
  return O
 
9.333333333333334, 18.804205, def cdacjbbdjbcfebfaiecgciddcbccffef(I):
    o = argmin(objects(I, T, T, T), uppermost)
    h, w = shape(o)
    O = paint(cover(I, o), shift(o, (height(I) - h - uppermost(o), (width(I) - w) // 2 - leftmost(o))))
    return O
 
7.666666666666667, 19.59558, def cebbecccibfcegihaabfbeagbhdjhcfc(I):
  objs = objects(I, T, T, T)
  target_obj = argmin(objs, lambda o: len(o))
  target_h, target_w = shape(target_obj)
  offset_i = height(I) - target_h - uppermost(target_obj) 
  offset_j = (width(I) - target_w) // 2 - leftmost(target_obj)
  O = paint(fill(I, mostcolor(I), target_obj), shift(target_obj, (offset_i, offset_j)))
  return O
 
9.333333333333334, 18.951105, def bgbcibidggjbececaddccahebabidaaf(I):
  obj = min(objects(I, T, T, T), key=lambda x: (uppermost(x), len(x)))
  new_pos = ((height(I) - height(obj)), (width(I) // 2 - width(obj) // 2))
  O = paint(cover(I, obj), shift(obj, subtract(new_pos, ulcorner(obj))))
  return O
 
14.666666666666666, 18.927874, def efgfcfeidceaeacbbcgdggbfiajecbic(I):
  objs = sorted(objects(I, False, False, True), key=lambda obj: -uppermost(obj))
  target = ulcorner(ofcolor(I, 5))
  h = height(objs[0]) # Height of the first object
  
  O = I # Initialize O with I
  for i, obj in enumerate(objs):
    offset = (target[0] - h * i - uppermost(obj), target[1] - leftmost(obj))
    O = paint(cover(O, obj), shift(obj, offset))
  return O 
 
26.0, 39.542507, def cgbfdbjadcfdejgebbfddcjjfeicieef(I):
  objs = objects(I, False, False, True)
  target = ulcorner(ofcolor(I, 5))
  canvas_height = sum(height(obj) for obj in objs) # Calculate total height of objects
  O = canvas(mostcolor(I), (canvas_height + target[0], len(I[0]))) # Create new canvas

  current_row = 0
  for obj in objs:
    offset = (target[1] - leftmost(obj), current_row)
    O = paint(O, shift(obj, offset))
    current_row += height(obj)
  return O
 
16.0, 19.29467, def aiaaggaeegajegedjfefbeajfeehdded(I):
  five_idx = ulcorner(ofcolor(I, 5))
  objs = sorted(objects(I, False, False, True), key=lambda obj: -uppermost(obj))
  O = I

  current_row = five_idx[0] 
  for i, obj in enumerate(objs):
    if any(index(I, (row, five_idx[1])) == 5 for row in range(uppermost(obj), lowermost(obj) + 1)):
      continue  # Skip the '5' object
    offset = (current_row - uppermost(obj), five_idx[1] - leftmost(obj))
    O = paint(cover(O, obj), shift(obj, offset))
    current_row += height(obj)
  return O
 
16.666666666666668, 21.52512, def acfegcaecfajehddjebbbhbabeaefege(I):
  objs = sorted(objects(I, False, False, True), key=lambda obj: uppermost(obj))
  target = ulcorner(ofcolor(I, 5))
  acc = target[0] + height(extract(objs, lambda o: 5 in {v for v, _ in o}))
  O = I
  for obj in objs:
    if 5 not in {v for v, _ in obj}:
        offset = (acc - uppermost(obj), target[1] - leftmost(obj))
        O = paint(cover(O, obj), shift(obj, offset))
        acc += height(obj)
  return O
 
25.666666666666668, 36.452545, def fdbgejibgedgeicfichddfifiaheddhc(I):
  objs = objects(I, False, False, True) - {extract(objects(I, False, False, True), lambda obj: 5 in {v for v, _ in obj})}
  target = ulcorner(ofcolor(I, 5))
  canvas_height = sum(height(obj) for obj in objs) + target[0] + 1
  O = canvas(mostcolor(I), (canvas_height, len(I[0])))

  current_row = target[0] + 1
  for obj in objs:
    offset = (current_row, target[1] - leftmost(obj))
    O = paint(O, shift(obj, offset))
    current_row += height(obj)
  return O
 
7.0, 16.948353, def cdcbbefcdbciecdhagdacedajefdfcad(I):
  fives = recolor(ONE, ofcolor(I, FIVE))
  threes = shift(ofcolor(I, THREE), (-ONE, ZERO))
  others =  difference(asindices(I), fives | threes)
  O = paint(canvas(ZERO, shape(I)), recolor(THREE, threes) | recolor(TWO, fives) | toobject(others, I))
  return O
 
15.666666666666666, 37.71387, def fbeedeiajcffecegbdicfjbidbaihgcf(I):
    objs = objects(I, False, False, True)
    shifted_objs = frozenset(shift(obj, (height(I) - height(obj), -leftmost(obj))) for obj in objs)
    painted = paint(canvas(0, shape(I)), merge(shifted_objs))
    return painted 
 
13.666666666666666, 50.963295, def ifdebeidecicebbbjjfbfgeegbbhdidc(I):
  non_zero_indices = difference(asindices(I), ofcolor(I, 0))
  min_i, min_j = ulcorner(non_zero_indices)
  shifted_indices = frozenset((i - min_i + height(I) - 1, j - min_j) for i, j in non_zero_indices)
  return fill(canvas(0, shape(I)), 1, shifted_indices)
 
20.0, 18.553274, def ebdafigaddcaebdgbgdgcfjfcgaecfba(I):
    shifted = vmirror(I)
    return tuple(tuple(val if val != 0 else 0 for val in row) for row in shifted) 
 
12.333333333333334, 7.619838, def dafefajfddbieehiagbabhcabcgajced(I):
    objs = objects(I, False, False, True) 
    target_obj = extract(objs, lambda obj: 5 in {v for v, _ in obj})
    target_bottom = lowermost(target_obj) 

    def move_object(obj):
        offset = target_bottom - uppermost(obj)
        return shift(obj, (offset, 0))

    moved_objs = apply(move_object, objs - {target_obj}) 
    O = paint(I, merge(moved_objs | {target_obj})) 
    return O
 
12.333333333333334, 9.436693, def eabddhfbjefdedejbeddjechdddaidif(I):
  target_top = uppermost(extract(objects(I, False, False, True), lambda obj: 5 in {v for v, _ in obj}))

  def move_object(obj):
    obj_bottom = lowermost(obj)
    offset = target_top - obj_bottom
    return shift(obj, (offset, 0))

  moved_objs = apply(move_object, objects(I, False, False, True))
  O = paint(I, merge(moved_objs))
  return O
 
10.333333333333334, 8.55482, def jcedhdefabahejaaifjdfffcfficfjdb(I):
  objs = objects(I, False, False, True)
  target_obj = extract(objs, lambda obj: 5 in {v for v, _ in obj})
  others = objs - {target_obj}
  above = sfilter(others, lambda obj: uppermost(obj) < uppermost(target_obj))

  def move_obj(obj):
    return shift(obj, (lowermost(target_obj) - uppermost(obj), 0))

  moved = apply(move_obj, above)
  O = paint(I, merge(moved | others - above | {target_obj}))
  return O
 
7.333333333333333, 18.844177, def efcjdbhdhajdegajibbddecabhfaebcb(I):
  objs = objects(I, F, F, T)
  moved_objs = set()
  for obj in objs:
    center_i, center_j = centerofmass(obj)
    if size(obj) == ONE:
      offset = (THREE, TWO) if center_i < len(I) // 2 else (-THREE, TWO)
      new_obj = recolor(THREE, shift(obj, offset)) 
    elif size(obj) == FIVE:
      offset = (TWO, ZERO) if center_j <= len(I[0]) // 2 else (-ONE, ONE)
      new_obj = shift(obj, offset) 
    elif size(obj) == THREE:
      offset = (-ONE, ZERO)
      new_obj = shift(obj, offset)
    else:
      new_obj = obj
    moved_objs.add(new_obj)
  O = paint(cover(I, merge(objs)), merge(moved_objs))
  return O
 
14.333333333333334, 49.664333, def edjebhbddbjjecafbfaffbechdiibfbi(I):
  objs = objects(I, False, False, True)
  h, w = shape(I)
  bottom_left = (h - 1, 0)
  shifted_objs = [shift(obj, subtract(bottom_left, ulcorner(obj))) for obj in objs]
  return paint(canvas(0, (h, w)), merge(shifted_objs))
 
12.333333333333334, 7.9268875, def bfffeeeejebbehbbaajbbbcdafabcbaa(I):
  five_row = minimum(extract(objects(I, F, F, T), lambda o: 5 in palette(o)))[0]
  
  def move_obj_v3(obj):
    return shift(obj, (five_row - uppermost(obj), 0))
        
  O = paint(I, merge(apply(move_obj_v3, objects(I, F, F, T))))
  return O
 
15.0, 47.030487, def dadbfhffebegebbiiagjdbahbihbadhd(I):
  objs = objects(I, False, False, True)
  h = height(I)
  moved_objs = frozenset(shift(obj, (h - 1 - uppermost(obj), 0)) for obj in objs)
  return paint(canvas(0, shape(I)), merge(moved_objs))
 
13.666666666666666, 44.58219, def idcigjcjcjgbehjeaggaegefcdbdcged(I):
  five_center_i, five_center_j = center(first(colorfilter(objects(I, T, F, T), FIVE)))
  def transform(obj):
    obj_center_i, obj_center_j = center(obj)
    return shift(hmirror(obj) if obj_center_j < five_center_j else obj, (2 * (five_center_i - obj_center_i), 0))
  return paint(canvas(ZERO, shape(I)), merge(apply(transform, objects(I, T, F, T))))
 
11.333333333333334, 19.506866, def gbfeabfbdaabecaaiigcdhiicegdjbah(I):
  objs = objects(I, False, False, True)
  moved_objs = set()
  for obj in objs:
    while any(i == 0 or j == 0 for i, j in toindices(obj)) == False:
      obj = shift(obj, (-1,-1))
    moved_objs.add(obj) 
  return paint(canvas(mostcolor(I), shape(I)), merge(moved_objs))
 
14.0, 36.78694, def hjchcbagafafeafebeecbfdhabedcibd(I):
  objs = objects(I, False, False, True)
  moved_objs = frozenset({shift(obj, (lowermost(obj) - len(I) + 1, leftmost(obj)) ) for obj in objs})
  return paint(canvas(mostcolor(I), shape(I)), merge(moved_objs))
 
13.333333333333334, 22.447565, def ddceccadhfhjefhfjfedjdefedjcdgac(I):
  return paint(canvas(mostcolor(I), shape(I)), merge({shift(obj, (max(0, lowermost(obj) - len(I) + 1), max(0, leftmost(obj)))) for obj in objects(I, False, False, True)}))
 
12.666666666666666, 14.550426, def cjeeieefecbceaddjededefhccccajjf(I):
  return paint(canvas(mostcolor(I), shape(I)), merge({shift(obj, (lowermost(obj) - len(I) + 1 if leftmost(obj) == 0 else 0, leftmost(obj) if lowermost(obj) == len(I) - 1 else 0)) for obj in objects(I, False, False, True)}))
 
12.666666666666666, 8.371485, def aicffidgfgegeahhafbcccicggabicga(I):
    objs = objects(I, T, F, T)
    O = I
    for color in palette(I):
        for obj in sizefilter(colorfilter(objs, color), size(colorfilter(objs, color))):
            O = move(O, obj, (TWO * color, THREE * color))
    return O
 
14.333333333333334, 41.8447, def cgiigigajcebechabdceigacabacaeef(I):
    objs = sorted(objects(I, T, F, T), key=lambda x: (color(x), len(x)))
    O = I
    for i, obj in enumerate(objs):
        O = move(O, obj, (TWO * i, 0))
    return O
 
13.333333333333334, 13.130824, def ehdfgdbfaiaeeaddahaiafbhcjibfdch(I):
    O = I
    for c in range(1, 10):
        objs = sizefilter(colorfilter(objects(I, T, F, T), c), c)
        if objs:
            obj = first(objs)
            O = move(O, obj, (TWO * c, 0))
    return O
 
18.333333333333332, 25.06428, def ebbfdhdbbceaedchaeccabbecbfcehca(I):
  bg = mostcolor(I)
  objs = objects(I, True, False, True)
  if len(objs) == 0:
    return I
  target = ulcorner(merge(objs))
  sorted_objs = order(objs, lambda obj: (uppermost(obj), leftmost(obj)))
  O = I
  for i, obj in enumerate(sorted_objs):
    h, w = shape(obj)
    offset = (target[0] + h * i, target[1])
    O = move(O, obj, subtract(offset, ulcorner(obj)))
  return O
 
16.0, 35.822556, def dbcdbccfafcbebceaighjgfhdbafebae(I):
  bg = mostcolor(I)
  objs = objects(I, True, False, True)
  if len(objs) == 0:
    return I
  center_grid = (len(I) // 2, len(I[0]) // 2)
  O = I
  for i, obj in enumerate(objs):
    obj_center = center(obj)
    offset = subtract(center_grid, obj_center)
    O = move(O, obj, offset)
  return O
 
15.666666666666666, 34.60887, def gacbdahbcfiaeajfbdgcijfdajedcafg(I):
  bg = mostcolor(I)
  objs = objects(I, True, False, True)
  if len(objs) == 0:
    return I
  target = (4, 4)
  O = I
  for i, obj in enumerate(objs):
    offset = subtract(target, center(obj))
    O = move(O, obj, offset)
  return O
 
14.666666666666666, 12.4592705, def jejbacefajcfeagebebjabeffffdehij(I):
    objs = objects(I, T, F, T)
    if len(objs) < 2:
        return I
    obj1 = first(objs)
    obj2 = objs - {obj1}
    obj2 = first(obj2) if obj2 else obj1
    offset = gravitate(obj1, obj2)
    O = move(I, obj1, offset)
    return O
 
15.333333333333334, 35.09341, def acdhfjchdfbgeabebefhfchdfiacabeg(I):
  bg = mostcolor(I)
  objs = objects(I, True, False, True)
  if len(objs) == 0:
    return I
  O = I
  min_i, min_j = ulcorner(merge(objs))
  max_i, max_j = lrcorner(merge(objs))
  center_i = (min_i + max_i) // 2
  center_j = (min_j + max_j) // 2
  for obj in objs:
    obj_center_i, obj_center_j = center(obj)
    move_i = (center_i - obj_center_i)
    move_j = (center_j - obj_center_j)
    O = move(O, obj, (move_i, move_j))
  return O
 
21.0, 11.024002, def ehbceeiibbchecejbiafdcdcfbeeicab(I):
  objs = objects(I, False, True, True)
  moved_objs = frozenset(shift(obj, (height(I) - lowermost(obj) - 1, 0)) for obj in objs)
  O = paint(canvas(mostcolor(I), shape(I)), merge(moved_objs))
  return O
 
21.0, 11.026063, def jjgfeeccebececbcjbfhdcccccddbfhd(I):
    O = canvas(mostcolor(I), shape(I))
    for obj in objects(I, False, True, True):
        O = paint(O, shift(obj, (height(I) - lowermost(obj) - 1, 0)))
    return O
 
19.333333333333332, 36.130184, def fdfbfadeedhfebdciaejefbdhacbfdbb(I):
  objs = objects(I, False, False, True)
  new_grid = canvas(mostcolor(I), shape(I))
  for j in range(width(I)):
    col_objs = sorted(sfilter(objs, lambda obj: leftmost(obj) == j), key=uppermost)
    current_i = height(I) - 1
    for obj in col_objs:
      new_grid = paint(new_grid, shift(obj, (current_i - uppermost(obj), 0)))
      current_i -= height(obj)
  return new_grid
 
22.666666666666668, 21.153355, def cefhidgcbcaaeeccbhfhafcdfcbajigi(I):
  h, w = shape(I)
  bg = mostcolor(I)
  O = canvas(bg, (h, w))
  for j in range(w):
    current_i = h - 1
    for i in range(h - 1, -1, -1):
      if I[i][j] != bg:
        O = paint(O, {(I[i][j], (current_i, j))})
        current_i -= 1
  return O
 
18.333333333333332, 18.666756, def cjbhccafaccbedecjeaacbiajjhhgchd(I):
  O = I
  for j in range(width(I)):
    column = tuple(I[i][j] for i in range(height(I)))
    new_column = tuple(v for v in column if v != mostcolor(I)) + tuple(mostcolor(I) for _ in range(len(column) - len(tuple(v for v in column if v != mostcolor(I))))
)
    O = paint(O, {(v, (i, j)) for i, v in enumerate(new_column)})
  return O
 
12.0, 7.874558, def afgfegeedccieafebhhddbdaedbefbhi(I):
  objs = objects(I, False, False, True)
  new_objs = set()
  for obj in objs:
    new_obj = set()
    min_i = uppermost(obj)
    for i in range(height(obj)):
      for j in range(width(obj)):
        if (min_i + i, leftmost(obj) + j) in toindices(obj):
          new_obj.add((index(I, (min_i + i, leftmost(obj) + j)), (min_i + i, leftmost(obj) + j)))
    new_objs.add(frozenset(new_obj))
  return paint(canvas(mostcolor(I), shape(I)), merge(new_objs))
 
20.0, 26.151186, def ejdfcfaiacgaecigaeefedefiaaihcaf(I):
  objs = objects(I, False, False, True)
  return paint(canvas(mostcolor(I), shape(I)), merge(apply(lambda o: shift(o, (len(I) - lowermost(o) - 1, (width(I) - width(o)) // 2)), objs)))
 
20.0, 26.481956, def caacfggdedgeeebbjbddhjbhabbfadbe(I):
  objs = objects(I, False, False, True)
  h = height(I)
  return paint(canvas(mostcolor(I), shape(I)), merge(apply(lambda o: shift(o, (h - lowermost(o) - 1, (h - width(o)) // 2)), objs)))
 
18.0, 17.580938, def dffajgcaeadjeabijhfcjbgafcebdfhc(I):
    O = canvas(mostcolor(I), shape(I))
    for c in palette(I):
        for obj in colorfilter(objects(I, T, F, T), c):
            O = paint(O, shift(obj, (TWO * c, 0)))
    return O
 
18.0, 17.94757, def dadjbbacfbcjecbcadabdafffeejeegc(I):
  O = canvas(mostcolor(I), shape(I))
  for obj in objects(I, T, F, T):
    c = color(obj)
    O = paint(O, shift(obj, (TWO * c, 0)))
  return O
 
17.666666666666668, 20.087435, def cgfbdaddcfddejhdifbbgdbgdcbacede(I):
  O = I
  for obj in objects(I, T, F, T):
    c = color(obj)
    O = move(O, obj, (TWO * c, 0))
  return O
 
18.0, 18.809671, def dgddfjfhecgeefcabfaaiedegdhiegdi(I):
  O = I
  for c in palette(I):
    for obj in colorfilter(objects(I, T, F, T), c):
      O = move(O, obj, (TWO * c, 0))
  return O
 
17.333333333333332, 13.592943, def cidhbgggadbdebfeiijbggccfhagcgjg(I):
    objs = objects(I, T, F, T)
    sorted_objs = order(objs, size)
    moved_objs = []
    for i, obj in enumerate(sorted_objs):
        h = height(obj)
        offset = (len(I) - h * (i + 1), 0)
        moved_objs.append(shift(obj, offset))
    O = I
    for obj in moved_objs:
        O = paint(cover(O, obj), obj)
    return O
 
17.666666666666668, 37.6463, def efiejcdddhidebfabcbjhdcijcecjhbc(I):
    objs = objects(I, T, F, T)
    O = I
    for i, obj in enumerate(objs):
        bg = mostcolor(I)
        O = fill(O, bg, toindices(obj))
        x = ulcorner(obj)[1]
        h = height(obj)
        O = paint(O, shift(obj, (len(I) - h - i * h, -x)))
    return O
 
16.333333333333332, 40.866722, def fjafbhjhhafhecejjgaicacahbfbhabg(I):
    O = I
    for v in palette(I) - {mostcolor(I)}:
        obj = toobject(ofcolor(I, v), I)
        O = cover(O, obj)
        h = height(obj)
        O = paint(O, shift(obj, (len(I) - h - v * h, -leftmost(obj))))
    return O
 
17.0, 33.51277, def dedfjedahejeehecbddiidgeccabjggb(I):
    objs = sorted(objects(I, T, F, T), key=lambda obj: (height(obj), -ulcorner(obj)[1]), reverse=True)
    O = I
    for i, obj in enumerate(objs):
        O = cover(O, obj)
        O = paint(O, shift(obj, (len(I) - height(obj) * (i + 1), -leftmost(obj))))
    return O
 
17.0, 33.622288, def jgbfdgcecffcejgbbecddbfacbjgbfgc(I):
    h, w = len(I), len(I[0])
    O = canvas(mostcolor(I), (h, w))
    objs = sorted(objects(I, T, F, T), key=lambda obj: (-height(obj), ulcorner(obj)[1]))
    y = h
    for obj in objs:
        h_obj = height(obj)
        O = paint(O, shift(obj, (y - h_obj, -leftmost(obj))))
        y -= h_obj
    return O
 
16.666666666666668, 18.529364, def acdcgabiibcfeaefidceagdheedcabfc(I):
  O = I
  for i in range(1, height(I)):
    for j in range(width(I)):
      if I[i][j] != mostcolor(I) and I[i-1][j] == mostcolor(I):
        k = i
        while k > 0 and I[k-1][j] == mostcolor(I):
          k -= 1
        O = paint(cover(O, {(I[i][j], (i, j))}), {(I[i][j], (k, j))})
  return O
 
16.333333333333332, 11.352317, def fcfefcggheafedebidbgbbaegebaiceh(I):
  objs = objects(I, False, True, True)
  shifted_objs = apply(lambda obj: shift(obj, (-uppermost(obj), 0)), objs)
  O = paint(canvas(mostcolor(I), shape(I)), merge(shifted_objs))
  return O
 
19.333333333333332, 23.621077, def deaieghajedfebcfacbaeagfebhabacg(I):
  objs = order(objects(I, F, F, T), uppermost)
  shifted_objs = apply(lambda obj: shift(obj, (height(objs) - uppermost(obj) - 1, 0)), objs)
  O = paint(I, merge(shifted_objs))
  return O
 
18.666666666666668, 10.623054, def jdidcfbdfefjegfdajaddibhhdjjcicf(I):
    objs = objects(I, False, False, True)
    h = height(I)
    moved_objs = apply(lambda obj: shift(obj, (h - uppermost(obj) - height(obj), leftmost(obj))), objs)
    O = paint(I, merge(moved_objs))
    return O
 
20.0, 16.50223, def aefhaacfeadeegdejcbbejbdfieedecg(I):
    objs = order(objects(I, False, False, True), uppermost)
    canvas_height = height(I)
    relocated_objs = []
    y_offset = 0
    for obj in objs:
        obj_height = height(obj)
        relocated_objs.append(shift(obj, (canvas_height - y_offset - obj_height, 0)))
        y_offset += obj_height
    O = paint(I, merge(relocated_objs))
    return O
 
18.0, 16.313265, def deeacbhijbdfeacfbaeicdefhfeeeegb(I):
    objs = objects(I, F, F, T)
    O = I
    for i, obj in enumerate(order(objs, uppermost)):
        O = paint(O, shift(obj, (len(objs) - i - 1, 0)))
    return O
 
18.666666666666668, 23.46612, def ddbeffbhedajehacigbfcbfbiddjgdej(I):
  # Identify non-background objects
  objs = objects(I, False, False, True)

  # Calculate the center of mass for all objects combined
  objs_center_mass_j = centerofmass(merge(apply(toindices, objs)))[1]

  def transform_object(obj):
    # Calculate horizontal offset for alignment
    offset_j = objs_center_mass_j - centerofmass(obj)[1]
    # Calculate vertical offset for stacking
    offset_i = len(I) - lowermost(obj) - 1
    return shift(obj, (offset_i, offset_j))

  # Shift and paint each object onto the canvas
  return paint(canvas(mostcolor(I), shape(I)), merge(apply(transform_object, objs)))
 
18.666666666666668, 23.876917, def aieaceeagcjeeghfjcgffbjcfcggajbb(I):
  # Identify and process non-background objects
  transformed_objs = []
  objs_center_mass_j = centerofmass(merge(apply(toindices, objects(I, False, False, True))))[1]
  for obj in objects(I, False, False, True):
    # Calculate horizontal offset
    offset_j = objs_center_mass_j - centerofmass(obj)[1]
    # Align object horizontally
    aligned_obj = shift(obj, (0, offset_j))
    # Calculate vertical offset for stacking
    offset_i = len(I) - lowermost(aligned_obj) - 1
    # Stack object vertically
    stacked_obj = shift(aligned_obj, (offset_i, 0))
    transformed_objs.append(stacked_obj)
  
  # Combine transformed objects onto the canvas
  return paint(canvas(mostcolor(I), shape(I)), merge(transformed_objs))
 
13.0, 8.079454, def gfdeieadheigeedjaiehigfbiaiciedi(I):
  objs = objects(I, True, False, True)
  O = I
  for color in sorted(palette(I) - {mostcolor(I)}):
    for obj in sizefilter(colorfilter(objs, color), size(colorfilter(objs, color))):
      O = move(O, obj, (-(color - 1) * height(obj), (color - 1) * width(obj)))
  return O
 
18.333333333333332, 12.755773, def difagfacjefdefdebgbbabaidbaibafi(I):
  O = canvas(mostcolor(I), shape(I))
  for obj in sorted(objects(I, True, False, True), key=lambda obj: color(obj)):
    O = underpaint(O, shift(obj, (-color(obj) + 1, color(obj) - 1)))
  return O
 
18.666666666666668, 13.1474085, def bebdbahbcdbbejggjihddbcbjbcdbdie(I):
  O = I
  for color in palette(I) - {mostcolor(I)}:
    O = move(O, recolor(color, ofcolor(I, color)), (-(color - 1), color - 1))
  return O
 
18.333333333333332, 20.321068, def feccjcbfeafjebejbiafaedcbafebebc(I):
  objs = objects(I, T, F, T) 
  h = height(I)
  w = width(I)
  bg = mostcolor(I)
  O = canvas(bg, (h, w))
  y_offset = h - 1
  for obj in sorted(objs, key=lambda obj: leftmost(obj)):
    obj_h = height(obj)
    O = paint(O, shift(obj, (y_offset - obj_h + 1, 0)))
    y_offset -= obj_h
  return O
 
18.666666666666668, 20.803547, def cgchcdaacccdebebiheidhidcbbeijhc(I):
  objs = objects(I, T, F, T)
  bottom = [(i, j) for i in range(height(I)) for j in range(width(I)) if i >= height(I) - len(objs)]
  O = fill(I, mostcolor(I), asindices(I))
  for i, obj in enumerate(sorted(objs, key=lambda x: leftmost(x))):
    O = paint(O, shift(obj, subtract(first(bottom), ulcorner(obj))))
    bottom = remove(first(bottom), bottom)
  return O
 
17.0, 24.085943, def aedfdfbdacffedcdjcejfabafbdgjchf(I):
  objects_list = sorted(objects(I, T, F, T), key=lambda x: -leftmost(x))
  bg = mostcolor(I)
  output = canvas(bg, shape(I))
  current_h = height(I)
  for obj in objects_list:
    h = height(obj)
    output = paint(output, shift(obj, (current_h - h, 0)))
    current_h -= h
  return output
 
18.666666666666668, 18.586864, def cihbcbgfbfadeiicaicaceadjebeeccd(I):
  O = canvas(mostcolor(I), shape(I))
  for j in range(width(I)):
    column = [(i, I[i][j]) for i in range(height(I)) if I[i][j] != mostcolor(I)]
    shifted_column = [(i - uppermost(column), v) for i, v in column]
    for i, v in shifted_column:
      if 0 <= i < height(I):
        O = paint(O, {(v, (i, j))})
  return O
 
12.0, 7.874558, def dbefefjijadgefifiaghdabfabfegbbe(I):
  O = canvas(mostcolor(I), shape(I))
  for i in range(height(I)-1, -1, -1):
    for j in range(width(I)):
      if I[i][j] != mostcolor(I):
        O = paint(O, {(I[i][j], (i, j))})
  return O
 
18.0, 13.064599, def dihaheghdjbgeeddihecfjgebiidcgic(I):
  O = I
  h, w = len(I), len(I[0])
  for i in range(h):
    for j in range(w):
      if I[i][j] != mostcolor(I):
        obj = toobject(frozenset({(i,j)}), I)
        ii, jj = i, j
        while ii < h-1 and jj < w-1 and I[ii+1][jj+1] == mostcolor(I):
          ii += 1
          jj += 1
        O = move(O, obj, (ii-i, jj-j))
  return O 
 
14.666666666666666, 9.936859, def jefbbaadbefbefacacidfjicaeafbecj(I):
  objs = objects(I, T, F, T)
  O = canvas(mostcolor(I), shape(I))
  for obj in objs:
    shifted_obj = obj
    for _ in range(max(height(I), width(I))):
      next_obj = shift(shifted_obj, (1, 1))
      if all(0 <= i < height(I) and 0 <= j < width(I) and index(I, (i, j)) == mostcolor(I) for v, (i, j) in next_obj):
        shifted_obj = next_obj
      else:
        break
    O = paint(O, shifted_obj)
  return O
 
16.333333333333332, 34.423363, def agcjjeeeacjhechbbcjadbbjaeciffbh(I):
  O = I
  objs = objects(I, T, F, T)
  for obj in objs:
    O = cover(O, obj)
    down_shift = min(height(I) - uppermost(obj) - height(obj), width(I) - leftmost(obj) - width(obj))
    O = paint(O, shift(obj, (down_shift, down_shift)))
  return O
 
19.666666666666668, 17.473974, def gdjiafedhdeeecifbbddefgceaigfdad(I):
  objs = objects(I, T, F, T)
  O = I
  for obj in objs:
    if len(obj) > 1:
      offset = (height(I) - lowermost(obj) - 1, 0)
      O = move(O, obj, offset)
  return O
 
14.666666666666666, 11.141514, def beideebaaeaceeebiccdechdceaeddbe(I):
  objs = sorted(objects(I, T, F, T), key=lambda obj: -len(obj))
  O = I
  for obj in objs:
    if len(obj) > 1:
      target_row = max([lowermost(obj) for obj in objs if len(obj) > 1])
      target_pos = (target_row - height(obj) + 1, leftmost(obj))
      O = paint(cover(O, obj), shift(obj, subtract(target_pos, ulcorner(obj)))) 
  return O
 
16.0, 41.70563, def feficfgcafbhebcfjijdbhhcfccjgbdf(I):
  objs = objects(I, T, F, T)
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  for obj in objs:
    if len(obj) > 1:
      offset = (height(I) - lowermost(obj) - 1, leftmost(obj))
      O = paint(O, shift(obj, offset))
  return O
 
18.666666666666668, 21.579233, def fagchdhfffafeejbjccddddbfabcaahg(I):
  O = canvas(mostcolor(I), shape(I))
  for i in range(height(I)-1, -1, -1):
    for j in range(width(I)-1, -1, -1):
      if I[i][j] != mostcolor(I):
        k = i
        while k < height(I)-1 and I[k+1][j] == mostcolor(I):
          k += 1
        O = paint(O, {(I[i][j], (k, j))})
  return O
 
17.666666666666668, 7.4289494, def dcffcfeebhjgegjfjaaibcbaeacbcife(I):
  O = I
  for i in range(height(I) - 1):
    for j in range(width(I)):
      if I[i][j] != mostcolor(I) and I[i+1][j] == mostcolor(I):
        obj = extract(objects(I, False, True, True), lambda x: (i, j) in toindices(x))
        O = paint(cover(O, obj), shift(obj, (1, 0)))
  return O
 
11.666666666666666, 35.056602, def hifjfdceddabeddbbcjdfabgejacgddh(I):
  objs = objects(I, False, False, True)

  def place_obj(acc, obj_data):
    i, obj = obj_data
    h = height(obj)
    w = width(I)
    offset = (len(I) - (i + 1) * h, (w - width(obj)) // 2)
    return paint(acc, shift(obj, offset))

  return reduce(place_obj, enumerate(objs), canvas(mostcolor(I), shape(I)))
 
12.666666666666666, 53.00042, def gegfdabebbbeefbejbjbafgeggfadcde(I):
  O = canvas(mostcolor(I), shape(I))
  for c in palette(I) - {mostcolor(I)}:
    for obj in sizefilter(colorfilter(objects(I, T, F, T), c), size(colorfilter(objects(I, T, F, T), c))):
      O = move(O, obj, (c, c))
  return O
 
19.333333333333332, 20.025019, def hfccafidajfbehddjjbdagcccbfdcjfa(I):
    objs = objects(I, T, F, T)
    h, w = shape(I)
    O = canvas(mostcolor(I), (h, w))
    for obj in objs:
        c = color(obj)
        new_obj = shift(obj, (c % h, c % w))
        O = paint(O, new_obj)
    return O
 
17.0, 32.64945, def cffafiffihjdefgdjaecghcbeacacebf(I):
    O = I
    for c in palette(I) - {mostcolor(I)}:
        objs = colorfilter(objects(I, T, F, T), c)
        for obj in objs:
            O = cover(O, obj)
            O = paint(O, shift(obj, (c, c)))
    return O
 
15.0, 46.04532, def cjhbdhhedijeeegbjddbhedfddeeefba(I):
  O = I
  for obj in objects(I, False, True, True):
    bottom_edge = frozenset((lowermost(obj), j) for j in range(leftmost(obj), rightmost(obj) + 1))
    collision = False
    for k in range(1, height(I)):
      shifted_bottom_edge = shift(bottom_edge, (k, 0))
      for other_obj in objects(O, False, True, True):
        if other_obj != obj and len(intersection(toindices(shifted_bottom_edge), toindices(other_obj))) > 0:
          collision = True
          O = paint(cover(O, obj), shift(obj, (k - 1, 0)))
          break
      if collision:
        break
    if not collision:
      O = paint(cover(O, obj), shift(obj, (height(I) - 1 - uppermost(obj), 0)))
  return O
 
31.333333333333332, 18.819199, def ddfbgcfcjiiceiffadjbajffgdddhcij(I):
  O = canvas(mostcolor(I), shape(I))
  occupied = set()
  for i in range(height(I) - 1, -1, -1):
    for j in range(width(I)):
      if I[i][j] != mostcolor(I) and (i + 1, j) not in occupied:
        obj = extract(objects(I, False, True, True), lambda x: (i, j) in toindices(x))
        shifted_obj = obj
        k = 1
        while k < height(I) and (i + k, j) not in occupied:
          shifted_obj = shift(obj, (k, 0))
          k += 1
        O = paint(O, shifted_obj)
        occupied.update(toindices(shifted_obj))
  return O
 
18.666666666666668, 26.954184, def abfadcfacaeaecaebejdaajcajafeecb(I):
  # Identify non-background objects and their original row positions
  objs_with_rows = [(i, obj) for i, obj in enumerate(objects(I, False, False, True))]

  def place_object(data):
    # Unpack data
    i, obj = data
    # Calculate the vertical offset for bottom alignment
    offset_i = len(I) - (len(objs_with_rows) - i) * height(obj)
    # Calculate the horizontal offset for centering
    offset_j = width(I) // 2 - centerofmass(obj)[1]
    # Return the shifted object
    return shift(obj, (offset_i, offset_j))

  # Place each object based on its original position and centering
  return paint(canvas(mostcolor(I), shape(I)), merge(apply(place_object, objs_with_rows)))
 
19.333333333333332, 19.579498, def dghcbgjhehjdeabfjebgfhheaaeiccjc(I):
  return paint(
    canvas(mostcolor(I), shape(I)),
    merge(
      apply(
        lambda obj: shift(obj, (color(obj), color(obj))), 
        objects(I, T, F, T)
      )
    )
  )
 
21.333333333333332, 11.894879, def djbafbcbgddbedbfacfbcbifiedejdai(I):
  h, w = shape(I)
  O = canvas(mostcolor(I), (h, w))
  for obj in objects(I, T, F, T):
    c = color(obj)
    for v, (i, j) in obj:
      O = paint(O, {(v, ((i + c) % h, (j + c) % w))})
  return O
 
32.0, 11.032186, def eaigibgghfbdejejbabihdiedgcaccdi(I):
  O = canvas(mostcolor(I), shape(I))
  for j in range(width(I)):
    column = tuple(I[i][j] for i in range(height(I)))
    for i in range(len(column) - 1, 0, -1):
      if column[i] == mostcolor(I) and column[i-1] != mostcolor(I):
        obj = extract(objects(I, False, True, True), lambda x: (i-1, j) in toindices(x))
        O = paint(O, shift(obj, (i - uppermost(obj), 0)))
  return O
 
18.0, 7.4498177, def abjfhahaidjdebiciecccfibdgcffbdd(I):
  O = I
  for obj in objects(I, False, True, True):
    bottom_edge = lowermost(obj)
    while bottom_edge < height(I) - 1 and index(I, (bottom_edge + 1, leftmost(obj))) == mostcolor(I):
      O = paint(cover(O, obj), shift(obj, (1, 0)))
      bottom_edge += 1
  return O
 
19.333333333333332, 19.735277, def jbhaecjjahfhefdjjccacehedjfjgfjj(I):
    return paint(
        canvas(mostcolor(I), shape(I)),
        frozenset(
            (v, add((i, j), (c, c)))
            for obj in objects(I, T, F, T)
            for c in repeat(color(obj), len(obj))
            for (v, (i, j)) in obj
        )
    )
 
21.0, 18.527266, def jbabbbcccchgefefbjjhajcbbefdeddf(I):
  O = I
  for x in range(width(I)):
    column = frozenset((I[i][x], (i, x)) for i in range(height(I)) if I[i][x] != mostcolor(I))
    if column:
      O = paint(cover(O, column), shift(column, (height(I) - lowermost(column) - 1, 0)))
  return O
 
15.0, 42.926285, def aahdffidjfafefcfjjbaefhdiagfcadi(I):
  objs = objects(I, False, False, True)
  canvas_height = height(I)
  grid_center_j = width(I) // 2

  def stack_and_center(obj):
    i = sorted(objs, key=lambda o: uppermost(o)).index(obj)
    offset_i = canvas_height - (len(objs) - i) * height(obj)
    offset_j = grid_center_j - centerofmass(obj)[1]
    return shift(obj, (offset_i, offset_j))

  stacked_objs = apply(stack_and_center, objs)
  return paint(canvas(mostcolor(I), shape(I)), merge(stacked_objs))
 
14.333333333333334, 15.541444, def ijgdjfhcjeciedcaabaciagccefdcffg(I):
  objs = objects(I, T, F, T)
  O = canvas(ZERO, shape(I))
  for obj in objs:
    c = color(obj)
    if c == ONE:
      O = paint(O, shift(obj,(TWO, ONE)))
    elif c == THREE:
      O = paint(O, shift(obj, (FIVE, TWO)))
    else:
      O = paint(O, obj)
  return O
 
14.333333333333334, 9.728609, def bfafhhgcdbibefdcjbcdjgagcdcbafcc(I):
  O = I
  for color in palette(I) - {ZERO}:
    obj = first(colorfilter(objects(I, T, F, T), color))
    if color == ONE:
      O = move(O, obj, (TWO, ONE))
    elif color == THREE:
      O = move(O, obj, (FIVE, TWO))
  return O
 
15.0, 22.908585, def iggdabfafjadeijhicgdbdbgidjdgiif(I):
  objs = objects(I, T, F, T)
  O = I
  for obj in objs:
    h, w = shape(obj)
    if h == ONE and w >= TWO:
      O = move(O, obj, (TWO, ONE))
    elif h == ONE and w == ONE:
      O = move(O, obj, (FIVE, TWO))
  return O
 
14.0, 49.21883, def heceeihhhfdaecfficfgfahebdgigbee(I):
  O = I
  for obj in objects(I, False, True, True):
    for i in range(height(I) - 1, -1, -1):
      shifted_obj = shift(obj, (i, 0))
      if all(index(I, (i, j)) == mostcolor(I) for v, (i, j) in shifted_obj if 0 <= i < height(I) and 0 <= j < width(I)):
        O = paint(cover(O, obj), shifted_obj)
        break
  return O
 
15.0, 11.592736, def iedfhffafafaefcfibddfejgibjcdfei(I):
  O = I
  bottom_edge = frozenset((height(I) - 1, j) for j in range(width(I)))
  for obj in objects(I, False, True, True):
    O = paint(cover(O, obj), shift(obj, gravitate(obj, bottom_edge)))
  return O
 
12.666666666666666, 55.199856, def chhhadecaebfebbejcicfagicacffeif(I):
  O = canvas(mostcolor(I), shape(I))
  for obj in objects(I, False, True, True):
    for i in range(height(I) - 1, -1, -1):
      shifted_obj = shift(obj, (i, 0))
      if not any(intersection(toindices(shifted_obj), toindices(f)) for f in frontiers(O)):
        O = paint(O, shifted_obj)
        break
  return O
 
17.0, 19.11502, def cheeadacbjbfedehifdbbciffjabchae(I):
  objs = objects(I, False, False, True)
  
  def transform_obj(obj):
    # Find the leftmost column index of the object
    min_j = leftmost(obj)
    # Shift the object to the leftmost position
    return shift(obj, (0, -min_j))

  transformed_objs = apply(transform_obj, objs)
  return paint(canvas(mostcolor(I), shape(I)), merge(transformed_objs))
 
18.666666666666668, 19.117393, def hecbadfibfeeedcfibbffbacicabhiab(I):
  rows = tuple(tuple(v for v in r) for r in I)
  transformed_rows = apply(
      lambda row: (
          tuple(v for v in row if v != mostcolor(I)) + tuple(mostcolor(I) for _ in range(len(row) - len(tuple(v for v in row if v != mostcolor(I)))))
      ),
      rows
  )
  return transformed_rows
 
15.0, 20.293417, def abgabajbjcdceihaaebfjegebiibfbcd(I):
  O = I
  for v in palette(I) - {mostcolor(I)}:
    obj = toobject(ofcolor(I, v), I)
    if v == ONE:
      O = move(O, obj, (TWO, TWO))
    elif v == THREE:
      O = move(O, obj, (SIX, ONE))
  return O
 
13.0, 28.380268, def bcbbdhdcfhceebaeajeechijejfbfeja(I):
  move_dict = {ONE: (TWO, TWO), THREE: (SIX, ONE)}
  O = I
  for obj in objects(I, T, F, T):
    v = color(obj)
    if v in move_dict:
      O = move(O, obj, move_dict[v])
  return O
 
21.0, 15.541275, def bajcgafijbhcecchbecabehadgfeiaib(grid):
  objs = order(objects(grid, False, True, True), lambda obj: uppermost(obj))
  transformed = canvas(mostcolor(grid), shape(grid))
  y = height(grid)
  for obj in objs:
    transformed = paint(transformed, shift(obj, (y - height(obj), 0)))
    y -= height(obj)
  return transformed
 
18.0, 16.771461, def ccifabhgaffcecbeagebfiaibgbcdfdf(I):
  mirrored_grid = dmirror(I)
  objs = objects(mirrored_grid, False, False, True)
  shifted_objs = merge(apply(lambda obj: shift(obj, (0, -leftmost(obj))), objs))
  return paint(canvas(mostcolor(I), shape(I)), shifted_objs)
 
22.0, 7.1806507, def acfbabbcddbfeebajcdfididfheaeaaa(I):
  return dmirror(hconcat(compress(dmirror(I)), canvas(mostcolor(I), (height(I), width(I) - width(compress(dmirror(I)))))))
 
16.0, 24.611748, def dedjbeafeafdehjhjbdcjdadifbcjchf(I):
  return paint(canvas(mostcolor(I), shape(I)), merge(apply(lambda obj: shift(obj, (-uppermost(obj), -leftmost(obj))), objects(dmirror(I), False, False, True))))
 
21.333333333333332, 6.8355684, def dfjaicafgacjeaeeicajaebbaheegcde(I):
  return rot270(hconcat(compress(rot90(I)), canvas(mostcolor(I), (width(I), height(I) - width(compress(rot90(I)))))))
 
17.666666666666668, 26.751663, def dbbeceijdidjejhjigfiabegdcdcbedf(I):
  objs = objects(I, False, False, True)
  return paint(canvas(mostcolor(I), shape(I)), merge(apply(lambda obj: recolor(color(obj), shift(toindices(dmirror(toobject(toindices(obj), I))), (-uppermost(obj), -leftmost(obj)))), objs)))
 
12.333333333333334, 27.921717, def cecfdjcbdbbgejejidafafbiddagecec(I):
  objs = objects(I, T, F, T)
  O = I
  for obj in objs:
    if color(obj) == ONE:
      O = move(O, obj, (FIVE, TWO))
    elif color(obj) == THREE:
      O = move(O, obj, (SIX, ONE))
  return O 
 
11.0, 21.866634, def abgbcfdffceaeiebbgafdbcaadcaihde(I):
  return paint(
      paint(
          cover(I, ofcolor(I, ONE)), 
          shift(recolor(ONE, ofcolor(I, ONE)), (FIVE, TWO))
      ),
      shift(recolor(THREE, ofcolor(I, THREE)), (SIX, ONE))
  )
 
30.333333333333332, 11.029905, def dicgacddjaadefdhaeidecacgfchjfcj(grid):
  """
  Iterates through each column from right to left. 
  Moves non-background objects in each column to the leftmost available position.
  """
  transformed = canvas(mostcolor(grid), shape(grid))
  for j in range(width(grid) - 1, -1, -1):
    for i in range(height(grid)):
      if grid[i][j] != mostcolor(grid):
        obj = extract(objects(grid, False, True, True), lambda x: (i, j) in toindices(x))
        leftmost_empty = next((k for k in range(j) if transformed[i][k] == mostcolor(grid)), 0)
        transformed = paint(transformed, shift(obj, (0, leftmost_empty - j))) 
  return transformed
 
16.0, 12.283866, def dejidjiiefgbeeiejcefiabfhaidbdfd(grid):
  """
  Collects all non-background objects and their upper-left corner positions.
  Sorts objects based on their column indices.
  Paints objects onto a blank canvas from left to right, respecting their order.
  """
  objs = [(ulcorner(obj)[1], obj) for obj in objects(grid, False, True, True)]
  objs.sort(key=lambda x: x[0])
  transformed = canvas(mostcolor(grid), shape(grid))
  current_j = 0
  for j, obj in objs:
    transformed = paint(transformed, shift(obj, (0, current_j - j)))
    current_j += width(obj)
  return transformed
 
14.333333333333334, 48.94859, def ebcfjhcbecabecedibiabhfabccffbfi(grid):
  """
  Recursively moves the rightmost non-background object to the leftmost empty position.
  Repeats until no more objects can be moved.
  """
  def move_rightmost(g):
    for j in range(width(g) - 1, -1, -1):
      for i in range(height(g)):
        if g[i][j] != mostcolor(g):
          obj = extract(objects(g, False, True, True), lambda x: (i, j) in toindices(x))
          leftmost_empty = next((k for k in range(j) if g[i][k] == mostcolor(g)), 0)
          return paint(cover(g, obj), shift(obj, (0, leftmost_empty - j)))
    return g
  
  transformed = grid
  while transformed != move_rightmost(transformed):
    transformed = move_rightmost(transformed)
  return transformed
 
