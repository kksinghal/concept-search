11.0, 1.4641705, def aajfffaaddjfedcbiijfccacbedajefb(I):
  target_color = leastcolor(I)  # Find the least common color in the grid
  objs = objects(I, True, True, True)  # Extract all objects
  target_obj = extract(objs, lambda obj: color(obj) == target_color) # Find the object with the least common color
  O = fill(I, 8, target_obj) # Recolor the target object to 8
  return O
 
17.0, 3.4897141, def fejcffiebeheeifejfciaahaabdbbafi(I):
  objs = fgpartition(I)  # Partition the grid into objects, excluding background
  target_obj = min(objs, key=len) # Find the smallest object
  O = fill(I, 8, target_obj)
  return O 
 
9.75, 1.3665785, def ifgccfcahjigecbibjbbdfdegfbdfcjf(I):
    x1 = objects(I, T, F, T) # Identify all objects in the grid
    x2 = argmax(x1, size) # Find the largest object
    x3 = argmin(x1, size) # Find the smallest object
    x4 = recolor(EIGHT, x2) # Recolor the largest object to '8'
    x5 = recolor(ONE, x3) # Recolor the smallest object to '1'
    O = paint(paint(I, x4), x5) # Paint the recolored objects onto a copy of the input grid
    return O
 
17.0, 3.4897141, def ejcfgaedajjjedcbbhecaedgdcbjfgeh(I):
  O = replace(I, 1, 8)
  return O
 
11.0, 1.4641705, def ieihafdjgcieedeejfdgjeecegbeebgh(I):
    objs = objects(I, univalued=True, diagonal=False, without_bg=True)
    target_obj = extract(objs, lambda obj: color(obj) == 1 and len(obj) > 1)
    O = paint(I, recolor(8, target_obj)) 
    return O
 
13.25, 2.4891293, def cdfgcbgbjfcceebcjgfadafcdaecefif(I):
    indices = ofcolor(I, 1)
    if portrait(indices) or len(indices) == 1: 
        O = I
    else:
        O = fill(I, 8, indices)
    return O
 
20.5, 6.3505588, def cbidcahbjaeaeeeciaddddjfiidcigha(I):
    h, w = len(I), len(I[0])
    O = list(list(row) for row in I)
    for i in range(h):
        for j in range(w):
            if I[i][j] == 1 and i == j: # Check for diagonal and value '1'
                O[i][j] = 8
    return tuple(tuple(row) for row in O)
 
17.0, 3.4897141, def cjadcgibdfcfefbfjbdbaidceafdbdci(I):
  # Identify all objects in the input grid
  x1 = fgpartition(I)
  # Recolor objects, excluding the background
  O = paint(I, mfilter(apply(lambda x: recolor(8, x), x1), lambda obj: color(obj) != mostcolor(I))) 
  return O
 
39.5, 67.03383, def jeafbbggfjdbejffaaccffajjeebdaaa(I):
  # Generate a grid filled with 8s
  temp = canvas(8, shape(I))
  # Combine with the input grid, prioritizing the background color
  O = cellwise(temp, I, mostcolor(I))
  return O
 
132.25, 5.9699197, def eafedcbddedeeihfaefhfdabccijbggi(I):
  bg = mostcolor(I)  # Identify the background color
  O = replace(I, bg, 8)  # Replace all background pixels with 8
  return O
 
11.25, 1.5700674, def fecffgdbfjbaeiidadaiafddfbbgfjbb(I):
    objs = objects(I, True, False, True)  # Find connected components, excluding background
    inner_objs = sfilter(objs, lambda obj: not bordering(toindices(obj), I)) # Filter for objects not touching the border
    inner_indices = mapply(toindices, inner_objs) # Get indices of all inner objects
    O = fill(I, 8, inner_indices) # Replace '1's within inner objects with '8'
    return O
 
97.25, 29.346027, def ghedcgehecfceeceiabihdfcdefihchf(I):
    h, w = len(I), len(I[0])
    border =  frozenset((i, j) for i in range(h) for j in range(w) if i == 0 or i == h - 1 or j == 0 or j == w - 1) # Define the border indices
    inner_indices = asindices(I) - border # Find indices not on the border
    O = fill(replace(I, 1, 8), 1, inner_indices) # Replace all '1's with '8', then restore '1's on the inner indices 
    return O
 
14.5, 2.800191, def aefeedafbchfedcdbccdjjdfibcaabce(I):
  O = replace(I, 1, 8) # Replace all '1's with '8'
  h, w = len(I), len(I[0])
  for i in range(h):
    for j in range(w):
      if (i == 0 or i == h - 1 or j == 0 or j == w - 1) and I[i][j] == 1: # Check for '1's on the border in the original input
        O = fill(O, 1, {(i, j)}) # Restore '1's on the border 
  return O
 
21.25, 6.4249554, def eaacfcahhdgcebdjbafddbdbfbacjffc(I):
    objs = objects(I, True, False, False) # Find all connected components, including background
    border_obj = argmax(objs, size) # Find the largest object, which represents the background and border
    inner_objs = difference(objs, {border_obj}) # Exclude the border object
    inner_indices = mapply(toindices, inner_objs) # Get indices of all inner objects
    O = fill(I, 8, inner_indices) # Replace '1's within inner objects with '8'
    return O
 
25.5, 2.712888, def bhchfcidcfbbegidajddfafffcggggff(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  target_obj = argmax(objs, lambda obj: lrcorner(obj)[0]+lrcorner(obj)[1]) # Select furthest object based on bottom-right corner sum
  O = paint(I, recolor(8, target_obj))
  return O
 
22.25, 7.0655127, def feebadchajfdecfhbeedagabgfihefbj(I):
  objs = objects(I, True, False, True) # Identify connected components excluding background
  modified_objs = sfilter(objs, lambda obj: size(obj) > 1) # Filter for objects with more than one cell
  inner_cells = mapply(lambda obj: difference(toindices(obj), box(obj)), modified_objs)  # Get indices of inner cells by subtracting the box indices from object indices
  O = fill(I, 8, inner_cells)  # Fill inner cells with value 8
  return O
 
22.5, 4.380143, def bcidaicfedidefgajaaaabiddebfdabj(I):
  objs = objects(I, True, False, True)
  inner_cells = frozenset({cell for obj in objs for cell in obj if all(index(I, n) != 9 for n in dneighbors(cell[1])) and size(obj) > 1}) # Use set comprehension for filtering
  O = paint(I, inner_cells)  # Use paint to directly modify the grid with identified cells
  return O
 
22.75, 3.0646129, def bbjcjhddfifdechcbjaabfhdeaaiabjd(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  for obj in objs:
    furthest_cell = argmax(toindices(obj), lambda cell: cell[0]**2 + cell[1]**2)  
    O = paint(fill(I, 8, obj), {(color(obj), furthest_cell)})
  return O
 
16.5, 3.164207, def djdbafabadbcegccbecacjcjcccbchda(I):
  indices = ofcolor(I, 1)
  if size(indices) == 1: # Handle the single cell case
    return I
  furthest_cell = argmax(toindices(indices), lambda cell: cell[0]**2 + cell[1]**2)
  O = paint(fill(I, 8, indices), {(1, furthest_cell)})  
  return O
 
16.75, 3.4579906, def afdfibbjehdeeffiicehiabhdgjedafd(I):
  target_color = leastcolor(I)
  O = I
  for i, row in enumerate(I):
    for j, value in enumerate(row):
      if value == target_color and any((i+di, j+dj) in ofcolor(I, target_color) for di, dj in ((-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1))):
        O = fill(O, 8, {(i, j)})
  return O
 
23.5, 27.005539, def cgfhfecfcdacehbeibcccddaaifbcecd(I):
    objs = objects(I, T, F, T)
    O = canvas(mostcolor(I), shape(I)) # Create a blank canvas with background color
    O = paint(O, recolor(EIGHT, argmax(objs, size))) # Paint largest object on canvas
    O = paint(O, recolor(ONE, argmin(objs, size))) # Paint smallest object on canvas
    return O
 
23.25, 5.0551662, def acbfgccfgdadegbcbfjfbfgihjgidhid(I):
  O = I
  for i in range(1, len(I)-1):
    for j in range(1, len(I[0])-1):
      if I[i][j] == 1 and all(I[i+di][j+dj] != 9 for di, dj in [(0,1),(0,-1),(1,0),(-1,0)]):
        O = fill(O, 8, {(i,j)})
  return O
 
9.75, 1.3665785, def bffhcgecbgfbegfbacegfjidddiddfgb(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  target_obj = argmax(objs, size)  # Select the largest object 
  O = paint(I, recolor(8, target_obj))
  return O
 
25.75, 3.4444416, def igicfhjjccifefecjdfbeichbbfgibja(I):
  objs = objects(I, True, True, True)  # Extract all objects 
  min_size = valmin(objs, size) # Find the size of the smallest object
  smallest_objs = sfilter(objs, lambda obj: size(obj) == min_size) # Filter for objects with the smallest size
  O = I
  for obj in smallest_objs:
    O = paint(O, recolor(8, obj))  # Recolor the target objects to 8
  return O 
 
25.0, 8.259912, def eceefjdbajebeechagcjjjjafegdcdaf(I):
  objs = objects(I, True, False, True)
  inner_objs = [obj for obj in objs if all(0 not in index for index in toindices(obj))]
  return paint(fill(I, 9, asindices(I)), merge(inner_objs))
 
39.5, 67.03383, def ahajaidfeeddefjfijcbbiibgaddbaih(I):
  h, w = len(I), len(I[0])
  O = canvas(9, (h, w))
  for i in range(1, h-1):
    for j in range(1, w-1):
      if I[i][j] == 1 and all(I[k][l] != 9 for k in range(max(0, i-1), min(h, i+2)) for l in range(max(0, j-1), min(w, j+2))):
        O = fill(O, 8, {(i,j)})
  return O 
 
26.0, 3.043147, def ijffdafcdbageaaficcifehicgbdjaff(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  target_obj = argmax(objs, lambda obj: lrcorner(obj)[0] + lrcorner(obj)[1])
  corner_cell = (color(target_obj), lrcorner(target_obj)) 
  recolored_obj = recolor(8, difference(target_obj, {corner_cell}))
  O = paint(I, combine(recolored_obj, {corner_cell}))
  return O
 
30.75, 2.8203392, def dhbfgdfecciheaigbeebbbbfcdegifae(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  target_obj = argmax(objs, lambda obj: lrcorner(obj)[1]) 
  corner_cell = (color(target_obj), lrcorner(target_obj))
  recolored_obj = recolor(8, difference(target_obj, {corner_cell}))
  O = paint(I, combine(recolored_obj, {corner_cell}))
  return O 
 
10.75, 1.8873895, def echeehhdijcaeefcadfhibdhfhbibgab(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  target_obj = argmax(objs, lambda obj: size(obj)) 
  corner_cell = (color(target_obj), lrcorner(target_obj))
  recolored_obj = recolor(8, difference(target_obj, {corner_cell}))
  O = paint(I, combine(recolored_obj, {corner_cell}))
  return O
 
22.5, 4.380143, def ibcifccadbadeeabjgcbefhjeffdaddd(I):
  objs = objects(I, T, T, T) # identify all objects
  top_left_corner = ulcorner(asindices(I))
  bottom_right_corner = lrcorner(asindices(I))
  filtered_objs = sfilter(objs, lambda obj: ulcorner(obj)[1] == top_left_corner or lrcorner(obj)[1] == bottom_right_corner) #filter objects at top-left and bottom-right corners
  recolored_objs = apply(lambda obj: recolor(EIGHT, obj), filtered_objs)  # recolor the filtered objects
  O = I
  for obj in recolored_objs:
    O = paint(O, obj)  # paint the recolored objects onto the original grid
  return O
 
24.5, 3.9846902, def cdjbcdjajidgegefigcadjfcdeajifca(I):
  objs = objects(I, T, T, T)
  size_threshold = 4  # Define a size threshold
  filtered_objs = sfilter(objs, lambda obj: size(obj) <= size_threshold)  # Filter objects smaller than the threshold
  recolored_objs = apply(lambda obj: recolor(EIGHT, obj), filtered_objs)
  O = I
  for obj in recolored_objs:
    O = paint(O, obj)
  return O
 
22.75, 4.2707324, def fdiiddfdidbdecddbbfibddhgfcehahb(I):
  objs = objects(I, T, T, T)
  filtered_objs = sfilter(objs, square)  # Filter for square-shaped objects
  recolored_objs = apply(lambda obj: recolor(EIGHT, obj), filtered_objs)
  O = I
  for obj in recolored_objs:
    O = paint(O, obj)
  return O
 
28.25, 2.7211537, def fbbfdcjceaabeccaahbeiagbjfdeefdi(I):
    objs = objects(I, T, T, T)
    filtered_objs = sfilter(objs, lambda obj: bordering(obj, I)) # filter objects at borders
    recolored_objs = apply(lambda obj: recolor(EIGHT, obj), filtered_objs)  # recolor the filtered objects
    O = I
    for obj in recolored_objs:
      O = paint(O, obj)  # paint the recolored objects onto the original grid
    return O
 
39.5, 3.355759, def chdheefccaaeehidjegbdfhhbfjejacb(I):
    # 1. Identify objects, excluding background
    objs = objects(I, T, F, T) 

    # 2. Sort objects based on their size 
    sorted_objs = order(objs, size)

    # 3. Recolor objects based on their size ranking
    recolored_objs = []
    for i, obj in enumerate(sorted_objs):
        recolored_objs.append(recolor(8 - i, obj)) 

    # 4. Paint the recolored objects back onto the original grid
    O = I
    for obj in recolored_objs:
        O = paint(O, obj)

    return O 
 
94.75, 31.37477, def hjceafedbiddeifaahchbhdaiehbeedb(I):
  def is_border_cell(cell):
    i, j = cell
    return i in (0, len(I)-1) or j in (0, len(I[0])-1)
  all_cells = asindices(I)
  border_cells = sfilter(all_cells, is_border_cell)
  inner_cells = all_cells - border_cells
  O = fill(I, 1, inner_cells)
  return O
 
37.75, 24.133999, def bebdggeaedjcejefbagbeedffaaiadde(I):
  return paint(I, merge(apply(lambda obj: recolor(8 - size(obj), obj), objects(I, T, F, T))))
 
17.25, 2.0004005, def hhbbdbbhegehegacbfiigeddacfbfidd(I):
  return paint(I,  merge(apply(lambda obj: branch(size(obj) > 8, recolor(8, obj), recolor(8 - size(obj), obj)), objects(I, T, F, T))))
 
17.0, 3.4897141, def dacaeafadafaebdfbfbdhcdiebfhfbga(I):
  one_objs = sfilter(partition(I), lambda obj: color(obj) == 1)
  largest_one_obj = argmax(one_objs, len)
  O = I
  for v, (i, j) in largest_one_obj:
    O = fill(O, 8, {(i, j)})
  return O
 
16.0, 3.0351942, def edjeceddaghaecegahjcffahggfghbdi(I):
  # Find all indices of '1's
  ones_indices = ofcolor(I, 1)
  # If there are no '1's, return the original grid.
  if not ones_indices:
    return I
  # Find the rightmost '1' index
  rightmost_index = argmax(ones_indices, lambda loc: loc[1]) 
  # Recolor all '1's to '8's except the one at the target index
  O = replace(I, 1, 8)
  O = fill(O, 1, {rightmost_index}) 
  return O
 
15.5, 2.8260474, def ijhaiebcjbffeebfjgadbeeeacbdiaff(I):
  # Find the column index of the rightmost '1'
  rightmost_col =  maximum(apply(lambda loc: loc[1], ofcolor(I, 1)))
  # Construct a new grid based on the input
  O = tuple(
      tuple(
          8 if (v == 1 and j != rightmost_col) else v
          for j, v in enumerate(row)
      ) for row in I
  )
  return O
 
9.75, 1.3665785, def hbcjfififjdiejefafbbhdcedcbfffaa(I):
  return paint(I, recolor(8, argmax(objects(I, T, F, T), size)))
 
23.25, 3.1152525, def dcdagjecbfbiedfeahedfgjacjecbhee(I):
  objs = objects(I, True, False, True)
  sizes = apply(size, objs)
  largest_obj = list(objs)[list(sizes).index(max(sizes))]
  smallest_obj = list(objs)[list(sizes).index(min(sizes))]
  return paint(paint(I, recolor(EIGHT, largest_obj)), recolor(ONE, smallest_obj))
 
15.25, 6.5687757, def jdbcdjgbeagieabajeheifdbdhbehfih(I):
  all_ones = asobject(I)
  border_ones =  mfilter(objects(I, True, False, False), lambda obj: bordering(toindices(obj), I))
  inner_ones = difference(all_ones, border_ones)
  return paint(I, recolor(8, inner_ones))
 
16.0, 2.8996131, def ehcaeedbbbgcedbcjddbibfefafdeahf(I):
  # Directly modify the grid, iterating row by row from right to left
  O = list(list(row) for row in I)  # Create a mutable copy of the grid
  rightmost_found = False
  for i in range(len(O)):
    for j in range(len(O[0]) - 1, -1, -1):
      if O[i][j] == 1:
        if not rightmost_found:
          rightmost_found = True  # Mark the first (rightmost) '1' as found
        else:
          O[i][j] = 8
  return tuple(tuple(row) for row in O)  # Convert back to immutable tuple
 
18.75, 3.8802297, def cdcahabjjaaceeaebdabebhciggeadah(I):
  # Transpose the grid to process columns as rows
  transposed_grid = rot90(I) 
  # Find the rightmost column containing '1'
  rightmost_col_index = max((j for j in range(len(transposed_grid[0])) 
                         if any(transposed_grid[i][j] == 1 for i in range(len(transposed_grid)))))
  # Replace all '1's with '8's except in the rightmost column containing '1'
  modified_transposed_grid = tuple(
      tuple(8 if cell == 1 and j != rightmost_col_index else cell for j, cell in enumerate(row))
      for row in transposed_grid
  )
  # Rotate back to the original orientation
  O = rot270(modified_transposed_grid) 
  return O
 
16.5, 3.2327707, def affdcgcggcbdeabdjfbhcfdbaijdgcbi(I):
  # Find the rightmost index of '1' in the flattened grid
  flattened_grid = [cell for row in I for cell in row]
  try:
    rightmost_index_flat = len(flattened_grid) - flattened_grid[::-1].index(1) - 1
  except ValueError: # Handle cases where '1' is not present in the grid
    return I
  # Calculate row and column index from the flattened index
  rightmost_row = rightmost_index_flat // len(I[0])
  rightmost_col = rightmost_index_flat % len(I[0])
  # Replace '1's with '8's except for the one at the calculated rightmost index
  O = tuple(
    tuple(8 if cell == 1 and (i, j) != (rightmost_row, rightmost_col) else cell for j, cell in enumerate(row))
    for i, row in enumerate(I)
  )
  return O
 
129.25, 10.818507, def hehaieaededdejgebefcbbihabbfhfja(I):
    objs = difference(objects(I, T, F, F), objects(I, T, T, T)) # Objects connected diagonally
    largest = argmax(objs, size)
    smallest = argmin(objs, size)
    O = I 
    for i, row in enumerate(I):
        for j, val in enumerate(row):
            if (val, (i, j)) in largest:
                O = fill(O, 8, {(i, j)}) # Fill directly without recolor
            if (val, (i, j)) in smallest:
                O = fill(O, 1, {(i, j)})
    return O
 
29.0, 39.930912, def eahfcfefefcaeeiebhdbcccbcedbcdhb(I):
    O = canvas(9, shape(I)) # Create a canvas filled with '9's, matching the input shape
    objs = objects(I, True, False, True) # Extract all objects, excluding the background
    border_objs = sfilter(objs, lambda obj: bordering(toindices(obj), I)) # Identify border objects
    for obj in border_objs:
        O = paint(O, obj) # Paint the border objects from the input onto the canvas
    return O
 
29.5, 7.7243834, def ddbfgfbdhbeeeeeaijfdeaeiajafedbe(I):
  largest_obj = argmax(objects(I, T, F, T), size)
  bottom = lowermost(largest_obj)
  extension = frozenset((i, j) for i in range(bottom+1, len(I)) for j in range(leftmost(largest_obj), rightmost(largest_obj)+1))
  return paint(I, recolor(8, largest_obj | toobject(extension, I)))
 
37.0, 10.311748, def hchaadjfeageehjgaabjcagcgaececbh(I):
  obj = argmax(objects(I, T, F, T), size)
  w = width(obj)
  return paint(I, recolor(8, frozenset((i,j) for i in range(uppermost(obj), len(I)) for j in range(leftmost(obj), leftmost(obj) + w)))) 
 
17.25, 6.9383698, def ahbbdidjefaeedbhidhfdjehhahbehbe(I):
  largest_obj = argmax(objects(I, T, F, T), size)
  return paint(I, recolor(8, toobject(frozenset((i, j) for i in range(len(I)) for j in range(leftmost(largest_obj), rightmost(largest_obj) + 1) if (i,j) in backdrop(largest_obj)), I)))
 
13.75, 2.6656766, def acdaeebhjcgbeeffbbfbeebdcbeddfeh(I):
    # 1. Identify all objects
    objs = objects(I, univalued=True, diagonal=False, without_bg=True) 
    # 2. Find the largest object
    largest_obj = argmax(objs, size) 
    # 3. Find objects with color '1' that are not the smallest
    target_objs = sfilter(objs, lambda obj: color(obj) == 1 and obj != argmin(objs, size))
    # 4. Combine the largest object and target objects
    objs_to_recolor = combine(frozenset({largest_obj}), target_objs)
    # 5. Recolor and paint
    O = paint(I, recolor(8, merge(objs_to_recolor))) 
    return O
 
17.0, 3.4897141, def dhabiabfcccdececiefdcdabbbdbgcbj(I):
    # 1. Find the largest object
    x1 = argmax(objects(I, T, F, T), size)
    # 2. Recolor the largest object to '8'
    x2 = recolor(EIGHT, x1) 
    # 3. Replace all '1's with '8' 
    x3 = replace(I, ONE, EIGHT)
    # 4. Paint the recolored largest object onto the grid with replaced '1's
    O = paint(x3, x2)
    return O
 
9.75, 1.3665785, def adeijfcdbaedehbhijcgceajgegdbeaf(I):
  objs = objects(I, True, False, True) # Extract non-background connected objects.
  inner_objs = sfilter(objs, lambda obj: not bordering(toindices(obj), I)) # Filter for non-bordering objects.
  largest_obj = argmax(inner_objs, size)  # Find the largest non-bordering object.
  O = fill(I, 8, toindices(largest_obj)) # Recolor the largest object to 8.
  return O
 
15.5, 1.581333, def ceiaffedicebeaabibdfbdighicbgdbc(I):
  objs = objects(I, True, False, True)  # Get non-background objects.
  inner_objs = []
  for obj in objs:
    if all(0 <= i < len(I) and 0 <= j < len(I[0]) and I[i][j] == 9 for i, j in outbox(toindices(obj))):
      inner_objs.append(obj)  # Add object if its outbox is within the grid and filled with 9s.
  O = fill(I, 8, toindices(argmax(inner_objs, size)))  # Recolor the largest inner object to 8.
  return O
 
16.25, 2.8900168, def bfbacidfdefceghbafecgdjeffefheed(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  return paint(I, merge(apply(lambda obj: recolor(8, difference(obj, {(1, lrcorner(obj))})), objs))) 
 
22.5, 4.380143, def cffbdaebiagfecfbiffahaaiaiaedjjd(I):
  O = replace(I, 1, 8)
  O = replace(O, 8, 1)
  return O 
 
17.0, 3.4897141, def ajffdaiacbaeehchbefcjfccbfaiicdd(I):
  O = switch(I, 1, 8)
  return O
 
42.75, 7.241281, def aaiecfagfcceeaeebefbcajbjcfceidd(I):
  target_obj = argmax(objects(I, T, F, T), size)
  bottom_edge =  frozenset((i, j) for i in range(lowermost(target_obj), len(I)) for j in range(width(target_obj)))
  extension = shift(bottom_edge, (uppermost(target_obj), leftmost(target_obj)))
  return paint(I, recolor(color(target_obj), toobject(extension, I))) 
 
51.75, 10.579599, def dbddcbecegceebdfidaibbffgdffjagf(I):
  obj = argmax(objects(I, T, F, T), size)
  return paint(I, frozenset((color(obj), (i + uppermost(obj), j + leftmost(obj))) 
                          for i in range(len(I)) 
                          for j in range(width(obj)) 
                          if (i + uppermost(obj), j + leftmost(obj)) not in toindices(obj)))
 
44.0, 7.854036, def bffhbejhjadaefgaagaedfchfcfijddf(I):
  obj = argmax(objects(I, T, F, T), size)
  for i in range(lowermost(obj) + 1, len(I)):
    for j in range(leftmost(obj), leftmost(obj) + width(obj)):
      if I[i][j] == mostcolor(I):
        I = fill(I, color(obj), frozenset({(i, j)}))
  return I
 
78.5, 14.948093, def cabhafdifhgaedfcbchbcdhgbhjgabec(I):
  largest_obj = argmax(objects(I, T, F, T), size)
  extension_area = frozenset((i, j) 
                            for i in range(lowermost(largest_obj) + 1, len(I)) 
                            for j in range(width(I)) 
                            if (i, j) not in toindices(largest_obj) and I[i][j] == mostcolor(I))
  return paint(I, recolor(color(largest_obj), toobject(extension_area, I)))
 
22.5, 4.380143, def fdbdbcicbeecefegifcafdbabegabede(I):
  objs = objects(I, T, F, T)
  num_ones = size(sfilter(objs, lambda obj: color(obj) == 1))
  recolor_func = lambda obj: recolor(8, obj) if num_ones > 1 else recolor(8, argmax(objs, size))
  recolored_objs = mfilter(objs, recolor_func)
  O = paint(I, recolored_objs)
  return O
 
62.25, 20.589973, def jfcadaeajcjaeegbbfjdfbedjdcjahja(I):
  main_obj = extract(objects(I, True, False, True), lambda obj: color(obj) == 1)
  expanded_main_obj = toindices(main_obj)
  for _ in range(2): # Expand the object twice to ensure capturing all connected components
      expanded_main_obj = mapply(neighbors, expanded_main_obj)
      expanded_main_obj = intersection(expanded_main_obj, asindices(I)) # Keep only valid indices within the grid.
  recolor_area = difference(expanded_main_obj, toindices(main_obj)) # The difference will be the connected components
  O = fill(I, 8, recolor_area)
  return O 
 
10.5, 1.7199413, def ebidcefhhbgbebddjcbbfgdhjfccchab(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  target_obj = argmax(objs, size) 
  corner_loc = lrcorner(target_obj)
  modified_obj = frozenset((8, (i, j)) if (i,j) != corner_loc else (1, (i,j)) for (i,j) in toindices(target_obj))
  return paint(I, modified_obj)
 
27.0, 9.116669, def iehiejibafedefbeaefddfijcbccfccb(I):
  objs = objects(I, T, F, T) # Extract all objects.
  one_objs = list(sfilter(objs, lambda obj: color(obj) == 1)) # Filter for objects with color '1'.
  if len(one_objs) < 2:
    return I # No need to connect if there's only one or zero objects.
  connection_line = connect(center(one_objs[0]), center(one_objs[1])) # Connect the centers of the first two '1'-objects.
  O = paint(I, recolor(8, toobject(connection_line, I))) # Paint the connecting line.
  return O
 
29.75, 17.189646, def abafaaacbcjceciebfhafcejibafbgea(I):
  one_indices = ofcolor(I, 1) # Get indices of all '1's.
  min_row, min_col = ulcorner(one_indices) # Find top-left corner of the bounding box of '1's.
  max_row, max_col = lrcorner(one_indices) # Find bottom-right corner of the bounding box of '1's.
  connection_line = frozenset((i, (min_col + max_col) // 2) for i in range(min_row, max_row + 1))
  O = paint(I, recolor(8, toobject(connection_line, I))) # Paint the connecting line.
  return O
 
32.0, 20.453707, def fbabfcbhaachefbfjdbjgicffhiecfjd(I):
  obj = toobject(ofcolor(I, 1), I) # Create a single object containing all the '1's.
  if len(obj) == 0:
    return I
  center_row, center_col = centerofmass(obj) # Find the center of mass of all the '1's.
  connection_line = frozenset((center_row, j) for j in range(width(I))) # Create a horizontal line through the center of mass.
  O = paint(I, recolor(8, toobject(connection_line, I))) # Paint the connecting line.
  return O
 
20.0, 3.5074902, def agebdcbebdjceifiaefdhfidfdafcffb(I):
  objs = objects(I, True, False, True)
  main_obj = argmax(objs, size)
  border_points = set(extract(obj, lambda c: True) for obj in objects(I, True, False, True) if bordering(toindices(obj), I))
  connected_to_border = set()
  for start in toindices(main_obj):
    for end in border_points:
        path = connect(start, (end[1][0], end[1][1]))
        if len(intersection(path, toindices(main_obj))) == len(path): # Check if the path is fully within the main object
          connected_to_border.add(start)
          break
  recolor_area = difference(toindices(main_obj), connected_to_border)
  O = fill(I, 8, recolor_area)
  return O
 
30.75, 14.125817, def edaehfahabaiefjaafbcfdbcjdfibbfj(I):
  objs = objects(I, T, F, T)
  one_objs = sfilter(objs, lambda obj: color(obj) == 1)

  # Find topmost and leftmost objects:
  topmost_obj = argmin(one_objs, uppermost)
  leftmost_obj = argmin(one_objs, leftmost)

  # Check if they are the same object:
  if topmost_obj == leftmost_obj:
    connection_row = (uppermost(topmost_obj) + lowermost(topmost_obj)) // 2
    connection_line = frozenset((connection_row, j) for j in range(width(I)))
  else:
    connection_col = (leftmost(leftmost_obj) + rightmost(leftmost_obj)) // 2
    connection_line = frozenset((i, connection_col) for i in range(height(I)))

  O = paint(I, recolor(8, toobject(connection_line, I)))
  return O
 
28.75, 18.878654, def bccfjdaejhadeegjibfbifjjfceeefic(I):
  objs = objects(I, T, F, T)
  one_objs = sfilter(objs, lambda obj: color(obj) == 1)

  if len(one_objs) > 1:
    obj1 = first(one_objs)
    obj2 = last(one_objs)

    # Check for shared row:
    if hmatching(obj1, obj2):
      connection_row = (uppermost(obj1) + lowermost(obj2)) // 2
      connection_line = frozenset((connection_row, j) for j in range(width(I)))
    else:
      connection_col = (leftmost(obj1) + rightmost(obj2)) // 2
      connection_line = frozenset((i, connection_col) for i in range(height(I)))

    O = paint(I, recolor(8, toobject(connection_line, I)))
  else:
    O = I  # No change if only one or no '1'-object

  return O
 
76.75, 31.241144, def gffbgfcjdadeejjcadaeghhihafgieee(I):
  objs = objects(I, univalued=False, diagonal=False, without_bg=False)
  ones = colorfilter(objs, 1)
  eights = colorfilter(objs, 8)
  O = paint(I, recolor(8, merge(apply(toindices, ones))))
  return paint(O, recolor(1, merge(apply(toindices, eights))))
 
30.0, 19.541143, def egafcdcebjcaeegdacgidhbhfgcicaab(I):
    objs = objects(I, T, F, T)  # Extract all objects
    one_objs = sfilter(objs, lambda obj: color(obj) == 1)  # Filter '1'-colored objects

    # Horizontal connection if any two '1'-objects share a row:
    if any(hmatching(obj1, obj2) for obj1 in one_objs for obj2 in one_objs if obj1 != obj2):
        topmost_row = min(uppermost(obj) for obj in one_objs)
        bottommost_row = max(lowermost(obj) for obj in one_objs)
        connection_row = (topmost_row + bottommost_row) // 2
        connection_line = frozenset((connection_row, j) for j in range(width(I)))

    # Otherwise, vertical connection:
    else:
        leftmost_col = min(leftmost(obj) for obj in one_objs)
        rightmost_col = max(rightmost(obj) for obj in one_objs)
        connection_col = (leftmost_col + rightmost_col) // 2
        connection_line = frozenset((i, connection_col) for i in range(height(I)))

    O = paint(I, recolor(8, toobject(connection_line, I)))  # Paint the line
    return O
 
31.75, 20.022678, def ihbiaddaabegeghajicfbiigbfiaehae(I):
    objs = objects(I, T, F, T)
    one_objs = sfilter(objs, lambda obj: color(obj) == 1)

    # Find top-left and bottom-right corners of bounding box:
    tl_corner = ulcorner(merge(one_objs))
    br_corner = lrcorner(merge(one_objs))

    # Connect based on bounding box dimensions:
    if br_corner[0] - tl_corner[0] >= br_corner[1] - tl_corner[1]:
        connection_row = (tl_corner[0] + br_corner[0]) // 2
        connection_line = frozenset((connection_row, j) for j in range(width(I)))
    else:
        connection_col = (tl_corner[1] + br_corner[1]) // 2
        connection_line = frozenset((i, connection_col) for i in range(height(I)))

    O = paint(I, recolor(8, toobject(connection_line, I)))
    return O
 
32.25, 20.120422, def hidedeeehdgfedfibhafjbebebbcedgd(I):
  objs = objects(I, T, F, T)
  one_objs = sfilter(objs, lambda obj: color(obj) == 1)

  # Create a single object representing all '1'-colored cells:
  merged_obj = merge(one_objs)

  # Determine connection type based on shape:
  if portrait(merged_obj):
    connection_line = frozenset((i, centerofmass(merged_obj)[1]) for i in range(height(I)))
  else:
    connection_line = frozenset((centerofmass(merged_obj)[0], j) for j in range(width(I)))

  O = paint(I, recolor(8, toobject(connection_line, I)))
  return O
 
22.5, 4.380143, def ciaafecjihbdedjajdcdhacaddbiecbb(I):
  objs = objects(I, True, False, True)
  main_obj = argmax(objs, size)
  O = I
  for i, j in toindices(main_obj):
    if all(0 <= i + di < len(I) and 0 <= j + dj < len(I[0]) and I[i + di][j + dj] == mostcolor(I) for di, dj in [(0, 1), (0, -1), (1, 0), (-1, 0)]):
      O = paint(O, {(8, (i, j))})
  return O
 
16.75, 3.4579906, def acgfhdcfegjbedjabedeabfififdbbfh(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  filtered_objs = sfilter(objs, lambda obj: color(obj) == 1 and not vline(obj))
  indices_to_recolor = mapply(toindices, filtered_objs)
  O = fill(I, 8, indices_to_recolor)
  return O
 
21.75, 6.7454042, def iaejcadbcbddebcdafhgajbhbhfibbee(I):
  O = I
  for i, row in enumerate(I):
    for j, value in enumerate(row):
      if value == 1 and ((j > 0 and I[i][j - 1] != 1) or j == 0) and ((j < len(row) - 1 and I[i][j + 1] == 1) and (j < len(row) - 1)):
        O = fill(O, 8, {(i, j)})
  return O
 
17.25, 7.518701, def giabfidfeaeiedhgjaeaibbcgffadeej(I):
  h = height(I)
  w = width(I)
  O = canvas(9, (h, w))
  for i in range(h):
      current_color = None
      start_j = None
      for j in range(w):
          if I[i][j] == 1 and current_color != 1:
              current_color = 1
              start_j = j
          elif I[i][j] != 1 and current_color == 1:
              if j - start_j > 1: # Horizontal line longer than 1
                  O = fill(O, 8, {(i, k) for k in range(start_j, j)})
              else:
                  O = fill(O, 1, {(i, k) for k in range(start_j, j)})
              current_color = None
      if current_color == 1 and w - start_j > 1:
          O = fill(O, 8, {(i, k) for k in range(start_j, w)})
      elif current_color == 1:
          O = fill(O, 1, {(i, k) for k in range(start_j, w)})
  return O
 
31.75, 20.63024, def dfcicdjdadcgeifaajhfieahcfcaheaa(I):
  one_indices = ofcolor(I, 1)
  center_i, center_j = centerofmass(one_indices)
  if height(one_indices) >= width(one_indices):
    line = frozenset((center_i, j) for j in range(width(I)))
  else:
    line = frozenset((i, center_j) for i in range(height(I)))
  return paint(I, recolor(8, toobject(line, I)))
 
29.0, 9.962264, def bdbdbgiejbjfejheiabbehbjidaaaaeh(I):
  objs = objects(I, True, False, True)
  main_obj = argmax(objs, size)
  bg = mostcolor(I)
  recolor_area = toindices(main_obj)
  expansion_area = recolor_area
  while True:
    new_expansion_area = mapply(dneighbors, expansion_area) - recolor_area
    if all(index(I, cell) == bg for cell in new_expansion_area):
      recolor_area = recolor_area | new_expansion_area
      expansion_area = new_expansion_area
    else:
      break
  O = fill(I, 8, recolor_area)
  return O
 
41.75, 21.888697, def djjdabbjbedfeieejbfbdaddbdgcibgb(I):
  objs = objects(I, True, False, True)
  main_obj = argmax(objs, size)
  bg = mostcolor(I)
  recolor_area = set()
  for cell in toindices(main_obj):
    for direction in [UP, DOWN, LEFT, RIGHT]:
      neighbor = add(cell, direction)
      if 0 <= neighbor[0] < len(I) and 0 <= neighbor[1] < len(I[0]) and I[neighbor[0]][neighbor[1]] == bg:
        recolor_area.add(neighbor)
  O = fill(I, 8, frozenset(recolor_area))
  return O
 
19.0, 3.0215983, def fbfbafgbjjeaedcfaefaaehahcbhfade(I):
  target_loc = lrcorner(asindices(I))
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  O = I
  for obj in objs:
    if target_loc not in toindices(obj):
      O = paint(O, recolor(8, obj))
  return O
 
25.75, 3.4444416, def bdcfifibdddceabaiiiddbdcehcccbcj(I):
    objs = objects(I, True, False, True)
    sorted_objs = order(objs, lambda obj: size(obj) if color(obj) == 1 else 0)
    largest_one_obj = first(sfilter(sorted_objs, lambda obj: color(obj) == 1))
    O = paint(I, recolor(8, largest_one_obj))
    return O
 
30.0, 16.192787, def efaidgfccdadeddcifcfdahabhfaifjf(I):
  objs = objects(I, True, False, True)
  largest_obj = argmax(objs, size)
  border = delta(toindices(largest_obj))
  O = fill(I, 8, border)  # Fill the bordering cells with 8
  return O
 
26.75, 34.02397, def jgeacjddfeaceeaaafdejhcbgajbaaef(I):
  objs = objects(I, True, False, True) # Extract non-background objects.
  largest_obj = argmax(objs, size)  # Find the largest object by size.
  O = paint(canvas(mostcolor(I), shape(I)), recolor(8, largest_obj)) # Paint the largest object with color 8 onto a blank canvas of the same shape as the input.
  return O 
 
17.0, 3.4897141, def fcbhaegiafeeedbjageccejiabffbbge(I):
  objs = objects(I, True, False, True) # Extract non-background objects.
  target_color = mostcommon(merge([cell for obj in objs for cell in obj])[::2]) # Find the most common color among all objects (excluding background).
  largest_obj = argmax(objs, size)  # Find the largest object by size.
  O = replace(I, target_color, 8) if color(largest_obj) == target_color else I # Replace the target color with 8 only if it's the color of the largest object.
  return O
 
9.75, 1.3665785, def jbabigfedfadecedaeebbefabcibcdcd(I):
    objs = objects(I, True, False, True)
    O = paint(I, recolor(8, difference(argmax(objs, size), {lrcorner(argmax(objs, size))})))
    return O
 
128.75, 60.498478, def dfbabcdaejaeecejabeebbfdcdgaebjc(I):
  grid_indices = asindices(I) 
  target_loc = lrcorner(grid_indices) 
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  target_obj = next((obj for obj in objs if contained(target_loc, toindices(obj))), frozenset()) 
  recolor_indices = grid_indices - toindices(target_obj) 
  O = fill(I, 8, recolor_indices)
  return O
 
26.75, 8.212401, def fhfbddidghifefgcjaehecbcfffbjecc(I):
  largest_obj = argmax(objects(I, T, F, T), size)
  bottom_row = uppermost(largest_obj) + height(largest_obj) 
  extension = frozenset((bottom_row, j) for j in range(leftmost(largest_obj), rightmost(largest_obj) + 1))
  return paint(I, recolor(color(largest_obj), extension))
 
25.0, 7.0866747, def efjfhedcfaaceadfbedacfiefedbdbba(I):
  largest_obj = argmax(objects(I, T, F, T), size)
  shifted_indices = apply(lambda idx: (idx[0] + 1 if idx[0] == lowermost(largest_obj) else idx[0], idx[1]), toindices(largest_obj))
  return paint(I, recolor(color(largest_obj), frozenset(shifted_indices)))
 
132.25, 5.9699197, def cchgjbaideabebaijcbgebeaaacdjcjc(I):
  objs = partition(I) # Partition grid into objects
  largest_obj = argmax(objs, lambda obj: colorcount(obj, color(obj))) # Find object with most cells of its color
  O = paint(I, recolor(8, largest_obj)) # Recolor largest object and paint
  return O
 
46.0, 18.36721, def bgdfjichcfigecfdacbfiacfgcefabaa(I):
  corner_color = I[lrcorner(asindices(I))[0]][lrcorner(asindices(I))[1]]
  O = replace(I, corner_color, 9)
  O = replace(O, 1, 8)
  O = replace(O, 9, corner_color)
  return O
 
22.75, 8.478927, def cjdbcjacacjieadjadeafbfdhehjciec(grid):
  objs = objects(grid, T, F, T)
  rightmost_cells = frozenset((i, len(grid[0]) - 1) for i in range(len(grid)))
  target_cells = rightmost_cells - toindices(merge(objs))
  return fill(grid, 1, target_cells) 
 
14.0, 3.2226915, def acdacdegebfbehaibcejadccdcjdcefd(grid):
  modified_grid = tuple(tuple(1 if j == len(row) - 1 and row[j] != mostcommon(row) else row[j] for j in range(len(row))) for row in grid)
  return modified_grid
 
16.0, 3.225073, def edgffiagichdebjajefdfbcbbfibadbg(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  target_obj = argmax(objs, size)
  rightmost_col = rightmost(target_obj)
  modified_obj = frozenset((1, (i, j)) if j == rightmost_col else (v, (i, j)) for v, (i, j) in target_obj)
  return paint(I, modified_obj)
 
14.25, 2.278862, def bebcbdgbdbdeefdeaadghjjibbchecge(I):
  objs = objects(I, T, F, T)
  target_obj = argmax(objs, lambda o: width(o) * height(o)) 
  min_j = leftmost(target_obj)
  max_j = rightmost(target_obj)
  modified_obj = frozenset({(1, (i, j)) if j == max_j else (v, (i, j)) for v, (i, j) in target_obj if min_j <= j <= max_j})
  return paint(I, modified_obj)
 
16.0, 3.225073, def bdbeeaabgbedebffijhaaiedaeidceac(I):
  objs = objects(I, True, False, True) 
  target_obj = argmax(objs, size) 
  rightmost_cells = sfilter(target_obj, lambda cell: cell[1][1] == rightmost(target_obj)) # Find rightmost cells directly
  recolored_cells = frozenset((1, (i, j)) for _, (i, j) in rightmost_cells)  
  O = paint(I, recolored_cells) 
  return O
 
17.5, 3.6916988, def fbiaeiajaiciegebajdaghbffaigcefa(I):
  objs = objects(I, True, False, True)
  target_obj = argmax(objs, size)
  modified_obj = frozenset()
  for value, (i, j) in target_obj:
    if j == rightmost(target_obj) or j == rightmost(target_obj) - 1: # Check two rightmost columns
      modified_obj = insert((1, (i, j)), modified_obj) # Replace with 1
    else:
      modified_obj = insert((value, (i, j)), modified_obj) # Keep original value
  O = paint(I, modified_obj)
  return O
 
13.75, 2.6212866, def aiiiafiebfchecifidcifadhceadbjcc(I):
  for j in range(len(I[0])-1,-1,-1):
    found_one = False
    for i in range(len(I)):
      if I[i][j] == 1:
        found_one = True
        I = fill(I, 8, {(i, j)})
        if i < len(I)-1:
          I = fill(I, 1, {(i+1, j)})
        break
    if found_one:
      break
  return I
 
45.75, 48.3701, def bacbabdfbajfecbaicecaadcejdiiefd(I):
  O = canvas(9, shape(I))
  for j in range(len(I[0])):
    col = tuple(I[i][j] for i in range(len(I)))
    if 1 in col:
      last_one_index = len(col) - 1 - col[::-1].index(1)
      O = fill(O, 1, {(i, j) for i in range(last_one_index, len(I))})
      if last_one_index > 0:
        O = fill(O, 8, {(last_one_index - 1, j)})
  return O
 
16.25, 3.6341336, def gbebabcffefiecacjcfedcfdgbcbdada(I):
  O = I
  for i, row in enumerate(I):
    try:
      j = len(row) - 1 - row[::-1].index(1)
      O = fill(O, 8, {(i, j)})
      if i < len(I)-1:
        O = fill(O, 1, {(k, j) for k in range(i+1, len(I))})
      break
    except ValueError:
      continue
  return O
 
22.5, 4.380143, def abjeecfagaeaeeabiggabgeicfadejbe(I):
  objs = objects(I, True, False, True)
  largest_color = color(argmax(objs, size))
  smallest_color = color(argmin(objs, size))
  return paint(paint(I, recolor(EIGHT, ofcolor(I, largest_color))), recolor(ONE, ofcolor(I, smallest_color)))
 
22.5, 8.497541, def dcfdcabgecefeajdbecaefeedjfbecfa(grid):
  objs = objects(grid, T, F, T)
  obj = argmax(objs, size)
  
  if shape(obj) == (1, 1):
    O = fill(grid, 1, toindices(obj))
  elif position(obj, asobject(grid)) == (0, 1):
    O = paint(grid, recolor(1, obj))
  elif color(obj) == 1:
    O = fill(grid, 8, shift(toindices(obj), (-1, 0)))
  else:
    O = fill(grid, 1, shift(toindices(obj), (0, -1)))
  return O
 
22.5, 4.380143, def bfdfcaifchdgebfeieahcefbcddccadb(grid):
  if len(palette(grid)) == 2:
    O = fill(grid, 1, ofcolor(grid, other(palette(grid), mostcolor(grid))))
  else:
    target_obj = extract(objects(grid, T, F, T), lambda o: position(o, asobject(grid)) in {(0, 1), (1, 1), (-1, 1)})
    if color(target_obj) == 1:
      O = paint(cover(grid, target_obj), shift(recolor(8, target_obj), (-1, 0)))
    else:
      O = paint(cover(grid, target_obj), shift(recolor(1, target_obj), (0, -1)))
  return O
 
16.25, 3.9771955, def dfegecgbaibbedddiiffbdbbdfjfffjc(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  target_obj = argmax(objs, size)
  rightmost_col = rightmost(target_obj)
  modified_obj = frozenset((1, (i, j)) if j == rightmost_col else (v, (i, j)) for v, (i, j) in target_obj)
  return paint(I, modified_obj) if (0,0) in toindices(target_obj) else paint(fill(I, 1, {(len(I)-1,0)}), modified_obj) 
 
13.5, 2.612781, def diebabcdjiceegbjjcjdjbjacaeaehhi(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  target_obj = argmax(objs, size)
  modified_obj =  recolor(1,  intersection(toindices(target_obj), hfrontier((0, rightmost(target_obj)))))
  return paint(I, modified_obj) if (len(I)-1,0) in toindices(target_obj) else paint(fill(I, 1, {(len(I)-1,0)}), modified_obj)
 
16.5, 3.980729, def dbieceejegeheaheaadbdbbefdfcbigb(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  target_obj = argmax(objs, size)
  rightmost_cells = frozenset((v, (i, j)) for v, (i, j) in target_obj if j == rightmost(target_obj))
  modified_grid = paint(I, recolor(1, rightmost_cells))
  return modified_grid if index(I, (len(I)-1, 0)) != 9 else fill(modified_grid, 1, {(len(I)-1, 0)}) 
 
13.75, 2.61504, def cheecheebbbeehcaadbeifibcgbfifaf(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  target_obj = argmax(objs, size)
  rightmost_cell_indices =  toindices(intersection(toindices(target_obj), hfrontier((0, rightmost(target_obj)))))
  new_grid = I
  for i, j in rightmost_cell_indices:
    new_grid = fill(new_grid, 1, {(i, j)})
  if index(new_grid, (len(I)-1, 0)) == 9:
    new_grid = fill(new_grid, 1, {(len(I)-1, 0)})
  return new_grid
 
22.25, 11.573568, def acdjjbjcafaeebcdjaddfdaffaeabcbe(I):
  objs = objects(I, True, False, True)
  target_obj = argmax(objs, size)
  shifted_obj = shift(target_obj, (0, width(target_obj) - 1))
  rightmost_column = toobject(intersection(toindices(shifted_obj), asindices(I)), I)
  O = paint(I, recolor(1, rightmost_column))
  return O
 
26.5, 14.431505, def ejcdebefbgieeggdbjafidhdfedbfhdj(I):
  O = I
  rightmost_obj = argmax(objects(I, True, False, True), lambda obj: rightmost(obj)) # Find rightmost object
  if rightmost_obj:  # Handle cases where no object with '1' exists
    rightmost_col = rightmost(rightmost_obj)
    O = paint(O, recolor(8, shift(remove(last(order(toindices(rightmost_obj), lambda cell: cell[0])), toindices(rightmost_obj)), (0, -1)))) 
    O = paint(O, recolor(1, {(i, rightmost_col) for i in range(len(I))})) 
  return O
 
17.0, 2.774664, def effffffjhbchejadbhdfbdcahheacahe(I):
  O = I
  try:
    rightmost_one_col = max(ofcolor(I, 1), key=lambda x: x[1])[1] # Find the rightmost column with 1
    for i in range(len(I)):
      if (i, rightmost_one_col - 1) in ofcolor(I, 1): # Check if cell is part of the object
        O = fill(O, 8, {(i, rightmost_one_col - 1)}) # Change second rightmost to 8
    O = fill(O, 1, {(i, rightmost_one_col) for i in range(len(I))}) # Change rightmost column to 1
  except ValueError: # Handle cases with no '1's
    pass
  return O
 
16.25, 2.7972069, def decadcfbihcbeafcaaahdeadhiihfeca(I):
  O = I
  for j in range(len(I[0]) - 1, 0, -1): # Iterate columns from right to left
    if any(I[i][j] == 1 for i in range(len(I))):  # Check if column contains a '1'
      rightmost_one_col = j
      break
  else: # Handle case with no '1's
    return O
  for i in range(len(I)):
    if (i, rightmost_one_col) in ofcolor(I, 1):
      O = fill(O, 8, {(i, rightmost_one_col - 1)})
  O = fill(O, 1, {(i, rightmost_one_col) for i in range(len(I))})
  return O
 
17.0, 12.441125, def ibbbacfacccfegbhiijcbaghfabcbefc(grid):
  rightmost_obj = argmax(objects(grid, T, F, T), lambda obj: rightmost(obj)) 
  if all(size(o) == 1 for o in objects(grid, T, F, T)):
    O = fill(grid, 1, toindices(rightmost_obj))
  elif len(objects(grid, T, F, T)) == 1:
    O = paint(grid, recolor(1, rightmost_obj))
  elif color(rightmost_obj) == 1:
    O = fill(grid, 8, shift(toindices(rightmost_obj), (-1, 0)))
  else:
    O = fill(grid, 1, shift(toindices(rightmost_obj), (0, -1)))
  return O
 
7.0, 1.3140448, def gdbgecadgbdeeaebjeabffffcaicfefb(grid):
  is_single_cell = lambda o: size(o) == 1
  rightmost_index = lambda obj: rightmost(obj)
  fill_left = lambda obj: fill(grid, 8, shift(toindices(obj), (-1, 0)))
  fill_above = lambda obj: fill(grid, 1, shift(toindices(obj), (0, -1)))
  
  rightmost_obj = argmax(objects(grid, T, F, T), rightmost_index)
  
  return branch(
      apply(is_single_cell, objects(grid, T, F, T)),
      fill(grid, 1, toindices(rightmost_obj)),
      branch(
          size(objects(grid, T, F, T)) == 1,
          paint(grid, recolor(1, rightmost_obj)),
          branch(
              color(rightmost_obj) == 1,
              fill_left(rightmost_obj),
              fill_above(rightmost_obj)
          )
      )
  ) 
 
18.0, 2.8311863, def cbejeaeeihdheefgbihcgcgabacgccjb(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  target_obj = argmax(objs, size)
  if index(I, (len(I)-1, 0)) == mostcolor(target_obj):
    modified_grid = paint(I, recolor(1, target_obj))
    return fill(modified_grid, 1, {(len(I)-1, 0)})
  else:
    rightmost_cells = frozenset((v, (i, j)) for v, (i, j) in target_obj if j == rightmost(target_obj))
    return paint(I, recolor(1, rightmost_cells)) 
 
23.0, 2.78483, def aeaehbfdbjbdecfabciceeijdeiedjcc(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  largest_obj = argmax(objs, size)
  is_corner_touched = any((i,j) == (len(I)-1,0) for _,(i,j) in largest_obj)
  modified_grid = branch(is_corner_touched, paint(I, recolor(1, frozenset((v, (i, rightmost(largest_obj))) for v, (i, _) in largest_obj))), paint(fill(I, 1, {(len(I)-1, 0)}), recolor(1, largest_obj)))
  return modified_grid
 
20.25, 2.5903025, def iidegdajfdheegedjaadfaaebdaebefh(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  target_obj = argmax(objs, size)
  if index(I, (len(I)-1,0)) != mostcolor(target_obj):
    I = fill(I, 1, {(len(I)-1,0)})
  modified_obj =  recolor(1,  intersection(toindices(target_obj), hfrontier((0, rightmost(target_obj))))) if index(I, (len(I)-1,0)) == mostcolor(target_obj) else recolor(1, target_obj)
  return paint(I, modified_obj) 
 
15.5, 3.7022626, def jggdgaiafbhbeaibieaffefedhfjedce(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  target_obj = argmax(objs, lambda obj: lrcorner(obj)[0]+lrcorner(obj)[1]) 
  ref_point = (lrcorner(target_obj)[0], lrcorner(target_obj)[1] + 1) 
  if hline(target_obj):
    replacement_line = vfrontier(ref_point) 
  elif vline(target_obj):
    replacement_line = hfrontier(ref_point) 
  else:
    replacement_line = connect((0,0), (0,0)) # Empty line for other cases
  O = paint(I, recolor(1, toobject(replacement_line, I))) 
  return O
 
19.5, 6.6744494, def cjcfijdhabbeejacbbfdfaejhfecgfah(I):
  objs = objects(I, True, False, True)
  target_obj = argmax(objs, lambda obj: lrcorner(obj)[0] * 100 + lrcorner(obj)[1])
  corner = lrcorner(target_obj)
  if hline(target_obj):
    O = paint(I, recolor(1, toobject(vfrontier((corner[0], corner[1] + 1)), I)))
  elif vline(target_obj):
    O = paint(I, recolor(1, toobject(hfrontier((corner[0] - 1, corner[1])), I)))
  else:
    start_point = (0, lrcorner(target_obj)[1] + 1)
    end_point = (len(I)-1, lrcorner(target_obj)[1] + 1)
    O = paint(I, recolor(1, toobject(connect(start_point, end_point), I)))
  return O
 
13.5, 2.4854593, def faidfdhabadeedhebgdedfeiiecbhdfa(I):
  objs = objects(I, True, False, True)
  target_obj = argmax(objs, lambda obj: lrcorner(obj)[0] + lrcorner(obj)[1])
  i, j = lrcorner(target_obj)
  if hline(target_obj):
    line = frozenset((i, x) for x in range(j + 1, len(I[0])))
  elif vline(target_obj):
    line = frozenset((x, j) for x in range(0, i))
  else:
    line = frozenset() 
  O = paint(I, recolor(1, toobject(line, I)))
  return O
 
14.75, 2.979065, def biijhgacjgifeeebjjaigfigddaefcfc(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  target_obj = argmax(objs, lambda obj: lrcorner(obj)[0]+lrcorner(obj)[1])
  h, w = len(I), len(I[0])
  corner_i, corner_j = lrcorner(target_obj)
  if hline(target_obj):
    replacement_indices = frozenset((i, j) for i in range(h) for j in range(corner_j + 1, w))
  elif vline(target_obj):
    replacement_indices = frozenset((i, j) for i in range(corner_i) for j in range(w))
  else:
    replacement_indices = frozenset()  
  O = paint(I, recolor(1, toobject(replacement_indices, I)))
  return O
 
13.25, 2.4891293, def ebfhidfibdbeeefbjdfebhfcfgibhege(I):
  objs = objects(I, True, False, True)
  target = argmax(objs, lambda o: lrcorner(o)[0] * len(I[0]) + lrcorner(o)[1])
  i, j = lrcorner(target)
  if all(I[i][x] == I[i][j] for x in range(len(I[0]))):
    replace_line = {(x, j + 1) for x in range(len(I))}
  elif all(I[x][j] == I[i][j] for x in range(len(I))):
    replace_line = {(i - 1, x) for x in range(len(I[0]))}
  else: 
    replace_line = set()
  return paint(I, recolor(1, toobject(replace_line, I))) 
 
16.25, 2.9574175, def jaafbehejjfeejhbjaadcfbfebffajbg(I):
  O = I
  rightmost_one_col = max(ofcolor(I, 1), key=lambda x: x[1], default=(0,-1))[1] # Rightmost '1' column or -1
  if rightmost_one_col >= 0: # Proceed if '1' exists 
    for i in range(len(I)):
      if (i, rightmost_one_col) in ofcolor(I, 1):
        if rightmost_one_col < len(I[0]) - 1:  # Not on the right edge
          O = fill(O, 8, {(i, rightmost_one_col + 1)}) # Shift right
    O = fill(O, 1, {(i, rightmost_one_col) for i in range(len(I))}) # Fill original column
  return O
 
39.5, 67.03383, def cfbccggafhceecdabbfeciciefbcbajd(I):
  O = canvas(9, shape(I))  # Start with a canvas of '9's
  rightmost_one_obj = max(objects(I, True, False, False), key=lambda obj: rightmost(obj), default=frozenset())
  if rightmost_one_obj and color(rightmost_one_obj) == 1:
    shifted_obj = shift(rightmost_one_obj, (0,1))
    O = paint(O, recolor(1, toindices(rightmost_one_obj)))  # Paint original column
    O = paint(O, shifted_obj)  # Paint shifted object
  return O
 
13.75, 2.3945737, def igfedbbbedeiechfieeddfibgdfiebde(I):
  O = I
  for j in range(len(I[0])-1, 0, -1):  # Iterate columns right to left
    if any(I[i][j] == 1 for i in range(len(I))):  # Column contains '1'
      for i in range(len(I)):
        if I[i][j] == 1:
          O = fill(O, 8, {(i, j + 1)})  # Shift right
          O = fill(O, 1, {(i, j)})       # Replace with '1'
      break # Stop after processing the rightmost '1' column
  return O
 
492.0, 9.897772, def cebfjghjeeebegbfbeffhbjcceiafefb(I):
  rightmost_one_col = max(
      {j for i in range(len(I)) for j in range(len(I[0])) if I[i][j] == 1},
      key=lambda j: j,
      default=-1 
  )
  if rightmost_one_col >= 0: # If '1' exists
    return  tuple(
      tuple(
        8 if k == j + 1 and I[i][j] == 1 and j + 1 < len(I[0]) else (
        1 if k == j else v
      ) for k, v in enumerate(row)) 
      for i, row in enumerate(I) for j in range(len(I[0]))
    )
  return I 
 
14.5, 2.2663143, def idfdccidadgaehgebccgiicecffaacfh(I):
    O = I
    for obj in objects(I, True, False, False):
        if color(obj) == 1 and rightmost(obj) == max(j for i, j in ofcolor(I, 1)):
            if rightmost(obj) < len(I[0]) - 1: # Check if object is on the right edge
              O = paint(cover(O, obj), shift(obj, (0,1))) # shift object one unit right
            O = paint(O, recolor(1, toindices(obj))) # set all cells of the object to 1
    return O
 
10.25, 1.9334157, def bffceacheheaejicibgbfbegccbaaeje(I):
  objs = objects(I, True, False, True)  # Identify objects excluding background
  largest_obj = argmax(objs, size)     # Find the largest object
  smallest_obj = argmin(objs, size)     # Find the smallest object
  target_color = color(smallest_obj)   # Get the color of the smallest object
  return paint(paint(I, recolor(target_color, largest_obj)), recolor(1, smallest_obj))
 
15.0, 7.8400707, def jejbcbfdfgddeggebhejhbaebgbdcbbj(grid):
  rightmost_obj = argmax(objects(grid, T, F, T), lambda obj: rightmost(obj))
  
  if size(rightmost_obj) == 1:
    return paint(grid, recolor(8, rightmost_obj))
  else:
    return fill(grid, 1, shift(toindices(rightmost_obj), (-1, 0)))
 
17.0, 9.830884, def dchehbgcahbdecbaadaiafffdebedbcg(grid):
  rightmost_obj = argmax(objects(grid, T, F, T), lambda obj: rightmost(obj))
  
  if color(rightmost_obj) == 1:
    return paint(grid, recolor(8, rightmost_obj))
  else:
    return fill(grid, 1, shift(toindices(rightmost_obj), (0, -1)))
 
15.75, 11.456072, def gadgaaaiaeibeccajejaicjbgebfedfd(grid):
  rightmost_obj = argmax(objects(grid, T, F, T), lambda obj: rightmost(obj))
  
  return branch(
      size(rightmost_obj) == 1 and color(rightmost_obj) == 1,
      paint(grid, recolor(8, rightmost_obj)),
      fill(grid, 1, shift(toindices(rightmost_obj), (0, -1)))
  )
 
15.25, 2.7256534, def feifdigdbjhiecaeidfeehcdefdiachd(I):
  objs = objects(I, univalued=False, diagonal=True, without_bg=True)
  target_obj = argmax(objs, size)
  rightmost_col =  frozenset((i, rightmost(target_obj)) for i in range(height(target_obj)))
  modified_obj = recolor(1, intersection(toindices(target_obj), rightmost_col))
  return paint(I, modified_obj)
 
13.25, 2.4891293, def jbgddacdcgdjeefcbacafhfeehfaghed(I):
  objs = objects(I, univalued=False, diagonal=True, without_bg=True)
  target_obj = argmax(objs, lambda obj: width(obj) * height(obj))
  right_edge = hfrontier((0, rightmost(target_obj)))
  modified_obj = recolor(1, intersection(toindices(target_obj), right_edge))
  return paint(I, modified_obj)
 
16.25, 3.9128482, def bcdcbfadcgeeedifbihgefcefbeeidae(I):
    objs = [obj for obj in objects(I, univalued=False, diagonal=True, without_bg=True)]
    target_obj = max(objs, key=lambda obj: -(-len(obj) // hperiod(obj)))
    return paint(I, recolor(1, {(v, (i, rightmost(target_obj))) for v, (i, j) in target_obj}))
 
29.5, 3.470246, def cfaiefgbeeifeeeejbcbecgabffabdbf(I):
  objs = objects(I, True, False, True)
  bg = mostcommon(I) 
  filtered_objs = sfilter(objs, lambda obj: len(obj) < len(I) * len(I[0]) and len(obj) > 1)  # Exclude background and single-cell objects
  if len(filtered_objs) > 0:
    target = argmax(filtered_objs, size)  
    shifted_target = shift(target, (1, 0)) # Shift the object to right
    O = paint(cover(I, target), recolor(1, toindices(shifted_target)))
  else:
    O = I
  return O
 
22.75, 2.2148604, def chffbicidddhedaajfehigffaacacjah(I):
  objs = objects(I, True, False, True)
  bg_size = size(objects(I, True, False, False)) #Getting size of background object
  second_largest_obj = argmax(sfilter(objs, lambda o: size(o) != bg_size), size)
  rightmost_cell = argmax(toindices(second_largest_obj), lambda c: c[1])
  new_obj = recolor(1, toindices(second_largest_obj))
  return paint(I, new_obj)
 
11.25, 1.616077, def fajefabdcffieejeajcffgbeaadgbbed(I):
  objs = objects(I, True, False, True)
  objs_size = apply(size, objs) #Apply size function on each object to get size
  sec_lrgst_obj_size = sorted(objs_size)[-2] #Get second largest size
  target_obj = extract(objs, lambda obj: size(obj) == sec_lrgst_obj_size)
  O = paint(I, recolor(1, toindices(target_obj)))
  return O
 
10.25, 1.9334157, def fciafcbfgibbegfabhhbaabdebcadeca(I):
  objs = objects(I, True, False, True)
  bg = mostcolor(I)
  target = argmax(sfilter(objs, lambda obj: size(obj) != len(I) * len(I[0])), lambda o: (-size(o), -rightmost(o)))
  new_obj = recolor(1, toindices(target)) 
  O = paint(I, new_obj)
  return O
 
10.25, 4.3637614, def fbbiidbaefeaeiiaafecbfebibbdaffe(I):
  O = I
  for obj in objects(I, True, False, False):
    if color(obj) == 8 and rightmost(obj) == max([rightmost(o) for o in objects(I, True, False, False) if color(o) == color(obj)]):
      if rightmost(obj) < len(I[0]) - 1:
        O = paint(cover(O, obj), shift(obj, (0,1)))
      O = paint(O, recolor(1, toindices(obj)))
  return O
 
12.5, 5.9548583, def fcjdcjbcfceheaaajfifjbdcaeaiddff(I):
  O = I
  target_color = 8
  for obj in sorted(objects(I, True, False, False), key=lambda obj: -rightmost(obj)):
    if color(obj) == target_color:
      O = paint(cover(O, obj), shift(obj, (0,1)))
      O = paint(O, recolor(1, toindices(obj)))
      break 
  return O
 
39.75, 11.642881, def daehafggiibbeadiaifgcbedfebajacb(I):
    O = I
    rightmost_8 = max(objects(I, True, False, False), key=lambda obj: (color(obj) == 8, rightmost(obj)))
    if rightmost(rightmost_8) < len(I[0]) - 1:
      O = paint(cover(O, rightmost_8), shift(rightmost_8, (0,1)))
    O = paint(O, recolor(1, toindices(rightmost_8)))
    return O 
 
11.75, 4.4459543, def iaegahaefiaiedbjbdhgdahjiaieabcf(I):
  O = I
  max_rightmost = -1
  target_obj = None
  for obj in objects(I, True, False, False):
    if color(obj) == 8 and rightmost(obj) > max_rightmost:
      max_rightmost = rightmost(obj)
      target_obj = obj
  if target_obj is not None:
    if rightmost(target_obj) < len(I[0]) - 1:
      O = paint(cover(O, target_obj), shift(target_obj, (0,1)))
    O = paint(O, recolor(1, toindices(target_obj)))
  return O
 
13.75, 1.7934713, def gfhaidfiibbeeaccaafijgbgjbffegee(I):
  objs = objects(I, True, False, True)
  if len(objs) > 1:
    objs_size = apply(size, objs)
    largest_obj = list(objs)[list(objs_size).index(max(objs_size))]
    smallest_obj = list(objs)[list(objs_size).index(min(objs_size))]
    return paint(paint(I, recolor(color(smallest_obj), largest_obj)), recolor(1, smallest_obj))
  else:
    return I 
 
19.0, 4.5069532, def acadaddacchbeajijigahbdaabdbdbga(grid):
  # Find the rightmost object.
  rightmost_obj = argmax(objects(grid, T, F, T), rightmost)
  
  # Create a function to handle object modification.
  def modify_object(obj):
    return branch(
        color(obj) == 1 and colorcount(grid, 1) > 1,
        fill(grid, 1, toindices(obj)),
        paint(grid, recolor(8, obj))
    )
  
  # Modify the rightmost object and add the new '8' object.
  return paint(modify_object(rightmost_obj), recolor(8, shift(toindices(rightmost_obj), (-1, 0))))
 
23.25, 21.709848, def jehbjadbbcahebcbbeigjfcddbefiijf(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  target_obj = argmax(objs, size)
  modified_obj = recolor(1,  target_obj)
  modified_obj =  recolor(mostcolor(I), difference(modified_obj, hfrontier((0, rightmost(target_obj))))) 
  if index(I, (len(I)-1,0)) != mostcolor(target_obj):
    modified_obj =  insert((1, (len(I)-1,0)), modified_obj)
  return paint(I, modified_obj) 
 
16.0, 2.4913116, def bhfgbdbbhabeeccejbgdbafbefjjbffj(I):
  for j in range(len(I[0])-1, -1, -1):
    for i in range(len(I)):
      if I[i][j] == 1:
        I = fill(I, mostcolor(I), {(i, j)})
        if j < len(I[0]) - 1:
          I = fill(I, 1, {(k, j + 1) for k in range(i, len(I))})
        return I
  return I
 
13.25, 2.4891293, def hddeccbbciafegdhjdbfbbecddbdbdac(I):
  for obj in sorted(objects(I, False, False, False), key=lambda obj: (-rightmost(obj), -uppermost(obj))):
    if color(obj) == 1:
      i, j = rightmost(toindices(obj))
      I = paint(I, recolor(mostcolor(I), toindices(obj)))
      if j < len(I[0]) - 1:
        I = fill(I, 1, {(k, j + 1) for k in range(i, len(I))})
      break
  return I
 
16.0, 1.801773, def ddhfcbgdaehceggaafcfdcgdeaecafeg(I):
  objs = objects(I, True, False, True)
  if len(objs) > 1:
    small_obj = argmin(objs, size)
    large_obj = argmax(objs, size)
    return paint(paint(replace(I, color(small_obj), 1), small_obj), recolor(color(small_obj), large_obj))
  else:
    return I
 
15.75, 2.6827123, def icaahcaddccceaejjaaffdcifbhiheaf(grid):
  # Find all '1' objects
  one_objs = colorfilter(objects(grid, T, F, T), 1)
  
  # If no '1' objects are found, return the original grid
  if len(one_objs) == 0:
    return grid

  # Find the rightmost '1' object
  rightmost_one_obj = argmax(one_objs, rightmost)

  # Create a function to add the '8' object
  add_eight = lambda g: paint(g, recolor(8, shift(toindices(rightmost_one_obj), (-1, 0))))

  # Apply the transformation based on object count
  return branch(
      len(one_objs) > 1,
      add_eight(grid),  # Add '8' without recoloring 
      add_eight(paint(grid, recolor(8, rightmost_one_obj))) # Recolor then add '8'
  )
 
11.5, 2.3314326, def caddaeabejcdeccdjaafdbdciedcbjid(I):
  objs = objects(I, univalued=False, diagonal=True, without_bg=True)
  max_obj = argmax(objs, lambda o: rightmost(o))
  right_col = rightmost(max_obj)
  modified_obj = frozenset((1, (i, right_col)) for v, (i, j) in max_obj if j == right_col)
  return paint(I, modified_obj)
 
12.75, 2.47978, def jffideajefjfeegejfbfbcahbdaifdef(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  target_obj = argmax(objs, lambda obj: rightmost(obj) * 100 + size(obj)) 
  right_col = rightmost(target_obj)
  updated_grid = [list(row) for row in I]
  for i, row in enumerate(I):
    for j, val in enumerate(row):
       if (val, (i,j)) in target_obj and j == right_col:
        updated_grid[i][j] = 1
  return tuple(tuple(row) for row in updated_grid)
 
12.75, 2.58653, def cafcccgdeijiecdfjeiagahdiaeabief(I):
  objs = objects(I, True, False, True)  # Find all objects excluding background
  bg = mostcolor(I)  # Identify the background color
  min_obj = argmin(objs, size)  # Find the smallest object
  bottom_row_indices = frozenset((lowermost(min_obj), j) for j in range(leftmost(min_obj), rightmost(min_obj) + 1))
  return paint(I, recolor(1, toobject(bottom_row_indices, I))) # Paint the bottom row of the smallest object with '1' 
 
13.25, 3.1290147, def ejfdchhffegdedicbhjbcdfhfhiadhcd(I):
  objs = objects(I, True, False, True)  # Find all objects excluding background
  min_obj = argmin(objs, size)  # Find the smallest object
  shifted_obj = shift(min_obj, (height(min_obj)-1, 0))  # Shift the object upwards 
  bottom_row = intersection(toindices(shifted_obj), asindices(I))  # Find the overlapping indices representing the bottom row
  return paint(I, recolor(1, toobject(bottom_row, I)))  # Paint the bottom row with '1'
 
12.0, 2.1987128, def bjhfegeccecfehjebbeiggccjichefgg(I):
  objs = objects(I, True, False, True)  # Find all objects excluding background
  min_obj = argmin(objs, size)  # Find the smallest object
  bottom_row = frozenset(
        (lowermost(min_obj), j) for j in range(width(I)) 
        if (lowermost(min_obj), j) in toindices(min_obj)
    )  # Filter for indices on the bottom row of the object
  return paint(I, recolor(1, toobject(bottom_row, I)))  # Paint the filtered bottom row with '1'
 
16.25, 2.4674802, def febccchabbaaeedejcgfgfbdiffdbedf(grid):
  # Get indices of all '1's in the grid
  ones_indices = ofcolor(grid, 1)

  # If no '1' is present, return the original grid
  if not ones_indices:
    return grid

  # Find the rightmost '1' index
  _, rightmost_j = max(ones_indices, key=lambda x: x[1])

  # Replace the rightmost column of '1's with the background color
  new_grid = fill(grid, mostcolor(grid), {(i, rightmost_j) for i in range(height(grid))})

  # Find the first row containing '1' in the original rightmost column
  first_row_with_one = next(i for i, row in enumerate(grid) if row[rightmost_j] == 1)

  # Add a new column of '1's starting from the identified row
  final_grid = tuple(
      tuple(v if j != rightmost_j + 1 else (1 if i >= first_row_with_one else mostcolor(grid)) for j, v in enumerate(row))
      for i, row in enumerate(new_grid)
  )

  return final_grid
 
14.0, 2.7016773, def aecdcdfgaadieibjjacfjaabbdbigbgb(grid):
  # Transpose the grid to work with columns as rows
  transposed_grid = rot90(grid)

  # Find the last row in the transposed grid containing a '1'
  target_row_index = max((i for i, row in enumerate(transposed_grid) if 1 in row), default=-1)

  # If no row contains a '1', return the original grid
  if target_row_index == -1:
    return grid

  # Replace the identified row (originally a column) with the background color
  modified_transposed_grid = tuple(
      tuple(mostcolor(grid) if i == target_row_index else v for v in row)
      for i, row in enumerate(transposed_grid)
  )

  # Find the starting column for the new '1's
  start_col = next((i for i, v in enumerate(transposed_grid[target_row_index]) if v == 1), len(transposed_grid[0]))

  # Add a new '1' column in the transposed grid
  final_transposed_grid = tuple(
      tuple(1 if j == start_col and i >= target_row_index else v for j, v in enumerate(row))
      for i, row in enumerate(modified_transposed_grid)
  )

  # Transpose back to the original orientation
  return rot270(final_transposed_grid)
 
13.25, 2.4891293, def jeaieadcbfdeeedcbcdecaggebdfgebe(I):
  objs = objects(I, True, False, True)
  if len(objs) > 1:
    objs_size = apply(size, objs)
    sorted_objs = order(objs, lambda obj: size(obj))
    smallest_obj = first(sorted_objs)
    second_largest_obj = sorted_objs[1] 
    return paint(I, recolor(color(smallest_obj), second_largest_obj))
  else:
    return I 
 
14.75, 2.5570512, def headedeedejcegfjajjgegcjjafaghde(grid):
  # Find the rightmost object of color '1'
  rightmost_one_obj = argmax(colorfilter(objects(grid, T, F, T), 1), rightmost)

  # If no '1' object is found, return the original grid
  if rightmost_one_obj is None:
    return grid

  # Shift the object one position to the left
  shifted_obj = shift(toindices(rightmost_one_obj), (-1, 0))

  # Recolor the shifted object to '1'
  new_one_obj = recolor(1, shifted_obj)

  # Paint the new object onto the grid
  grid = paint(grid, new_one_obj)

  # Check if there are other '1' objects besides the modified one
  if len(colorfilter(objects(grid, T, F, T), 1)) > 1:
    return grid
  else:
    # Revert the change if no other '1' object exists
    return paint(grid, recolor(8, toindices(rightmost_one_obj)))
 
13.25, 2.4891293, def fffadgbbdhhjeaiejcghbacahccigajb(grid):
  # Find the rightmost '1' cell
  rightmost_one_cell = argmax(ofcolor(grid, 1), lambda cell: cell[1])

  # If no '1' cell is found, return the original grid
  if rightmost_one_cell is None:
    return grid
  
  # Calculate the position of the new '1' cell
  new_one_cell = (rightmost_one_cell[0], rightmost_one_cell[1] - 1)

  # Check if the new '1' cell is within the grid boundaries and is not already a '1'
  if 0 <= new_one_cell[1] < len(grid[0]) and grid[new_one_cell[0]][new_one_cell[1]] != 1:
    # Modify the grid by replacing the original '1' with the background color
    grid = fill(grid, mostcolor(grid), {rightmost_one_cell})
    # Paint the new '1' cell
    grid = paint(grid, {(1, new_one_cell)})

  return grid
 
13.5, 2.5628402, def dbbbebifdaagegfjbfgjbcdiaafecedd(grid):
  # Get the indices of all '1' cells
  one_indices = ofcolor(grid, 1)

  # If no '1' cell is found, return the original grid
  if len(one_indices) == 0:
    return grid

  # Find the rightmost '1' cell
  rightmost_one_cell = argmax(one_indices, lambda cell: cell[1])

  # Create a lambda function to check for '1' cells left of the input cell
  is_left_of_rightmost = lambda cell: cell[1] < rightmost_one_cell[1] and cell[0] == rightmost_one_cell[0]

  # Check if any other '1' cell exists to the left of the rightmost one
  other_one_left_exists = any(apply(is_left_of_rightmost, one_indices))

  # Conditionally shift the rightmost '1' cell
  return branch(
    other_one_left_exists,
    paint(fill(grid, mostcolor(grid), {rightmost_one_cell}), {(1, (rightmost_one_cell[0], rightmost_one_cell[1] - 1))}),
    grid
  )
 
12.0, 2.2234788, def edajjdehcdaeegceababahaacdidbchi(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  target_obj = argmax(objs, lambda obj: rightmost(obj))
  modified_obj = recolor(1, intersection(toindices(target_obj), hfrontier(lrcorner(target_obj))))
  return paint(I, modified_obj)
 
12.75, 2.1921544, def baabcbdadffdeaacibcadefcjeghedea(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  target_obj = argmax(objs, lambda obj: lrcorner(obj)[1])
  right_line = connect(ulcorner(target_obj), lrcorner(target_obj))
  modified_obj = recolor(1, intersection(toindices(target_obj), right_line))
  return paint(I, modified_obj)
 
12.0, 2.3735883, def dbhhfacefdbieaccjacfehadhbgfaabe(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  target_objs = sorted(objs, key=lambda obj: rightmost(obj), reverse=True)[:2]
  modified_grid = I
  for i, obj in enumerate(target_objs):
    line = connect(ulcorner(obj), lrcorner(obj)) if i == 1 else hfrontier(lrcorner(obj))
    modified_grid = paint(modified_grid, recolor(1, intersection(toindices(obj), line)))
  return modified_grid 
 
13.5, 2.2889602, def ghgageacadfcebahjbeebcecdcfcdcca(I):
  objs = objects(I, True, False, True) # Find all objects excluding background
  objs_size = apply(size, objs) #Apply size function on each object to get size
  sec_lrgst_obj_size = sorted(objs_size)[-2] #Get second largest size
  target_obj = extract(objs, lambda obj: size(obj) == sec_lrgst_obj_size)
  bottom_row = frozenset((i, j) for i, j in toindices(target_obj) if i == lowermost(target_obj)) 
  return paint(I, recolor(1, bottom_row))
 
14.0, 2.2600784, def ccebfgfgecfbedecbehhebaeccaicadf(I):
  objs = objects(I, True, False, True)
  sec_lrgst_obj = sorted(objs, key=size)[-2]
  bottom_row_i = lowermost(sec_lrgst_obj)
  return paint(
      I, 
      frozenset({(1, (bottom_row_i, j)) for j in range(width(I)) if (bottom_row_i, j) in toindices(sec_lrgst_obj)})
  )
 
15.25, 2.6151564, def dfeecacajbfaebcfacjiaadacdidiace(grid):
  # Find the rightmost column containing 1
  rightmost_col = max((j for i in range(height(grid)) for j in range(width(grid)) if grid[i][j] == 1), default=None)

  # If no 1 is found, return the original grid
  if rightmost_col is None:
    return grid

  # Find the first row containing 1 in the rightmost column
  first_row = next((i for i in range(height(grid)) if grid[i][rightmost_col] == 1))

  # Create a mask for the rightmost column
  mask = frozenset((i, rightmost_col) for i in range(height(grid)))

  # Fill the rightmost column with background color
  new_grid = fill(grid, mostcolor(grid), mask)

  # Paint the vertical line starting from the first_row
  return paint(new_grid, recolor(1, frozenset((i, rightmost_col) for i in range(first_row, height(grid)))))
 
21.75, 11.539624, def dfdgeddfceeaedebibbicfeiabafedch(grid):
  for j in range(width(grid)-1, -1, -1):
    if any(grid[i][j] == 1 for i in range(height(grid))):
      rightmost_col = j
      break
  else:
    return grid

  for i in range(height(grid)):
    if grid[i][rightmost_col] == 1:
      start_row = i
      break
  
  return paint(
      fill(grid, mostcolor(grid), ofcolor(grid, 1)),
      frozenset(((1, (i, rightmost_col)) for i in range(start_row, height(grid))))
  )
 
15.0, 2.6075993, def aadadjbeebiheccabcbiddeffdcccffc(grid):
  # Transpose the grid for column-wise operations
  transposed = rot90(grid)

  # Find the last column containing a '1'
  target_col_idx = max(
      (j for j in range(width(transposed)) if any(transposed[i][j] == 1 for i in range(height(transposed)))), 
      default=None
  )

  # Return the original grid if no '1' is found
  if target_col_idx is None:
    return grid

  # Find the first '1' in the target column
  target_row_idx = next((i for i in range(height(transposed)) if transposed[i][target_col_idx] == 1))

  # Replace the entire target column with background color
  modified_transposed = tuple(
      tuple(mostcolor(grid) if j == target_col_idx else v for j, v in enumerate(row))
      for row in transposed
  )

  # Add a new column of '1's from the target row onwards
  final_transposed = tuple(
      tuple(1 if j == target_col_idx and i >= target_row_idx else v for j, v in enumerate(row))
      for i, row in enumerate(modified_transposed)
  )

  # Transpose back to original orientation
  return rot270(final_transposed)
 
12.75, 1.8455088, def fbfiaccdefjdefhijiiibhefeddjffgf(grid):
  def get_rightmost_cell(obj):
    return (lowermost(obj), rightmost(obj))

  def is_background(obj):
    return color(obj) == mostcolor(grid)

  rightmost_objs = [argmax(sfilter(objects(grid, T, F, T), lambda o: not is_background(o)), get_rightmost_cell)]
  return paint(grid, recolor(1, merge(apply(toindices, rightmost_objs))))
 
13.0, 1.8758624, def fifhdaeadagheddajfigceebijiddehb(grid):
  def rightmost_on_row(obj):
    row = uppermost(obj)
    objs_on_row = sfilter(objects(grid, T, F, T), lambda o: uppermost(o) == row)
    return obj == argmax(objs_on_row, rightmost)

  return paint(grid, recolor(1, merge(apply(lambda obj: branch(rightmost_on_row(obj), toindices(obj), frozenset()), objects(grid, T, F, T)))))
 
13.5, 1.8824258, def fdhedagadfehegiebdcidbbfdadjfhjc(grid):
  modified_grid = grid
  for i in range(len(grid)):
    objs_in_row = sfilter(objects(grid, T, F, T), lambda obj: any(i == row_index for row_index, col_index in toindices(obj)))
    if objs_in_row:
      rightmost_obj = argmax(objs_in_row, rightmost)
      modified_grid = paint(modified_grid, recolor(1, toindices(rightmost_obj)))
  return modified_grid
 
21.0, 8.798298, def cijafiefhfddegeebafgbceebgcfieee(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  target_obj = argmax(objs, lambda obj: rightmost(obj))
  modified_obj = recolor(1,  {(i, rightmost(target_obj)) for i in range(height(I))})
  return paint(I, modified_obj)
 
22.0, 9.688306, def fdjcbhdfacdfeccibgccfhjjidchbbdf(I):
  rightmost_col = argmax(asindices(I), lambda idx: idx[1])[1]
  modified_grid = tuple(tuple(1 if j == rightmost_col else v for j, v in enumerate(r)) for r in I)
  return modified_grid
 
267.25, 123.179634, def dgbdbfeedfdfefedjcidcdbchccidacf(I):
  return hconcat(crop(I,(0,0),(len(I), len(I[0]) - 1)), tuple(((1,) * len(I),)))
 
16.0, 7.2382474, def haeiccecfbfbefedajchfifiegdicdbb(I):
  objs = objects(I, True, False, True)
  objs_sizes = sorted(apply(size, objs))
  second_largest_size = objs_sizes[-2] if len(objs_sizes) > 1 else objs_sizes[-1] 
  target_obj = extract(objs, lambda obj: size(obj) == second_largest_size)
  bottom_row = frozenset((lowermost(target_obj), j) for j in range(leftmost(target_obj), rightmost(target_obj) + 1))
  return paint(I, recolor(1, toobject(bottom_row, I)))
 
10.0, 2.546919, def eihajiecaaeeeeahahjageifchdahdfd(I):
  objs = objects(I, True, False, True)
  if len(objs) > 1:
    objs_size = apply(size, objs)
    smallest_obj = list(objs)[list(objs_size).index(min(objs_size))]
    second_largest_obj = list(objs)[list(objs_size).index(sorted(objs_size)[-2])] 
    return paint(paint(I, recolor(color(smallest_obj), second_largest_obj)), recolor(8, smallest_obj))
  else:
    return I
 
15.0, 5.2137117, def ecabcficahbfeafeaegfcefhcicaefjg(grid):
  def modify_object(obj):
    rightmost_column = rightmost(obj)
    return frozenset((1, (i, j)) if j == rightmost_column else (v, (i, j)) for v, (i, j) in obj)

  return paint(grid, merge(apply(modify_object, objects(grid, T, F, T)))) 
 
20.5, 10.854948, def djddfgfecbfaeichbeedbedchdcbfdad(grid):
  def get_rightmost_column_indices(obj):
    return {(i, rightmost(obj)) for i in range(uppermost(obj), lowermost(obj) + 1)}

  modified_grid = grid
  for obj in objects(grid, T, F, T):
    modified_grid = fill(modified_grid, 1, get_rightmost_column_indices(obj))
  return modified_grid
 
13.5, 3.7353396, def iecbedafcfdaefffbjhadadadebcadha(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=True)
  target_obj = extract(objs, lambda obj: rightmost(obj) == max(rightmost(o) for o in objs))
  modified_obj = recolor(1,  {(i, rightmost(target_obj)) for i in range(uppermost(target_obj), lowermost(target_obj) + 1)})
  return paint(I, modified_obj)
 
22.75, 8.478927, def dhejfdgbeiageieejafjejfhcgdcdfbd(I):
  for j in range(len(I[0])-1,-1,-1):
    for i in range(len(I)):
      if I[i][j] != mostcommon(I):
        return fill(I, 1, {(k, j) for k in range(len(I)) if I[k][j] == I[i][j]})
 
21.0, 15.474451, def dbfebbjiebhheabeihiiceifagdhfbjb(I):
  objs = objects(I, True, False, True) # Get all objects
  largest_obj = argmax(objs, size)  # Find largest object
  bottom_row = {(lowermost(largest_obj), j) for j in range(leftmost(largest_obj), rightmost(largest_obj) + 1)} # Get bottom row indices
  shifted_row = shift(bottom_row, (0, 1)) # Shift row right
  shifted_obj = toobject(shifted_row, I) # Convert to object with colors
  return paint(cover(I, largest_obj), shifted_obj) # Cover original and paint shifted
 
15.75, 4.3762283, def bigjgfahdcfcegfbahfgfffbccfcceae(I):
  objs = objects(I, True, False, True)
  largest_obj = max(objs, key=lambda obj: len(obj))
  bottom_y = lowermost(largest_obj)
  shifted_bottom_row = {(bottom_y, j + 1) for v, (i, j) in largest_obj if i == bottom_y} 
  new_obj = {(v, (i, j + 1) if i == bottom_y else (i, j)) for v, (i, j) in largest_obj}
  return paint(I, recolor(1, toobject(shifted_bottom_row, I)))
 
16.5, 3.5734484, def aabgeejdaiegecfijchcdjddeifdccdj(I):
  objs = objects(I, True, False, True)
  largest_obj = max(objs, key=lambda obj: (size(obj), -lrcorner(obj)[0]))
  bottom_row = {(i, j) for v, (i, j) in largest_obj if i == lowermost(largest_obj)}
  new_grid = paint(I, recolor(mostcolor(I), toobject(bottom_row, I)))
  return paint(new_grid, recolor(1, toobject(shift(bottom_row, (0, 1)), new_grid)))
 
17.5, 3.8514047, def chhegaedjdggebajbbccdbdfecdigbfd(grid):
  # Find the rightmost object of 1s
  objs = objects(grid, True, False, False)
  target_obj = argmax(objs, lambda obj: rightmost(obj) if color(obj) == 1 else -1)

  # If no object of 1s exists, return the original grid
  if not target_obj or color(target_obj) != 1:
    return grid

  # Get the rightmost cell's location
  rightmost_cell = (uppermost(target_obj), rightmost(target_obj))

  # Create a vertical line patch from the rightmost cell
  line_patch = frozenset((i, rightmost_cell[1]) for i in range(rightmost_cell[0], len(grid)))

  # Fill the object with background and draw the line
  return paint(fill(grid, mostcolor(grid), toindices(target_obj)), recolor(1, line_patch))
 
15.75, 2.6767144, def jhghccfbdhfjefeabdaebfdeebgcagfa(grid):
  # Find the rightmost column containing a '1'
  rightmost_col = max((j for j in range(len(grid[0])) if any(grid[i][j] == 1 for i in range(len(grid)))), default=None)

  # If no '1' is found, return the original grid
  if rightmost_col is None:
    return grid

  # Get background color
  bg_color = mostcolor(grid)

  # Create a new grid, filling the rightmost '1' column with the background color
  new_grid = tuple(
    tuple(bg_color if j == rightmost_col and grid[i][j] == 1 else v for j, v in enumerate(row))
    for i, row in enumerate(grid)
  )

  # Draw a vertical line of '1's at the rightmost column
  final_grid = tuple(
      tuple(1 if j == rightmost_col and i >= 0 else v for j, v in enumerate(row))
      for i, row in enumerate(new_grid)
  )
  return final_grid
 
17.75, 3.842061, def ecaffdehcdajeabbibffhijfffjcacac(grid):
  # Find the rightmost object with color 1
  target_obj = argmax(
      objects(grid, True, False, False),
      lambda obj: rightmost(obj) if color(obj) == 1 else -1
  )

  # If no such object exists, return the original grid
  if target_obj is None or color(target_obj) != 1:
    return grid

  # Get background color and line's column index
  bg_color = mostcolor(grid)
  line_col = rightmost(target_obj)

  # Replace the object with background color
  grid = paint(grid, recolor(bg_color, toindices(target_obj)))

  # Create a vertical line object at the designated column
  for i in range(len(grid)):
    if grid[i][line_col] == bg_color:
      grid = paint(grid, {(1, (i, line_col))})
  return grid
 
13.5, 2.436111, def eagggedeigededgajabbdbdddaaefefb(I):
  objs = objects(I, True, False, True)
  if len(objs) > 1:
    sorted_objs = order(objs, size)
    return paint(paint(I, recolor(color(sorted_objs[0]), sorted_objs[-2])), recolor(8, sorted_objs[0]))
  else:
    return I
 
17.0, 8.841646, def jiffbbdfbdhfeebibfbccabbbcbedheg(grid):
  def rightmost_obj_in_row(row_index):
    return argmax(sfilter(objects(grid, T, F, T), lambda obj: any(k == row_index for k, l in toindices(obj))), rightmost)

  modified_grid = grid
  for i in range(len(grid)):
    rightmost_obj = rightmost_obj_in_row(i)
    if rightmost_obj:
      modified_grid = paint(modified_grid, recolor(1, {(i, rightmost(rightmost_obj)) for i, j in toindices(rightmost_obj)}))
  return modified_grid
 
11.5, 4.234151, def jbbhbhbhhfcceciaacbfadacfbdeebeb(grid):
  def modify_grid(grid):
    for i, row in enumerate(grid):
      for j in range(len(row)-1, -1, -1):
        if row[j] != 9:
          grid = paint(grid, recolor(1, {(i, j)}))
          break
    return grid
  return modify_grid(grid)
 
12.0, 1.7926222, def ehcccdejdhbgefifidddhiijcabfheha(I):
  objs = objects(I, T, F, T)
  rightmost_obj = extract(objs, lambda obj: rightmost(obj) == valmax(objs, rightmost))
  return paint(I, recolor(1, sfilter(rightmost_obj, lambda cell: cell[1][1] == leftmost(rightmost_obj)))) 
 
22.0, 13.5888605, def ecbbbbiafdcdeigejaccceecejhhifaj(I):
    rightmost_col = valmax(range(len(I[0])), lambda j: len(sfilter(asindices(I), lambda loc: loc[1] == j and index(I, loc) != mostcolor(I))))
    return paint(I, recolor(1, frozenset((i, rightmost_col) for i in range(len(I)))))
 
20.5, 7.7610464, def dcedifiaidcheahhbfffggcicfecfeab(I):
  objs = objects(I, True, False, True)
  largest_obj = argmax(objs, lambda obj: (size(obj), -lrcorner(obj)[0]))
  shifted_obj = shift(largest_obj, (0, 1))
  intersection = toindices(shifted_obj) & backdrop(largest_obj)
  return paint(I, recolor(1, toobject(intersection, I)))
 
17.5, 6.21303, def aajbefchegbdecgijdfbbgdfbdebeabd(I):
  objs = objects(I, True, False, True)
  largest_obj = argmax(objs, lambda obj: (size(obj), -lrcorner(obj)[0]))
  bottom_left = (lowermost(largest_obj), leftmost(largest_obj))
  bottom_right = (lowermost(largest_obj), rightmost(largest_obj))
  shifted_row = connect(add(bottom_left, (0, 1)), add(bottom_right, (0, 1)))
  return paint(I, recolor(1, toobject(shifted_row, I)))
 
20.25, 19.372847, def eaaehebeeifdecfcbgbebcjbaihahaeg(grid):
  # Iterate through columns from right to left
  for j in range(len(grid[0]) - 1, -1, -1):
    # Check if the column contains a '1'
    if any(grid[i][j] == 1 for i in range(len(grid))):
      # Find the first row index containing a '1' in this column
      first_one_row = next(i for i in range(len(grid)) if grid[i][j] == 1)
      # Fill the column with '1's from the found row onwards
      grid = fill(grid, 1, frozenset((i, j) for i in range(first_one_row, len(grid))))
      # Replace the original '1's with the background color
      return replace(grid, 1, mostcolor(grid))
  return grid
 
