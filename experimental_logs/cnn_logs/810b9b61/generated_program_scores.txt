10.333333333333334, 2.962654, def eiifcebadcfdedbibdjfcjhceeaiejea(I):
    # Identify all objects in the grid
    objs = objects(I, T, T, T) 
    # Recolor objects formed by '1' to '3'
    recolored_objs = frozenset({recolor(THREE, obj) if color(obj) == ONE else obj for obj in objs})  
    # Paint the recolored objects onto a blank canvas 
    O = paint(canvas(ZERO, shape(I)), merge(recolored_objs)) 
    return O
 
10.333333333333334, 2.962654, def eiibecibffgbeadejeeecdaeaechchbb(I):
  O = replace(I, 1, 3)
  return O
 
10.333333333333334, 2.962654, def ijejbjgfjbaceaecaaegiehcicddihad(I):
  objs = objects(I, True, True, False)
  filtered_objs = sfilter(objs, lambda obj: color(obj) == 1)
  recolored_objs = apply(lambda obj: recolor(3, obj), filtered_objs)
  O = I
  for obj in recolored_objs:
    O = paint(O, obj)
  return O
 
10.333333333333334, 2.962654, def cfbacbhghcdbeacdjfbgabfdhebfccce(I):
  O = replace(I, ONE, THREE)
  return O 
 
10.333333333333334, 2.962654, def bdjbcdfbbgafeaifbjgabddbbbjaceah(I):
  bg = mostcolor(I)
  O = tuple(tuple(THREE if v != bg else v for v in r) for r in I)
  return O
 
90.33333333333333, 15.053978, def hegfajbcbcfjefbabdcehdecidfgcedf(I):
  objs = objects(I, False, True, False) # Get all objects in the grid
  recolored_objs = apply(lambda obj: recolor(3, obj) if color(obj) == 1 else obj, objs) # Recolor if color is 1
  O = I # Start with the original grid
  for obj in recolored_objs:
    O = paint(O, obj) # Paint each (potentially recolored) object back onto the grid
  return O
 
166.66666666666666, 5.7635236, def gfjeabgfbjabefffjgacbjbidccbfajb(I):
  target_grid = canvas(1, shape(I)) # Create a grid filled with '1's, matching the input shape
  return cellwise(I, target_grid, 3) # Compare cell-wise: if cells match, keep the input value, otherwise use '3'
 
92.33333333333333, 14.751718, def dgceehbfefiaedafabjbbafecfebiceb(I):
  O = tuple(
      tuple(
          THREE if any(cell != mostcolor(I) for cell in row) else mostcolor(I) for cell in row
      )
      for row in I
  )
  return O
 
166.66666666666666, 5.7635236, def aabbcagcacajedceibjdebhdbigjideg(I):
  objs = fgpartition(I)
  unchanged_objs = sfilter(objs, lambda obj: color(obj) == 1) # Extract objects with color '1'
  O = paint(canvas(3, shape(I)), merge(unchanged_objs))  # Create canvas with '3' and paint unchanged objects 
  return O
 
13.333333333333334, 1.2687635, def fbijfjegaajbecagihaddfdiejifgbef(I):
  target_obj = first(colorfilter(objects(I, True, False, False), 1))  # Get the first object with color 1
  painted_grid = paint(I, recolor(3, target_obj))  # Paint the object with color 3
  return painted_grid 
 
90.33333333333333, 15.053978, def fajbeegeabegefgiafeffbbgchigefac(I):
  objs = objects(I, univalued=False, diagonal=True, without_bg=False)
  filtered_objs = colorfilter(objs, ONE)
  recolored_objs = apply(lambda obj: recolor(THREE, obj), filtered_objs)
  O = paint(I, merge(recolored_objs))
  return O
 
156.33333333333334, 56.24541, def afgbgahhfcdbejjcaeccchjbefcfabdb(I):
  O = paint(canvas(mostcolor(I), shape(I)), recolor(3, asobject(I)))
  return O
 
31.0, 55.824825, def bbjfabcedfcheeabjjfcfajihajjgjdi(I):
  O = cellwise(I, replace(I, 1, 3), mostcolor(I)) 
  return O
 
31.0, 55.824825, def ccbabbcehbbaefbbjfgcadjdchfceefg(I):
  # Define a function to apply to each cell pair
  def recolor_cell(a, b):
    return THREE if a == ONE else b
  # Apply the function to each cell in the input grid and a grid filled with '0'
  O = papply(recolor_cell, I, canvas(ZERO, shape(I)))
  # Convert the resulting tuples back into a grid
  O = tuple(zip(*O))
  return O
 
156.33333333333334, 56.24541, def hbfaiejcgdgcehafidjgcjfjdhghefcd(I):
  filtered_grid = tuple(tuple(3 if v != mostcommon(I) else v for v in r) for r in I)
  return filtered_grid
 
15.666666666666666, 1.3556814, def gjbdfbeafcecehhcbcacdegjibaaacca(I):
  objs = objects(I, T, T, T) 
  largest_obj = argmax(objs, size)
  O = paint(cover(I, largest_obj), recolor(THREE, largest_obj))
  return O
 
166.66666666666666, 8.015, def faeecbadhdefeccbaibejijadfafchad(I):
  filtered_grid = replace(I, mostcolor(I), NEG_ONE)
  objs = objects(filtered_grid, T, T, F)
  largest_obj = argmax(objs, size)
  O = paint(filtered_grid, recolor(THREE, largest_obj))
  return O
 
24.666666666666668, 2.7336898, def ccifegcaihejefbeaffehacfeedbeded(I):
  objs = objects(I, T, T, T)
  obj_sizes = apply(size, objs)
  largest_obj_index = argmax(enumerate(obj_sizes), lambda x: x[1])[0]
  largest_obj = totuple(objs)[largest_obj_index]
  O = fill(I, THREE, toindices(largest_obj))
  return O
 
17.666666666666668, 2.2594438, def cbhbgdeedcaeehadjfiiacdfbaabeafa(I):
  objs = objects(I, True, False, True)
  least_common_obj = argmin(objs, lambda obj: colorcount(I, color(obj)))
  recolored_objs = frozenset(
      recolor(3, obj) if obj != least_common_obj else obj
      for obj in objs
  )
  O = paint(canvas(mostcolor(I), shape(I)), merge(recolored_objs))
  return O
 
166.66666666666666, 5.7635236, def dfdagaciiahbeddeiabcjcccdcebedae(I):
  objs = partition(I)
  color_counts = {color(obj): len(obj) for obj in objs if color(obj) != mostcolor(I)}
  least_common_color = min(color_counts, key=color_counts.get)
  recolored_objs = frozenset(
      recolor(3, obj) if color(obj) != least_common_color else obj
      for obj in objs
  )
  O = paint(canvas(mostcolor(I), shape(I)), merge(recolored_objs))
  return O
 
156.33333333333334, 56.24541, def ghbdfeeaggfdebddijacffddehejedaa(I):
  O = I  # Initialize output as input
  for v in palette(I) - {mostcommon(I)}:  # Iterate over colors except background
    O = replace(O, v, 3)  # Replace each non-background color with 3
  return O
 
166.66666666666666, 5.7635236, def ehcffcdgbjhiejbeadejgjeiecehbbbj(I):
  for v in palette(I):  # Iterate over each color in the grid
    if colorcount(I, v) != colorcount(I, mostcommon(I)): # If color count is different from most common (background)
      target_obj = toobject(ofcolor(I, v), I) # Extract the object with this color
      return paint(I, recolor(THREE, target_obj)) # Recolor and paint, then return immediately
  return I # If no target_obj is found (all same color), return the original grid
 
10.333333333333334, 2.962654, def hfhbfbddehabedfgjjaaeegebhcbadgi(I):
  objs = objects(I, True, False, True)  # Identify connected objects, excluding background
  recolored_objs = apply(lambda obj: recolor(3, obj), objs) # Recolor all objects to 3
  O = I
  for obj in recolored_objs:
    O = paint(O, obj) # Paint the recolored objects onto a copy of the input
  return O 
 
7.666666666666667, 2.696608, def fbbfbijcbcegeadaiefajeiiedeacaih(I):
  objs = objects(I, True, False, True)
  big_objs = sfilter(objs, lambda o: size(o) > 2) 
  small_objs = sfilter(objs, lambda o: size(o) <= 2)
  recolored_big_objs = apply(lambda o: recolor(1 if color(o) == 3 else 3, o), big_objs)
  recolored_objs = combine(small_objs, recolored_big_objs)
  O = paint(canvas(mostcolor(I), shape(I)), merge(recolored_objs))
  return O 
 
20.666666666666668, 3.1423426, def daedddbbabgfeifjjcbgddaebbagahjd(I):
  objs = objects(I, True, False, True)
  sorted_objs = order(objs, lambda obj: -size(obj))
  color_map = {color(sorted_objs[0]): color(sorted_objs[1]), color(sorted_objs[1]): color(sorted_objs[0])}
  recolored_objs = apply(lambda o: recolor(color_map[color(o)], o), objs)
  O = paint(canvas(mostcolor(I), shape(I)), merge(recolored_objs))
  return O
 
21.666666666666668, 18.152393, def bejbgbhceaeaejabajbhbbagcbgchbfb(I):
  objs = objects(I, True, False, True)
  sizes = apply(size, objs)
  big_size = maximum(sizes)
  small_size = minimum(sizes)
  big_objs = sfilter(objs, lambda o: size(o) == big_size)
  small_objs = sfilter(objs, lambda o: size(o) == small_size)
  recolored_big_objs = apply(lambda o: recolor(3 if color(o) == 1 else 1, o), big_objs)
  recolored_objs = combine(small_objs, recolored_big_objs)
  O = paint(canvas(mostcolor(I), shape(I)), merge(recolored_objs))
  return O
 
31.0, 11.062424, def jbdjdhdceeeaeaejjgdafhcfbfdfhabb(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=False)
  target_color = THREE 
  result = I
  for obj in objs:
    if color(obj) != mostcommon(I) and len(obj) < 5:
      result = paint(result, recolor(target_color, toindices(obj)))
  return result
 
21.666666666666668, 3.1300251, def gdacbheafbeaeafaabejjeibfagbefie(I):
  target_objs = sizefilter(objects(I, univalued=True, diagonal=False, without_bg=False), 1)
  target_color = THREE
  result = I
  for obj in target_objs:
    result = paint(result, recolor(target_color, toindices(obj)))
  return result
 
166.33333333333334, 25.494356, def cfefifceabieefdiidfcaijbgabfcdjf(I):
  objs = objects(I, univalued=True, diagonal=False, without_bg=False)
  large_objs_indices = mfilter(objs, lambda obj: color(obj) != mostcommon(I) and len(obj) >= 5)
  result = replace(I, ONE, THREE)
  return fill(result, ONE, large_objs_indices)
 
166.66666666666666, 5.7635236, def feechheechhhedccicfdbicecdhadfcb(I):
    return cellwise(I, canvas(ONE, shape(I)), THREE) 
 
39.333333333333336, 29.237965, def iaicbafbhdafeddibbedcjfagfafiebf(I):
  O = canvas(0, shape(I)) # Create an empty canvas of same size as input
  for obj in objects(I, True, False, True):
    O = paint(O, recolor(3, normalize(obj))) # Normalize, recolor, and paint each object 
  return O
 
20.666666666666668, 3.1423426, def cbfdceajaacdebfeaadccigfebbccbjj(I):
  return cellwise(I, paint(canvas(0, shape(I)), recolor(1, mfilter(objects(I, T, T, T), lambda o: color(o) == 1))), I)
 
20.666666666666668, 3.1423426, def gifddadbebccedhfjghfhcbccdbdcdef(I):
    # Get all objects, excluding the background
    objs = objects(I, T, T, T)
    # Recolor objects to 3 if their color is not 1, otherwise keep original color
    recolored_objs = frozenset({recolor(THREE, obj) if color(obj) != ONE else obj for obj in objs}) 
    # Paint the recolored objects onto a blank canvas with the same shape as the input
    O = paint(canvas(ZERO, shape(I)), merge(recolored_objs))
    return O 
 
20.666666666666668, 3.1423426, def bbfcfbbijfafeijeibfhccfedjaaffgc(I):
    return paint(canvas(3, shape(I)), asobject(I))
 
156.33333333333334, 56.24541, def jaecchbbjcebeefeicdcbhcgeabbfgfa(I):
  non_background_indices = difference(asindices(I), ofcolor(I, mostcommon(I)))
  return paint(I, recolor(3, non_background_indices))
 
10.666666666666666, 2.9049027, def ccaceejgdbedeceeahcdgjbdjjbjcjch(I):
  return tuple(tuple(3 if v == 1 and len(ofcolor(crop(I, (max(i-1,0), max(j-1,0)), (min(2, len(I)-i), min(2, len(I[0])-j))), 1)) > 0 else v for j, v in enumerate(r)) for i, r in enumerate(I))
 
9.666666666666666, 2.822482, def afeebbfceigieaddageecebfihgdfcjb(I):
  def recolor_condition(v, i, j):
    return v == 1 and any(I[k][l] == 1 for k, l in dneighbors((i, j)) if 0 <= k < len(I) and 0 <= l < len(I[0]))
  return tuple(tuple(3 if recolor_condition(v, i, j) else v for j, v in enumerate(r)) for i, r in enumerate(I))
 
31.0, 55.824825, def dabgfdjaaadhedbjaheiiiefededfjdc(I):
  return paint(canvas(0, shape(I)), recolor(3,  merge(apply(lambda o: toobject(o, I), sizefilter(objects(I, False, True, False), 1))))) 
 
90.33333333333333, 15.053978, def befcdccdgaceebchijhbehccjfdfjhhd(I):
  objs = objects(I, univalued=False, diagonal=True, without_bg=False)
  target_objs = colorfilter(objs, 1)
  result = I
  for obj in target_objs:
    result = paint(result, recolor(3, toindices(obj)))
  return result
 
26.666666666666668, 13.981856, def gcdjfhdidhcjecfdbfdbbfcbcfjccdib(I):
  objs = objects(I, True, False, True)
  mid = height(I) // 2
  top_obj = argmax(sfilter(objs, lambda o: center(o)[0] < mid), size)
  bottom_obj = argmax(sfilter(objs, lambda o: center(o)[0] >= mid), size)
  O = paint(
      paint(canvas(mostcolor(I), shape(I)), recolor(color(bottom_obj), top_obj)),
      recolor(color(top_obj), bottom_obj)
  )
  return O
 
15.666666666666666, 1.3556814, def abbbeddhaeefebdfagfbcgdjhfcacccd(I):
  objs = objects(I, True, False, True)  # Extract objects
  largest_obj = argmax(objs, size) # Find the largest object
  O = paint(  # Paint the largest object with '3'
      cover(I, largest_obj),  # Create a canvas by removing the largest object
      recolor(3, largest_obj) # Recolor the largest object with '3'
  ) 
  return O
 
10.333333333333334, 2.962654, def fceacccihgeiedbdafaeebeacbiffcbc(I):
  objs = objects(I, True, False, True)
  largest_obj_color = color(argmax(objs, size))  # Get the color of the largest object

  def recolor_cell(v, i, j):  # Define a function to recolor cells
    return 3 if v == largest_obj_color else (largest_obj_color if v == 3 else v)

  O = tuple(
      tuple(recolor_cell(v, i, j) for j, v in enumerate(row)) # Apply recolor_cell to each cell
      for i, row in enumerate(I)
  )
  return O
 
15.666666666666666, 2.0208573, def achddbheecdcedicahbfdebecbcccaia(I):
  objs = objects(I, T, T, T)  # Identify all objects in the grid
  filtered_objs = sfilter(objs, lambda obj: not bordering(obj, I)) # Filter objects that are not bordering
  recolored_objs = apply(lambda obj: recolor(THREE, obj), filtered_objs) # Recolor the filtered objects
  O = I
  for obj in recolored_objs:
    O = paint(O, obj) # Paint the recolored objects onto the grid
  return O
 
13.333333333333334, 1.2687635, def chabceaebhgeeffejdffgabcefdidieb(I):
  objs = objects(I, T, T, T) # Identify all objects in the grid
  right_obj = extract(objs, lambda obj: rightmost(obj) > width(I) // 2 ) # Extracts the object on the right side
  O = fill(I, THREE, toindices(right_obj)) # Recolors the extracted object to 3
  return O
 
24.333333333333332, 2.8396933, def gbgifdhhdccaecedibgibbagfibcdhfe(I):
  objs = objects(I, T, T, T) # Identify all objects in the grid
  filtered_objs = sfilter(objs, lambda obj: centerofmass(obj)[1] > width(I) // 2) # Filters the objects on the right half
  recolored_objs = apply(lambda obj: recolor(THREE, obj), filtered_objs)  # Recolor the filtered objects
  O = I
  for obj in recolored_objs:
    O = paint(O, obj) # Paint the recolored objects onto the grid
  return O
 
90.33333333333333, 15.053978, def ccfcfdidfecieeeajedbfbeifebgedbd(I):
  objs = objects(I, False, False, False)
  recolored_objs = apply(lambda obj: recolor(3, obj) if color(obj) == 1 else obj, objs)
  return paint(canvas(0, shape(I)), merge(recolored_objs))
 
177.0, 4.6487875, def ddbbggefjfdhebcajdaddbbhfhbgejaj(I):
  obj = asobject(I)
  colors = palette(obj)
  largest_color = argmax(colors, lambda c: colorcount(I, c))
  O = paint(canvas(mostcolor(I), shape(I)), recolor(3, sfilter(obj, lambda cell: cell[0] == largest_color)))
  return O
 
28.0, 15.121661, def dbjaaeeaddbjecdeiaadcbbaiijaejda(I):
  objs = objects(I, True, False, True)
  largest_obj = argmax(objs, size)
  largest_grid = paint(canvas(0, shape(I)), largest_obj)
  O = cellwise(I, largest_grid, lambda a, b: 3 if b != 0 else a)
  return O
 
20.333333333333332, 3.2437212, def eebbdbbiccabedfebegbgiajggfgfaaj(I):
  objs = objects(I, True, False, True)
  largest_obj = argmax(objs, size)
  locs = occurrences(I, largest_obj)
  O = I
  for i, row in enumerate(O):
    for j, val in enumerate(row):
      if (i, j) in locs:
        O = paint(O, {(3, (i, j))})
  return O
 
156.33333333333334, 56.24541, def fefcdaaaacfgeadabfaafbhddeieabcf(I):
  objs = objects(I, T, F, T)
  O = canvas(THREE, shape(I))
  for obj in objs:
    if (height(I)-1, width(I)-1) in toindices(obj):
      O = paint(O, obj)
  return O
 
166.66666666666666, 5.7635236, def eeeficfcabajeejjafdgcfdabaebaddd(I):
  colors = palette(I) # Extract the distinct colors in the input grid
  largest_color = argmax(colors, lambda c: colorcount(I, c)) # Find the most frequent color
  O = replace(I, largest_color, 3)  # Replace the most frequent color with '3'
  return O
 
155.33333333333334, 53.7108, def edeafjaejfcfebecafffccfdhceddfbh(I):
  return paint(fill(I, THREE, asindices(I)), toobject( {(height(I) - 1, width(I) - 1)}, I)) # Fills with 3 and then paints the bottom right object with original color
 
166.66666666666666, 5.7635236, def ifffddccbeecedceibfceafehjhedfde(I):
  return tuple(tuple(1 if v == 1 else 3 for v in r) for r in I)
 
31.0, 55.824825, def ciaacafafjeeecgjadhfaihjbhadejcj(I):
  # Create a mask by replacing '1' with '3' and everything else with background color
  mask = replace(replace(I, 1, 3), other(palette(I), 1), mostcolor(I))
  # Perform a cell-wise merge of the original grid and the mask, using the mask's value if it's not the background 
  return cellwise(I, mask, mostcolor(I))
 
23.0, 20.935095, def caceacccgcibeibbjfciahdegefjejed(I):
  objs = objects(I, T, T, T)  # Identify all objects
  obj_sizes = apply(size, objs) # Calculate the size of each object
  largest_obj = argmax(objs, size) # Find the largest object
  target_color = mostcolor(largest_obj) # Determine the target color 
  O = paint(canvas(mostcolor(I), shape(I)), recolor(target_color, largest_obj)) # Recolor the largest object
  return O
 
10.333333333333334, 2.962654, def jjfibhdfhfdceaefifgegegdfcdaddfe(I):
  objs = objects(I, True, False, False)
  target_objs = colorfilter(objs, 1)
  recolored_objs = apply(lambda obj: recolor(3, obj), target_objs)
  O = I
  for obj in recolored_objs:
    O = paint(O, obj)
  return O
 
10.333333333333334, 2.962654, def gifdifcdahbjegjfiacdcgfehdbcgjba(I):
  objs = objects(I, T, T, T)  # Identify all objects in the grid
  target_objs = sfilter(objs, lambda obj: color(obj) != mostcommon(I)) # Select objects that don't have the most common color
  O = I # Initialize output grid
  for obj in target_objs:
    O = paint(O, recolor(3, obj))  # Recolor the target objects to 3
  return O
 
18.0, 2.1685328, def afibcbhfacacegfaiagaaicbdjaddfef(I):
  objs = objects(I, T, T, T) # Get all objects
  target_obj = extract(objs, lambda obj: color(obj) != mostcolor(I)) # Select the first object that's not the background color
  O = paint(I, recolor(3, target_obj)) # Recolor the target object and paint it on the grid
  return O
 
10.333333333333334, 2.962654, def bejjfafccdebejdcbbijigdbcbdfcaeg(I):
  objs = objects(I, True, False, True)  # Extract all objects except background
  largest_obj = argmax(objs, size) # Find the largest object
  target_color = color(largest_obj) # Get the color of the largest object
  recolored_objs = frozenset({recolor(target_color, obj) for obj in objs}) # Recolor all objects to the target color
  O = paint(canvas(ZERO, shape(I)), merge(recolored_objs)) # Paint recolored objects onto a blank canvas
  return O
 
31.0, 55.824825, def acbeejfihjabejfjiffjbbbjcefdfabb(I):
    objs = objects(I, T, T, T) # Extract objects
    largest_obj_color = mostcolor(I)  # Get the color of the largest object
    O = paint(canvas(ZERO, shape(I)),
              merge(frozenset({recolor(largest_obj_color, obj) if color(obj) != largest_obj_color else obj for obj in objs}))) # Recolor and paint
    return O
 
156.33333333333334, 56.24541, def bebbcifdfafjejjhjajiidaccjabdafb(I):
  objs = objects(I, T, F, T)
  target_color = 1 
  bg_color = mostcolor(I)
  filtered_objs = colorfilter(objs, target_color)
  recolored_grid = paint(I, recolor(bg_color, merge(filtered_objs)))
  O = replace(recolored_grid, bg_color, 3)
  return O
 
169.0, 21.720053, def dhgcfciaibghedfbacbfchbdfdbedace(I):
    target_color = 1
    bg_color = mostcolor(I)
    O = tuple(tuple(THREE if v == bg_color else (bg_color if v == target_color else v) for v in row) for row in I)
    return O
 
17.0, 1.4980726, def ccaicaicjeceeecajdcfbidfcebddehj(I):
  objs = objects(I, T, T, T) # Get all objects
  objs_no_bg = sfilter(objs, lambda obj: color(obj) != mostcolor(I)) # Filter out background objects
  target_obj = argmin(objs_no_bg, size) # Select the smallest object
  O = paint(I, recolor(3, target_obj)) # Recolor the target object to 3 and paint it
  return O
 
20.666666666666668, 3.1423426, def eadbffffcdbbeiacjifdgghihfbebece(I):
  """
  Swaps colors 1 and 3 in the input grid.
  """
  return replace(replace(I, 1, 3), 3, 1) 
 
15.333333333333334, 2.2145913, def ehheddafbaaeebgdagafbdfdacdddhcd(I):
  """
  Swaps colors 1 and 3 in the input grid.
  """
  return switch(I, 1, 3)
 
96.66666666666667, 55.89549, def ffdadjhebfgdeecjjaiadjbcfabfffhg(I):
  """
  Swaps colors 1 and 3 in the input grid.
  """
  objs = objects(I, False, False, False)
  swapped_objs = frozenset({recolor(1 if color(obj) == 3 else 3 if color(obj) == 1 else color(obj), obj) for obj in objs})
  return paint(canvas(0, shape(I)), merge(swapped_objs))
 
23.666666666666668, 22.14748, def jdcchhcbccejececafhddabdadeagbcf(I):
  """
  Swaps colors 1 and 3 in the input grid.
  """
  return cellwise(I, replace(replace(I, 1, 3), 3, 1), 0)
 
15.333333333333334, 2.2145913, def dbbfiaadcadeedagifebcbdfgchddjcb(I):
    objs = objects(I, T, F, F) 
    ones = colorfilter(objs, ONE)
    threes = colorfilter(objs, THREE)
    recolored_ones = mapply(lambda obj: recolor(THREE, obj), ones)
    recolored_threes = mapply(lambda obj: recolor(ONE, obj), threes)
    O = paint(paint(canvas(ZERO, shape(I)),recolored_ones), recolored_threes)
    return O
 
166.66666666666666, 54.788277, def hfdeiefbabbaeecabedaebefbbeibgbj(I):
    threes = objects(replace(I, ONE, ZERO), T, F, F)
    ones = objects(replace(I, THREE, ZERO), T, F, F)
    recolored_ones = mapply(lambda obj: recolor(THREE, obj), ones)
    recolored_threes = mapply(lambda obj: recolor(ONE, obj), threes)
    O = paint(paint(canvas(ZERO, shape(I)),recolored_ones), recolored_threes)
    return O
 
161.66666666666666, 20.991737, def hedahhabficgefdiafbdbdieicfafcch(I):
  filled_grid = canvas(THREE, shape(I)) # Create a canvas filled with '3's (Program_A)
  objs = objects(I, T, T, T)  # Extract all objects from the input grid (Program_B)
  smallest_objs = sfilter(objs, lambda obj: size(obj) != size(argmax(objs, size))) # Identify objects that are not the largest (Program_D)
  return paint(filled_grid, merge(smallest_objs))  # Paint the smaller objects onto the filled canvas (Program_D)
 
16.0, 2.3212516, def fibccighdfcceaijadfbcjaebghbbgcg(I):
  objs = objects(I, True, False, True)
  if len(objs) < 2:
    return I  # Nothing to swap if less than two objects
  largest_obj = argmax(objs, size)
  objs = remove(largest_obj, objs)
  second_largest_obj = argmax(objs, size)
  return paint(paint(cover(I, largest_obj), recolor(color(second_largest_obj), largest_obj)), recolor(color(largest_obj), second_largest_obj)) 
 
18.333333333333332, 2.7904863, def afdjibhjgahcedbeiciiahdaeejhfeda(I):
  objs = objects(I, True, False, True)
  if len(objs) < 2:
    return I
  sorted_objs = order(objs, size)
  first_color = color(sorted_objs[-1])
  second_color = color(sorted_objs[-2])
  return replace(replace(I, first_color, 5), second_color, first_color)
 
20.666666666666668, 3.1423426, def aagijecdecdeeabbadfgfcdgfffibhbe(I):
  """
  This version uses nested replace functions for a direct color swap.
  """
  O = replace(replace(I, ONE, THREE), THREE, ONE)
  return O
 
22.0, 2.7056336, def jfbeaceifiagefdbibgfahbijeibhaci(I):
  target_color = color(first(objects(I, T, F, T)))
  objs_to_replace = objects(I, T, F, T) - {first(objects(I, T, F, T))}
  O = I
  for obj in objs_to_replace:
    O = replace(O, color(obj), target_color)
  return O
 
168.0, 55.224014, def aaebabdibcaeebdejdebcdbffcjcifjd(I):
  first_obj = first(objects(I, T, F, T))
  O = paint(canvas(color(first_obj), shape(I)), first_obj)
  return O
 
8.333333333333334, 1.8255808, def bgghhebaebcbecdbbfgdcffhffhcefdb(I):
  objs = fgpartition(I) # Directly get non-background objects
  target_obj = argmax(objs, size) # Select largest object
  O = paint(I, recolor(3, target_obj)) # Recolor to 3 and paint
  return O
 
12.333333333333334, 2.704342, def ddibjfejbhchecabajiiaagidcfejffd(I):
  objs = objects(I, T, F, T)
  bg = mostcolor(I) 
  color_counts = [(colorcount(I, color(obj)), color(obj)) for obj in objs]
  least_common = min(color_counts)[1]
  most_common = max(color_counts)[1]
  O = replace(I, least_common, most_common)
  O = replace(O, most_common, least_common)
  return O 
 
8.333333333333334, 1.8255808, def dhhafbcifedeebecidachabibhdebjbj(I):
  objs = objects(I, T, F, T) # Extract objects excluding background
  color_counts = [(colorcount(I, color(obj)), color(obj)) for obj in objs] # Count occurrences of each color
  sorted_colors = order(color_counts, lambda x: x[0]) # Sort colors based on occurrences
  least_common = sorted_colors[0][1] # Get the least common color
  second_least_common = sorted_colors[1][1] # Get the second least common color
  O = replace(I, least_common, second_least_common) # Swap the two least common colors
  O = replace(O, second_least_common, least_common) # Swap back to original positions
  return O
 
9.666666666666666, 2.822482, def dbajcfbeibdbefadjfjcdgcbefajifeg(I):
  objs = objects(I, T, T, T)  # Identify all objects in the grid.
  filtered_objs = sfilter(objs, lambda obj: color(obj) != mostcommon(I) and size(obj) > 1) # Select objects that are not the background color and have a size greater than 1.
  recolored_objs = apply(lambda obj: recolor(3, obj), filtered_objs)  # Recolor the selected objects to 3.
  O = I
  for obj in recolored_objs: # Paint the recolored objects onto the original grid.
    O = paint(O, obj)
  return O
 
19.666666666666668, 2.2790315, def dfcfjbfedeaeedeaafajibfededbacfc(I):
  objs = objects(I, T, T, T)
  sorted_objs = order(objs, size) # Sort objects by size
  largest_obj = first(sorted_objs) if len(sorted_objs) > 0 else None # Get the largest object 
  second_largest_obj = first(sorted_objs[1:]) if len(sorted_objs) > 1 else None # Get the second largest object

  O = paint(I, recolor(3, largest_obj)) if largest_obj is not None else I # Recolor and paint the largest object
  O = paint(O, recolor(3, second_largest_obj)) if second_largest_obj is not None else O # Recolor and paint the second largest object 
  return O
 
9.333333333333334, 1.4758173, def chiiceedacededcaicebbhiffbdahdbj(I):
  def swap_if_different(grid, a, b):
    return branch(a != b, switch(grid, a, b), grid)
    
  objs = fgpartition(I)
  c1 = color(first(order(objs, size)))
  c2 = color(first(order(remove(first(objs), objs), size)))
  return swap_if_different(I, c1, c2)
 
156.33333333333334, 56.24541, def cagebfbjgbcfedjfjjddicjhcdbacbdj(I):
  objs = objects(I, T, T, T)  # Extract all objects from the input grid
  obj_sizes = apply(size, objs) # Calculate the size of each object
  largest_obj = argmax(objs, size) # Find the largest object
  target_color = color(largest_obj) # Determine the color of the largest object
  
  return paint(
      canvas(mostcolor(I), shape(I)), # Create a canvas filled with the background color
      recolor(target_color, asindices(I)) # Recolor all cells with the target color
  )
 
161.66666666666666, 20.991737, def aefdefafibjgeaceifabddfbhfhjbbjf(I):
  objs = objects(I, T, T, T)  # Identify all objects in the grid
  largest_obj = argmax(objs, size)  # Find the largest object
  bg_color = mostcolor(I)  # Identify the background color
  obj_color = color(largest_obj)  # Get the color of the largest object
  O = replace(I, obj_color, bg_color)  # Replace largest object color with background color
  O = replace(O, bg_color, obj_color)  # Replace the original background color with the object color
  return O
 
23.666666666666668, 22.14748, def bgcifadeibhdecgciceiedcedebicjge(I):
  objs = objects(I, T, T, T)
  largest_obj = argmax(objs, size)
  O = paint(cover(I, largest_obj), recolor(mostcolor(I), largest_obj)) # Cover the largest object with background color and then paint it with object color
  return O
 
161.66666666666666, 26.584078, def ehedfjbjbaceefhciafibfcfhjddbhab(I):
  objs = objects(I, T, T, T) 
  largest_obj = argmax(objs, lambda obj: colorcount(I, color(obj))) # Find the largest object by counting the most frequent color in the grid
  bg_color = mostcolor(I)
  obj_color = color(largest_obj)
  O = replace(I, obj_color, bg_color)
  O = replace(O, bg_color, obj_color)
  return O
 
169.0, 4.8972416, def acaacfhaacbaeegdibefhcbdehbdbdab(I):
  def swap_least_colors(grid):
    p = palette(grid)
    bg = mostcommon(grid)
    c1 = min(p - {bg})
    c2 = min((p - {bg, c1}) or {c1})
    return switch(grid, c1, c2)
    
  return swap_least_colors(I)
 
76.66666666666667, 13.786457, def bfcjgjhdcjcbehaiaaabbbejabcdfaef(I):
  ones = ofcolor(I, ONE)
  return fill(I, THREE, branch(size(ones) > 0, delta(ones), ones))
 
169.66666666666666, 4.5699654, def jagibfdfbhdaeajbbdjjbaefdibfbfdd(I):
    bg = mostcolor(I) # Find background color
    objs_no_bg = objects(I, True, True, True) # Extract all objects, excluding the background
    largest_obj = argmax(objs_no_bg, size) # Get the largest object 
    O = switch(I, bg, color(largest_obj))  # Switch the background color with the color of the largest object
    return O
 
171.0, 65.1674, def aafhdbecbfaaeichjccccfigebajbabc(I):
    bg = mostcolor(I)  # Identify background color
    objs_no_bg = fgpartition(I) # Partition the grid into objects, excluding the background
    largest_obj = argmax(objs_no_bg, size) # Find the largest object
    O = paint(replace(I, bg, -1), recolor(bg, largest_obj))  # Replace background with a temporary color (-1), then recolor the largest object to the original background color
    return O
 
25.0, 27.569443, def gfcdjjecedcbeejaigcidbdffaeaaeif(I):
  objs = fgpartition(I) # Partition the grid into objects, excluding the background
  bg_obj = argmax(objs, lambda o: colorcount(I, color(o))) # Find the object with the most common color (which represents the background)
  O = paint(I, recolor(mostcolor(I), bg_obj)) # Recolor the background object with the most common color in the original grid
  return O
 
171.0, 4.411214, def jhgcbcbjbeffecbgiacddacfecfebffc(I):
  bg = mostcolor(I) # Identify background color
  objs = objects(I, True, True, True)  # Extract all objects (including diagonals), excluding the background
  largest_obj = argmax(objs, lambda obj: colorcount(I, color(obj))) # Find the object with the maximum count of its color
  O = switch(I, bg, color(largest_obj)) # Switch the background color with the color of the identified largest object
  return O
 
23.0, 20.935095, def fcgbcbbcgaibeffjjddddiahfcgedeij(I):
    objs = objects(I, T, T, T)
    not_one_indices = mfilter(objs, lambda obj: color(obj) != ONE)
    O = paint(canvas(ZERO, shape(I)), recolor(THREE, toobject(not_one_indices, I)))
    return O
 
18.0, 7.253556, def abdffacibfiaeeadiajibadgcdcefefc(I):
    # Identify objects with connected pixels of the same color
    objs = objects(I, T, T, F)
    # Find the object with the color '1'
    target_obj = extract(objs, lambda obj: color(obj) == ONE) 
    # Swap the color of the target object with the background color 
    O = paint(cover(I, target_obj), recolor(mostcolor(I), target_obj))
    return O
 
18.333333333333332, 11.637016, def bddabhbhdadfeecciedfdefeebgcagif(I):
  def swap_colors(grid, c1, c2):
    return replace(replace(grid, c1, TEN), c2, c1)

  color_counts = [(colorcount(I, c), c) for c in palette(I) - {mostcolor(I)}]
  sorted_counts = order(color_counts, lambda x: x[0])
  first_color = sorted_counts[0][1]
  second_color = sorted_counts[1][1]
  return swap_colors(I, first_color, second_color)
 
28.0, 15.121661, def ecaeeacjajbbeihhaejaedfhhaedddad(I):
  def find_and_swap(grid):
    colors = list(palette(grid) - {mostcolor(grid)})
    first_color = leastcommon(colors)
    colors.remove(first_color)
    second_color = leastcommon(colors)
    return replace(replace(grid, first_color, TEN), second_color, first_color)
  return find_and_swap(I)
 
171.0, 82.227684, def chiadcacadbjecfeafeacfjjeghceeea(I):
  def swap_least_common(grid):
    color_counts = [(v, (i, j)) for i, r in enumerate(grid) for j, v in enumerate(r) if v != mostcommon(grid)]
    least_common_color = leastcommon(color_counts)
    second_least_common_color = leastcommon([(v, (i, j)) for v, (i, j) in color_counts if v != least_common_color[0]])
    
    for v, (i, j) in color_counts:
      if v == least_common_color[0]:
        grid = replace(grid, v, TEN)
      elif v == second_least_common_color[0]:
        grid = replace(grid, v, least_common_color[0])
    return grid
  return swap_least_common(I)
 
