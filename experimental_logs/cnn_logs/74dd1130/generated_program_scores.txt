4.0, 2.5988877, def dbacdehdehabefafiajdjdabacdeddaa(I):
    rotated_grid = canvas(mostcolor(I), shape(I))  # Create a blank canvas
    for i in range(height(I)):
        for j in range(width(I)):
            if index(I, (i, j)) != mostcolor(I):  # For every non-background cell
                rotated_grid = paint(rotated_grid, {(index(I, (i, j)), (j, height(I) - i - 1))})  # Place the color at the rotated position
    return rotated_grid 
 
10.75, 79.48126, def egebeacdcgcjedbaiidccedbgedcceda(I):
  w = width(I) // 2 
  top = crop(I, (0, w), (height(I) // 2, 1))
  bottom = crop(I, (height(I) // 2, w), (height(I) - height(I) // 2, 1))
  left = crop(I, (0, 0), (height(I), w))
  right = crop(I, (0, w + 1), (height(I), w))
  return hconcat(hconcat(left, bottom), hconcat(top, right))
 
5.0, 3.0157762, def fadcdaeaijfjeebbacegjigffeedadij(I):
  mid = width(I) // 2
  return tuple(
      tuple(I[i][j] if j != mid else I[height(I)-1-i][j] if i < height(I) // 2 else I[i-height(I) // 2][j] 
            for j in range(width(I))) 
      for i in range(height(I))
  )
 
5.25, 2.9408972, def fjhahgfdiefaeahejihcacegahgijdbc(I):
  h, w = height(I), width(I)
  return tuple(
      tuple(I[i][j] if j != w // 2 else I[(i + h // 2) % h][j] for j in range(w)) 
      for i in range(h)
  )
 
4.75, 3.6375039, def adgbecbgbajeefafaeiffiabcaaaggei(I):
  c = width(I) // 2
  return tuple(
    tuple(v if j != c else I[i + height(I) // 2][j] if i < height(I) // 2 else I[i - height(I) // 2][j] 
          for j, v in enumerate(row))
    for i, row in enumerate(I)
  )
 
4.75, 2.931291, def edafaafjihjfeigbiicgcbfeecbgddad(I):
  # Find the least common color
  c = leastcolor(I)
  # Extract the object with the least common color
  obj = first(colorfilter(objects(I, T, F, F), c))
  # Calculate the offset based on object's height and width
  offset = (-(height(obj) - 1), width(obj) - 1) 
  # Move the object and return the modified grid
  O = move(I, obj, offset)
  return O
 
5.25, 3.7022283, def ecieehaefabeeicgabefbedjcbaddajb(I):
  c = leastcolor(I)
  obj = first(colorfilter(partition(I), c))
  i, j = ulcorner(obj)
  O = move(I, obj, (-i, j))
  return O
 
4.5, 2.861752, def afiiiecacdegejbbbaidbbefbbbfaajg(I):
  c = leastcolor(I)
  obj = first(colorfilter(objects(I, T, F, T), c))
  h, w = shape(obj)
  offset = (-h + 1, w - 1) if h > w else (-h + 1, 0) 
  O = move(I, obj, offset)
  return O
 
5.5, 3.1918228, def daidfgbiacadecfbbgfjaaedifcdfdbf(I):
  c = leastcolor(I)
  obj = first(colorfilter(fgpartition(I), c))
  center_i, center_j = centerofmass(obj)
  O = move(I, obj, (1 - center_i, center_j))
  return O
 
4.5, 2.861752, def dchbiehfifcjedfhibceaefdaacjcedg(I):
  objs = fgpartition(I)
  rotated_objs = mapply(lambda obj: toobject(shift(toindices(obj), (0, 1 - width(obj))), I), objs)
  O = paint(I, rotated_objs)
  return O
 
8.0, 10.006086, def fejbdbcdgcjcefcgjhaefcdbdcdeccdd(I):
    O = canvas(0, shape(I)) # Initialize an empty canvas
    for i in range(1, len(I) - 1):
        for j in range(1, len(I[0]) - 1):
            O = fill(O, I[i][j], dneighbors((i, j))) # Fill neighbors with center value
    return O
 
6.5, 3.1548033, def afjiaeadedfaeeajaejebgaccfecdbhd(I):
  return rot90(dmirror(I)) 
 
4.5, 2.861752, def eicafechhefcececbaafiheabgieddfc(I):
  return rot90(cmirror(hmirror(I)))
 
5.75, 3.4524243, def febbadagdaefebhdaafegeefcefdecdj(I):
  objs = fgpartition(I)
  target_obj = argmax(objs, lambda obj: abs(centerofmass(obj)[1] - len(I[0]) // 2))
  direction = (0, -1) if centerofmass(target_obj)[1] > len(I[0]) // 2 else (0, 1)
  O = move(I, target_obj, direction)
  return O 
 
5.5, 4.0696344, def hcceecfcebdbegediifagdfeeceddbde(I):
  objs = list(fgpartition(I))
  objs.sort(key=lambda x: -len(x))
  target_obj = objs[0] if len(objs[0]) != len(objs[1]) else objs[1]
  direction = (0, -1) if centerofmass(target_obj)[1] > len(I[0]) // 2 else (0, 1)
  O = move(I, target_obj, direction)
  return O
 
6.25, 5.2598786, def eeeacbadejefebbfabbiabfaaedfdcbc(I):
  objs = fgpartition(I)
  O = I
  for obj in objs:
    for i in range(height(obj)):
      color = index(I, (uppermost(obj) + i, leftmost(obj)))
      O = fill(O, color, {(uppermost(obj) + i, rightmost(obj))})
      O = fill(O, mostcolor(I), {(uppermost(obj) + i, leftmost(obj))})
  return O
 
5.5, 5.8395247, def ahbcbadbbggeefajbbcbiicgdbagdefd(I):
  O = I
  for i in range(len(I)):
    row = I[i]
    O = fill(O, row[0], {(i, len(row)-1)})
    O = fill(O, mostcolor(I), {(i, 0)})
  return O
 
6.5, 3.0114975, def affffegdgebeedgcjdjechfadjbbcaig(I):
  return rot270(dmirror(I))
 
4.5, 3.1855438, def cddbhcdfbebheabjibfchafceghagfbf(I):
    return tuple(tuple(I[j][width(I)-i-1] for j in range(height(I))) for i in range(width(I)))
 
6.0, 4.298615, def acgiejcdbcciehchichdhfabdjbaeafd(I):
  return paint(I, mapply(lambda obj: recolor(color(obj), 
                                           frozenset((i, (j + 1) % width(obj)) for i, j in toindices(obj))), 
                         fgpartition(I)))
 
5.0, 4.7188125, def daedebfeaaacecfbjiecfbbeeadcaehc(I):
  objs = fgpartition(I)  # Identify objects excluding background
  def rotate_object(obj):
    indices = toindices(obj) 
    shifted_indices = frozenset((j, height(indices)-1-i) for i, j in indices)  # Rotate indices
    return recolor(color(obj), shifted_indices)  # Recolor with original object's color
  rotated_objs = mapply(rotate_object, objs)  # Apply rotation to each object
  O = paint(I, rotated_objs)  # Paint rotated objects onto original grid
  return O
 
5.75, 5.276289, def ajeedabijeiiejgabicbbfgcfgceceaf(I):
  objs = fgpartition(I)
  def rotate_object(obj):
    indices = toindices(obj)
    h = height(indices)
    w = width(indices)
    # Transpose and reverse each row for 90-degree rotation
    shifted_indices = frozenset((j, i) for i in range(w) for j in range(h-1, -1, -1) if (h-1-j, i) in indices)  
    return recolor(color(obj), shifted_indices)
  rotated_objs = mapply(rotate_object, objs)
  return paint(I, rotated_objs)
 
0.0, 0.0, def hjehicadcdffejbcjcdchbfadchjeagb(I):
  O = canvas(mostcolor(I), shape(I)) # Create an empty canvas of the same size as input
  for i in range(height(I)):
    for j in range(width(I)):
      O = paint(O, {(index(I, (i, j)), (j, i))})  # Place the color at the flipped index
  return O 
 
