0.043209876543209874, 5.6732764, def fhcfgdifeaffeabbbcabchcaddaabifj(I):
  # Find indices of all non-background cells
  non_bg_indices = difference(asindices(I), ofcolor(I, mostcolor(I)))
  # Expand each index to create a small square object
  small_squares = apply(lambda idx: frozenset({(ONE, (i, j)) for i in range(idx[0]-1, idx[0]+2) for j in range(idx[1]-1, idx[1]+2)}), non_bg_indices)
  # Paint all small squares onto the input grid
  painted = paint(I, merge(small_squares))
  # Replace all non-background values with '1'
  O = replace(painted, ONE, ONE)
  return O
 
0.38888888888888884, 57.32553, def bcaiecaehjeeecifbeebbcdaehbabbhg(I):
  # Define a function to create a filled box object given upper-left and lower-right corners
  def filled_box(ul, lr): 
    return frozenset({(ONE, (i, j)) for i in range(ul[0], lr[0]+1) for j in range(ul[1], lr[1]+1)})
  # Get bounding box corners for each object
  objs = objects(I, T, F, T)
  corners = apply(lambda obj: (ulcorner(obj), lrcorner(obj)), objs)
  # Create filled boxes for each object 
  filled_boxes = apply(lambda corner_pair: filled_box(*corner_pair), corners)
  # Paint the filled boxes onto the input grid
  O = paint(I, merge(filled_boxes))
  return O
 
0.0, 0.0, def fbijdeadcjcjebddbejeeifceddcaccd(I):
    objs = objects(I, T, F, T)  # Identify all objects
    for obj in objs:
        box_indices = outbox(toindices(obj))  # Create outbox indices
        I = fill(I, 1, box_indices)  # Fill the outbox with '1's
    return I
 
