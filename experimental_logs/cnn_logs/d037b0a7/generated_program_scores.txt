3.3333333333333335, 7.2131257, def ficfjdfbeideefdbadhiebeabggdgfdd(I):
    O = I
    objs = objects(I, T, F, T)
    tl_obj = first(order(objs, uppermost))
    for obj in objs:
      if obj != tl_obj:
        direction = position(obj, tl_obj)
        shifted_obj = shift(tl_obj, direction)
        O = underfill(O, color(obj), toindices(shifted_obj))
    return O
 
3.3333333333333335, 7.2131257, def defcghjaibbbedeaahiigdbafaadhbag(I):
    h = height(I)  # Get the height of the grid
    w = width(I)  # Get the width of the grid
    x1 = [(I[i][j], (i, j)) for i in range(h) for j in range(w)] # Get all cell-index pairs
    x2 = sfilter(x1, lambda x: x[1][1] == w - 1)  # Get cell-index pairs in the last column
    x3 = sfilter(x2, lambda x: x[0] != 0)  # Filter out background cells (assuming 0 is background)
    x4 = apply(lambda x: (x[0], (x[1][0] + 1, x[1][1])), x3)  # Shift cell-index pairs one row down
    x5 = apply(lambda x: (x[0], x[1][1]), x4)  # Extract only the shifted indices
    O = fill(I, x3[0][0], x5) if x3 else I # Fill shifted indices with the last column's color
    return O
 
6.333333333333333, 12.020661, def hcbhcdfbdbgfebdabjfebfdfgbehhfdj(I):
  x1 = objects(I, T, F, T)
  x2 = apply(lambda x: (color(x), rightmost(x)), x1)  # Extract color and rightmost index for each object
  x3 = argmax(x2, lambda x: x[1])  # Find object with maximum rightmost index
  target_color, target_col = x3  # Get color and column of target object
  x4 = apply(lambda row: row + (target_color,), I)  # Extend each row with the target color
  O = x4
  return O
 
4.333333333333333, 5.408821, def ajabdfaaiiddegfjbbeiadafbcdgabcc(I):
  # Find the largest object in the input grid
  obj = argmax(objects(I, T, T, T), size)
  # Get the bottom-most row index of the largest object
  bottom_row = lowermost(obj)
  # Get all indices below the largest object until the bottom of the grid
  indices_below = frozenset((i, j) for i in range(bottom_row + 1, len(I)) for j in range(width(obj)))
  # Fill those indices with the color of the largest object
  O = fill(I, color(obj), indices_below)
  return O
 
2.3333333333333335, 4.7898, def ffegciifeibfecafjjdeccfadjaaeeaa(I):
  # Find the objects, excluding the background
  objs = objects(I, T, T, T)
  # Sort objects by size in descending order
  sorted_objs = order(objs, size)
  # Get the largest object
  largest_obj = first(sorted_objs)
  # Shift the object downwards by its height
  shifted_obj = shift(largest_obj, (height(largest_obj), 0))
  # Paint the shifted object onto the input grid
  O = paint(I, shifted_obj)
  return O
 
3.6666666666666665, 5.6268415, def affhecceaadaefihjhecibfijbcabffa(I):
    # Find all objects in the grid
    objs = objects(I, True, True, True)
    # Find the largest object by size
    largest_obj = argmax(objs, lambda o: len(o))
    # Get the color of the largest object
    obj_color = color(largest_obj)
    # Create a function to check if an index is below the largest object
    is_below = lambda i, j: i > lowermost(largest_obj)
    # Create a new grid by iterating over each cell 
    O = tuple(tuple(obj_color if is_below(i, j) else I[i][j] for j in range(len(I[0]))) for i in range(len(I)))
    return O
 
1.6666666666666667, 3.668868, def jefjbefbabfaeeicbbbbebeajbhifdai(I):
    # Get the largest object 
    obj = argmax(objects(I, True, True, True), size)
    # Get the color of the largest object
    c = color(obj)
    # Get the width of the largest object
    w = width(obj)
    # Create a function to check if an index belongs to the area below the object
    is_below_obj = lambda i, j: i >= lowermost(obj) and leftmost(obj) <= j < leftmost(obj) + w
    # Create a new grid by modifying the input grid based on the condition
    O = tuple(tuple(c if is_below_obj(i, j) else I[i][j] for j in range(len(I[0]))) for i in range(len(I)))
    return O
 
2.3333333333333335, 3.9579356, def bffggfdecgjfeddgjabjjaacjhchcefa(I):
    # Find the largest object
    largest_object = argmax(objects(I, True, True, True), size)
    # Get the lowermost row index of the largest object
    lowermost_row = lowermost(largest_object)
    # Get the color of the largest object
    target_color = color(largest_object)
    # Iterate through each row of the input grid
    O = tuple(
        tuple(
            # If the row index is greater than the lowermost row of the object, 
            # and the cell's color matches the background color, replace it with the target color
            target_color if i > lowermost_row and cell == mostcolor(I) else cell
            for cell in row
        )
        for i, row in enumerate(I)
    )
    return O
 
3.0, 4.5440307, def eefccbdaeebfefcaidffbcijccbfddch(I):
    # Find the smallest object
    small_obj = argmin(objects(I, T, F, F), size)
    
    # Find the color of the smallest object
    target_color = color(small_obj)
    
    # Find all objects except the smallest one
    other_objects = objects(I, T, F, F) - {small_obj}
    
    # Find the closest object to the smallest one
    closest_obj = argmin(other_objects, lambda obj: manhattan(small_obj, obj))
    
    # Connect the smallest object to the closest one
    connection = connect(center(small_obj), center(closest_obj))
    
    # Fill the connection with the target color
    O = fill(I, target_color, connection)
    return O
 
3.3333333333333335, 7.2131257, def hcdbdbcejcjfeeihbdfagfddedbbbddi(I):
    # Find the least common color
    target_color = leastcolor(I)
    
    # Find the object with the target color
    target_obj = extract(objects(I, T, F, F), lambda obj: color(obj) == target_color)
    
    # Calculate the bounding box of the target object
    bbox = backdrop(target_obj)
    
    # Find all indices within the bounding box with a different color
    fill_indices = bbox & ofcolor(I, other(palette(I), target_color))
    
    # Fill the indices with the target color
    O = fill(I, target_color, fill_indices)
    return O
 
3.6666666666666665, 5.652643, def ajacaceecchfegbhicggjcjbfaebadcb(I):
    # Get a list of all objects
    objs = list(objects(I, T, F, F))
    
    # Find the object with the smallest vertical span
    target_obj =  argmin(objs, lambda obj: lowermost(obj) - uppermost(obj))
    
    # Get the color of the target object
    target_color = color(target_obj)
    
    # Determine the direction to extend the object
    direction = (1, 0) if uppermost(objs[0]) < uppermost(target_obj) else (-1, 0)
    
    # Extend the target object
    extension = shoot(center(target_obj), direction)
    extended_object = toobject(extension, I)
    
    # Paint the extended object with the target color
    O = paint(I, recolor(target_color, extended_object))
    return O
 
4.0, 10.739168, def cbfdgjfbdgddefcibeicgaedadfegace(I):
  x1 = rightmost(asindices(I)) 
  x2 = {(i, x1) for i in range(height(I))} 
  x3 = extract(asobject(I), lambda c: c[1] in x2)
  O = fill(I, x3[0], x2)
  return O 
 
2.6666666666666665, 3.3130598, def efaffhjjcaiaebcabdcfidgcgjjjajci(I):
  x1 = objects(I, T, F, T)
  x2 = argmax(x1, lambda obj: rightmost(obj))
  x3 = color(x2)
  x4 = toindices(x2)
  x5 = x4 | {(i, rightmost(x4)) for i in range(height(I)) if (i, rightmost(x4)) not in x4}
  O = fill(I, x3, x5)
  return O
 
4.0, 4.720499, def feccbideccidefbejadcfjieeegejfaj(I):
  x1 = dmirror(I)
  x2 = objects(x1, T, F, T)
  x3 = argmax(x2, lambda obj: leftmost(obj))
  x4 = color(x3)
  x5 = toindices(x3)
  x6 = x5 | {(i, leftmost(x5)) for i in range(height(x1)) if (i, leftmost(x5)) not in x5}
  x7 = fill(x1, x4, x6)
  O = dmirror(x7)
  return O 
 
4.666666666666667, 7.9921474, def icagfghhbecdejeaadbacageeaaadaae(I):
  objs = objects(I, T, F, T)
  target_obj = argmin(objs, size)
  target_color = color(target_obj)
  downward_fill = mfilter(objs, lambda obj: position(target_obj, obj)[0] == 1)
  O = paint(I, recolor(target_color, downward_fill))
  return O
 
3.0, 6.1719174, def fbbcbcidahdjefgjbdefdchjbdedgfeb(I):
  O = I  # Initialize output as input
  for i in range(len(I) - 1): # Iterate through rows except the last
    row = I[i]
    rightmost_color = last(row) # Find the color of the rightmost object
    if rightmost_color != mostcommon(I): # If it's not background
      for j in range(i + 1, len(I)): # Iterate through rows below
        O = fill(O, rightmost_color, {(j, len(row) - 1)}) # Fill the rightmost cell with the color
  return O
 
21.333333333333332, 24.459583, def cafgfdeeiihhedfdjcdeciaifjcbgagc(I):
  O = tuple(tuple(I[k][j] if k >= i and I[i][j] != mostcommon(I) else I[k][j] for j in range(len(I[0]))) for i in range(len(I)) for k in range(len(I)))
  return O
 
3.6666666666666665, 9.603104, def jeahdcfddaageaefabbefagehfiaibec(I):
  # Find the largest object, excluding the background.
  largest_obj = argmax(objects(I, T, T, T), size)
  # Get the height of the largest object.
  obj_height = height(largest_obj)
  # Create a grid of the same dimensions as the input, filled with zeros.
  filled_grid = canvas(0, shape(I))
  # Paint the largest object onto the zero-filled grid.
  painted_grid = paint(filled_grid, largest_obj)
  # Shift the painted grid downwards by the object's height.
  shifted_grid = shift(asobject(painted_grid), (obj_height, 0))
  # Merge the original object with the shifted object on the zero-filled grid.
  merged_obj = combine(largest_obj, shifted_grid)
  # Paint the merged object onto the input grid.
  O = paint(I, merged_obj)
  return O
 
4.333333333333333, 10.377419, def bbhdcajdbeafeabeacaadbbceaiieaad(I):
  # Find the smallest color
  target_color = leastcolor(I)
  
  # Find the object with the smallest color
  target_object = extract(objects(I, T, F, F), lambda obj: color(obj) == target_color)
  
  # Get the column of the object
  column = leftmost(target_object)
  
  # Create a vertical line from the bottom of the object to the bottom of the grid
  extension = connect((lowermost(target_object), column), (len(I)-1, column))
  
  # Fill the extension with the color of the object below
  below_color = index(I, (lowermost(target_object)+1, column))
  O = fill(I, below_color, extension)
  return O
 
3.0, 6.508585, def fjcehchdddchecciaeeddgcgagdhefba(I):
  # Find the object with the minimum value
  min_obj = argmin(objects(I, T, F, F), lambda obj: min(v for v, _ in obj))
  
  # Get the indices below the object
  extension = {(i, leftmost(min_obj)) for i in range(lowermost(min_obj) + 1, len(I))}
  
  # Fill the extension with the color below the object
  fill_color = index(I, (lowermost(min_obj) + 1, leftmost(min_obj)))
  O = fill(I, fill_color, extension)
  return O
 
3.3333333333333335, 6.4405966, def cfcegifdiaicegajbeeejaecfgcfcjgj(I):
  # Find the object with the smallest value
  min_obj = argmin(objects(I, T, F, F), lambda obj: min(palette(obj)))
  
  # Get the bottom-most cell of the object
  bottom_cell = (lowermost(min_obj), leftmost(min_obj))
  
  # Extend the object downwards with the color below
  O = paint(I, recolor(index(I, add(bottom_cell, DOWN)), shoot(bottom_cell, DOWN)))
  return O
 
3.6666666666666665, 4.1762094, def jibgagahdcafeechacieddaciaigciec(I):
  # 1. Identify objects, excluding background (similar to Program_A)
  x1 = objects(I, T, F, T)
  # 2. Find the object furthest down (leverage 'lowermost')
  target_obj = argmax(x1, lambda obj: lowermost(obj))
  target_color = color(target_obj)
  # 3. Extend color downwards
  for i in range(lowermost(target_obj) + 1, height(I)):
    I = fill(I, target_color, {(i, j) for j in range(width(I))})
  # 4. Find the rightmost object
  rightmost_obj = argmax(x1, lambda obj: rightmost(obj))
  # 5. Extend the color of the rightmost object rightwards 
  for j in range(rightmost(rightmost_obj) + 1, width(I)):
    I = fill(I, color(rightmost_obj), {(i, j) for i in range(height(I))})
  return I
 
3.3333333333333335, 7.2131257, def aecccaghfchaebaebbeeihfbecbbffai(I):
  # 1. Find the bottom-most row with multiple colors (inspired by Program_B's 'shoot')
  split_row = max([i for i in range(height(I)) if len(set(I[i])) > 1], default=0)
  # 2. Split the grid horizontally
  top, bottom = I[:split_row + 1], I[split_row + 1:]
  # 3. Determine the color to fill the bottom part
  fill_color = mostcolor(bottom) if bottom else mostcolor(top)
  # 4. Fill the bottom part with the determined color
  bottom = tuple(tuple(fill_color for _ in range(width(I))) for _ in range(len(bottom)))
  # 5. Concatenate the top and bottom parts back together
  O = vconcat(top, bottom) 
  return O
 
2.0, 2.824631, def eaaehhhdbdeaefchigjjgaicedbbhbib(I):
  O = I
  for j in range(width(I)):
    # 1. Find the bottom-most non-background color in the column
    fill_color = next((I[i][j] for i in range(height(I)-1, -1, -1) if I[i][j] != mostcolor(I)), mostcolor(I))
    # 2. Fill the column downwards with the found color
    O = fill(O, fill_color, {(i, j) for i in range(height(I))})
  return O
 
4.333333333333333, 6.613271, def afhjjfejacehehhfaajbfdeddehjbfia(I):
  # 1. Find rightmost object
  objs = objects(I, True, False, True)
  rightmost_object = argmax(objs, lambda obj: rightmost(obj))
  # 2. Extend its color to the right edge
  O = fill(I, color(rightmost_object), {(i, j) for i in range(height(I)) for j in range(rightmost(rightmost_object), width(I))})
  # 3. Find bottom-most object
  bottom_object = argmax(objs, lambda obj: lowermost(obj))
  # 4. Extend its color to the bottom edge
  O = fill(O, color(bottom_object), {(i, j) for j in range(width(I)) for i in range(lowermost(bottom_object), height(I))})
  return O
 
1.0, 1.9277849, def baiagcdajcehejbbigehhdcahhdeaagj(I):
  O = I
  # 1. Iterate through rows from the second-to-last upwards
  for i in range(height(I) - 2, -1, -1):
    for j in range(width(I)):
      # 2. If the cell below is background color, fill with the color above
      if O[i+1][j] == mostcolor(I):
        O = fill(O, O[i][j], {(i+1, j)})
  return O
 
3.6666666666666665, 8.902513, def cdccfbdieeabebdcaffefbijfhdgbhba(I):
    h, w = shape(I)
    ci, cj = center(asindices(I))
    target_color = I[ci][cj]
    new_grid = list(list(row) for row in I)
    for di in (-1, 1):
        if 0 <= ci + di < h:
            for j in range(w):
                if I[ci + di][j] != mostcolor(I) and I[ci][j] == target_color:
                    new_grid[ci + di][j] = target_color
    return tuple(tuple(row) for row in new_grid)
 
3.0, 7.2093616, def gbefdfbfgfcaebifjcbhachfcbfhhcad(I):
    O = I
    for j in range(len(I[0])):  
        obj_color = None
        for i in range(len(I)):  
            if I[i][j] != mostcommon(I):  
                obj_color = I[i][j]
                break
        if obj_color is not None:
            O = fill(O, obj_color, {(k, j) for k in range(i, len(I))})
    return O
 
4.0, 4.486257, def cdcfffacghddebbbjcgbiaedajcfdceb(I):
  # Find the largest object
  obj = argmax(objects(I, True, True, True), size)
  # Create a function to determine if a cell needs to be filled
  fill_condition = lambda i, j: i == lowermost(obj) + 1 and any((i - 1, k) in toindices(obj) for k in range(leftmost(obj), rightmost(obj) + 1))
  # Create the output grid by applying the fill condition
  O = tuple(tuple(color(obj) if fill_condition(i, j) else I[i][j] for j in range(len(I[0]))) for i in range(len(I)))
  return O
 
3.0, 3.2898312, def edfgfcacjabfeafcaaijdegdadfaaffj(I):
    dom_color = leastcolor(difference(I, {mostcolor(I)})) # Find dominant color
    O = I
    for i in range(len(I)):
        for j in range(len(I[0])):
            if I[i][j] == dom_color:
                for k in range(i + 1, len(I)):
                    if O[k][j] == 0:
                        O = fill(O, dom_color, {(k, j)}) 
                for l in range(j + 1, len(I[0])):
                    if O[i][l] == 0:
                        O = fill(O, dom_color, {(i, l)})
    return O
 
2.6666666666666665, 3.038384, def dbgjabcaehefebeaieceeigddajedcif(I):
    dom_color = leastcolor(remove(mostcommon(I), I)) 
    expansion = set()
    for i, row in enumerate(I):
        for j, value in enumerate(row):
            if value == dom_color:
                expansion |= {(i + k, j) for k in range(1, len(I) - i) if I[i + k][j] == 0}
                expansion |= {(i, j + k) for k in range(1, len(row) - j) if I[i][j + k] == 0}
    O = fill(I, dom_color, frozenset(expansion))
    return O
 
0.6666666666666666, 1.948118, def ejdccbbedcddehcdifdfgbeacghjehbe(I):
  O = I
  for i in range(height(I) - 1):
    for j in range(width(I) - 1, -1, -1):
      if O[i][j] != mostcolor(I):
        fill_color = O[i][j]
        for k in range(i + 1, height(I)):
          if O[k][j] == mostcolor(I):
            O = fill(O, fill_color, {(k, j)})
        break
  return O
 
4.0, 5.673987, def gjigfgfahcajedajjfiifahecgfeffcb(I):
  O = I
  for i in range(height(I) - 1):
    rightmost_color = extract(I[i], lambda x: x != mostcolor(I))
    if rightmost_color is not None:
      O = fill(O, rightmost_color, {(j, width(I) - 1) for j in range(i + 1, height(I))})
  return O
 
2.3333333333333335, 5.07433, def feddbfgbebceeaccjhhafjdabffhbeif(I):
  O = I
  for obj in objects(I, False, False, True):
    if rightmost(obj) == width(I) - 1:
      fill_color = color(obj)
      O = fill(O, fill_color, {(i, rightmost(obj)) for i in range(uppermost(obj) + 1, height(I))})
  return O
 
0.0, 0.0, def jfiahbdcegdfefbbbbhbajabjbddfbfc(I):
  O = I
  for j in range(width(I)):
    for i in range(height(I) - 1):
      if O[i][j] != mostcolor(I) and O[i + 1][j] == mostcolor(I):
        O = fill(O, O[i][j], {(k, j) for k in range(i + 1, height(I))})
        break
  return O
 
