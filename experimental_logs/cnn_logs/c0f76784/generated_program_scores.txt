13.666666666666666, 21.833292, def heidbeccjcjaefcaaajacaafbifffecd(I):
  objs = objects(I, T, F, T)  # Extract objects, excluding background
  fives = toindices(extract(objs, matcher(color, 5))) # Find all '5' cells
  squares = sfilter(objs, square)  # Extract square objects

  # Find adjacent squares
  adj_squares = mfilter(squares, lambda sq: any(manhattan({ind}, toindices(sq)) == 1 for ind in fives))
  
  # Find diagonally/orthogonally adjacent squares below 5s
  below_squares = mfilter(squares, lambda sq: any((i > fives_i) and (manhattan({(fives_i, fives_j)}, toindices(sq)) == 1) for fives_i, fives_j in fives for i, j in toindices(sq))) 

  O = fill(I, 8, merge(adj_squares)) # Fill adjacent squares with 8
  O = fill(O, 7, merge(below_squares)) # Fill below squares with 7
  return O
 
13.666666666666666, 21.833292, def cbhebdfaacgheiedijjabbbdbagiidcj(I):
  hori = mfilter(objects(I, T, F, F), lambda obj: hline(obj) and size(obj) > ONE)
  verti = mfilter(objects(I, T, F, F), lambda obj: vline(obj) and size(obj) > ONE)
  inter = prapply(intersection, hori, verti)
  grid1 = fill(I, EIGHT, merge(hori))
  grid2 = fill(grid1, SEVEN, merge(verti))
  O = fill(grid2, SIX, merge(inter))
  return O
 
13.0, 20.72749, def cieicjebcbicebibafadbacbehcdehbg(I):
  objs = objects(I, T, F, F)
  hori = sfilter(objs, hline)
  verti = sfilter(objs, vline)
  inter = mpapply(intersection, totuple(hori), totuple(verti))
  O = fill(fill(fill(I, EIGHT, merge(hori)), SEVEN, merge(verti)), SIX, inter)
  return O
 
46.333333333333336, 81.54159, def cdbejdidceihefjbidddebdcggffaajd(I):
  objs = objects(I, T, F, F)
  hori = frozenset(filter(hline, objs))
  verti = frozenset(filter(vline, objs))
  inter = merge(apply(lambda x: intersection(*x), product(hori, verti)))
  O = paint(paint(paint(canvas(ZERO, shape(I)), recolor(EIGHT, merge(hori))), recolor(SEVEN, merge(verti))), recolor(SIX, inter))
  return O
 
36.0, 9.283983, def fbcbjbjbfdcdebhbjdaacfaegggddjdh(I):
    objs = objects(I, T, F, F)  # Get all objects
    new_objs = set()
    for obj in objs:
        if color(obj) == 5: # Work on '5' objects
            top_row = sfilter(obj, lambda c: c[1][0] == uppermost(obj))
            second_row = sfilter(obj, lambda c: c[1][0] == uppermost(obj) + 1)
            other_rows = difference(obj, top_row | second_row)
            center_cell = (5, (centerofmass(second_row)))
            second_row = difference(second_row, {center_cell})
            new_objs.add(top_row)
            new_objs.add(recolor(8, second_row))
            new_objs.add(recolor(7, other_rows))
            new_objs.add(recolor(6, {center_cell}))
        else:
            new_objs.add(obj)
    O = paint(canvas(0, shape(I)), merge(new_objs))
    return O
 
42.333333333333336, 16.407303, def bdcgabbbdeheeaacbedajbgddccaghcd(I):
    fives = ofcolor(I, 5)  # Get indices of '5's
    top_row = sfilter(fives, lambda c: c[0] == uppermost(fives))
    second_row = sfilter(fives, lambda c: c[0] == uppermost(fives) + 1)
    other_rows = difference(fives, top_row | second_row)
    center_cells = apply(lambda obj: (5, (centerofmass(obj))), objects(I, T, F, F))
    O = I
    O = fill(O, 8, second_row)
    O = fill(O, 7, other_rows)
    O = fill(O, 6, intersection(center_cells, second_row))
    return O
 
31.333333333333332, 8.589121, def edfcjfjiigifejbfbibbbdfgbggehbfh(I):
    objs = objects(I, T, F, F)  # Get all objects
    O = I
    for obj in objs:
        if color(obj) == 5: # Work on '5' objects
            for i in range(height(obj)):
                for j in range(width(obj)):
                    if i == 0:
                        continue  # Skip the top row
                    elif i == 1 and j == width(obj) // 2:
                        O = fill(O, 6, {(uppermost(obj)+1, leftmost(obj)+j)})
                    elif i == 1:
                        O = fill(O, 8, {(uppermost(obj)+1, leftmost(obj)+j)})
                    else:
                        O = fill(O, 7, {(uppermost(obj)+i, leftmost(obj)+j)})
    return O
 
40.333333333333336, 14.421447, def efgcfjaibciaehhiijecdfdgadhacaec(I):
    O = canvas(mostcolor(I), shape(I)) # Canvas filled with background color
    for i in range(len(I)):
        for j in range(len(I[0])):
            if I[i][j] == 5:
                if i == 0 or (i > 1 and j == len(I[0]) // 2):
                    O = fill(O, 5, {(i, j)}) # Keep as '5'
                elif i == 1:
                    O = fill(O, 8, {(i, j)}) # Change to '8'
                else:
                    O = fill(O, 7, {(i, j)}) # Change to '7'
    return O
 
36.0, 10.147184, def ddgaedcfadjheifajfifdfbaacijfiaa(I):
    objs = objects(I, T, F, F)  # Get all objects
    new_grid = []
    for i in range(len(I)):
        new_row = []
        for j in range(len(I[0])):
            current_cell = (i, j)
            for obj in objs:
                if color(obj) == 5 and contained(current_cell, toindices(obj)):
                    if i == uppermost(obj):
                        new_row.append(5)
                    elif i == uppermost(obj) + 1:
                        if j == center(obj)[1]:
                            new_row.append(6)
                        else:
                            new_row.append(8)
                    else:
                        new_row.append(7)
                    break
            else:  # Cell doesn't belong to any '5' object
                new_row.append(I[i][j])
        new_grid.append(tuple(new_row))
    return tuple(new_grid)
 
144.0, 4.8763647, def abidjfagcghdeffcihgcgefiehfeafif(I):
  # Identify objects in the grid
  objs = objects(I, T, F, F)
  # Find the largest object
  largest = argmax(objs, size)
  # Recolor the largest object to 6
  I = paint(I, recolor(6, largest))
  # Iterate over remaining objects
  for obj in objs - {largest}:
    # Check if the object is made of '5'
    if color(obj) == 5:
      # Get the row index of the object's upper-left corner
      row_index = ulcorner(obj)[0]
      # Recolor based on row index
      new_color = 7 if even(row_index) else 8
      I = paint(I, recolor(new_color, obj))
  return I
 
47.0, 15.985775, def idaccfigibefecccachcdaeacbdeedei(I):
  # Find objects made of '5'
  fives = colorfilter(objects(I, T, F, F), 5)
  # Find the largest object
  largest = argmax(fives, size)
  # Recolor the largest '5' object to '6'
  I = paint(I, recolor(6, largest))
  # Recolor remaining '5' objects based on row index
  I = paint(I, merge({recolor(8 if even(ulcorner(obj)[0]) else 7, obj) for obj in fives - {largest}}))
  return I
 
144.0, 8.318774, def ebibjgacfjcdefgeihcadegffedfgeff(I):
  # Find all objects
  objs = objects(I, T, F, F)
  # Find indices of '5' cells
  five_indices = ofcolor(I, 5)
  # Create new objects based on row index and color
  new_objs = frozenset({(8 if even(i) else 7, (i, j)) for i, j in five_indices})
  # Find the largest object
  largest = argmax(objs, size)
  # Recolor the largest object to 6
  I = paint(I, recolor(6, largest))
  # Paint the re-colored objects onto the grid
  return paint(I, new_objs)
 
84.33333333333333, 14.509829, def ibebeiedgaijeddijbcchfhcagfacdjc(I):
  fives = ofcolor(I, 5)
  O = canvas(0, shape(I))
  for i, j in fives:
    for di in range(-1, 2):
      for dj in range(-1, 2):
        new_i, new_j = i + di, j + dj
        if 0 <= new_i < len(I) and 0 <= new_j < len(I[0]) and I[new_i][new_j] == 0:
          if di == dj == 0 or abs(di) == abs(dj) == 1:
            O = fill(O, 8, {(new_i, new_j)})
          elif di == 1:
            O = fill(O, 7, {(new_i, new_j)})
          elif dj == 1:
            O = fill(O, 6, {(new_i, new_j)})
  return O
 
77.0, 15.416657, def eijfcgagdeceeejcbhajcdaabhfaiaie(I):
  objs = objects(I, True, False, True)
  O = I
  for obj in objs:
    for i, j in toindices(obj):
      O = fill(O, 8, dneighbors((i, j)))
      O = underfill(O, 7, {(i+1, j)})
      O = underfill(O, 6, {(i, j+1)})
  return O
 
79.66666666666667, 24.091309, def abbhbaecadgdegdaahfcabacdfaccech(I):
  O = canvas(0, shape(I))
  for obj in objects(I, True, False, True):
    O = paint(O, obj)
    O = fill(O, 8, mapply(dneighbors, toindices(obj)))
    for i, j in toindices(obj):
      if i + 1 < len(I):
        O = fill(O, 7, {(i + 1, j)})
      if j + 1 < len(I[0]):
        O = fill(O, 6, {(i, j + 1)})
  return O
 
51.333333333333336, 21.683714, def debhgdfdfaaaecjbbhgahddbgdbdheac(I):
  O = I
  for i, j in asindices(I):
    if I[i][j] == 5:
      for di in range(-1, 2):
        for dj in range(-1, 2):
          ni, nj = i+di, j+dj
          if 0 <= ni < len(I) and 0 <= nj < len(I[0]):
            if di == dj == 0 or abs(di) == abs(dj) == 1:
              O = underfill(O, 8, {(ni, nj)})
      if i + 1 < len(I):
        O = underfill(O, 7, {(i+1, j)})
      if j + 1 < len(I[0]):
        O = underfill(O, 6, {(i, j+1)})
  return O
 
25.0, 17.882978, def bgjhebiacaceebbgifefcddiffahcfee(I):
  O = I
  for obj in objects(I, True, False, True):
    O = paint(O, recolor(8, delta(obj)))
    O = underpaint(O, recolor(7, shift(obj, DOWN)))
    O = underpaint(O, recolor(6, shift(obj, RIGHT)))
  return O
 
47.0, 85.86237, def gcigddecgdcaeiddacadffedachbcjab(I):
  O = paint(canvas(mostcolor(I), shape(I)), mfilter(objects(I, T, F, F), hline))
  O = paint(replace(O, FIVE, mostcolor(I)), mfilter(objects(I, T, F, F), vline))
  for i in range(height(I)):
    for j in range(width(I)):
      if index(O, (i, j)) == FIVE and (index(I, (i, j - 1)) == FIVE or index(I, (i, j + 1)) == FIVE) and (index(I, (i - 1, j)) == FIVE or index(I, (i + 1, j)) == FIVE):
        O = fill(O, SIX, {(i, j)})
  return O
 
12.333333333333334, 18.104351, def fegbbdgfabbjeejeaddbdfehadeebecb(I):
  objs = objects(I, T, F, T)
  for obj in objs:
    O = fill(I, SEVEN, delta(obj))
    O = underfill(O, EIGHT, inbox(toindices(obj)))
  return O
 
5.666666666666667, 3.370991, def iciacecchheaeiadaghcifabaahcddee(I):
  O = I
  for obj in objects(I, T, F, T):
    O = paint(O, recolor(SEVEN, delta(obj)))
    O = paint(O, recolor(EIGHT, inbox(toindices(obj))))
  return O
 
16.333333333333332, 12.917414, def cacabcfbdffheicdibbgfgicfbhcbabc(I):
  O = I
  for obj in objects(I, T, F, T):
    O = fill(O, SEVEN, difference(dneighbors(centerofmass(obj)), obj))
  return O
 
37.666666666666664, 18.684248, def ecaebfcgaafheejbjhaafijgcicbgcfj(I):
  # Identify objects in the grid
  objs = objects(I, T, F, F)
  # Find the largest object
  largest = argmax(objs, size)
  # Recolor objects based on their position relative to the largest object
  for obj in objs - {largest}:
    if color(obj) == 5:
      if uppermost(obj) < uppermost(largest):
        I = paint(I, recolor(8, obj))
      elif uppermost(obj) > uppermost(largest):
        I = paint(I, recolor(7, obj))
      elif leftmost(obj) < leftmost(largest):
        I = paint(I, recolor(7, obj))
  return I
 
37.666666666666664, 16.389536, def gchfhaceihchecbfbdeiacchiaegdbic(I):
  # Find the largest object
  objs = objects(I, T, F, F)
  largest = argmax(objs, size)
  # Define a function to recolor objects based on relative position
  def recolor_relative(obj):
    if color(obj) == 5:
      rel_pos = position(obj, largest)
      if rel_pos in {(1, -1), (1, 1), (-1, 1)}:
        return recolor(8, obj)
      elif rel_pos in {(-1, -1), (1, 0)}:
        return recolor(7, obj)
    return obj
  # Apply the recoloring function to all objects except the largest
  I = paint(I, largest)
  for obj in objs - {largest}:
    I = paint(I, recolor_relative(obj))
  return I
 
47.0, 16.718441, def ibfafhdbegbeecbbabjfdgdjifbhfdjf(I):
    objs = objects(I, T, F, T)
    odd_height_objs = sfilter(objs, lambda o: not even(height(o)))
    even_height_objs = difference(objs, odd_height_objs)
    single_cell_objs = mfilter(even_height_objs, lambda o: square(o) and size(o) == 1)
    O = fill(I, 7, merge(apply(toindices, odd_height_objs)))
    O = fill(O, 8, merge(apply(toindices, even_height_objs)))
    O = fill(O, 6, merge(apply(toindices, single_cell_objs)))
    return O
 
140.0, 46.57467, def fbhchdececdfeecgafcefgijidjeeefb(I):
    objs = objects(I, T, F, T)
    even_height_indices = merge(apply(toindices, sfilter(objs, lambda o: even(height(o)))))
    odd_height_indices = difference(asindices(I), even_height_indices)
    single_cell_indices = mfilter(objs, lambda o: square(o) and size(o) == 1 and contained(ulcorner(o), even_height_indices))
    O = fill(I, 8, even_height_indices)
    O = fill(O, 7, odd_height_indices)
    O = fill(O, 6, merge(apply(toindices, single_cell_indices)))
    return O
 
47.0, 81.40322, def egagbbafcfcdedafagebhcehjjcjfhad(I):
    O = canvas(mostcolor(I), shape(I))
    for obj in objects(I, T, F, F):
        if hline(obj):
            O = paint(O, recolor(EIGHT, obj))
        elif vline(obj):
            O = paint(O, recolor(SEVEN, obj))
    intersections = intersection(merge(mfilter(objects(O, T, F, F), lambda o: color(o) == EIGHT)), merge(mfilter(objects(O, T, F, F), lambda o: color(o) == SEVEN)))
    O = fill(O, SIX, intersections) 
    return O
 
11.0, 8.769754, def fdacechefefcedahbagcdechjcefidac(I):
  objs = objects(I, T, F, F)
  largest = argmax(objs, size)
  smallest_size = valmin(objs, size)
  smallest = sizefilter(objs, smallest_size)
  filtered = difference(objs, combine(largest, smallest))
  second_smallest = sizefilter(filtered, valmin(filtered, size))
  recolored1 = recolor(EIGHT, merge(smallest))
  recolored2 = recolor(SEVEN, merge(second_smallest))
  O = paint(paint(I, recolored1), recolored2)
  return O 
 
20.0, 7.901059, def aaceedafceafehaaibcecdhbcecgcdij(I):
  objs = objects(I, T, F, F)
  bg = mostcolor(I)
  sizes = apply(size, objs)
  sorted_sizes = order(sizes, identity)
  target_size1 = sorted_sizes[1] if len(sorted_sizes) > 1 else sorted_sizes[0]
  target_size2 = sorted_sizes[2] if len(sorted_sizes) > 2 else sorted_sizes[0]
  filtered_objs1 = sizefilter(objs, target_size1)
  filtered_objs2 = sizefilter(objs, target_size2)
  recolored1 = recolor(EIGHT, merge(filtered_objs1))
  recolored2 = recolor(SEVEN, merge(filtered_objs2))
  O = paint(paint(I, recolored1), recolored2)
  return O
 
65.33333333333333, 6.997888, def biccjfbddhbeeaeaajgefcdafaffidca(I):
    objs = objects(I, T, F, F)
    s = compose(size, first)
    sorted_objs = order(objs, s)
    target1 = first(sorted_objs)
    target2 = sorted_objs[1] if len(sorted_objs) > 1 else target1
    recolored1 = recolor(EIGHT, target1)
    recolored2 = recolor(SEVEN, target2)
    O = paint(paint(I, recolored1), recolored2)
    return O
 
47.333333333333336, 16.523521, def bdbgbfajeaagehjeiaaffcfgebcfbfca(I):
  def process_object(obj):
    if even(height(obj)):
      return recolor(8, obj)
    elif any(square(o) and size(toindices(o)) == 1 for o in objects(subgrid(obj, I), T, F, F)):
      return recolor(6, extract(objects(subgrid(obj, I), T, F, F), lambda o: square(o) and size(toindices(o)) == 1)) | recolor(7, obj)
    else:
      return recolor(7, obj)
  objs = objects(I, T, F, T)
  O = paint(I, merge(apply(process_object, objs)))
  return O
 
13.666666666666666, 20.549627, def iadajeeabeeaebaebgbccjfgafafifca(I):
  O = I
  for obj in objects(I, T, F, F):
    if hline(obj):
      O = fill(O, EIGHT, toindices(obj))
    if vline(obj):
      O = fill(O, SEVEN, toindices(obj))
  for i in range(len(I)):
    for j in range(len(I[0])):
      if index(O, (i, j)) == EIGHT and index(O, (i + 1, j)) == SEVEN:
        O = fill(O, SIX, {(i, j)})
  return O
 
47.0, 81.63011, def ccbdadcbeffceeggjhcghcadghcbjbeh(I):
    O = canvas(mostcolor(I), shape(I))
    for obj in objects(I, T, F, F):
        if hline(obj):
            O = paint(O, recolor(EIGHT, obj))
        if vline(obj):
            O = paint(O, recolor(SEVEN, obj))
    for obj1 in objects(O, T, F, F):
      for obj2 in objects(O, T, F, F):
        if color(obj1) == EIGHT and color(obj2) == SEVEN and intersection(toindices(obj1), toindices(obj2)):
          O = paint(O, recolor(SIX, intersection(toindices(obj1), toindices(obj2))))
    return O
 
54.0, 20.934025, def eeajhbaghabiebghbfcjdedfcaaedddb(I):
    objs = objects(I, T, F, T)
    outer_boundary = mapply(delta, objs)
    expanded_objects = mapply(lambda obj:  mapply(neighbors, toindices(obj)), objs)
    inner_boundary = difference(expanded_objects, mapply(toindices, objs))
    O = fill(I, SEVEN, outer_boundary)
    O = underfill(O, EIGHT, inner_boundary)
    return O
 
13.666666666666666, 18.34972, def caadeacefcgbeagfbiacbcjiabcegdhd(I):
  objs = objects(I, T, F, F)
  largest_obj = argmax(objs, size)
  modified_objs = frozenset()
  for obj in objs:
    if obj == largest_obj:
      continue
    h, w = shape(obj)
    if w > h:
      center_col = leftmost(obj) + w // 2
      if h == 3:
        modified_objs = modified_objs | recolor(8, frozenset((i, center_col) for i in range(uppermost(obj), lowermost(obj) + 1)))
      elif h == 4:
        modified_objs = modified_objs | recolor(7, frozenset((i, center_col) for i in range(uppermost(obj), lowermost(obj) + 1)))
    elif h == 2 and w == 2:
      center_col = leftmost(obj) + w // 2
      modified_objs = modified_objs | recolor(6, frozenset((i, center_col) for i in range(uppermost(obj), lowermost(obj) + 1)))
  O = paint(I, modified_objs)
  return O 
 
13.333333333333334, 11.602341, def fghbjidfcaabefdijecbbeehafdeefde(I):
  objs = objects(I, T, F, F)
  O = I
  for obj in objs:
    if obj != argmax(objs, size):
      h, w = shape(obj)
      if h in (2, 3, 4) and w <= h * 2:
        O = fill(O, 8 if h == 3 else (7 if h == 4 else 6), 
                 frozenset((i, leftmost(obj) + w // 2) for i in range(uppermost(obj), lowermost(obj) + 1)))
  return O
 
5.666666666666667, 3.3190296, def habfijgcbaddecebihdhibjcdbdfbdcb(I):
    objs = objects(I, T, F, T)
    outer = mapply(lambda obj: difference(dneighbors(centerofmass(obj)), toindices(obj)), objs)
    inner = mapply(lambda obj: difference(inbox(toindices(obj)), toindices(obj)), objs)
    O = fill(I, SEVEN, outer)
    O = fill(O, EIGHT, inner)
    return O
 
43.333333333333336, 20.09775, def debbghjeeaeaebhcafijdecggfbjdhag(I):
  O = I
  for obj in objects(I, T, F, T):
    for i, j in toindices(obj):
      for di, dj in [(0,1),(0,-1),(1,0),(-1,0)]:
        ni, nj = i + di, j + dj
        if (ni, nj) not in toindices(obj) and 0 <= ni < len(I) and 0 <= nj < len(I[0]):
          O = fill(O, SEVEN, {(ni, nj)})
      inner = difference(inbox(toindices(obj)), toindices(obj))
      O = fill(O, EIGHT, inner)
  return O
 
13.0, 17.087088, def ccadcfebegjgegigjcehfdcdaddfided(I):
  objs = objects(I, T, F, F)
  largest_obj = argmax(objs, size)
  for obj in objs:
    if obj != largest_obj and max(shape(obj)) <= 4:
      I = paint(I, recolor(8 if height(obj)==3 else (7 if height(obj)==4 else 6), connect(ulcorner(obj), (lowermost(obj),leftmost(obj) + width(obj)//2))))
  return I 
 
12.666666666666666, 11.854653, def aaffajfdfaehecefbddbeefehcjbachd(I):
  objs = objects(I, T, F, F)
  largest = argmax(objs, size)
  def modify_obj(obj):
    if obj != largest and max(shape(obj)) <= 4:
      center_col = leftmost(obj) + width(obj) // 2
      fill_value = 8 if height(obj) == 3 else (7 if height(obj) == 4 else 6)
      return recolor(fill_value, connect((uppermost(obj), center_col), (lowermost(obj), center_col)))
    else:
      return frozenset()  # Return an empty object if no modification is needed

  modified_objs = apply(modify_obj, objs)
  return paint(I, merge(modified_objs))
 
140.0, 85.12586, def fjaadefahfadeabcidcddgbgeicfiajd(I):
  even_indices = mfilter(objects(I, T, F, T), lambda obj: even(height(obj)))
  odd_indices = difference(asindices(I), even_indices)
  corner_indices = mfilter(objects(I, T, F, T), lambda obj: even(height(obj)) and square(obj) and len(obj) == 1)
  O = fill(I, 8, even_indices) 
  O = fill(O, 7, odd_indices) 
  O = fill(O, 6, corner_indices)
  return O
 
13.666666666666666, 20.343266, def abgbffjedciiecdebdgcdcdacfiiibaf(I):
  O = I
  for obj in objects(I, T, F, F):
    if hline(obj):
      O = underpaint(O, recolor(EIGHT, obj))
    if vline(obj):
      O = underpaint(O, recolor(SEVEN, obj))
  for obj1 in objects(O, T, F, F):
    for obj2 in objects(O, T, F, F):
      if color(obj1) == EIGHT and color(obj2) == SEVEN:
        O = fill(O, SIX, intersection(toindices(obj1), toindices(obj2))) 
  return O
 
47.333333333333336, 13.916231, def cafibjcbhebfegddjbbgchaijdgfejch(I):
    objs = objects(I, T, F, T)
    O = I
    for obj in objs:
        O = paint(O, recolor(EIGHT, difference(inbox(toindices(obj)), toindices(obj))))
        if vline(toindices(obj)):
            O = paint(O, recolor(SIX, difference(mapply(dneighbors, toindices(obj)), toindices(obj))))
        else:
            O = paint(O, recolor(SEVEN, difference(mapply(dneighbors, toindices(obj)), toindices(obj))))
    return O
 
46.333333333333336, 10.250382, def ifhbagdhcbbgeefcjbcgbfgffdibbief(I):
  objs = objects(I, T, F, T)
  for obj in objs:
    h, w = shape(obj)
    ci, cj = center(obj)
    I = fill(I, 8, {(i, j) for i, j in toindices(obj) if abs(i - ci) <= h // 2 and abs(j - cj) <= 1})
    I = fill(I, 7, {(i, j) for i, j in toindices(obj) if abs(i - ci) <= h // 2 and abs(j - cj) == 2})
    I = fill(I, 6, {(ci, cj)})
  return I
 
19.0, 7.5145874, def ejeegfbieaaeehjgjbgccgjfjcbabfgd(I):
    objs = objects(I, T, F, T)
    for obj in objs:
        h, w = shape(obj)
        center_obj = {(8, (i - h // 2, j - w // 2)) for i, j in toindices(obj)}
        I = underpaint(I, shift(center_obj, center(obj)))
        center_obj = {(7, (i - h // 2, j - (w // 2 + 2))) for i, j in toindices(obj) if j >= w // 2 + 2}
        I = underpaint(I, shift(center_obj, center(obj)))
        center_obj = {(7, (i - h // 2, j - (w // 2 - 2))) for i, j in toindices(obj) if j <= w // 2 - 2}
        I = underpaint(I, shift(center_obj, center(obj)))
        I = fill(I, 6, {center(obj)})
    return I
 
41.0, 8.910522, def decegjcdccagebfcjjhcagccfefidffc(I):
  objs = objects(I, T, F, T)
  for obj in objs:
    sub = subgrid(obj, I)
    h, w = len(sub), len(sub[0])
    if h > 1 and w > 1:
      left = fill(crop(sub, (0, 0), (h, max(1, w // 2 - 2))), 8, asindices(crop(sub, (0, 0), (h, max(1, w // 2 - 2)))))
      mid = fill(crop(sub, (0, max(0, w // 2 - 2)), (h, min(3, w - max(0, w // 2 - 2)))), 8, asindices(crop(sub, (0, max(0, w // 2 - 2)), (h, min(3, w - max(0, w // 2 - 2))))))
      right = fill(crop(sub, (0, min(w, w // 2 + 2)), (h, max(1, w - min(w, w // 2 + 2)))), 8, asindices(crop(sub, (0, min(w, w // 2 + 2)), (h, max(1, w - min(w, w // 2 + 2))))))
      if w > 4:
        left = fill(left, 7, {(i, w // 2 - 2) for i in range(h)})
        right = fill(right, 7, {(i, 1) for i in range(h)})
      mid = fill(mid, 6, {(h // 2, w // 2 - max(0, w // 2 - 2))})
      sub = hconcat(hconcat(left, mid), right)
      I = paint(cover(I, obj), shift(asobject(sub), ulcorner(obj)))
  return I
 
21.0, 8.873027, def fjhbacafjccgebbdjhbbjjeeagdhgehi(I):
  objs = objects(I, T, F, T)
  for obj in objs:
    h, w = shape(obj)
    mask8 = {(i, j) for i, j in toindices(obj) if abs(i - (uppermost(obj) + h // 2)) <= h // 2 and abs(j - (leftmost(obj) + w // 2)) <= 1}
    mask7l = {(i, leftmost(obj) + w // 2 - 2) for i in range(uppermost(obj), uppermost(obj) + h)}
    mask7r = {(i, leftmost(obj) + w // 2 + 2) for i in range(uppermost(obj), uppermost(obj) + h)}
    I = underfill(I, 8, mask8)
    I = underfill(I, 7, mask7l)
    I = underfill(I, 7, mask7r)
    I = fill(I, 6, {center(obj)})
  return I
 
47.0, 19.975462, def jdfdeecejdeceibdjedjceabeaidiaeh(I):
  objs = objects(I, T, F, T)  # Identify objects, excluding background
  small_objs = sfilter(objs, lambda obj: size(obj) == 1) # Find objects with only one cell
  medium_objs = sfilter(objs, lambda obj: 1 < size(obj) < 9) # Find objects with size 2 to 8
  large_objs = sfilter(objs, lambda obj: size(obj) >= 9) # Find objects with size 9 or larger
  I = fill(I, 6, merge(apply(toindices, small_objs))) # Recolor small objects to '6'
  I = fill(I, 7, merge(apply(toindices, medium_objs))) # Recolor medium objects to '7'
  O = fill(I, 8, merge(apply(toindices, large_objs))) # Recolor large objects to '8'
  return O
 
47.0, 10.849945, def gfjbefcjecgjegdeagjagjjfbbdabifg(I):
    objs = objects(I, T, F, T)
    for obj in objs:
        h, w = shape(obj)
        for i, j in toindices(obj):
            if h > 1 and w > 1:  # Only modify non-single cell objects
                if j in interval(leftmost(obj) + w // 2 - 1, leftmost(obj) + w // 2 + 2, 1):
                    I = fill(I, 8, {(i, j)})
                elif j in {leftmost(obj) + w // 2 - 2, leftmost(obj) + w // 2 + 2}:
                    I = fill(I, 7, {(i, j)})
                if i == uppermost(obj) + h // 2 and j == leftmost(obj) + w // 2:
                    I = fill(I, 6, {(i, j)})
    return I
 
30.333333333333332, 6.7686405, def cjagajibdjaaeegdjabcdcbgjafeddhb(I):
    for obj in objects(I, T, F, T):
        center_i, center_j = centerofmass(obj)  # Calculate center of mass as center
        left, _ = ulcorner(obj)
        width_obj = width(obj)
        for i, j in toindices(obj):
            I = fill(I, 8, {(i, center_j)})  # Color central column '8'
            if width_obj > 2:  # Color adjacent columns '7' if width permits
                if j == center_j - 1 or j == center_j + 1:
                    I = fill(I, 7, {(i, j)})
            if i == center_i and j == left + width_obj // 2:  # Color central cell '6'
                I = fill(I, 6, {(i, j)})
    return I
 
28.0, 8.57869, def ffcabcdgidccebdijedhcdcjbhjbdchi(I):
  for obj in objects(I, T, F, T):
    if size(obj) > 1:  # Ignore single-cell objects
      h, w = shape(obj)
      ci, cj = uppermost(obj) + h // 2, leftmost(obj) + w // 2  # Calculate center
      I = fill(I, 6, {(ci, cj)})  # Color the center cell
      I = fill(I, 8, {(i, cj) for i in range(uppermost(obj), lowermost(obj) + 1)})  # Central column '8'
      if w > 2:  # Adjacent columns '7'
        I = fill(I, 7, {(i, cj-1) for i in range(uppermost(obj), lowermost(obj) + 1)})
        I = fill(I, 7, {(i, cj+1) for i in range(uppermost(obj), lowermost(obj) + 1)})
  return I
 
28.333333333333332, 8.42518, def bedfcdbfbaacebiebhdjheafaaicjbag(I):
  for obj in objects(I, T, F, T):
    if len(obj) > 1:
      ul_i, ul_j = ulcorner(obj)
      lr_i, lr_j = lrcorner(obj)
      center_j = ul_j + (lr_j - ul_j) // 2  # Calculate center column
      I = fill(I, 8, {(i, center_j) for i in range(ul_i, lr_i + 1)})  # Central column '8'
      if lr_j - ul_j > 1:  # Adjacent columns '7'
        I = fill(I, 7, {(i, center_j - 1) for i in range(ul_i, lr_i + 1)})
        I = fill(I, 7, {(i, center_j + 1) for i in range(ul_i, lr_i + 1)})
      I = fill(I, 6, {(ul_i + (lr_i - ul_i) // 2, center_j)})  # Color center cell
  return I
 
30.333333333333332, 7.7867, def bdfafjcdfcadejfdbecgigadiahgeedb(I):
  for obj in objects(I, T, F, T):
    if len(obj) > 1:
      min_j = leftmost(obj)
      max_j = rightmost(obj)
      center_j = min_j + (max_j - min_j) // 2  # Calculate center column
      I = fill(I, 8, {(i, center_j) for i, j in toindices(obj)})  # Central column '8'
      if max_j - min_j > 1:  # Adjacent columns '7'
        I = fill(I, 7, {(i, center_j - 1) for i, j in toindices(obj) if j == center_j - 1})
        I = fill(I, 7, {(i, center_j + 1) for i, j in toindices(obj) if j == center_j + 1})
      I = fill(I, 6, {(uppermost(obj) + height(obj) // 2, center_j)})  # Color center cell
  return I
 
47.0, 73.84092, def fdcbdcedaifgefcdifjdejjfdddhiddc(grid):
  objs = objects(grid, T, F, F)
  top_row = uppermost(merge(apply(toindices, objs)))
  modified_grid = canvas(0, shape(grid))
  for obj in objs:
    fill_value = 8 if any(i == top_row for i, j in toindices(obj)) else 7
    center_i, center_j = centerofmass(toindices(obj))
    modified_grid = paint(modified_grid, {(fill_value, (center_i, center_j))})
  return modified_grid
 
47.0, 73.689186, def bajdigfjibcdeeihbaahbhjgfidicdbb(grid):
  def recolor_center(obj, top_row):
    return recolor(8 if any(i == top_row for i, j in toindices(obj)) else 7, {(centerofmass(toindices(obj)))})

  objs = objects(grid, T, F, F)
  top_row = uppermost(merge(apply(toindices, objs)))
  return paint(canvas(0, shape(grid)), merge(apply(rbind(recolor_center, top_row), objs)))
 
36.0, 20.882107, def jcadjebbhfbeehhiigacbdaddfaecbae(I):
  objs = objects(I, T, F, T)
  for obj in objs:
    h = height(obj)
    w = width(obj)
    if h > 1:
      I = underpaint(I, recolor(8, shift(obj, (1, 0))))
      I = underpaint(I, recolor(8, shift(obj, (-1, 0))))
    if h > 2:
      I = underpaint(I, recolor(7, shift(obj, (2, 0))))
      I = underpaint(I, recolor(7, shift(obj, (-2, 0))))
    I = fill(I, 6, {center(obj)})
  return I
 
26.333333333333332, 8.569006, def hjcebebjfaiaebdcibfcacdddaiaabjf(I):
  for i in range(len(I)):
    for j in range(len(I[0])):
      if I[i][j] != 0:
        if i > 0 and I[i-1][j] == I[i][j]:
          I = fill(I, 8, {(i-1,j)})
          if i > 1 and I[i-2][j] == I[i][j]: 
            I = fill(I, 7, {(i-2,j)})
        if i < len(I)-1 and I[i+1][j] == I[i][j]:
          I = fill(I, 8, {(i+1,j)})
          if i < len(I)-2 and I[i+2][j] == I[i][j]:
            I = fill(I, 7, {(i+2,j)})
        if i > 0 and I[i-1][j] == I[i][j] and j > 0 and I[i][j-1] == I[i][j]:
          I = fill(I, 6, {(i,j)})
  return I
 
42.0, 16.489883, def fceeabhdcbcceaaejibjdbebaaaeceah(I):
  objs = objects(I, T, F, T)
  for obj in objs:
    h, w = shape(obj)
    upper_extension = {(8, (i, j)) for i, j in product(interval(uppermost(obj) - h//2, uppermost(obj), 1), interval(leftmost(obj), rightmost(obj) + 1, 1))}
    lower_extension = {(8, (i, j)) for i, j in product(interval(lowermost(obj) + 1, lowermost(obj) + h//2 + 1, 1), interval(leftmost(obj), rightmost(obj) + 1, 1))}
    I = underpaint(I, upper_extension)
    I = underpaint(I, lower_extension)
    if h > 2:
      upper_line = {(7, (uppermost(obj) - 2, j)) for j in range(leftmost(obj), rightmost(obj) + 1)}
      lower_line = {(7, (lowermost(obj) + 2, j)) for j in range(leftmost(obj), rightmost(obj) + 1)}
      I = underpaint(I, upper_line)
      I = underpaint(I, lower_line)
    I = fill(I, 6, {center(obj)})
  return I
 
36.0, 19.631556, def fcbdddgajeceedccidejejjcggedgjic(I):
  objs = objects(I, T, F, T)
  for obj in objs:
    if height(obj) > 1:
      I = underpaint(I, recolor(8, shift(obj, (1,0))))
      I = underpaint(I, recolor(8, shift(obj, (-1,0))))
      if height(obj) > 2:
        line_indices = {(uppermost(obj) - 2, j) for j in range(leftmost(obj), rightmost(obj) + 1)} | {(lowermost(obj) + 2, j) for j in range(leftmost(obj), rightmost(obj) + 1)}
        I = underpaint(I, recolor(7, line_indices))
    I = fill(I, 6, {center(obj)})
  return I
 
31.0, 14.468967, def ddibfdahdcaiebehjdeibdaefaccfbca(I):
  objs = objects(I, T, F, T)
  for obj in objs:
    h = height(obj)
    for i in range(1, h//2 + 1):
      I = underpaint(I, recolor(8, shift(obj, (i, 0))))
      I = underpaint(I, recolor(8, shift(obj, (-i, 0))))
      if i == 2:
        I = underpaint(I, recolor(7, shift(obj, (i, 0))))
        I = underpaint(I, recolor(7, shift(obj, (-i, 0))))
    I = fill(I, 6, {center(obj)})
  return I
 
23.0, 20.214548, def bhgabcahdggfehdaiddacbhffgebfeef(I):
    objs = objects(I, T, F, T)  # Extract objects without background
    small_obj = min(objs, key=size)  # Find the smaller object
    large_obj = max(objs, key=size)  # Find the larger object
    I = paint(I, recolor(7, small_obj))  # Recolor smaller object to 7
    inner_cells = difference(toindices(large_obj), box(large_obj))  # Find inner cells
    I = fill(I, 8, inner_cells) # Recolor inner cells to 8
    if adjacent(small_obj, large_obj): # Check for adjacency
        connecting_cell = extract(intersection(toindices(large_obj), dneighbors(center(small_obj))), lambda x: True)
        I = fill(I, 6, {connecting_cell}) # Recolor connecting cell to 6
    return I
 
19.333333333333332, 18.468597, def fagaajfaebabefaijdfiaacbhaaddbha(I):
  objs = objects(I, T, F, T)
  if len(objs) != 2:
    return I
  obj1, obj2 = objs
  if size(obj1) < size(obj2):
    small_obj, large_obj = obj1, obj2
  else:
    small_obj, large_obj = obj2, obj1
  I = paint(I, recolor(7, small_obj))
  for i in range(1, height(large_obj)-1):
    for j in range(1, width(large_obj)-1):
      if (i,j) in toindices(large_obj):
        I = fill(I, 8, {(i,j)})
  if adjacent(small_obj, large_obj):
    for cell in dneighbors(center(small_obj)):
      if cell in toindices(large_obj):
        I = fill(I, 6, {cell})
  return I
 
17.0, 7.679432, def idagebjgbgfaeecgadejadjfdbbfbjde(I):
  objs = objects(I, T, F, T)
  small_obj = min(objs, key=lambda obj: (size(obj), uppermost(obj), leftmost(obj)))
  large_obj = other(objs, small_obj)
  I = paint(I, recolor(7, small_obj))
  inner_area = difference(backdrop(large_obj), box(large_obj))
  I = underfill(I, 8, inner_area)
  if adjacent(small_obj, large_obj):
    potential_connectors = intersection(dneighbors(center(small_obj)), toindices(large_obj))
    if potential_connectors:
      I = fill(I, 6, {first(potential_connectors)})
  return I
 
76.66666666666667, 16.953037, def cfhecdbjfdccebeiadadbefdgfficigd(I):
  objs = objects(I, T, F, T)  # Extract objects, excluding background
  six_border = set()
  seven_border = set()
  eight_fill = set()
  for obj in objs:
    if vline(toindices(obj)):  # Identify vertical lines
      for c in toindices(obj):
        six_border.update(dneighbors(c) - {c})  # Add adjacent cells to six_border
    else:
      for c in toindices(obj):
        seven_border.update(dneighbors(c) - {c})  # Add adjacent cells to seven_border
      eight_fill.update(inbox(toindices(obj)) - toindices(obj))  # Fill the interior with '8'
  O = fill(I, 6, frozenset(six_border))
  O = fill(O, 7, frozenset(seven_border))
  O = fill(O, 8, frozenset(eight_fill))
  return O
 
39.0, 4.903226, def ddiaahcfbdjfeceaifeeidgdbdiegcfd(I):
    O = I
    for obj in objects(I, T, F, T):
        border = recolor(6 if vline(toindices(obj)) else 7,
                         frozenset(c for c in toindices(obj) 
                                     if any(n not in toindices(obj) for n in dneighbors(c)))) 
        O = paint(O, border)
        if not vline(toindices(obj)):
            O = paint(O, recolor(8, inbox(toindices(obj)) - toindices(obj)))
    return O
 
13.666666666666666, 21.833292, def igecbhbffgaiegfjabibfdabejfeebgc(I):
  objs = objects(I, T, F, F)  
  for obj in objs:
    if color(obj) == 5:
      h, w = shape(obj)
      if h > w: # Vertical
        I = paint(I, recolor(7, crop(I, (uppermost(obj)+(h//2)-1,leftmost(obj)), (3,w))))
      elif w > h: # Horizontal
        I = paint(I, recolor(8, crop(I, (uppermost(obj),leftmost(obj)+(w//2)-1), (h,3))))
  return I
 
17.333333333333332, 20.844137, def iibaggfefdeaedceiahcbhdfgjbfiaed(I):
  objs = objects(I, T, F, T)
  if len(objs) != 2:
    return I
  obj1, obj2 = sorted(objs, key=size)
  I = paint(I, recolor(7, obj1))
  I = underfill(I, 8, delta(inbox(obj2)))
  if adjacent(obj1, obj2):
    I = fill(I, 6, intersection(toindices(obj1), dneighbors(center(obj2))))
  return I
 
14.666666666666666, 13.407698, def cbddjiaieahhedifjbdcdjigeabdeibb(I):
  objs = sorted(objects(I, T, F, T), key=size)
  if len(objs) != 2:
    return I
  small_obj, large_obj = objs
  I = paint(I, recolor(7, small_obj))
  large_shape = shape(large_obj)
  frame_indices = {(i, j) for i in range(1, large_shape[0] - 1) for j in range(1, large_shape[1] - 1)}
  frame_indices = shift(frame_indices, ulcorner(large_obj))
  I = underfill(I, 8, frame_indices)
  if adjacent(small_obj, large_obj):
    I = fill(I, 6, first(intersection(dneighbors(center(small_obj)), toindices(large_obj))))
  return I
 
13.0, 20.28172, def jdheidfdfjjfefabbccheejffbhdbdbf(I):
    objs = objects(I, T, F, T)
    for obj in objs:
        if hline(obj):
            I = underfill(I, 7, shift(toindices(obj), (1, 0)))
            I = underfill(I, 7, shift(toindices(obj), (-1, 0)))
        if vline(obj):
            I = underfill(I, 7, shift(toindices(obj), (0, 1)))
            I = underfill(I, 7, shift(toindices(obj), (0, -1)))
        I = fill(I, 6, {center(obj)})
    return I
 
14.666666666666666, 18.9371, def dgbddiffcdejeabfbaeceaghiaadbfea(I):
    for v in palette(I) - {0}:
        obj = {(v, (i, j)) for i, r in enumerate(I) for j, c in enumerate(r) if c == v}
        if hline(obj):
            I = underfill(I, 7, shift(toindices(obj), (1, 0)))
            I = underfill(I, 7, shift(toindices(obj), (-1, 0)))
        if vline(obj):
            I = underfill(I, 7, shift(toindices(obj), (0, 1)))
            I = underfill(I, 7, shift(toindices(obj), (0, -1)))
        I = fill(I, 6, {center(obj)})
    return I
 
56.333333333333336, 8.487733, def afdcchdcgedeeecebdibffbaffgffcfb(I):
    for i, row in enumerate(I):
        for j, val in enumerate(row):
            if val != 0:
                if (i > 0 and I[i-1][j] == val) or (i < len(I)-1 and I[i+1][j] == val):
                    if i > 0:
                        I = fill(I, 7, {(i - 1, j)})
                    if i < len(I) - 1:
                        I = fill(I, 7, {(i + 1, j)})
                if (j > 0 and I[i][j-1] == val) or (j < len(row)-1 and I[i][j+1] == val):
                    if j > 0:
                        I = fill(I, 7, {(i, j - 1)})
                    if j < len(row) - 1:
                        I = fill(I, 7, {(i, j + 1)})
                I = fill(I, 6, {(i, j)})
    return I
 
7.333333333333333, 4.3746758, def edabijiaccdeeceeieddeebcfafgaefa(I):
  objs = objects(I, T, F, T)
  small_objs = sfilter(objs, lambda o: min(shape(o)) == 2)
  large_objs = sfilter(objs, lambda o: min(shape(o)) > 2)
  modified_grid = I
  for obj in small_objs:
    modified_grid = fill(modified_grid, SEVEN, obj)
  for obj in large_objs:
    modified_grid = fill(modified_grid, EIGHT, delta(obj))
    bottom_center = (lowermost(obj), leftmost(obj) + width(obj) // 2)
    modified_grid = fill(modified_grid, SIX, {bottom_center})
  O = modified_grid
  return O
 
38.0, 37.832664, def fhehcjbfcfheefbcjcccbigebjdbhebf(I):
  modified_grid = canvas(mostcolor(I), shape(I))
  for obj in objects(I, T, F, T):
    if min(shape(obj)) == 2:
      modified_grid = paint(modified_grid, recolor(SEVEN, obj))
    elif min(shape(obj)) > 2:
      modified_grid = paint(modified_grid, recolor(EIGHT, delta(obj)))
      bottom_center = (lowermost(obj), leftmost(obj) + width(obj) // 2)
      modified_grid = paint(modified_grid, recolor(SIX, {bottom_center}))
  O = modified_grid
  return O
 
13.666666666666666, 21.833292, def fhdcedeahigeejjdabbfhecffjefiead(I):
  objs = objects(I, T, F, T) # Identify objects, excluding background
  modified_objs = set()
  for obj in objs:
    if width(obj) > height(obj): # Wider than tall
      mid = width(obj) // 2 
      left_part =  recolor(6, sfilter(toindices(obj), lambda ij: ij[1] < leftmost(obj) + mid ))
      right_part = recolor(8, sfilter(toindices(obj), lambda ij: ij[1] > leftmost(obj) + mid))
      modified_objs.add(obj.union(left_part).union(right_part))
    elif height(obj) > width(obj): # Taller than wide
      mid = height(obj) // 2
      top_part =  recolor(7, sfilter(toindices(obj), lambda ij: ij[0] < uppermost(obj) + mid ))
      bottom_part = recolor(8, sfilter(toindices(obj), lambda ij: ij[0] > uppermost(obj) + mid))
      modified_objs.add(obj.union(top_part).union(bottom_part))
    else: # Square object, keep unchanged
      modified_objs.add(obj) 
  O = paint(canvas(0, shape(I)), merge(modified_objs)) # Paint modified objects onto blank canvas
  return O
 
9.666666666666666, 8.305493, def cejigcfgfdjaeifaijgfeaebegbcceid(I):
  objs = objects(I, T, F, T)
  outer_holes = mapply(lambda obj: intersection(delta(toindices(obj)), ofcolor(I, 0)), objs)
  inner_holes = mapply(lambda obj: difference(inbox(toindices(obj)), toindices(obj)), objs)
  bridges = mapply(lambda obj: sfilter(inner_holes, lambda loc: len(intersection(dneighbors(loc), toindices(obj))) == 1), objs)
  O = fill(I, 7, outer_holes)
  O = fill(O, 8, inner_holes)
  O = fill(O, 6, bridges)
  return O
 
8.666666666666666, 4.556304, def fbibdabbbhdbeciejcehffifegfeedff(I):
  O = I
  for obj in objects(I, T, F, T):
    for i, j in delta(toindices(obj)):
      if 0 <= i < len(I) and 0 <= j < len(I[0]):
        if any((a, b) in dneighbors((i, j)) for a, b in toindices(obj)) and I[i][j] == 0:
          O = fill(O, 7, {(i, j)})
        elif all((a, b) not in toindices(obj) for a, b in dneighbors((i, j))) and I[i][j] == 0:
          O = fill(O, 8, {(i, j)})
        elif sum(1 for a, b in dneighbors((i, j)) if (a, b) in toindices(obj)) == 1 and I[i][j] == 0:
          O = fill(O, 6, {(i, j)})
  return O
 
86.0, 43.228416, def ggjcebfegccgecacieejhjjehjbhjjaa(I):
  holes = difference(backdrop(merge(objects(I, T, F, T))), merge(objects(I, T, F, T)))
  outer_holes = sfilter(holes, lambda loc: any(index(I, n) == 0 for n in dneighbors(loc)))
  inner_holes = difference(holes, outer_holes)
  bridges = sfilter(inner_holes, lambda loc: len(sfilter(dneighbors(loc), lambda n: index(I, n) == 5)) == 1)
  O = fill(I, 7, outer_holes)
  O = fill(O, 8, inner_holes)
  O = fill(O, 6, bridges)
  return O
 
9.666666666666666, 8.467558, def jecebfajeddheeacbadjhhdabdafffaj(I):
  O = I
  for obj in objects(I, T, F, T):
    for loc in delta(toindices(obj)):
      if index(I, loc) != 0:
        continue
      neighbors_in_obj = sum(1 for n in dneighbors(loc) if index(I, n) == 5)
      if neighbors_in_obj == 1:
        O = fill(O, 6, {loc})
      elif neighbors_in_obj > 1 and any(index(I, n) == 0 for n in dneighbors(loc)):
        O = fill(O, 7, {loc})
      elif neighbors_in_obj > 1:
        O = fill(O, 8, {loc})
  return O
 
47.333333333333336, 21.325882, def agchgfhceefdebdgigfaffjgbhhfbfgf(I):
    objs = objects(I, T, F, T)
    O = I
    for obj in objs:
        for i in range(len(I)):
            for j in range(len(I[0])):
                if (i, j) not in toindices(obj) and index(I, (i, j)) == 0:
                    neighbors = [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)]
                    count = sum(1 for n in neighbors if 0 <= n[0] < len(I) and 0 <= n[1] < len(I[0]) and n in toindices(obj))
                    if count == 1:
                        O = fill(O, 6, {(i, j)})
                    elif count > 1 and any(0 <= n[0] < len(I) and 0 <= n[1] < len(I[0]) and index(I, n) == 0 for n in neighbors):
                        O = fill(O, 7, {(i, j)})
                    elif count > 1:
                        O = fill(O, 8, {(i, j)})
    return O
 
16.0, 9.325171, def dbciceiefebiedbhbhdeefbcbabjjabf(I):
  O = I
  for obj in objects(I, T, F, T):
    O = paint(O, recolor(SEVEN, difference(bottom(obj), center_indices(obj))))
    O = paint(O, recolor(EIGHT, delta(obj)))
    O = paint(O, recolor(SIX, center_indices(obj))) if len(obj) > 5 else O
  return O
 
49.666666666666664, 24.055925, def bjabhdaaeaededffidbcbaejfcihgicg(I):
  O = I
  for obj in objects(I, T, F, T):
    h = height(obj)
    w = width(obj)
    if h > 1 and w > 1:
      O = paint(O, recolor(SEVEN, {(obj_v, (obj_i + h - 1, obj_j)) for obj_v, (obj_i, obj_j) in obj if obj_j != leftmost(obj) + w // 2}))
    O = paint(O, recolor(EIGHT, delta(obj)))
    O = paint(O, recolor(SIX, {(obj_v, (obj_i + h // 2, obj_j + w // 2)) for obj_v, (obj_i, obj_j) in obj})) if h > 2 or w > 2 else O
  return O
 
13.0, 9.28961, def jgffbddbdebaebghaghhbacbdcbccbii(I):
  O = I
  for obj in objects(I, T, F, T):
    O = underpaint(O, recolor(EIGHT, delta(obj)))
    for i, row in enumerate(crop(O, ulcorner(obj), shape(obj))):
      if i == height(obj) - 1:
        for j, v in enumerate(row):
          if j != width(obj) // 2:
            O = paint(O, recolor(SEVEN, {(v, (i + uppermost(obj), j + leftmost(obj)))}))
    center_i, center_j = center(obj)
    if index(O, (center_i, center_j)) == FIVE:
      O = paint(O, recolor(SIX, {(SIX, (center_i, center_j))})) if len(obj) > 5 else O
  return O
 
27.333333333333332, 18.3436, def ibfhbcabcdeiejcfjejacifcaegfeedh(I):
  O = I
  for obj in objects(I, T, F, T):
    O = paint(O, recolor(EIGHT, delta(obj)))
    bottom_row = shift(obj, (height(obj) - 1, 0))
    O = paint(O, recolor(SEVEN, difference(bottom_row, {(v, (i, j)) for v, (i, j) in bottom_row if j == center(obj)[1]})))
    if len(obj) > 5:
      O = paint(O, recolor(SIX, {(SIX, center(obj))}))
  return O 
 
22.0, 11.773147, def bchdhbigbgcbefgficiedafihieaabae(I):
  O = I
  for obj in objects(I, T, F, T):
    O = fill(O, EIGHT, delta(obj))
    O = fill(O, SEVEN, {(i, rightmost(obj)) for i in range(uppermost(obj) + 1, lowermost(obj))})
    O = fill(O, SEVEN, {(i, leftmost(obj)) for i in range(uppermost(obj) + 1, lowermost(obj))})
    if height(obj) > 2:
      O = fill(O, SEVEN, {(lowermost(obj), j) for j in range(leftmost(obj) + 1, rightmost(obj))})
    if len(obj) > 5:
      O = paint(O, recolor(SIX, {(SIX, center(obj))}))
  return O
 
43.0, 4.3203773, def jfaebcfcadeaeccbbbbifbdecfffhbcg(I):
    objs = objects(I, T, F, F)  # Extract all objects
    target_color = 5  # Define the color of objects to be modified
    filtered_objs = colorfilter(objs, target_color) # Filter objects with target color
    
    def get_inner_rect(obj):
        ul = ulcorner(obj)
        lr = lrcorner(obj)
        return frozenset((i,j) for i in range(ul[0]+1, lr[0]) for j in range(ul[1]+1, lr[1]))
    
    recolored_objs = frozenset()
    for obj in filtered_objs:
        inner_rect = get_inner_rect(obj)
        outer_rect = difference(toindices(obj), inner_rect)
        recolored_objs = combine(recolored_objs, recolor(8, outer_rect))
        recolored_objs = combine(recolored_objs, recolor(7, inner_rect))
        
    O = paint(I, recolored_objs)
    return O
 
31.0, 17.028938, def ciffbbiedficebehjffagacfbchaddfj(I):
  objs = objects(I, T, F, F)
  target_color = 5
  filtered_objs = colorfilter(objs, target_color)

  O = I
  for obj in filtered_objs:
    ul = ulcorner(obj)
    lr = lrcorner(obj)
    outer_rect = crop(I, ul, (lr[0]-ul[0]+1, lr[1]-ul[1]+1))
    inner_rect = crop(I, (ul[0]+1, ul[1]+1), (lr[0]-ul[0]-1, lr[1]-ul[1]-1))
    O = fill(O, 8, asindices(outer_rect))
    O = fill(O, 7, asindices(inner_rect))

  return O
 
43.0, 4.4962974, def facfhcdfaicfeafejhjdceaafebhcegf(I):
  objs = objects(I, T, F, F)
  target_color = 5
  filtered_objs = colorfilter(objs, target_color)

  O = I
  for obj in filtered_objs:
    outer_rect = box(obj)
    inner_rect = inbox(obj)
    O = fill(O, 8, outer_rect)
    O = fill(O, 7, inner_rect)
  return O
 
47.0, 16.19412, def gdhfffjfddbeeffbbijhchddiebbddfj(I):
  objs = objects(I, T, F, F)
  target_color = 5
  filtered_objs = colorfilter(objs, target_color)

  O = I
  for obj in filtered_objs:
    shifted_obj = shift(obj, (1, 1))  
    inner_rect = intersection(toindices(obj), toindices(shifted_obj)) 
    outer_rect = difference(toindices(obj), inner_rect)
    O = fill(O, 8, outer_rect)
    O = fill(O, 7, inner_rect)

  return O
 
38.0, 3.5798845, def cbecffhhdaadejceiefcfgfeegigebdh(I):
  objs = objects(I, T, F, F)
  target_color = 5
  filtered_objs = colorfilter(objs, target_color)

  O = I
  for obj in filtered_objs:
    outer_rect = delta(obj)
    inner_rect = difference(backdrop(obj), outer_rect)
    O = fill(O, 8, outer_rect)
    O = fill(O, 7, inner_rect)

  return O
 
54.0, 22.226347, def hfbfffhbjaecebijjdaeeghcbfajcbhc(I):
    objs = objects(I, T, F, T)  # Extract objects, excluding background
    outer = mapply(lambda obj: difference(outbox(toindices(obj)), toindices(obj)), objs) # Find outer border
    inner = mapply(lambda obj: difference(dneighbors(centerofmass(obj)), toindices(obj)), objs)  # Find inner border
    O = fill(I, SEVEN, outer)  # Fill outer border with 7
    O = fill(O, EIGHT, inner)  # Fill inner border with 8
    return O
 
7.666666666666667, 9.600179, def caeahjeghfaeeaecijaadcfaffbdcjeh(I):
  objs = objects(I, T, F, T)
  border_indices = mapply(lambda obj: delta(toindices(obj)), objs)
  inner_border = mapply(lambda obj: intersection(border_indices, dneighbors(centerofmass(obj))), objs)
  outer_border = difference(border_indices, inner_border)
  O = fill(I, SEVEN, outer_border)
  O = fill(O, EIGHT, inner_border)
  return O
 
45.666666666666664, 17.050903, def ebbbdjcfighgegfcibbdaibhfbfbdegf(I):
    objs = fgpartition(I)  # partition grid without background
    inner = mapply(lambda obj: sfilter(dneighbors(centerofmass(obj)), lambda ind: not contained(ind, toindices(obj))), objs)
    outer = mapply(lambda obj: sfilter(outbox(toindices(obj)), lambda ind: index(I, ind) == mostcolor(I)), objs)
    O = fill(I, EIGHT, inner)
    O = fill(O, SEVEN, outer)
    return O
 
35.666666666666664, 17.313543, def chjiabcaadejebihbaggdacaedbgccbe(I):
  O = I  
  for obj in objects(I, T, F, T):
    O = paint(O, recolor(EIGHT, difference(dneighbors(ulcorner(obj)),toindices(obj))))
    O = paint(O, recolor(EIGHT, difference(dneighbors(urcorner(obj)),toindices(obj))))
    if height(obj) > TWO:
      O = paint(O, recolor(SIX, {(ulcorner(obj)[0]+ONE, ulcorner(obj)[1])}))
    O = paint(O, recolor(SEVEN, difference(dneighbors(llcorner(obj)),toindices(obj))))
    O = paint(O, recolor(SEVEN, difference(dneighbors(lrcorner(obj)),toindices(obj))))
  return O 
 
46.666666666666664, 20.585106, def dgidcebjfcafeacabedabbdhibecdebc(I):
  O = I
  for obj in objects(I, T, F, T):
    for i, j in toindices(obj):
      for di, dj in [(0,1),(0,-1),(1,0),(-1,0)]:
        new_i, new_j = i + di, j + dj
        if 0 <= new_i < len(I) and 0 <= new_j < len(I[0]) and I[new_i][new_j] != 5:
          if di == 1:
            O = paint(O, recolor(SEVEN, {(new_i, new_j)}))
          else:
            O = paint(O, recolor(EIGHT, {(new_i, new_j)}))
      if i == uppermost(obj) + 1 and j == leftmost(obj):
        O = paint(O, recolor(SIX, {(i, j)}))
  return O
 
16.333333333333332, 19.608265, def fcaicfdbadceejfcjbgcbabcffbebcaa(I):
  O = canvas(mostcolor(I), shape(I))  # Create a blank canvas with the background color
  for obj in objects(I, T, F, T):
    O = paint(O, obj)  # Paint the objects onto the blank canvas
    for (i, j) in delta(obj):
      if (i == uppermost(obj) - 1 or i == lowermost(obj) + 1) and leftmost(obj) <= j <= rightmost(obj):
        O = paint(O, recolor(SEVEN, {(i, j)}))
      elif (j == leftmost(obj) - 1 or j == rightmost(obj) + 1) and uppermost(obj) <= i <= lowermost(obj):
        O = paint(O, recolor(EIGHT, {(i, j)}))
    if height(obj) > 2:
      O = paint(O, recolor(SIX, {(uppermost(obj) + 1, leftmost(obj))}))
  return O 
 
13.333333333333334, 3.9493728, def ffgiaiediaajefeeidegfjbbffeidbfb(I):
  objs = objects(I, T, F, F)
  target_color = 5
  filtered_objs = colorfilter(objs, target_color)

  O = I
  for obj in filtered_objs:
    O = fill(O, 8, delta(obj))
    if height(obj) > 4:
      O = fill(O, 7, inbox(obj))
    elif height(obj) == 3:
      O = fill(O, 7, shift(inbox(obj), (1, 0)))
  return O
 
8.0, 3.8067951, def gcgdabacchejebcjajdgecdgajfdhgjc(I):
  objs = objects(I, T, F, F)
  O = I
  for obj in objs:
    if color(obj) == 5:
      O = fill(O, 8, delta(obj))
      inner_indices = toindices(difference(backdrop(obj), delta(obj)))
      for i, j in inner_indices:
        if height(obj) > 6 or (height(obj) == 4 and i == uppermost(obj) + 1) or (height(obj) == 3 and i == uppermost(obj) + height(obj) // 2):
          O = fill(O, 7, ((i, j),))
  return O
 
47.0, 20.015724, def aegdejagdabjeffaiiffcbcejahebfjb(I):
  objs = objects(I, T, F, F)
  O = replace(I, 5, 8) 
  for obj in objs:
    if color(obj) == 8:
      if height(obj) > 6:
        O = underfill(O, 7, obj)
      else:
        inner_rect = crop(O, add(ulcorner(obj),(1,1)), subtract(shape(obj), (2,2)))
        inner_rect = fill(inner_rect, 7, ((0,0),(0,1))) if portrait(obj) else fill(inner_rect, 7, ((0,0),(1,0))) 
        O = paint(O,shift(asobject(inner_rect),add(ulcorner(obj),(1,1))))
  return O
 
8.666666666666666, 8.72761, def icbdecdeadjbedfcaddagfjifadcdigd(I):
  objs = objects(I, T, F, T) # Get all objects made of '5' (excluding background)
  inner = mapply(lambda obj: difference(dneighbors(centerofmass(obj)), toindices(obj)), objs) # Cells directly adjacent to object
  outer = mapply(lambda obj: difference(ineighbors(centerofmass(obj)), toindices(obj)), objs) # Cells diagonally adjacent
  diag_neighbors = mapply(dneighbors, toindices(merge(objs))) # Get all direct neighbors of all object cells
  double_neighbors = sfilter(diag_neighbors, lambda loc: size(sfilter(diag_neighbors, lambda loc2: loc == loc2)) > 1) # Find direct neighbors appearing more than once (adjacent to multiple objects)
  true_outer = combine(outer, difference(double_neighbors, inner))
  O = fill(I, EIGHT, inner)  
  O = fill(O, SEVEN, true_outer)
  return O
 
50.0, 20.296356, def ccegbaadjbdfecbaafajfiedidfeeeid(I):
  objs = objects(I, T, F, T)
  inner = mapply(lambda obj: inbox(toindices(obj)), objs) # Get cells inside the bounding box of each object
  outer = mapply(lambda obj: outbox(toindices(obj)), objs) # Get cells in the outer layer of the bounding box
  true_inner = difference(inner, toindices(merge(objs)))
  true_outer = difference(outer, toindices(merge(objs)))
  O = fill(I, EIGHT, true_inner)
  O = fill(O, SEVEN, true_outer)
  return O
 
18.333333333333332, 7.6807523, def egfffbhefafaefeejhicfabaibaaagfa(I):
  objs = objects(I, T, F, T)
  all_neighbors = mapply(lambda obj: combine(dneighbors(centerofmass(obj)), ineighbors(centerofmass(obj))), objs) # Get both direct and diagonal neighbors
  inner = difference(all_neighbors, mapply(lambda obj: ineighbors(centerofmass(obj)), objs))  # Inner cells are those that are direct neighbors but not diagonal
  outer = difference(all_neighbors, inner) # Outer cells are the remaining neighbors after removing inner cells
  O = fill(I, EIGHT, inner)
  O = fill(I, SEVEN, outer)
  return O
 
43.0, 5.697613, def ceabbdaadbacebfbjdihcbafdacacecg(I):
  O = I
  for obj in objects(I, T, F, T):
    O = paint(O, recolor(SEVEN, delta(obj)))  # Outline with '7'
    O = paint(O, recolor(EIGHT, difference(backdrop(obj), delta(obj))))  # '8' fill 
    if height(obj) > 2:
      O = paint(O, recolor(SIX, {(centerofmass(obj)[0], leftmost(obj))}))  # '6' based on center of mass
  return O
 
12.333333333333334, 3.7832503, def eccicedigabeefhcjafecbbfahbdaacf(I):
  O = fill(I, SEVEN, mapply(delta, objects(I, T, F, T)))  # One-liner '7' outline
  for obj in objects(I, T, F, T):
    O = underfill(O, EIGHT, obj)  # Fill '8' under the objects
    if height(obj) > 2:
      O = paint(O, recolor(SIX, {(ulcorner(obj)[0] + 1, ulcorner(obj)[1])}))  # '6' placement
  return O
 
47.0, 17.46565, def cfadajfhchadedcaiajbcagbciefbbhi(I):
  O = I
  for obj in objects(I, T, F, T):
    O = paint(O, recolor(SEVEN, box(obj))) # Outline with '7' using 'box'
    for index in toindices(obj):
      if index in  inbox(obj):
        O = paint(O, recolor(EIGHT, {index}))  # '8' fill by iterating 'inbox' 
    if height(obj) > 2:
      O = paint(O, recolor(SIX, {(ulcorner(obj)[0] + height(obj) // 2 - 1, ulcorner(obj)[1])}))  # '6' above vertical center
  return O
 
10.0, 8.604681, def iceejhacbdbaehcijgafcbjgafdidfje(I):
  O = I
  for obj in objects(I, T, F, F):
    if color(obj) == 5:
      O = paint(fill(O, 8, delta(obj)), recolor(7, sfilter(toindices(obj), lambda loc:
          (height(obj) > width(obj) and loc[1] == leftmost(obj) + width(obj) // 2) or
          (height(obj) <= width(obj) and loc[0] == uppermost(obj) + height(obj) // 2)
      )))
  return O
 
5.666666666666667, 3.4008474, def cfacfdcbdfabecbfacfffjedcaajhcec(I):
  O = I
  objs = objects(I, T, F, F)
  for obj in objs:
    if color(obj) == 5:
      O = fill(O, 8, delta(obj))
      if portrait(obj):
        O = fill(O, 7, connect((uppermost(obj) + 1, leftmost(obj) + width(obj) // 2),
                              (lowermost(obj) - 1, leftmost(obj) + width(obj) // 2)))
      else:
        O = fill(O, 7, connect((uppermost(obj) + height(obj) // 2, leftmost(obj) + 1),
                              (uppermost(obj) + height(obj) // 2, rightmost(obj) - 1)))
  return O
 
248.33333333333334, 12.914954, def cidjacaccedfedfcjidffahbeggbadaf(I):
    return merge([fill(fill(I, EIGHT, delta(o)), SIX, {center(o)}) if min(shape(o)) > 2 else (fill(I, SEVEN, o) if min(shape(o)) == 2 else I) for o in objects(I, T, F, T)])
 
132.0, 63.154568, def eebgdhecfaideigdjdbaeicjaffcadbc(I):
  objs = objects(I, T, F, F)
  O = I
  for obj in objs:
    if size(obj) == 4:
      O = paint(O, recolor(7, obj))
    elif size(obj) > 4:
      O = paint(O, recolor(8, obj))
      if square(obj):
        corner = ulcorner(obj)
        O = fill(O, 6, {(corner[0], corner[1] + 1)})
  return O
 
131.0, 64.46453, def fdccieebffgbefhjbacaeecfhjjiaffa(I):
  O = I
  for obj in objects(I, T, F, F):
    O = branch(
        size(obj) == 4,
        paint(O, recolor(7, obj)),  # True branch: recolor to 7
        branch(
            size(obj) > 4,
            paint(fill(O, 6, {(ulcorner(obj)[0], ulcorner(obj)[1] + 1)}) if square(obj) else O, recolor(8, obj)),  # True branch: recolor to 8 and potentially fill a cell with 6
            O  # False branch: do nothing
        )
    )
  return O
 
9.666666666666666, 4.8139114, def igbffchbabbgefbibeagbedbffeccfbh(I):
  O = I
  for obj in objects(I, T, F, T): # Iterate over objects
    for i, j in delta(toindices(obj)): # Iterate over cells in the object's bounding box but not in the object
      if 0 <= i < len(I) and 0 <= j < len(I[0]):
        if sum(1 for a, b in dneighbors((i, j)) if (a, b) in toindices(obj)) == 3: # Three direct neighbors belong to the object
          O = fill(O, 8, {(i, j)}) # Inner Fill
        elif sum(1 for a, b in ineighbors((i, j)) if (a, b) in toindices(obj)) > 0 and I[i][j] == 0: # At least one diagonal neighbor belongs to the object
          O = fill(O, 7, {(i, j)}) # Outer Fill
        elif sum(1 for a, b in dneighbors((i, j)) if (a, b) in toindices(obj)) == 1 and I[i][j] == 0: # Only one direct neighbor belongs to the object
          O = fill(O, 6, {(i, j)}) # Single-Neighbor Fill
  return O
 
12.666666666666666, 9.044849, def ibeaedgbdeaaeibbbeebaebbccdaabbb(I):
    O = I
    for obj in objects(I, T, F, T):
        inner = sfilter(dneighbors(centerofmass(obj)), lambda cell: all(n in toindices(obj) for n in dneighbors(cell)) and cell not in toindices(obj))
        outer = difference(ineighbors(centerofmass(obj)), toindices(obj))
        single = sfilter(delta(toindices(obj)), lambda cell: sum(1 for n in dneighbors(cell) if n in toindices(obj)) == 1)
        O = fill(O, 8, inner)
        O = fill(O, 7, outer)
        O = fill(O, 6, single)
    return O
 
6.0, 4.812167, def jcebgcfdadheeibcabeihedjdafbfech(I):
  O = fill(I, SEVEN, mapply(delta, objects(I, T, F, T)))  # Outline with '7'
  for obj in objects(I, T, F, T):
    O = paint(O, recolor(EIGHT, inbox(obj)))  # Fill inside with '8'
    if height(obj) > 2:
      O = paint(O, recolor(SIX, {(ulcorner(obj)[0] + 1, ulcorner(obj)[1] + 1)}))  # Place '6'
  return O
 
10.0, 4.17073, def fadgjeffiadaedeaabafcaehbiebibcb(I):
  O = fill(I, SEVEN, mapply(delta, objects(I, T, F, T))) # Outline with '7'
  for obj in objects(I, T, F, T):
    top_left = ulcorner(obj)
    for i in range(top_left[0] + 1, lowermost(obj)):  # Fill inside with '8'
      for j in range(top_left[1] + 1, rightmost(obj)):
        if (i, j) in toindices(obj):
          O = paint(O, recolor(EIGHT, {(i, j)}))
    if height(obj) > 2:
      O = paint(O, recolor(SIX, {(top_left[0] + 1, top_left[1] + 1)}))  # Place '6'
  return O
 
18.0, 4.08569, def cagdigechhbeeajajeiciaadjehbjbfj(I):
  O = fill(I, SEVEN, mapply(delta, objects(I, T, F, T)))  # Outline with '7'
  for obj in objects(I, T, F, T):
    if height(obj) > 2:
      O = paint(O, recolor(SIX, {(ulcorner(obj)[0] + 1, ulcorner(obj)[1] + 1)}))  # Place '6'
    cropped = crop(O, add(ulcorner(obj), (1,1)), subtract(shape(obj), (2,2)))
    O = paint(O, recolor(EIGHT, asindices(cropped)))  # Fill inside with '8'
  return O
 
8.333333333333334, 10.492612, def bheeccbehciaedfaaaacbdhdbejabjja(I):
  def process_object(grid, obj):
    if min(shape(obj)) > 2:
      grid = fill(grid, EIGHT, delta(obj))
      grid = fill(grid, SIX, {center(obj)})
    elif min(shape(obj)) == 2:
      grid = fill(grid, SEVEN, obj)
    return grid
  return next(iter(
              apply(lambda obj: process_object(I, obj), 
                    objects(I, T, F, T))), I)
 
5.0, 3.69036, def ecjbejaedjccecdajgfiacgdddahffff(I):
  small_objs = sfilter(objects(I, T, F, T), lambda o: min(shape(o)) == 2)
  large_objs = sfilter(objects(I, T, F, T), lambda o: min(shape(o)) > 2)
  modified_grid = I
  for obj in small_objs:
    modified_grid = fill(modified_grid, SEVEN, obj)
  for obj in large_objs:
    modified_grid = fill(modified_grid, EIGHT, delta(obj))
    modified_grid = fill(modified_grid, SIX, {center(obj)})
  return modified_grid
 
132.0, 63.732426, def iddfdefagbaeefefjiefddcaccibhafb(I):
    O = I
    for obj in objects(I, T, F, F):
        color = 7 if size(obj) == 4 else 8
        O = paint(O, recolor(color, obj))
        if size(obj) > 4 and square(obj):
            i, j = ulcorner(obj)
            O = fill(O, 6, {(i + 1, j + 1)})
    return O
 
4.666666666666667, 3.7979424, def eeajidbhifddeibcjjgefehfbhcfbcaa(I):
  O = I
  for obj in objects(I, T, F, T):
    O = paint(O, recolor(EIGHT, delta(obj)))
    if height(obj) > 2:
      O = paint(O, recolor(SEVEN, {(ulcorner(obj)[0] + 1, ulcorner(obj)[1] + 1)}))
    else:
      O = paint(O, recolor(SIX, {(ulcorner(obj)[0] + 1, ulcorner(obj)[1] + 1)}))
  return O 
 
6.0, 2.3783133, def dffbdbbhfbadehagjajjhihfbdiejgbc(I):
  objs = objects(I, T, F, F)
  O = fill(I, 8, merge(apply(delta, colorfilter(objs, 5))))  # Outline with '8'
  for obj in colorfilter(objs, 5):
    if height(obj) > width(obj):
      O = fill(O, 7, connect(add(ulcorner(obj), (1, width(obj) // 2)),
                              add(lrcorner(obj), (-1, width(obj) // 2)))) 
    else:
      O = fill(O, 7, connect(add(ulcorner(obj), (height(obj) // 2, 1)),
                              add(lrcorner(obj), (height(obj) // 2, -1))))
  return O
 
6.666666666666667, 3.9494734, def caebbjhafighefbeajifbeageaighjge(I):
  objs = objects(I, T, F, F)
  O = I
  for obj in objs:
    if color(obj) == 5:
      O = fill(O, 8, delta(obj))
      center_i, center_j = center(toindices(obj))
      if height(obj) > width(obj):
        O = fill(O, 7, frozenset((i, center_j) for i in range(center_i - height(obj) // 2 + 1, center_i + height(obj) // 2)))
      else:
        O = fill(O, 7, frozenset((center_i, j) for j in range(center_j - width(obj) // 2 + 1, center_j + width(obj) // 2)))
  return O
 
17.333333333333332, 12.726254, def iegfebeegbfcecabjjcfigafbaehfhjf(I):
  O = I
  for obj in objects(I, T, F, T):
    O = fill(O, EIGHT, inbox(toindices(obj))) # Fill the inbox with '8'
    if height(obj) > 2:
      corner = add(ulcorner(obj), (1, 1)) # Calculate the corner position for '6'
      O = paint(O, recolor(SIX, {corner}))
    left_edge = connect(add(ulcorner(obj), (1, 0)), add(llcorner(obj), (-1, 0)))
    right_edge = connect(add(urcorner(obj), (1, 0)), add(lrcorner(obj), (-1, 0)))
    O = paint(O, recolor(SEVEN, left_edge | right_edge)) # Highlight vertical edges with '7'
  return O
 
33.0, 8.492253, def fbefjccefaijefbgiebhaecadbabejbh(I):
  O = I
  for obj in objects(I, T, F, T):
    O = paint(O, recolor(EIGHT, difference(backdrop(obj), toindices(obj)))) # '8' in backdrop excluding object
    if height(obj) > 2:
      O = paint(O, recolor(SIX, {add(ulcorner(obj), (1, 1))})) # Place '6'
    O = paint(O, recolor(SEVEN, difference(box(obj), {(uppermost(obj), leftmost(obj)), (lowermost(obj), rightmost(obj))}))) # Highlight vertical edges with '7'
  return O
 
47.666666666666664, 17.362976, def bdddcefghiefechbicdggbeceadcacjc(I):
  objs = objects(I, T, F, F)
  O = fill(I, 8, mfilter(objs, lambda obj: color(obj) == 5))
  for obj in objs:
    if color(obj) == 5:
      u, l = ulcorner(obj), lrcorner(obj)
      if height(obj) > width(obj):
        O = fill(O, 7, connect(add(u, (1, (l[1]-u[1]) // 2)), add(l, (-1, (l[1]-u[1]) // 2))))
      else:
        O = fill(O, 7, connect(add(u, ((l[0]-u[0]) // 2, 1)), add(l, ((l[0]-u[0]) // 2, -1))))
  return O
 
5.666666666666667, 3.5690842, def fbaeebhdcehaeedcaaedfcidfecehabf(I):
  objs = objects(I, T, F, F)
  O = I
  for obj in objs:
    if color(obj) == 5:
      O = fill(O, 8, delta(obj))
      top_left = ulcorner(obj)
      bottom_right = lrcorner(obj)
      if height(obj) > width(obj):
        start_y = (bottom_right[1] - top_left[1]) // 2 + top_left[1]
        O = fill(O, 7, frozenset((i, start_y) for i in range(top_left[0] + 1, bottom_right[0])))
      else:
        start_x = (bottom_right[0] - top_left[0]) // 2 + top_left[0]
        O = fill(O, 7, frozenset((start_x, j) for j in range(top_left[1] + 1, bottom_right[1])))
  return O
 
132.0, 62.997356, def aecfcddabbebehhcjbfbebcfchjjdcji(I):
  O = I
  for obj in objects(I, T, F, F):
    if size(obj) == 4:
      O = paint(O, recolor(7, toindices(obj)))
    elif size(obj) > 4:
      O = paint(O, recolor(8, toindices(obj)))
      if square(obj):
        i, j = ulcorner(obj)
        O = fill(O, 6, {(i + 1, j + 1)})
  return O
 
38.333333333333336, 4.712853, def badfacadedfjecjajcbbdbjjjecbbbff(I):
  O = I
  for obj in objects(I, T, F, T):
    for i in range(uppermost(obj)+1, lowermost(obj)):
      for j in range(leftmost(obj)+1, rightmost(obj)):
        O = fill(O, EIGHT, {(i, j)})
    for i in range(uppermost(obj), lowermost(obj)+1):
      O = fill(O, SEVEN, {(i, leftmost(obj)), (i, rightmost(obj))})
    for j in range(leftmost(obj), rightmost(obj)+1):
      O = fill(O, SEVEN, {(uppermost(obj), j), (lowermost(obj), j)})
    if height(obj) > 2:
      O = fill(O, SIX, {add(ulcorner(obj), (1, 1))})
  return O
 
6.666666666666667, 3.7085488, def dcdahcaibfchedggiagecebecbdbfcfj(I):
  objs = objects(I, T, F, F)
  O = I
  for obj in colorfilter(objs, 5):
    O = fill(O, 8, delta(obj))
    center_i, center_j = centerofmass(obj)
    if height(obj) > width(obj):
      O = fill(O, 7, connect((center_i - height(obj) // 2 + 1, center_j),
                              (center_i + height(obj) // 2 - 1, center_j)))
    else:
      O = fill(O, 7, connect((center_i, center_j - width(obj) // 2 + 1),
                              (center_i, center_j + width(obj) // 2 - 1)))
  return O
 
21.0, 7.115867, def chdidadfbbccebefacgdejhbcbhaebcb(I):
  objs = objects(I, T, F, F)
  O = fill(I, 8, mapply(delta, colorfilter(objs, 5)))
  for obj in colorfilter(objs, 5):
    if height(obj) > width(obj):
      O = fill(O, 7, sfilter(backdrop(obj), lambda loc: loc[0] in range(uppermost(obj) + 1, lowermost(obj))))
    else:
      O = fill(O, 7, sfilter(backdrop(obj), lambda loc: loc[1] in range(leftmost(obj) + 1, rightmost(obj))))
  return O
 
39.0, 11.005129, def gcafbbhjdaddeacfbabfcbcgfbajhhdb(I):
  objs = objects(I, T, F, F)
  O = fill(I, 8, merge(apply(lambda obj: backdrop(obj) - obj, colorfilter(objs, 5))))
  for obj in colorfilter(objs, 5):
    if height(obj) > width(obj):
      O = fill(O, 7, connect(add(ulcorner(obj), (1, width(obj) // 2)), add(ulcorner(obj), (height(obj) - 2, width(obj) // 2))))
    else:
      O = fill(O, 7, connect(add(ulcorner(obj), (height(obj) // 2, 1)), add(ulcorner(obj), (height(obj) // 2, width(obj) - 2))))
  return O
 
47.0, 13.092203, def hbdhdcebdfdiedfdbgfdihigegccceff(I):
  objs = objects(I, T, F, T)
  inner = mapply(lambda obj: sfilter(toindices(obj), lambda c: size(intersection(dneighbors(c), toindices(obj))) == 4), objs) 
  outer = mapply(lambda obj: sfilter(toindices(obj), lambda c: 0 < size(intersection(dneighbors(c), toindices(obj))) < 4), objs)
  single = mapply(lambda obj: sfilter(delta(toindices(obj)), lambda cell: size(intersection(dneighbors(cell), toindices(obj))) == 1), objs)
  O = fill(fill(fill(I, 8, inner), 7, outer), 6, single)
  return O 
 
8.666666666666666, 6.08747, def ajcefaaijfdfeijdaeeecbbgchccdcdh(I):
  objs = objects(I, T, F, T)
  O = I
  for i, obj in enumerate(objs):
    O = paint(O, recolor(EIGHT, difference(backdrop(obj), box(obj))))
    if i == 0:
      O = paint(O, recolor(SIX, {add(ulcorner(obj), (1, 1))}))
    else:
      if portrait(obj):
        O = paint(O, recolor(SEVEN, {(centerofmass(obj)[0], leftmost(obj)), (centerofmass(obj)[0], rightmost(obj))}))
      else:
        O = paint(O, recolor(SEVEN, {(uppermost(obj), centerofmass(obj)[1]), (lowermost(obj), centerofmass(obj)[1])}))
  return O
 
5.333333333333333, 2.340872, def ebcbejabbibaejceadajhecebfgdgchd(I):
  O = I
  for i, obj in enumerate(objects(I, T, F, T)):
    O = paint(O, recolor(EIGHT if i == 0 or not portrait(obj) else color(obj), difference(backdrop(obj), box(obj))))
    if i == 0:
      O = paint(O, recolor(SIX, {add(ulcorner(obj), (1, 1))}))
    else:
      if portrait(obj):
        O = paint(O, recolor(SEVEN, connect((uppermost(obj), centerofmass(obj)[1]), (lowermost(obj), centerofmass(obj)[1]))))
  return O
 
4.333333333333333, 1.9783571, def fagfaiebffffebhdiacijgcdciacacaa(I):
  objs = order(objects(I, T, F, T), lambda obj: -uppermost(obj))
  O = I
  for i, obj in enumerate(objs):
    O = paint(O, recolor(EIGHT, difference(backdrop(obj), box(obj))))
    if i == 0:
      O = paint(O, recolor(SIX, {add(ulcorner(obj), (1, 1))}))
    else:
      if portrait(obj):
        O = paint(O, recolor(SEVEN, {(k, centerofmass(obj)[1]) for k in range(uppermost(obj), lowermost(obj) + 1)}))
  return O
 
5.333333333333333, 2.9351292, def dfafaccabhjeeacciefaiacdbfjfgdab(I):
  objs = objects(I, T, F, T)
  obj1 = extract(objs, lambda obj: uppermost(obj) == min(uppermost(o) for o in objs))
  obj2 = other(objs, obj1)
  O = paint(I, recolor(EIGHT, difference(backdrop(obj1), box(obj1))))
  O = paint(O, recolor(SIX, {add(ulcorner(obj1), (1, 1))}))
  if portrait(obj2):
      O = paint(O, recolor(SEVEN, connect((uppermost(obj2), centerofmass(obj2)[1]), (lowermost(obj2), centerofmass(obj2)[1]))))
  else:
      O = paint(O, recolor(EIGHT, difference(backdrop(obj2), box(obj2))))
  return O
 
47.0, 8.792608, def defbdibcfegbegceibejdcaifjaajcbc(I):
  O = I
  objs = objects(I, T, F, F)
  for obj in objs:
    if color(obj) != mostcommon(I):
      O = fill(O, 8, delta(obj))
      if portrait(obj):
        O = fill(O, 7, connect((uppermost(obj) + 1, leftmost(obj) + width(obj) // 2),
                              (lowermost(obj) - 1, leftmost(obj) + width(obj) // 2)))
      elif not square(obj) or height(obj) != 3:  # Check for non-square or height != 3
        O = fill(O, 7, connect((uppermost(obj) + height(obj) // 2, leftmost(obj) + 1),
                              (uppermost(obj) + height(obj) // 2, rightmost(obj) - 1)))
      else: # Special case for 3x3 square
        O = fill(O, 7, connect((uppermost(obj) + 2, leftmost(obj) + width(obj) // 2),
                              (uppermost(obj) + 2, leftmost(obj) + width(obj) // 2)))
  return O
 
136.0, 44.397312, def jdhdgffehecceacebafdbccdgffabadf(I):
  O = fill(I, 8, mfilter(objects(I, T, F, F), lambda obj: color(obj) != mostcommon(I)))
  for obj in objects(I, T, F, F):
    if color(obj) != mostcommon(I):
      if portrait(obj):
        O = fill(O, 7, connect((uppermost(obj) + 1, leftmost(obj) + width(obj) // 2), (lowermost(obj) - 1, leftmost(obj) + width(obj) // 2)))
      elif square(obj) and height(obj) == 3:
        O = fill(O, 7, ((uppermost(obj) + 1, leftmost(obj) + 1),))
      else:
        O = fill(O, 7, connect((uppermost(obj) + height(obj) // 2, leftmost(obj) + 1), (uppermost(obj) + height(obj) // 2, rightmost(obj) - 1)))
  return O
 
46.666666666666664, 8.939599, def cffffadfadcaebagifaicjhcacdjfdje(I):
  O = I
  for obj in objects(I, T, F, F):
    if color(obj) != mostcommon(I):
      O = fill(O, 8, delta(obj))
      center_row = uppermost(obj) + height(obj) // 2
      center_col = leftmost(obj) + width(obj) // 2
      if portrait(obj):
        line = connect((uppermost(obj) + 1, center_col), (lowermost(obj) - 1, center_col))
      elif square(obj) and height(obj) == 3:
        line = {(center_row, center_col)}  # Single cell line for 3x3 square
      else:
        line = connect((center_row, leftmost(obj) + 1), (center_row, rightmost(obj) - 1))
      O = fill(O, 7, line)
  return O
 
46.0, 10.594152, def ghdicfdbfdehedbcihfigfehcejijbjh(I):
  O = I
  for obj in objects(I, T, F, F):
    if color(obj) != mostcommon(I):
      O = fill(fill(O, 8, delta(obj)), 7, connect((uppermost(obj) + int(portrait(obj)) + int(square(obj) and height(obj) == 3),
                                                  leftmost(obj) + width(obj) // 2 + int(not portrait(obj))),
                                                  (lowermost(obj) - int(portrait(obj)), 
                                                  leftmost(obj) + width(obj) // 2 + int(not portrait(obj))))
                    )
  return O
 
47.0, 8.988363, def befcafefegdaedfiaieecebbfcggccgb(I):
  objs = objects(I, T, F, F)
  O = fill(I, 8,  mapply(delta, sfilter(objs, lambda obj: color(obj) != mostcommon(I))))
  for obj in objs:
    if color(obj) != mostcommon(I):
      start_row = uppermost(obj) + 1 if portrait(obj) else uppermost(obj) + height(obj) // 2
      end_row = lowermost(obj) - 1 if portrait(obj) else start_row
      start_col = leftmost(obj) + width(obj) // 2 if portrait(obj) else leftmost(obj) + 1
      end_col = start_col if portrait(obj) else rightmost(obj) - 1
      if square(obj) and height(obj) == 3:
        start_row += 1
        end_row = start_row
      O = fill(O, 7, connect((start_row, start_col), (end_row, end_col)))
  return O
 
28.333333333333332, 13.864307, def acaaacjbcbbbebefahcjcjadhidgaeee(I):
  objs = objects(I, T, F, T)
  O = I
  for i, obj in enumerate(objs):
    if i == 0:
      O = fill(O, EIGHT, toindices(obj))
      O = paint(O, recolor(SIX, {add(ulcorner(obj), (1, 1))}))
    elif portrait(obj):
      O = paint(O, recolor(SEVEN, backdrop(obj)))
  return O
 
13.666666666666666, 21.833292, def djiadbaccdifeefajabegaeecgbeagig(I):
  O = I
  for obj in objects(I, T, F, T):
    if hline(obj) or vline(obj):
      for i, j in difference(dneighbors(centerofmass(obj)), toindices(obj)):
        if 0 <= i < len(I) and 0 <= j < len(I[0]):
          O = fill(O, EIGHT, {(i, j)})
      for i, j in difference(dneighbors(center(toindices(obj))), toindices(obj)):
        if 0 <= i < len(I) and 0 <= j < len(I[0]):
          O = fill(O, SEVEN, {(i, j)})
  return O
 
6.0, 4.6017475, def ebdbecigejceeicfbdihadeebfgacbbd(I):
  objs = objects(I, T, F, F)
  O = I
  for obj in colorfilter(objs, 5):
    O = fill(O, 8, delta(obj))  # Outline
    h, w = height(obj), width(obj)
    ci, cj = centerofmass(obj)
    if h > w:
      O = fill(O, 7, connect((ci - h // 2 + 1, cj), (ci + h // 2 - 1, cj)))  # Vertical line
      if h % 2 == 1:
        O = fill(O, 6, {(ci, cj)})  # Center dot
    else:
      O = fill(O, 7, connect((ci, cj - w // 2 + 1), (ci, cj + w // 2 - 1)))  # Horizontal line
      if w % 2 == 1:
        O = fill(O, 6, {(ci, cj)})  # Center dot
  return O
 
6.333333333333333, 4.054401, def cbafciaaabdbedebafcaddbbiebcjeje(I):
  objs = objects(I, T, F, F)
  O = I
  for obj in colorfilter(objs, 5):
    O = fill(O, 8, delta(obj))  # Outline
    h, w = height(obj), width(obj)
    if h > w:
      O = fill(O, 7, connect(add(ulcorner(obj), (1, w // 2)), add(lrcorner(obj), (-1, w // 2)))) # Vertical
      O = fill(O, 6, {(centerofmass(obj))}) if h % 2 == 1 else O # Dot
    else:
      O = fill(O, 7, connect(add(ulcorner(obj), (h // 2, 1)), add(lrcorner(obj), (h // 2, -1)))) # Horizontal
      O = fill(O, 6, {(centerofmass(obj))}) if w % 2 == 1 else O # Dot
  return O
 
8.666666666666666, 7.4798546, def ciabieeccaidejiciidfcfdigaeaeebc(I):
  O = I
  for obj in colorfilter(objects(I, T, F, F), 5):
    O = fill(O, 8, delta(obj)) # Outline
    h, w = height(obj), width(obj)
    ci, cj = center(toindices(obj))
    line_direction = (1, 0) if h > w else (0, 1)
    O = fill(O, 7, connect(subtract( (ci, cj), multiply((h // 2, w // 2), line_direction)), add((ci, cj), multiply((h // 2 - 1, w // 2 - 1), line_direction))))
    O = fill(O, 6, {(ci, cj)}) if (h * line_direction[0] + w * line_direction[1]) % 2 == 1 else O  # Dot
  return O
 
24.333333333333332, 3.9449363, def fafgaffffjheeaecafcbcddchaehgfhd(I):
  objs = order(objects(I, T, F, T), lambda obj: -uppermost(obj))
  O = I
  for i, obj in enumerate(objs):
    if i == 0:
      if portrait(obj):
        O = paint(O, recolor(EIGHT, {(k, centerofmass(obj)[1]) for k in range(uppermost(obj), lowermost(obj) + 1)}))
        O = paint(O, recolor(SIX, {add(ulcorner(obj), (1, 1))}))
      else:
        O = paint(O, recolor(EIGHT, difference(backdrop(obj), box(obj))))
    elif i == 1:
      O = paint(O, recolor(SEVEN, toindices(obj)))
  return O
 
7.666666666666667, 1.3927338, def edabafdfeehceecbacfjgcihafbiicij(I):
  objs = objects(I, T, F, T)
  top_obj = argmax(objs, lambda obj: -uppermost(obj))
  second_obj = argmax(difference(objs, {top_obj}), lambda obj: -uppermost(obj))
  O = paint(I, recolor(SEVEN, toindices(second_obj)))
  if portrait(top_obj):
    O = paint(O, recolor(EIGHT, {(k, centerofmass(top_obj)[1]) for k in range(uppermost(top_obj), lowermost(top_obj) + 1)}))
    O = paint(O, recolor(SIX, {add(ulcorner(top_obj), (1, 1))}))
  else:
    O = paint(O, recolor(EIGHT, difference(backdrop(top_obj), box(top_obj))))
  return O
 
12.333333333333334, 2.6909208, def iefiabhigabieeaeafdcdjfedafjijaj(I):
  O = I
  for obj in objects(I, T, F, T):
    O = branch(
        equality(obj, argmax(objects(I, T, F, T), lambda obj: -uppermost(obj))),
        branch(portrait(obj), 
               paint(paint(O, recolor(EIGHT, {(k, centerofmass(obj)[1]) for k in range(uppermost(obj), lowermost(obj) + 1)})), 
                     recolor(SIX, {add(ulcorner(obj), (1, 1))})),
               paint(O, recolor(EIGHT, difference(backdrop(obj), box(obj))))),
        branch(equality(obj, argmax(difference(objects(I, T, F, T), {argmax(objects(I, T, F, T), lambda obj: -uppermost(obj))}), lambda obj: -uppermost(obj))),
               paint(O, recolor(SEVEN, toindices(obj))),
               O)
    )
  return O
 
47.333333333333336, 4.3330517, def defgdediagegegiaiafhfdeifdbafebb(I):
  objs = objects(I, T, F, F)
  palette_counts = {v: colorcount(I, v) for v in palette(I)}
  sorted_colors = order(palette(I), lambda c: palette_counts[c])
  color1 = sorted_colors[1]
  color2 = sorted_colors[2]
  O = paint(I, recolor(EIGHT, merge(colorfilter(objs, color2))))
  O = paint(O, recolor(SEVEN, merge(colorfilter(objs, color1))))
  O = paint(O, recolor(SIX, {add(ulcorner(merge(colorfilter(objs, color2))), (1, 1))}))
  return O
 
13.0, 2.5693088, def bffijdfagdihehggabcgcbhadeiacegd(I):
  objs = objects(I, T, F, T)
  largest = argmax(objs, size)
  second_largest = argmax(difference(objs, {largest}), size)
  O = paint(I, recolor(EIGHT, merge(apply(lambda obj: sfilter(obj, lambda cell: cell[0] == SEVEN), {largest, second_largest}))))
  if len(smallest := sizefilter(objs, ONE)) > 0:
    O = paint(O, recolor(SIX, merge(smallest)))
  return O
 
15.333333333333334, 3.0135236, def fedfcbecdeacececaegcdfebcaeafbfd(I):
  O = I
  objs = objects(I, T, F, T)
  for i, obj in enumerate(order(objs, size)):
    if i == 0 and len(obj) == 1:
      O = paint(O, recolor(SIX, toindices(obj)))
    elif i <= 1:
      O = paint(O, recolor(EIGHT, ofcolor(subgrid(obj, O), SEVEN)))
  return O
 
4.666666666666667, 1.6342641, def hejceeadiddjejidicgadgdahfdgjdjg(I):
  O = I
  for obj in objects(I, T, F, T):
    O = fill(O, 8, delta(obj)) # Outline
    if hline(obj): O = fill(O, 8, obj) # Horizontal
    if vline(obj): O = fill(O, 7, obj) # Vertical
  for i in range(len(I)):
    for j in range(len(I[0])):
      if index(O, (i, j)) == 7 and index(O, (i - 1, j)) == 8 and index(O, (i, j - 1)) == 8:
        O = fill(O, 6, {(i, j)}) # Intersection
  return O 
 
13.666666666666666, 4.1602106, def aecigjjghfcaeffciddcfdedjbgdddbb(I):
  objs = objects(I, T, F, T)
  top_obj = argmax(objs, lambda obj: -uppermost(obj))
  second_obj = argmax(difference(objs, {top_obj}), lambda obj: -uppermost(obj))
  O = I
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if (i, j) in toindices(second_obj) and (i, j) not in box(second_obj):
        O = paint(O, {(mostcolor(second_obj) + 5, (i, j))})
      if (i, j) in toindices(top_obj) and (i, j) not in box(top_obj):
        O = paint(O, {(EIGHT, (i, j))})
  if width(top_obj) > height(top_obj):
    O = paint(O, {(SIX, tuple(add(ulcorner(top_obj), (1, 1))))})
  return O
 
4.666666666666667, 1.4847634, def cjabjbaacigdecgdbddedgcfjddadfjh(I):
  objs = objects(I, T, F, T)
  O = I
  for obj in objs:
    if any((i, j) == centerofmass(obj) for i, row in enumerate(I) for j, val in enumerate(row) if val == SIX):
      target_obj = obj
    elif any((i, j) == centerofmass(obj) for i, row in enumerate(I) for j, val in enumerate(row) if val == SEVEN):
      O = paint(O, recolor(EIGHT, difference(backdrop(obj), box(obj))))
    else:
      O = paint(O, recolor(mostcolor(obj) + 5, difference(toindices(obj), box(obj))))
  return O
 
4.666666666666667, 1.6342641, def fbdfgjdacebfebffaabiggbfabafjgci(I):
  O = paint(I, recolor(SEVEN, ofcolor(I, TWO)))
  objs = objects(O, T, F, T)
  for obj in objs:
    if mostcolor(obj) == FIVE and width(obj) > height(obj):
      O = paint(O, recolor(EIGHT, difference(backdrop(obj), box(obj))))
      O = paint(O, recolor(SIX, {add(ulcorner(obj), (1, 1))}))
    elif mostcolor(obj) == FIVE:
      O = paint(O, recolor(EIGHT, difference(backdrop(obj), box(obj))))
  return O
 
126.66666666666667, 9.084078, def cjfejdcbeffdejjdaddfdjhfhbacaeff(I):
  objs = objects(I, T, F, F)
  bg = mostcolor(I)
  obj1 = argmax(objs, size)  # Largest object
  obj2 = argmax(difference(objs, {obj1}), size)  # Second largest
  O = paint(I, recolor(EIGHT, obj1))
  O = paint(O, recolor(SEVEN, obj2))
  O = paint(O, recolor(SIX, {add(ulcorner(obj2), (1, 1))}))
  return O 
 
17.666666666666668, 4.533975, def acibeffbaaejeafgjbddfhddhagefdfc(I):
  objs = objects(I, T, F, T)
  smallest = argmin(objs, size) # Directly find the smallest object
  second_largest = argmax(difference(objs, {smallest}), size) # Find second largest after removing the smallest
  I = paint(I, recolor(EIGHT, ofcolor(subgrid(second_largest, I), SEVEN))) # Recolor 7s in the second largest to 8
  if size(smallest) == ONE: # Check size of the smallest object
      I = paint(I, recolor(SIX, toindices(smallest))) # Recolor the smallest object to 6
  return I
 
15.333333333333334, 3.0013916, def fehjibdbiddheibeaddibeabffhbiccf(I):
  objs = objects(I, T, F, T)
  if len(objs) > 1: # Check if there are at least two objects 
    sorted_objs = order(objs, size)
    smallest = sorted_objs[0] # Smallest object
    second_largest = sorted_objs[1] # Second largest object
    I = paint(paint(I, recolor(EIGHT, ofcolor(subgrid(second_largest, I), SEVEN))), recolor(SIX, toindices(smallest))) # Recolor both objects simultaneously
  return I
 
4.666666666666667, 1.5008838, def adhebiaicjhbeeeeiecaefbafjhcddde(I):
  objs = objects(I, T, F, T)  # Extract objects
  O = fill(I, 8, merge(apply(delta, objs)))  # Draw outlines with 8
  for obj in objs:
    if hline(obj): 
      O = fill(O, 8, obj)  # Horizontal lines filled with 8
    if vline(obj):
      O = fill(O, 7, obj)  # Vertical lines filled with 7
      for i, j in toindices(obj):
        if index(O, (i, j-1)) == 8 or index(O, (i, j+1)) == 8:
          O = fill(O, 6, {(i, j)})  # Intersections marked with 6
  return O
 
4.666666666666667, 1.4847634, def bbbhgddagdhhehefjffiffgfcbdjgghb(I):
    # Identify objects
    objs = objects(I, T, F, T) 
    # Iterate over objects and apply transformation
    transformed_objs = frozenset()
    for obj in objs:
        # Condition: Check if object's color is 7
        if color(obj) == 7:
            # Apply color replacement
            obj = recolor(8, obj) 
        # Add transformed object to the set
        transformed_objs = transformed_objs.union(frozenset({obj})) 
    # Paint the transformed objects onto the grid
    O = paint(canvas(0, shape(I)), merge(transformed_objs)) 
    return O
 
13.666666666666666, 13.827666, def jagbiecjidjgeebdafbffebbiahcefcf(I):
    # Apply cellwise replacement if color is 7
    O = cellwise(I, replace(I, 7, 8), 0)
    return O
 
54.0, 20.934025, def deedifaiijehebbiiffbfgfddidbccaf(I):
  O = paint(I, recolor(SEVEN, ofcolor(I, TWO)))
  for obj in objects(O, T, F, T):
    if color(obj) == FIVE:
      O = paint(O, recolor(EIGHT, outbox(obj)))
      if width(obj) > height(obj):
        O = paint(O, recolor(SIX, {add(ulcorner(obj), (1, 1))}))
  return O
 
41.666666666666664, 6.1628246, def hdjjghfagffiefbibjaahffgaifcjdef(I):
  objs = sorted(objects(I, T, F, T), key=size, reverse=True) # Sort objects by size
  O = paint(I, recolor(EIGHT, objs[0])) # Recolor largest to 8
  O = paint(O, recolor(SEVEN, objs[1])) # Recolor second largest to 7
  O = paint(O, recolor(SIX, {add(ulcorner(objs[1]), (1, 1))})) # Recolor the cell
  return O
 
10.0, 1.8039403, def cbcfcfbchbgbefjjjdjefbjfffecdfci(I):
  objs = objects(I, T, F, T)
  size_dict = {}
  for obj in objs:
    size_dict[size(obj)] =  size_dict.get(size(obj), []) + [obj]
  
  smallest_size = min(size_dict.keys())
  second_largest_size = sorted(size_dict.keys())[1]

  I = paint(I, recolor(SIX, merge(apply(lambda obj: toindices(obj), size_dict[smallest_size]))))

  for obj in size_dict[second_largest_size]:
    if SEVEN in palette(obj):
      I = paint(I, recolor(EIGHT, toindices(obj)))
  return I
 
13.0, 2.267203, def jchgebhebdededebadfahehedegjifcj(I):
  objs = objects(I, T, F, T)
  transformed_objs = frozenset()
  for obj in objs:
    if color(obj) == 7:
      center_index = center(obj)
      obj = frozenset(
          (8 if index in delta(frozenset({center_index})) else 6, index) 
          for _, index in obj
      )
    transformed_objs = transformed_objs.union(frozenset({obj}))
  O = paint(canvas(0, shape(I)), merge(transformed_objs))
  return O
 
38.333333333333336, 49.577976, def gdcjdfgahabceabbjfbgfeafhjfgaeed(I):
  objs = objects(I, T, F, T)
  O = canvas(0, shape(I))
  for obj in objs:
    if color(obj) == 7:
      start_i, start_j = ulcorner(obj)
      height, width = shape(obj)
      for i in range(height):
        for j in range(width):
          if (i, j) == (height // 2, width // 2):
            O = fill(O, 6, frozenset({(start_i + i, start_j + j)}))
          else:
            O = fill(O, 8, frozenset({(start_i + i, start_j + j)}))
  return O
 
21.333333333333332, 3.5715802, def ddffbecdaffeebafiihejbaeeghaafba(I):
  def transform_cell(cell, center_index):
    return (8, cell[1]) if cell[1] != center_index else (6, cell[1])

  objs = objects(I, T, F, T)
  O = I
  for obj in objs:
    if color(obj) == 7:
      center_index = center(obj)
      O = paint(O, frozenset(transform_cell(cell, center_index) for cell in asobject(subgrid(obj, I))))
  return O 
 
5.0, 3.4755633, def bgaccdefeecfedfcacjcffdbaaigchid(I):
  O = canvas(0, shape(I))
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if val == 7:
        obj = extract(objects(I, T, F, T), lambda o: (i, j) in toindices(o))
        O = fill(O, 8 if (i, j) != center(obj) else 6, frozenset({(i, j)}))
      else:
        O = fill(O, val, frozenset({(i, j)}))
  return O
 
27.0, 3.9164407, def bjeeadajegbjebfeibjafaefecdiahce(I):
  objs = objects(I, T, F, T)
  top_obj = argmax(objs, lambda obj: uppermost(obj) * -1)
  O = paint(cover(I, top_obj), recolor(EIGHT, (inbox(top_obj) if portrait(top_obj) else difference(box(top_obj), corners(top_obj)))))
  return paint(O, recolor(SEVEN, toindices(argmax(difference(objs, {top_obj}), lambda obj: uppermost(obj) * -1))))
 
41.666666666666664, 5.454466, def adihhddjdebaefafacibejccfddgiecf(I):
  objs = objects(I, T, F, T)  # Get objects excluding background
  objs_by_size = order(objs, size) # Order objects by size
  obj1 = objs_by_size[-1] # Get the largest object
  obj2 = objs_by_size[-2] # Get the second largest object
  O = paint(I, recolor(EIGHT, obj1)) # Recolor largest to 8
  O = paint(O, recolor(SEVEN, obj2)) # Recolor second largest to 7
  O = paint(O, recolor(SIX, {add(ulcorner(obj1), (1, 1))})) # Recolor the cell
  return O
 
36.333333333333336, 5.020093, def ageeddfdcacdebejbgfjgddbcaeecbga(I):
  objs = objects(I, T, F, T)
  large_objs =  frozenset(extract(objs, lambda x: size(x) == s) for s in {size(obj) for obj in objs} if size(extract(objs, lambda x: size(x) == s)) > 1)
  obj1 = first(large_objs)
  obj2 = other(large_objs, obj1)
  O = paint(I, recolor(EIGHT, obj1))
  O = paint(O, recolor(SEVEN, obj2))
  O = paint(O, recolor(SIX, {add(ulcorner(obj1), (1, 1))}))
  return O
 
13.0, 2.5382175, def ciabehaibaibeefhbcfbabdehhdebfif(I):
  objs = objects(I, T, F, T)  # Extract objects, excluding background
  sizes = apply(size, objs)  # Get the size of each object
  smallest_obj = argmin(objs, size)  # Find the smallest object
  sorted_objs = order(objs, size) #Order the objects by their sizes
  second_largest_obj = sorted_objs[-2] # Pick the second largest object
  
  for obj in objs:
    if obj == smallest_obj:
      I = paint(I, recolor(SIX, toindices(obj)))  # Recolor smallest to 6
    elif obj == second_largest_obj and SEVEN in palette(obj):
      I = paint(I, recolor(EIGHT, toindices(obj))) # Recolor second largest to 8 if it contains 7
  return I
 
5.666666666666667, 2.8564098, def bbfeeddhfhjbecicajcbcaddhdadgjia(I):
  objs = objects(I, T, F, T)
  O = paint(I, recolor(SEVEN, ofcolor(I, TWO))) 
  for obj in objs:
    if mostcolor(obj) == FIVE:
      O = paint(O, recolor(EIGHT, difference(backdrop(obj), box(obj))))
      if obj == argmax(objects(I, T, F, T), size):
        O = paint(O, recolor(SIX, {add(ulcorner(obj), (1, 1))})) 
  return O
 
10.0, 3.714499, def fdigchijedjaeeaeiheifbcdcfebfeda(I):
  objs = order(objects(I, T, F, T), size)
  O = I
  for i, obj in enumerate(objs):
    if mostcolor(obj) == TWO:
      O = paint(O, recolor(SEVEN, toindices(obj)))
    elif i == 0:
      O = paint(O, recolor(EIGHT, difference(backdrop(obj), box(obj))))
      O = paint(O, recolor(SIX, {add(ulcorner(obj), (1, 1))}))
    elif i == 1:
      O = paint(O, recolor(EIGHT, difference(backdrop(obj), box(obj))))
  return O
 
1.6666666666666667, 2.3758426, def daehdbdcdacaedhbaadfhhgeidbhheac(I):
  largest_obj = argmax(objects(I, T, F, T), size)
  O = paint(I, recolor(EIGHT, difference(backdrop(largest_obj), box(largest_obj))))
  O = paint(O, recolor(SIX, {add(ulcorner(largest_obj), (1, 1))}))
  return paint(O, recolor(SEVEN, ofcolor(I, TWO)))
 
7.333333333333333, 2.726993, def jiabibdahjbaecfjabafffijccaacfcj(I):
  objs = objects(I, T, F, T)
  obj1 = extract(objs, lambda obj: uppermost(obj) == min(uppermost(o) for o in objs))
  obj2 = other(objs, obj1)
  O = paint(I, recolor(EIGHT, difference(backdrop(obj1), box(obj1))))
  O = paint(O, recolor(SIX, {add(ulcorner(obj1), (1, 1))}))
  O = paint(O, recolor(SEVEN, difference(backdrop(obj2), box(obj2))))
  return O
 
8.333333333333334, 2.2075703, def ijdhedcdfgdeeafhbdcibchaiadgccbh(I):
  objs = objects(I, T, F, T)
  obj1 = min(objs, key=lambda obj: uppermost(obj)) 
  obj2 = next(obj for obj in objs if obj != obj1)
  O = fill(I, EIGHT, difference(backdrop(obj1), box(obj1)))
  O = fill(O, SIX, {add(ulcorner(obj1), (1, 1))})
  O = fill(O, SEVEN, difference(backdrop(obj2), box(obj2)))
  return O
 
42.333333333333336, 51.830864, def aaagjddbcicdececabihbchafefebfea(I):
  objs = sorted(objects(I, T, F, T), key=uppermost)
  obj1, obj2 = objs[0], objs[1]
  grid = canvas(mostcolor(I), shape(I))
  grid = paint(grid, recolor(EIGHT, difference(backdrop(obj1), box(obj1))))
  grid = paint(grid, recolor(SIX, {add(ulcorner(obj1), (1, 1))}))
  grid = paint(grid, recolor(SEVEN, difference(backdrop(obj2), box(obj2))))
  return grid
 
4.0, 1.2714916, def aahfeefcacjbecdbbdjdbfbaeefdifig(I):
  objs = objects(I, T, F, T)  # Extract objects, excluding background
  sizes = apply(size, objs)  # Get the size of each object
  smallest_obj = argmin(objs, size)  # Find the smallest object
  sorted_objs = order(objs, size) # Order the objects by their sizes
  second_largest_obj = sorted_objs[-2] # Pick the second largest object
  
  for obj in objs:
    if SEVEN in palette(obj):
      I = paint(I, recolor(EIGHT, toindices(obj)))
    if obj == smallest_obj:
      I = paint(I, recolor(SIX, toindices(obj)))  # Recolor smallest to 6
    elif obj == second_largest_obj and EIGHT in palette(obj):
      I = paint(I, recolor(EIGHT, toindices(obj)))  # Recolor second largest to 8 if it contains 8
  return I
 
19.333333333333332, 5.0801077, def fahjddbfabebehdijcefahdjgfjbfeci(I):
  O = I
  for i, obj in enumerate(objects(I, T, F, T)):
    if SEVEN in palette(obj):
      O = paint(O, recolor(EIGHT, toindices(obj)))
    if i == 0:
      O = paint(O, recolor(SIX, toindices(obj)))
  return O
 
13.666666666666666, 5.985231, def gcebjfjceaeheacbijhadbcdcjajfeba(I):
  O = paint(replace(I, 7, 8), asobject(replace(I, 2, 0)))
  for i, j in ofcolor(I, 2):
    if all(index(I, n) == 5 for n in dneighbors((i, j))):
      O = paint(O, {(7, (i, j))})
  return O
 
38.0, 49.2729, def chbabhfgagffeeccjgecdabhgefbdahc(I):
  sevens = ofcolor(I, 7)  # Get indices of '7'
  twos_surrounded_by_fives = frozenset((i, j) for i in range(1, len(I) - 1) for j in range(1, len(I[0]) - 1) if I[i][j] == 2 and all(I[i + di][j + dj] == 5 for di, dj in [(0, 1), (0, -1), (1, 0), (-1, 0)]))
  O = paint(fill(canvas(0, shape(I)), 8, sevens), recolor(7, twos_surrounded_by_fives))
  return O
 
1.3333333333333333, 0.60335785, def cjjaeaddaaddedfhjdeaaeedfhcceejf(I):
  for v in palette(I):  # Iterate through each color in the grid
    if v != mostcommon(I) and colorcount(I, v) == colorcount(I, SEVEN): # Check for recolor condition
      I = replace(I, v, EIGHT)  # Replace with 8
  smallest_obj = argmin(objects(I, T, F, T), size) # Find the smallest object 
  I = paint(I, recolor(SIX, toindices(smallest_obj))) # Recolor smallest object to 6
  I = switch(I, TWO, SEVEN)  # Swap 2s and 7s
  return I
 
10.333333333333334, 2.069462, def dacecjefcccfeafabhjejffdecjbdedj(I):
  I = switch(I, TWO, SEVEN) # Swap 2s and 7s first 
  for v in palette(I):
    if v != mostcommon(I) and colorcount(I, v) == colorcount(I, EIGHT): # Now target 8
      I = replace(I, v, EIGHT)
  smallest_obj = argmin(objects(I, T, F, T), size)
  return paint(I, recolor(SIX, toindices(smallest_obj))) # Return the final painted grid
 
6.666666666666667, 1.6107489, def acifcbabegacedjbjbjfdeejbcaajcaf(I):
  objs = objects(I, T, F, T)  # Extract all objects
  for obj in objs:
    if color(obj) != mostcommon(I) and size(obj) == colorcount(I, SEVEN): # Check condition on each object
      I = paint(I, recolor(EIGHT, toindices(obj)))
  smallest_obj = argmin(objs, size)
  return paint(paint(I, recolor(SIX, toindices(smallest_obj))), switch(asobject(I), TWO, SEVEN)) # Combine painting and swapping
 
38.333333333333336, 16.475752, def ieacdibffbdcefcbbbfbihbajfjgdfce(I):
  O = I
  for obj in objects(I, T, F, T):
    O = paint(O, recolor(SEVEN, difference(toindices(obj), box(obj))))
    O = paint(O, recolor(EIGHT, box(obj)))
    O = paint(O, recolor(SIX, {add(ulcorner(obj), (1, 1))}))
  return O
 
43.666666666666664, 17.022255, def edjfcgccfagfebcbjjgjbedbhdcfaafb(I):
  O = I
  for obj in objects(I, T, F, T):
    O = paint(O, recolor(EIGHT, box(obj)))
    O = paint(cover(O, obj), recolor(SEVEN, toindices(obj)))
    O = paint(O, recolor(SIX, {add(ulcorner(obj), (1, 1))}))
  return O
 
10.333333333333334, 2.4043858, def eaechgdhchjheecgiedacjejdibcijcb(I):
  I = switch(I, TWO, NINE)  # Temporary swap to avoid conflicts
  for v in palette(I):
    if v != SEVEN and colorcount(I, v) == colorcount(I, SEVEN):
      I = replace(I, v, EIGHT)
  smallest_obj = argmin(objects(I, T, F, T), size)
  I = paint(I, recolor(SIX, toindices(smallest_obj)))
  return switch(I, NINE, SEVEN)  # Swap back to achieve the desired result
 
140.0, 48.21347, def cbagfccaaebaeabfabibeecafefgdcaj(I):
  objs = order(objects(I, T, F, T), lambda obj: -uppermost(obj))
  O = paint(I, recolor(EIGHT, difference(asindices(I), toindices(objs[0]))))
  O = paint(O, recolor(SIX, {add(ulcorner(objs[0]), (1, 1))}))
  if len(objs) > 1:
    O = paint(O, recolor(SEVEN, difference(asindices(I), toindices(objs[1]))))
  return O
 
136.0, 51.464565, def gehcbdhcchffefbfjecehhbacfaefhfa(I):
  objs = objects(I, T, F, T)
  topmost = argmax(objs, lambda obj: -uppermost(obj))
  O = paint(I, recolor(EIGHT, mapply(lambda obj: difference(asindices(I), toindices(obj)), objs - {topmost})))
  O = paint(O, recolor(SIX, {add(ulcorner(topmost), (1, 1))}))
  second_topmost = argmax(objs - {topmost}, lambda obj: -uppermost(obj))
  if second_topmost:
    O = paint(O, recolor(SEVEN, difference(asindices(I), toindices(second_topmost))))
  return O
 
110.66666666666667, 6.253546, def fffdehbjgcbceaadbjgfeibebdhjfehe(I):
  objs = sorted(objects(I, T, F, T), key=lambda obj: uppermost(obj))
  O = I
  for i, obj in enumerate(objs):
    if i == 0:
      O = paint(O, recolor(SIX, {add(ulcorner(obj), (1, 1))}))
    elif i == 1:
      O = underfill(O, SEVEN, toindices(obj))
    O = underfill(O, EIGHT, difference(asindices(I), toindices(obj)))
  return O
 
135.0, 85.16227, def acdgccfbbcdbecifadcdhehachbiadad(I):
  objs = order(objects(I, T, F, T), lambda obj: -uppermost(obj))
  O = I
  for i, obj in enumerate(objs):
    if i == 0:
      O = paint(O, recolor(SIX, {add(ulcorner(obj), (1, 1))}))
    else:
      O = paint(O, recolor(branch(i == 1, SEVEN, EIGHT), difference(asindices(I), toindices(obj))))
  return O
 
9.0, 3.4881048, def gahafbfgihceeadjaceeeacifbcebfdh(I):
  objs = sorted(objects(I, T, F, T), key=lambda obj: uppermost(obj))  # Sort objects by uppermost row
  O = fill(I, EIGHT, difference(backdrop(objs[0]), box(objs[0])))
  O = paint(O, recolor(SIX, {add(ulcorner(objs[0]), (1, 1))}))
  if len(objs) > 1:
    O = branch(portrait(objs[1]),
               paint(O, recolor(SEVEN, connect(astuple(uppermost(objs[1]), centerofmass(objs[1])[1]), astuple(lowermost(objs[1]), centerofmass(objs[1])[1])))), # Fix: Used astuple to construct tuples
               paint(O, recolor(SEVEN, difference(backdrop(objs[1]), box(objs[1])))))
  return O
 
8.666666666666666, 2.9263632, def ijaecfifdceaeagdaicejjhcbgdijdde(I):
  objs = objects(I, T, F, T)
  obj1 = min(objs, key=lambda obj: (uppermost(obj), leftmost(obj))) # Find the top-leftmost object 
  obj2 = next((obj for obj in objs if obj != obj1 and uppermost(obj) <= lowermost(obj1)), None) # Find second object within vertical range of first 
  O = fill(I, EIGHT, difference(backdrop(obj1), box(obj1)))
  O = paint(O, recolor(SIX, {add(ulcorner(obj1), (1, 1))}))
  if obj2:
    O = branch(portrait(obj2),
               paint(O, recolor(SEVEN, connect(astuple(uppermost(obj2), centerofmass(obj2)[1]), astuple(lowermost(obj2), centerofmass(obj2)[1])))),
               paint(O, recolor(SEVEN, difference(backdrop(obj2), box(obj2)))))
  return O
 
5.666666666666667, 2.7643406, def cefgfeijcffiegfdicfafiefdafejjhe(I):
  O = paint(I, recolor(SEVEN, ofcolor(I, TWO)))  # Change 2 to 7
  for obj in objects(I, T, F, T):
    if color(obj) == FIVE:
      O = paint(O, recolor(EIGHT, delta(toindices(obj)))) # Surround with 8
      if size(obj) == size(argmax(objects(I, T, F, T), size)):
        O = paint(O, recolor(SIX, {add(ulcorner(obj), DOWN_LEFT)})) # Add 6 diagonally
  return O 
 
36.0, 9.671953, def bibiaeeabefbebcaibjeaecbdbbejfdb(I):
  objs = order(objects(I, T, F, T), size)
  O = paint(I, recolor(SEVEN, ofcolor(I, TWO)))  # Change 2 to 7
  for obj in objs:
    O = paint(O, recolor(EIGHT, set(subtract(loc, (1, 1)) for loc in box(obj))))
    if obj == objs[-1]:
      O = paint(O, recolor(SIX, {add(ulcorner(obj), (1, 1))}))
  return O
 
8.666666666666666, 2.1584187, def ijeddcbdihhcechdbfbdeccbchjfgcgh(I):
  objs = objects(I, T, F, T)
  obj1 = min(objs, key=lambda o: (uppermost(o), leftmost(o))) 
  obj2 = next(obj for obj in objs if obj != obj1)
  O = paint(I, recolor(EIGHT, difference(backdrop(obj1), box(obj1))))
  O = paint(O, recolor(SIX, {add(ulcorner(obj1), DOWN)})) 
  if portrait(obj2):
    O = paint(O, recolor(SEVEN, connect(ulcorner(obj2), add(ulcorner(obj2), (height(obj2) - 1, 0)))))
  else:
    O = paint(O, recolor(SEVEN, difference(backdrop(obj2), box(obj2))))
  return O
 
8.666666666666666, 1.8511342, def dgagdaabieheecfaicfjaccdgccgejac(I):
  objs = objects(I, T, F, T)
  obj1 = next(iter(sorted(objs, key=lambda obj: (uppermost(obj), leftmost(obj)))))
  obj2 = next(obj for obj in objs if obj != obj1)
  O = paint(I, recolor(EIGHT, difference(backdrop(obj1), box(obj1))))
  O = paint(O, recolor(SIX, {astuple(add(ulcorner(obj1), (1, 0)), add(ulcorner(obj1), (0, 1)))}))
  if height(obj2) > width(obj2):
    start = ulcorner(obj2)
    end = (start[0] + height(obj2) - 1, start[1])
    O = paint(O, recolor(SEVEN, connect(start, end))) 
  else:
    O = paint(O, recolor(SEVEN, difference(backdrop(obj2), box(obj2))))
  return O
 
