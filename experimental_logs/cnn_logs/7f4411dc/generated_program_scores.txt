7.333333333333333, 9.380909, def cfcfdibcdaceefbcbggcgihbifidddfa(I):
  objs = fgpartition(I) 
  shifted_objs = frozenset(shift(obj, (-(lowermost(obj) - (len(I) - 1)), 0)) for obj in objs)
  O = paint(canvas(mostcolor(I), shape(I)), merge(shifted_objs))
  return O
 
1.6666666666666667, 3.2367241, def fiebhaajifbjedhbifffehaeciejjddj(I):
    x1 = objects(I, T, F, T)  # Extract all objects, not diagonally connected
    x2 = sizefilter(x1, ONE) # Filter for objects of size one (single pixels)
    x3 = merge(x2)            # Merge the single-pixel objects into a single set of indices
    O = cover(I, x3)          # Cover the indices of single-pixel objects with background color
    return O
 
7.333333333333333, 9.380909, def gfffhdefgbbeeedbagbcbhfedhbhjifi(I):
    x1 = partition(I)       # Partitions the grid into objects based on color
    x2 = lambda x: size(x) != 1 # Lambda function to check if object size is not 1
    x3 = sfilter(x1, x2)     # Filter objects based on size
    O = paint(cover(I, merge(sizefilter(x1, ONE))), merge(x3)) # Cover single-pixel objects, paint remaining
    return O
 
1.6666666666666667, 3.2367241, def efdfagbeacdbejicbdcaajhadcgcjfge(I):
  objs = objects(I, T, F, F)  # Extract all connected components
  filtered_objs = sfilter(objs, lambda obj: size(obj) > 1) #Filter for components larger than one cell
  O = paint(canvas(ZERO, shape(I)), merge(filtered_objs)) # Paint the filtered components onto a blank canvas
  return O
 
28.0, 56.805035, def idbeebcfhabbefaciibaefabddadfhbd(I):
  connected = mfilter(asindices(I), lambda loc: any(index(I, n) == index(I, loc) for n in dneighbors(loc)))
  O = fill(I, ZERO, difference(asindices(I), connected))
  return O 
 
2.3333333333333335, 4.10388, def bdficcfbcdcjegfhjfaffjeacfhaieje(I):
  is_isolated = lambda loc: all(index(I, loc) != index(I, n) or n == loc for n in dneighbors(loc) | ineighbors(loc))
  isolated_indices = sfilter(asindices(I), is_isolated)
  O = fill(I, ZERO, isolated_indices)
  return O
 
38032.333333333336, 37.689774, def ecfdfbchbbbjeicebfcdeghhhehdiffj(I):
  """
  This version partitions the grid into objects based on color, filters the 
  partitions by size, and then merges the remaining partitions to recreate
  the grid.
  """
  partitions = partition(I)
  filtered_partitions = set(filter(lambda x: len(x) > 1, partitions))
  merged_grid = tuple(tuple(v for v, _ in sorted(merge(filtered_partitions), key=lambda x: x[1])) for i in range(height(I)) for j in range(width(I)))
  return merged_grid
 
7.333333333333333, 9.380909, def acfbbhbbeaebehdhbecdeajeeicafdcd(I):
  # Directly find indices of single-color cells
  single_cells = mfilter(asindices(I), lambda loc: colorcount(I, index(I, loc)) == 1)
  # Remove those cells
  O = cover(I, single_cells)
  return O
 
36.666666666666664, 16.687271, def dhbecbdcefbgejgijbbffdhaaajfadhg(I):
  objs = objects(I, T, F, T)  # Identify all objects, excluding single cells
  shifted_objs = frozenset(shift(obj, (-uppermost(obj), 0)) for obj in objs)  # Shift each object upwards
  cleared_grid = cover(I, merge(objs))  # Clear the original object locations
  O = paint(cleared_grid, merge(shifted_objs))  # Paint the shifted objects onto the cleared grid
  return O 
 
34.0, 11.26939, def egifdaafeeaaebffifhibfdjbbaacfab(I):
  objs = objects(I, T, F, T)
  top_edge = frozenset((0, j) for j in range(width(I)))  # Define the top edge of the grid
  shifted_objs = frozenset()
  for obj in objs:
    direction = gravitate(obj, top_edge)  # Calculate the direction to move each object towards the top edge
    shifted_objs = insert(shift(obj, direction), shifted_objs)  # Shift each object upwards
  cleared_grid = cover(I, merge(objs))
  O = paint(cleared_grid, merge(shifted_objs))
  return O
 
34.666666666666664, 38.860394, def chdddhabcagdeeedbfbcibccbhefihed(I):
  objs = objects(I, T, F, T)
  shifted_objs = set()
  for obj in objs:
    new_obj = set()
    for v, (i, j) in obj:
      new_i = 0  # New row index is always 0 (top of the grid)
      new_obj.add((v, (new_i, j)))  # Create a new object with cells moved to the top
    shifted_objs.add(frozenset(new_obj))  # Add the shifted object to the set
  cleared_grid = cover(I, merge(objs))
  O = paint(cleared_grid, merge(shifted_objs))
  return O
 
28.0, 56.805035, def bdjdhfegdfcceheiibbcghhcehgeafef(I):
  O = tuple(
    tuple(
      v for k, v in enumerate(row) if k not in {j for i, j in ofcolor(I, mostcolor(I))}  # Remove background colored cells from each row
    )
    for i, row in enumerate(I) if i not in {i for i, j in ofcolor(I, mostcolor(I))}  # Remove rows containing only background color
  )
  return canvas(mostcolor(I), shape(I)) if len(O) == 0 else vconcat(O, canvas(mostcolor(I), (height(I) - height(O), width(O)))) # Create output canvas
 
2.3333333333333335, 4.10388, def cicbfcfbiddaebjdacbfifbfccdfacje(I):
  h, w = len(I), len(I[0])
  O = [[I[i][j] for j in range(w)] for i in range(h)] # Create a copy of the input grid
  for i in range(h):
    for j in range(w):
      if I[i][j] != mostcolor(I) and sum(1 for x in neighbors((i, j)) if 0 <= x[0] < h and 0 <= x[1] < w and I[x[0]][x[1]] == I[i][j]) == 0:
        O[i][j] = mostcolor(I) # Set single-pixel objects to the background color
  return tuple(tuple(row) for row in O)
 
28.0, 56.805035, def eaeafejahebcebacaceaggfbdacaedcd(I):
  target_color = mostcolor(I) # Get the background color
  O = I
  for i in range(len(I)):
    for j in range(len(I[0])):
      if I[i][j] != target_color and sum(1 for x in dneighbors((i,j)) if 0<=x[0]<len(I) and 0<=x[1]<len(I[0]) and I[x[0]][x[1]]==I[i][j]) == 0:
        O = replace(O, I[i][j], target_color) # Replace single-pixel objects with the background color
  return O
 
7.333333333333333, 9.380909, def ebagfdgaifdhebhgabceeadgeceagjdh(I):
  """
  Identifies objects, filters for objects larger than one cell,
  and paints those objects onto a blank canvas.
  """
  objs = objects(I, False, False, False)  # Identify all objects in the grid
  filtered_objs = frozenset(obj for obj in objs if len(obj) > 1)  # Filter for objects larger than one cell
  canvas_size = shape(I)  # Get the size of the original grid
  blank_canvas = canvas(mostcommon(I), canvas_size)  # Create a blank canvas
  for obj in filtered_objs:  # Paint the filtered objects onto the canvas
    blank_canvas = paint(blank_canvas, obj)
  return blank_canvas
 
85.66666666666667, 18.941435, def defbiajhfacieejeabaficbbbdgcggcc(I):
  return compress(I)  # Directly use the compress function
 
41.0, 10.3877125, def jeeieffeaeggebfcaagddgggjaeegfbb(I):
  h = height(I) 
  w = width(I)
  tr = T
  tc = T
  while tr or tc:
    tr = len(set(I[0])) == 1  # Check for top row
    tc = len(set(dmirror(I)[0])) == 1  # Check for leftmost column
    if tr:
      I = I[1:]
      h -= 1
    if tc:
      I = dmirror(dmirror(I)[1:])  # Remove leftmost column
      w -= 1
  return vconcat(hconcat(canvas(mostcolor(I), (h, w - width(I))), I), canvas(mostcolor(I), (height(I) - h, width(I))))
 
1526.0, 32.43837, def ifghcdeeacagebaeabefddddejfaaaai(I):
  rows = tuple(r for r in I if len(set(r)) > 1) # Keep rows with more than one color
  cols = tuple(c for c in dmirror(I) if len(set(c)) > 1) # Keep columns with more than one color
  return dmirror(tuple(c for c in cols for i in range(len(rows))))
 
40.333333333333336, 35.773056, def bceadbfachcdeegeiebbfbajccgddjde(I):
  """
  Fills the grid from the top down, using the colors 
  of objects touching the top border.
  """
  h, w = len(I), len(I[0])
  O = canvas(mostcommon(I), (h, w)) # Create an empty canvas
  for j in range(w): # Iterate over columns
    if I[0][j] != mostcommon(I): # Check if the top cell belongs to an object
      color = I[0][j]
      for i in range(h): # Iterate downwards in the column
        if O[i][j] == mostcommon(I): # If the cell is empty
          O = fill(O, color, {(i, j)}) # Fill with the object color
        else:
          break # Stop filling if an existing object is encountered
  return O
 
1.6666666666666667, 3.2367241, def bggcejedccfieedajjficeacfhagfffj(I):
  objs = objects(I, T, F, T) # Extract objects, no diagonals, without background
  filtered_objs = sfilter(objs, lambda obj: size(obj) > 1) # Keep objects larger than one cell
  cleaned_grid = cover(I, merge(objs)) # Create a clean grid
  O = cleaned_grid
  for obj in filtered_objs:
    shifted_obj = obj
    while not bordering(shifted_obj, I) and index(I, add(ulcorner(shifted_obj), (-1, 0))) == mostcommon(I):
      shifted_obj = shift(shifted_obj, (-1, 0))
    O = paint(O, shifted_obj)
  return O
 
23.666666666666668, 9.103001, def djcedagijhcbebfaaeahiceecgjebdee(I):
  """
  Uses paint and cover to simulate gravity.
  """
  O = I
  bg = mostcommon(I)
  objs = objects(I, False, False, False)
  for obj in objs:
    shifted_obj = shift(obj, (height(I) - lowermost(obj), 0))  # Shift to bottom
    O = paint(cover(O, obj), shifted_obj) # Cover original, paint at bottom
  return O
 
28.0, 56.805035, def cfbcafciegiceehcjadffcbeecfdfbeb(I):
  objs = objects(I, T, F, T)  # Find connected objects, excluding background
  filtered_objs = sfilter(objs, lambda obj: size(obj) > 1)  # Keep objects larger than one pixel
  noise_indices = difference(asindices(I), merge(filtered_objs))  # Find indices of noise pixels
  O = fill(I, mostcolor(I), noise_indices)  # Fill noise pixels with background color
  return O
 
1.6666666666666667, 3.2367241, def iahbbcjfafacecdbiefbbebiccfcgdag(I):
  O = paint(canvas(mostcolor(I), shape(I)),  # Create a canvas filled with the background color
            merge(sfilter(objects(I, T, F, T), lambda obj: size(obj) > 1))) # Paint only the large objects onto the canvas
  return O
 
22.666666666666668, 27.920546, def ehfbgafijccjedgabiaabccfecdfgfce(I):
    O = I  # Initialize the output as the input
    for i in range(height(I)):
        for j in range(width(I)):
            if index(I, (i,j)) != mostcolor(I) and size(objects(crop(I, (max(0, i-1), max(0, j-1)), (min(3, height(I)-i), min(3, width(I)-j))), T, F, T)) == 1:
                O = fill(O, mostcolor(I), {(i,j)})
    return O
 
12.0, 11.023915, def bffiedbdbigbeadfachbbbbjfjbgajbb(I):
  objs = objects(I, T, F, T)
  shifted_objs = set()
  for obj in objs:
    for i in range(1, height(I) + 1):  # Iterate through possible upward shifts
      shifted_obj = shift(obj, (-i, 0))
      if uppermost(shifted_obj) < 0 or any(index(I, loc) != mostcommon(I) for loc in backdrop(shifted_obj) - toindices(shifted_obj)):
        shifted_obj = shift(shifted_obj, (1, 0))  # Revert if collision or out of bounds
        break
    shifted_objs.add(shifted_obj)
  cleaned_grid = cover(I, merge(objs))
  return paint(cleaned_grid, merge(shifted_objs))
 
75.0, 17.44452, def gdcechhfhdbjeeecjjefedceeebcgech(I):
  return trim(I)  # Removes the rightmost column and bottommost row
 
6.666666666666667, 8.195087, def ajddbceifbcceefhjaddffbijhgbhdjd(I):
  h, w = shape(I)
  indices = difference(asindices(I), frozenset((h-1, j) for j in range(w)) | frozenset((i, w-1) for i in range(h))) # Create a set of indices excluding the rightmost column and bottommost row
  O = paint(canvas(mostcolor(I), shape(I)), toobject(indices, I)) # Paint the object represented by the remaining indices onto a blank canvas
  return O
 
29.333333333333332, 11.40614, def bjfaiadfahbcefefichfibedcdfahhfh(I):
    return crop(I, (0,0), (height(I)-1, width(I)-1)) # Crop the input, excluding the last row and column
 
168.0, 142.35335, def agcfffaeaeeaeddgaccjcddcagaccfcc(I):
  return hsplit(vsplit(I, height(I))[0], width(I))[0] 
 
34.666666666666664, 38.860394, def feabdfgcdfbaebfeidbefddebffhdeie(I):
  h, w = shape(I)
  O = canvas(mostcolor(I), shape(I)) # Start with a canvas filled with the background color
  for j in range(w):  # Iterate over columns
    for i in range(h): # Iterate over rows from top to bottom 
      if I[i][j] != mostcolor(I): # If the cell is not background
        O = paint(O, {(I[i][j],(0,j))}) # Move the cell to the top of the same column
        break # Move to the next column after moving one cell
  return O
 
24.0, 6.665858, def cedcecaadfbbeachijbifbfeccebcafj(I):
  h, w = shape(I)
  O = I
  for row in range(1,h):
    for col in range(w):
      if O[row][col] != mostcolor(I) and O[row - 1][col] == mostcolor(I):
        temp = O[row][col]
        O = fill(O, mostcolor(I), {(row,col)})
        O = fill(O, temp, {(row - 1, col)})
  return O
 
43.333333333333336, 15.143621, def fcbfebddaidcedabaahddchcdgbcbeca(I):
    h, w = shape(I)
    O = list(list(row) for row in I)  # Create a mutable copy of the grid
    for j in range(w):
        empty_row = 0
        for i in range(h):
            if O[i][j] != mostcolor(I):
                O[empty_row][j], O[i][j] = O[i][j], O[empty_row][j] # Swap non-background cell with the topmost empty cell
                empty_row += 1
    return tuple(tuple(row) for row in O)
 
29.0, 54.08726, def baefhcecifdaedijbddbdbadfdecbihf(I):
    h = height(I)
    O = paint(canvas(mostcolor(I), shape(I)), merge(objects(I, T, F, T))) # Create a canvas with only the objects
    for i in range(1, h):
        O = paint(O, shift(toobject(ofcolor(I, mostcolor(I)), I), (-i, 0))) # Paint the background over the objects from top to bottom, effectively shifting the objects up
    return O
 
43.0, 11.135887, def dfcfiedaagdcebcfiacfdbiiidabigce(I):
  """
  Utilizes downscaling and upscaling to eliminate single-cell objects.
  """
  downscaled = downscale(I, 2)
  O = upscale(downscaled, 2)
  return O
 
7.333333333333333, 9.380909, def ibecajjchdfbebffjbbcfafbdfcidedg(I):
  return cellwise(I, replace(I, mostcommon(I), ZERO), ZERO)
 
39.333333333333336, 10.7906275, def afeaiddagfafecieiibbdejfciedcdef(I):
  O = I
  for obj in objects(I, T, F, T):
    offset = (0,0)
    for i in range(1, height(I)):
      if uppermost(obj) - i >= 0 and index(I, (uppermost(obj) - i, leftmost(obj))) == mostcolor(I):
        offset = (-i, 0)
      else:
        break
    O = paint(cover(O, obj), shift(obj, offset))
  return O
 
11.0, 13.455315, def cafahebfbdjjefdajbdejchdbggcdffg(I):
  O = canvas(mostcolor(I), shape(I))
  for i in range(height(I)-1,-1,-1):
    row_objs = objects(crop(I, (i, 0), (1, width(I))), T, F, T)
    for obj in row_objs:
      O = paint(O, shift(obj, (-uppermost(obj) + i, 0)))
  return O
 
25.0, 12.285901, def debabbcffccbefddbhigagbcabjahgia(I):
  objs = sorted(objects(I, T, F, T), key=lambda obj: uppermost(obj))
  O = paint(canvas(mostcolor(I), shape(I)), objs[0])
  for i in range(1, len(objs)):
    O = paint(O, shift(objs[i], (-uppermost(objs[i]) + uppermost(objs[i-1]) + 1, 0)))
  return O
 
7.333333333333333, 9.380909, def jcbdejdaacbbedfijjjdaebhcbefjdgg(I):
  return paint(canvas(ZERO, shape(I)), merge(sfilter(partition(I), lambda obj: size(obj) > 1)))
 
28.0, 56.805035, def bcaecebaaabfecjhbdgjfbcgifefehgh(I):
  def is_isolated(obj):
    return all(manhattan(obj, other_obj) > 1 for other_obj in objects(I, T, F, T) if other_obj != obj)
  isolated_pixels = merge(sfilter(objects(I, T, F, T), is_isolated))
  return cover(I, isolated_pixels)
 
7.333333333333333, 9.380909, def cbeedcafcbfeedhebcahcceeeaeeehdf(I):
  return paint(I, merge(sfilter(objects(I, True, True, False), lambda obj: size(obj) > 1))) # Keep only objects larger than one cell
 
28.0, 56.805035, def eibfajbchibceeabahjdbabfacdcdfcg(I):
  return paint(cover(I, mfilter(objects(I, T, F, T), lambda obj: size(obj) == 1)), asobject(canvas(mostcolor(I), shape(I)))) 
 
1.6666666666666667, 3.2367241, def cdbjidahegjaedhabgdbeafaaeecgcaj(I):
    objs = objects(I, T, F, T) # Identify all objects in the grid
    filtered_objs = sizefilter(objs, ONE) # Filter objects of size one (single cells)
    indices_to_remove = mapply(toindices, filtered_objs) # Get indices of the single-cell objects
    O = fill(I, mostcolor(I), indices_to_remove) # Fill those indices with the background color
    return O
 
7.333333333333333, 9.380909, def adafbgbbececeiebbhdccibgaebeedga(I):
    return cellwise(I, replace(I, leastcolor(I) if colorcount(I, leastcolor(I)) == size(objects(I, T, F, T)) else -1, mostcolor(I)), mostcolor(I))
 
7.333333333333333, 9.380909, def dfdaacgdffgaefdgidcecejihcebdhhd(I):
  # 1. Extract objects, no diagonals, without background.
  objs = objects(I, T, F, T)
  # 2. Find indices of all single-pixel objects.
  single_pixel_indices = merge(sfilter(objs, lambda obj: size(obj) == 1))
  # 3.  Find all indices that are NOT part of single-pixel objects.
  multi_pixel_indices = difference(asindices(I), single_pixel_indices)
  # 4. Create a new object containing only the multi-pixel elements.
  multi_pixel_obj = toobject(multi_pixel_indices, I)
  # 5. Paint the multi-pixel object onto a blank canvas.
  return paint(canvas(mostcommon(I), shape(I)), multi_pixel_obj)
 
1.6666666666666667, 3.2367241, def ciefgfeccefjeiebbffhcigcedbedhca(I):
  isolated_cells = objects(I, True, False, False)  # Find all single-color objects (no diagonals)
  isolated_cells = sizefilter(isolated_cells, 1)  # Keep only objects of size 1 (isolated cells)
  return cover(I, merge(isolated_cells))  # Cover isolated cells with the background color
 
1.6666666666666667, 3.2367241, def dbfbhbjececdefifjcdgjhbgfbaafcge(I):
  O = [[v for v in r] for r in I]
  for i in range(len(I)):
    for j in range(len(I[0])):
      if I[i][j] != mostcolor(I) and all(I[i+di][j+dj] != I[i][j] for di, dj in [(0,1),(1,0),(0,-1),(-1,0)] if 0<=i+di<len(I) and 0<=j+dj<len(I[0])):
        O[i][j] = mostcolor(I)
  return tuple(tuple(r) for r in O)
 
35.333333333333336, 30.464731, def efchediadedeegjgjcegadefabededej(I):
  return cellwise(I, canvas(mostcolor(I), shape(I)), extract(objects(I, T, F, F), lambda obj: size(obj) > 1))
 
23.333333333333332, 42.751705, def ddghcbfejjcbeebdaifefeeffeffgaaf(I):
    return paint(canvas(mostcolor(I), shape(I)), 
                 merge(sizefilter(objects(I, T, F, T), size(I) - 1)))
 
6.0, 6.6444955, def ffibcbbbbabieefhifeaacibiedhjaba(I):
  largest_obj = argmax(objects(I, T, F, T), size) 
  bottom_row_indices = sfilter(toindices(largest_obj), lambda loc: loc[0] == lowermost(largest_obj))
  return cover(I, bottom_row_indices)
 
5.333333333333333, 7.5053563, def ebjbjejdafchefdgbdgcefeccffaeacf(I):
  objs = objects(I, T, F, T)
  largest_obj = extract(objs, lambda obj: size(obj) == maximum(apply(size, objs)))
  shifted_obj = shift(largest_obj, (1, 0))
  return paint(cover(I, largest_obj), toobject(shifted_obj, I))
 
5.333333333333333, 7.7173843, def fgegfceefbibecbdjceaebidbbfjddfg(I):
  def obj_height(obj): return lowermost(obj) - uppermost(obj) + 1
  tallest_obj = argmax(objects(I, T, F, T), obj_height)
  bottom_left_corner = llcorner(tallest_obj)
  bottom_right_corner = lrcorner(tallest_obj)
  line_to_remove = connect(bottom_left_corner, bottom_right_corner)
  return cover(I, line_to_remove)
 
6.666666666666667, 8.567409, def fdffigbeacfjecaaiaeadbajbjccefjd(I):
  def obj_width(obj): return rightmost(obj) - leftmost(obj) + 1
  widest_obj = argmax(objects(I, T, F, T), obj_width)
  shifted_obj = shift(widest_obj, (1, 0))
  return paint(I, difference(shifted_obj, widest_obj)) 
 
8.333333333333334, 9.0031, def cfjjfebcciejeijdbedfgejddfdcfdjd(I):
  return paint(I, merge(apply(lambda obj: shift(obj, (-1, 0)) if lowermost(obj) == len(I) - 1 else obj, objects(I, True, True, False))))
 
11.333333333333334, 13.11842, def gebfefcbedifebeabajifabfcjbciaaf(I):
  return paint(I, merge(apply(lambda obj: recolor(mostcolor(I), toindices(obj) & {(i, j) for i, j in toindices(obj) if i == lowermost(obj)}), objects(I, True, True, False))))
 
6.666666666666667, 3.42438, def hfbbffbdefceeehjjjcjcdchbcacdcai(I):
  return paint(canvas(mostcolor(I), shape(I)), merge(sfilter(objects(I, True, False, True), lambda obj: not bordering(obj, I))))
 
11.333333333333334, 13.11842, def chbadiafcdjaefddjdefcdjfebfbdhjb(I):
  objs = objects(I, T, F, F)  # Extract all connected components.
  def process_object(obj):
    bottom_row = sfilter(toindices(obj), lambda cell: cell[0] == lowermost(obj))
    return difference(obj, toobject(bottom_row, I)) #Remove bottom row
  trimmed_objs = apply(process_object, objs)
  O = paint(canvas(ZERO, shape(I)), merge(trimmed_objs))  # Paint onto a blank canvas.
  return O
 
32.333333333333336, 5.7797728, def fhbbefbcfaefeiddabdedffhdcchfgfc(I):
  return I[1:]
 
101.0, 23.0367, def afbebiiaefageafaiejabdfgecbifchf(I):
  return bottomhalf(vconcat(canvas(mostcolor(I), (1, width(I))), I))
 
98.33333333333333, 25.388107, def hchafgefcbcieccfbaabdgaadegegdgj(I):
  return downscale(vupscale(I, 2), 2) 
 
14.666666666666666, 8.337791, def acicaigjdeeeeidcigifhjceeaejjbaa(I):
  return paint(I, 
               merge(sfilter(objects(trim(I), True, False, True), 
                           lambda obj: size(obj) > 1)))
 
29.666666666666668, 19.736609, def ahhfdbfjabdgegagjffbfbdifcabbegd(I):
  return paint(cover(I, merge(objects(I, True, False, True))), 
               merge(sfilter(objects(trim(I), True, False, True), 
                           lambda obj: size(obj) > 1)))
 
20.0, 5.7788267, def fdjdjggbdcfbehgbidijfdhcebaedcfa(I):
  objs = objects(I, T, F, F) # Extract connected components
  shifted_objs = apply(lambda obj: shift(obj, (-1, 0)), objs) # Shift each component one row upwards
  O = paint(canvas(ZERO, shape(I)), merge(shifted_objs)) # Paint the shifted components onto a blank canvas
  return O
 
80.66666666666667, 24.751139, def cfaadjdccjjcegchjhehcecgcjgdaafd(I):
  return vconcat(tophalf(I), canvas(ZERO, (1, width(I))))
 
14.0, 6.157353, def dhdbeedidbfdecidbidbbbgjbbbijadc(I):
  return I[:-1] 
 
156.66666666666666, 120.31794, def bbfbhedcaaibegifjhafbfecdeefdach(I):
  return vsplit(I, height(I))[0]
 
11.333333333333334, 13.11842, def cbeffdaacahfegdgabaijcddadehhdci(I):
  objs = objects(I, T, F, T) # Identify all objects in the input grid
  new_objs = frozenset({frozenset({(v, (i,j)) for v, (i,j) in obj if i != lowermost(obj)}) for obj in objs}) # Remove the bottom row from each object
  return paint(canvas(ZERO, shape(I)), toobject(merge(new_objs), I)) # Paint the modified objects onto a blank canvas
 
4.333333333333333, 6.2890263, def agjdicgahafeeiihaacdcdhdcceefahi(I):
  objs = partition(I)  # Partition the grid into objects based on color
  return paint(canvas(0, shape(I)), merge({frozenset({(v, (i, j)) for v, (i, j) in obj if i < lowermost(obj)}) for obj in objs})) # Remove the bottom row of each object and paint
 
14.0, 6.157353, def fehbdddgffdheafdjidbdcdjeieeieec(I):
  return tuple(r for i, r in enumerate(I) if i < height(I) - 1)
 
14.0, 6.157353, def cbgaaegideajeaedaacjjefcjcfcibde(I):
  return I[:-1]
 
91.66666666666667, 36.146675, def dafdbcghbjiaegcjifcdegfbfjjjbgaa(I):
  return vsplit(I, 2)[0]
 
80.66666666666667, 24.751139, def bheaeadachfheegcagdbidcbajeeeeee(I):
 return vconcat(tophalf(I), canvas(mostcolor(I), (1, width(I))))
 
91.66666666666667, 36.146675, def baebiedfbfjaeefcaahbibbabjdhdbcf(I):
  return vsplit(I,2)[0]
 
25.333333333333332, 46.065613, def bceibjjdeffcegfhibecdbebcbcdheib(I):
  objs = objects(I, T, F, F)
  def trim_bottom(obj):
    h = height(obj)
    return toobject(frozenset((i, j) for v, (i, j) in obj if i < h - 1), I)
  trimmed_objs =  frozenset(trim_bottom(obj) if size(obj) > 1 else obj for obj in objs)
  O = paint(canvas(ZERO, shape(I)), merge(trimmed_objs))
  return O
 
11.333333333333334, 13.11842, def dfddafhaeabdeecdjcchhbaejbbgecfa(I):
  objs = objects(I, univalued=False, diagonal=False, without_bg=True)
  for obj in objs:
    bottom_row = sfilter(obj, lambda cell: cell[1][0] == lowermost(obj))
    adjacent_to_bg = any(index(I, add(loc, DOWN)) == 0 for v, loc in bottom_row)
    if adjacent_to_bg:
      I = cover(I, bottom_row)
  O = I
  return O
 
7.0, 13.349087, def edhbbbcdfbbiedfhjcjdgghheafbfbfc(I):
  O = I
  h = height(I)
  for j in range(width(I)):
    for i in range(h-1, 0, -1):
      if I[i][j] != 0 and I[i-1][j] == 0:
        O = fill(O, 0, {(i, j)})
  return O
 
28.0, 56.805035, def jgegdecbhfdaecadabfejiadgbdddgee(I):
  objs = objects(I, univalued=False, diagonal=False, without_bg=True)
  bottom_rows = mfilter(objs, lambda obj: any(index(I, add(loc, DOWN)) == 0 for v, loc in obj if loc[0] == lowermost(obj)))
  O = cover(I, bottom_rows)
  return O
 
11.333333333333334, 13.11842, def facdfcbfecbjejbhageaeifjiaiabgde(I):
  objs = objects(I, T, F, T)
  return paint(canvas(mostcolor(I), shape(I)), 
               merge(apply(lambda obj: 
                           frozenset((c, (i,j)) for c, (i,j) in obj if i != lowermost(obj)),  # Remove cells at the bottom row
                           sfilter(objs, lambda obj: height(obj) > 1)))) # Keep only objects taller than 1 pixel
 
4.0, 5.8298726, def badehihfjaicejcejfeccechaebdbagf(I):
  return paint(canvas(mostcolor(I), shape(I)), 
               merge(apply(lambda obj: 
                           branch(height(obj) > 1,  # If the object is taller than one pixel
                                 difference(obj, recolor(color(obj), {(lowermost(obj), j) for j in range(width(obj))})),  # Remove the bottom row
                                  obj),  # Otherwise, keep the object as is
                           objects(I, T, F, T))))  # Iterate over all objects in the image
 
21.666666666666668, 4.383686, def bccdaibfccefejciabcbafdfbadadhcb(I):
  bg = mostcolor(I)
  top_row_bg = all(index(I, (0, j)) == bg for j in range(width(I)))
  O = I[1:] if top_row_bg else I
  return O
 
20.0, 5.7788267, def gdebfdceeahfegcaibidabcihafbgajf(I):
  def shift_up_if_bottom_row(obj):
    return shift(obj, (-1, 0)) if height(obj) > 1 else obj
  objs = objects(I, True, True, False)
  return paint(I, merge(apply(shift_up_if_bottom_row, objs)))
 
17.666666666666668, 30.010654, def cgccifagfjajedchjegagdafecfccada(I):
  def trim_bottom(obj):
    h = height(obj)
    return toobject(sfilter(toindices(obj), lambda idx: idx[0] < h - 1), I) if h > 1 else obj
  trimmed = mfilter(objects(I, T, F, F), trim_bottom)
  return paint(canvas(ZERO, shape(I)), trimmed)
 
28.0, 56.805035, def jbgbfhajadebehcbafafbagddbafehbd(I):
  return cellwise(I, 
                 fill(canvas(0, shape(I)), 1,
                      merge(frozenset(frozenset((i, j) for i, j in product({lowermost(obj)}, range(leftmost(obj), rightmost(obj) + 1)))
                             for obj in objects(I, True, False, True)))),
                 mostcolor(I))
 
