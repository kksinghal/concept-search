8.666666666666666, 31.703852, def bjajgdcdahcdeeaijhbbajdfceaahbcc(I):
    x1 = ofcolor(I, EIGHT)  # Find indices of '8's
    x2 = astuple(first(x1), first(remove(first(x1), x1)))  # Get two distinct '8' indices
    x3 = connect(x2[0], x2[1])  # Connect the two indices
    O = fill(I, EIGHT, x3)  # Fill the connected line in the grid
    return O
 
9.666666666666666, 36.08922, def baefddbggdijedjebfaahcjjhdiefddj(I):
  obj = objects(I, False, True, False) # Extract all objects from the grid
  filtered_obj = colorfilter(obj, EIGHT) # Keep only objects containing '8'
  indices = toindices(merge(filtered_obj)) # Extract indices from filtered objects
  connections = prapply(connect, indices, indices) # Connect all index pairs
  filled = fill(I, EIGHT, merge(connections)) # Fill connections with '8'
  O = paint(filled, merge(filtered_obj)) # Paint the original '8' objects back
  return O
 
9.666666666666666, 36.08922, def afjgdddcabhbecaiacgccajgafagdddd(I):
  objs = objects(I, True, False, True)
  output = I
  for obj in objs:
    upper = uppermost(obj)
    lower = lowermost(obj)
    left = leftmost(obj)
    right = rightmost(obj)
    for i in range(upper, lower + 1):
      for j in range(left, right + 1):
        output = fill(output, EIGHT, {(i, j)})
  return output
 
47.666666666666664, 16.62326, def eddeieajajhfebdbijeabdddbfjjdgag(I):
  objs = fgpartition(I)
  output = I
  for obj in objs:
    if color(obj) == EIGHT:
      upper = uppermost(obj)
      lower = lowermost(obj)
      left = leftmost(obj)
      right = rightmost(obj)
      for i in range(upper, lower + 1):
        for j in range(left, right + 1):
          output = fill(output, EIGHT, {(i, j)})
  return output
 
11.666666666666666, 37.526707, def eeaejdibjfchefhejjahebccbchdcjda(I):
  objs = objects(I, True, False, True)
  for obj in objs:
    if hline(obj) or vline(obj):
      if leftmost(obj) <= 1: 
        O = paint(cover(I, obj), shift(obj, (0, -leftmost(obj))))
      else: 
        O = paint(cover(I, obj), shift(obj, (height(I)-lowermost(obj)-1, 0)))
    else:
      if leftmost(obj) < height(I)-lowermost(obj): 
        O = paint(cover(I, obj), shift(obj, (0, -leftmost(obj))))
      else:
        O = paint(cover(I, obj), shift(obj, (height(I)-lowermost(obj)-1, 0)))
  return O
 
17.666666666666668, 42.820076, def ahcfdbgbdhciejbjaeebccecedgcbaeb(I):
  objs = objects(I, True, False, True)
  O = I
  for obj in objs:
    ul = ulcorner(obj)
    if ul[0] <= width(I) - ul[1]:
      O = paint(cover(O, obj), shift(obj, (0, -ul[1])))
    else:
      O = paint(cover(O, obj), shift(obj, (height(I) - lrcorner(obj)[0] - 1, 0)))
  return O
 
17.0, 36.20897, def fdbehfhcacgaefhaaegefbcegibgfegd(I):
  O = I
  for v in palette(I) - {mostcolor(I)}:
    obj = toobject(ofcolor(I, v), I)
    ul = ulcorner(obj)
    if ul[0] <= width(I) - ul[1]:
      O = paint(cover(O, obj), shift(obj, (0, -ul[1])))
    else:
      O = paint(cover(O, obj), shift(obj, (height(I) - lrcorner(obj)[0] - 1, 0)))
  return O
 
12.333333333333334, 36.08773, def efbfbfcfafaeedcgbfcccgcafijjdaid(I):
  objs = fgpartition(I)
  O = I
  for obj in objs:
    if hline(obj) or vline(obj):
      if leftmost(obj) <= height(I) - lowermost(obj):
        O = paint(cover(O, obj), shift(obj, (0, -leftmost(obj))))
      else:
        O = paint(cover(O, obj), shift(obj, (height(I) - lowermost(obj) - 1, 0)))
    else:
      if leftmost(obj) < height(I) - lowermost(obj):
        O = paint(cover(O, obj), shift(obj, (0, -leftmost(obj))))
      else:
        O = paint(cover(O, obj), shift(obj, (height(I) - lowermost(obj) - 1, 0)))
  return O
 
17.666666666666668, 42.77521, def hbgfefgfaeffehbfijageagdhacgedbi(I):
  objs = objects(I, True, False, True)
  left_objs = sfilter(objs, lambda obj: leftmost(obj) < height(I) - lowermost(obj))
  bottom_objs = difference(objs, left_objs)
  O = I
  for obj in left_objs:
    O = paint(cover(O, obj), shift(obj, (0, -leftmost(obj))))
  for obj in bottom_objs:
    O = paint(cover(O, obj), shift(obj, (height(I) - lowermost(obj) - 1, 0)))
  return O
 
9.666666666666666, 36.08922, def bcdafaccddeaecfebaffgcbhhbadhifd(I):
  target_color = EIGHT
  indices = ofcolor(I, target_color)
  connected = frozenset()
  for i, j in indices:
    for x, y in indices:
      if (i == x and abs(j - y) == 1) or (j == y and abs(i - x) == 1):
        connected = connected | connect((i, j), (x, y))
  O = fill(I, target_color, connected)
  return O
 
47.666666666666664, 16.62326, def ajaeddfdahbbehhbadheajgfehefddci(I):
  target_color = EIGHT
  obj = toobject(ofcolor(I, target_color), I)
  connected = delta(obj) & backdrop(obj)
  O = fill(I, target_color, connected)
  return O
 
15.0, 11.484743, def feibfecgaebfedcjjaheadbifhjeaaff(I):
    # Find indices of the non-zero color
    non_zero_indices = ofcolor(I, leastcolor(I))
    
    # Determine line direction based on index differences
    first_i, first_j = first(non_zero_indices)
    is_horizontal = len({i for i, _ in non_zero_indices}) == 1

    # Create a line connecting the non-zero indices
    if is_horizontal:
        line = connect((first_i, 0), (first_i, len(I[0]) - 1))
    else:
        line = connect((0, first_j), (len(I) - 1, first_j))

    # Fill the line with the non-zero color
    O = fill(I, leastcolor(I), line)
    return O 
 
9.666666666666666, 36.08922, def eafijfbeffaaedfajfabiaeajffcedic(I):
  nz = leastcolor(I)
  obj = toobject(ofcolor(I, nz), I)
  h = hline(obj)
  v = vline(obj)
  O = I
  if h or v:
    O = fill(I, nz, backdrop(obj))
  return O
 
12.666666666666666, 15.26452, def bdgagbbbddcaefcjaaigefecaacabifg(I):
    nz_color = leastcolor(I)
    nz_indices = ofcolor(I, nz_color)
    
    # Calculate differences between first and other indices
    first_i, first_j = first(nz_indices)
    i_diffs = {abs(i - first_i) for i, _ in nz_indices}
    j_diffs = {abs(j - first_j) for _, j in nz_indices}
    
    # Determine line direction 
    is_horizontal = len(i_diffs) == 1

    # Create the line
    line = set()
    if is_horizontal:
        start_j = min(j_diffs)
        end_j = max(j_diffs) + 1
        line = {(first_i, j) for j in range(start_j, end_j)}
    else:
        start_i = min(i_diffs)
        end_i = max(i_diffs) + 1
        line = {(i, first_j) for i in range(start_i, end_i)}

    # Fill the line on the grid
    O = fill(I, nz_color, frozenset(line))
    return O
 
14.0, 15.984832, def aggacajgdaecebababjgjcaffcgiejdb(I):
  # Find the non-zero color
  target_color = leastcolor(I)
  
  # Create an object from the non-zero color cells
  target_object = toobject(ofcolor(I, target_color), I)
  
  # Calculate the bounding box of the object
  min_row, min_col = ulcorner(target_object)
  max_row, max_col = lrcorner(target_object)

  # Determine if the object is more horizontal or vertical
  is_horizontal = (max_col - min_col) > (max_row - min_row)

  # Create a filled line based on the orientation
  if is_horizontal:
    filled_line = {(min_row, j) for j in range(len(I[0]))}
  else:
    filled_line = {(i, min_col) for i in range(len(I))}

  # Fill the line on the grid
  O = fill(I, target_color, frozenset(filled_line))
  return O
 
12.0, 17.773367, def afcjhaecbbibebgebdajgeeeafcfdgad(I):
    indices = ofcolor(I, 8)
    if not indices:
        return I
    upper = uppermost(indices)
    lower = lowermost(indices)
    left = leftmost(indices)
    right = rightmost(indices)
    if lower - upper >= right - left:
        line = {(i, left) for i in range(upper, lower + 1)}
    else:
        line = {(upper, j) for j in range(left, right + 1)}
    O = fill(I, 8, line)
    return O
 
10.333333333333334, 10.483265, def bebadeedeehgeieiaccffbefdebchcae(I):
  h, w = len(I), len(I[0])
  row_sum = [0] * h
  col_sum = [0] * w
  for i in range(h):
    for j in range(w):
      if I[i][j] == 8:
        row_sum[i] += 1
        col_sum[j] += 1
  if max(row_sum) >= max(col_sum):
    row_index = row_sum.index(max(row_sum))
    line = {(row_index, j) for j in range(w)}
  else:
    col_index = col_sum.index(max(col_sum))
    line = {(i, col_index) for i in range(h)}
  O = fill(I, 8, line)
  return O
 
9.666666666666666, 36.08922, def djfjacbchfdhecfhbjecaefcjjecfedc(I):
  objs = fgpartition(I)
  bg = mostcolor(I)
  h, w = len(I), len(I[0])
  for obj in objs:
    direction = (1, 0) if hline(obj) else (0, 1)
    for i in range(1, max(h, w)):
      shifted_obj = shift(obj, multiply(i, direction))
      if any(index(I, loc) != bg for loc in toindices(shifted_obj)):
        break
      obj = obj | recolor(color(obj), toindices(shifted_obj))
  return paint(canvas(bg, (h, w)), merge(objs))
 
12.333333333333334, 17.189823, def afjgaceaafihefffjedhcbggbdbeibge(I):
  objs = difference(partition(I), colorfilter(partition(I), mostcolor(I)))
  new_objs = set()
  for obj in objs:
    if hline(obj):
      extension = connect(ulcorner(obj), (ulcorner(obj)[0], len(I[0]) - 1))
    else:
      extension = connect(ulcorner(obj), (len(I) - 1, ulcorner(obj)[1]))
    new_objs.add(recolor(color(obj), toindices(obj) | extension))
  return paint(I, merge(new_objs))
 
13.333333333333334, 14.032872, def idafgcbegghdeefbbeiefifeecaachaj(I):
  def extend_obj(obj):
    if hline(obj): return recolor(color(obj), {(i, j) for i, j in product(range(height(I)), {ulcorner(obj)[1]})})
    return recolor(color(obj), {(i, j) for i, j in product({ulcorner(obj)[0]}, range(width(I)))})

  return paint(I, merge(apply(extend_obj, difference(partition(I), colorfilter(partition(I), mostcolor(I))))))
 
13.0, 11.30764, def cgfbbbfbabfceeajbehiiebjcbdfghdg(I):
  connected = I
  for _ in range(max(len(I), len(I[0]))): # Iterate multiple times for potential overlaps
    for i in range(len(I)):
      for j in range(len(I[0]) - 1):
        if I[i][j] == EIGHT:
          connected = fill(connected, EIGHT, {(i, j + 1)})
    for j in range(len(I[0])):
      for i in range(len(I) - 1):
        if I[i][j] == EIGHT:
          connected = fill(connected, EIGHT, {(i + 1, j)})
  return connected
 
17.666666666666668, 18.796926, def jiadcdabaacfebdciachccddgbdhdbii(I):
  objs = objects(I, True, False, False)
  target_obj = merge(colorfilter(objs, EIGHT))
  connected = I
  for (v, (i, j)) in target_obj:
    connected = fill(connected, EIGHT, dneighbors((i, j)))
  return connected
 
85.33333333333333, 52.015053, def dcdaafbifgaaedhgaffaecfcaaddgjbg(I):
  connected = I
  for i in range(len(I)):
    connected = fill(connected, EIGHT, connect((i, 0), (i, len(I[0]) - 1))) # Connect all cells in a row if any contain '8'
  for j in range(len(I[0])):
    if EIGHT in [I[i][j] for i in range(len(I))]: # Check if a column contains '8'
      connected = fill(connected, EIGHT, connect((0, j), (len(I) - 1, j))) # Connect all cells in the column
  return connected
 
4.333333333333333, 12.345444, def jaaebbbafebceddiaccdgechidabdhih(I):
  eights = ofcolor(I, EIGHT)
  connections = merge(apply(lambda p: connect(p, other(eights, p)), eights))
  O = fill(I, EIGHT, connections)
  return O
 
9.666666666666666, 12.235849, def fbbdcfdaecifeefaibefbjfegdhhfidc(I):
  h, w = height(I), width(I)
  horizontal_lines = {frozenset((i, j) for j in range(w)) for i in range(h)} 
  vertical_lines = {frozenset((i, j) for i in range(h)) for j in range(w)}
  lines = horizontal_lines | vertical_lines
  target_color = leastcolor(I)
  line_lengths = {line: colorcount(toobject(line, I), target_color) for line in lines}
  longest_line = argmax(line_lengths, lambda line: line_lengths[line])
  O = fill(I, target_color, longest_line)
  return O
 
11.333333333333334, 10.585366, def jcdhdacfdbdcedhdbbefbdedbaibceji(I):
  objs = objects(I, True, False, False)
  target_color = leastcolor(I)
  target_objs = sfilter(objs, lambda obj: color(obj) == target_color)
  longest_obj = argmax(target_objs, lambda obj: max(height(obj), width(obj)))
  h, w = height(I), width(I)
  horizontal_line = frozenset((uppermost(longest_obj), j) for j in range(w))
  vertical_line = frozenset((i, leftmost(longest_obj)) for i in range(h))
  target_line = horizontal_line if width(longest_obj) > height(longest_obj) else vertical_line
  O = fill(I, target_color, target_line)
  return O
 
17.666666666666668, 7.0641923, def fibacgbcajcdedhijbbcaaibbcbcedaj(I):
  target_color = leastcolor(I)
  indices = ofcolor(I, target_color)
  max_i = max(i for i, j in indices)
  min_i = min(i for i, j in indices)
  max_j = max(j for i, j in indices)
  min_j = min(j for i, j in indices)
  horizontal = max_j - min_j >= max_i - min_i
  if horizontal:
    line = frozenset((i, j) for i in range(height(I)) for j in range(width(I)) if i == (max_i + min_i) // 2)
  else:
    line = frozenset((i, j) for i in range(height(I)) for j in range(width(I)) if j == (max_j + min_j) // 2)
  O = fill(I, target_color, line)
  return O
 
18.333333333333332, 11.953654, def ahffcdgbgccdebcjaajieideefeecbbh(I):
  h, w = height(I), width(I)
  rows = tuple(frozenset((i, j) for j in range(w)) for i in range(h))
  cols = tuple(frozenset((i, j) for i in range(h)) for j in range(w))
  target_color = leastcolor(I)
  row_sums = apply(lambda row: colorcount(toobject(row, I), target_color), rows)
  col_sums = apply(lambda col: colorcount(toobject(col, I), target_color), cols)
  max_row_sum, max_col_sum = max(row_sums), max(col_sums)
  target_row = argmax(row_sums, lambda x: x) if max_row_sum >= max_col_sum else None
  target_col = argmax(col_sums, lambda x: x) if max_col_sum > max_row_sum else None
  line = rows[target_row] if target_row is not None else cols[target_col]
  O = fill(I, target_color, line)
  return O
 
48.0, 16.063387, def fcbaeaiddbbbebcaagfgggcgjcbdfbbf(I):
  def extend_obj(obj):
    return recolor(color(obj), backdrop(obj)) if hline(obj) else recolor(color(obj), backdrop(dmirror(obj)))
  return paint(I, merge(apply(extend_obj, difference(partition(I), colorfilter(partition(I), mostcolor(I))))))
 
19.666666666666668, 22.55217, def hffeecaibbdaeedbjahfcbibfhijfbcc(I):
  objs = difference(partition(I), colorfilter(partition(I), mostcolor(I)))
  lines = frozenset(recolor(color(o), hfrontier((0, ulcorner(o)[1]))) if hline(o) else recolor(color(o), vfrontier((ulcorner(o)[0], 0))) for o in objs)
  return paint(I, merge(lines))
 
9.0, 32.429794, def chbjacabeijdegecijiacbfgacahgbdf(I):
  hconnected = I
  for _ in range(len(I)):
    for j in range(len(I[0]) - 1):
      if I[j][j] == EIGHT:
        hconnected = fill(hconnected, EIGHT, {(j, j+1)})
  vconnected = hconnected
  for _ in range(len(I[0])):
    for i in range(len(I) - 1):
      if hconnected[i][i] == EIGHT:
        vconnected = fill(vconnected, EIGHT, {(i+1, i)})
  return vconnected
 
12.666666666666666, 13.160703, def aeacdefbddbieeifjjcdgadegibcfcea(I):
  obj = first(objects(I, True, False, True))
  orientation = 0 if width(obj) > height(obj) else 1
  line = {(i, leftmost(obj)) if orientation else (uppermost(obj), i) for i in range(height(I) if orientation else width(I))}
  O = paint(I, recolor(leastcolor(I), frozenset(line)))
  return O
 
13.333333333333334, 14.032872, def ajffbcibbjhfeceibbeacjdhhdcbeeeg(I):
  target_obj = argmax(objects(I, True, False, False), lambda obj: -colorcount(I, color(obj))) 
  horizontal = width(target_obj) >= height(target_obj)
  center = centerofmass(target_obj)
  if horizontal:
    line = frozenset((center[0], j) for j in range(width(I))) 
  else:
    line = frozenset((i, center[1]) for i in range(height(I)))
  O = fill(I, color(target_obj), line)
  return O
 
11.666666666666666, 23.406416, def diajeaafbhfjeaabijgciebbadaaecbb(I):
  target_color = leastcolor(I)
  target_obj =  extract(objects(I, True, False, False), lambda obj: color(obj) == target_color)
  direction = (0, 1) if width(target_obj) >= height(target_obj) else (1, 0)
  start = centerofmass(target_obj)
  line = shoot(start, direction) & asindices(I)
  O = fill(I, target_color, line)
  return O
 
12.0, 21.710953, def fcdfaddddceaeafabdedhhgfeebdaedg(I):
  def extend_obj(obj):
    h = height(obj)
    w = width(obj)
    direction = (0, 1) if w >= h else (1, 0)
    start = ulcorner(obj)
    current = start
    while True:
      next_cell = (current[0] + direction[0], current[1] + direction[1])
      if next_cell in asindices(I) and index(I, next_cell) == 0:
        obj = obj | {(color(obj), next_cell)}
        current = next_cell
      else:
        break
    return obj
  return paint(I, merge(apply(extend_obj, difference(partition(I), colorfilter(partition(I), mostcolor(I)))))) 
 
14.333333333333334, 18.418356, def fdabfcjeeeedeiiaadciacaigicjgebc(I):
  def extend_obj(obj):
    h = height(obj)
    w = width(obj)
    start = ulcorner(obj)
    if w >= h:
      return recolor(color(obj), frozenset((start[0], j) for j in range(start[1], width(I))))
    else:
      return recolor(color(obj), frozenset((i, start[1]) for i in range(start[0], height(I))))
  return paint(I, merge(apply(extend_obj, difference(partition(I), colorfilter(partition(I), mostcolor(I)))))) 
 
16.333333333333332, 16.867922, def fhfjfcbcicfcefbcifabfccabgdjcbhc(I):
  def extend_obj(obj):
    h = height(obj)
    w = width(obj)
    if w >= h:
      return recolor(color(obj), backdrop(hfrontier((ulcorner(obj)[0], 0))))
    else:
      return recolor(color(obj), backdrop(vfrontier((0, ulcorner(obj)[1]))))
  return paint(I, merge(apply(extend_obj, difference(partition(I), colorfilter(partition(I), mostcolor(I)))))) 
 
0.0, 0.0, def achiffaidfdcebcbbdbgceaahdaihchh(I):
  connected = I
  for i in range(len(I)):
    eights_in_row = {(a, b) for v, (a, b) in asobject(I) if v == EIGHT and a == i}
    if eights_in_row:
      connected = fill(connected, EIGHT, connect(first(eights_in_row), last(eights_in_row)))
  for j in range(len(I[0])):
    eights_in_col = {(a, b) for v, (a, b) in asobject(I) if v == EIGHT and b == j}
    if eights_in_col:
      connected = fill(connected, EIGHT, connect(first(eights_in_col), last(eights_in_col)))
  return connected
 
