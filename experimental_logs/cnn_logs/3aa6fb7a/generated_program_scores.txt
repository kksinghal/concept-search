0.26530612244897955, 29.21883, def bfabajdhdhcdeaigaabfagaiacaccbeg(I):
  obj = objects(I, T, F, T)  # Identify objects, excluding background
  surrounding_cells =  frozenset.union(*[dneighbors(cell) for obj in obj for _, cell in obj])
  filtered_cells = sfilter(surrounding_cells, lambda loc: 0 <= loc[0] < len(I) and 0 <= loc[1] < len(I[0]) and I[loc[0]][loc[1]] == 0)
  O = fill(I, 1, filtered_cells)  # Fill the filtered cells with 1
  return O
 
0.05102040816326531, 14.839132, def eghbdahgiceeeeefibbcbajfaccfadee(I):
    objs = objects(I, T, F, T)  # Identify objects, excluding background
    O = I
    for obj in objs:
        for x in range(1, width(obj) - 1):
            O = fill(O, 1, {(uppermost(obj) - 1, leftmost(obj) + x)})
            O = fill(O, 1, {(lowermost(obj) + 1, leftmost(obj) + x)})
        for y in range(1, height(obj) - 1):
            O = fill(O, 1, {(uppermost(obj) + y, leftmost(obj) - 1)})
            O = fill(O, 1, {(uppermost(obj) + y, rightmost(obj) + 1)})
    return O
 
0.23469387755102042, 10.029967, def heddeddcahaheccaidedgfjcddbdgahe(I):
    # Identify all '8' cells.
    x1 = ofcolor(I, EIGHT) 
    # Generate objects from the '8' cells.
    x2 = objects(fill(I, EIGHT, x1), T, F, F)  
    # Find the corner indices of each object.
    x3 = mapply(corners, x2)
    # Change the corner cell values to '1'.
    O = fill(I, ONE, x3)
    return O
 
0.15306122448979592, 6.5694203, def bdecebdecddeefhcbbefebbfeffjecah(I):
    # Identify '8' cells and create objects.
    x1 = objects(I, T, F, F)
    # Filter for objects containing '8'.
    x2 = sfilter(x1, lambda o: color(o) == EIGHT)
    # Extract corner indices of each object.
    x3 = mapply(corners, x2)
    # Modify the corner cells to '1'.
    O = fill(I, ONE, x3)
    return O
 
0.13265306122448978, 10.048736, def ffaeedbjadffefgaaeabdiffedehbade(I):
    # Create a grid where only '8' cells are kept, others replaced by '0'.
    x1 = replace(I, ZERO, EIGHT) 
    # Identify objects in this modified grid.
    x2 = objects(x1, T, F, F)
    # Get corner indices for each object.
    x3 = mapply(corners, x2)
    # Change values at corner indices to '1' in the original grid.
    O = fill(I, ONE, x3) 
    return O
 
0.17346938775510204, 12.723526, def agfhadibaaafebedbjgifffbebggdcec(I):
    # Find '8' cell indices.
    x1 = ofcolor(I, EIGHT)
    # Generate all possible pairs of '8' cells.
    x2 = prapply(astuple, x1, x1)
    # Filter pairs that represent corners of a rectangle.
    x3 = sfilter(x2, lambda p: abs(p[0][0] - p[1][0]) == abs(p[0][1] - p[1][1]) and p[0][0] != p[1][0]) 
    # Extract the corner indices.
    x4 = mapply(lambda p: frozenset(p), x3)
    # Fill the corner cells with '1'.
    O = fill(I, ONE, x4)
    return O
 
0.10204081632653061, 13.736439, def fdcjdcijffbfebffafdibdcdgaejadeb(I):
  objs = objects(I, T, T, T)
  new_objs = set()
  for obj in objs:
    ul = ulcorner(obj)
    target = (ul[0]+1, ul[1]+1)
    if contained(target, toindices(obj)):
      new_objs.add(frozenset({(1, target)} | {(v,p) for v,p in obj if p != target}))
    else:
      new_objs.add(obj)
  O = paint(I, merge(new_objs))
  return O
 
0.09183673469387754, 13.973826, def fehfebaaefcbebagafefcgfhgfaeaefe(I):
  objs = objects(I, T, T, T)
  modified_cells = set()
  for obj in objs:
    ul = ulcorner(obj)
    target = (ul[0]+1, ul[1]+1)
    if contained(target, toindices(obj)): 
      modified_cells.add((1, target))
    modified_cells |= obj
  O = paint(I, frozenset(modified_cells))
  return O
 
0.41836734693877553, 28.918388, def daecgeedeefcebjebbjcahdehaaedifc(I):
  def is_target(cell):
    v, (i, j) = cell
    return i>0 and j>0 and I[i-1][j] == v and I[i][j-1] == v and I[i-1][j-1] == v
  O = paint(I, frozenset((1, (i, j)) if is_target((v, (i, j))) else (v, (i, j)) for i, row in enumerate(I) for j, v in enumerate(row)))
  return O
 
0.11224489795918366, 8.282549, def fccdfgbfjafaefgcbehbaecbdgdedecd(I):
  objs = objects(I, T, F, T)
  new_objs = set()
  for obj in objs:
    w = width(obj)
    if w == 1:
      target = astuple(uppermost(obj) + 1, leftmost(obj))
      new_objs.add(frozenset({(1, target)}))
    else:
      left_target = astuple(uppermost(obj) + 1, leftmost(obj))
      right_target = astuple(uppermost(obj) + 1, rightmost(obj))
      new_objs.add(frozenset({(1, left_target), (1, right_target)}))
  O = paint(I, merge(new_objs))
  return O
 
0.09183673469387754, 9.307698, def ddfchfafficaeaeeadccfhcedgdcdbcd(I):
    O = I
    for j in range(width(I)):
        column = frozenset((I[i][j], (i, j)) for i in range(height(I)) if I[i][j] != 0)
        if size(column) > 1:
            second_cell = astuple(uppermost(column) + 1, j)
            O = paint(O, frozenset({(1, second_cell)}))
    return O
 
0.13265306122448978, 13.465, def fdbadhjiegdhefahaiajedaibadfbbga(I):
  objs = objects(I, T, F, T)
  recolor_indices = set()
  for obj in objs:
    for i, j in toindices(obj):
      if i == uppermost(obj) + 1 and (j == leftmost(obj) or j == rightmost(obj)):
        recolor_indices.add((i, j))
  O = fill(I, 1, frozenset(recolor_indices))
  return O
 
0.29591836734693877, 16.688267, def afcfbiaajifeebdabbjfcfefgaacachb(I):
  shifted_up = shift(asobject(I), (-1, 0))
  intersection = toindices(asobject(I)) & toindices(shifted_up)
  target_cells = frozenset(astuple(i + 1, j) for i, j in intersection if (j == leftmost(intersection) or j == rightmost(intersection)))
  O = fill(I, 1, target_cells)
  return O
 
0.10204081632653061, 14.046047, def abdbeaaccbahebiajcjfdgfdeccaaced(I):
  O = I
  for obj in objects(I, T, F, T):
    for x in range(width(obj)):
      j = leftmost(obj) + x
      column = frozenset((I[i][j], (i, j)) for i in range(height(I)) if (i, j) in toindices(obj))
      if size(column) > 1:
        second_cell = astuple(uppermost(column) + 1, j)
        O = paint(O, frozenset({(1, second_cell)}))
  return O
 
0.0, 0.0, def gjfdgfcbaddgeccdigiiiedbjedhfdba(I):
  objs = objects(I, T, F, T)  # Identify objects, excluding background
  deltas = mapply(delta, objs)  # Get cells surrounding each object
  filtered_deltas = sfilter(deltas, lambda loc: index(I, loc) == 0) # Filter cells with value 0
  O = fill(I, 1, filtered_deltas)  # Fill the filtered cells with 1
  return O 
 
