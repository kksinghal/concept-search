84.66666666666667, 18.40039, def bhfcfadjcgbeedbeiejeeafdbbcfeeee(I):
  O = I
  for obj in objects(I, T, F, F):
    new_color = ONE if bordering(obj, I) else TWO
    O = paint(O, recolor(new_color, obj))
  return O
 
14.333333333333334, 6.393353, def fbcebjhjccbaehcaifjbgbefcffgebbi(I):
    objs = objects(I, T, T, T)  # Identify all objects
    min_size = min(size(o) for o in objs)  # Find the size of the smallest object
    small_obj = extract(objs, lambda o: size(o) == min_size)  # Extract the smallest object
    sec_color = color(small_obj) - 3  # Calculate the secondary color
    O = I  # Initialize the output grid
    for obj in objs:
      if obj != small_obj:
        O = paint(O, recolor(sec_color, obj))  # Recolor larger objects
    return O
 
26.333333333333332, 8.516148, def egidigbdcibdedebaeaggbddchbhdabf(I):
    objs = fgpartition(I)  # Identify objects (excluding background)
    min_size = valmin(objs, size) # Find size and color of smallest object 
    O = I
    for v, ind in merge(objs):
      if size({(v, i) for i in ind}) > min_size:
        O = fill(O, mostcolor(I) - 3, ind)  # Recolor larger objects
    return O
 
24.0, 38.8715, def fjfajggdghhceibfahgihbcfaadbdaad(I):
    objs = objects(I, F, F, T)
    bg = mostcolor(I)
    small_obj = min(objs, key=size)
    large_obj = max(objs, key=size)
    O = paint(paint(canvas(bg, shape(I)), recolor(1, large_obj)), recolor(2, small_obj))
    return O
 
21.666666666666668, 3.8709223, def ebddabeefiageahaabfbbejjbbgbfidf(I):
    objs = objects(I, F, F, T)
    s = sizefilter(objs, min(size(obj) for obj in objs))
    l = sizefilter(objs, max(size(obj) for obj in objs))
    O = paint(paint(I, recolor(2, merge(s))), recolor(1, merge(l)))
    return O
 
24.0, 5.303866, def dfhjedbcggjiecebajddfedaadcccaaa(I):
    objs = objects(I, F, F, T)
    sizes = apply(size, objs)
    min_size = minimum(frozenset(sizes))
    max_size = maximum(frozenset(sizes))
    small = extract(objs, matcher(size, min_size))
    large = extract(objs, matcher(size, max_size))
    O = paint(paint(I, recolor(2, small)), recolor(1, large))
    return O
 
21.666666666666668, 24.322048, def cfcgjecedcffefdejieibceghdcifbfb(I):
  o = objects(I, F, F, T)
  min_s = minimum(apply(size, o))
  max_s = maximum(apply(size, o))
  f = lambda x: 2 if size(x) == min_s else (1 if size(x) == max_s else 0)
  O = paint(I, merge(apply(lambda x: recolor(f(x), x), o)))
  return O
 
26.333333333333332, 8.516148, def iheghgeebggeefjaafefcicddjhabbaa(I):
    objs = objects(I, F, F, T)
    small_obj = argmin(objs, size)
    large_obj = argmax(objs, size)
    O = underpaint(underpaint(I, recolor(1, large_obj)), recolor(2, small_obj))
    return O
 
13.333333333333334, 4.576947, def cabiaeadefcbeddebihbjibcjgjhabee(I):
  objs = objects(I, T, F, T) 
  small_objs = combine(sizefilter(objs,1), sizefilter(objs, 2))
  large_objs = difference(objs, small_objs)
  edge_objs = sfilter(large_objs, lambda obj: uppermost(obj) == 0 or leftmost(obj) == 0)
  O = I
  for obj in small_objs:
    O = paint(O, recolor(size(obj), obj))
  O = paint(O, merge(edge_objs))
  O = replace(O, FIVE, ONE)
  return O
 
17.333333333333332, 3.6941988, def ccafaficjcebedfajbchehadgbjcgaab(I):
  objs = objects(I, T, F, T)
  O = I
  for obj in objs:
    if size(obj) == 1:
      O = fill(O, ONE, toindices(obj))
    elif size(obj) == 2:
      O = fill(O, TWO, toindices(obj))
    else:
      if uppermost(obj) != 0 and leftmost(obj) != 0:
        O = fill(O, ONE, toindices(obj))
  return O
 
21.333333333333332, 3.6555943, def baejejdbefebeifbahefbjjegdbhbjbb(I):
  objs = sorted(objects(I, T, F, T), key=size) # Identify and sort objects
  recolored_objs = []
  for i, obj in enumerate(objs):
    recolored_objs.append(recolor(i + 1, obj)) # Relabel each object
  return paint(I, merge(recolored_objs)) # Paint the grid
 
19.333333333333332, 2.667765, def fdfhaffcidaiefdeicighecdjbdjgfie(I):
  objs = objects(I, T, F, T)
  sorted_sizes = sorted({size(obj) for obj in objs}) # Get unique sizes and sort
  recolored_objs = []
  for i, s in enumerate(sorted_sizes):
    for obj in objs:
      if size(obj) == s:
        recolored_objs.append(recolor(i + 1, obj)) # Relabel based on size order
  return paint(I, merge(recolored_objs)) # Paint the grid
 
14.333333333333334, 7.11588, def ajdaeaiifecgedegacdddjahdjegadha(I):
  border_indices = mfilter(asindices(I), lambda idx: bordering(initset(idx), I))
  O = I
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if (i, j) in border_indices:
        O = paint(O, {(ONE, (i, j))})
      elif val != mostcolor(I): 
        O = paint(O, {(TWO, (i, j))})
  return O
 
11.333333333333334, 5.3820915, def caaedbhibjhfeeeabdbdbedbcddgjfbj(I):
  objs = objects(I, T, T, T)
  min_size = minimum(apply(size, objs))
  small_obj = extract(objs, lambda obj: size(obj) == min_size)
  sec_color = color(small_obj) - 3
  O = I
  for obj in objs:
    if obj != small_obj:
      O = paint(O, recolor(sec_color, obj))
  O = paint(O, recolor(1, small_obj))
  return O
 
24.0, 5.020419, def ffbgifidcidbedfdijieeciiefccfaeh(I):
  objs = sorted(objects(I, F, F, T), key=size) # Extract and sort objects by size
  O = I # Initialize output grid
  if objs: 
    O = paint(O, recolor(2, objs[0])) # Recolor the smallest object
  if len(objs) > 1:
    O = paint(O, recolor(1, objs[-1])) # Recolor the largest object
  return O
 
15.0, 4.451933, def bfdfjibhdcajehhcijdedfedacfcbcea(I):
  objs = objects(I, T, T, T)
  smallest_obj = argmin(objs, size)
  O = paint(canvas(mostcolor(I), shape(I)), recolor(1, merge(objs)-{smallest_obj}))
  O = paint(O, recolor(2, smallest_obj))
  return O
 
14.666666666666666, 3.1465948, def fbjacacaieccebhfaeeefabfbjafibbc(I):
  objs = objects(I, T, T, T)
  sizes = apply(size, objs)
  min_idx = argmin(sizes, identity)
  O = I
  for i, obj in enumerate(objs):
    O = paint(O, recolor(2 if i == min_idx else 1, obj))
  return O
 
14.333333333333334, 2.8267329, def bdbfbdffbbcbehfcjaaigdaacbhcceaf(I):
  O = I
  for obj in objects(I, T, F, T):
    if size(obj) <= 2:
      O = paint(O, recolor(size(obj), obj))
    elif uppermost(obj) == 0 or leftmost(obj) == 0:
      O = paint(O, recolor(ONE, obj))
    else:
      O = paint(O, recolor(TWO, obj))
  return O
 
88.0, 49.55416, def gciagbebbediecfbidcjadeffadecccf(I):
  O = paint(I, recolor(TWO, asobject(I)))
  for obj in objects(I, T, F, T):
    if size(obj) <= 2:
      O = paint(O, recolor(size(obj), obj))
    elif uppermost(obj) == 0 or leftmost(obj) == 0:
      O = paint(O, recolor(ONE, obj))
  return O
 
88.0, 12.520017, def fjafcjdgcidheagfiabiffeaccajfead(I):
  O = canvas(ONE, shape(I))
  for obj in objects(I, T, F, T):
    if size(obj) > 2 and uppermost(obj) != 0 and leftmost(obj) != 0:
      O = paint(O, recolor(TWO, obj))
    elif size(obj) <= 2:
      O = paint(O, recolor(size(obj), obj))
  return O
 
23.333333333333332, 3.1403642, def bjgaaacfjhbbechfabafeacfgcccifij(I):
  objs = objects(I, T, F, T)  # Identify objects
  size_to_label = {size(obj): i + 1 for i, obj in enumerate(sorted(objs, key=size))}  # Map sizes to labels
  relabeled_objs = [recolor(size_to_label[size(obj)], obj) for obj in objs] # Create a list of relabeled objects
  return paint(I, merge(relabeled_objs))  # Paint the grid 
 
14.333333333333334, 7.11588, def icjfhdfbfebdeafgaacdaejhegdjbajd(I):
  """
  Replaces the color 5 with 2 in the grid.
  """
  source_color = 5
  target_color = 2
  return replace(I, source_color, target_color)
 
14.333333333333334, 4.880255, def fbbacehfdbjeeebbaedbhfdfgccdfhbb(I):
  O = I
  for obj in objects(I, T, F, T):
    if size(obj) <= 2:
      O = paint(O, recolor(0, obj))
    elif uppermost(obj) == 0 or leftmost(obj) == 0:
      O = paint(O, recolor(1, obj))
    else:
      O = paint(O, recolor(2, obj))
  return O
 
12.666666666666666, 5.5919933, def eihdcgbbjcfeeageiiefbehcfjgcfcec(I):
    O = canvas(ZERO, shape(I))  # Initialize output grid with zeros
    for i, row in enumerate(I):  # Iterate over rows
        for j, value in enumerate(row):  # Iterate over cells
            if bordering(initset((i, j)), I) and value != ZERO: # Check for border and non-zero value
                O = paint(O, recolor(ONE, {(value, (i, j))})) # Paint border cells as 1
            elif value != ZERO:
                O = paint(O, recolor(TWO, {(value, (i, j))})) # Paint non-border cells as 2
    return O
 
9.0, 5.0541, def cbbcfijabbbgecbjafabegbfjbhbdafa(I):
    objs = objects(I, T, T, T)
    min_size = minimum(apply(size, objs))
    small_obj = extract(objs, lambda obj: size(obj) == min_size)
    O = I
    for obj in objs:
      if obj != small_obj:
        if uppermost(obj) <= uppermost(small_obj) or leftmost(obj) < leftmost(small_obj):
          O = paint(O, recolor(2, obj))
        else:
          O = paint(O, recolor(1, obj))
    O = paint(O, recolor(1, small_obj))
    return O
 
19.333333333333332, 5.7464967, def agfjeagigfbdeeagbafcgbgcbiiaafej(I):
  objs = objects(I, T, T, T)
  small_obj = min(objs, key=size)
  recolor_func = lambda obj: paint(I, recolor(2 if uppermost(obj) <= uppermost(small_obj) or leftmost(obj) < leftmost(small_obj) else 1, obj))
  O = I
  for obj in objs:
    if obj != small_obj:
      O = recolor_func(obj)
  return paint(O, recolor(1, small_obj)) 
 
8.0, 2.9410574, def fiaagdaaddeeefaaabcdjjbaddcfigch(I):
  objs = objects(I, T, T, T)
  small_obj = argmin(objs, lambda obj: len(obj)) 
  O = I
  for obj in objs:
    if obj != small_obj:
      i, j = position(obj, small_obj)
      new_color = 2 if i < 0 or j < 0 else 1 
      O = paint(O, recolor(new_color, obj))
  return paint(O, recolor(1, small_obj))
 
88.0, 45.83909, def caagjdjjfifdecddadcdgaachefgdiaf(I):
  O = canvas(2, shape(I)) # Default to 2
  for obj in objects(I, T, F, T):
    color = 0 if size(obj) <= 2 else (1 if uppermost(obj) == 0 or leftmost(obj) == 0 else 2)
    O = paint(O, recolor(color, obj)) 
  return O
 
19.333333333333332, 2.878505, def fifdbjefddageebdjecehadecffddefh(I):
  objs = objects(I, T, F, T)
  labeled_objs = []
  for i, obj1 in enumerate(objs):
    label = 1
    for obj2 in objs:
      if size(obj2) < size(obj1):
        label += 1
    labeled_objs.append(recolor(label, obj1))
  return paint(I, merge(labeled_objs))
 
88.0, 74.21284, def cfhcdddaachiefbbicjahbabdjgahede(I):
  border_cells = mfilter(asindices(I), lambda idx: bordering(initset(idx), I)) # Get border cell indices
  border_objs = mfilter(objects(I, T, F, F), lambda obj: any(c in border_cells for _, c in obj)) # Filter objects touching border cells
  O = paint(canvas(ZERO, shape(I)), recolor(ONE, merge(border_objs))) # Paint border objects as 1
  O = paint(O, recolor(TWO, merge(difference(objects(I, T, F, F), border_objs)))) # Paint remaining objects as 2
  return O
 
92.66666666666667, 18.739254, def ghbihhgfdgecehdcjihajfecbcfdehbg(I):
    O = replace(I, ZERO, TWO) # Replace 0s with 2s
    for obj in objects(I, T, F, F): # Iterate over objects
        if any(bordering(initset(cell[1]), I) for cell in obj): # Check if object touches border
            O = paint(O, recolor(ONE, obj)) # Paint border objects as 1
    return O
 
22.333333333333332, 3.2220955, def cdcgcfccfehaebjfahabefejbiecjcee(I):
  objs = objects(I, F, F, T)
  largest = argmax(objs, size)
  O = I
  for obj in objs:
    if obj != largest:
      O = paint(O, recolor(1, obj))
  smallest = argmin(objs, size)
  if smallest:
    frontier = uppermost(smallest)
    for obj in objs:
      if obj != largest and uppermost(obj) >= frontier:
        O = paint(O, recolor(2, obj))
  return paint(O, recolor(2, smallest))
 
96.0, 26.081455, def hcfdahjcbbfjecdfbebcebaciafcgfda(I):
    objs = objects(I, F, F, T)
    largest = argmax(objs, size)
    smallest = argmin(objs, size)
    frontier = uppermost(smallest) if smallest else -1
    O = canvas(1, shape(I))
    for obj in objs:
        if obj == largest:
            O = paint(O, toobject(toindices(obj), I))
        elif uppermost(obj) >= frontier:
            O = paint(O, recolor(2, obj))
    return O 
 
86.33333333333333, 37.984856, def edfbadbbgbdcehjaidhaehfabdfahiia(I):
  O = canvas(ZERO, shape(I))
  for i, row in enumerate(I):
    for j, value in enumerate(row):
      if bordering(initset((i, j)), I):
        O = paint(O, recolor(ONE, {(value, (i, j))}))
      else:
        O = paint(O, recolor(TWO, {(value, (i, j))}))
  return O
 
11.0, 10.62408, def bebedggjdfceeajfbddfdebcchdbbbcf(I):
  objs = objects(I, T, T, T)
  smallest = argmin(objs, size)
  output_grid = canvas(mostcolor(I), shape(I))
  for obj in objs:
    if obj != smallest:
      color_to_use = 2 if position(obj, smallest)[0] < 0 or position(obj, smallest)[1] < 0 else 1
      output_grid = paint(output_grid, recolor(color_to_use, obj))
  return output_grid
 
93.66666666666667, 41.448566, def eecgeccbgaffeccbjaabebdaiicdacdb(I):
  objs = objects(I, F, F, T)
  largest = argmax(objs, size)
  smallest = argmin(objs, size)
  O = canvas(1, shape(I))
  if smallest:
    for obj in objs:
      if uppermost(obj) >= uppermost(smallest):
        O = paint(O, recolor(2, obj))
  return paint(paint(O, recolor(1, largest)), recolor(2, smallest))
 
26.333333333333332, 6.1707554, def ejdefacacadbejjgbcfdjibeaagdcbfg(I):
  objs = objects(I, T, F, T)
  color_counts = {}
  for obj in objs:
    c = color(obj)
    color_counts[c] = color_counts.get(c, 0) + 1
  new_objs = []
  for obj in objs:
    c = color(obj)
    new_objs.append(recolor(color_counts[c], obj))
  return paint(I, merge(new_objs))
 
13.333333333333334, 2.3165667, def faaiacgcacfgeaacajhjdbhahjbadceh(I):
  objs = objects(I, F, F, T)
  largest = argmax(objs, size)
  smallest = argmin(objs, size)
  O = paint(I, recolor(1, largest)) # Paint the largest object first
  for obj in objs:
    if obj != largest and obj != smallest:
      O = paint(O, recolor(2 if hmatching(obj, smallest) else 1, obj)) # Check for row overlap
  return paint(O, recolor(2, smallest)) # Paint the smallest object last
 
20.0, 3.2391458, def aeijebeddddiebadbafbdadfbfddcbfa(I):
    objs = objects(I, F, F, T)
    largest = argmax(objs, size)
    smallest = argmin(objs, size)
    frontier = uppermost(smallest) if smallest else -1
    return paint(
        paint(
            paint(I, recolor(1, largest)),  # Paint largest with 1
            recolor(2, smallest)  # Paint smallest with 2
        ), 
        merge( # Merge and paint remaining objects
            frozenset(
                recolor(2, obj) if uppermost(obj) >= frontier else recolor(1, obj)
                for obj in objs if obj != largest and obj != smallest
            )
        )
    ) 
 
24.0, 3.601017, def dfijibjifefcejeaacefjbddfdgdecge(I):
    objs = objects(I, F, F, T)
    largest = argmax(objs, size)
    smallest = argmin(objs, size)
    frontier = lambda obj: uppermost(obj) >= uppermost(smallest) if smallest else lambda obj: False
    return paint(
        paint(I, recolor(1, largest)),
        recolor(2, merge(frozenset({obj for obj in objs if obj != largest and frontier(obj)}).union({smallest})))
    )
 
12.0, 5.0993967, def aecfdidifaeceecbaicijdhhdebbjeca(I):
  objs = objects(I, T, F, T) # Extract objects from the grid
  color_counts = {c: colorcount(I, c) for c in palette(I)} # Count occurrences of each color
  sorted_colors = sorted(color_counts, key=color_counts.get) # Sort colors by frequency
  color_mapping = {c: i + 1 for i, c in enumerate(sorted_colors)} # Assign labels based on frequency rank
  relabeled_objs = [recolor(color_mapping[color(obj)], obj) for obj in objs] # Relabel objects
  return paint(I, merge(relabeled_objs)) # Paint the grid with relabeled objects
 
55.0, 16.334206, def deegcijbaiadedhajgcgcbeefdcdjbjf(I):
    O = canvas(ZERO, shape(I))
    for i in range(height(I)):
        for j in range(width(I)):
            if bordering(initset(astuple(i, j)), I):
                O = paint(O, recolor(ONE, {(I[i][j], (i, j))}))
            elif any(size(obj) > 1 for obj in objects(crop(I, (i, j), (1, 1)), T, F, T)):
                O = paint(O, recolor(TWO, {(I[i][j], (i, j))}))
            else:
                O = paint(O, recolor(I[i][j], {(I[i][j], (i, j))}))
    return O
 
16.666666666666668, 4.427117, def aidcdcbafbchediaaacbibiebeccbcbd(I):
  objs = objects(I, F, F, T)
  largest = argmax(objs, size)
  smallest = argmin(objs, size)
  O = paint(I, recolor(1, largest))
  for obj in objs:
    if obj != largest:
      O = paint(O, recolor(2 if manhattan(obj, smallest) <= height(smallest) else 1, obj))
  return O
 
14.333333333333334, 2.3960233, def gddeeabijacjebaaieaceicabeacidej(I):
  O = I
  for obj in objects(I, T, F, T):
    if uppermost(obj) == 0 or leftmost(obj) == 0:
      O = paint(O, recolor(1, obj))
    elif size(obj) > 2:
      O = paint(O, recolor(2, obj))
  return O
 
24.0, 3.3358455, def bafebbjfcjbdedeajgebechfdchccbha(I):
  objs = objects(I, T, F, T) # Identify objects
  def color_frequency(obj):
    return colorcount(I, color(obj)) 
  relabeled_objs = [recolor(i + 1, obj) for i, obj in enumerate(sorted(objs, key=color_frequency, reverse=True))] # Relabel objects based on frequency
  return paint(I, merge(relabeled_objs)) # Paint the grid with relabeled objects
 
26.333333333333332, 73.978134, def bdigcbbheiddeaeebhfbcbcdehecfabc(I):
  border_grid = paint(canvas(ZERO, shape(I)), recolor(ONE, mfilter(objects(I, T, F, T), lambda obj: bordering(obj, I))))
  large_grid = paint(canvas(ZERO, shape(I)), recolor(TWO, mfilter(objects(I, T, F, T), lambda obj: size(obj) > 1)))
  return cellwise(border_grid, large_grid, ZERO) 
 
11.0, 2.4992247, def edccdgeedhbcefcdaebccdbcajeefjfd(I):
  O = canvas(ZERO, shape(I))
  O = underpaint(O, recolor(ONE, mfilter(objects(I, T, F, T), lambda obj: bordering(obj, I))))
  O = underpaint(O, recolor(TWO, mfilter(objects(I, T, F, T), lambda obj: size(obj) > 1)))
  return O
 
26.333333333333332, 59.79168, def ichdcaedeacaehjgafccdjcaabijaajc(I):
  objs = objects(I, T, T, T)
  smallest = argmin(objs, size)
  smallest_center = center(smallest)
  return paint(canvas(mostcolor(I), shape(I)),
              merge([recolor(1, smallest)] + 
                    [recolor(2, obj) for obj in objs if ulcorner(obj)[0] < smallest_center[0] or ulcorner(obj)[1] < smallest_center[1]] + 
                    [recolor(int(not (ulcorner(obj)[0] < smallest_center[0] or ulcorner(obj)[1] < smallest_center[1])), obj) for obj in objs - {smallest}])) 
 
13.333333333333334, 4.025467, def bjghijfhcafeeiejacafeibagafbacfh(I):
  objs = objects(I, T, T, T)
  smallest = argmin(objs, size)
  return paint(paint(canvas(mostcolor(I), shape(I)), 
                    recolor(2, merge([obj for obj in objs if position(obj, smallest) == (-1, -1) or position(obj, smallest) == (-1, 0) or position(obj, smallest) == (0, -1)]))), 
              recolor(1, merge([smallest] + [obj for obj in objs if not (position(obj, smallest) == (-1, -1) or position(obj, smallest) == (-1, 0) or position(obj, smallest) == (0, -1))])))
 
11.0, 4.2973, def dhgeejdcbddaegbdbhebgebeehgjffhh(I):
  objs = objects(I, T, T, T)
  smallest = argmin(objs, size)
  return paint(canvas(mostcolor(I), shape(I)), 
              merge([recolor(1, smallest)] + 
                    [recolor(2, obj) for obj in objs if any(x < 0 for x in position(obj, smallest))] +
                    [recolor(1, obj) for obj in objs if all(x >= 0 for x in position(obj, smallest)) and obj != smallest]))
 
11.333333333333334, 7.6715283, def fcdjbehcehcfechbichdebgedaeddgbh(I):
  objs = objects(I, T, T, T)
  smallest = argmin(objs, size)
  return paint(paint(canvas(mostcolor(I), shape(I)),
              recolor(1, smallest)),
              recolor(2, merge([obj for obj in objs if obj != smallest and (uppermost(obj) < uppermost(smallest) or leftmost(obj) < leftmost(smallest))])))
 
20.0, 3.4633539, def dbdhjjjcecdheeciahhecjidcdfhddeb(I):
  objs = objects(I, F, F, T)
  largest = argmax(objs, size)
  smallest = argmin(objs, size)
  frontier = uppermost(smallest) if smallest else -1
  return paint(
    paint(I, recolor(1, largest)),
    recolor(2, mfilter(objs, lambda obj: obj != largest and obj != smallest and any(i >= frontier for i, j in toindices(obj))))
  )
 
16.0, 4.501881, def dbjjeijeacbfegeeicefbdjccfbeeagd(I):
  objs = objects(I, F, F, T)
  largest = argmax(objs, size)
  smallest = argmin(objs, size)
  frontier = centerofmass(smallest)[0] if smallest else -1
  return paint(
    paint(I, recolor(1, largest)),
    recolor(2, mfilter(objs, lambda obj: obj != largest and obj != smallest and centerofmass(obj)[0] <= frontier))
  )
 
24.0, 6.132563, def ddbeafiadbbcehcbiffigfhjbhejcadc(I):
  objs = objects(I, F, F, T)
  largest = argmax(objs, size)
  smallest = argmin(objs, size)
  return paint(
    paint(I, recolor(1, largest)),
    recolor(2, mfilter(objs, lambda obj: obj != largest and obj != smallest and  any((i, j) == ulcorner(smallest) for i, j in toindices(obj))))
  ) 
 
15.333333333333334, 2.3977218, def hjfaidbabeadefccajachehdbaddgfac(I):
  objs = sorted(objects(I, F, F, T), key=size)
  O = paint(I, recolor(1, objs[-1]))
  for obj in objs[:-1]:
    O = paint(O, recolor(2 if hmatching(obj, objs[0]) else 1, obj))
  return paint(O, recolor(2, objs[0]))
 
17.666666666666668, 2.8795524, def dbdbaiaahbdiegdcjdceeadibbfbdihc(I):
  objs = objects(I, F, F, T)
  s = size
  O = paint(I, recolor(1, extract(objs, lambda obj: s(obj) == maximum(apply(s, objs)))))
  for obj in objs:
    if s(obj) != maximum(apply(s, objs)) and s(obj) != minimum(apply(s, objs)):
      O = paint(O, recolor(2 if hmatching(obj, extract(objs, lambda obj: s(obj) == minimum(apply(s, objs)))) else 1, obj))
  return paint(O, recolor(2, extract(objs, lambda obj: s(obj) == minimum(apply(s, objs)))))
 
20.0, 3.582761, def ffeajddaedbgedadjjcabeejdaagghhd(I):
  objs = objects(I, F, F, T)
  smallest = argmin(objs, size)
  return paint(
      paint(I, recolor(1, argmax(objs, size))),
      recolor(2, merge(sfilter(objs, lambda obj: hmatching(obj, smallest)) | {smallest}))
  )
 
13.333333333333334, 2.6120768, def jjdcabcdbcafejeeifjicijcfhciddac(I):
  def recolor_helper(obj, smallest):
    return recolor(2 if hmatching(obj, smallest) else 1, obj)
  
  objs = objects(I, F, F, T)
  smallest = argmin(objs, size)
  return paint(
      paint(I, recolor(1, argmax(objs, size))),
      recolor(2, smallest)
  ) if len(objs) == 2 else paint(
      paint(I, recolor(1, argmax(objs, size))),
      merge(apply(rbind(recolor_helper, smallest), difference(objs, {argmax(objs, size), smallest})))
  )
 
26.333333333333332, 8.516148, def cefadchbbajjejbbjgbfhheegbdebfaf(I):
  O = paint(canvas(ZERO, shape(I)),  # Initialize output grid
            mfilter(objects(I, T, F, T),  # Get objects
                    lambda obj: recolor(color(obj), obj) if bordering(obj, I) # Retain color if bordering
                    else recolor(min( # Recolor based on size order otherwise
                                   {i + 1 for i, s in enumerate(sorted({size(o) for o in objects(I, T, F, T) if not bordering(o, I)})) # Get unique non-bordering object sizes
                                    if size(obj) == s}, # Find matching size
                                   default=color(obj)), # Default to original color if no match
                               obj))) 
  return O
 
21.333333333333332, 3.4475873, def daecdaaebbfcebaiieeghcjfdagejjfa(I):
  O = I
  for i, obj in enumerate(sorted(objects(I, T, F, T), key=size)):
    if not bordering(obj, I):
      O = paint(cover(O, obj), recolor(i + 1, obj))
  return O 
 
10.333333333333334, 2.6454494, def bhddcbcecdcgebajicbhcafdjgagdhah(I):
  objs = objects(I, T, F, T)  # Extract all objects
  max_size = valmax(objs, size)  # Find the size of the largest object
  largest_seen = F 
  O = I
  for obj in objs:
    if size(obj) == max_size: # If the object is the largest
      if not largest_seen:  # If this is the first largest object encountered
        O = paint(O, recolor(TWO, obj)) # Color it '2'
        largest_seen = T  # Mark that we have seen the first largest object
      else:
        O = paint(O, recolor(ONE, obj)) # Color subsequent largest objects as '1'
    else:
      O = paint(O, recolor(ONE, obj)) # Color all smaller objects as '1'
  return O
 
8.666666666666666, 1.8902918, def hfibcefihdgeejiiahcjhgidecajific(I):
  objs = objects(I, T, F, T)
  sizes = apply(size, objs) # Get a list of object sizes
  max_size = maximum(sizes) # Find the maximum size
  O = I
  for obj in objs:
    O = paint(O, recolor(TWO if size(obj) == max_size else ONE, obj)) # Conditional recoloring
  return O
 
13.333333333333334, 4.025467, def cdccajadghfheifebjaddfhgfafbdfjd(I):
  objs = objects(I, T, T, T)
  smallest = argmin(objs, size)
  O = I
  for obj in objs:
    if obj != smallest:
      rel_pos = position(obj, smallest)
      new_color = 1 if (rel_pos[0] > 0 or rel_pos[1] > 0) else 2
      O = paint(O, recolor(new_color, obj))
  return paint(O, recolor(1, smallest))
 
15.333333333333334, 4.016065, def ibedageidfebeabbidbcabcafadefcha(I):
    objs = objects(I, T, T, T)
    smallest = argmin(objs, size)
    up_left = lambda obj: position(obj, smallest)[0] < 0 and position(obj, smallest)[1] < 0
    down_right = lambda obj: position(obj, smallest)[0] > 0 or position(obj, smallest)[1] > 0
    return paint(
        paint(I, recolor(2, merge(sfilter(objs, up_left)))),
        recolor(1, merge([smallest] + list(sfilter(objs, down_right))))
    )
 
15.0, 4.451933, def hccadeaafcidedjijidehfdifaeebhgb(I):
  objs = objects(I, T, T, T) 
  min_obj = argmin(objs, size)
  O = paint(I, recolor(2, min_obj))
  for obj in objs:
    if obj != min_obj:
      O = paint(O, recolor(1, obj))
  return O
 
24.333333333333332, 4.448949, def dbccjaeebfabeafebecffdcdgbceiadg(I):
  recolored_grid = canvas(ZERO, shape(I))
  for i, obj in enumerate(sorted(objects(I, T, F, T), key=lambda obj: (-size(obj), bordering(obj, I)))):
    new_color = i + 1 if not bordering(obj, I) else index(I, first(toindices(obj)))
    recolored_grid = paint(recolored_grid, recolor(new_color, obj))
  return recolored_grid
 
16.666666666666668, 3.9465036, def jedaaffbjhbgefibjceifjdeifafahcd(I):
  objs = objects(I, T, F, T)
  max_size = size(argmax(objs, size))
  O = I
  for obj in objs:
    O = paint(O, recolor(branch(size(obj) == max_size, color(obj), ONE), obj))
  return O
 
13.666666666666666, 3.5330045, def gjcjdfgeeeiaeffaiejheaachdfacach(I):
  objs = objects(I, T, T, T)
  small_obj = argmin(objs, lambda obj: len(obj))
  O = I
  for obj in objs:
    if obj != small_obj:
      i, j = position(obj, small_obj)
      new_color = 2 if i < 0 else 1
      O = paint(O, recolor(new_color, obj))
  return paint(O, recolor(1, small_obj)) 
 
15.0, 3.4710398, def caaacfaefjadefajjcdeadbegadfdccg(I):
  objs = objects(I, T, T, T)
  ref_obj = min(objs, key=lambda obj: ulcorner(obj)[0] + ulcorner(obj)[1])
  O = I
  for obj in objs:
    if obj != ref_obj:
      i, j = position(obj, ref_obj)
      new_color = 2 if i < 0 else 1
      O = paint(O, recolor(new_color, obj))
  return paint(O, recolor(1, ref_obj))
 
11.333333333333334, 5.3820915, def abddgbecdffiehhbbdfagahcecbdbbaf(I):
  objs = objects(I, T, T, T)
  O = paint(I, recolor(2, merge(objs)))  # Initially color all objects as '2'
  ref_obj = min(objs, key=lambda obj: len(obj))  # Smallest object
  return paint(O, recolor(1, ref_obj))  # Recolor the smallest object to '1'
 
13.666666666666666, 5.0295973, def dcbcgdbabhececadbgbcejfddcjbeeia(I):
  objs = objects(I, T, T, T)
  O = I
  ref_obj = min(objs, key=lambda obj: centerofmass(obj)[0])  # Topmost object by center of mass
  for obj in objs:
    if obj != ref_obj:
      i, j = position(obj, ref_obj)
      new_color = 2 if i > 0 else 1  # Assign '2' if below the reference
      O = paint(O, recolor(new_color, obj))
  return paint(O, recolor(1, ref_obj))
 
14.333333333333334, 3.6853528, def hdfhbechdihfeeifbbegcgigfejejeie(I):
  objs = objects(I, T, T, T)
  O = I
  ref_obj = max(objs, key=lambda obj: len(obj))  # Largest object as reference
  for obj in objs:
    if obj != ref_obj:
      i, j = position(obj, ref_obj)
      new_color = 2 if i < 0 or j > 0 else 1  # '2' if above OR right of the reference
      O = paint(O, recolor(new_color, obj))
  return paint(O, recolor(1, ref_obj))
 
10.666666666666666, 3.4688547, def jcdfchcaicjgedbcjjjjiiahbiegccdc(I):
  objs = objects(I, F, F, T)
  largest = argmax(objs, size)
  smallest = argmin(objs, size)

  def recolor_helper(obj):
    return recolor(1 if manhattan(obj, smallest) <= width(smallest) else 2, obj)

  return paint(
      paint(I, recolor(1, largest)),
      merge(apply(recolor_helper, difference(objs, {largest})))
  ) 
 
9.0, 3.0510423, def ieehchbghifaegbhiehbgbaahehibfdf(I):
  objs = objects(I, F, F, T)
  largest = argmax(objs, size)
  smallest = argmin(objs, size)

  def recolor_helper(obj):
    return recolor(1 if vmatching(obj, smallest) else 2, obj)

  return paint(
      paint(I, recolor(1, largest)),
      merge(apply(recolor_helper, difference(objs, {largest})))
  )
 
14.666666666666666, 2.5676053, def bgaabffgeejeeaegjcbeedbeadedfdaj(I):
  objs = objects(I, F, F, T)
  largest = argmax(objs, size)
  smallest = argmin(objs, size)

  def recolor_helper(obj):
    return recolor(1 if any(i == uppermost(smallest) for i, _ in toindices(obj)) else 2, obj)

  return paint(
      paint(I, recolor(1, largest)),
      merge(apply(recolor_helper, difference(objs, {largest})))
  )
 
10.333333333333334, 2.3968983, def cbcjbjafdhcgejdbjhchfafegbeddefd(I):
  objs = objects(I, F, F, T)
  largest = argmax(objs, size)
  smallest = argmin(objs, size)

  def recolor_helper(obj):
    return recolor(2 if position(obj, smallest)[0] == 1 else 1, obj)
  
  return paint(
      paint(I, recolor(1, largest)),
      merge(apply(recolor_helper, difference(objs, {largest})))
  )
 
24.333333333333332, 3.1823545, def igfcdaacececececaecbeeeecbahbidj(I):
  O = canvas(ZERO, shape(I))
  for i, obj in enumerate(sorted(objects(I, T, F, T), key=lambda obj: (bordering(obj, I), -size(obj)))):
    O = underpaint(O, recolor(i + 1 if not bordering(obj, I) else color(obj), obj))
  return O
 
16.0, 3.7829373, def bhcabdicecbcebgficbbgfabicjhffcj(I):
  objs = objects(I, T, F, T)
  max_size = valmax(objs, size)
  O = I
  for obj in objs:
    if size(obj) != max_size:
      center_j = centerofmass(obj)[1]
      recolor_val = ONE if center_j < len(I[0]) // 2 else TWO
      O = paint(O, recolor(recolor_val, obj))
    else:
      O = paint(O, obj)
  return O
 
26.333333333333332, 3.474814, def ggbdecdbedbfebfaaebdfffggeagffbd(I):
  bg = mostcolor(I)
  objs = objects(I, T, F, T)
  return paint(canvas(bg, shape(I)), 
               merge(sorted([recolor(i + 1 if not bordering(obj, I) else color(obj), obj) for i, obj in enumerate(objs)], key=lambda obj: (not bordering(obj, I), -size(obj)))))
 
20.0, 3.2391458, def cjcffcchbfdheiagaaibchdbbafabcfh(I):
  objs = objects(I, F, F, T)
  largest = argmax(objs, size)
  smallest = argmin(objs, size)
  return paint(
      paint(I, recolor(1, largest)), 
      merge(apply(lambda obj: recolor(1 if uppermost(obj) < uppermost(smallest) else 2, obj), difference(objs, {largest})))
  )
 
15.666666666666666, 4.395335, def cbicbjdijfjjedbgbcebbaccbaibgegi(I):
  objs = objects(I, F, F, T)
  largest = argmax(objs, size)
  smallest = argmin(objs, size)
  return paint(
      I, 
      merge([recolor(1, largest)] + [recolor(2 if centerofmass(obj)[0] > centerofmass(smallest)[0] else 1, obj) for obj in difference(objs, {largest})])
  )
 
12.333333333333334, 3.5964448, def iichddafbeebeadbjbbjcageibeibajb(I):
  objs = objects(I, F, F, T)
  largest = argmax(objs, size)
  smallest = argmin(objs, size)
  def recolor_helper(obj):
    if obj == largest: return recolor(1, obj)
    if obj == smallest: return recolor(2, obj)
    return recolor(1 if position(obj, smallest)[0] < 0 else 2, obj)
  return paint(I, merge(apply(recolor_helper, objs)))
 
12.666666666666666, 4.188344, def bdfgbdfcfhgaejjejdfgcjfigihdgeed(I):
  objs = objects(I, T, T, T)
  largest = max(objs, key=size)
  def recolor_func(obj):
    i, j = position(obj, largest)
    return 2 if i < 0 or j > 0 else 1
  return paint(I, merge(frozenset({recolor(recolor_func(obj), obj) for obj in objs if obj != largest})) | recolor(2, largest))
 
8.0, 2.7821462, def ajgebafheaehedchidgdebgbffhfbjge(I):
  objs = objects(I, F, F, T)
  largest = argmax(objs, size)
  smallest = argmin(objs, size)
  return paint(
      paint(I, recolor(1, largest)),
      merge(apply(lambda obj: recolor(2 if uppermost(obj) < uppermost(smallest) else 1, obj), difference(objs, {largest})))
  )
 
24.333333333333332, 4.3868756, def dagideifjjbgefhaadbfaaiibbcjbbaa(I):
    objs = objects(I, T, F, T)
    recolored_objs = []
    for i, obj in enumerate(sorted(objs, key=size, reverse=True)):
        recolored_objs.append(recolor(i + 1, obj) if not bordering(obj, I) else obj)
    return paint(canvas(ZERO, shape(I)), merge(recolored_objs))
 
10.0, 3.126545, def dedeefbeeabjehediifcgehdjihjfeac(I):
  objs = objects(I, T, F, T)
  left_objs = sfilter(objs, lambda obj: rightmost(obj) < len(I[0]) // 2) # Filter objects on the left
  right_objs = objs - left_objs # Objects on the right are the remaining ones
  return paint(paint(I, recolor(ONE, merge(left_objs))), recolor(TWO, merge(right_objs)))
 
8.666666666666666, 3.7278376, def cdiijceafibjedebjchcjcjaahhddafb(I):
  mid = len(I[0]) // 2
  return tuple(
    tuple(
      1 if j < mid and v != 0 else 2 if j >= mid and v != 0 else 0 
      for j, v in enumerate(row)
    )
    for row in I
  )
 
14.0, 2.8529966, def djccajihhjgheedficgdbechbddeajdf(I):
  objs = objects(I, T, T, T)
  largest = max(objs, key=size)
  return paint(
    I,
    merge(
      frozenset(
        recolor(1 if (uppermost(obj) < uppermost(largest)) or (rightmost(obj) > rightmost(largest)) else 2, obj) 
        for obj in objs if obj != largest
      ) | {recolor(2, largest)}
    )
  )
 
12.0, 3.0288844, def aiaadgfdeiafegfaidabgeeaidaicaii(I):
  objs = objects(I, T, T, T)
  largest = max(objs, key=size)
  return paint(
      I,
      merge(
          frozenset(
            recolor(
              2,
              obj,
            )
            if obj == largest
            else recolor(
                1 
                if any(
                  (i < uppermost(largest) and j >= leftmost(largest) and j <= rightmost(largest)) or 
                  (j > rightmost(largest) and i >= uppermost(largest) and i <= lowermost(largest)) 
                  for i, j in toindices(obj)
                ) 
                else 2, 
                obj
              )
            for obj in objs
          )
      )
  )
 
19.333333333333332, 3.2517385, def afefdfdhhcifedefjaebfhbfcfcfcacf(I):
  objs = objects(I, T, T, T)
  largest = max(objs, key=size)
  def condition(obj):
    for i, j in toindices(obj):
      for x, y in toindices(largest):
        if (i < x and j >= y) or (i >= x and j < y):
          return 2
    return 1
  return paint(I, merge({recolor(condition(obj), obj) for obj in objs}))
 
12.666666666666666, 3.499084, def baeficcecideejedaaediabjecdcdbda(I):
  objs = objects(I, T, T, T)
  largest = max(objs, key=size)
  def get_quadrant(obj):
    cx, cy = centerofmass(largest)
    ox, oy = centerofmass(obj)
    if ox <= cx and oy > cy:
      return 1
    elif ox > cx and oy >= cy:
      return 1
    else:
      return 2
  return paint(I, merge({recolor(get_quadrant(obj) if obj != largest else 2, obj) for obj in objs})) 
 
100.0, 5.822548, def hdahehicaabdehhaifaadeadifacicdb(I):
  objs = objects(I, T, T, T)
  min_size = minimum(apply(size, objs))
  min_obj = extract(objs, lambda obj: size(obj) == min_size)
  return paint(replace(I, mostcolor(I), 1), recolor(2, min_obj))
 
15.666666666666666, 4.1447964, def eecdeedecaieecaiaacaifcacbfhfaac(I):
  objs = objects(I, F, F, T)
  largest = argmax(objs, size)
  smallest = argmin(objs, size)
  def recolor_func(obj):
    return recolor(1 if any(j > rightmost(smallest) for i, j in toindices(obj)) else 2, obj)
  return paint(paint(I, recolor(2, largest)), merge(apply(recolor_func, difference(objs, {largest}))))
 
9.333333333333334, 2.8517442, def efjcacigcfcjeciabieijgcdbefajdbf(I):
  objs = objects(I, T, F, T)
  midpoint = width(I) // 2
  return paint(I, 
               merge(apply(lambda obj: branch(any(j < midpoint for i, j in toindices(obj)),
                                              recolor(ONE, obj),
                                              recolor(TWO, obj)),
                          objs)))
 
11.333333333333334, 4.419142, def fbdeabbchgchecbjadjfccaacgafcabe(I):
  objs = objects(I, T, T, T)
  largest = max(objs, key=size)
  cx = centerofmass(largest)[1] 
  return paint(
    I,
    merge(
      {recolor(2 if centerofmass(obj)[1] > cx else 1, obj) for obj in objs if obj != largest} | 
      {recolor(2, largest)}
    )
  )
 
9.0, 3.2345212, def edfbdbbhfcafeegaiacifaicfibhjdej(I):
  objs = objects(I, T, T, T)
  largest = max(objs, key=size)
  ref_j = leftmost(largest) if width(largest) > height(largest) else rightmost(largest)
  return paint(
    I,
    merge(
      {recolor(2 if (leftmost(obj) > ref_j and width(largest) > height(largest)) or (rightmost(obj) < ref_j and width(largest) <= height(largest))  else 1, obj) for obj in objs if obj != largest} |
      {recolor(2, largest)}
    )
  )
 
12.0, 5.1060367, def ihabbfffadbcehfabbafifcajddgiefa(I):
  objs = objects(I, T, T, T)
  largest = max(objs, key=size)
  return paint(I, merge({recolor(1 if any(j < centerofmass(largest)[1] for _, (i, j) in obj) else 2, obj) for obj in objs if obj != largest} | {recolor(2, largest)}))
 
20.0, 3.3780603, def bdbjaadedbcaehijibacbaeffgdcbbad(I):
  bordering_objs = mfilter(objects(I, T, F, T), lambda obj: bordering(obj, I))
  non_bordering_objs = sorted(difference(objects(I, T, F, T), bordering_objs), key=size, reverse=True)
  recolored_grid = paint(canvas(ZERO, shape(I)), bordering_objs)
  for i, obj in enumerate(non_bordering_objs):
    recolored_grid = paint(recolored_grid, recolor(i + 1, obj))
  return recolored_grid
 
26.333333333333332, 73.978134, def jffiaidicdffeafgibhgjecdfdadfcgc(I):
  midpoint = width(I) // 2
  left_mask = canvas(ONE, (height(I), midpoint))
  right_mask = canvas(TWO, (height(I), width(I) - midpoint))
  mask = hconcat(left_mask, right_mask)
  return cellwise(mask, I, 0) 
 
12.666666666666666, 4.950131, def aedaaiaicdedecciacffbedeffeeffef(I):
  objs = objects(I, T, T, T)
  small_obj = argmin(objs, lambda obj: len(obj))
  O = I
  for obj in objs:
    if obj != small_obj:
      i, j = position(obj, small_obj)
      new_color = 1 if i < 0 else 2
      O = paint(O, recolor(new_color, obj))
  return paint(O, recolor(2, small_obj))
 
18.0, 3.65279, def daihfcabbhcceficabfffceaaceijiec(I):
  objs = objects(I, T, T, T)
  smallest_obj = min(objs, key=lambda x: len(x))
  def recolor_func(obj):
    if obj == smallest_obj:
      return recolor(2, obj)
    return recolor(1 if ulcorner(obj)[0] < ulcorner(smallest_obj)[0] else 2, obj)
  return paint(I, merge(apply(recolor_func, objs))) 
 
26.333333333333332, 3.5752022, def baaibbbffcdeebdajiibfefeecijhici(I):
  def recolor_object(obj, i):
    return recolor(i + 1, obj) if not bordering(obj, I) else obj
  return paint(canvas(ZERO, shape(I)),
                merge(
                  papply(recolor_object,
                          sorted(objects(I, T, F, T), key=size),
                           interval(1, size(objects(I, T, F, T)) + 1, 1))))
 
7.333333333333333, 2.6540399, def fcedfbcfacicedfjabadfcdedahchcad(I):
  objs = objects(I, T, F, T)
  midpoint = width(I) // 2
  left_objs = frozenset(sfilter(objs, lambda obj: centerofmass(obj)[1] < midpoint)) 
  right_objs = objs - left_objs
  return paint(paint(I, recolor(ONE, merge(left_objs))), recolor(TWO, merge(right_objs))) 
 
12.333333333333334, 3.0100605, def jeedajgiabfceidebefabhieaeeidibi(I):
  objs = objects(I, T, T, T)
  smallest_index = min(enumerate(objs), key = lambda x: size(x[1]))[0]
  return paint(
    I,
    merge(
      [
        recolor(1 if i < smallest_index else 2, obj) if i != smallest_index else recolor(2, obj) 
        for i, obj in enumerate(objs)
      ]
    )
  ) 
 
88.66666666666667, 58.643364, def ajeccbfajeheeedabiaagjgddcjchdba(I):
  objs = objects(I, T, T, T) # Extract all objects
  min_obj = argmin(objs, size) # Find the smallest object
  return paint(paint(I, recolor(1, asindices(I))), recolor(2, min_obj)) # Recolor and paint
 
21.333333333333332, 3.2419486, def bieaacjddeeaedigjdbbjdfcdijejdjb(I):
    objs = objects(I, T, F, T)
    bordering_objs = sfilter(objs, lambda obj: bordering(obj, I))
    non_bordering_objs = difference(objs, bordering_objs)
    recolored_objs = [recolor(i + 1, obj) for i, obj in enumerate(sorted(non_bordering_objs, key=size))]
    return paint(canvas(ZERO, shape(I)), merge((*recolored_objs, *bordering_objs)))
 
17.666666666666668, 4.6411657, def heeccehabfgjeiabaajbeaajjacbcfch(I):
  objs = objects(I, T, F, T)  # Extract connected components as objects
  midpoint = width(I) // 2     # Calculate the midpoint of the grid
  new_objs = frozenset()
  for obj in objs:
    left_part = intersection(toindices(obj), asindices(lefthalf(I)))
    right_part = intersection(toindices(obj), asindices(righthalf(I)))
    if left_part: 
      new_objs = insert(recolor(ONE, toobject(left_part, I)), new_objs)
    if right_part:
      new_objs = insert(recolor(TWO, toobject(right_part, I)), new_objs)
  return paint(I, merge(new_objs))
 
20.0, 3.2391458, def bjjadceafedaeaeaajjbcdeefaeahjja(I):
  objs = objects(I, T, T, T)
  smallest = min(objs, key=size)
  largest = max(objs, key=size)
  return paint(
    I,
    merge(frozenset(
      recolor(1 if obj == largest or uppermost(obj) < uppermost(smallest) else 2, obj) 
      for obj in objs 
    ))
  )
 
14.333333333333334, 7.11588, def hadacjdccffbejccjfajcgbaacedcfcg(I):
  objs = objects(I, T, T, T)
  s = min(objs, key=lambda obj: (uppermost(obj), len(obj)))
  return paint(
    I,
    merge(
      frozenset(
        recolor(2 if obj == s or uppermost(obj) >= uppermost(s) else 1, obj)
        for obj in objs
      )
    )
  )
 
9.666666666666666, 3.88592, def ffjajbfbbaddeeicbcefefdfaehgbfae(I):
  objs = objects(I, F, F, T)
  largest = argmax(objs, size)
  smallest = argmin(objs, size)
  
  def recolor_helper(obj):
    return recolor(2 if uppermost(largest) > lowermost(obj) else 1, obj)
  
  return paint(
      paint(I, recolor(2, largest)),
      merge(apply(recolor_helper, difference(objs, {largest})))
  )
 
11.333333333333334, 4.2668357, def jheffadeffdeeabdidcbgdiddieaeeic(I):
  objs = objects(I, F, F, T)
  largest = argmax(objs, size)
  O = paint(I, recolor(2, largest))
  for obj in objs:
    if obj != largest:
      if any(i < uppermost(largest) for i, j in toindices(obj)):
        O = paint(O, recolor(2, obj))
      else:
        O = paint(O, recolor(1, obj))
  return O
 
14.333333333333334, 2.681026, def accdidfecbdhehiiaadfeacddfhgaegd(I):
  objs = objects(I, T, T, T)
  rightmost_obj = extract(objs, matcher(rightmost, valmax(objs, compose(rightmost, toindices))))
  return paint(cover(I, rightmost_obj), recolor(2, rightmost_obj))
 
22.0, 2.5940604, def eecfegbegjfaeacfjedcddeeaaeebfic(I):
  objs = objects(I, F, F, T)
  smallest = argmin(objs, size)
  largest = argmax(objs, size)
  return paint(
      I,
      recolor(2, merge(sfilter(objs, lambda obj: vmatching(obj, smallest)) | {smallest}))
  )
 
24.0, 2.6605284, def ddbfifceidbeecefbbjfgdhaecaijgee(I):
  objs = objects(I, F, F, T)
  target_objs = mfilter(objs, lambda obj:  any(j == leftmost(argmin(objs, size)) for i,j in toindices(obj)))
  return paint(I, recolor(2, target_objs))
 
14.666666666666666, 3.1465948, def dddibjgbbedfebdiadacfhdjffabcbjf(I):
  objs = objects(I, F, F, T)
  largest = argmax(objs, size)
  smallest = argmin(objs, size)
  # Paint the smallest object at the largest's location
  O = paint(I, recolor(color(smallest), toindices(largest)))
  # Paint the largest object at the smallest's location
  return paint(O, recolor(color(largest), toindices(smallest))) 
 
19.0, 3.2639425, def gcbacacceideecdaiicdbagicjaceebj(I):
    # Objects that touch the border
    border_objs = sfilter(objects(I, T, F, T), lambda obj: bordering(obj, I))
    # Objects that don't touch the border
    non_border_objs = difference(objects(I, T, F, T), border_objs)
    # Sort the non-border objects by size
    sorted_objs = sorted(non_border_objs, key=size)
    # Recolor based on size, starting from 2, excluding the largest object
    recolored_objs = [recolor(i + 2, obj) for i, obj in enumerate(sorted_objs[:-1])]
    # Combine the recolored objects, the largest object, and the border objects
    return paint(paint(canvas(ZERO, shape(I)), merge(recolored_objs)), merge((*sorted_objs[-1:], *border_objs))) 
 
14.0, 2.5809393, def fjjcgfdddfdjebhdjacafjcdjbahadef(I):
  objs = objects(I, F, F, T) # Extract objects, excluding background
  sizes = apply(size, objs)  # Calculate the size of each object
  second_largest_size = order(sizes, identity)[-2] # Find the second largest size
  
  def recolor_condition(obj):
    return size(obj) == second_largest_size
  
  return paint(I, merge(apply(lambda obj: recolor(2, obj), sfilter(objs, recolor_condition)))) # Recolor the second largest object to '2'
 
13.0, 2.4256997, def idhgadbjfbieediijcdggcbadabejccg(I):
  objs = objects(I, F, F, T)
  sorted_objs = order(objs, size)
  second_largest = sorted_objs[-2]
  return paint(I, recolor(2, second_largest))
 
13.0, 1.986835, def ihchbbceiigdehgjjbceiaaiafebbcba(I):
  objs = objects(I, F, F, T)
  def find_second_largest(objs):
    largest = argmax(objs, size)
    remaining = difference(objs, {largest})
    return argmax(remaining, size)
  return paint(I, recolor(2, find_second_largest(objs)))
 
11.333333333333334, 5.3820915, def afdjffdcbghdecdjabbcgdjgaejdifbd(I):
  objs = objects(I, T, T, T)
  smallest = argmin(objs, size)
  O = I
  for obj in objs:
    if obj != smallest:
      O = paint(O, recolor(2 if ulcorner(obj)[0] <= ulcorner(smallest)[0] or ulcorner(obj)[1] <= ulcorner(smallest)[1] else 1, obj))
  return O
 
14.333333333333334, 7.11588, def abdjdacaccaeedffjbeidehdeebffabh(I):
    objs = objects(I, T, T, T)
    smallest = argmin(objs, size)
    return paint(I, recolor(2, merge(sfilter(objs, lambda obj: uppermost(obj) <= uppermost(smallest) or leftmost(obj) <= leftmost(smallest)))))
 
17.666666666666668, 2.9454935, def dcfcafifdgecebacifbjjbdfcceeedeg(I):
  objs = objects(I, F, F, T) # Identify all objects, excluding background
  smallest = argmin(objs, size) # Find the smallest object
  return paint(I, recolor(2, smallest)) # Recolor the smallest object to '2'
 
12.333333333333334, 2.3804567, def dhdcbejefbjdefgfabceaafdcfedibef(I):
  objs = fgpartition(I) # Partition the grid into objects, excluding background
  min_size = size(argmin(objs, size)) # Calculate the size of the smallest object
  return paint(I, recolor(2, merge(sizefilter(objs, min_size)))) # Recolor objects with the smallest size
 
14.0, 3.6761365, def ecfcfgfidabceafjacbbcjcffhaiidic(I):
  objs = objects(I, F, F, T)
  sorted_objs = order(objs, size)
  largest = first(sorted_objs)
  second_smallest = sorted_objs[1]
  return paint(paint(I, recolor(color(second_smallest), toindices(largest))), recolor(color(largest), toindices(second_smallest)))
 
11.333333333333334, 2.9666734, def ffcgedcfjbehebacibdficbdefbbbede(I):
  objs = objects(I, F, F, T)
  size_dict = {} 
  for obj in objs:
    s = size(obj)
    if s not in size_dict:
      size_dict[s] = []
    size_dict[s].append(obj)
  sorted_sizes = sorted(size_dict.keys())
  largest = first(size_dict[sorted_sizes[-1]])
  second_smallest = first(size_dict[sorted_sizes[1]])
  return paint(paint(I, recolor(color(second_smallest), toindices(largest))), recolor(color(largest), toindices(second_smallest)))
 
11.0, 2.4992247, def biaccgiadffaegbabdbbgaaeaeffgfce(I):
  # Directly recolor objects on the input grid
  O = I
  for obj in objects(I, T, F, T):
    if not bordering(obj, I):
      if color(obj) == 1:
        O = paint(O, recolor(2, obj)) 
      else:
        O = paint(O, recolor(color(obj), obj)) # Redundant but emphasizes logic
  return O
 
20.0, 2.9060688, def cdjbcffcajbieaccibceeidjjgjffeaf(I):
  objs = objects(I, T, T, T)  # Extract all objects from the grid
  smallest_idx = ulcorner(argmin(objs, size)) # Find the upper-left corner of the smallest object
  return paint(I, recolor(2, merge({obj for obj in objs if uppermost(obj) >= smallest_idx[0] and leftmost(obj) >= smallest_idx[1]}))) # Recolor objects
 
14.666666666666666, 9.438349, def cgicaahbjhjbeeadbjjcfbaghaabcfdb(I):
  objs = objects(I, F, F, T)
  s = size(argmin(objs, size)) 
  l = size(argmax(objs, size))
  return paint(paint(I, recolor(leastcolor(I), ofcolor(I, l))), recolor(mostcolor(I), ofcolor(I, s)))
 
20.0, 23.284283, def cbefacdjfibfechbjbfacidehaghhabj(I):
  objs = order(objects(I, F, F, T), size) # Get objects and sort by size
  O = I
  for i in range(1, len(objs) + 1):
    O = paint(O, recolor(3 - i, objs[-i])) # Recolor objects based on their rank
  return O
 
11.333333333333334, 2.383845, def iedeabbdfbbbeccdjdbdfceffgdfffag(I):
    objs = objects(I, F, F, T)
    sizes = sorted(apply(size, objs)) # Get sorted object sizes
    largest_size = sizes[-1]
    second_largest_size = sizes[-2] if len(sizes) > 1 else 0 # Handle case with only one object
    O = I
    for obj in objs:
        if size(obj) == largest_size:
            O = paint(O, recolor(2, obj))
        elif size(obj) == second_largest_size:
            O = paint(O, recolor(1, obj))
    return O
 
10.666666666666666, 2.9338443, def ddfaaccfcjeiecdfibdcjeicdajedeed(I):
  objs = objects(I, T, T, T)
  smallest_obj = argmin(objs, size)
  smallest_center = centerofmass(smallest_obj)
  def recolor_logic(obj):
    obj_center = centerofmass(obj)
    if obj_center[0] < smallest_center[0] or (obj_center[0] == smallest_center[0] and obj_center[1] < smallest_center[1]):
      return recolor(2, obj)
    else:
      return recolor(1, obj)
  O = paint(I, recolor(2, smallest_obj)) # Initialize canvas
  for obj in objs:
    if obj != smallest_obj:
      O = paint(O, recolor_logic(obj))
  return paint(O, recolor(color(smallest_obj), smallest_obj)) 
 
9.666666666666666, 4.0935225, def cabfddfeeihgedffjaibbfheejbadjie(I):
  objs = objects(I, T, T, T)
  smallest_obj = min(objs, key=size)
  def recolor_logic(obj):
    return recolor(2, obj) if ulcorner(obj)[0] < ulcorner(smallest_obj)[0] or (ulcorner(obj)[0] == ulcorner(smallest_obj)[0] and ulcorner(obj)[1] < ulcorner(smallest_obj)[1]) else recolor(1, obj)
  O = I
  for obj in objs:
    if obj != smallest_obj:
      O = paint(O, recolor_logic(obj))
  return paint(O, recolor(color(smallest_obj), smallest_obj))
 
91.33333333333333, 49.416313, def cgcehffccfidedjfijbbaedaieccjcac(I):
  objs = objects(I, F, F, T)  # Extract objects, excluding background
  min_size = size(argmin(objs, size))  # Find size of the smallest object
  return paint(
      replace(I, mostcolor(I), 1),  # Recolor non-background to 1
      recolor(2, merge(sizefilter(objs, min_size)))  # Recolor smallest objects to 2
  )
 
86.0, 40.0, def ehbafffeccaeechhjccfchhabcjaahhg(I):
    objs = fgpartition(I)  # Extract objects without background
    min_size = size(argmin(objs, lambda obj: (size(obj), -sum(j for i, j in toindices(obj)))))
    return paint(
        replace(I, mostcolor(I), 1),  # Recolor non-background to 1
        recolor(2, merge(sizefilter(objs, min_size)))  # Recolor smallest objects to 2
    )
 
12.0, 5.0993967, def bagbefdbfbhcecchjgcbdbbccgfcccca(I):
  objs = objects(I, F, F, T)
  s = size
  O = I
  for obj1 in objs:
    for obj2 in objs:
      if s(obj1) < s(obj2) and all(s(obj3) <= s(obj1) or s(obj3) >= s(obj2) for obj3 in objs):
          O = paint(O, recolor(color(obj1), toindices(obj2)))
          O = paint(O, recolor(color(obj2), toindices(obj1)))
  return O 
 
12.666666666666666, 4.950131, def ecaaaeggeaidehfdiadhceafbabhcige(I):
  objs = objects(I, T, T, T)
  smallest = argmin(objs, size)
  def recolor_func(obj):
    return recolor(2, obj) if any(i < uppermost(smallest) or (i == uppermost(smallest) and j <= leftmost(smallest)) for i, j in toindices(obj)) else obj
  return paint(
      paint(I, recolor(2, smallest)),
      merge(apply(recolor_func, objs - {smallest})))
 
14.666666666666666, 3.1465948, def dgffhedegafaeaceijchjedcdcfeeffa(I):
  objs = objects(I, F, F, T)
  max_size = size(argmax(objs, size)) # Get the size of the largest object
  return paint(I, mfilter(objs, lambda obj: recolor(2, obj) if size(obj) == max_size else initset(obj)))
 
14.666666666666666, 3.1465948, def bcfbbahjddjgecdeiceifffaefdbehea(I):
  objs = fgpartition(I)
  smallest = argmin(objs, size)
  largest = argmax(objs, size)
  return paint(
      paint(I, recolor(2, smallest)),  # Recolor smallest object to 2
      recolor(1, largest) # Recolor the largest object to 1
  )
 
17.333333333333332, 2.91217, def abecdjbcfbbceffgjaaajdccabhfaafd(I):
  objs = objects(I, F, F, T)
  def not_largest(obj):
    return obj != argmax(objs, size)
  second_largest = extract(objs, not_largest) 
  return paint(I, recolor(2, second_largest))
 
16.0, 2.5280325, def bfcfabbbdfdceabjajgaaecfidfcijih(I):
  objs = objects(I, F, F, T)
  size_list = apply(size, objs)
  second_largest_size = sorted(set(size_list), reverse=True)[1] if len(set(size_list)) > 1 else size_list[0]
  second_largest = extract(objs, matcher(size, second_largest_size))
  return paint(I, recolor(2, second_largest))
 
16.666666666666668, 2.7904506, def feaajfejciiaedgjafabjadjdbaaffdf(grid):
  objs = objects(grid, T, T, T)
  smallest_obj = min(objs, key=size)
  rightmost_obj = extract(objs, matcher(rightmost, valmax(objs, compose(rightmost, toindices))))
  return paint(paint(grid, recolor(2, smallest_obj)), recolor(2, rightmost_obj))
 
11.0, 4.030086, def ceeadhfbbjgbefebbbcacafafbadfhbf(I):
  objs = objects(I, F, F, T)
  size_objs = list(zip(apply(size, objs), objs))
  size_objs.sort(key=lambda x: x[0])
  smallest_obj = size_objs[0][1]
  second_largest_obj = size_objs[-2][1]
  return paint(paint(I, recolor(color(smallest_obj), toindices(second_largest_obj))), recolor(color(second_largest_obj), toindices(smallest_obj)))
 
14.333333333333334, 7.11588, def ffhefffdaegeeffcbcaedecajeddabeh(I):
  return paint(
      canvas(mostcolor(I), shape(I)), # Create canvas with background color
      merge(
          apply(
              lambda obj: branch(
                  color(obj) == 1, # Condition for recoloring
                  recolor(2, obj), # Recolor to 2
                  obj  # Keep original color
              ),
              objects(I, T, F, T) # Extract all objects
          )
      )
  )
 
14.0, 4.3633437, def ajbfcgcejfhcedfgifjgchfjdbbgeacc(I):
  objs_top = objects(tophalf(I), F, F, T)
  sorted_objs_top = order(objs_top, size)
  second_largest_top = sorted_objs_top[-2] if len(sorted_objs_top)>1 else sorted_objs_top[-1]
  
  objs_bottom = objects(bottomhalf(I), F, F, T)
  sorted_objs_bottom = order(objs_bottom, size)
  second_largest_bottom = sorted_objs_bottom[-2] if len(sorted_objs_bottom)>1 else sorted_objs_bottom[-1]
  
  I = paint(I, recolor(2, second_largest_top))
  return paint(I, recolor(2, second_largest_bottom))
 
15.0, 5.662377, def bafibccbabfceaahaaddafdfbccijdge(I):
  h = height(I) // 2
  for i in range(2):
    part = I[i*h:(i+1)*h]
    objs = objects(part, F, F, T)
    ssizes = sorted(set(apply(size, objs)), reverse=True)
    second_largest_size = ssizes[1] if len(ssizes) > 1 else ssizes[0]
    second_largest = extract(objs, matcher(size, second_largest_size))
    I = paint(cover(I, second_largest), recolor(2, shift(second_largest, (i*h, 0))))
  return I
 
14.333333333333334, 7.11588, def egaccfgacdcceiefidhaebcaddcihjhi(I):
  objs = fgpartition(I)
  sizes = apply(size, objs)
  largest_size = maximum(sizes)
  second_largest_size = maximum(difference(sizes, {largest_size})) 
  smallest_size = minimum(sizes)
  largest = extract(objs, lambda obj: size(obj) == largest_size)
  second_largest = extract(objs, lambda obj: size(obj) == second_largest_size) if len(objs) > 1 else largest # Handle cases with less than 2 unique size objects
  smallest = extract(objs, lambda obj: size(obj) == smallest_size) 
  I = paint(canvas(0, shape(I)), recolor(color(largest), smallest))
  I = paint(I, recolor(color(smallest), largest)) 
  return paint(I, recolor(2, second_largest)) 
 
16.0, 3.198353, def hcifchahgiaaeeheacadfecdbhcicidg(I):
  objs = objects(I, F, F, T)  # Extract objects, excluding background
  size_dict = {}
  for obj in objs:
    s = size(obj)
    if s not in size_dict:
      size_dict[s] = []
    size_dict[s].append(obj)
  sorted_sizes = sorted(size_dict.keys())
  smallest = first(size_dict[sorted_sizes[0]])
  second_largest = first(size_dict[sorted_sizes[-2]])
  return paint(paint(I, recolor(2, toindices(smallest))), recolor(color(smallest), toindices(second_largest)))
 
17.666666666666668, 2.9454935, def cbacihjhehadebffafbcbgjfafibfahe(I):
  objs = objects(I, F, F, T)
  smallest = argmin(objs, size)
  second_largest = argmax(objs - {smallest, argmax(objs, size)}, size)  
  return paint(paint(I, recolor(2, smallest)), recolor(color(smallest), second_largest))
 
16.0, 2.5574992, def dbgffcgfacajeadiaafjbaaeaejgbceh(I):
  h = height(I) // 2 
  top_half = tophalf(I)
  bottom_half = bottomhalf(I)
  top_objs = objects(top_half, F, F, T)
  bottom_objs = objects(bottom_half, F, F, T)

  def recolor_second_largest(objs):
    if len(objs) <= 1:
      return frozenset()  # Nothing to recolor if there's only one or zero objects
    sorted_objs = order(objs, size)
    return recolor(2, sorted_objs[-2])

  top_recolored = recolor_second_largest(top_objs)
  bottom_recolored = recolor_second_largest(bottom_objs)
  return paint(paint(I, top_recolored), shift(bottom_recolored, (h, 0)))
 
18.333333333333332, 2.8836627, def heaadeihfidiejcjicfeddhgcfjfdggf(grid):
  objs = objects(grid, T, T, T)
  if len(objs) == 1: return recolor(2, first(objs)) # Handle single object case
  smallest = min(objs, key=size)
  remaining = remove(smallest, objs)
  rightmost = max(remaining, key=lambda obj: centerofmass(obj)[1])
  return paint(grid, merge((recolor(2, smallest), recolor(2, rightmost))))
 
