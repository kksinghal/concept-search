0.36895833333333333, 5.580656, def cfbahhjcefibebibjcbadagdcfjejjdh(I):
    objs = objects(I, T, F, T) 
    filled = I
    for obj in objs:
        rightmost_col = rightmost(obj)
        for i in range(uppermost(obj), lowermost(obj) + 1):
            for j in range(rightmost_col + 1, len(I[0])):
                if index(I, (i, j)) == 0:
                    filled = fill(filled, 1, {(i, j)})
                else:
                    break
    return filled
 
0.3910416666666667, 9.964794, def giajfcjaadbeebdfbdfijhhcbbcfehfi(I):
    transposed = rot90(I)
    filled = rot90(I)
    for j, col in enumerate(transposed):
        for i, val in enumerate(col):
            if val != 0:
                for k in range(i+1, len(col)):
                    if index(transposed, (k, j)) == 0:
                        filled = fill(filled, 1, {(k, j)})
                    else:
                        break
    return rot270(filled) 
 
0.25958333333333333, 11.028936, def cgdjifcfjfdbeeegbeedifajgbehbeae(I):
    objs = objects(I, T, F, T)  # Identify all objects in the grid
    extended_cells = set()
    for obj in objs:
      for v, (i, j) in obj:
        extended_cells |= {(i+di, j+dj) for di, dj in [(1,1), (1,-1), (-1,1), (-1,-1)]}
    O = fill(I, 1, frozenset(extended_cells))
    return O
 
0.278125, 9.854132, def jeaachchcbfaefecafajcefddadcdhhi(I):
  O = I
  for i in range(1, height(I)-1):
    for j in range(1, width(I)-1):
      if I[i][j] != mostcolor(I):
        for di, dj in [(1,1), (1,-1), (-1,1), (-1,-1)]:
          O = fill(O, 1, frozenset({(i+di, j+dj)}))
  return O
 
0.33708333333333335, 11.553181, def edjfjcfaffbgeaeeaieffhcajfadidef(I):
  shifted_grids = (shift(asobject(I), d) for d in [(1,1), (1,-1), (-1,1), (-1,-1)])
  merged_grid = I
  for shifted_grid in shifted_grids:
    merged_grid = cellwise(merged_grid, paint(merged_grid, shifted_grid), 1)
  return merged_grid
 
0.34145833333333336, 11.393538, def ebadjecbbjebeehcidgiffhfhefahfbd(I):
    objs = objects(I, univalued=False, diagonal=False, without_bg=True)
    indices = set()
    for obj in objs:
        corner = urcorner(obj)
        indices |= shoot(corner, DOWN_LEFT)
    O = underfill(I, ONE, frozenset(indices))
    return O
 
0.3372916666666666, 29.574934, def bhdbfdefhhiaeicfjfdcfejdedfffdbi(I):
    objs = objects(I, univalued=False, diagonal=False, without_bg=True)
    diag_line = lambda obj: connect(urcorner(obj), (lrcorner(obj)[0], ulcorner(obj)[1]))
    diag_indices = frozenset().union(*[diag_line(obj) for obj in objs])
    O = underfill(I, ONE, diag_indices)
    return O
 
0.3372916666666666, 29.574934, def djbhejfbdbabeajibhbfaabaadjghacd(I):
    target_value = 2
    bg_value = 0
    new_value = 1
    
    target_object = first(colorfilter(objects(I, T, F, F), target_value))
    expansion_area = backdrop(target_object)
    
    for i, row in enumerate(I):
        for j, value in enumerate(row):
            if (i, j) in expansion_area and value == bg_value:
                I = fill(I, new_value, {(i, j)})
    return I
 
0.17666666666666667, 8.379366, def cdcfdhgcddegegffbfahbcfecficchgd(I):
  bg = mostcolor(I)
  return tuple(
    tuple(
      1 if any(I[i+di][j+dj] != bg for di in [-1,0,1] for dj in [-1,0,1] if 0<=i+di<len(I) and 0<=j+dj<len(I[0])) and I[i][j] == bg else I[i][j] 
      for j in range(len(I[0]))
    ) 
    for i in range(len(I))
  )
 
0.254375, 15.76789, def bbjdjdibfcfbeeffaddgadiicbfgdbff(I):
    bg = mostcolor(I)  # Identify the background color
    indices = asindices(I)  # Get indices of all cells
    object_indices = mapply(toindices, objects(I, T, F, T))  # Find indices belonging to objects (excluding background)
    expanded_indices = mapply(dneighbors, object_indices)  # Expand object indices by one layer using 'dneighbors'
    fill_indices = sfilter(expanded_indices, lambda loc: index(I, loc) == bg)  # Select indices that are neighbors of objects and are background color
    return fill(I, 1, fill_indices)  # Fill the selected indices with color '1' in the original grid
 
0.15937500000000002, 7.722408, def dgdgbeicbadaecdeaeecfefhfbjdfgcb(I):
  objs = objects(I, True, False, True)
  twos = colorfilter(objs, TWO)
  for two in twos:
    indices = toindices(two)
    for i, j in indices:
      for di, dj in [(0,1),(1,0),(0,-1),(-1,0)]:
        new_i, new_j = i + di, j + dj
        if 0 <= new_i < len(I) and 0 <= new_j < len(I[0]) and I[new_i][new_j] == 0:
          I = fill(I, ONE, {(new_i, new_j)})
  return I 
 
0.4166666666666667, 14.503669, def fcfidababfaiejdeadcdgcefhcadgahf(I):
  border = initset(ORIGIN)
  for obj in colorfilter(objects(I, True, False, True), TWO):
    border = border | backdrop(toindices(obj))
  return fill(I, ONE, delta(recolor(ZERO, border)))
 
0.41479166666666667, 45.959766, def jhjefbbcjaejefhhbjfbfafffciafeeg(I):
  mask = canvas(ZERO, shape(I))
  for obj in colorfilter(objects(I, True, False, True), TWO):
    mask = paint(mask, recolor(ONE, backdrop(toindices(obj))))
  return paint(fill(I, ONE, ofcolor(mask, ONE)), asobject(cellwise(I, mask, ZERO)))
 
0.213125, 6.0770817, def eacabfaefcefeaddbaidfjjccbcbeagd(I):
  target = 2
  bg = 0
  new = 1

  expanded = canvas(bg, shape(I))
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if val == target or (0 <= i - 1 < len(I) and I[i - 1][j] == target) or (0 <= j - 1 < len(row) and I[i][j - 1] == target) or (i + 1 < len(I) and I[i + 1][j] == target) or (j + 1 < len(row) and I[i][j + 1] == target):
        expanded = fill(expanded, new, {(i, j)})
      else:
        expanded = fill(expanded, val, {(i, j)})
  return expanded
 
0.15937500000000002, 7.722408, def ffeacccaaebeeccaicgecceieccfcdcd(I):
    target = 2
    bg = 0
    new = 1
    
    expansion_mask = canvas(False, shape(I))
    for i, j in asindices(I):
        if index(I, (i, j)) == target:
            for di, dj in [(0, 1), (1, 0), (0, -1), (-1, 0)]:
                ni, nj = i + di, j + dj
                if 0 <= ni < len(I) and 0 <= nj < len(I[0]) and index(I, (ni, nj)) == bg:
                    expansion_mask = fill(expansion_mask, True, {(ni, nj)})
    
    return tuple(tuple(new if expansion_mask[i][j] else I[i][j] for j in range(len(I[0]))) for i in range(len(I)))
 
0.3372916666666666, 29.574934, def ejfbgdbffhbeebefaacabecifdddafbf(I):
  bg = mostcolor(I)  # Identify background color
  objs = objects(I, T, F, T)  # Find all objects excluding background
  expanded_indices = mapply(lambda obj: delta(toindices(obj)), objs) # Find background indices adjacent to each object
  return fill(I, 1, merge(expanded_indices)) # Fill those indices with '1' 
 
0.38479166666666664, 29.406961, def fbhefccbejebeafdibcgeebcfjhefagc(I):
    bg = mostcolor(I) # Find background color
    return paint(canvas(bg, shape(I)), merge(apply(lambda obj: recolor(1, apply(lambda idx: (idx[0]+1, idx[1]), toindices(obj))), objects(I,T,F,T)))) # Expand right edge of objects
 
0.36833333333333335, 12.598334, def djceebidfgbbedadaefadfaedaaadiac(I):
  def right_fill(grid, i, j):
    for k in range(j + 1, width(grid)):
      if index(grid, (i, k)) == 0:
        grid = fill(grid, 1, {(i, k)})
      else:
        break
    return grid

  def top_fill(grid, i, j):
    if i > 0:
      grid = fill(grid, 1, {(i - 1, j)})
    return grid
  
  filled = I
  for i in range(height(I)):
    for j in range(width(I)):
      if index(filled, (i, j)) != 0:
        filled = right_fill(filled, i, j)
        filled = top_fill(filled, i, j)
  return filled
 
0.37083333333333335, 7.6878123, def jefdjdcicaedeacjjeecfcbdbcfdcacb(I):
  def right_fill_obj(obj, grid):
    for i in range(uppermost(obj), lowermost(obj) + 1):
      grid = right_fill(grid, i, rightmost(obj))
    return grid

  def right_fill(grid, i, j):
    for k in range(j + 1, width(grid)):
      if index(grid, (i, k)) == 0:
        grid = fill(grid, 1, {(i, k)})
      else:
        break
    return grid

  def top_fill_obj(obj, grid):
    if uppermost(obj) > 0:
      grid = fill(grid, 1, {(uppermost(obj) - 1, leftmost(obj))})
    return grid
  
  filled = I
  for obj in objects(I, T, F, T):
    filled = right_fill_obj(obj, filled)
    filled = top_fill_obj(obj, filled)
  return filled 
 
0.5566666666666666, 18.137526, def feehejjbifdfejbebafeiacefifiefca(I):
  def process_column(col):
    for i, val in enumerate(col):
      if val != 0:
        return (1,) * i + col[i:]
    return col
  
  def process_row(row):
    for i, val in enumerate(row):
      if val != 0:
        return row[:i+1] + (1,) * (len(row) - i - 1)
    return row

  rotated = rot90(I)
  processed = tuple(process_column(col) for col in rotated)
  rotated_back = rot270(processed)

  final = tuple(process_row(row) for row in rotated_back)
  return final
 
0.4347916666666667, 17.382965, def bfecbijbfffcegdciifjaffbhjfeefjf(I):
  def right_fill(grid):
    filled = tuple()
    for row in grid:
      for i, val in enumerate(row):
        if val != 0:
          filled += (row[:i+1] + (1,) * (len(row) - i - 1),)
          break
      else:
        filled += (row,)
    return filled

  def top_fill(grid):
    filled = tuple()
    for i, row in enumerate(grid):
      if i > 0 and any(val != 0 for val in row):
        filled += (((1,) * len(row)),) + grid[i:]
        break
      else:
        filled += (row,)
    return filled
  
  filled_right = right_fill(I)
  filled_top = top_fill(filled_right)
  return filled_top
 
0.3372916666666666, 29.574934, def ddbaddfagjabeiddbbfjaddahajbccbf(I):
  h, w = height(I), width(I)
  O = I # Initialize the output grid as the input grid

  def is_valid(loc): # Check if a location is within grid boundaries
    i, j = loc
    return 0 <= i < h and 0 <= j < w

  def get_neighbors(loc): # Get valid horizontal and vertical neighbors
    i, j = loc
    return frozenset((ni, nj) for ni, nj in [(i+1,j),(i-1,j),(i,j+1),(i,j-1)] if is_valid((ni,nj)))
  
  for i in range(h):
    for j in range(w):
      if I[i][j] != 0: # For each non-background cell
        queue = [(i, j)] # Initialize a queue for Breadth-First Search (BFS)
        visited = {(i, j)}
        path_found = False
        parent = {} # Store parent nodes for path reconstruction

        while queue and not path_found:
          curr = queue.pop(0)
          for neighbor in get_neighbors(curr):
            if neighbor not in visited:
              parent[neighbor] = curr 
              if I[neighbor[0]][neighbor[1]] == 0: # Found a path to background
                path_found = True
                path_node = neighbor
                break
              visited.add(neighbor)
              queue.append(neighbor)

        if path_found: # Reconstruct and fill the path
          while parent[path_node] != (i,j):
            O = fill(O, 1, frozenset({path_node}))
            path_node = parent[path_node]
  return O
 
0.3402083333333333, 14.295759, def ddbccbgabeccecgeiajaefagjccjhadh(I):
  twos = ofcolor(I, TWO)
  paths = frozenset(shoot(loc, direction) for loc in twos for direction in {UP, DOWN, LEFT, RIGHT} if len(intersection(shoot(loc, direction), box(asindices(I)))) > 0)
  O = I
  for path in paths:
    O = underfill(O, ONE, path)
  return O
 
0.3072916666666667, 21.815289, def eadhaaceadccedjiieedaciacbcajbid(I):
  O = I
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if val == TWO:
        if i == 0 or i == len(I)-1 or j == 0 or j == len(row)-1: 
          continue 
        else:
          directions = [(i, 0), (-i, 0), (0, j), (0, -j)]
          closest_edge = min(directions, key=lambda x: abs(x[0]) + abs(x[1]))
          path = connect((i, j), (i + closest_edge[0], j + closest_edge[1]))
          O = underfill(O, ONE, path)
  return O
 
0.29854166666666665, 10.571244, def fhabchcjbhfceffgicdadeafebaaieea(I):
  O = I
  for i in range(len(I)):
    for j in range(len(I[0])):
      if I[i][j] == TWO:
        if any(k in toindices(ofcolor(I, TWO)) for k in dneighbors((i, j))):
          continue
        for direction in [(0, -1), (-1, 0), (0, 1), (1, 0)]:
          ti, tj = i, j
          while 0 <= ti < len(I) and 0 <= tj < len(I[0]):
            if (ti == 0 or ti == len(I) - 1 or 
                tj == 0 or tj == len(I[0]) - 1):
              O = underfill(O, ONE, connect((i, j), (ti, tj)))
              break
            ti += direction[0]
            tj += direction[1] 
  return O
 
0.3020833333333333, 23.822083, def iebehidcedadejdbibcfibbfagacbebg(I):
  O = I
  for loc in ofcolor(I, TWO):
    queue = [loc]
    visited = set()
    while queue:
      current = queue.pop(0)
      visited.add(current)
      if bordering(frozenset({current}), I):
        O = underfill(O, ONE, connect(loc, current))
        break
      for neighbor in dneighbors(current):
        if 0 <= neighbor[0] < len(I) and 0 <= neighbor[1] < len(I[0]) and neighbor not in visited and index(I, neighbor) == 0:
          queue.append(neighbor)
  return O
 
0.0, 0.0, def begefcgdceeaebfbbfbjefdfbjdbgehb(I):
  target_value = 2
  bg_value = 0
  new_value = 1

  target_indices = ofcolor(I, target_value)
  expansion_indices = set()
  for i, j in target_indices:
    for di, dj in {(-1,0),(1,0),(0,-1),(0,1),(-1,-1),(-1,1),(1,-1),(1,1)}:
      new_i, new_j = i + di, j + dj
      if 0 <= new_i < len(I) and 0 <= new_j < len(I[0]) and I[new_i][new_j] == bg_value:
        expansion_indices.add((new_i, new_j))
  return fill(I, new_value, frozenset(expansion_indices))
 
