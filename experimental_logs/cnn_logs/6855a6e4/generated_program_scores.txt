11.666666666666666, 15.831811, def eecjbabbefghecjfbdijdhfceadjjhhf(I):
  obj = colorfilter(objects(I, True, False, True), 5)
  bg = mostcolor(I)
  filled = fill(I, bg, toindices(merge(obj)))
  moved_cells = set()
  for (v, (i, j)) in merge(obj):
    ci, cj = i, j
    while ci < len(filled) and filled[ci][cj] == bg:
      ci += 1
    moved_cells.add((v, (ci - 1, cj)))
  O = paint(filled, frozenset(moved_cells))
  return O
 
14.0, 13.395723, def dhaicjcdfdhaeccdjgdddhcheaacbaag(I):
  fives = colorfilter(partition(I), 5)
  other = difference(partition(I), fives)
  shifted_fives = apply(lambda obj: shift(obj, (height(obj), 0)), fives)
  O = paint(paint(canvas(0, shape(I)), merge(other)), merge(shifted_fives))
  return O
 
19.333333333333332, 11.909748, def adiibefeiffdedbhjecefigfaicedfid(I):
  obj = colorfilter(objects(I, True, False, True), 5)
  moved = set()
  for (v, (i, j)) in merge(obj):
    new_i = i
    while new_i < len(I) and (new_i, j) not in toindices(merge(difference(objects(I, True, False, True), obj))):
      new_i += 1
    moved.add((v, (new_i - 1, j)))
  O = paint(I, frozenset(moved))
  return O
 
15.333333333333334, 11.034042, def cfeacijbhgbdedjajcjhbigbbedbccca(I):
    fives = colorfilter(partition(I), 5)
    targets = apply(lambda obj: shift(obj, (height(I), 0)), fives)
    O = I
    for five, target in zip(fives, targets):
        while not vmatching(five, target):
            five = shift(five, DOWN)
        O = paint(cover(O, five), five)
    return O
 
9.666666666666666, 10.157307, def iajifejffdhdeaeeadjbfhiggacejdah(I):
    # Find the indices of the '2' and '5' objects
    two_indices = ofcolor(I, 2)
    five_indices = ofcolor(I, 5)
    
    # Calculate the center of the '2' object
    two_center = center(two_indices)
    
    # Calculate the desired positions for the '5' objects
    new_five_indices = frozenset()
    for i, (five_i, five_j) in enumerate(five_indices):
        offset = (0, two_center[1] - five_j) 
        new_five_indices = new_five_indices | frozenset({(five_i, five_j + offset[1])})
    
    # Modify the grid: remove old '5's, add new '5's
    O = cover(I, five_indices)
    O = fill(O, 5, new_five_indices)
    return O
 
14.333333333333334, 8.745344, def cfbhcbeeecafefbdiddaccjeaijidieb(I):
  # Extract objects
  twos = objects(I, True, False, True)
  fives = objects(I, True, False, True)
  fives = colorfilter(fives, 5)

  # Find centers
  two_center = center(merge(twos))

  # Move each five object
  O = I
  for five in fives:
    five_center = center(five)
    offset = subtract(two_center, five_center)
    offset = (offset[0], 0)  # Only move horizontally
    O = move(O, five, offset)
  return O
 
9.666666666666666, 5.6156287, def ifjhfecjbgjbehebjeeafedibefefjca(I):
  # Find '2' and '5' objects
  twos = objects(I, True, False, True)
  fives = objects(I, True, False, True)
  fives = colorfilter(fives, 5)
  
  # Find center column of '2' object
  two_center_j = center(merge(twos))[1]
  
  # Function to move object to center column
  def move_to_center_column(obj):
    obj_center = center(obj)
    offset = (0, two_center_j - obj_center[1])
    return shift(obj, offset)
  
  # Move each '5' object to the center column
  moved_fives = apply(move_to_center_column, fives)
  
  # Modify the grid
  O = cover(I, merge(fives))  
  for moved_five in moved_fives:
    O = paint(O, moved_five)
  return O
 
18.0, 11.157576, def cbacdcaaibaeeifaiebiffdfcdcffcia(I):
  fives = ofcolor(I, 5)
  target_row = lowermost(ofcolor(I, 2)) - 1
  new_grid = I
  for i, j in fives:
      new_grid = paint(new_grid, {(5, (target_row, j))})
  return new_grid
 
190.0, 48.91245, def dcfaecighfeeeaehjhjhgbhijaedcdde(I):
    target = extract(partition(I), lambda obj: color(obj) == 2 and size(obj) > 1)
    h, w = shape(target)
    if h > w:
        pattern = crop(I, ulcorner(target), (h // 2 + 1, w))
        return vconcat(pattern, pattern)
    else:
        pattern = crop(I, ulcorner(target), (h, w // 2 + 1))
        return hconcat(pattern, pattern) 
 
15.333333333333334, 11.034042, def gffaeicdeedaebabbbcfhdbheebfccea(I):
    objs = objects(I, T, F, F)
    obj2 = extract(objs, lambda obj: color(obj) == 2)
    obj5s = sfilter(objs, lambda obj: color(obj) == 5)
    O = I
    for obj5 in obj5s:
        bbox = backdrop(obj2)
        shifted_obj5 = shift(obj5, (-height(obj5) - 1, 0)) 
        O = underpaint(O, recolor(5, intersection(bbox, toindices(shifted_obj5))))
    return O
 
242.0, 13.135295, def fffdbaabcaebeejfaggdfebfeaedaadf(I):
    objs = objects(I, T, F, F)
    obj2 = extract(objs, lambda obj: color(obj) == 2)
    top_half =  vconcat(canvas(0, (uppermost(obj2), width(I))), I[uppermost(obj2):])
    O = vconcat(top_half, top_half)
    return O
 
41.666666666666664, 11.478333, def bdgbibifcgdceabejedfadibddgdjdja(I):
    objs = objects(I, T, F, F)
    obj2 = extract(objs, lambda obj: color(obj) == 2)
    obj5s = sfilter(objs, lambda obj: color(obj) == 5)
    top = crop(I, (0, 0), (uppermost(obj2), width(I)))
    middle = canvas(0, (1, width(I)))
    bottom = I[uppermost(obj2):]
    O = vconcat(top, vconcat(middle, bottom))
    return O
 
12.666666666666666, 7.756611, def ecchibfajbaiedbcadaccjhffdhgdgee(I):
  # Find all objects
  objs = objects(I, False, True, True)
  # Find the object with color 5
  five_obj = extract(objs, lambda obj: color(obj) == 5)
  # Calculate the center of the grid
  center_loc = center(asindices(I))
  # Calculate the offset to move the '5' object to the center
  offset = subtract(center_loc, centerofmass(five_obj))
  # Move the '5' object to the center
  O = move(I, five_obj, offset)
  return O
 
14.333333333333334, 10.866676, def ecgbfeaafebheegiafibceffdbgecibd(I):
  # Get indices of color 5
  five_indices = ofcolor(I, 5)
  # Create a canvas filled with 0s
  canvas_grid = canvas(0, shape(I))
  # Paint other objects onto the canvas
  objs = objects(I, False, True, True)
  for obj in objs:
    if color(obj) != 5:
      canvas_grid = paint(canvas_grid, obj)
  # Move the 5 object to the center of the canvas
  O = paint(canvas_grid, shift(recolor(5, five_indices), subtract(center(asindices(I)), centerofmass(five_indices))))
  return O
 
11.0, 7.4602194, def gcfceegedjabeebhbhfgaghdaecdjhfb(I):
  # Find all objects
  objs = objects(I, False, True, True)
  # Filter out the object with color 5
  other_objs = sfilter(objs, lambda obj: color(obj) != 5)
  # Create an empty canvas
  O = canvas(0, shape(I))
  # Paint other objects onto the canvas
  for obj in other_objs:
    O = paint(O, obj)
  # Find the '5' object
  five_obj = other(objs, first(other_objs))
  # Move the 5 object to the center of the canvas
  O = paint(O, shift(five_obj, subtract(center(asindices(I)), centerofmass(five_obj))))
  return O
 
22.333333333333332, 14.427336, def bccceddabadfefhaacedjicffcacjche(I):
  five_objs = colorfilter(objects(I, True, False, True), 5)  
  other_objs = difference(objects(I, True, False, True), five_objs) 
  shifted_fives = set()
  for five_obj in five_objs:
    for _ in range(height(I)): 
      if any(adjacent(five_obj, obj) for obj in other_objs) or uppermost(five_obj) == 0:
        break
      five_obj = shift(five_obj, (-1, 0)) 
    shifted_fives.add(five_obj)
  O = paint(I, merge(shifted_fives)) 
  return O
 
22.333333333333332, 13.417553, def ddcgdhjhceaeejcfjcfaihdccdeecdgc(I):
  fives = colorfilter(objects(I, True, False, True), 5)
  moved_fives = mapply(lambda obj: move_up(obj, I), fives) 
  O = paint(I, moved_fives)
  return O
 
19.0, 12.143583, def aabijcecefcfeifjbabadccdgedcbacb(I):
    five_indices = toindices(merge(colorfilter(objects(I, True, False, True), 5)))
    other_indices = toindices(merge(difference(objects(I, True, False, True), colorfilter(objects(I, True, False, True), 5))))
    moved_fives = set()
    for i, j in five_indices:
        new_i = i
        while new_i > 0 and (new_i - 1, j) not in other_indices:
            new_i -= 1
        moved_fives.add((5, (new_i, j)))
    O = paint(I, frozenset(moved_fives))
    return O
 
21.333333333333332, 13.122115, def hfhccdffdajdeabcjeddaeahhcffbgaa(I):
  fives = colorfilter(objects(I, True, False, True), 5)
  other_objs = difference(objects(I, True, False, True), fives)
  moved = set()
  for five in fives:
    up = ulcorner(five)[0]
    while up > 0: 
      shifted = shift(five, (-1, 0)) 
      if any(vmatching(shifted, other) for other in other_objs):
        break
      up -= 1
      five = shifted 
    moved.add(five) 
  O = paint(I, merge(moved))
  return O
 
15.333333333333334, 14.506951, def hdiadbdjhcedefjebeffefdfccegfcaa(I):
    moved = set()
    for obj in objects(I, True, False, True):
        if color(obj) == 5:
            moved.add(move_object_up(I, obj))
        else:
            moved.add(obj)
    O = paint(canvas(0, shape(I)), merge(moved))
    return O
 
13.666666666666666, 12.898952, def cfbfedacbfajefidacfdjcgjgeaaecah(I):
  twos = objects(I, True, False, True)
  fives = colorfilter(objects(I, True, False, True), 5)
  two_center_i = center(merge(twos))[0]
  target_i = two_center_i - height(merge(fives)) if two_center_i >= height(merge(fives)) else two_center_i + height(merge(twos))
  
  def move_to_target_row(obj):
    return shift(obj, (target_i - center(obj)[0], 0))
  
  moved_fives = apply(move_to_target_row, fives)
  O = cover(I, merge(fives))
  for moved_five in moved_fives:
    O = paint(O, moved_five)
  return O
 
14.666666666666666, 14.106389, def ihhjjabffhddeabdibcegfdbbjjgacbh(I):
  twos = objects(I, True, False, True)
  fives = colorfilter(objects(I, True, False, True), 5)
  two_row_start = uppermost(merge(twos))
  five_height = height(merge(fives))
  target_i = two_row_start - five_height if two_row_start >= five_height else two_row_start + height(merge(twos))

  def move_to_row(obj):
    return shift(obj, (target_i - uppermost(obj), 0))

  O = I
  for five in fives:
    O = move(O, five, (target_i - uppermost(five), 0))
  return O
 
15.0, 11.273643, def biffgcbjegigehfjbbegabfchaacgebf(I):
  twos = objects(I, True, False, True)
  fives = colorfilter(objects(I, True, False, True), 5)
  two_center_i = center(merge(twos))[0]
  target_row = two_center_i - height(merge(fives)) // 2 

  def move_to_row(obj):
    return shift(obj, (target_row - uppermost(obj), 0))

  moved_fives = apply(move_to_row, fives)
  O = cover(I, merge(fives))
  for moved_five in moved_fives:
    O = paint(O, moved_five)
  return O
 
14.666666666666666, 13.648329, def ffbfdhadcahheaaeiagfecdddabbdfie(I):
  twos = objects(I, True, False, True)
  fives = colorfilter(objects(I, True, False, True), 5)
  two_uppermost = uppermost(merge(twos))

  def move_above_twos(obj):
    return shift(obj, (two_uppermost - height(obj) - uppermost(obj), 0))
  
  def move_below_twos(obj):
    return shift(obj, (two_uppermost + height(merge(twos)) - uppermost(obj), 0))

  move_func = move_above_twos if two_uppermost >= height(merge(fives)) else move_below_twos
  moved_fives = apply(move_func, fives)
  O = cover(I, merge(fives))
  for moved_five in moved_fives:
    O = paint(O, moved_five)
  return O
 
9.0, 9.142533, def fjedicacaacbehdcaaffeffebdeaebhj(I):
  # Find all objects
  objs = objects(I, False, True, True)
  # Find the object with color 5
  five_obj = extract(objs, lambda obj: color(obj) == 5)
  # Filter out the object with color 5
  other_objs = sfilter(objs, lambda obj: color(obj) != 5)
  # Create an empty canvas
  O = canvas(0, shape(I))
  # Paint other objects onto the canvas
  for obj in other_objs:
    O = paint(O, obj)
  # Find the center of the bounding box of non-'5' objects
  center_other = center(backdrop(merge(other_objs)))
  # Move the '5' object to the calculated center
  O = paint(O, shift(five_obj, subtract(center_other, centerofmass(five_obj))))
  return O
 
19.333333333333332, 9.2501335, def babfifbfdfdceihaabbabfgibediddad(I):
  # Find all objects
  objs = objects(I, False, True, True)
  # Filter out the object with color 5
  other_objs = sfilter(objs, lambda obj: color(obj) != 5)
  # Find the '5' object
  five_obj = other(objs, first(other_objs))
  # Calculate center of non-5 objects
  center_non_five = centerofmass(merge(other_objs))
  # Calculate the offset to move the '5' object towards the center
  offset = subtract(center_non_five, centerofmass(five_obj))
  # Move the '5' object towards the center
  O = move(I, five_obj, halve(offset))
  return O
 
14.0, 7.7889547, def haafibeebbbfeieabjbccficcdfecbba(I):
  # Find all objects
  objs = objects(I, False, True, True)
  # Find the object with color 5
  five_obj = extract(objs, lambda obj: color(obj) == 5)
  # Filter out the object with color 5
  other_objs = sfilter(objs, lambda obj: color(obj) != 5)
  # Calculate the bounding box of non-'5' objects
  bbox_other = backdrop(merge(other_objs))
  # Find a central empty location within the bounding box
  empty_loc = extract(bbox_other, lambda loc: index(I, loc) == 0 and all(index(I, n) == 0 for n in neighbors(loc)))
  # Move the '5' object to the empty location
  O = move(I, five_obj, subtract(empty_loc, centerofmass(five_obj)))
  return O
 
28.666666666666668, 15.378705, def bebgjccdbgceecbdbddjdcfiabcgbcbd(I):
  # Find all objects
  objs = objects(I, True, False, True)

  # Group objects by color
  color_groups = {c: colorfilter(objs, c) for c in palette(I) if c != mostcolor(I)}

  # Move each object group to its center of mass
  for color, group in color_groups.items():
    center_mass = centerofmass(merge(group))
    for obj in group:
      offset = subtract(center_mass, centerofmass(obj))
      I = move(I, obj, offset)
  
  return I
 
28.666666666666668, 10.512434, def bebfgejcbfbdehejijehfchhdbfbabfc(I):
  for color in palette(I):
    if color == mostcolor(I):
      continue
    obj = merge(colorfilter(objects(I, True, False, True), color))
    center_mass = centerofmass(obj)
    offset = subtract(center(asindices(I)), center_mass)
    I = move(I, obj, offset)
  return I
 
28.0, 9.233391, def bbfeafebffhdefceiaabfghacdcefjjd(I):
  for c in palette(I) - {mostcolor(I)}:
    objs = colorfilter(objects(I, True, False, True), c)
    if len(objs) > 1:
      target = argmax(objs, size)
      for obj in objs - {target}:
        I = move(I, obj, gravitate(obj, target))
  return I
 
11.333333333333334, 4.881925, def dbedgddfabfeebgdbiadeeeehciegcef(I):
  twos = objects(I, True, False, True)
  fives = colorfilter(objects(I, True, False, True), 5)
  two_center_j = center(merge(twos))[1]
  
  def move_five(five):
    five_center = center(five)
    offset_j =  two_center_j - five_center[1]
    shifted_five = shift(five, (0, offset_j))
    if uppermost(shifted_five) > uppermost(merge(twos)):
      return shift(shifted_five, (uppermost(merge(twos)) - uppermost(shifted_five), 0))
    elif lowermost(shifted_five) < lowermost(merge(twos)):
      return shift(shifted_five, (lowermost(merge(twos)) - lowermost(shifted_five), 0))
    else:
      return shifted_five

  moved_fives = apply(move_five, fives)
  return paint(cover(I, merge(fives)), merge(moved_fives)) 
 
8.0, 7.522216, def bacebgedgjacehedabafjecehaejbijc(I):
  twos = objects(I, True, False, True)
  fives = colorfilter(objects(I, True, False, True), 5)
  two_center = center(merge(twos))

  def move_five(five):
    v_dif = center(five)[0] - two_center[0]
    h_offset = two_center[1] - center(five)[1]
    return shift(five, (crement(v_dif), h_offset))

  moved_fives = apply(move_five, fives)
  O = cover(I, merge(fives))
  for moved_five in moved_fives:
    O = paint(O, moved_five)
  return O 
 
11.0, 14.192937, def ggecejbjdiccehcebgeahcbdeafcfadf(I):
  objs = partition(I) 
  bg = mostcolor(I)
  target_obj = extract(objs, lambda obj: color(obj) == 2)  
  target_upper_row = uppermost(target_obj) - 1 
  movable_objs = colorfilter(objs, 5) 
  new_grid = I
  for i, obj in enumerate(movable_objs):
    target_col = leftmost(target_obj) + i * width(obj)
    new_grid = paint(cover(new_grid, obj), shift(obj, (target_upper_row - uppermost(obj), target_col - leftmost(obj))))
  return new_grid 
 
11.333333333333334, 13.487811, def cibdddfdejcieaabaecccfiaahbfieaf(I):
    objs = partition(I)
    bg = mostcolor(I)
    target_obj = extract(objs, lambda obj: color(obj) == 2)
    target_left_col = leftmost(target_obj)
    movable_objs = colorfilter(objs, 5)
    new_grid = paint(canvas(bg, shape(I)), target_obj)
    for i, obj in enumerate(movable_objs):
        target_row = uppermost(target_obj) - height(obj) - i * height(obj)
        new_grid = underpaint(new_grid, shift(obj, (target_row - uppermost(obj), target_left_col - leftmost(obj))))
    return new_grid
 
15.333333333333334, 11.034042, def deifacjcfbdcebbgbacdhfbaffgfehdb(I):
    objs = partition(I)
    bg = mostcolor(I)
    target_obj = extract(objs, lambda obj: color(obj) == 2)
    target_center = center(target_obj)
    movable_objs = colorfilter(objs, 5)
    new_grid = I 
    for obj in movable_objs:
        offset =  sign(subtract(target_center, center(obj)))
        new_grid = move(new_grid, obj, offset)
    return new_grid
 
10.0, 7.657526, def dafiagiedgdeedeabafaaeeagjcbacac(I):
    objs = partition(I)
    bg = mostcolor(I)
    target_obj = extract(objs, lambda obj: color(obj) == 2)
    target_area = backdrop(target_obj)
    new_grid = I
    for obj in objs:
        if color(obj) != 5:
            continue
        distances = [manhattan(obj, frozenset({loc})) for loc in target_area]
        closest_loc_index = argmin(range(len(distances)), lambda i: distances[i])
        closest_loc = totuple(target_area)[closest_loc_index] 
        direction = gravitate(obj, frozenset({(bg, closest_loc)}))
        new_grid = move(new_grid, obj, direction)
    return new_grid
 
15.333333333333334, 5.6872883, def aeibefjefabgebdcjdfhcbaceaiecagc(I):
  objs = partition(I)
  bg = mostcolor(I)
  target_obj = extract(objs, lambda obj: color(obj) == 2) 
  movable_objs  = colorfilter(objs, 5)
  new_grid = I
  for obj in movable_objs:
    for loc in toindices(target_obj):
      direction = gravitate(obj, frozenset({(bg, loc)}))
      new_grid = move(new_grid, obj, direction)
  return new_grid
 
15.333333333333334, 12.374798, def hdebgabadfjfeibcaehdfefeahadgabf(I):
  objs = objects(I, False, True, True)  # Find all objects
  five_obj = extract(objs, lambda obj: color(obj) == 5)  # Find '5' object
  target_row = min(uppermost(obj) for obj in objs if color(obj) != 5) - height(five_obj)  # Find target row
  target_row = max(target_row, 0) # Keep within grid bounds
  offset = subtract((target_row, 0), ulcorner(five_obj))  # Calculate offset 
  O = move(I, five_obj, offset)  # Move '5' object
  return O
 
15.333333333333334, 12.658237, def abffcfijddccehecigadbafadjaafeee(I):
  objs = objects(I, False, True, True)
  five_obj = extract(objs, lambda obj: color(obj) == 5)
  O = I
  while uppermost(five_obj) > 0 and index(O, subtract(ulcorner(five_obj), (1, 0))) == 0:
    O = move(O, five_obj, (-1, 0))  # Move one step up
    five_obj = shift(five_obj, (-1, 0)) # Update five_obj position
  return O 
 
15.333333333333334, 10.236124, def afacabchabdaebfajafcbbgfbafeidib(I):
  objs = objects(I, False, True, True)
  five_obj = extract(objs, lambda obj: color(obj) == 5)
  other_objs = sfilter(objs, lambda obj: color(obj) != 5)
  target_loc = ulcorner(merge(other_objs)) # Top-left corner of non-'5' objects
  offset = subtract(target_loc, ulcorner(five_obj))  # Calculate offset 
  O = move(I, five_obj, offset)  # Move '5' object
  return O
 
15.333333333333334, 11.613568, def adeebdaeieegeebfacfiefjefcgeefhd(I):
  objs = objects(I, False, True, True)
  five_obj = extract(objs, lambda obj: color(obj) == 5)
  other_objs = sfilter(objs, lambda obj: color(obj) != 5)
  if any(lowermost(obj) > uppermost(five_obj) for obj in other_objs): # Condition for horizontal centering
    target_col = center(backdrop(merge(other_objs)))[1] - width(five_obj) // 2  # Horizontal center
    offset = subtract((0, target_col), ulcorner(five_obj)) 
    O = move(I, five_obj, offset)
  else:
    O = I # No change if condition not met
  return O
 
29.666666666666668, 15.080033, def jjijbfhbejdeedcbbifaabbfbcbdihgb(I):
  center_j = width(I) // 2 
  for c in palette(I) - {mostcolor(I)}:
    for obj in colorfilter(objects(I, True, False, True), c):
      obj_center_j = centerofmass(obj)[1]
      I = move(I, obj, (0, center_j - obj_center_j))
  return I
 
29.0, 18.977854, def cfcjeebechdaeaciabbbeeaedgaejaec(I):
  for c in palette(I) - {mostcolor(I)}:
    objs = colorfilter(objects(I, True, False, True), c)
    if len(objs) > 1:
      target_obj = argmax(objs, lambda obj: abs(centerofmass(obj)[1] - width(I) // 2))
      for obj in objs - {target_obj}:
        I = move(I, obj, gravitate(obj, target_obj)) 
  return I
 
22.333333333333332, 17.905428, def agcadecachfjebheiabibffbhfdafcfa(I):
  target_column =  {(i, width(I) // 2) for i in range(height(I))}
  for c in palette(I) - {mostcolor(I)}:
    for obj in colorfilter(objects(I, True, False, True), c):
      shift_direction = gravitate(obj, target_column)
      I = move(I, obj, shift_direction)
  return I
 
31.333333333333332, 9.20165, def fdhdeijdchfieeiabadjafdbhbcdbcdc(I):
  for j in range(width(I)):
    if j == width(I) // 2:
      continue
    column = {(i, j) for i in range(height(I))}
    for obj in objects(I, True, False, True):
      if vmatching(obj, column):
        shift_amount = (width(I) // 2) - centerofmass(obj)[1]
        I = move(I, obj, (0, shift_amount))
  return I
 
8.666666666666666, 3.7240102, def bgafebfibebheicijedbhefdjehdhcbh(I):
  twos = objects(I, True, False, True)
  fives = colorfilter(objects(I, True, False, True), 5)
  two_center = center(merge(twos))
  two_upper = uppermost(merge(twos))
  two_lower = lowermost(merge(twos))

  def move_five(five):
    five_center = center(five)
    offset = (two_center[0] - five_center[0], two_center[1] - five_center[1])
    return shift(five, offset)

  moved_fives = apply(move_five, fives)
  O = cover(I, merge(fives))
  for moved_five in moved_fives:
    O = paint(O, moved_five)
  return O
 
11.333333333333334, 10.921564, def ecfdhcbjbicgeabgbcieejfabheciacg(I):
  objs = partition(I)
  bg = mostcolor(I)
  target_obj = extract(objs, matcher(color, 2))
  target_indices = toindices(target_obj)
  new_grid = I
  for obj in sfilter(objs, lambda obj: color(obj) == 5):
    closest_index =  argmin(totuple(target_indices), lambda idx: manhattan(obj, frozenset({(bg, idx)})))
    new_grid = move(new_grid, obj, gravitate(obj, frozenset({(bg, closest_index)})))
  return new_grid
 
14.666666666666666, 13.499415, def dhbgidifgbceedejibebjcdefchficdf(I):
  five_obj = toobject(ofcolor(I, 5), I)  # Directly get the '5' object
  top_two_row = uppermost(ofcolor(I, 2))  # Find the top row of the '2' object

  # Calculate the new upper-left corner for the '5' object
  new_ulcorner = (top_two_row - height(five_obj), leftmost(five_obj))  
  
  # Move the '5' object by shifting to the new corner
  O = paint(cover(I, five_obj), shift(five_obj, subtract(new_ulcorner, ulcorner(five_obj))))
  return O
 
11.0, 13.658079, def afhdcecehddfeagfidedeegehedacefi(I):
  fives = ofcolor(I, 5)  # Get indices of '5' cells
  twos = ofcolor(I, 2)  # Get indices of '2' cells
  
  # Calculate vertical offset to position '5' above '2'
  offset = (uppermost(twos) - height(fives), 0) 
  
  # Move the '5' cells based on the offset
  new_fives = shift(fives, offset)
  
  # Construct the output grid
  O = canvas(0, shape(I))
  O = paint(O, toobject(new_fives, I))  # Paint '5' at new positions
  O = paint(O, toobject(twos, I))      # Paint '2' back in its original place
  return O
 
15.666666666666666, 11.300332, def fchiddbaebbjebdeibbiaeeececcihjf(I):
  objs = objects(I, False, True, True)
  five_obj = extract(objs, lambda obj: color(obj) == 5)
  two_obj = extract(objs, lambda obj: color(obj) == 2)
  
  v_offset = (uppermost(two_obj) - height(five_obj), 0) 
  O = move(I, five_obj, v_offset) 
  
  # Center '5' horizontally if it was originally above '2'
  if uppermost(five_obj) < uppermost(two_obj):
    h_offset = (0, (leftmost(two_obj) + width(two_obj) // 2) - (leftmost(five_obj) + width(five_obj) // 2))
    O = move(O, five_obj, h_offset)
  
  return O
 
7.666666666666667, 19.476683, def chbjededfdgcedgfidjieehedjefafac(I):
  five_indices = ofcolor(I, 5)  # Indices of '5' cells
  two_indices = ofcolor(I, 2)  # Indices of '2' cells
  
  target_row = uppermost(two_indices) - height(five_indices)  # Target row for '5'
  
  # Adjust '5' cell indices to target row while maintaining column position
  new_five_indices = frozenset({(target_row + i - uppermost(five_indices), j) for i, j in five_indices})
  
  # Reconstruct the grid
  O = canvas(0, shape(I)) 
  O = paint(O, toobject(new_five_indices, I))  # Paint '5' at new positions
  O = paint(O, toobject(two_indices, I))      # Paint '2' back in its original place 
  return O
 
11.0, 12.326884, def ebfhabfccbfheiffabbaaadbdfihcagj(I):
  five_obj = first(colorfilter(objects(I, True, False, True), 5))
  five_center = centerofmass(five_obj)
  for c in palette(I) - {mostcolor(I), 5}:
    for obj in colorfilter(objects(I, True, False, True), c):
      obj_center = centerofmass(obj)
      I = move(I, five_obj, (obj_center[0], five_center[1]))
  return I
 
11.333333333333334, 11.261753, def ajbefabbfefhebebbegbfejfhaccfjec(I):
  five_locs = ofcolor(I, 5)
  target_row = centerofmass(five_locs)[0]
  for i, j in five_locs:
    I = move(I, {(5, (i, j))}, (target_row - i, 0))
  return I
 
13.0, 10.967258, def ejccdbifbjhheeafaeghfchabcejaabi(I):
  for obj in colorfilter(objects(I, True, False, True), 5):
    target_col = centerofmass(extract(objects(I, True, False, True), lambda x: size(x) > 1))[1]
    I = move(I, obj, (0, target_col - centerofmass(obj)[1])) 
  return I
 
20.333333333333332, 17.918087, def bccgefffichbeedfidegdegebieecbjc(I):
  five_obj = first(colorfilter(objects(I, True, False, True), 5))
  for obj in objects(I, True, False, True) - {five_obj}:
      I = move(I, five_obj, gravitate(five_obj, obj))
  return I
 
15.333333333333334, 12.186119, def effaigafbeedebifbdbcegfdfedgccji(I):
    for obj in colorfilter(objects(I, True, False, True), 5):
        other_objs = objects(I, True, False, True) - {obj}
        closest = argmin(other_objs, lambda x: manhattan(obj, x))
        I = move(I, obj, gravitate(obj, closest))
    return I
 
9.666666666666666, 5.535612, def heacfbaicaaiedebidadciceebgbjaga(I):
  twos = merge(objects(I, True, False, True))
  fives = colorfilter(objects(I, True, False, True), 5)
  tj = centerofmass(twos)[1]

  def align_five(five):
    fj = centerofmass(five)[1]
    return shift(five, (0, tj - fj))

  return paint(cover(I, merge(fives)), merge(apply(align_five, fives))) 
 
13.0, 12.3327, def cebcfdafajeaejadaffagfgfbbcabccd(I):
  obj2 = extract(objects(I, T, F, F), lambda obj: color(obj) == 2)
  obj5s = sfilter(objects(I, T, F, F), lambda obj: color(obj) == 5)
  target_row = uppermost(obj2) - height(first(obj5s))
  O = I  # Start with the original grid
  for obj5 in obj5s:
    O = paint(cover(O, obj5), shift(obj5, (target_row - uppermost(obj5), 0)))  # Cover and paint iteratively
  return O 
 
15.333333333333334, 12.000263, def ccbgfbdfeiaceeajbeaieaaegaecbbfe(I):
  objs = objects(I, False, True, True) 
  five_obj = extract(objs, lambda obj: color(obj) == 5) 
  two_obj = extract(objs, lambda obj: color(obj) == 2)
  target_loc = (uppermost(two_obj) - height(five_obj), leftmost(five_obj))
  O = move(I, five_obj, subtract(target_loc, ulcorner(five_obj)))  
  return O
 
11.666666666666666, 14.582727, def aejhfajhecaaeddcjdiafdbigfaifaid(I):
  fives = toobject(ofcolor(I, 5), I)
  other_indices = toindices(merge(difference(objects(I, True, False, True), colorfilter(objects(I, True, False, True), 5))))
  moved_fives = set()
  for value, (i, j) in fives:
    new_i = i
    while new_i > 0 and (new_i - 1, j) not in other_indices:
      new_i -= 1
    moved_fives.add((value, (new_i, j)))
  return paint(cover(I, fives), frozenset(moved_fives))
 
15.333333333333334, 14.63986, def eeeeeceefdfcegfcacceagddgddegegc(I):
  for j in range(len(I[0])):
    for i in range(len(I)):
      if I[i][j] == 5:
        temp = i
        while temp > 0 and I[temp-1][j] == 0:
          temp -= 1
        I = paint(cover(I, {(5, (i,j))}), {(5, (temp,j))})
  return I
 
19.0, 11.388756, def chajdeafbdgjeaecacdfdhhdjfbdaiae(I):
    return paint(I, frozenset((5, (next((k for k in range(i, -1, -1) if index(I, (k, j)) != 5 and index(I, (k, j)) != 0), 0), j)) for i in range(len(I)) for j in range(len(I[0])) if I[i][j] == 5))
 
15.333333333333334, 11.454407, def dadgbhacjjddeidbiecefbhcafdeafde(I):
  for x, y in sorted(((i, j) for i in range(len(I)) for j in range(len(I[0])) if I[i][j] == 5), reverse=True):
    temp = x
    while temp > 0 and I[temp-1][y] == 0:
      temp -= 1
    I = paint(cover(I, {(5, (x,y))}), {(5, (temp,y))})
  return I
 
11.333333333333334, 12.9186535, def dccedcjbeeabedadbichfjaacieabjbc(I):
  twos = objects(I, True, False, True)
  fives = colorfilter(objects(I, True, False, True), 5)
  two_center_j = center(merge(twos))[1] 
  
  def move_five(five):
    five_center = center(five)
    two_upper = uppermost(merge(twos))
    offset = (two_upper - five_center[0] - 1, two_center_j - five_center[1]) 
    return shift(five, offset)

  moved_fives = apply(move_five, fives)
  O = cover(I, merge(fives))
  for moved_five in moved_fives:
    O = paint(O, moved_five)
  return O
 
11.333333333333334, 8.12694, def jdebdaeacfdfeebbidbcgdccaecfabfe(I):
  twos = merge(objects(I, True, False, True))
  fives = colorfilter(objects(I, True, False, True), 5)
  target_i = uppermost(twos) - 1
  target_j = center(twos)[1]
  
  moved_fives = frozenset()
  for five in fives:
    five_width = width(five)
    offset = (target_i - uppermost(five), target_j - leftmost(five) - (five_width // 2))
    moved_fives = insert(shift(five, offset), moved_fives)

  O = cover(I, merge(fives))
  for moved_five in moved_fives:
    O = paint(O, moved_five)
  return O
 
14.666666666666666, 13.499415, def jcdbdfahedffediiijagjejfbfibcaaa(I):
  indices2 = ofcolor(I, 2)  # Get indices of color 2
  indices5s = ofcolor(I, 5)  # Get indices of color 5
  target_row = uppermost(indices2)  # Target row
  shifted_indices5s = {(i + target_row - lowermost(indices5s) - 1, j) for i, j in indices5s} 
  O = paint(fill(canvas(0, shape(I)), 5, shifted_indices5s), toobject(indices2, I))
  return O 
 
12.666666666666666, 12.755945, def jaijegfdjdijebbdifjadgfibdadhbgg(I):
  objs = objects(I, T, F, F)
  obj2 = extract(objs, lambda obj: color(obj) == 2)
  obj5s = sfilter(objs, lambda obj: color(obj) == 5)
  target_y = uppermost(obj2) -  lowermost(first(obj5s)) - 1
  O = I
  for obj in obj5s:
    O = paint(cover(O, obj), shift(obj, (target_y, 0)))
  return O
 
25.666666666666668, 39.257523, def dcdeaabibbdaeddabbhdgfidfafabdjb(I):
  # Extract objects
  objs = objects(I, False, True, True)
  # Isolate object with value 5
  five_obj = extract(objs, lambda obj: color(obj) == 5)
  # Remove object with value 5 from the set of objects 
  other_objs = sfilter(objs, lambda obj: color(obj) != 5)
  # Determine the lowermost row index of the objects other than 5
  lowermost_row = lowermost(merge(other_objs))
  # Calculate the new upper left corner position for the object with value 5
  new_ulcorner = (lowermost_row + 1, leftmost(five_obj))
  # Shift the object with value 5 to its new position
  shifted_five_obj = shift(five_obj, subtract(new_ulcorner, ulcorner(five_obj)))
  # Construct the output grid by painting the shifted object onto a blank canvas
  O = paint(canvas(0, shape(I)), shifted_five_obj)
  return O
 
22.333333333333332, 55.776012, def jcdeifiadbbdeeddjjdegcdddccejhfc(I):
  fives = ofcolor(I, 5)
  others = difference(asindices(I), fives)
  target_row = lowermost(others) + 1
  shift_amount = (target_row - uppermost(fives), 0)
  O = paint(canvas(0, shape(I)), shift(recolor(5, fives), shift_amount))
  return O
 
25.333333333333332, 41.329548, def abcadibahedeebcabacbffdeecifjfji(I):
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)
  other_bottom = lowermost(merge(objects(I, False, True, True)) - {five_obj})
  shifted_obj = shift(five_obj, (other_bottom + 1 - uppermost(five_obj), 0))
  O = paint(canvas(0, shape(I)), shifted_obj)
  return O
 
15.333333333333334, 15.770623, def abaabdjffdjbefajieeiifbfbfegiaij(I):
    objs = objects(I, T, F, T)
    grid = canvas(ZERO, shape(I))
    for obj in objs:
        if color(obj) == 2:
            grid = paint(grid, obj)
    for obj in objs:
        if color(obj) == 5:
            new_obj = obj
            while True:
                down_obj = shift(new_obj, DOWN)
                if any(index(grid, loc) != 0 for loc in toindices(down_obj)):
                    break
                new_obj = down_obj
            grid = paint(grid, new_obj)
    O = grid
    return O
 
11.666666666666666, 10.846266, def fcaehgdebegfedacbccgaghhecaaiddi(I):
  twos = merge(objects(I, True, False, True))
  fives = colorfilter(objects(I, True, False, True), 5)
  two_center_j = centerofmass(twos)[1]
  two_upper_i = uppermost(twos) - 2 # Fixed vertical position above '2' objects

  def move_five(five):
    five_center_j = centerofmass(five)[1]
    return shift(five, (two_upper_i - uppermost(five), two_center_j - five_center_j))

  return paint(cover(I, merge(fives)), merge(apply(move_five, fives)))
 
9.666666666666666, 3.5134804, def jbjiedbegeceeeieabjajchebeeifbce(I):
  twos = merge(objects(I, True, False, True))
  fives = colorfilter(objects(I, True, False, True), 5)
  two_center = center(twos)

  def move_five(five):
    five_upper = uppermost(five)
    offset = (two_center[0] - 2 - five_upper, two_center[1] - center(five)[1])
    return shift(five, offset)

  return paint(cover(I, merge(fives)), merge(apply(move_five, fives)))
 
13.0, 11.693129, def jafdhaaejabgeajgifadjaiaghbbiejc(I):
    obj2 = extract(objects(I, T, F, F), matcher(color, 2))
    obj5s = sfilter(objects(I, T, F, F), matcher(color, 5))
    target_row = uppermost(obj2) - 1 
    moved_obj5s = frozenset(shift(obj, (target_row - lowermost(obj), 0)) for obj in obj5s)
    O = paint(fill(I, 0, mfilter(obj5s, identity)), merge(moved_obj5s))
    return O
 
12.0, 7.250531, def fghfeifdcadjeiabiiegcdfjccahdehi(I):
  # Find all objects
  objs = objects(I, False, True, True)
  # Find the object with color 5
  five_obj = extract(objs, lambda obj: color(obj) == 5)
  # Filter out the object with color 5
  other_objs = sfilter(objs, lambda obj: color(obj) != 5)
  # Calculate the center of mass of non-5 objects
  center_non_five = centerofmass(merge(other_objs))
  # Move the '5' object to the center of mass of other objects
  O = move(I, five_obj, subtract(center_non_five, centerofmass(five_obj)))
  return O
 
13.333333333333334, 7.298, def jddeccggcdjdebjhjggfbhbaccabdbfg(I):
  # Find all objects
  objs = objects(I, False, True, True)
  # Find the '5' object
  five_obj = extract(objs, lambda obj: color(obj) == 5)
  # Calculate the bounding box of non-'5' objects
  bbox_other = backdrop(merge(sfilter(objs, lambda obj: color(obj) != 5)))
  # Find the center of the bounding box
  center_bbox = center(bbox_other)
  # Move the '5' object to the center of the bounding box
  O = move(I, five_obj, subtract(center_bbox, centerofmass(five_obj)))
  return O
 
11.333333333333334, 7.0650377, def jeahdchhbabfedfeafabbeacajbbbbdj(I):
  # Find all objects
  objs = objects(I, False, True, True)
  # Find the object with color 5
  five_obj = extract(objs, lambda obj: color(obj) == 5)
  # Filter out the '5' object
  other_objs = sfilter(objs, lambda obj: color(obj) != 5)
  # Calculate the center of mass of non-5 objects
  center_non_five = centerofmass(merge(other_objs))
  # Find the closest point in the '5' object to the center of mass of other objects
  closest_point = argmin(
    toindices(five_obj),
    lambda loc: manhattan(initset(loc), initset(center_non_five))
  )
  # Move the '5' object so that the closest point aligns with the center of mass
  O = move(I, five_obj, subtract(center_non_five, closest_point))
  return O
 
15.333333333333334, 11.028077, def eeaijeefffdjeccebbieehadgjgfcfda(I):
  objs = objects(I, T, F, T)
  grid = I
  for obj in objs:
    if color(obj) == 5:
      bottom_reached = False
      offset = (1, 0)
      while not bottom_reached:
        new_obj = shift(obj, offset)
        if any(i >= len(grid) or j >= len(grid[0]) or grid[i][j] != 0 for i, j in toindices(new_obj)):
          bottom_reached = True
          grid = paint(cover(grid, obj), shift(obj, subtract(offset, (1, 0))))
        else:
          offset = add(offset, (1, 0))
  return grid
 
16.333333333333332, 9.49803, def gdgbdafafggaeccbajgbchabeajbacha(I):
  twos = merge(objects(I, True, False, True))
  fives = colorfilter(objects(I, True, False, True), 5)
  target_location = center(twos)

  def move_five(five):
    return shift(five, subtract(target_location, center(five)))

  moved_fives = apply(move_five, fives)
  return paint(I, merge(moved_fives))
 
15.333333333333334, 10.300185, def eedbbgifcfaieffaaegdibdahfgjccbg(I):
  objs = objects(I, False, True, True)
  five_obj = extract(objs, lambda obj: color(obj) == 5)
  other_objs = sfilter(objs, lambda obj: color(obj) != 5)
  center_non_five = centerofmass(merge(other_objs))
  target_pos = (uppermost(merge(other_objs)) - height(five_obj), center_non_five[1]) 
  O = move(I, five_obj, subtract(target_pos, centerofmass(five_obj)))
  return O
 
15.333333333333334, 10.299674, def dfgebdgbdgdaeeadjcdgcegdicfbjehe(I):
  objs = objects(I, False, True, True)
  five_obj = extract(objs, lambda obj: color(obj) == 5)
  other_objs = sfilter(objs, lambda obj: color(obj) != 5)
  target_loc = argmin(toindices(merge(other_objs)), lambda loc: loc[0])
  move_offset = (target_loc[0] - uppermost(five_obj), 0)
  O = move(I, five_obj, move_offset)
  return O
 
15.333333333333334, 15.042281, def jdefbfefbjgcecaaiaeccaefagjcabjj(I):
  five_indices = ofcolor(I, 5)
  other_indices = sfilter(asindices(I), lambda loc: index(I, loc) != 5)
  target_row = min(i for i, j in other_indices)
  offset = target_row - min(i for i, j in five_indices)
  O = paint(fill(I, 0, five_indices), shift(recolor(5, five_indices), (offset, 0)))
  return O
 
9.333333333333334, 17.113676, def jjfefbaddefdegcibfjefbaediafbjdf(I):
  five_indices = ofcolor(I, 5)
  target_row = min(i for i, j in asindices(I) if index(I, (i, j)) != 5)
  offset = (target_row - uppermost(five_indices), 0)
  moved_five = toobject(shift(five_indices, offset), I)
  O = paint(cover(I, five_indices), moved_five)
  return O
 
14.333333333333334, 11.092241, def dbggbdcdffcceadbijeifacbcabcfgah(I):
    grid = canvas(ZERO, shape(I))
    for obj in objects(I, T, F, T):
        if color(obj) != 5:
            grid = paint(grid, obj)
            continue
        down_obj = obj
        for i in range(height(I)):
            temp_obj = shift(down_obj, DOWN)
            if any(0 <= i < height(I) and 0 <= j < width(I) and index(I, (i, j)) != 0 for i, j in toindices(temp_obj)):
                break
            down_obj = temp_obj
        grid = paint(grid, down_obj)
    O = grid
    return O
 
15.333333333333334, 11.034042, def jgfghabcgddbedbdbeeibeaiadeecejf(I):
  twos = objects(I, True, False, True)
  fives = colorfilter(objects(I, True, False, True), 5)
  
  def move_five(five):
    two_center = center(extract(twos, lambda two: hmatching(two, five)))
    five_center = center(five)
    return shift(five, (two_center[0] - five_center[0], 0))

  moved_fives = apply(move_five, fives)
  return paint(cover(I, merge(fives)), merge(moved_fives))
 
15.333333333333334, 11.034042, def aadbfbahdjajehfcacbcaeadaccfgfja(I):
  five_obj = toobject(ofcolor(I, 5), I)
  other_objs = toobject(difference(asindices(I), ofcolor(I, 5)), I)
  direction = gravitate(five_obj, other_objs)
  O = move(I, five_obj, direction)
  return O
 
8.666666666666666, 7.9458284, def jagegdafccdjejbebgdfebaejfjegbch(I):
  five_obj = toobject(ofcolor(I, 5), I)
  target_area = outbox(toobject(difference(asindices(I), ofcolor(I, 5)), I))
  closest_point = argmin(target_area, lambda loc: manhattan({loc}, five_obj))
  O = move(I, five_obj, subtract(closest_point, centerofmass(five_obj)))
  return O
 
14.666666666666666, 8.865739, def faibdbhgaceaebhaicbeddeigejdiihc(I):
  def move_five(five):
    two_center_i = center(merge(objects(I, True, False, True) - {five}))[0]
    five_center_i = center(five)[0]
    return shift(five, (two_center_i - five_center_i, 0))
  fives = colorfilter(objects(I, True, False, True), 5)
  return paint(cover(I, merge(fives)), merge(apply(move_five, fives)))
 
29.0, 34.08011, def cchggaafffdceejibdabcdcbifdhifha(I):
  twos = objects(I, True, False, True) - colorfilter(objects(I, True, False, True), 5)
  def move_five(five):
    return shift(five, (center(merge(twos))[0]-center(five)[0], 0))
  return paint(cover(I, merge(objects(I, True, False, True))), merge(apply(move_five, colorfilter(objects(I, True, False, True), 5))))
 
21.0, 10.475352, def gfccbfddccihehgejjgefahcidfhcjdc(I):
  def move_obj(obj):
    other_color = 2 if color(obj) == 5 else 5
    target_center_i = center(merge(colorfilter(objects(I, True, False, True), other_color)))[0]
    obj_center_i = center(obj)[0]
    return shift(obj, (target_center_i - obj_center_i, 0))
  return paint(cover(I, merge(objects(I, True, False, True))), merge(apply(move_obj, objects(I, True, False, True)))) 
 
14.0, 11.803844, def dfijebbfgbfcefahjhciadgbjjacjfdb(I):
  five_obj = toobject(ofcolor(I, 5), I)
  other_objs = toobject(difference(asindices(I), ofcolor(I, 5)), I)
  h_dist = manhattan(
      toobject(hfrontier(center(five_obj)), I), other_objs
  )
  v_dist = manhattan(
      toobject(vfrontier(center(five_obj)), I), other_objs
  )
  offset = (
      0 if h_dist == 1 else (1 if h_dist < v_dist else -1), 
      0 if v_dist == 1 else (1 if v_dist < h_dist else -1)
  )
  O = move(I, five_obj, offset)
  return O
 
15.0, 10.778013, def jfdcddfbejefehcjahhcgcfdcehedfaf(I):
  twos = objects(I, True, False, True)
  fives = colorfilter(objects(I, True, False, True), 5)
  
  def move_five(five):
    closest_two = argmin(twos, lambda two: manhattan(five, two))
    two_center = center(closest_two)
    five_upper = uppermost(five)
    offset = (two_center[0] - five_upper - height(five), two_center[1] - center(five)[1])
    return shift(five, offset)

  return paint(cover(I, merge(fives)), merge(apply(move_five, fives)))
 
14.0, 11.359124, def dbafgefaddcdebddaejdcecefeieefad(I):
  twos = objects(I, True, False, True)
  fives = colorfilter(objects(I, True, False, True), 5)
  
  def move_five(five):
    closest_two = min(twos, key=lambda two: manhattan(five, two))
    target_pos = (uppermost(closest_two) - height(five), center(closest_two)[1])
    return shift(five, subtract(target_pos, ulcorner(five)))

  return paint(cover(I, merge(fives)), merge(apply(move_five, fives)))
 
13.0, 11.693129, def ffdebccbbfceeffbadbacfcgaafjhhbe(I):
  objs = objects(I, True, False, True)
  twos = colorfilter(objs, 2) 
  fives = colorfilter(objs, 5)
  
  def reposition_five(five):
    closest_two = min(twos, key=lambda two: abs(center(two)[1] - center(five)[1]))
    return shift(five, (uppermost(closest_two) - height(five) - uppermost(five), 0))

  return paint(cover(I, merge(fives)), merge(apply(reposition_five, fives)))
 
14.666666666666666, 11.641568, def bafejcbehbcbeddijfcbdjhddbcffbig(I):
  twos = objects(I, True, False, True) 
  fives = colorfilter(objects(I, True, False, True), 5)
  
  def move_above(five, twos):
    closest_two = min(twos, key=lambda two: manhattan(five, two))
    return shift(five, (uppermost(closest_two) - height(five) - uppermost(five), center(closest_two)[1] - center(five)[1]))

  return paint(cover(I, merge(fives)), merge(apply(rbind(move_above, twos), fives)))
 
9.666666666666666, 5.145848, def bihbbjaefeegejgajfdbbeehebjdecga(I):
  twos = merge(objects(I, True, False, True))
  fives = colorfilter(objects(I, True, False, True), 5)
  tj = centerofmass(twos)[1]
  fi = uppermost(merge(fives))
  
  def align_five(five):
    fj = centerofmass(five)[1]
    return shift(five, (0, tj - fj))

  return paint(cover(I, merge(fives)), merge(apply(lambda five: shift(align_five(five),(fi - uppermost(align_five(five)),0)), fives)))
 
11.0, 5.0501685, def jahfbgcffbdieabbjcdecdcabeadhief(I):
  twos = merge(objects(I, True, False, True))
  fives = colorfilter(objects(I, True, False, True), 5)
  two_center = center(twos)

  def move_five(five):
    five_center = center(five)
    return shift(five, (uppermost(twos) - uppermost(five), two_center[1] - five_center[1]))

  moved_fives = apply(move_five, fives)
  return paint(cover(I, merge(fives)), merge(moved_fives))
 
11.666666666666666, 15.528037, def daihccaecefgejidaifeebddababfdde(I):
  twos = merge(objects(I, True, False, True))
  fives = colorfilter(objects(I, True, False, True), 5)
  target_j = centerofmass(twos)[1]

  def align_five(five):
    offset = subtract((0, target_j), centerofmass(five))
    return shift(five, offset)

  return paint(cover(I, merge(fives)), merge(apply(align_five, fives)))
 
8.666666666666666, 3.7240102, def chbchjeafhbdedfhaadfcbcicjjbdadi(I):
  twos = merge(objects(I, True, False, True))
  fives = colorfilter(objects(I, True, False, True), 5)
  target_x, target_y = center(twos)
  
  def align_five(five):
    offset_x = target_x - center(five)[0]
    offset_y = target_y - center(five)[1]
    return shift(five, (offset_x, offset_y))

  return paint(cover(I, merge(fives)), merge(apply(align_five, fives)))
 
15.666666666666666, 8.515471, def biajgfbdccdjefefadfheaieiidhcahh(I):
  # Find '2' and '5' objects
  twos = objects(I, True, False, True)
  fives = colorfilter(objects(I, True, False, True), 5)

  # Find center column of '2' objects
  two_center_j = center(merge(twos))[1]

  # Create a new grid with '5' objects moved to the center column
  O = canvas(mostcolor(I), shape(I))
  O = paint(O, merge(twos))
  for obj in fives:
    new_obj = shift(obj, (0, two_center_j - center(obj)[1]))
    O = paint(O, new_obj)
  return O 
 
15.333333333333334, 11.034042, def cbjeajaebgcaehacjfhjhdibfedabjcf(I):
  objs = partition(I)
  bg = mostcolor(I)
  target_obj = extract(objs, lambda obj: color(obj) == 2) 
  movable_objs  = colorfilter(objs, 5)
  new_grid = canvas(bg, shape(I))
  new_grid = paint(new_grid, target_obj)
  for obj in movable_objs:
    direction = (0, center(target_obj)[1] - center(obj)[1])
    new_grid = paint(new_grid, shift(obj, direction))
  return new_grid
 
12.666666666666666, 7.756611, def edaffccedhefebebbhdbbbciiaaddjfj(I):
  # Find object with color 5
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)
  
  # Create a grid with only the '2' objects
  two_grid = paint(canvas(0, shape(I)), extract(objects(I, False, True, True), lambda obj: color(obj) == 2))

  # Center the '5' object horizontally relative to the '2' grid
  O = move(I, five_obj, subtract(centerofmass(asobject(two_grid)), centerofmass(five_obj)))
  
  return O
 
14.666666666666666, 10.505203, def bceahiehcfffecaebaddhfigaddbiccc(I):
  # Find the '5' object
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)

  # Find the '2' object
  two_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 2)

  # Calculate the vertical offset
  v_offset = uppermost(two_obj) + height(two_obj) // 2 - centerofmass(five_obj)[0]

  # Move the '5' object
  O = move(I, five_obj, (v_offset, 0))
  return O
 
12.0, 8.046578, def cgabaebfdbiheffeadgfgbbcgebbfifi(I):
  # Extract the '5' object
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)

  # Calculate the horizontal center of all objects except '5'
  center_j = centerofmass(merge(sfilter(objects(I, False, True, True), lambda obj: color(obj) != 5)))[1]
  
  # Calculate the horizontal offset for the '5' object
  h_offset = center_j - centerofmass(five_obj)[1]
  
  # Move the '5' object horizontally
  O = move(I, five_obj, (0, h_offset))
  return O
 
12.666666666666666, 7.879805, def echbgefdcdcaeejdabfaffacecicgbbi(I):
  # Find the '5' object
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)

  # Create a grid containing only non-'5' objects
  non_five_grid = paint(canvas(0, shape(I)), merge(sfilter(objects(I, False, True, True), lambda obj: color(obj) != 5)))

  # Calculate the horizontal center of the non-'5' grid
  center_j = centerofmass(asobject(non_five_grid))[1]

  # Calculate the offset to center the '5' object horizontally
  offset = (0, center_j - centerofmass(five_obj)[1])

  # Move the '5' object
  O = move(I, five_obj, offset)
  return O 
 
15.333333333333334, 12.000263, def jegaeefcdeehehjaahgidficjdechcei(I):
  objs = objects(I, False, True, True)
  five_obj = extract(objs, lambda obj: color(obj) == 5)
  other_objs = sfilter(objs, lambda obj: color(obj) != 5)
  top_edge = min(uppermost(obj) for obj in other_objs)
  target_pos = (top_edge - height(five_obj), leftmost(five_obj))
  O = move(I, five_obj, subtract(target_pos, ulcorner(five_obj)))
  return O
 
15.333333333333334, 9.880767, def cefcfcecbccfebefjcfabebacijgcfce(I):
  objs = objects(I, False, True, True)
  five_obj = extract(objs, lambda obj: color(obj) == 5)
  other_objs = sfilter(objs, lambda obj: color(obj) != 5)
  target_i = min(uppermost(obj) for obj in other_objs) - height(five_obj)
  target_j = max(rightmost(obj) for obj in other_objs) - width(five_obj)
  O = paint(cover(I, five_obj), shift(five_obj, (target_i - uppermost(five_obj), target_j - leftmost(five_obj))))
  return O
 
12.0, 11.542281, def bacecchccejfeaeajaeadbfiidajiaii(I):
  five_color = 5
  objs = objects(I, False, True, True)
  five_obj = extract(objs, lambda obj: color(obj) == five_color)
  non_five_cells = ((I[i][j], (i, j)) for i in range(len(I)) for j in range(len(I[0])) if I[i][j] != five_color)
  top_non_five_row = min(i for _, (i, _) in non_five_cells)
  five_obj_height = height(five_obj)
  five_obj_top_row = uppermost(five_obj)
  vertical_shift = top_non_five_row - five_obj_height - five_obj_top_row
  O = paint(cover(I, five_obj), shift(five_obj, (vertical_shift, 0)))
  return O
 
13.333333333333334, 11.7661085, def cadbafacefeeebfcaidieddjeeiicebb(I):
  fives = colorfilter(objects(I, True, False, True), 5)
  twos = colorfilter(objects(I, True, False, True), 2)

  def move_group(group):
    nearest_two = min(twos, key=lambda x: manhattan(x, group))
    target_center = (uppermost(nearest_two) - height(group) // 2 - 1, center(nearest_two)[1])
    return shift(group, subtract(target_center, center(group)))

  moved = apply(move_group, fives)
  return paint(cover(I, merge(fives)), merge(moved)) 
 
9.666666666666666, 5.6156287, def gbgbdabjehfdeefebghaadhdefhicdab(I):
  objs = objects(I, True, False, True)
  twos = merge(sfilter(objs, lambda obj: color(obj) == 2))
  fives = sfilter(objs, lambda obj: color(obj) == 5)
  two_center_j = center(twos)[1]
  
  def move_five(five):
    five_center_j = center(five)[1]
    return shift(five, (0, two_center_j - five_center_j))

  moved_fives = apply(move_five, fives)
  return paint(cover(I, merge(fives)), merge(moved_fives))
 
23.666666666666668, 14.87796, def cfefddgdiabfejfjicadihfdicddbaaj(I):
  twos = toobject(ofcolor(I, 2), I)
  fives = objects(I, True, False, True) - {twos}
  target_j = centerofmass(twos)[1]

  def align_five(five):
    return shift(five, (0, target_j - centerofmass(five)[1]))

  moved = apply(align_five, fives)
  return paint(cover(I, merge(fives)), merge(moved))
 
9.666666666666666, 5.535612, def eddccfdedfgdecjfbcddeeagedheajca(I):
  twos = objects(I, True, False, True)
  fives = colorfilter(objects(I, True, False, True), 5)
  target_j = centerofmass(merge(twos))[1]
  def move_horizontally(obj):
    return shift(obj, (0, target_j - centerofmass(obj)[1]))
  moved_fives = apply(move_horizontally, fives)
  return paint(cover(I, merge(fives)), merge(moved_fives))
 
13.0, 10.967258, def ieahdcfdibcaeefeabchcceefbfdbdde(I):
  target_obj = extract(objects(I, True, False, True), lambda obj: color(obj) == 2)
  movable_objs = colorfilter(objects(I, True, False, True), 5)
  target_j = centerofmass(target_obj)[1]
  def move_to_target(obj):
    offset = (0, target_j - centerofmass(obj)[1])
    return shift(obj, offset)
  moved_objs = apply(move_to_target, movable_objs)
  O = I
  for obj in movable_objs:
    O = cover(O, obj)
  for obj in moved_objs:
    O = paint(O, obj)
  return O
 
15.333333333333334, 9.809076, def eacajcfcbedaefjdaccbehccibedcfcc(I):
  # Find object with color 5
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)
  # Find object with color 2
  two_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 2)
  # Calculate the vertical offset 
  offset = subtract((0, centerofmass(two_obj)[1]), (0, centerofmass(five_obj)[1]))
  # Move the '5' object 
  O = move(I, five_obj, offset)
  return O
 
15.333333333333334, 10.453737, def bgejgeejhciaebceagjgggdhbfifabdb(I):
  # Get indices of '5' and '2' colors
  five_indices = toindices(extract(objects(I, False, True, True), lambda obj: color(obj) == 5))
  two_indices = toindices(extract(objects(I, False, True, True), lambda obj: color(obj) == 2))
  # Calculate average row index for '5' and '2'
  five_avg_row = sum(i for i, j in five_indices) // len(five_indices)
  two_avg_row = sum(i for i, j in two_indices) // len(two_indices)
  # Calculate the vertical offset 
  offset = (two_avg_row - five_avg_row, 0)
  # Move the '5' object
  O = move(I, recolor(5, five_indices), offset)
  return O 
 
15.333333333333334, 9.976848, def gbbfbdedicaaedafbegdecicfecaeeea(I):
  # Create a grid containing only object '2'
  two_grid = paint(canvas(0, shape(I)), extract(objects(I, False, True, True), lambda obj: color(obj) == 2))
  # Find object '5'
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)
  # Calculate the vertical offset to align centers
  offset = subtract(centerofmass(asobject(two_grid)), centerofmass(five_obj))
  # Move the '5' object vertically 
  O = move(I, five_obj, (offset[0], 0))
  return O
 
13.333333333333334, 11.457923, def efihcebaicfdecacjaabbejcaccabibb(I):
  # Extract objects with color '5' and '2'
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)
  two_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 2)
  # Calculate the difference in the y-coordinates of their upper-left corners
  y_diff = ulcorner(two_obj)[1] - ulcorner(five_obj)[1]
  # Move the '5' object vertically 
  O = move(I, five_obj, (y_diff, 0))
  return O
 
15.0, 12.186868, def bdbehjcdjcadeebaijaccbcfaefdhfeh(I):
  objs = objects(I, False, True, True)
  five_obj = extract(objs, matcher(color, 5))
  other_objs = sfilter(objs, lambda obj: color(obj) != 5)
  bottom_row = max(uppermost(obj) + height(obj) for obj in other_objs)
  target_i = bottom_row 
  target_j = round(sum(j for i, j in toindices(five_obj)) / size(five_obj))
  O = move(I, five_obj, (target_i - uppermost(five_obj), target_j - leftmost(five_obj)))
  return O
 
15.333333333333334, 11.034042, def dchbhbijdchcejbeibbebdfhbffcdcgb(I):
  twos = objects(I, True, False, True)
  fives = colorfilter(objects(I, True, False, True), 5)

  def reposition_five(five):
    target_two = min(twos, key=lambda two: manhattan(five, two))
    target_center = center(target_two)
    five_center = center(five)
    return shift(five, (target_center[0]-five_center[0], target_center[1]-five_center[1]))

  return paint(cover(I, merge(fives)), merge(apply(reposition_five, fives)))
 
15.333333333333334, 8.93083, def baicgffiededeibdbfdbhhdfdchiheie(I):
  objs = objects(I, True, False, True)
  twos = colorfilter(objs, 2)
  fives = colorfilter(objs, 5)

  def reposition_five(five):
    closest_two_center = center(min(twos, key=lambda two: manhattan(five, two)))
    five_center = center(five)
    return shift(five, subtract(closest_two_center, five_center))

  repositioned = apply(reposition_five, fives)
  return paint(cover(I, merge(fives)), merge(repositioned))
 
15.666666666666666, 8.515471, def fafcfgeedfjeeejdacigaadfjbaiaabh(I):
  twos = objects(I, True, False, True)
  fives = colorfilter(objects(I, True, False, True), 5)
  center_j = center(merge(twos))[1]
  
  def move_five(five):
    return shift(five, (0, center_j - center(five)[1]))

  return paint(I, merge(apply(move_five, fives)))
 
13.333333333333334, 10.313977, def afdabgaicdbceacbifibfbhjefbehcea(I):
  # Identify objects
  objs = partition(I)
  twos = colorfilter(objs, 2)
  fives = colorfilter(objs, 5)

  # Find target object (largest '2' object)
  target_obj = argmax(twos, size) 

  # Function to move object to nearest target column
  def move_to_target_column(obj):
    closest_loc = argmin(toindices(target_obj), lambda loc: abs(loc[1] - center(obj)[1]))
    return shift(obj, (0, closest_loc[1] - center(obj)[1]))

  # Move each '5' object
  moved_fives = apply(move_to_target_column, fives)
  
  # Modify the grid
  O = cover(I, merge(fives))
  for moved_five in moved_fives:
    O = paint(O, moved_five)
  return O
 
9.333333333333334, 7.2403617, def ehidaahbfgffejfejcbcjaacdjjaadci(I):
  objs = partition(I)
  target_obj = extract(objs, lambda obj: color(obj) == 2 and size(obj) > 1)
  movable_objs = colorfilter(objs, 5)

  O = I
  for obj in movable_objs:
    min_distance = 1000  # Initialize with a large value
    best_direction = (0, 0)
    for loc in toindices(target_obj):
      direction = gravitate(obj, frozenset({(mostcolor(I), loc)}))
      distance = abs(direction[0]) + abs(direction[1])  # Manhattan distance
      if distance < min_distance:
        min_distance = distance
        best_direction = direction
    O = move(O, obj, best_direction)
  return O
 
9.666666666666666, 5.5543113, def hjgffaaeggeaebdfbgbejcbecajhjhjb(I):
  # Identify objects
  twos = objects(I, True, False, True)
  fives = objects(I, True, False, True)
  fives = colorfilter(fives, 5)

  # Find the bounding box of all '2' objects
  twos_indices = merge(apply(toindices, twos))
  min_i = uppermost(twos_indices)
  max_i = lowermost(twos_indices)
  min_j = leftmost(twos_indices)
  max_j = rightmost(twos_indices)

  # Function to move object towards center of bounding box
  def move_to_center(obj):
    obj_center = center(obj)
    center_j = (max_j + min_j) // 2
    offset = (0, center_j - obj_center[1])
    return shift(obj, offset)

  # Move each '5' object to the center column
  moved_fives = apply(move_to_center, fives)

  # Modify the grid
  O = cover(I, merge(fives))
  for moved_five in moved_fives:
    O = paint(O, moved_five)
  return O
 
17.333333333333332, 12.899544, def eeacababehceeadfjdcccfcfabjcfdbf(I):
  objs = partition(I)
  target = extract(objs, lambda obj: color(obj) == 2 and size(obj) > 1)
  others = objs - {target}

  def move_towards_target(obj):
    obj_center = center(obj)
    target_center = center(target)
    if obj_center[1] < target_center[1]:
      return shift(obj, (0, 1))
    elif obj_center[1] > target_center[1]:
      return shift(obj, (0, -1))
    else:
      return obj

  moved_objs = apply(move_towards_target, others)
  O = cover(I, merge(others))
  for obj in moved_objs:
    O = paint(O, obj)
  return O
 
14.666666666666666, 11.277005, def hdchaajbfaceejaeicbiedbdcdjdabab(I):
  # Find object with color 5
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)
  # Move the '5' object one row down for each row in the top half 
  O = move(I, five_obj, (height(tophalf(I)), 0)) 
  return O
 
10.666666666666666, 8.165953, def afjjddbaehbdeffbjffaefgcfecdafaa(I):
  # Find object with color 5
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)
  # Find object with color 2
  two_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 2)
  # Calculate the horizontal offset to align left edge of '5' with right edge of '2'
  offset = (0, rightmost(two_obj) - leftmost(five_obj) + 1) 
  # Move the '5' object 
  O = move(I, five_obj, offset)
  return O
 
15.333333333333334, 9.944577, def aeeggajbadbceecbifjgdaffehidcaah(I):
  # Find all objects
  objs = objects(I, False, True, True)
  # Find the '5' object
  five_obj = extract(objs, lambda obj: color(obj) == 5)
  # Find objects that are not '5'
  other_objs = sfilter(objs, lambda obj: color(obj) != 5)
  # Calculate the center of mass of other objects
  center_other = centerofmass(merge(other_objs))
  # Move the '5' object above the center of mass
  O = move(I, five_obj, (subtract(center_other, centerofmass(five_obj))[0],0))
  return O 
 
15.333333333333334, 9.976848, def ajcabbedgeeiefcciecddegecjbebfaf(I):
  # Find the '5' object
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)
  # Create a grid with only the '2' objects
  two_grid = fill(I, 0, ofcolor(I, 5))
  # Calculate the center of mass of the '2' grid
  center_two = centerofmass(asobject(two_grid))
  # Move the '5' object above the center of mass of the '2' grid
  return move(I, five_obj, (subtract(center_two, centerofmass(five_obj))[0], 0))
 
15.0, 11.022311, def ijcgjfdbefdaefijbjigaccdaefeabbi(I):
  # Find indices of '5' and '2'
  five_indices = ofcolor(I, 5)
  two_indices = ofcolor(I, 2)
  # Calculate centers of mass
  five_center = centerofmass(five_indices)
  two_center = centerofmass(two_indices)
  # Calculate the vertical offset
  offset = subtract(two_center, five_center)[0]
  # Move '5's to the new location
  return fill(fill(I, 0, five_indices), 5, shift(five_indices, (offset, 0)))
 
40.333333333333336, 14.384155, def hjadeegefcbceedgiiiajbfecfdgfcfg(I):
  # Find the bounding boxes of '5's and '2's
  five_bbox = backdrop(ofcolor(I, 5))
  two_bbox = backdrop(ofcolor(I, 2))
  # Calculate the vertical centers of the bounding boxes
  five_center = center(five_bbox)[0]
  two_center = center(two_bbox)[0]
  # Calculate the vertical offset
  offset = two_center - five_center
  # Move the '5' object 
  return paint(fill(I, 0, ofcolor(I, 5)), shift(recolor(5, five_bbox), (offset, 0)))
 
14.666666666666666, 13.7789955, def eiibdccfecagefgbaicjcbbcbbfedfdd(I):
  twos = objects(I, True, False, True)
  fives = colorfilter(objects(I, True, False, True), 5)
  two_bottom = lowermost(merge(apply(toindices, twos)))
  
  def move_five(five):
    five_upper = uppermost(toindices(five))
    return shift(five, (two_bottom - five_upper + 1, 0))

  moved_fives = apply(move_five, fives)
  O = cover(I, merge(fives))
  for moved_five in moved_fives:
    O = paint(O, moved_five)
  return O
 
10.0, 17.728712, def afcjdebbdbabedbhicgcegbcfbdbcfbf(I):
  twos = objects(I, True, False, True)
  fives = colorfilter(objects(I, True, False, True), 5)
  two_right = rightmost(merge(apply(toindices, twos)))
  
  def move_five(five):
    five_left = leftmost(toindices(five))
    return shift(five, (0, two_right - five_left + 1))

  moved_fives = apply(move_five, fives)
  O = cover(I, merge(fives))
  for moved_five in moved_fives:
    O = paint(O, moved_five)
  return O
 
9.0, 18.675385, def jdciacbcgacaeddhbefecbfhdhebgffb(I):
  twos = objects(I, True, False, True)
  fives = colorfilter(objects(I, True, False, True), 5)
  two_indices = merge(apply(toindices, twos))
  two_right = rightmost(two_indices)
  two_top = uppermost(two_indices)
  two_bottom = lowermost(two_indices)

  def move_five(five):
    five_left = leftmost(toindices(five))
    shift_horizontal = two_right - five_left + 1
    five_top = uppermost(toindices(five))
    if len(fives) == 2:
      shift_vertical = two_top if five_top < center(five)[0] else two_bottom - height(five) + 1 
    else:
      shift_vertical = 0
    return shift(five, (shift_vertical, shift_horizontal))

  moved_fives = apply(move_five, fives)
  O = cover(I, merge(fives))
  for moved_five in moved_fives:
    O = paint(O, moved_five)
  return O
 
15.333333333333334, 10.299674, def ecedhjfdbdhceiceacdfibdaceeifbbh(I):
  # Find object with color 5
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)
  # Find object with color 2
  two_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 2)
  # Calculate the vertical offset to align the top of '5' with the top of '2'
  offset = (uppermost(two_obj) - uppermost(five_obj), 0)
  # Move the '5' object 
  O = move(I, five_obj, offset)
  return O
 
15.333333333333334, 12.000263, def gacachbeagbbefceibadbihaggicajfj(I):
  # Find the '5' object
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)
  # Find the '2' object
  two_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 2)
  # Calculate the vertical offset to align the bottom of '5' with the top of '2'
  offset = (uppermost(two_obj) - lowermost(five_obj) - 1, 0) 
  # Move the '5' object
  O = move(I, five_obj, offset)
  return O
 
27.0, 25.540651, def edaddhbdgceaefdgiaaecehchfgcccee(I):
  five = objects(I, True, True, True) & colorfilter(objects(I, True, True, True), 5)
  two = objects(I, True, True, True) & colorfilter(objects(I, True, True, True), 2)
  O = paint(paint(canvas(0, shape(I)), shift(first(two), (uppermost(first(five)) - uppermost(first(two)), 0))), first(five))
  return O
 
14.0, 10.379104, def bcbieccaibbfecdejafidejfiegicfcf(I):
  objs = objects(I, False, True, True)
  two_obj = extract(objs, lambda obj: color(obj) == 2)
  five_obj = extract(objs, lambda obj: color(obj) == 5)
  center_two = center(two_obj)
  center_five = center(five_obj)
  height_five = height(five_obj) 
  O = move(I, five_obj, (subtract(center_two, center_five)[0], center_two[0] - center_five[0] - height_five))
  return O
 
15.333333333333334, 10.5908985, def ibeafiajdgfeefgaaacdiebcbajfefhg(I):
  objs = objects(I, False, True, True)
  two_obj = extract(objs, matcher(color, 2))
  five_obj = extract(objs, matcher(color, 5))
  target_pos = (center(two_obj)[0] - height(five_obj), center(two_obj)[1])
  O = move(I, five_obj, subtract(target_pos, center(five_obj)))
  return O
 
12.666666666666666, 10.220571, def gbceddfababgebcbjbijcicibaadggec(I):
  objs = objects(I, False, True, True)
  five_obj = extract(objs, lambda obj: color(obj) == 5)
  other_objs = sfilter(objs, lambda obj: color(obj) != 5)
  two_top = uppermost(extract(other_objs, lambda obj: color(obj) == 2))
  five_bottom = lowermost(five_obj)
  O = move(I, five_obj, (0, two_top - five_bottom - 1))
  return O
 
12.666666666666666, 11.4526415, def ggjdchdaebbbedefadfebcecfbdffbef(I):
  objs = objects(I, False, True, True)
  two_obj = extract(objs, lambda obj: color(obj) == 2)
  five_obj = extract(objs, lambda obj: color(obj) == 5)
  v_offset =  uppermost(two_obj) - lowermost(five_obj) - 1
  h_offset = centerofmass(two_obj)[1] - centerofmass(five_obj)[1] 
  O = move(I, five_obj, (h_offset, v_offset))
  return O
 
14.0, 9.812342, def idddbjafbihaefdfiedffcbiajhfacdh(I):
  objs = objects(I, False, True, True)
  two_obj = extract(objs, lambda obj: color(obj) == 2)
  five_obj = extract(objs, lambda obj: color(obj) == 5)
  new_five_obj = shift(five_obj, gravitate(five_obj, two_obj))
  O = paint(cover(I, five_obj), new_five_obj)
  return O
 
15.333333333333334, 11.034042, def hacahbfdacfjeidijfbffecjeajagefc(I):
  two_center = center(merge(objects(I, True, False, True)))
  five_obj = merge(colorfilter(objects(I, True, False, True), 5))
  five_center = center(five_obj)
  offset = subtract(two_center, five_center)
  return paint(cover(I, five_obj), shift(five_obj, offset))
 
14.666666666666666, 11.230318, def befcjfdagjfaedciideaeacfcceadeab(I):
  two_obj = merge(objects(I, True, False, True))
  five_obj = merge(colorfilter(objects(I, True, False, True), 5))
  return move(cover(I, five_obj), five_obj, gravitate(five_obj, two_obj))
 
13.333333333333334, 12.78389, def jhdeihcbhadcecbdbhjaedbehhicedad(I):
  # Identify objects
  twos = objects(I, True, False, True)
  fives = colorfilter(objects(I, True, False, True), 5)

  # Find center column of '2' objects
  two_center_j = center(merge(twos))[1]

  # Function to move object to center column
  def move_to_center_column(obj, idx):
    obj_center = center(obj)
    two_top = uppermost(merge(apply(toindices, twos)))
    two_bottom = lowermost(merge(apply(toindices, twos)))
    shift_horizontal = two_center_j - obj_center[1]
    shift_vertical = 0
    if len(fives) == 2:
      shift_vertical = two_top if idx == 0 else two_bottom - height(obj) + 1
    return shift(obj, (shift_vertical, shift_horizontal))

  # Move each '5' object to the center column
  moved_fives = {move_to_center_column(five, idx) for idx, five in enumerate(fives)}

  # Modify the grid
  O = cover(I, merge(fives))
  for moved_five in moved_fives:
    O = paint(O, moved_five)
  return O
 
13.333333333333334, 12.599898, def eccfdaeeafgieabcjjfdbeafbffejdgd(I):
  # Identify objects
  twos = objects(I, True, False, True)
  fives = colorfilter(objects(I, True, False, True), 5)

  # Find the bounding box of all '2' objects
  twos_indices = merge(apply(toindices, twos))
  min_i = uppermost(twos_indices)
  max_i = lowermost(twos_indices)
  center_j = (rightmost(twos_indices) + leftmost(twos_indices)) // 2

  # Function to move object towards center of bounding box
  def move_to_center(obj, idx):
    obj_center = center(obj)
    shift_horizontal = center_j - obj_center[1]
    shift_vertical = 0
    if len(fives) == 2:
      shift_vertical = min_i if idx == 0 else max_i - height(obj) + 1
    return shift(obj, (shift_vertical, shift_horizontal))

  # Move each '5' object to the center column
  moved_fives = {move_to_center(five, idx) for idx, five in enumerate(fives)}

  # Modify the grid
  O = cover(I, merge(fives))
  for moved_five in moved_fives:
    O = paint(O, moved_five)
  return O
 
12.666666666666666, 7.550136, def gfbjafacdehdeiegafdjdaafdhfdieea(I):
  # Identify objects
  twos = objects(I, True, False, True)
  fives = colorfilter(objects(I, True, False, True), 5)

  # Find center column and top/bottom rows of '2' objects
  two_center_j = center(merge(twos))[1]
  two_top = uppermost(merge(apply(toindices, twos)))
  two_bottom = lowermost(merge(apply(toindices, twos)))

  def move_five(five, idx):
    shift_horizontal = two_center_j - center(five)[1]
    if len(fives) == 2:
      shift_vertical = two_top - uppermost(five) if idx == 0 else two_bottom - lowermost(five) + 1
    else:
      shift_vertical = 0
    return shift(five, (shift_vertical, shift_horizontal))

  # Move each '5' object
  moved_fives = {move_five(five, idx) for idx, five in enumerate(fives)}

  # Modify the grid
  O = cover(I, merge(fives))
  for moved_five in moved_fives:
    O = paint(O, moved_five)
  return O
 
15.333333333333334, 10.222514, def ahajjahdfeaheefbbjeeajdghdicbibe(I):
  objs = objects(I, False, True, True)
  five_obj = extract(objs, lambda obj: color(obj) == 5)
  other_objs = sfilter(objs, lambda obj: color(obj) != 5)
  closest_obj = argmin(other_objs, lambda obj: manhattan(five_obj, obj))
  direction = position(five_obj, closest_obj)
  moved_five_obj = shift(five_obj, multiply(direction, (height(five_obj) // 2 + 1, width(five_obj) // 2 + 1)))
  O = paint(cover(I, five_obj), moved_five_obj)
  return O
 
15.333333333333334, 11.034042, def jbbfefhjedceeiceiefcejiebifgbaea(I):
  objs = objects(I, False, True, True)
  five_obj = extract(objs, lambda obj: color(obj) == 5)
  other_objs = sfilter(objs, lambda obj: color(obj) != 5)
  movement = (0, 0)
  for obj in other_objs:
    if hmatching(five_obj, obj):
      movement = (sign(centerofmass(obj)[0] - centerofmass(five_obj)[0]), 0)
      break
    elif vmatching(five_obj, obj):
      movement = (0, sign(centerofmass(obj)[1] - centerofmass(five_obj)[1]))
      break
  O = move(I, five_obj, multiply(movement, shape(five_obj)))
  return O
 
14.666666666666666, 11.23532, def fdcibefgeabbeddajijbehbbiabfeggf(I):
  objs = objects(I, False, True, True)
  five_obj = extract(objs, lambda obj: color(obj) == 5)
  other_objs = sfilter(objs, lambda obj: color(obj) != 5)
  O = I
  for obj in other_objs:
    O = move(O, five_obj, gravitate(five_obj, obj))
  return O
 
15.333333333333334, 11.050605, def jaigjidbddjdecfejbiiafdcjdihagej(I):
  objs = objects(I, False, True, True)
  five_obj = extract(objs, lambda obj: color(obj) == 5)
  five_center = centerofmass(five_obj)
  other_objs = sfilter(objs, lambda obj: color(obj) != 5)
  distances = [(manhattan(initset(five_center), obj), obj) for obj in other_objs]
  closest_obj = min(distances)[1]
  v_diff = uppermost(closest_obj) - uppermost(five_obj)
  h_diff = leftmost(closest_obj) - leftmost(five_obj)
  offset = (v_diff if abs(v_diff) < height(five_obj) else 0, h_diff if abs(h_diff) < width(five_obj) else 0)
  O = move(I, five_obj, offset)
  return O
 
15.333333333333334, 11.767057, def jdcihedcdbcbegcjjfdfjfeeiceicdae(I):
  objs = objects(I, False, True, True)
  five_obj = extract(objs, lambda obj: color(obj) == 5)
  two_obj = extract(objs, lambda obj: color(obj) == 2)
  move_vec = subtract(ulcorner(two_obj), (lowermost(five_obj) + 1, ulcorner(five_obj)[1]))
  O = move(I, five_obj, move_vec)
  return O
 
15.333333333333334, 10.62036, def djjbeabhbefiegjcjbbddjgaffggeaeh(I):
  objs = objects(I, False, True, True)
  five_obj = extract(objs, lambda obj: color(obj) == 5)
  two_obj = extract(objs, lambda obj: color(obj) == 2)
  h_diff = subtract(centerofmass(two_obj), centerofmass(five_obj))[1]
  v_diff = uppermost(two_obj) - (lowermost(five_obj) + 1) 
  O = move(I, five_obj, (v_diff, h_diff))
  return O
 
15.333333333333334, 11.058509, def eabefhcbibcbebhjadijbcffcaieefid(I):
  twos = colorfilter(objects(I, True, False, True), 2)
  fives = colorfilter(objects(I, True, False, True), 5)
  new_I = cover(I, merge(fives))

  for five in fives:
    closest_two = argmin(twos, lambda two: manhattan(five, two))
    diff = subtract(ulcorner(closest_two), ulcorner(five))
    new_I = paint(new_I, shift(five, diff))

  return new_I
 
16.333333333333332, 9.49803, def gbhibbdcddeeeeffbiahbjcghcdjicbb(I):
  target = center(toindices(merge(objects(I, True, False, True)))) 
  def reposition(obj):
    offset = subtract(target, center(toindices(obj)))
    return shift(obj, offset)
  return paint(I, merge(apply(reposition, colorfilter(objects(I, True, False, True), 5)))) 
 
6.0, 2.3020036, def fbcdaddacbfgeigdabdffhbadhcedcbc(I):
  twos = colorfilter(objects(I, True, False, True), 2)
  target = center(merge(twos))
  def move_to_target(obj):
    return shift(obj, gravitate(obj, frozenset({(0, target)})))
  fives = colorfilter(objects(I, True, False, True), 5)
  moved_fives = apply(move_to_target, fives)
  return paint(cover(I, merge(fives)), merge(moved_fives))
 
14.333333333333334, 12.193902, def dfdebecabeibehidjccgeedjafdejehb(I):
  objs = partition(I)
  target = center(merge(colorfilter(objs, 2))) 
  def move_towards_target(obj):
    offset = subtract(target, centerofmass(obj))
    return shift(obj, (sign(offset[0]), sign(offset[1])))
  moved_fives = apply(move_towards_target, colorfilter(objs, 5))
  return paint(cover(I, merge(colorfilter(objs, 5))), merge(moved_fives)) 
 
6.666666666666667, 2.4291322, def dcjhchdababaeffaafbfdecchfedachc(I):
  target = center(merge(colorfilter(objects(I, True, False, True), 2)))
  def move_towards_target(obj):
    offset = subtract(target, center(toindices(obj)))
    return shift(obj, (crement(offset[0]), crement(offset[1])))
  fives = colorfilter(objects(I, True, False, True), 5)
  moved_fives = apply(move_towards_target, fives)
  return paint(cover(I, merge(fives)), merge(moved_fives))
 
15.0, 11.924066, def adgfeebdegdfebdeidaaiiiabbgcbhgi(I):
  def find_closest_two_cell(obj):
    twos = ofcolor(I, 2)
    return argmin(toindices(obj), lambda loc: manhattan(frozenset({loc}), twos))
  def move_to_closest_two(obj):
    target_loc = find_closest_two_cell(obj)
    return shift(obj, gravitate(obj, frozenset({(0, target_loc)})))
  fives = colorfilter(objects(I, True, False, True), 5)
  moved_fives = apply(move_to_closest_two, fives)
  return paint(cover(I, merge(fives)), merge(moved_fives))
 
15.333333333333334, 12.186119, def agahbcfcceajedjcjbbeiccejibdcicd(I):
  twos = colorfilter(objects(I, True, False, True), 2)
  target = centerofmass(merge(twos))
  def move_and_merge(obj):
    moved_obj = shift(obj, (sign(target[0]-centerofmass(obj)[0]), sign(target[1]-centerofmass(obj)[1])))
    return toobject(backdrop(moved_obj), paint(cover(I, obj), moved_obj))
  fives = colorfilter(objects(I, True, False, True), 5)
  new_fives = apply(move_and_merge, fives)
  return paint(cover(I, merge(fives)), merge(new_fives))
 
14.0, 9.182332, def djdjifecdjjbecacihcaejfbeffdcbfd(I):
  # Find the object with color 5
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)
  # Find the object with color 2
  two_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 2)
  # Find the closest point in the '2' object to the center of mass of '5' object
  closest_point = argmin(
    toindices(two_obj),
    lambda loc: manhattan(initset(loc), toindices(five_obj))
  )
  # Calculate the offset to move '5' object adjacent to '2' object
  offset = subtract(closest_point, argmin(
    toindices(five_obj),
    lambda loc: manhattan(initset(loc), initset(closest_point))
  ))
  # Move the '5' object
  O = move(I, five_obj, offset)
  return O
 
14.0, 9.812342, def efgccchbdhhdejdbaiibaceecahihgbd(I):
  # Find the '5' and '2' objects
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)
  two_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 2)
  # Calculate the gravitation vector
  offset = gravitate(toindices(five_obj), toindices(two_obj))
  # Move the '5' object using the gravitation vector
  O = move(I, five_obj, offset)
  return O
 
15.333333333333334, 10.495127, def fbfebfidbhjdejaebdigeihjfaccefch(I):
  # Find the '5' object
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)
  # Find the '2' object
  two_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 2)
  # Calculate the minimum Manhattan distance between the two objects
  min_distance = manhattan(toindices(five_obj), toindices(two_obj))
  # Define possible movements
  movements = ((-1, 0), (1, 0), (0, -1), (0, 1))
  # Find the movement that minimizes the distance
  best_move = argmin(movements, lambda move: manhattan(toindices(shift(five_obj, move)), toindices(two_obj)))
  # Move the '5' object
  O = move(I, five_obj, best_move)
  return O
 
15.333333333333334, 10.224918, def hbdadbcheegaecbfbciahfjagdbfdgef(I):
  # Find the '5' object
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)
  # Find the '2' object
  two_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 2)
  # Calculate the center of mass for both objects
  five_center = centerofmass(five_obj)
  two_center = centerofmass(two_obj)
  # Calculate the difference in x and y coordinates
  diff_x = two_center[1] - five_center[1]
  diff_y = two_center[0] - five_center[0]
  # Calculate the move based on the sign of the difference
  move_x = sign(diff_x)
  move_y = sign(diff_y)
  # Move the '5' object
  O = move(I, five_obj, (move_y, move_x))
  return O
 
13.333333333333334, 8.14608, def dbhbgbbcaadeefaajdjigafefgaaacfa(I):
  # Create a grid with only the '2' object
  two_grid = fill(I, 0, ofcolor(I, 5))
  
  # Find the '5' object
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)
  
  # Calculate the target position for the upper-left corner of the '5' object
  target_corner = subtract(
      centerofmass(asobject(two_grid)), 
      (height(five_obj) // 2, width(five_obj) // 2)
  )
  
  # Calculate the required shift for the '5' object
  shift_amount = subtract(target_corner, ulcorner(five_obj))
  
  # Move the '5' object
  return move(I, five_obj, shift_amount)
 
15.333333333333334, 10.83753, def daijaegdbbejedahibjehbdcabdjddbe(I):
  # Extract the '5' object
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)

  # Create a function to calculate the target row for the '5' object
  def target_row(grid):
    for i, row in enumerate(grid):
      if 2 in row:
        return i - height(five_obj) - 1
    return 0  # Default if '2' is not found

  # Move the '5' object to the target row and center it horizontally
  return move(I, five_obj, (target_row(I) - uppermost(five_obj), subtract(center(asindices(I)), centerofmass(five_obj))[1])) 
 
15.333333333333334, 10.867456, def gjdaaaidbhafebfdaaahaacfffbjhcif(I):
  # Find the '5' object and the '2' object
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)
  two_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 2)
  
  # Calculate the difference in center of mass between the '2' object and '5' object
  diff = subtract(centerofmass(two_obj), centerofmass(five_obj))
  
  # Adjust the vertical shift based on input characteristics 
  v_shift = diff[0] - (height(five_obj) + 1 if height(two_obj) > 1 else height(five_obj))

  # Move the '5' object
  return move(I, five_obj, (v_shift, diff[1])) 
 
13.666666666666666, 10.834482, def hcjcagdfdcdfecfdjbcidabfaaedbfdd(I):
  # Get a list of all '5' cells
  five_cells = toindices(extract(objects(I, False, True, True), lambda obj: color(obj) == 5))
  
  # Find the '2' object
  two_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 2)

  # Calculate the target row for the '5' cells
  target_row = uppermost(two_obj) - 1
  
  # Move each '5' cell individually to the target row while maintaining its relative horizontal position
  new_I = I
  for i, j in five_cells:
    new_I = paint(cover(new_I, {(5, (i, j))}), {(5, (target_row, j))})

  return new_I
 
5.333333333333333, 2.2237704, def dhfgfjgjdbeaeadcieaagcebcgadjcdf(I):
  # Find center of '2' objects using a loop
  twos = toindices(merge(colorfilter(objects(I, True, False, True), 2)))
  target_i, target_j = 0, 0
  count = 0
  for i, j in twos:
    target_i += i
    target_j += j
    count += 1
  target = (target_i // count, target_j // count)

  # Function to move object towards target
  def move_to_target(obj):
    return shift(obj, gravitate(obj, frozenset({(0, target)})))

  # Identify and move '5' objects
  fives = colorfilter(objects(I, True, False, True), 5)
  moved_fives = apply(move_to_target, fives)

  # Combine original grid with moved objects
  return underpaint(cover(I, merge(fives)), merge(moved_fives))
 
15.333333333333334, 9.648818, def cihaiebdggcdedadbaigeggaadaebdef(I):
  # Find objects
  objs = objects(I, False, True, True)
  # Find the '5' object
  five_obj = extract(objs, lambda obj: color(obj) == 5)
  # Find the '2' object
  two_obj = extract(objs, lambda obj: color(obj) == 2)
  # Calculate the difference in center of masses
  diff = subtract(centerofmass(two_obj), centerofmass(five_obj))
  # Adjust vertical offset to be directly above
  offset = (diff[0] - 1, diff[1])
  # Move the '5' object 
  O = move(I, five_obj, offset)
  return O
 
15.333333333333334, 9.539345, def ghbdeheddgaheacfadfbcdgdejidgebe(I):
  objs = objects(I, False, True, True)
  two_obj = extract(objs, lambda obj: color(obj) == 2)
  five_obj = extract(objs, lambda obj: color(obj) == 5)
  center_two = center(two_obj)
  center_five = center(five_obj)
  O = move(I, five_obj, (center_two[0]-center_five[0], center_two[1]-center_five[1]))
  return O
 
11.0, 13.174897, def fcceaacjbjecejffibjcfccajbiecbfj(I):
  objs = partition(I)
  two_idx = ulcorner(extract(objs, matcher(color, 2)))
  five_obj = extract(objs, matcher(color, 5))
  five_idx = ulcorner(five_obj)
  O = move(I, five_obj, subtract(two_idx, five_idx))
  return O
 
9.666666666666666, 11.488737, def biibaiedhfebeegjjbfcfdeehcehacae(I):
  two_idx = first(ofcolor(I, 2))
  five_obj = recolor(5, ofcolor(I, 5)) 
  O = paint(fill(I, 0, ofcolor(I, 5)), shift(five_obj, subtract(two_idx, ulcorner(five_obj))))
  return O
 
7.333333333333333, 2.305106, def eadfbaaeiifjeghabceaijdffjbebccg(I):
  # Find the target location: center of mass of '2' objects
  target = centerofmass(toobject(ofcolor(I, 2), I))

  # Function to calculate the direction towards the target
  def direction_to_target(obj):
    obj_center = center(obj)
    return (sign(target[0]-obj_center[0]), sign(target[1]-obj_center[1]))

  # Function to move an object one step towards the target
  def move_one_step(obj):
    return shift(obj, direction_to_target(obj))

  # Move '5' objects iteratively until adjacent to the target
  fives = colorfilter(objects(I, True, False, True), 5)
  moved_fives = fives
  while any(manhattan(obj, frozenset({(0, target)})) > 1 for obj in moved_fives):
    moved_fives = frozenset(move_one_step(obj) for obj in moved_fives)

  # Combine the original grid (without '5's) with the moved '5's
  return paint(cover(I, merge(fives)), merge(moved_fives))
 
7.333333333333333, 3.1217299, def iccbhgfagbeaehdfjehdjibjhgcaibad(I):
  # Find the target location
  target = centerofmass(toobject(ofcolor(I, 2), I))

  # Function to move an object towards the target
  def move_to_target(obj):
    obj_center = center(obj)
    h_offset = crement(target[0] - obj_center[0])
    v_offset = crement(target[1] - obj_center[1])
    return shift(obj, (h_offset, v_offset))

  # Apply movement to '5' objects until adjacent to the target
  fives = colorfilter(objects(I, True, False, True), 5)
  moved_fives = fives
  while any(manhattan(obj, frozenset({(0, target)})) > 1 for obj in moved_fives):
    moved_fives = frozenset(move_to_target(obj) for obj in moved_fives)

  # Combine the grids
  return paint(cover(I, merge(fives)), merge(moved_fives))
 
15.333333333333334, 12.091475, def bafaibecchbaejdeaijbhefdjfegcafe(I):
  # Target location
  target_indices = ofcolor(I, 2)
  target = centerofmass(toobject(target_indices, I))

  def move_towards_target(obj):
    # Calculate the direction towards the target
    obj_center = center(obj)
    h_direction = sign(target[0] - obj_center[0])
    v_direction = sign(target[1] - obj_center[1])

    # Move one step in the calculated direction
    return shift(obj, (h_direction, v_direction))

  # Move all '5' objects towards the target until adjacent
  five_objects = colorfilter(objects(I, True, False, True), 5)
  moved_objects = five_objects
  while not any(adjacent(five_obj, target_indices) for five_obj in moved_objects):
    moved_objects = frozenset(move_towards_target(obj) for obj in moved_objects)

  # Combine the original grid (without '5' objects) with the moved objects
  return paint(cover(I, merge(five_objects)), merge(moved_objects))
 
15.333333333333334, 10.782613, def dihaecbebgbdeidajejfdhhcfebgggag(I):
  objs = objects(I, False, True, True)
  five_obj = extract(objs, lambda obj: color(obj) == 5)
  two_obj = extract(objs, lambda obj: color(obj) == 2)
  offset = subtract(ulcorner(two_obj), ulcorner(five_obj))
  offset = (offset[0] + height(two_obj), offset[1])
  O = move(I, five_obj, offset)
  return O
 
15.333333333333334, 9.539345, def fbeeeaihabbeegecachchbbafcidjbaj(I):
  five_indices = toindices(extract(objects(I, False, True, True), lambda obj: color(obj) == 5))
  two_center = centerofmass(extract(objects(I, False, True, True), lambda obj: color(obj) == 2))
  five_center = centerofmass(recolor(5, five_indices))
  offset = subtract(two_center, five_center)
  O = move(I, recolor(5, five_indices), offset)
  return O
 
14.666666666666666, 9.807851, def cgjcbchjfbcgeaaaibfgdbbhagbebeib(I):
  objs = objects(I, False, True, True)
  five_obj = extract(objs, lambda obj: color(obj) == 5)
  two_obj = extract(objs, lambda obj: color(obj) == 2)
  offset = gravitate(five_obj, two_obj)
  offset = (offset[0] + 1, offset[1]) 
  O = move(I, five_obj, offset)
  return O
 
14.666666666666666, 11.0048, def bffbhaeaefdieeefbeifacebddeaeaec(I):
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)
  two_bottom = (lowermost(extract(objects(I, False, True, True), lambda obj: color(obj) == 2)), 0)
  five_top = (uppermost(five_obj), 0)
  offset = subtract(two_bottom, five_top)
  O = move(I, five_obj, offset)
  return O
 
14.666666666666666, 10.140894, def hdgfcfjecaaaehajjdbabefabcjicafa(I):
  objs = objects(I, False, True, True)
  five_obj = extract(objs, lambda obj: color(obj) == 5)
  two_obj = extract(objs, lambda obj: color(obj) == 2)
  v_offset =  (lowermost(two_obj) - uppermost(five_obj), 0)
  h_offset =  (0, leftmost(two_obj) + width(two_obj) // 2 - leftmost(five_obj) - width(five_obj) // 2)
  offset = add(v_offset, h_offset) 
  O = move(I, five_obj, offset)
  return O
 
11.0, 15.063303, def fiaicbejhicgehcebbhieebffccfeafa(I):
  objs = objects(I, False, True, True)
  five_obj = extract(objs, lambda obj: color(obj) == 5)
  other_objs = sfilter(objs, lambda obj: color(obj) != 5)
  O = canvas(0, shape(I))
  for obj in other_objs:
    O = paint(O, obj)
  target_loc = (lowermost(first(other_objs)) + 1, center(five_obj)[1])
  O = paint(O, shift(five_obj, subtract(target_loc, ulcorner(five_obj))))
  return O
 
15.0, 11.366921, def bdjdcdgeccadecjfahcjfdbbhcbgicib(I):
  objs = objects(I, False, True, True)
  five_obj = extract(objs, lambda obj: color(obj) == 5)
  O = paint(cover(I, five_obj), shift(five_obj, (lowermost(other(objs, five_obj)) - uppermost(five_obj) + 1, 0)))
  return O
 
14.666666666666666, 12.169049, def cfedegfddafhehgaaajgeehddeacjfca(I):
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)
  target_i = uppermost(five_obj) - height(five_obj) 
  return paint(cover(I, five_obj), shift(five_obj, (target_i, 0))) 
 
14.0, 10.148086, def aagfjdfjbabhefddafgbcfbcajebcade(I):
  five_obj = extract(objects(I, False, True, True), matcher(color, 5))
  non_five_obj = other(objects(I, False, True, True), five_obj)
  shift_amount = subtract(ulcorner(non_five_obj), (lowermost(five_obj) + 1, 0))
  return paint(cover(I, five_obj), shift(five_obj, shift_amount))
 
15.333333333333334, 10.314571, def chffggefcdeceffebbbdbjabcfiagbfa(I):
  twos = colorfilter(objects(I, True, False, True), 2)
  fives = colorfilter(objects(I, True, False, True), 5)

  def move_five(five):
    closest_two = argmin(twos, lambda two: manhattan(toindices(five), toindices(two)))
    target_position = (uppermost(closest_two), center(closest_two)[1] - width(five) // 2)
    return shift(five, subtract(target_position, ulcorner(five)))

  moved_fives = apply(move_five, fives)
  return paint(cover(I, merge(fives)), merge(moved_fives))
 
12.666666666666666, 9.130178, def fedfdecbfffeecgcjfacdcdbgaidhdae(I):
  # Find the '5' object
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)
  # Find the '2' objects
  two_objs = objects(I, False, True, True) - {five_obj}
  # Calculate the center of the '2' objects
  center_two = centerofmass(merge(two_objs))
  # Calculate the offset to align the '5' object's center with the vertical line of '2' objects
  offset = (0, center_two[1] - center(five_obj)[1])
  # Move the '5' object
  O = move(I, five_obj, offset)
  return O
 
15.0, 10.502211, def fbdeeaiaijdceacjbeebiaeebfcfddef(I):
  # Find the '5' object
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)
  # Find the '2' objects
  two_objs = objects(I, False, True, True) - {five_obj}
  # Calculate the center of mass of '2' objects
  center_two = centerofmass(merge(two_objs))
  # Calculate the vertical offset to align the top of the '5' object with the row below the bottom of '2' objects
  offset = (lowermost(merge(two_objs)) - uppermost(five_obj) + 1, center_two[1] - center(five_obj)[1])
  # Move the '5' object
  O = move(I, five_obj, offset)
  return O
 
15.333333333333334, 11.46422, def bgfffbdcebdgedfejbjjbdaeceaddhfi(I):
  five = extract(objects(I, False, True, True), lambda x: color(x) == 5)
  two = extract(objects(I, False, True, True), lambda x: color(x) == 2)
  new_five = shift(five, (uppermost(two) - height(five), leftmost(two) - leftmost(five)))
  return paint(cover(I, five), new_five)
 
14.0, 10.718992, def eejacjcbacbdefbhjbfgajdfhajfdhcc(I):
  five = extract(colorfilter(objects(I, False, True, True), 5), identity)
  two = extract(colorfilter(objects(I, False, True, True), 2), identity)
  target_ulcorner = (uppermost(two) - height(five), leftmost(two))
  return paint(cover(I, five), shift(five, subtract(target_ulcorner, ulcorner(five)))) 
 
14.333333333333334, 10.241529, def bbcaibcbcahbegccbahbdbebeacgfhgj(I):
  fives = colorfilter(objects(I, False, True, True), 5)
  twos = colorfilter(objects(I, False, True, True), 2)
  five = next(iter(fives)) if fives else None
  two = next(iter(twos)) if twos else None
  if five and two:
    return paint(cover(I, five), shift(five, (uppermost(two) - height(five), leftmost(two) - leftmost(five))))
  return I
 
15.333333333333334, 12.186119, def jcceedahbdefefbhbacbfebabdjeaghi(I):
  twos = colorfilter(objects(I, True, False, True), 2)
  fives = colorfilter(objects(I, True, False, True), 5)

  def move_five(five):
    closest_two = argmin(twos, lambda two: manhattan(five, two))
    return shift(five, gravitate(five, closest_two))

  return paint(cover(I, merge(fives)), merge(apply(move_five, fives)))
 
13.666666666666666, 11.324105, def adffjecdfacceihbaadcjddbcdfjhcaa(I):
  twos = colorfilter(objects(I, True, False, True), 2)
  fives = colorfilter(objects(I, True, False, True), 5)
  target_row = min(uppermost(obj) for obj in twos)  

  def move_five(five):
    return shift(five, (target_row - height(five), center(five)[1] - leftmost(five)))

  return paint(cover(I, merge(fives)), merge(apply(move_five, fives)))
 
11.333333333333334, 7.0650377, def egbdaaeicaabeafcjcdabecibbjaicba(I):
  two_center = center(toindices(merge(objects(I, True, False, True))))
  fives = objects(I, True, False, True)
  fives = extract(fives, lambda obj: color(obj) == 5)
  return paint(cover(I, fives), shift(fives, subtract(two_center, center(fives))))
 
12.0, 7.361532, def fdbhejjaeebdecefbfigifhbdgjdbaed(I):
  two_indices = toindices(merge(objects(I, True, False, True)))
  two_center_i, two_center_j = sum(i for i, j in two_indices) // len(two_indices), sum(j for i, j in two_indices) // len(two_indices)
  five_obj = extract(objects(I, True, False, True), lambda obj: color(obj) == 5)
  fi, fj = center(five_obj)
  return paint(cover(I, five_obj), shift(five_obj, (two_center_i - fi, two_center_j - fj))) 
 
15.333333333333334, 9.944577, def bacfefbgbfaceahfidbcehaghhhdabad(I):
  # Find all objects
  objs = objects(I, False, True, True)
  # Find the object with color 5
  five_obj = extract(objs, lambda obj: color(obj) == 5)
  # Filter out the object with color 5
  other_objs = sfilter(objs, lambda obj: color(obj) != 5)
  # Find topmost and bottommost rows of other objects
  top_row = min(uppermost(obj) for obj in other_objs)
  bottom_row = max(lowermost(obj) for obj in other_objs)
  # Calculate the vertical offset to align the center of '5' with the middle row
  offset = ((top_row + bottom_row) // 2 - centerofmass(five_obj)[0], 0)
  # Move the '5' object 
  O = move(I, five_obj, offset)
  return O
 
15.333333333333334, 11.1192665, def fbabeejeiffheaaiaebeffbcfcaaffbc(I):
  # Find object with color 5
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)
  # Find object with color 2
  two_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 2)
  # Calculate offset for alignment based on height comparison
  height_diff = height(two_obj) - height(five_obj)
  offset = (height_diff // 2, 0) if height_diff > 0 else (height_diff, 0)
  # Move the '5' object 
  O = move(I, five_obj, offset)
  return O
 
15.333333333333334, 10.52235, def ghijcdeccfadeaabbdahajdaejicbdja(I):
  # Find object with color 5
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)
  # Find object with color 2
  two_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 2)
  # Find the center row of the '2' object
  center_row_two = centerofmass(two_obj)[0]
  # Calculate offset to align top of '5' with center of '2'
  offset = (center_row_two - uppermost(five_obj), 0)
  # Move the '5' object 
  O = move(I, five_obj, offset)
  return O
 
15.333333333333334, 9.853959, def fabbfahaejceefeijeebbchebcgfbahf(I):
  five = extract(colorfilter(objects(I, False, True, True), 5), identity)
  two = extract(colorfilter(objects(I, False, True, True), 2), identity)
  target_ulcorner = (uppermost(two), leftmost(two) + width(two) // 2 - width(five) // 2) 
  return paint(cover(I, five), shift(five, subtract(target_ulcorner, ulcorner(five))))
 
12.0, 11.716248, def cjbaciieeffcecfjjicabbdcaedfadaa(I):
  five = extract(colorfilter(objects(I, False, True, True), 5), identity)
  two_center = centerofmass(extract(colorfilter(objects(I, False, True, True), 2), identity))
  five_center = centerofmass(five)
  shift_amount = subtract(
      (two_center[0] - height(five), two_center[1] - five_center[1]),
      ulcorner(five)
  )
  return move(I, five, shift_amount)
 
15.333333333333334, 10.558217, def jdicbidhbahfehdgbjffdicededffcba(I):
  five = extract(colorfilter(objects(I, False, True, True), 5), identity)
  two = extract(colorfilter(objects(I, False, True, True), 2), identity)
  return paint(cover(I, five), shift(five, (uppermost(two) - lowermost(five), center(two)[1] - center(five)[1]))) 
 
15.333333333333334, 9.912037, def bchfjdbbffbeeifibchbbdaabajabebc(I):
  f = lambda obj: color(obj) == 5
  t = lambda obj: color(obj) == 2
  five = extract(objects(I, False, True, True), f)
  two = extract(objects(I, False, True, True), t)
  return paint(cover(I, five), shift(five, subtract((uppermost(two), leftmost(two) + width(two) // 2 - width(five) // 2), ulcorner(five))))
 
8.666666666666666, 3.7317622, def cbacgdcedfgcejedjcdddafcjafgcaea(I):
  # Find target: average position of all '2's 
  twos = toindices(merge(colorfilter(objects(I, True, False, True), 2)))
  target_i, target_j = 0, 0
  count = 0
  for i, j in twos:
    target_i += i
    target_j += j
    count += 1
  target = (target_i // count, target_j // count)

  # Move function: one step towards target until adjacent
  def move_to_target(obj):
    current_distance = manhattan(obj, frozenset({(0, target)}))
    while current_distance > 1:
      obj = shift(obj, (sign(target[0]-center(obj)[0]), sign(target[1]-center(obj)[1])))
      current_distance = manhattan(obj, frozenset({(0, target)}))
    return obj

  # Identify and move '5' objects
  fives = colorfilter(objects(I, True, False, True), 5)
  moved_fives = apply(move_to_target, fives)

  # Combine: remove old '5's, paint new ones
  return underpaint(cover(I, merge(fives)), merge(moved_fives))
 
12.0, 10.377284, def acedjdejecbgeicdaddejcadhgheecad(I):
  # Target: center of mass of '2' objects
  target = centerofmass(merge(colorfilter(objects(I, True, False, True), 2)))
  
  # Move function: direct shift to adjacent position
  def move_to_target(obj):
    return shift(obj, gravitate(obj, frozenset({(0, target)})))
  
  # Apply to '5' objects
  fives = colorfilter(objects(I, True, False, True), 5)
  moved_fives = apply(move_to_target, fives)
  
  # Paint moved objects, overwriting originals
  return paint(I, merge(moved_fives))
 
9.0, 2.9916642, def ceabbcaadbcbeifbbejibjdjaefjadad(I):
  # Target: center of '2' objects' bounding box
  target = center(toindices(merge(colorfilter(objects(I, True, False, True), 2))))
  
  # Move function: shift towards target until manhattan distance is 1
  def move_to_target(obj):
    while manhattan(obj, frozenset({(0, target)})) > 1:
      obj = shift(obj, (sign(target[0] - center(obj)[0]), sign(target[1] - center(obj)[1])))
    return obj

  # Apply to '5' objects
  fives = colorfilter(objects(I, True, False, True), 5)
  moved_fives = apply(move_to_target, fives)
  
  # Combine: remove old, paint new
  return underpaint(cover(I, merge(fives)), merge(moved_fives)) 
 
8.0, 3.6892283, def cihcedbiggfgebicadddfechadaebbdf(I):
  # Identify '2' objects
  twos = merge(colorfilter(objects(I, True, False, True), 2)) 

  # Calculate target: center of '2' objects' indices 
  target = center(toindices(twos))
  
  # Move function: shift object directly to an adjacent position
  def move_to_target(obj):
    return shift(obj, gravitate(obj, frozenset({(0, target)}))) 

  # Find and move '5' objects
  fives = colorfilter(objects(I, True, False, True), 5)
  moved_fives = apply(move_to_target, fives) 
  
  # Overwrite original grid with moved objects
  return paint(cover(I, merge(fives)), merge(moved_fives))
 
13.333333333333334, 7.7438664, def ahacfcebdcaaefaejfeebaibeebdcjei(I):
  five_obj = extract(objects(I, True, False, True), lambda obj: color(obj) == 5)
  two_obj = extract(objects(I, True, False, True), lambda obj: color(obj) == 2)
  offset = (uppermost(two_obj) - lowermost(five_obj) - 1, center(two_obj)[1] - center(five_obj)[1])
  return paint(cover(I, five_obj), shift(five_obj, offset))
 
14.333333333333334, 8.55827, def aaafbddbaaajecgdideeibdefedcgeed(I):
  five_obj = extract(colorfilter(objects(I, True, False, True), 5), identity)
  two_obj = extract(colorfilter(objects(I, True, False, True), 2), identity)
  target_pos = (uppermost(two_obj) - height(five_obj) - 1, center(two_obj)[1])
  return paint(cover(I, five_obj), shift(five_obj, subtract(target_pos, ulcorner(five_obj))))
 
17.666666666666668, 9.110282, def beeebjddeeeaebhaafafddaicdbhbbci(I):
  fives = extract(objects(I, True, False, True), lambda obj: color(obj) == 5)
  twos = extract(objects(I, True, False, True), lambda obj: color(obj) == 2)
  return paint(I, shift(fives, subtract((uppermost(twos) - height(fives) - 1, center(twos)[1]), ulcorner(fives))))
 
13.0, 6.67509, def dieabdehbhajeccbjibhgdjbbbfcbehe(I):
  # Find the '5' object
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)
  # Calculate the center of mass of all '2' objects
  two_center = centerofmass(merge(objects(I, False, True, True) - {five_obj}))
  # Calculate the vertical offset
  offset = (two_center[0] - center(five_obj)[0], 0)
  # Move the '5' object
  return move(I, five_obj, offset)
 
13.0, 6.2363696, def fdefbfdcefgfebgdbdffhbfjfdcbhgdc(I):
  # Find the center of mass of '2' objects
  two_center_i = centerofmass(merge(objects(I, False, True, True) - extract(objects(I, False, True, True), lambda obj: color(obj) == 5)))[0]
  # Find the '5' object
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)
  # Calculate the vertical offset
  five_center_i = center(five_obj)[0]
  offset_i = two_center_i - five_center_i
  # Move the '5' object
  return paint(cover(I, five_obj), shift(five_obj, (offset_i, 0))) 
 
15.0, 9.50943, def aecfibeaeffceeedjadcfafcfiafbjge(I):
  # Find the '2' objects and their center of mass
  twos = objects(I, False, True, True) - colorfilter(objects(I, False, True, True), 5)
  two_center = centerofmass(merge(twos))
  # Move each part of the '5' object individually
  return paint(I, merge({shift(obj, (two_center[0] - center(obj)[0], 0)) for obj in colorfilter(objects(I, True, False, True), 5)}))
 
13.333333333333334, 7.2905107, def affhcfaabjefehibadheiiebaefddbei(I):
  # Find the median row of '2' objects
  two_rows = {i for obj in objects(I, False, True, True) - colorfilter(objects(I, False, True, True), 5) for i, j in toindices(obj)}
  target_row = sorted(two_rows)[len(two_rows) // 2]
  # Move the '5' object to the target row
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)
  return paint(cover(I, five_obj), shift(five_obj, (target_row - center(five_obj)[0], 0)))
 
9.666666666666666, 4.2242374, def hgecbbhjhffcecbiicagddcaaebiceaa(I):
  # Find all objects
  objs = objects(I, True, False, True)
  # Find the object with color 5
  five_obj = extract(objs, lambda obj: color(obj) == 5)
  # Calculate the center of the grid
  grid_center = center(asindices(I))
  # Find the closest point in the '5' object to the grid center
  closest_point = argmin(
    toindices(five_obj),
    lambda loc: manhattan(initset(loc), initset(grid_center))
  )
  # Move the '5' object so that the closest point aligns with the grid center
  O = move(I, five_obj, subtract(grid_center, closest_point))
  return O
 
11.0, 4.89603, def chdcaffcebcbeehiagbecabbcbeaadaf(I):
  # Directly calculate the offset to move the object based on grid dimensions
  grid_center = divide(shape(I), 2)
  five_obj = extract(objects(I, True, False, True), lambda obj: color(obj) == 5)
  obj_center = center(five_obj)
  offset = subtract(grid_center, obj_center)
  return move(I, five_obj, offset)
 
13.0, 6.187258, def aagdfffecjeeeeabigbigdhfdjhfiiga(I):
  # Identify objects
  twos = objects(I, True, False, True)
  fives = objects(I, True, False, True)
  fives = colorfilter(fives, 5)

  # Find the center row of the '2' objects
  twos_indices = merge(apply(toindices, twos))
  center_i = (uppermost(twos_indices) + lowermost(twos_indices)) // 2

  # Function to move object vertically
  def move_to_center(obj):
    obj_center = center(obj)
    offset = (center_i - obj_center[0], 0)
    return shift(obj, offset)

  # Move each '5' object to the center row
  moved_fives = apply(move_to_center, fives)

  # Modify the grid
  O = cover(I, merge(fives))
  for moved_five in moved_fives:
    O = paint(O, moved_five)
  return O 
 
9.333333333333334, 9.402019, def agcdaibiebabebbeaeaggfabfgcgeggc(I):
  # Find the center row of '2' objects
  twos = toindices(merge(objects(I, True, False, True)))
  center_i = (uppermost(twos) + lowermost(twos)) // 2

  # Move '5' objects vertically
  O = I
  for i, row in enumerate(I):
    for j, value in enumerate(row):
      if value == 5:
        O = paint(cover(O, {(5, (i, j))}), {(5, (center_i, j))})
  return O
 
12.0, 7.1371536, def gdacfgcgbfbbeihfjafiiehacdjbifab(I):
  # Find center row of '2's
  twos = merge(apply(toindices, objects(I, True, False, True)))
  target_i = (uppermost(twos) + lowermost(twos)) // 2

  #  Shift '5' objects
  return paint(
      cover(I, toindices(recolor(5, ofcolor(I, 5)))), 
      shift(recolor(5, ofcolor(I, 5)), (target_i - centerofmass(ofcolor(I, 5))[0], 0))
  )
 
13.0, 13.329454, def cbfebeacgfeaeechjejgbhhfbgfcdefj(I):
  # Identify the '2' objects and their center
  twos = merge(colorfilter(objects(I, True, False, True), 2))
  target = center(toindices(twos)) 

  def move_close(obj):
    # Find closest point in '2' objects to the object's center
    closest_point = argmin(toindices(twos), lambda loc: manhattan(frozenset({(0, loc)}), obj))
    # Calculate the move direction
    direction = (sign(closest_point[0] - center(obj)[0]), sign(closest_point[1] - center(obj)[1]))
    # Move until adjacent to the closest point
    while manhattan(obj, frozenset({(0, closest_point)})) > 1:
      obj = shift(obj, direction)
    return obj

  # Move each '5' object close to the '2' objects
  return underpaint(
      cover(I, merge(colorfilter(objects(I, True, False, True), 5))),
      merge(apply(move_close, colorfilter(objects(I, True, False, True), 5)))
  )
 
12.666666666666666, 7.7856746, def beagfecbaejdeefaaiceaijebgcadccj(I):
  # Find object with color 5
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)
  # Find object with color 2
  two_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 2)
  # Calculate the vertical offset to align the edges of '5' and '2'
  offset = (lowermost(two_obj) - uppermost(five_obj) + 1, 0)  
  # Move the '5' object 
  O = move(I, five_obj, offset)
  return O
 
13.333333333333334, 5.1536903, def deebjfebchgdehdgbhheaeiicajefajg(I):
  # Find the bounding boxes of the '5' and '2' objects
  five_box = backdrop(toindices(extract(objects(I, False, True, True), lambda obj: color(obj) == 5)))
  two_box = backdrop(toindices(extract(objects(I, False, True, True), lambda obj: color(obj) == 2)))
  # Calculate the offset to align the upper-left corners of the bounding boxes
  offset = subtract(ulcorner(two_box), ulcorner(five_box))
  # Move the '5' object
  O = move(I, extract(objects(I, False, True, True), lambda obj: color(obj) == 5), offset)
  return O 
 
12.0, 6.786877, def eihjedfffdibefbejhgfdadjgbdijdfe(I):
  # Find object with color 5
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)
  # Find object with color 2
  two_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 2)
  # Calculate the offset using gravitate function 
  offset = gravitate(toindices(five_obj), toindices(two_obj)) 
  # Move the '5' object
  O = move(I, five_obj, offset)
  return O
 
12.333333333333334, 6.420486, def ibebbddfdabjeegfbdafdcegjccfdeej(I):
  # Extract the '5' object
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)
  # Extract the '2' object
  two_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 2)
  # Determine the relative position of '5' with respect to '2'
  rel_pos = position(toindices(five_obj), toindices(two_obj))
  # Define a dictionary to map relative positions to offsets
  offset_dict = {(1, 1): (1, -1), (-1, 1): (-1, -1), (1, -1): (1, 1), (-1, -1): (-1, 1), (0, 1): (0, -1), (0, -1): (0, 1), (1, 0): (-1, 0), (-1, 0): (1, 0)}
  # Get the offset based on the relative position
  offset = offset_dict.get(rel_pos, (0, 0)) 
  # Move the '5' object
  O = move(I, five_obj, offset)
  return O
 
12.333333333333334, 6.798361, def chcdbbibagegejedbjbfajdbbdddiccf(I):
  # Find center of mass of non-'5' objects
  target_row = centerofmass(merge(sfilter(objects(I, False, True, True), lambda obj: color(obj) != 5)))[0]
  # Move '5' objects to the target row
  return paint(
      cover(I, merge(colorfilter(objects(I, True, False, True), 5))), 
      merge(apply(lambda obj: shift(obj, (target_row - uppermost(obj), 0)), colorfilter(objects(I, True, False, True), 5)))
  )
 
12.333333333333334, 6.4964876, def fafceiiebhfaefhcicabdbgdajdfaiea(I):
  # Extract '5' objects and other objects
  fives = colorfilter(objects(I, True, False, True), 5)
  others = objects(I, False, True, True) - fives
  
  # Calculate target row based on 'others'
  target_row = centerofmass(merge(others))[0]

  # Create a function to move an object to the target row
  move_to_target = lambda obj: shift(obj, (target_row - center(obj)[0], 0))

  # Apply the move function to each '5' object
  moved_fives = apply(move_to_target, fives)

  # Return the transformed grid
  return paint(cover(I, merge(fives)), merge(moved_fives))
 
12.333333333333334, 6.23556, def dchidhgidhfaebefafhaecjfffchbefd(I):
  # Extract objects of color '2' and '5'
  twos = objects(I, True, False, True)
  fives = colorfilter(objects(I, True, False, True), 5)
  
  # Find the center row of '2' objects
  center_row = center(merge(apply(toindices, twos)))[0]

  # Move each '5' object to the center row
  moved_fives = set()
  for five in fives:
    five_center_row = center(five)[0]
    offset = center_row - five_center_row
    moved_fives.add(shift(five, (offset, 0)))

  # Modify the grid
  O = cover(I, merge(fives))
  for moved_five in moved_fives:
    O = paint(O, moved_five)
  return O
 
9.333333333333334, 9.209029, def cccegfhefcjbeeaijcehbcdbicebfcia(I):
  # Extract '5' objects and their indices
  fives = colorfilter(objects(I, True, False, True), 5)
  five_indices = merge(apply(toindices, fives))
  
  # Calculate target row
  target_row = centerofmass(merge(sfilter(objects(I, False, True, True), lambda obj: color(obj) != 5)))[0]
  
  # Move '5' cells individually
  O = I
  for i, j in five_indices:
    offset = target_row - i
    O = paint(cover(O, {(5, (i, j))}), {(5, (i + offset, j))})
  return O
 
12.333333333333334, 6.4964876, def deaabjegagefejdhidbbfjfhdhccbgcb(I):
  # Identify '5' objects and calculate target row
  fives = colorfilter(objects(I, True, False, True), 5)
  target_row = centerofmass(merge(sfilter(objects(I, False, True, True), lambda obj: color(obj) != 5)))[0]

  # Function to move object vertically
  def move_vertically(obj):
    offset = target_row - center(obj)[0]
    return shift(obj, (offset, 0))

  # Move each '5' object
  moved_fives = apply(move_vertically, fives)
  
  # Update the grid
  O = cover(I, merge(fives))
  for obj in moved_fives:
    O = paint(O, obj)
  return O
 
13.333333333333334, 13.343288, def dccafibbedcjebjfbeiicffbefacafcf(I):
  # Find the target locations: all indices of '2' objects
  targets = toindices(merge(colorfilter(objects(I, True, False, True), 2)))
  
  # Function to calculate the direction towards the nearest target
  def direction_to_nearest_target(obj):
    closest_target = argmin(targets, lambda t: manhattan(obj, frozenset({(0, t)})))
    return (sign(closest_target[0] - center(obj)[0]), sign(closest_target[1] - center(obj)[1]))

  # Function to move an object towards the target until adjacent
  def move_until_adjacent(obj):
    while min(manhattan(obj, frozenset({(0, t)})) for t in targets) > 1:
      obj = shift(obj, direction_to_nearest_target(obj))
    return obj

  # Apply to '5' objects
  fives = colorfilter(objects(I, True, False, True), 5)
  moved_fives = apply(move_until_adjacent, fives)
  
  # Combine: remove old, paint new
  return paint(cover(I, merge(fives)), merge(moved_fives))
 
13.333333333333334, 10.680773, def djfjffgffcbaeiijbbgfafbafgddgffg(I):
  # Find target area: bounding box of all '2' objects
  target_area = backdrop(merge(colorfilter(objects(I, True, False, True), 2)))
  
  # Function to check if an object is adjacent to the target area
  def is_adjacent_to_target(obj):
    return any(manhattan(obj, frozenset({(0, t)})) == 1 for t in target_area)

  # Function to move an object towards the target area
  def move_to_target_area(obj):
    while not is_adjacent_to_target(obj):
      obj_center = center(obj)
      closest_target = argmin(target_area, lambda t: manhattan(obj, frozenset({(0, t)})))
      obj = shift(obj, (sign(closest_target[0] - obj_center[0]), sign(closest_target[1] - obj_center[1])))
    return obj

  # Apply to '5' objects
  fives = colorfilter(objects(I, True, False, True), 5)
  moved_fives = apply(move_to_target_area, fives)
  
  # Combine: remove old, paint new
  return paint(cover(I, merge(fives)), merge(moved_fives))
 
11.0, 9.750863, def ddddeheaccadehifiecdhdceibebcieb(I):
  # Find the target object: the largest '2' object 
  target_object = argmax(colorfilter(objects(I, True, False, True), 2), size)

  # Move '5' objects to the target object
  def move_to_target(obj):
    return shift(obj, gravitate(obj, toindices(target_object)))

  # Apply the move function to all '5' objects
  fives = colorfilter(objects(I, True, False, True), 5)
  moved_fives = apply(move_to_target, fives)

  # Combine the original grid (without '5's) with the moved '5's
  return paint(cover(I, merge(fives)), merge(moved_fives))
 
12.0, 12.242911, def iebaifcdiddbebegjbacfhbbehhdebgi(I):
  # Target: Center of bounding box of all '2's
  target = center(backdrop(merge(colorfilter(objects(I, True, False, True), 2))))
  
  # Move each '5' object towards the target until adjacent
  fives = colorfilter(objects(I, True, False, True), 5)
  moved_fives = frozenset({
    shift(five, (sign(target[0]-center(five)[0]), sign(target[1]-center(five)[1])))
    for five in fives
    for _ in range(manhattan(five, frozenset({(0, target)}))-1)
  })
  
  # Combine the original grid (without '5's) with the moved '5's
  return paint(cover(I, merge(fives)), merge(moved_fives))
 
13.333333333333334, 5.537931, def adbaaadbeacfebbbbdeeiheehbcbeeae(I):
  # Find the object with color 5
  five_obj = extract(objects(I, True, False, True), lambda obj: color(obj) == 5)
  # Find the object with color 2
  two_obj = extract(objects(I, True, False, True), lambda obj: color(obj) == 2)
  # Calculate the vertical offset
  v_offset = lowermost(two_obj) - uppermost(five_obj) + 1
  # Calculate the horizontal offset 
  h_offset = rightmost(two_obj) - leftmost(five_obj) + 1
  # Move the '5' object
  O = move(I, five_obj, (v_offset, h_offset))
  return O
 
10.0, 4.036413, def cddajabaffgbefaijbdfafddicdidgfc(I):
  # Calculate the target column for '5' objects
  target_col = centerofmass(merge(objects(I, False, True, True) - colorfilter(objects(I, True, False, True), 5)))[1]
  # Return a new grid with '5' objects moved to the target column
  return paint(
    cover(I, ofcolor(I, 5)), 
    merge(apply(lambda obj: shift(obj, (0, target_col - center(obj)[1])), colorfilter(objects(I, True, False, True), 5)))
  ) 
 
9.333333333333334, 3.201221, def fibhfachiecbeiahifabcehdgjdbbbca(I):
  # Find all objects in the grid
  objs = objects(I, True, False, True)
  # Find the object with color 5
  five_obj = extract(objs, lambda obj: color(obj) == 5)
  # Calculate the bounding box of all objects excluding the '5' object
  target_bbox = backdrop(merge(sfilter(objs, lambda obj: obj != five_obj)))
  # Calculate the center of the bounding box
  target_center = center(target_bbox)
  # Move the '5' object to align its center with the target center
  return move(I, five_obj, subtract(target_center, center(five_obj)))
 
12.0, 7.4027605, def ecgacfffaaicejgeahcfhhebdbbegdeh(I):
  # Directly find the center of the bounding box of all non-5 objects
  target_center = center(
      backdrop(
        merge(
            sfilter(
                objects(I, True, False, True),
                lambda obj: color(obj) != 5))))
  # Find all '5' cells 
  five_cells = toobject(ofcolor(I, 5), I)
  # Move the '5' cells to align with the calculated center
  return move(I, five_cells, subtract(target_center, center(five_cells))) 
 
10.333333333333334, 4.066749, def bccjgdjdcfcgebdjjcbhdeaagahbdieg(I):
  # Find all objects
  objs = objects(I, True, False, True)
  # Filter objects to find the '5' object and others
  five_obj = extract(objs, lambda obj: color(obj) == 5)
  other_objs = sfilter(objs, lambda obj: obj != five_obj)
  # Calculate the target location for the center of the '5' object
  target_loc = (
    (uppermost(merge(other_objs)) + lowermost(merge(other_objs))) // 2,
    (leftmost(merge(other_objs)) + rightmost(merge(other_objs))) // 2
  )
  # Move the '5' object to the target location
  return move(I, five_obj, subtract(target_loc, center(five_obj)))
 
12.666666666666666, 7.4350247, def adeecdajfbfcefbjideegadcabciiebb(I):
  # Directly find the indices of '5' cells
  five_indices = ofcolor(I, 5)
  # Calculate target row based on the bounding box of '2' indices
  target_row = center(backdrop(ofcolor(I, 2)))[0]
  # Calculate the vertical offset
  offset = target_row - center(five_indices)[0]
  # Create new '5' objects at the target positions
  moved_fives = frozenset({(5, (i + offset, j)) for i, j in five_indices})
  # Modify the grid
  O = cover(I, five_indices)
  O = paint(O, moved_fives)
  return O
 
11.666666666666666, 6.603056, def dgaiedefadccebdhjddcfgfdefffgaad(I):
  # Find '5' objects and '2' objects' indices
  fives = colorfilter(objects(I, True, False, True), 5)
  two_indices = ofcolor(I, 2)
  # Calculate target row using '2' indices
  target_row = center(backdrop(two_indices))[0]
  # Generate moved '5' objects using a nested loop
  moved_fives = frozenset()
  for obj in fives:
    moved_obj = frozenset()
    for v, (i, j) in obj:
      moved_obj = moved_obj | {(v, (target_row + i - center(obj)[0], j))}
    moved_fives = moved_fives | {moved_obj}
  # Modify the grid
  O = cover(I, merge(apply(toindices, fives)))
  for obj in moved_fives:
    O = paint(O, obj)
  return O
 
13.333333333333334, 12.126423, def fjdcffgabfideecfiedebcgdifeedhaa(I):
  # Identify '2' objects and calculate their center of mass
  two_objects = toobject(ofcolor(I, 2), I)
  target = centerofmass(two_objects)

  def move_towards_target(obj):
    # Calculate the direction towards the target
    direction = sign(subtract(target, center(obj)))
    
    # Move the object one step at a time towards the target until it's adjacent to any '2' object
    while manhattan(obj, two_objects) > 1:
      obj = shift(obj, direction)
    return obj

  # Identify '5' objects and move them towards the target
  five_objects = colorfilter(objects(I, True, False, True), 5)
  moved_fives = frozenset(map(move_towards_target, five_objects))

  # Paint the moved '5' objects onto the original grid after removing the original '5' objects
  return paint(cover(I, merge(five_objects)), merge(moved_fives))
 
13.0, 8.981667, def fahcdhgcagagejffaffgdbdiahieaaei(I):
  # Find object with color 5
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)
  # Find object with color 2
  two_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 2)
  # Calculate the offset to align right edge of '5' with left edge of '2'
  offset = (0, leftmost(two_obj) - rightmost(five_obj) - 1) 
  # Move the '5' object 
  O = move(I, five_obj, offset)
  return O
 
12.666666666666666, 4.86306, def fdaacedeaagbeiiajedbjdaebhbejcah(I):
  # Find object with color 5
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)
  # Find object with color 2
  two_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 2)
  # Calculate the horizontal and vertical offset to move '5' next to '2' 
  offset = gravitate(shift(toindices(five_obj), (0, 1)), toindices(two_obj))
  # Move the '5' object
  O = move(I, five_obj, offset)
  return O
 
13.333333333333334, 5.433198, def bbhbcadefjfjedaijaeahfbjefadgich(I):
  # Find objects
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)
  two_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 2)
  # Calculate center points
  five_center = centerofmass(five_obj)
  two_center = centerofmass(two_obj)
  # Determine relative position 
  rel_pos = position(toindices(five_obj), toindices(two_obj))
  # Calculate offset based on relative position
  offset = (0, two_center[1] - five_center[1] - 1) if rel_pos[0] == 0 else (two_center[0] - five_center[0], 0)
  # Move the '5' object
  O = move(I, five_obj, offset)
  return O
 
10.0, 3.1428463, def bbbaeadhdfjjebbbieadeffcgbfbbgjj(I):
  # Find objects
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)
  two_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 2)
  # Calculate offset to align top-left corner of '5' with top-right corner of '2'
  offset = (uppermost(two_obj) - uppermost(five_obj), rightmost(two_obj) - leftmost(five_obj) + 1)
  # Move the '5' object 
  O = move(I, five_obj, offset)
  return O
 
12.0, 3.874242, def afadjbhjbffgecddidiceeggdbfceaei(I):
  # Find objects
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)
  two_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 2)
  # Find bounding box of the '2' object
  two_box = backdrop(toindices(two_obj))
  # Find the closest point on the bounding box to the '5' object's center
  closest_point = argmin(two_box, lambda loc: manhattan({loc}, toindices(five_obj)))
  # Calculate the offset to align the center of '5' with the closest point
  offset = subtract(closest_point, centerofmass(five_obj))
  # Move the '5' object
  O = move(I, five_obj, offset)
  return O
 
12.666666666666666, 6.9035964, def dacdggefdhbcebgbbebebfcebdagacci(I):
  # Find '5' and '2' indices
  fives_idx = ofcolor(I, 5)
  twos_idx = ofcolor(I, 2)
  # Calculate the target column based on '2' indices
  target_column = centerofmass(twos_idx)[1]
  # Calculate the offset to align '5' indices 
  offset = (0, target_column - center(fives_idx)[1])
  # Move the '5' indices and recolor them
  moved_fives = recolor(5, shift(fives_idx, offset))
  # Combine and return the modified grid
  return paint(cover(I, fives_idx), moved_fives)
 
13.0, 6.6360927, def jbgageahaaegefefibdiifjeieabfagj(I):
  # Find all '2' objects
  twos = colorfilter(objects(I, True, False, True), 2)
  # Calculate the target row (center row of '2' objects)
  target_row = center(merge(apply(toindices, twos)))[0]
  # Find all '5' objects
  fives = colorfilter(objects(I, True, False, True), 5)
  # Move each '5' object to the target row
  moved_fives = frozenset(shift(obj, (target_row - centerofmass(obj)[0], 0)) for obj in fives)
  # Modify the grid
  O = cover(I, merge(apply(toindices, fives)))
  for obj in moved_fives:
    O = paint(O, obj)
  return O
 
11.666666666666666, 6.318023, def bbbjhaddhcefefghbifbahbddbcddefc(I):
  # Extract '5' objects
  fives = colorfilter(objects(I, True, False, True), 5)
  # Calculate target row using the center of mass of all objects
  target_row = centerofmass(merge(apply(toindices, objects(I, True, False, True))))[0]
  # Function to move object vertically to the target row
  move_to_target = lambda obj: shift(obj, (target_row - centerofmass(obj)[0], 0))
  # Move all '5' objects
  moved_fives = apply(move_to_target, fives)
  # Modify the grid
  O = cover(I, merge(fives))
  for obj in moved_fives:
    O = paint(O, obj)
  return O
 
13.0, 6.728198, def jiaecibcihijefjdjciieegbdcieficf(I):
  # Extract '2' and '5' objects
  twos = colorfilter(objects(I, True, False, True), 2)
  fives = colorfilter(objects(I, True, False, True), 5)
  # Calculate target row from '2' objects' bounding box
  target_row = center(backdrop(merge(apply(toindices, twos))))[0]
  # Move each '5' object to the target row
  moved_fives = frozenset(shift(obj, (target_row - uppermost(obj), 0)) for obj in fives)
  # Modify the grid
  O = I
  for obj in fives:
    O = cover(O, obj)
  for obj in moved_fives:
    O = paint(O, obj)
  return O
 
17.0, 17.483387, def dddbcjbgdfegebaebdfeciaddecjfdhi(I):
  # Function to check if two patches are adjacent (including diagonals)
  def is_adjacent(patch1, patch2):
    return manhattan(patch1, patch2) <= 1

  # Function to move object until adjacent to a '2' object
  def move_until_adjacent(obj):
    twos = colorfilter(objects(I, True, False, True), 2)
    while not any(is_adjacent(obj, two_obj) for two_obj in twos):
      # Find the closest '2' object
      closest_two_obj = argmin(twos, lambda two_obj: manhattan(obj, two_obj))
      # Move one step towards the closest '2' object
      obj = shift(obj, sign(subtract(center(closest_two_obj), center(obj))))
    return obj

  # Apply to all '5' objects
  fives = colorfilter(objects(I, True, False, True), 5)
  moved_fives = apply(move_until_adjacent, fives)

  # Reconstruct the grid
  return underpaint(I, merge(moved_fives))
 
12.0, 12.479461, def cdcecgffbdceedchiigbgjbidefhigaj(I):
  # Get all '2' objects
  two_objs = colorfilter(objects(I, True, False, True), 2)

  # Function to find the nearest '2' object and direction to move
  def find_nearest_and_direction(obj):
    closest_two_obj = argmin(two_objs, lambda two_obj: manhattan(obj, two_obj))
    return closest_two_obj, sign(subtract(center(closest_two_obj), center(obj)))

  # Function to move object towards nearest '2' until adjacent
  def move_towards_two(obj):
    closest_two, direction = find_nearest_and_direction(obj)
    while not adjacent(obj, closest_two):
      obj = shift(obj, direction)
      closest_two, direction = find_nearest_and_direction(obj) # Update in case a closer one is found
    return obj

  # Apply to '5' objects and reconstruct grid
  fives = colorfilter(objects(I, True, False, True), 5)
  moved_fives = apply(move_towards_two, fives)
  return paint(cover(I, merge(fives)), merge(moved_fives))
 
13.333333333333334, 4.6328616, def fgcbdgeaeijfedaejcafidhbaffgehfd(I):
  # Find the object with color 5
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)
  # Find the object with color 2
  two_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 2)
  # Calculate the offset to align left edge of '5' with right edge of '2' and move two rows up
  offset = (uppermost(two_obj) - uppermost(five_obj) - 2, rightmost(two_obj) - leftmost(five_obj) + 1)
  # Move the '5' object
  O = move(I, five_obj, offset)
  return O
 
12.666666666666666, 5.5590687, def afjecgacjbddeehjifcghebaaadcacec(I):
  # Find the object with color 5
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)
  # Find the object with color 2
  two_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 2)
  # Move the '5' object two rows up
  O = move(I, five_obj, (uppermost(two_obj) - uppermost(five_obj) - 2, 0))
  # Calculate the horizontal offset to align the left edge of '5' with the right edge of '2'
  five_obj = extract(objects(O, False, True, True), lambda obj: color(obj) == 5)
  offset = (0, rightmost(two_obj) - leftmost(five_obj) + 1)
  # Move the '5' object horizontally
  O = move(O, five_obj, offset)
  return O
 
13.333333333333334, 7.2262554, def fbibafcejfebeiafibeibecefdcafbab(I):
  # Find the object with color 5
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)
  # Find the object with color 2
  two_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 2)
  # Calculate the vertical and horizontal offsets separately
  v_offset = uppermost(two_obj) - uppermost(five_obj) - 2
  h_offset = rightmost(two_obj) - leftmost(five_obj) + 1
  # Move the '5' object vertically
  I = move(I, five_obj, (v_offset, 0))
  # Move the '5' object horizontally 
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)
  O = move(I, five_obj, (0, h_offset))
  return O
 
23.333333333333332, 36.603878, def gdgfdfeabifbehhebajdihedicdehgfi(I):
  # Find all objects and filter for '5' objects
  objs = objects(I, True, False, True)
  fives = colorfilter(objs, 5)
  # Calculate the bounding box of all non-5 objects
  other_objs_bbox = backdrop(merge(sfilter(objs, lambda obj: color(obj) != 5)))
  # Move each '5' object to the center of the bounding box
  moved_fives = apply(lambda obj: shift(obj, subtract(center(other_objs_bbox), center(obj))), fives)
  # Paint the moved objects onto a blank canvas
  return paint(canvas(0, shape(I)), merge(moved_fives)) 
 
22.333333333333332, 29.10949, def hidcfefcbdceejbbiiceicfecbaeibbg(I):
  # Function to move an object to the center of an area
  def center_in(obj, area):
    return shift(obj, subtract(center(area), center(obj)))
  # Find all objects
  all_objs = objects(I, True, False, True)
  # Move all '5' objects to the center of non-'5' objects area
  return paint(canvas(0, shape(I)), merge(apply(lambda obj: center_in(obj, backdrop(merge(sfilter(all_objs, lambda x: x != obj)))), colorfilter(all_objs, 5))))
 
13.333333333333334, 9.245385, def eaccaffiiiadedacjjgijdffeedicjcc(I):
  # Extract '5' and '2' objects
  five_obj = extract(objects(I, True, False, True), lambda obj: color(obj) == 5)
  two_obj = extract(objects(I, True, False, True), lambda obj: color(obj) == 2)

  # Calculate vertical offset 
  v_offset = uppermost(two_obj) - (lowermost(five_obj) + 1)

  # Move '5' object vertically
  O = move(I, five_obj, (v_offset, 0))
  return O
 
12.333333333333334, 8.065734, def edhafcfeddcjecgfajgeedfcecfddddj(I):
  # Extract '5' objects and find the uppermost '2' row
  fives = colorfilter(objects(I, True, False, True), 5)
  target_row = min(i for i, row in enumerate(I) if 2 in row)

  # Generate moved '5' objects
  moved_fives = frozenset({
    frozenset({(v, (target_row - height(obj) + i, j)) for v, (i, j) in obj})
    for obj in fives
  })

  # Modify the grid
  O = cover(I, merge(apply(toindices, fives)))
  for obj in moved_fives:
    O = paint(O, obj)
  return O
 
12.333333333333334, 7.2691097, def fccefecfffiaefffifegdahfceehhfgd(I):
  # Find '2' objects and '5' objects' indices
  twos = colorfilter(objects(I, True, False, True), 2)
  five_indices = ofcolor(I, 5)
  # Calculate target row for each '2' object
  target_rows = {center(obj)[0] for obj in twos}
  # Move '5' indices to be above each '2' object
  moved_indices = frozenset()
  for row in target_rows:
    for i, j in five_indices:
      moved_indices = moved_indices | {(row - size(five_indices) // len(target_rows) + i, j)}
  # Modify the grid
  O = cover(I, five_indices)
  O = fill(O, 5, moved_indices)
  return O
 
13.333333333333334, 7.916618, def hfdfeafdbaeaefacjhbfejjcdeagefac(I):
  # Extract '5' and '2' objects
  five_obj = extract(objects(I, True, False, True), lambda obj: color(obj) == 5)
  two_obj = extract(objects(I, True, False, True), lambda obj: color(obj) == 2)
  # Calculate center difference
  five_center = centerofmass(five_obj)
  two_center = centerofmass(two_obj)
  offset = (two_center[0] - five_center[0] - height(five_obj), 0)
  # Move the '5' object
  O = move(I, five_obj, offset)
  return O
 
14.0, 11.232096, def bechgiigfaiaedfiajjcfghcbfaegihe(I):
  fives = colorfilter(objects(I, True, False, True), 5)
  twos = colorfilter(objects(I, True, False, True), 2)
  O = I
  for f in fives:
    for t in twos:
      O = move(O, f, (uppermost(t) - lowermost(f) - 1, 0))
  return O
 
17.333333333333332, 16.89558, def ibidfcediabceidfibeiafbaeeaejcfg(I):
  # Find all '2' locations
  two_locations = ofcolor(I, 2)

  def move_to_closest(obj):
    while True:
      # Find the closest '2' location
      closest_two = min(two_locations, key=lambda loc: manhattan(obj, frozenset({loc})))
      if manhattan(obj, frozenset({closest_two})) <= 1:
        break
      # Calculate the direction to the closest '2'
      direction = sign(subtract(closest_two, center(obj)))
      obj = shift(obj, direction)
    return obj

  fives = colorfilter(objects(I, True, False, True), 5)
  return underpaint(I, merge(apply(move_to_closest, fives)))
 
14.333333333333334, 11.4703665, def dbbijcihcdgdehhjaidfheefhfcfabid(I):
  def move_five(obj):
    target_j = min((j for i, r in enumerate(I) for j, v in enumerate(r) if v == 2), 
                   key=lambda j: abs(center(obj)[1] - j))
    current_j = center(obj)[1]
    while abs(current_j - target_j) > 1:
      obj = shift(obj, (0, 1 if current_j < target_j else -1))
      current_j = center(obj)[1]
    return obj

  fives = colorfilter(objects(I, True, False, True), 5)
  return underpaint(I, merge(apply(move_five, fives)))
 
13.333333333333334, 6.481812, def jfbajddbhcfheagfafdafhbbahhhfagc(I):
  # Find objects
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)
  two_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 2)
  # Calculate vertical offset to align top of '5' two rows above '2' 
  v_offset = uppermost(two_obj) - uppermost(five_obj) - 2
  # Calculate horizontal offset to align leftmost columns
  h_offset = leftmost(two_obj) - leftmost(five_obj) 
  # Move the '5' object
  O = move(I, five_obj, (v_offset, h_offset))
  return O
 
13.333333333333334, 6.2492676, def dieghbaiihbcejfjihiggfdhcfaahfbc(I):
  # Find objects
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)
  two_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 2)
  # Calculate offset to position '5' two rows above '2', aligning their rightmost columns 
  offset = (uppermost(two_obj) - uppermost(five_obj) - 2, rightmost(two_obj) - rightmost(five_obj))
  # Move the '5' object
  O = move(I, five_obj, offset)
  return O
 
13.333333333333334, 6.3033667, def bafgiddbdeidehjbiihebcfaadebhfeg(I):
  # Find objects
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)
  two_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 2)
  # Calculate offset to position '5' two rows above '2', aligning their centers horizontally
  offset = (uppermost(two_obj) - uppermost(five_obj) - 2, centerofmass(two_obj)[1] - centerofmass(five_obj)[1])
  # Move the '5' object
  O = move(I, five_obj, offset)
  return O 
 
13.333333333333334, 8.335988, def fadabhibbaiaeffbicgaagdbcgahecia(I):
  # Find objects
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)
  two_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 2)
  # Calculate offset to move the '5' object two rows above the '2' object
  v_offset = uppermost(two_obj) - uppermost(five_obj) - 2
  # Move the '5' object two rows above
  I = move(I, five_obj, (v_offset, 0))
  # Recalculate '5' object after moving
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)
  # Use 'gravitate' to move '5' horizontally until adjacent to '2'
  h_offset = gravitate(toindices(five_obj), toindices(two_obj))[1]
  # Move the '5' object horizontally 
  O = move(I, five_obj, (0, h_offset))
  return O
 
13.0, 6.654698, def bifbdejafbfgecdeadehajeeieaiibfj(I):
  fives = colorfilter(objects(I, True, False, True), 5)
  other_objs = difference(objects(I, True, False, True), fives)
  target_row = sum(uppermost(obj) * len(obj) for obj in other_objs) // sum(len(obj) for obj in other_objs)
  return paint(cover(I, merge(fives)), merge(apply(lambda obj: shift(obj, (target_row - uppermost(obj), 0)), fives))) 
 
14.333333333333334, 9.582795, def dafbjbccddidebhdabgeaffdeffaebbb(I):
  fives = colorfilter(objects(I, True, False, True), 5)
  target_row = valmax(difference(objects(I, True, False, True), fives), lambda obj: uppermost(obj) * len(obj)) // width(I)
  return paint(cover(I, merge(fives)), merge(apply(lambda obj: shift(obj, (target_row - uppermost(obj), 0)), fives))) 
 
13.333333333333334, 8.713984, def adfbfeebehafeidaigeafhgfccdhfbhi(I):
  five_indices = ofcolor(I, 5)
  target_row = centerofmass(difference(asindices(I), five_indices))[0]
  moved_fives = frozenset({(5, (target_row + i - uppermost(five_indices), j)) for i, j in five_indices}) 
  return paint(cover(I, five_indices), moved_fives)
 
13.0, 6.7282014, def hebajgcahfceeeccbebeegfaaaifdahe(I):
  # Identify the '5' object
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)

  # Calculate the vertical center of all '2' objects
  center_i = centerofmass(merge(sfilter(objects(I, False, True, True), lambda obj: color(obj) == 2)))[0]
  
  # Calculate the vertical offset for the '5' object
  v_offset = center_i - centerofmass(five_obj)[0]
  
  # Move the '5' object vertically
  O = move(I, five_obj, (v_offset, 0))
  return O 
 
11.666666666666666, 6.4772515, def bddagffbjaaeeffdacdibbhbbbdfdhbf(I):
  # Find '2' and '5' objects
  twos = objects(I, True, False, True)
  fives = colorfilter(objects(I, True, False, True), 5)

  # Calculate the target row
  target_row = (uppermost(merge(apply(toindices, twos))) + lowermost(merge(apply(toindices, twos)))) // 2
  
  # Move the '5' objects
  O = cover(I, merge(fives))
  for five in fives:
    current_row = uppermost(five)
    O = paint(O, shift(five, (target_row - current_row, 0)))
  return O 
 
13.0, 6.2363696, def geicdidedegaeaahjagjdbcbabieccdh(I):
  # Find the '5' object and '2' objects' bounding box
  five_obj = extract(objects(I, False, True, True), lambda obj: color(obj) == 5)
  twos_bbox = backdrop(merge(apply(toindices, objects(I, True, False, True))))

  # Calculate the vertical center of the bounding box
  target_i = (uppermost(twos_bbox) + lowermost(twos_bbox)) // 2

  # Calculate the vertical offset for the '5' object
  offset_i = target_i - center(five_obj)[0]

  # Move the '5' object
  return move(I, five_obj, (offset_i, 0)) 
 
17.333333333333332, 16.716602, def cdaaiafbffaaeffhbbcafcigbdhdijec(I):
  def move_to_two(obj):
    twos = toobject(ofcolor(I, 2), I)
    return shift(obj, gravitate(obj, twos))

  fives = colorfilter(objects(I, True, False, True), 5)
  moved_fives = apply(move_to_two, fives)
  return underpaint(I, merge(moved_fives)) 
 
13.333333333333334, 7.2980003, def dbaddagbhggeebgdicdabhhgbaebeacb(I):
  def move_to_two(obj):
    for direction in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
      shifted = shift(obj, direction)
      if any(index(I, loc) == 2 for loc in toindices(shifted)):
        return shifted
    return obj  # No movement if no adjacent '2'

  fives = colorfilter(objects(I, True, False, True), 5)
  return underpaint(I, merge(apply(move_to_two, fives)))
 
10.0, 3.4081082, def hehjfddbdebceceejhebdehcjacfehig(I):
  two_obj = extract(objects(I, True, False, True), lambda obj: color(obj) == 2)
  five_obj = extract(objects(I, True, False, True), lambda obj: color(obj) == 5)
  return paint(cover(I, five_obj), shift(five_obj, subtract((centerofmass(two_obj)[0], rightmost(two_obj)), centerofmass(five_obj)))) 
 
13.333333333333334, 4.202579, def fbhdffbfabagecgjidbjaddhgafbefgd(I):
  two_obj = toindices(extract(objects(I, True, False, True), lambda obj: color(obj) == 2))
  five_obj = extract(objects(I, True, False, True), lambda obj: color(obj) == 5)
  return paint(cover(I, five_obj), shift(five_obj, subtract((centerofmass(two_obj)[0], rightmost(two_obj)), center(toindices(five_obj))))) 
 
11.666666666666666, 6.603056, def cgbeficgciaceffjjccffdcfjfadcbdj(I):
  fives = colorfilter(objects(I, True, False, True), 5)
  other_objects = difference(objects(I, True, False, True), fives)
  target_y = sum(center(obj)[0] for obj in other_objects) // len(other_objects)
  moved_fives =  frozenset(shift(obj, (target_y - center(obj)[0], 0)) for obj in fives) 
  return paint(cover(I, merge(fives)), merge(moved_fives))
 
8.666666666666666, 3.7240105, def jeceifbhbhchegdgbffdeafbacahaabi(I):
  # Find the center of non-5 objects' bounding box
  target_center = center(backdrop(merge(sfilter(objects(I, True, False, True), lambda o: color(o) != 5))))
  # Move 5 objects to the center, preserving their relative positions
  return paint(
      cover(I, merge(colorfilter(objects(I, True, False, True), 5))),
      merge(apply(lambda obj: shift(obj, subtract(target_center, center(obj))), colorfilter(objects(I, True, False, True), 5)))
  )
 
8.0, 4.3225694, def iafhadgfgaagefbbaigjdecgbdbedeae(I):
  # Find '2' and '5' objects
  twos = objects(I, True, False, True)
  fives = colorfilter(objects(I, True, False, True), 5)
  
  # Calculate the horizontal center of '2' objects
  center_j_twos = centerofmass(merge(apply(toindices, twos)))[1]

  # Move each '5' object
  O = cover(I, merge(fives))
  for five in fives:
    # Calculate the horizontal offset 
    h_offset = center_j_twos - centerofmass(five)[1]
    O = paint(O, shift(five, (0, h_offset)))
  return O
 
9.666666666666666, 4.7003074, def aebabcbdcaeceehfaeiiedfgecfjfbcf(I):
  # Extract all objects
  objs = objects(I, True, False, True)

  # Calculate target column
  target_col = centerofmass(merge(apply(toindices, sfilter(objs, lambda obj: color(obj) == 2))))[1]

  # Move '5' objects to the target column
  O = I
  for obj in objs:
    if color(obj) == 5:
      O = move(O, obj, (0, target_col - centerofmass(obj)[1]))
  return O
 
12.666666666666666, 6.787955, def fgedcebejafdebehbbhgahifaefegifd(I):
  two_obj = extract(objects(I, True, False, True), lambda obj: color(obj) == 2)
  five_obj = extract(objects(I, True, False, True), lambda obj: color(obj) == 5)
  return paint(cover(I, five_obj), shift(five_obj, subtract((uppermost(two_obj) + height(two_obj), leftmost(two_obj)), ulcorner(five_obj))))
 
13.333333333333334, 4.217377, def jeeedaahijijeeaiabgbddcddefibfda(I):
  two_obj = extract(objects(I, True, False, True), lambda obj: color(obj) == 2)
  five_obj = extract(objects(I, True, False, True), lambda obj: color(obj) == 5)
  offset = subtract((lowermost(two_obj), rightmost(two_obj)), lrcorner(five_obj))
  return move(I, five_obj, offset)
 
8.333333333333334, 19.124662, def ccdceefcijfbefeejbaaicabdaedjjfa(I):
  twos = ofcolor(I, 2)
  fives = ofcolor(I, 5)
  target_row =  lowermost(twos) + 1
  return paint(fill(I, 0, fives), frozenset((5, (target_row + i, j)) for i, j in fives))
 
12.0, 8.95287, def ifahicjjjgbbefaabdgajcibdicjdihb(I):
  two_obj = extract(objects(I, True, False, True), lambda obj: color(obj) == 2)
  five_obj = extract(objects(I, True, False, True), lambda obj: color(obj) == 5)
  return underpaint(fill(I, 0, toindices(five_obj)), shift(five_obj, (height(two_obj), 0)))
 
11.666666666666666, 6.261456, def cfeeichecadiedccbcfhccdcdbdbhgbb(I):
  five_objs = colorfilter(objects(I, True, False, True), 5)
  other_objs = difference(objects(I, True, False, True), five_objs)
  target_y = sum(centerofmass(obj)[0] for obj in other_objs) // len(other_objs)
  moved_objs = [shift(obj, (target_y - centerofmass(obj)[0], 0)) for obj in five_objs]
  return paint(cover(I, merge(five_objs)), merge(moved_objs))
 
19.0, 5.6047683, def efbfedgcbeceebbbjhddfgcgdehbiccd(I):
  # Find all '5' objects
  fives = colorfilter(objects(I, True, False, True), 5)
  # Find the bounding box of all non-'5' objects
  other_bbox = backdrop(merge(sfilter(objects(I, True, False, True), lambda obj: color(obj) != 5)))
  # Calculate the center of the bounding box
  target_center = center(other_bbox)
  # Merge all '5' objects into a single object
  merged_five = toobject(backdrop(merge(fives)), I)
  # Move the merged '5' object to the target center
  return move(I, merged_five, subtract(target_center, center(merged_five)))
 
13.666666666666666, 8.864398, def ccecaaaiabbeedfgabhegheaieecacjf(I):
  # Find all objects and their colors
  objs = objects(I, True, False, True)
  colors = set(color(obj) for obj in objs)

  # Find the target center based on the bounding box of objects that are not color '5'
  target_center = center(backdrop(merge(sfilter(objs, lambda obj: color(obj) != 5))))

  # Move each object of color '5' towards the target center
  return paint(
      I,
      merge(
          apply(
              lambda obj: shift(obj, subtract(target_center, center(obj))) if color(obj) == 5 else obj,
              objs,
          )
      ),
  )
 
10.0, 4.0427985, def fbbbbdaifidiedceaeeebdehjecggaeb(I):
  # Find the '2' objects and their center
  twos = colorfilter(objects(I, True, False, True), 2)
  twos_center = center(merge(apply(toindices, twos)))
  
  # Find the '5' objects
  fives = colorfilter(objects(I, True, False, True), 5)

  # Move each '5' object to align with the '2' object center
  moved_fives = frozenset(shift(obj, (twos_center[0]-centerofmass(obj)[0], twos_center[1]-centerofmass(obj)[1])) for obj in fives)
  
  # Modify the grid
  O = cover(I, merge(apply(toindices, fives)))
  for obj in moved_fives:
    O = paint(O, obj)
  return O
 
10.0, 4.286381, def ajidbefbfejheabcafcfcidaideecjhc(I):
  # Find the center column of the '2' objects
  twos = colorfilter(objects(I, True, False, True), 2)
  target_col = centerofmass(merge(apply(toindices, twos)))[1]
  
  # Move each '5' object to the target column
  O = I
  for obj in colorfilter(objects(I, True, False, True), 5):
    O = move(O, obj, (0, target_col - centerofmass(obj)[1]))
  return O
 
12.333333333333334, 6.6481433, def fdfdacffebdcedejafgfbgfbhhbcbfad(I):
  # Find the center row of the '2' objects
  twos = colorfilter(objects(I, True, False, True), 2)
  target_row = centerofmass(merge(apply(toindices, twos)))[0]
  
  # Move each '5' object to the target row
  O = I
  for obj in colorfilter(objects(I, True, False, True), 5):
    O = move(O, obj, (target_row - centerofmass(obj)[0], 0))
  return O
 
9.0, 4.8320837, def gjfffibiccghedhbjfcaccebbfgdcada(I):
  # Find the bounding box of '2' objects
  twos_indices = merge(apply(toindices, colorfilter(objects(I, True, False, True), 2)))
  min_i, min_j = ulcorner(twos_indices)
  max_i, max_j = lrcorner(twos_indices)
  
  # Calculate the center of the bounding box
  center_i, center_j = (min_i + max_i) // 2, (min_j + max_j) // 2

  # Move each '5' object to the center of the bounding box
  O = I
  for obj in colorfilter(objects(I, True, False, True), 5):
    O = move(O, obj, (center_i - centerofmass(obj)[0], center_j - centerofmass(obj)[1]))
  return O
 
9.0, 3.398942, def ecabbfgbihagejfabfhheaafdbeffade(I):
  # Calculate the target location: center of mass of '2' objects
  target = centerofmass(toobject(ofcolor(I, 2), I))

  # Define a function to move an object towards the target until just outside the target area.
  def move_to_target(obj):
    while not intersection(toindices(obj), backdrop(frozenset({(0,target)}))):
      obj = shift(obj, (sign(target[0] - centerofmass(obj)[0]), sign(target[1] - centerofmass(obj)[1])))
    return obj

  # Identify all '5' objects and move them towards the target area.
  fives = colorfilter(objects(I, True, False, True), 5)
  moved_fives = apply(move_to_target, fives)

  # Combine: Remove original '5' objects and paint the moved ones.
  return underpaint(cover(I, merge(fives)), merge(moved_fives))
 
12.666666666666666, 12.47942, def haajdjfcaeieecfbjjefffeiafiifdcd(I):
  # Identify the '2' objects
  two_objects = merge(colorfilter(objects(I, True, False, True), 2))
  
  # Define a function to move a single '5' object 
  def move_five(obj):
    # Calculate the direction to move
    move_vector = gravitate(obj, two_objects)
    # Move the object
    return shift(obj, move_vector)

  # Find all '5' objects and apply the move_five function
  five_objects = colorfilter(objects(I, True, False, True), 5)
  moved_fives = apply(move_five, five_objects)

  # Combine: remove old '5' objects and paint the new ones
  return underpaint(cover(I, merge(five_objects)), merge(moved_fives))
 
19.333333333333332, 9.155649, def hbaccebbdfaiecabjccaeegdiecabfdf(I):
  # Get indices of all '2' objects
  twos_indices = ofcolor(I, 2)
  
  # Define a function to calculate distance from an object to '2' objects
  def distance_to_twos(obj):
    return min(manhattan(obj, frozenset({(0, (i, j))})) for i, j in twos_indices)
  
  # Define a function to move a '5' object closer to '2' objects
  def move_closer(obj):
    current_distance = distance_to_twos(obj)
    for direction in [UP, DOWN, LEFT, RIGHT]:
      new_obj = shift(obj, direction)
      new_distance = distance_to_twos(new_obj)
      if new_distance < current_distance:
        return new_obj
    return obj  # No better move found, stay put

  # Move all '5' objects iteratively until no closer move is possible
  fives = colorfilter(objects(I, True, False, True), 5)
  previous_fives = frozenset()
  while fives != previous_fives:
    previous_fives = fives
    fives = apply(move_closer, fives)

  # Combine: remove old '5's, paint new ones
  return underpaint(cover(I, merge(previous_fives)), merge(fives))
 
9.333333333333334, 2.820828, def efbgidcacagdefdhbacbfcaejfffdaah(I):
  # Find the objects
  five_obj = extract(objects(I, True, False, True), lambda obj: color(obj) == 5)
  two_obj = extract(objects(I, True, False, True), lambda obj: color(obj) == 2)
  # Calculate offset to center '5' vertically and align to the right of '2'
  offset = (center(two_obj)[0] - center(five_obj)[0], rightmost(two_obj) - leftmost(five_obj) + 1)
  # Move the '5' object 
  O = move(I, five_obj, offset)
  return O
 
10.0, 4.3581495, def ajhgfbddhbcaebdhiejjbjcbjchbgfcb(I):
  # Find relevant objects
  five_obj = extract(objects(I, True, False, True), lambda obj: color(obj) == 5)
  two_obj = extract(objects(I, True, False, True), lambda obj: color(obj) == 2)
  # Calculate target position for the '5' object's upper-left corner
  target_pos = (center(two_obj)[0] - height(five_obj) // 2, rightmost(two_obj) - leftmost(five_obj) + 1)
  # Move the '5' object by applying the calculated offset
  return paint(cover(I, five_obj), shift(five_obj, subtract(target_pos, ulcorner(five_obj))))
 
10.0, 3.644502, def agfaccfgbefbeaffbfjabfbjaeecfiee(I):
  # Identify the objects
  five_obj = extract(objects(I, True, False, True), matcher(color, 5))
  two_obj = extract(objects(I, True, False, True), matcher(color, 2))
  # Calculate the required shift for alignment
  shift_amount = (center(two_obj)[0] - center(five_obj)[0], rightmost(two_obj) - rightmost(five_obj) + 1)
  # Move the '5' object to the new position
  return paint(cover(I, five_obj), shift(five_obj, shift_amount)) 
 
12.0, 7.983959, def bghfdebdhchjecgfafhheiigcaefaeff(I):
  # Find objects in the grid, excluding background
  objs = objects(I, True, False, True)
  # Extract the object with color 5
  five_obj = extract(objs, lambda obj: color(obj) == 5)
  # Find the center of all objects other than the '5' object
  target_center = center(toindices(merge(sfilter(objs, lambda obj: color(obj) != 5))))
  # Calculate the vertical offset to align '5' object with the target center
  offset = subtract((0, target_center[1]), center(five_obj))
  # Move the '5' object vertically
  return move(I, five_obj, offset)
 
13.0, 6.7282014, def dabffdccffcaecebiedbbbajeaedgafb(I):
  # Identify objects in the grid, excluding background
  objs = objects(I, True, False, True)
  # Find the '5' object
  five_obj = extract(objs, matcher(color, 5)) 
  # Find the center of other objects
  other_center = center(toindices(merge(sfilter(objs, lambda obj: color(obj) != 5))))
  # Calculate the vertical offset
  dy = other_center[0] - center(five_obj)[0]
  # Move the '5' object vertically
  return move(I, five_obj, (dy, 0))
 
11.666666666666666, 6.603056, def dfahbfafbgceefafbgfbdcididdegafi(I):
  # Extract objects with colors '2' and '5'
  two_objs = colorfilter(objects(I, True, False, True), 2)
  five_objs = colorfilter(objects(I, True, False, True), 5)
  # Calculate the average vertical center of '2' objects 
  target_y = sum(center(obj)[0] for obj in two_objs) // len(two_objs)
  # Define a function to move an object to the target vertical position
  def move_to_target(obj):
    current_y = center(obj)[0]
    offset = target_y - current_y
    return shift(obj, (offset, 0))
  # Apply the movement to each '5' object
  moved_fives = apply(move_to_target, five_objs)
  # Update the grid
  return paint(cover(I, merge(five_objs)), merge(moved_fives))
 
10.0, 3.8295712, def fddcbahfggfbefbaagbddcfbfbigdgdc(I):
  # Find '5' objects and '2' objects
  fives = colorfilter(objects(I, True, False, True), 5)
  twos = colorfilter(objects(I, True, False, True), 2)
  # Calculate target column using '2' objects' center
  target_col = center(merge(apply(toindices, twos)))[1]
  # Move each '5' object to align with the '2' object column
  moved_fives = frozenset(shift(obj, (0, target_col - centerofmass(obj)[1])) for obj in fives)
  # Modify the grid
  O = cover(I, merge(apply(toindices, fives)))
  for obj in moved_fives:
    O = paint(O, obj)
  return O
 
10.0, 3.7499905, def bfhhddbcfbacejefjdcicfaeecebfbce(I):
  # Find indices of '2's and '5' objects
  two_indices = ofcolor(I, 2)
  fives = colorfilter(objects(I, True, False, True), 5)
  # Calculate target column using '2' indices
  target_col = center(backdrop(two_indices))[1]
  # Move each '5' object to align with the target column
  moved_fives = frozenset(shift(obj, (0, target_col - leftmost(obj))) for obj in fives)
  # Modify the grid
  O = cover(I, merge(apply(toindices, fives)))
  for obj in moved_fives:
    O = paint(O, obj)
  return O
 
12.666666666666666, 6.2696114, def iaejjdabicaaefbfiefabeeafbeeacbc(I):
  # Find '5' objects and '2' objects
  fives = colorfilter(objects(I, True, False, True), 5)
  twos = colorfilter(objects(I, True, False, True), 2)
  # Calculate the offset needed to align '5' objects with '2' objects
  offset = (0, center(merge(apply(toindices, twos)))[1] - center(merge(apply(toindices, fives)))[1])
  # Move each '5' object by the calculated offset
  moved_fives = frozenset(shift(obj, offset) for obj in fives)
  # Modify the grid
  O = cover(I, merge(apply(toindices, fives)))
  for obj in moved_fives:
    O = paint(O, obj)
  return O
 
12.0, 10.585548, def fdeadabdbcafehdabfgbedfdeeebefad(I):
  # Find '2' objects and their rightmost column
  twos = colorfilter(objects(I, True, False, True), 2)
  target_col = rightmost(merge(apply(toindices, twos)))
  # Find '5' objects and calculate their width
  fives = colorfilter(objects(I, True, False, True), 5)
  five_width = width(merge(apply(toindices, fives)))
  # Calculate the offset to align '5' objects to the right of '2' objects
  offset = (0, target_col + 1 - leftmost(merge(apply(toindices, fives))))
  # Move each '5' object by the calculated offset
  moved_fives = frozenset(shift(obj, offset) for obj in fives)
  # Modify the grid
  O = cover(I, merge(apply(toindices, fives)))
  for obj in moved_fives:
    O = paint(O, obj)
  return O
 
10.0, 4.1570115, def ecacfeddjdjheihfaddjccccfddebbeg(I):
  # Find '5' objects and '2' objects
  fives = colorfilter(objects(I, True, False, True), 5)
  two_indices = ofcolor(I, 2)
  # Find the center column of the '2' object
  target_column = center(backdrop(two_indices))[1]
  # Move each '5' object to the target column
  moved_fives = frozenset()
  for obj in fives:
    five_center = center(obj)[1]
    moved_fives = moved_fives | {shift(obj, (0, target_column - five_center))} 
  # Modify the grid
  O = cover(I, merge(apply(toindices, fives)))
  for obj in moved_fives:
    O = paint(O, obj)
  return O
 
13.333333333333334, 5.279074, def dadghbeebjfiefdfbaiecdidchdbjdfd(I):
  two_obj = extract(objects(I, True, False, True), lambda obj: color(obj) == 2)
  five_obj = extract(objects(I, True, False, True), lambda obj: color(obj) == 5)
  offset = subtract(centerofmass(two_obj), ulcorner(five_obj))
  return move(I, five_obj, offset)
 
14.0, 6.810926, def dafeajaaeabdeccibbcdechefaeddgbj(I):
  twos = ofcolor(I, 2)
  fives = ofcolor(I, 5)
  center_twos = (sum(i for i, j in twos) // len(twos), sum(j for i, j in twos) // len(twos))
  corner_fives = (min(i for i, j in fives), min(j for i, j in fives)) 
  offset = subtract(center_twos, corner_fives)
  return move(I, toobject(fives, I), offset)
 
12.0, 3.222345, def bcgcebebeijaeccfjdjfafedfdfchcgh(I):
  objs = objects(I, True, False, True)
  two_obj = extract(objs, lambda obj: color(obj) == 2)
  five_obj = extract(objs, lambda obj: color(obj) == 5)
  target = center(toindices(two_obj))
  return paint(cover(I, five_obj), recolor(5, shift(toindices(five_obj), subtract(target, ulcorner(five_obj)))))
 
13.333333333333334, 7.059608, def hiafbhgefdbiejgaaiedjgfebejcdfjb(I):
  # Find the '2' and '5' objects
  two_obj = extract(objects(I, True, False, True), lambda obj: color(obj) == 2)
  five_obj = extract(objects(I, True, False, True), lambda obj: color(obj) == 5)
  # Calculate the target row
  target_row = uppermost(two_obj) + height(two_obj) // 2
  # Calculate the vertical offset
  offset = target_row - (uppermost(five_obj) + height(five_obj) // 2)
  # Move the '5' object vertically
  return move(I, five_obj, (offset, 0)) 
 
13.333333333333334, 6.789945, def ageejahchijbecfcaedjbbccaaedfaff(I):
  # Find objects and filter for '2' and '5'
  objs = objects(I, True, False, True)
  two_indices = toindices(extract(objs, lambda obj: color(obj) == 2))
  five_indices = toindices(extract(objs, lambda obj: color(obj) == 5))
  # Calculate target row using the average of '2' object rows
  target_row = sum(i for i, _ in two_indices) // len(two_indices)
  # Calculate the vertical offset for '5' object
  five_center_row = uppermost(five_indices) + height(five_indices) // 2
  offset = target_row - five_center_row
  # Shift '5' object vertically
  return paint(cover(I, five_indices), shift(toobject(five_indices, I), (offset, 0)))
 
9.333333333333334, 5.435855, def icedfbiafbhjehcfjgcdaebhfhgefaff(I):
  # Find the horizontal center of all '2' objects
  two_center_j = centerofmass(merge(apply(toindices, colorfilter(objects(I, True, False, True), 2))))[1]
  
  # Move each '5' object
  O = I
  for obj in colorfilter(objects(I, True, False, True), 5):
    # Calculate the horizontal offset
    h_offset = two_center_j - centerofmass(obj)[1]
    # Move the object to the right of the '2' objects
    O = move(O, obj, (0, h_offset + width(obj)))  
  return O
 
12.333333333333334, 6.358842, def dcieddcdgacceadejfffcbgebbaeihdf(I):
  # Extract the '2' and '5' objects
  twos = colorfilter(objects(I, True, False, True), 2)
  fives = colorfilter(objects(I, True, False, True), 5)
  
  # Calculate the horizontal center of '2' objects
  target_j = centerofmass(merge(apply(toindices, twos)))[1]

  # Move each '5' object to the target column, stacking vertically
  O = I
  current_i = uppermost(merge(apply(toindices, twos)))
  for obj in fives:
    O = move(O, obj, (current_i - uppermost(obj), target_j - centerofmass(obj)[1]))
    current_i += height(obj)
  return O
 
13.333333333333334, 9.2928915, def efddcifcjahbeabcbibcbaaddaidachd(I):
  # Create a function to find the right edge of a color
  def find_right_edge(grid, color):
    return max(j for i, row in enumerate(grid) for j, v in enumerate(row) if v == color)

  # Find the right edge of '2' objects
  right_edge = find_right_edge(I, 2)

  # Move each '5' object to the right of the right edge
  O = I
  for obj in colorfilter(objects(I, True, False, True), 5):
    O = move(O, obj, (0, right_edge - leftmost(obj) + 1))
  return O
 
10.0, 4.658039, def idabejcafaegebccaaeagedddibbedgd(I):
  # Find the horizontal center of the grid
  grid_center_j = width(I) // 2

  # Move each '5' object 
  O = I
  for obj in colorfilter(objects(I, True, False, True), 5):
    # Calculate the horizontal offset based on the grid center
    h_offset = grid_center_j - centerofmass(obj)[1]
    # Move the object
    O = move(O, obj, (0, h_offset))  
  return O
 
15.0, 11.363552, def fjebbccggaeaedeebdddfagbdefbbeac(I):
  # Define a function to find the topmost position for a color
  def find_topmost_position(grid, color):
    for i, row in enumerate(grid):
      if color in row:
        return i
    return 0  # Default to top row if color not found

  # Find the topmost position of '2' objects
  top_pos = find_topmost_position(I, 2)

  # Move each '5' object above the '2' objects
  O = I
  for obj in colorfilter(objects(I, True, False, True), 5):
    O = move(O, obj, (top_pos - uppermost(obj) - height(obj), 0))
  return O
 
