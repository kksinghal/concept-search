4.0, 9.714299, def fgfgfdefjcdfejahiddcadeifffcbhfa(I):
    # Find the indices of the most common color (assumed to be the background)
    x1 = ofcolor(I, mostcommon(I)) 
    # Find objects, excluding the background
    x2 = objects(I, univalued=False, diagonal=False, without_bg=True)
    # Find the largest object 
    x3 = argmax(x2, size) 
    # Get the indices one cell inside the object
    x4 = inbox(x3) 
    # Combine background indices with the inner indices of the object
    x5 = x1 | x4
    # Fill the grid with 2 at the combined indices
    O = fill(I, 2, x5)
    return O
 
14.0, 8.840161, def ebfdjfdadhacebfajfaiaafdgajbbfec(I):
  # Directly find indices of the target color (5 in examples)
  x1 = ofcolor(I, 5)
  # Find the indices one step inwards from the target color
  x2 = inbox(x1)
  # Fill the grid with 2 at the identified indices
  O = fill(I, 2, x2) 
  return O
 
11.5, 18.67364, def cbaffejbehadehidadhcibdiiccceacd(I):
  # Find objects, this time allowing diagonal connections
  x1 = objects(I, univalued=False, diagonal=True, without_bg=True) 
  # Find the largest object, considering diagonal connections
  x2 = argmax(x1, size) 
  # Get indices for a border two steps inwards from the object's edge
  x3 = compose(inbox, inbox)(x2)
  # Fill the grid with 2 at the identified indices
  O = fill(I, 2, x3)
  return O
 
13.0, 26.634548, def aceafdceidibediiahhdcchbehhhghjj(I):
    # Define a lambda function to check if an index is on the outer border of an object
    is_outer_border = lambda idx, obj: idx in obj and len(dneighbors(idx) - toindices(obj)) > 0
    
    # Find objects
    x1 = objects(I, univalued=False, diagonal=False, without_bg=True)
    
    # Find the largest object
    x2 = argmax(x1, size)
    
    # Get indices of the outer border of the largest object
    x3 = frozenset((i, j) for i in range(len(I)) for j in range(len(I[0])) if is_outer_border((i, j), x2))

    # Shift the border inwards
    x4 = shift(x3, (1, 1))

    # Intersect the shifted border with the original object
    x5 = intersection(toindices(x4), toindices(x2))

    # Fill the grid with 2 at the identified indices
    O = fill(I, 2, x5)
    return O
 
10.0, 10.884431, def ebafhfiabaidefjcabbffacghefffahb(I):
    # Find objects, this time excluding diagonal connections and background
    x1 = objects(I, univalued=False, diagonal=False, without_bg=True)
    
    # Find the largest object
    x2 = argmax(x1, size)
    
    # Apply a lambda function to each cell in the largest object
    x3 = frozenset((v, (i, j)) for v, (i, j) in x2 if any(0 <= i + di < len(I) and 0 <= j + dj < len(I[0]) and (i + di, j + dj) not in toindices(x2) for (di, dj) in [(1, 0), (-1, 0), (0, 1), (0, -1)]))
    
    # Extract the indices from the filtered object
    x4 = toindices(x3)
    
    # Shift the indices one step inwards 
    x5 = shift(x4, (1, 1))

    # Intersect the shifted indices with the original object
    x6 = intersection(x5, toindices(x2))
    
    # Fill the grid with 2 at the identified indices
    O = fill(I, 2, x6)
    return O
 
13.0, 26.634548, def ehcbjacedcfhebcgiffcgfjcibaecbij(I):
  # Find the background color
  x1 = mostcolor(I) 
  # Get all objects excluding the background
  x2 = objects(I, T, F, T) 
  # Find the second largest object
  x3 = argmax(x2, size)
  x4 = remove(x3, x2)
  x5 = argmax(x4, size)
  # Get the bounding box of the second largest object
  x6 = ulcorner(x5) 
  x7 = lrcorner(x5)
  # Calculate the indices for recoloring
  x8 = (x6[0] + 1, x6[1] + 1)
  x9 = (x7[0], x6[1] + width(x5) // 2 + 1) 
  # Recolor the object
  O = fill(I, TWO, connect(x8, x9)) 
  return O
 
15.0, 13.236958, def eiebafedidgeebffaabgjghajbdddaaa(I):
  # Find all objects excluding the background
  x1 = objects(I, T, F, T)
  # Sort objects by size in descending order
  x2 = order(x1, size)
  # Get the second largest object
  x3 = x2[ONE] 
  # Find the width of the object
  x4 = width(x3) 
  # Calculate the shift needed for recoloring
  x5 = (ZERO, x4 // THREE)
  # Shift the object
  x6 = shift(x3, x5)
  # Get the indices to be recolored
  x7 = toindices(x6) 
  # Intersect the shifted and original object indices
  x8 = intersection(x7, toindices(x3)) 
  # Recolor the object
  O = fill(I, TWO, x8)
  return O
 
9.5, 15.409898, def ihccfejbdaiaeabijdeccdjgcdceceec(I):
  # Find all objects excluding the background
  x1 = objects(I, T, F, T)
  # Sort objects by size in descending order
  x2 = order(x1, size)
  # Get the second largest object
  x3 = x2[1]
  # Find the upper-left corner of the object
  x4 = ulcorner(x3)
  # Calculate the starting point for recoloring
  x5 = (x4[0] + 1, x4[1] + 1)
  # Create a horizontal line for recoloring
  x6 = {(x5[0], x5[1] + i) for i in range(width(x3) - TWO)} 
  # Intersect the line with the object indices
  x7 = intersection(toindices(x3), x6)
  # Recolor the object
  O = fill(I, TWO, x7) 
  return O
 
15.5, 18.396626, def ddifcacbefegebdfifiibebfchihdceb(I):
  # Get all objects excluding the background
  x1 = objects(I, T, F, T) 
  # Find sizes of all objects
  x2 = apply(size, x1)
  # Remove the largest object's size
  x3 = remove(maximum(x2), x2)
  # Find the size of the second largest object
  x4 = maximum(x3) 
  # Filter for objects with that size
  x5 = sizefilter(x1, x4) 
  # Merge all objects with that size
  x6 = merge(x5) 
  # Create a vertical line starting from the upper-left corner
  x7 = connect(ulcorner(x6), (lowermost(x6), ulcorner(x6)[1]))
  # Shift the vertical line to the right
  x8 = shift(x7, (ZERO, width(x6) // 2 - ONE)) 
  # Intersect the line and the object indices
  x9 = intersection(toindices(x6), x8) 
  # Recolor the object
  O = fill(I, TWO, x9) 
  return O
 
28.0, 14.459544, def ccccjjfddejcejdbbjeifdbgdaffbefa(I):
    objs = objects(I, T, F, F)
    modified_objs = frozenset()
    for obj in objs:
        box_indices = box(toindices(obj))
        inner_indices = difference(toindices(obj), box_indices)
        modified_obj = recolor(TWO, inner_indices)
        modified_objs = combine(modified_objs, modified_obj)
    O = paint(I, modified_objs)
    return O
 
13.0, 26.634548, def fdgcccbgifaceiabihecbaebdbejcaba(I):
  objs = objects(I, T, F, F)
  inner_area = frozenset()
  for obj in objs:
    for dj in range(-1,2):
      for di in range(-1,2):
        if abs(di) == abs(dj):
          continue
        shifted = shift(obj, (di,dj))
        inner_area = intersection(inner_area, toindices(shifted))
  O = fill(I, TWO, inner_area)
  return O
 
54.0, 41.66518, def cefaegbiibcdecbfaedjgbaiagebfccf(I):
    O = I
    objs = objects(I, T, F, F)
    for obj in objs:
        h, w = shape(obj)
        if h <= 2 or w <= 2: # Handle small objects
          continue
        start = (uppermost(obj) + 1, leftmost(obj) + 1)
        dims  = (h - 2, w - 2)
        O = fill(O, TWO, asindices(crop(I, start, dims)))
    return O
 
11.0, 14.887344, def ffbdidjdegbceecfjeccahcgahifagab(I):
  objs = objects(I, T, F, T)
  for obj in objs:
    up = uppermost(obj)
    left = leftmost(obj)
    O = fill(I, 2, frozenset({(up + 1, left + 1), (up + 1, left + 2), (up + 2, left + 1), (up + 2, left + 2)}))
  return O
 
12.0, 14.065226, def ffiiceeeaicdefjbieccfbhidgdecbce(I):
  objs = objects(I, T, F, T)
  for obj in objs:
    center_i, center_j = centerofmass(obj)
    O = fill(I, 2, frozenset({(center_i, center_j), (center_i - 1, center_j), (center_i, center_j - 1), (center_i - 1, center_j - 1)}))
  return O
 
10.0, 6.8795257, def jgdhhfbebiddeadijfbcechcfifdjeaj(I):
  objs = objects(I, T, F, T)
  new_objs = set()
  for obj in objs:
    center_i, center_j = centerofmass(obj)
    new_objs.add(frozenset({(2, (center_i, center_j)), (2, (center_i - 1, center_j)), (2, (center_i, center_j - 1)), (2, (center_i - 1, center_j - 1))}))
  O = paint(I, merge(new_objs))
  return O
 
8.0, 8.079822, def bhafcbcdheaceaceicbhigjhffbbddcb(I):
  objs = objects(I, T, F, T)
  modified_grid = I
  for obj in objs:
    if size(obj) > 4:
        for i, j in toindices(obj):
            if (uppermost(obj) < i < lowermost(obj) - 1) and (leftmost(obj) < j < rightmost(obj) - 1):
                modified_grid = fill(modified_grid, 2, frozenset({(i,j)}))
  return modified_grid 
 
11.0, 13.4743805, def befgebbaahaeeccdiddhadbcbjbaefag(I):
  objs = objects(I, T, T, T)
  obj = extract(objs, lambda obj: color(obj) == 5)
  top_left = ulcorner(obj)
  bottom_right = lrcorner(obj)
  replace_area = frozenset((i, j) for i in range(top_left[0] + 1, bottom_right[0] + 1) for j in range(top_left[1] + 1, bottom_right[1] - 1))
  O = fill(I, 2, replace_area)
  return O
 
15.0, 12.663304, def jejabadgeggbeaedjacgcbbcgiihfcbf(I):
  five_indices = ofcolor(I, 5)
  top_row = min(i for i, j in five_indices)
  filtered_indices = frozenset((i, j) for i, j in five_indices if i > top_row)
  left_col = min(j for i, j in filtered_indices)
  right_col = max(j for i, j in filtered_indices)
  replace_area = frozenset((i, j) for i, j in filtered_indices if left_col < j < right_col)
  O = fill(I, 2, replace_area)
  return O
 
7.0, 14.452582, def jcaifabafeaiecaiajcaedfdfbdhcdbc(I):
    obj = extract(objects(I, T, T, T), lambda obj: color(obj) == 5)
    shifted_obj = shift(obj, (1, 0))
    trimmed_obj = frozenset((v, (i, j)) for v, (i, j) in shifted_obj if i < lowermost(obj))
    left_trimmed = frozenset((v, (i, j)) for v, (i, j) in trimmed_obj if leftmost(obj) < j < rightmost(obj))
    replace_area = toindices(left_trimmed)
    O = fill(I, 2, replace_area)
    return O
 
12.0, 17.673769, def ighfdidjaiaceceiaegdbehdjjghdadd(I):
  five_obj = extract(objects(I, T, T, T), lambda obj: color(obj) == 5)
  h, w = shape(five_obj)
  center_x = leftmost(five_obj) + w // 2
  replace_area = frozenset((i, j) for i, j in toindices(five_obj) if i > uppermost(five_obj) and center_x - w // 6 <= j <= center_x + w // 6)
  O = fill(I, 2, replace_area)
  return O
 
30.5, 15.5037365, def ejededbfccdjecfeiibacfddceebbeid(I):
    # x1: Identify the most frequent color (excluding background 0)
    x1 = mostcolor(sfilter(asobject(I), lambda x: x[0] != 0))
    # x2: Find all indices of this color
    x2 = ofcolor(I, x1) 
    # x3: Identify the bounding box of these indices 
    x3 = backdrop(x2)
    # x4: Find indices inside the bounding box but not part of the object
    x4 = difference(x3, x2)
    # O: Fill the identified interior indices with 2
    O = fill(I, 2, x4) 
    return O
 
24.0, 41.457542, def bcccehfdgacbedbbajedafefdebdaeae(I):
  # x1: Obtain all objects present in the grid, excluding the background
  x1 = objects(I, F, F, T)
  # x2:  Identify the largest object based on the number of cells it occupies
  x2 = argmax(x1, size)
  # x3: Calculate the upper-left corner index of the largest object
  x3 = ulcorner(x2)
  # x4: Calculate the dimensions (height and width) of the largest object
  x4 = shape(x2)
  # x5: Extract the smallest subgrid containing the largest object
  x5 = subgrid(x2, I)
  # x6: Create a new grid filled with 2s, having the same dimensions as the subgrid
  x6 = canvas(2, x4)
  # x7: Overlay the subgrid onto the new grid filled with 2s, effectively replacing the interior of the object
  x7 = paint(x6, asobject(x5))
  # x8: Create a new grid filled with 0s, having the same dimensions as the input grid
  x8 = canvas(0, shape(I))
  # O:  Paint the modified subgrid (with filled interior) onto the new grid filled with 0s at the original location of the object
  O = paint(x8, shift(asobject(x7), x3))
  return O
 
2.5, 3.874306, def bdeefbgcdhajebbgjjagdgafcfhddacc(I):
  # x1: Identify all objects within the grid, excluding the background
  x1 = objects(I, F, F, T)
  # x2: Determine the object with the largest size
  x2 = argmax(x1, size)
  # x3:  Extract the indices of all cells belonging to this largest object
  x3 = toindices(x2)
  # x4: Generate a new grid identical to the input grid
  x4 = I
  # x5: Iterate through each cell index in the grid
  for i in range(len(I)):
    for j in range(len(I[0])):
      # x6: Check if the current cell index is part of the largest object's indices
      if (i, j) in x3:
        # x7:  If the current index is not on the bounding box of the object, fill it with 2
        if (i, j) not in box(x3):
          x4 = fill(x4, 2, {(i, j)})
  # O: The modified grid with the filled interior of the largest object
  O = x4
  return O
 
61.0, 20.598654, def addbheedgjdfeedjaiigheafcbadffaa(I):
  # x1: Extract all objects from the input grid, excluding background objects
  x1 = objects(I, F, F, T)
  # x2: Find the object with the largest size, representing the main object we want to modify
  x2 = argmax(x1, size)
  # x3:  Get the color of the largest object, which will be used to identify its cells in the grid
  x3 = color(x2)
  # x4:  Get the indices of all cells in the grid that have the same color as the largest object
  x4 = ofcolor(I, x3)
  # x5: Initialize an empty set to store the indices of the object's boundary
  x5 = initset((0, 0))
  # x6: Iterate over each cell index of the largest object
  for i in x4:
    # x7:  Get the indices of the 4-neighboring cells (up, down, left, right)
    x7 = dneighbors(i)
    # x8: Iterate over each neighboring cell index
    for j in x7:
      # x9:  Check if the neighboring cell index is within the grid bounds
      x9 = (0 <= j[0] < len(I) and 0 <= j[1] < len(I[0]))
      # x10: If the neighboring cell is within bounds and its color is different from the object's color, add the current cell index to the boundary set
      if x9 and index(I, j) != x3:
        x5 = insert(i, x5)
  # x11: Get all indices of the grid
  x11 = asindices(I)
  # x12:  Find the difference between all grid indices and the object's boundary indices, resulting in the indices of the object's interior
  x12 = difference(x11, x5)
  # O: Fill the interior indices with the value 2, keeping the boundary and other parts of the grid unchanged
  O = fill(I, 2, x12)
  return O
 
15.0, 12.074715, def ejaeefbdheeieeafabgdaaagbfajfefa(I):
  # Find all objects excluding the background
  x1 = objects(I, T, F, T)
  # Sort objects by size in descending order
  x2 = order(x1, size)
  # Get the second largest object
  x3 = x2[ONE] 
  # Calculate the shift based on object orientation
  x4 = (ZERO, width(x3) // THREE) if width(x3) > height(x3) else (height(x3) // THREE, ZERO)
  # Shift the object
  x5 = shift(x3, x4)
  # Get the indices to be recolored
  x6 = toindices(x5) 
  # Intersect the shifted and original object indices
  x7 = intersection(x6, toindices(x3)) 
  # Recolor the object
  O = fill(I, TWO, x7)
  return O
 
11.0, 16.566965, def cjabbibcifffebbfbjbfaeichdgdbeci(I):
  # Find all objects excluding the background
  x1 = objects(I, T, F, T)
  # Sort objects by size in descending order
  x2 = order(x1, size)
  # Get the second largest object
  x3 = x2[ONE]
  # Get the object's center of mass
  x4 = centerofmass(x3)
  # Calculate shift amount based on orientation
  x5 = (ZERO, width(x3) // SIX) if width(x3) > height(x3) else (height(x3) // SIX, ZERO)
  # Create a strip passing through the shifted center
  x6 = connect(subtract(x4, x5), add(x4, x5))
  # Intersect the strip and the object's indices
  x7 = intersection(x6, toindices(x3))
  # Recolor the intersecting area
  O = fill(I, TWO, x7)
  return O
 
16.5, 14.960122, def bdbfccccieieefbdiiighgdfajhdfbba(I):
  objs = objects(I, T, F, F)
  for obj in objs:
    shifted_in = shift(toindices(obj), (-ONE, -ONE))
    shifted_out = shift(toindices(obj), (ONE, ONE))
    inner = intersection(shifted_in, shifted_out)
    I = fill(I, TWO, inner)
  return I
 
11.0, 13.511634, def fbiceeebcjibeejfbaeghffjbcdbchbc(I):
    objs = objects(I, T, F, F)
    inner_cells = set()
    for obj in objs:
        for i, j in toindices(obj):
            if (i - 1, j) in toindices(obj) and \
               (i + 1, j) in toindices(obj) and \
               (i, j - 1) in toindices(obj) and \
               (i, j + 1) in toindices(obj):
                   inner_cells.add((i, j))
    return fill(I, TWO, inner_cells)
 
5.5, 14.406735, def eebjajibcbgbeggijahedbhcagfcejfc(I):
  objs = objects(I, T, F, T)
  modified_grid = I
  for obj in objs:
    if size(obj) > 4:
      if not square(obj):
        modified_grid = fill(modified_grid, 2, inbox(obj)) 
      else: 
        modified_grid = fill(modified_grid, 2, intersection(inbox(obj), combine(hfrontier(ulcorner(obj)), vfrontier(urcorner(obj)))))
  return modified_grid
 
21.0, 16.94953, def cccddfcfehefedgficebjchfiagcfecc(I):
  objs = objects(I, T, F, T)
  O = I
  for obj in objs:
    if size(obj) > 4:
      c = centerofmass(obj)
      if not square(obj):
        O = paint(O, recolor(2, shift(obj, subtract((1,1), c)))) 
      else:
        O = paint(O, recolor(2, shift(intersection(inbox(obj), combine(hfrontier(ulcorner(obj)), vfrontier(urcorner(obj)))), subtract((1,1), c))))
  return O
 
0.0, 0.0, def aaadfcehcijdeggdicacebjehbbffeef(I):
  objs = objects(I, T, F, T)
  G = I
  for obj in objs:
    if size(obj) > 4:
      for i, j in toindices(obj):
        if (hmatching(frozenset({(i, j)}), inbox(obj))) and (vmatching(frozenset({(i, j)}), inbox(obj))):
          G = fill(G, 2, frozenset({(i, j)}))
  return G
 
7.5, 13.463284, def geebcaagcbceedehaihbibhbffjicbej(I):
  objs = objects(I, T, F, T)
  O = I
  for obj in objs:
    if size(obj) > 4:
      if not square(obj):
        O = paint(O, recolor(2, inbox(obj)))
      else:
        c = ulcorner(obj)
        s = shape(obj)
        O = paint(O, recolor(2, combine(asindices(crop(canvas(0, s), (0, s[1] - 1), (1, 1))), asindices(crop(canvas(0, s), (s[0] - 1, 0), (1, s[1] - 1))))))
  return O 
 
15.5, 23.17474, def hgbhedhfdjabeabebaefeadjiiedfgai(I):
  objs = objects(I, T, F, T)
  G = I
  for obj in objs:
    if size(obj) > 4:
      if not square(obj):
        G = paint(G, recolor(2, inbox(obj)))
      else:
        parts = hsplit(vsplit(subgrid(obj, G), 2)[0], 2)
        G = paint(cover(G, obj), combine(recolor(2, asindices(parts[1])), recolor(color(obj), asindices(parts[0]))))
  return G 
 
13.0, 18.340395, def gjeechbjgdbjeddaiebhachaahehfagg(I):
  obj = extract(objects(I, T, T, T), lambda obj: color(obj) == 5)
  w = width(obj) // 3
  start = leftmost(obj) + w
  replace_area = frozenset((i, j) for i, j in toindices(obj) if start <= j < start + w)
  O = fill(I, 2, replace_area)
  return O
 
12.0, 6.4288464, def cgdfagiihbaiedjeifiahieefcdbieab(I):
  O = I
  for obj in objects(I, T, T, T):
    if color(obj) == 5:
      w = width(obj) // 3
      start = leftmost(obj) + w
      replace_area = product(interval(uppermost(obj), lowermost(obj) + 1, 1), interval(start, start + w, 1))
      O = fill(O, 2, replace_area)
  return O
 
12.0, 10.050906, def gjcbbfihiigieidjicjabffcehcbbefd(I):
  def replace_middle_third(obj):
    w = width(obj) // 3
    start = leftmost(obj) + w
    replace_area = frozenset((i, j) for i, j in toindices(obj) if start <= j < start + w)
    return fill(I, 2, replace_area)

  O = I
  for obj in objects(I, T, T, T):
    if color(obj) == 5:
      O = replace_middle_third(obj)
  return O
 
28.0, 26.786596, def dehafaiefffbefcaaiffdeeidecdefhe(I):
  objs = objects(I, F, F, T)
  largest_obj = argmax(objs, size)
  mask = fill(canvas(0, shape(I)), 1, toindices(largest_obj)) 
  masked_grid = cellwise(I, mask, 2)
  O = replace(masked_grid, 1, mostcolor(I))
  return O
 
16.5, 7.7718134, def fbjgchcfcjgieigjjjjjbdjeecidfcdj(I):
  # Find all objects excluding the background
  x1 = objects(I, T, F, T)
  # Sort objects by size in descending order
  x2 = order(x1, size)
  # Get the second largest object
  x3 = x2[ONE]
  # Calculate the center of the object
  center_x, center_y = centerofmass(x3)
  # Define a lambda function to check if a point is within the central third
  is_within_central_third = lambda x, y, size: size // 3 <= x < 2 * (size // 3) or size // 3 <= y < 2 * (size // 3)
  # Recolor the object based on orientation
  O = paint(I, frozenset(
    ((TWO if is_within_central_third(i - center_x, j - center_y, width(x3)) else c), (i, j)) 
    for c, (i, j) in x3
  )) if width(x3) > height(x3) else paint(I, frozenset(
    ((TWO if is_within_central_third(i - center_x, j - center_y, height(x3)) else c), (i, j)) 
    for c, (i, j) in x3
  ))
  return O 
 
11.5, 6.66487, def cfhafffchcjfeegdicecifcbcddbdbde(I):
  # Find all objects excluding the background
  x1 = objects(I, T, F, T)
  # Sort objects by size in descending order
  x2 = order(x1, size)
  # Get the second largest object
  x3 = x2[ONE]
  # Get the indices of the object
  x4 = toindices(x3)
  # Define a lambda function to check if an index is within the central third
  is_central_third = lambda i, j, size: size // 3 <= i < 2 * (size // 3) or size // 3 <= j < 2 * (size // 3)
  # Recolor the object based on orientation
  O = fill(I, TWO, frozenset(
    (i, j) for i, j in x4 if is_central_third(i - uppermost(x3), j - leftmost(x3), width(x3))
  )) if width(x3) > height(x3) else fill(I, TWO, frozenset(
    (i, j) for i, j in x4 if is_central_third(i - uppermost(x3), j - leftmost(x3), height(x3))
  ))
  return O
 
10.0, 12.811085, def eecdideeiacbedcbabgebbfdfdefiaai(I):
  objs = objects(I, T, F, F)
  for obj in objs:
    if size(obj) > FOUR:
      inner_shifted_right = shift(toindices(obj), (0, 1))
      inner_shifted_left = shift(toindices(obj), (0, -1))
      inner_horizontal = intersection(inner_shifted_right, inner_shifted_left)
      inner_shifted_down = shift(inner_horizontal, (1, 0))
      inner_shifted_up = shift(inner_horizontal, (-1, 0))
      inner = intersection(inner_shifted_down, inner_shifted_up)
      I = fill(I, TWO, inner)
  return I
 
4.0, 4.808609, def dedcgjabdegfegjfacdebdhdcaccjcce(I):
  objs = objects(I, T, F, F)
  for obj in objs:
    if size(obj) > FOUR:
      I = fill(I, TWO, intersection(
          delta(shift(toindices(obj), (-ONE, -ONE))), 
          delta(shift(toindices(obj), (ONE, ONE)))
      ))
  return I
 
24.0, 11.088588, def dffgfcjbaihieghfjgcdfjeabfhddacb(I):
    for obj in objects(I, T, F, F):
        if size(obj) > 4:
            for (i, j) in toindices(obj):
                if (i > uppermost(obj) + 1) and (i < lowermost(obj) - 1) and (j > leftmost(obj) + 1) and (j < rightmost(obj) - 1):
                    I = fill(I, 2, {(i, j)})
    return I
 
28.0, 26.786596, def aaiafchfbdhdeidhidfajacdhecdadge(I):
  objs = objects(I, T, F, T)
  recolor_indices = set()
  for obj in objs:
    if size(obj) > 1:
      recolor_indices.update(obj - box(obj))  # Find cells inside the object's outline
  return fill(I, 2, frozenset(recolor_indices))
 
53.0, 13.70563, def cacbeadeddhdedfcaifgfeagfafibffi(I):
  G = I
  for i in range(1, len(I) - 1):
    for j in range(1, len(I[0]) - 1):
      # Check for 4 direct neighbors with same color
      if len({I[i][j], I[i - 1][j], I[i + 1][j], I[i][j - 1], I[i][j + 1]}) == 2:
        G = fill(G, 2, frozenset({(i, j)}))
  return G
 
15.5, 6.349294, def abddaafdeffdebbbaaecjheidaejfhej(I):
  O = I
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if val == 5 and (j - leftmost(ofcolor(I, 5))) // (width(ofcolor(I, 5)) // 3) == 1:
        O = fill(O, 2, {(i, j)})
  return O
 
1.5, 8.281623, def cecegabcbfjbebfbjadagdgeeheefifd(I):
  objs = objects(I, F, F, T)
  for obj in objs:
    I = fill(I, TWO, inbox(toindices(obj)))
  O = I
  return O
 
21.0, 21.644081, def bchfjghbddaaeijcahegdacbibbjcbbj(I):
  objs = objects(I, F, F, T)
  for obj in objs:
    I = fill(I, TWO, delta(toindices(obj)))
  O = fill(I, TWO, backdrop(toindices(first(objects(I, F, F, T)))))
  return O
 
30.0, 19.979849, def chddcebjigdaefceadbfdafjedbcgcab(I):
  objs = objects(I, F, F, T)
  for obj in objs:
    center_i, center_j = centerofmass(obj)
    for i, j in toindices(obj):
      if (i, j) != (center_i, center_j):
        I = fill(I, TWO, {(i, j)})
  O = I
  return O 
 
42.0, 57.596222, def cjcfebbgccfaebhdadjibjbfjdgajfcf(I):
  objs = objects(I, F, F, T)
  for obj in objs:
    sub = crop(I, ulcorner(obj), shape(obj))
    filled_sub = fill(sub, TWO, asindices(sub))
    I = paint(cover(I, obj),  toobject(asindices(filled_sub), filled_sub))
  O = I
  return O
 
10.0, 7.154539, def cbchbajadeadeicajfbfcdfhbdhjhchi(I):
  # Find all objects excluding the background
  objs = objects(I, T, F, T)
  # Sort objects by size in descending order
  sorted_objs = order(objs, size)
  # Get the second largest object
  target_obj = sorted_objs[ONE]
  # Calculate starting row for recoloring
  start_row = uppermost(target_obj) + ONE
  # Define the recoloring band
  recolor_band = frozenset(
      (i, j) 
      for i, j in toindices(target_obj) 
      if start_row <= i < start_row + TWO
  )
  # Recolor the band and return the modified grid
  O = fill(I, TWO, recolor_band)
  return O
 
41.0, 13.031208, def fjdeibcheabieicdjeihgehfcdacabff(I):
  return paint(I, 
               frozenset({(TWO, (i, j)) 
                         for obj in objects(I, T, F, F) if size(obj) > FOUR 
                         for (i, j) in toindices(obj) 
                         if all(0 < x < y - 1 for x, y in zip((i, j), shape(obj)))}))
 
6.0, 11.381434, def feagcbggeejjeagbbfcgfdeiefdhddid(I):
  for obj in objects(I, T, F, F):
    if size(obj) > FOUR and not bordering(obj, I):
      I = fill(I, TWO, delta(box(obj)) & toindices(obj))
  return I
 
51.0, 49.550453, def bbdfacjjaadcehiiiejfdbhccceaafdb(I):
    for obj in objects(I, T, F, F):
        if size(obj) > 4:
            (i0, j0), (i1, j1) = ulcorner(obj), lrcorner(obj)
            I = paint(I, {(TWO, (i, j)) for i in range(i0 + 1, i1) for j in range(j0 + 1, j1)})
    return I
 
16.0, 7.2271285, def bfedfbdabhgbehfijadeahadedichabg(I):
  objs = objects(I, T, F, T)  # Identify objects
  G = I 
  for obj in objs:
    if size(obj) > 1:  # Only process objects with more than one cell
      for i, j in toindices(obj):
        if (i != uppermost(obj) and i != lowermost(obj)-1) and (j != leftmost(obj) and j != rightmost(obj)-1): 
          G = fill(G, 2, frozenset({(i, j)}))  # Recolor inner cells
  return G
 
13.0, 26.634548, def fbdbefbhfejgebecjcdfadfdjahechaa(I):
  return paint(I, merge(apply(lambda obj: recolor(2, delta(obj)), objects(I, T, F, T))))
 
12.0, 8.972703, def ibfebbjbadedefaaifgafbacbegacdfa(I):
  objs = objects(I, T, F, T)
  G = I
  for obj in objs:
    if size(obj) > 1:
      shifted_obj = shift(obj, (1, 1)) # Shift the object diagonally
      G = paint(G, recolor(2, intersection(toindices(obj), toindices(shifted_obj)))) # Find intersection and recolor
  return G
 
13.5, 5.4847827, def hhfajjgbfaadeaiaaddcaddiacejbeea(I):
  objs = objects(I, T, T, T)
  for obj in objs:
    w = width(obj)
    start = leftmost(obj) + w // 3
    end = start + w // 3
    replace_area = product(interval(uppermost(obj), lowermost(obj) + 1, 1), interval(start, end + 1, 1))
    I = fill(I, 2, replace_area)
  return I
 
28.0, 26.786596, def eaaeecbbfifjedeebbfebcidfbbbjabd(I):
  objs = objects(I, T, T, T)
  replace_area = mfilter(objs, lambda obj: sfilter(toindices(obj), lambda ij: leftmost(obj) + width(obj) // 3 <= ij[1] < leftmost(obj) + 2 * width(obj) // 3))
  return fill(I, 2, replace_area) 
 
12.0, 5.879319, def edeedcfdfdehebhejccfhacacbehefaf(I):
  for obj in objects(I, T, T, T):
    for i in range(uppermost(obj), lowermost(obj) + 1):
      for j in range(leftmost(obj) + width(obj) // 3, leftmost(obj) + 2 * width(obj) // 3):
        I = fill(I, 2, {(i, j)})
  return I
 
19.5, 21.772924, def daagaaaidchieehcabihafebfegebdgb(I):
  objs = objects(I, T, F, T)
  target_obj = order(objs, size)[ONE]
  O = I
  for i, row in enumerate(I):
    if uppermost(target_obj) + ONE <= i < uppermost(target_obj) + THREE:
      O = tuple(
        tuple(TWO if (i, j) in toindices(target_obj) else v for j, v in enumerate(row)) 
        for i, row in enumerate(O)
      )
  return O
 
26.5, 13.187026, def fcfabfgcfbagejccbfchchcgbdigcfdj(I):
  return paint(I, mapply(lambda obj: branch(size(obj) > FOUR, recolor(TWO, inbox(obj)), obj), 
                       objects(I, T, F, F))) 
 
1.5, 8.281623, def febbfbjbhfbgebedadjhfedffaajijdg(I):
  objs = objects(I, T, F, T)
  G = I
  for obj in objs:
    for i, j in toindices(inbox(obj)):
      G = fill(G, 2, frozenset({(i, j)}))
  return G 
 
11.0, 5.4353323, def cdjfgabbhdjjeghcibjeccjecjgabaaj(I):
  return paint(I, 
               merge(apply(lambda obj: recolor(2, 
                                               frozenset((v, (i, leftmost(obj) + j)) 
                                                        for v, (i, j) in obj 
                                                        if width(obj) // 3 <= j < 2 * width(obj) // 3)),
                           objects(I, T, T, T))))
 
3.5, 4.628159, def dcgcgbefcgccejjajeadgbbehcjeggad(I):
  # x1: Identify all objects within the grid, excluding the background
  x1 = objects(I, F, F, T)
  # x2: Determine the object with the largest size
  x2 = argmax(x1, size)
  # x3: Extract the indices of all cells belonging to this largest object
  x3 = toindices(x2)
  # x4: Initialize an empty set to store the interior indices
  x4 = initset((0, 0))
  # Iterate through all grid cells
  for i in range(len(I)):
    for j in range(len(I[0])):
      # If the cell is part of the largest object but not on its bounding box
      if contained((i, j), x3) and not contained((i, j), box(x3)):
        # Add the cell index to the interior indices set
        x4 = insert((i, j), x4)
  # O: Fill the identified interior indices with 2 in the input grid
  O = fill(I, 2, x4)
  return O 
 
13.0, 20.349321, def bcfffgccgbhhehajieejcccebgeiechb(I):
  objs = objects(I, T, F, T)
  target_obj = next(iter(sorted(objs, key=lambda obj: len(obj), reverse=True)[1:]), frozenset())
  upper_bound =  uppermost(target_obj) + TWO
  return paint(I, frozenset(((TWO if uppermost(target_obj) < i < upper_bound else c), (i, j)) for c, (i, j) in target_obj))
 
16.0, 17.675198, def eaabcgagabjdeafhjihaabieceacicgd(I):
  objs = objects(I, T, F, T)
  target_obj = sorted(objs, key=size, reverse=True)[ONE] if len(objs) > 1 else next(iter(objs), frozenset())
  band_height = TWO
  start_i = uppermost(target_obj) + ONE
  end_i = start_i + band_height
  return paint(I, frozenset(((TWO if start_i <= i < end_i else c), (i, j)) for c, (i, j) in target_obj))
 
29.5, 49.180172, def ceacefefhejjehifibjjdgdffaadgjec(I):
  objs = objects(I, T, F, T)
  G = I
  for obj in objs:
    if size(obj) > 4:
      G = paint(cover(G, obj), recolor(2, intersection(toindices(obj), inbox(obj))))
  return G
 
24.0, 16.436234, def bfdecgiadgbcejbfjfhcebebdadhgfda(I):
  O = I
  for obj in objects(I, T, T, T):
    if color(obj) == 5:
      w = width(obj) // 3
      middle_third = shift(toindices(obj), (0, w))
      O = underfill(O, 2, middle_third)
  return O
 
31.0, 20.252388, def cbafaaddfgafefefbaififiggjeficbb(I):
  def modify_object(obj):
    if color(obj) != 5: 
      return frozenset()
    w = width(obj) // 3
    middle_third = shift(toindices(obj), (0, w))
    return recolor(2, middle_third)

  return paint(I, merge(apply(modify_object, objects(I, T, T, T))))
 
14.0, 25.841196, def ecghghfdeebeejacjcfffaiaabedecdf(I):
  # x1: Identify all objects within the grid, excluding the background
  x1 = objects(I, F, F, T)
  # x2: Initialize an empty set to store the interior indices
  x2 = initset((0, 0))
  # Iterate through each object
  for obj in x1:
    # x3: Extract the indices of the current object
    x3 = toindices(obj)
    # x4: Calculate the difference between the object's bounding box and the object itself 
    x4 = difference(backdrop(x3), x3)
    # x2: Add the interior indices of the current object to the main set
    x2 = combine(x2, x4)
  # O: Fill the identified interior indices with 2 in the input grid
  O = fill(I, 2, x2)
  return O
 
12.0, 14.672483, def fbafadbhjghdegccjcfhcfcadidjafce(I):
  objs = objects(I, T, F, T)
  target_obj = argmax(objs, size) if size(objs) > ONE else next(iter(objs))
  h, w = shape(target_obj)
  condition = lambda i, j: h > w and uppermost(target_obj) + ONE <= i < uppermost(target_obj) + THREE and leftmost(target_obj) <= j < leftmost(target_obj) + w or w > h and uppermost(target_obj) <= i < uppermost(target_obj) + h and leftmost(target_obj) + ONE <= j < leftmost(target_obj) + THREE
  return fill(I, TWO, frozenset((i, j) for i, j in toindices(target_obj) if condition(i, j)))
 
10.0, 5.4212637, def cjadefdcadfjejiaihibdafjaaabecic(I):
  objs = objects(I, T, F, T)
  target_obj = argmax(objs, size) if size(objs) > ONE else next(iter(objs))
  if width(target_obj) > height(target_obj):
    band = frozenset((i, j) for i, j in toindices(target_obj) if uppermost(target_obj) + ONE <= i <= uppermost(target_obj) + TWO)
  else:
    band = frozenset((i, j) for i, j in toindices(target_obj) if leftmost(target_obj) + ONE <= j <= leftmost(target_obj) + TWO)
  return fill(I, TWO, band)
 
14.0, 15.925077, def jaedcahehgedecbebijecbdbbbbdbfad(I):
  objs = objects(I, T, F, T)
  target_obj = argmax(objs, size) if size(objs) > 1 else next(iter(objs))
  shifted_obj = shift(target_obj, (ONE, ZERO)) if width(target_obj) > height(target_obj) else shift(target_obj, (ZERO, ONE))
  return fill(I, TWO, toindices(target_obj) & toindices(shifted_obj))
 
76.5, 51.41129, def gcfaihdhfhafeeabbcfchfcecbbcahcf(I):
  return paint(I, mpapply(lambda obj, indices: branch(size(obj) > FOUR,
                                                        recolor(TWO, difference(indices, box(obj))),
                                                        obj),
                            objects(I, T, F, F),
                            apply(toindices, objects(I, T, F, F)))) 
 
7.0, 10.331285, def iebeeebcfaejeabfbcdjafeaaedadfgc(I):
  O = I
  for obj in objects(I, T, T, T):
    if color(obj) == 5:
      start_col = leftmost(obj) + width(obj) // 3
      for row in range(uppermost(obj) + 1, lowermost(obj)):
        for col in range(start_col, start_col + width(obj) // 3):
          O = fill(O, 2, ((row, col),)) 
  return O
 
8.5, 5.7606807, def aabbdhebcajfeebbafbhcdgceahbjgbb(I):
  O = I
  for obj in objects(I, T, T, T):
    if color(obj) == 5:
      for i in range(uppermost(obj) + 1, lowermost(obj) + 1):
        for j in range(leftmost(obj) + width(obj) // 3, leftmost(obj) + 2 * width(obj) // 3):
          if i != uppermost(obj):
            O = fill(O, 2, {(i, j)})
  return O
 
20.5, 26.571735, def eabfdhhccdafeacajgcaheecdfabaehj(I):
  # x1: Get all object indices, excluding background
  x1 = apply(toindices, objects(I, F, F, T))
  # x2: Find the backdrop for each object
  x2 = apply(backdrop, x1)
  # x3: Get the difference between backdrop and object indices for each object
  x3 = apply(lambda x: difference(x[0], x[1]), pair(x2, x1))
  # x4: Merge the differences to get all indices to fill
  x4 = merge(x3)
  # O: Fill the input grid with 2 at the identified indices 
  O = fill(I, 2, x4)
  return O
 
17.5, 7.7553654, def didfahjbihededcdahhdceegeidgbehi(I):
  objs = objects(I, T, F, T)
  target_obj = argmax(objs, size) if size(objs) > 1 else next(iter(objs))
  orientation = width(target_obj) > height(target_obj)
  if orientation:
    band_indices = box(shift(target_obj, (ONE, ZERO))) & toindices(target_obj)
  else:
    band_indices = box(shift(target_obj, (ZERO, ONE))) & toindices(target_obj)
  return fill(I, TWO, band_indices)
 
13.0, 26.634548, def bfafaigdaaicegfgjfabbdbdaceafbdf(I):
  objs = objects(I, T, F, T)
  G = I
  for obj in objs:
    G = underfill(G, 2, inbox(obj)) 
  return G
 
5.0, 5.1334977, def gabdabfgbadaebeebbeaacbeafifddei(I):
  # x1: Identify all objects within the grid, excluding the background
  x1 = objects(I, F, F, T)
  # x2: Determine the object with the largest size
  x2 = argmax(x1, size)
  # x3:  Extract the indices of all cells belonging to this largest object
  x3 = toindices(x2)
  # x4: Generate a new grid identical to the input grid
  x4 = I
  # x5: Iterate through each cell index in the grid
  for i in range(len(I)):
    for j in range(len(I[0])):
      # x6: Check if the current cell index is part of the largest object's indices
      if (i, j) in x3:
        # x7: If the current index is not on the bounding box of the object, fill it with 2
        if (i, j) not in box(x3):
          x4 = fill(x4, 2, {(i, j)})
        # x8: If the current index is on the right edge and the row index is even, fill it with 2
        elif j == rightmost(x3) and even(i):
          x4 = fill(x4, 2, {(i, j)})
  # O: The modified grid with the filled interior of the largest object
  O = x4
  return O
 
4.0, 4.677223, def aebjjajfbbhdeeffjejchechcbdcfddi(I):
  # x1: Identify objects (excluding background) and find the largest one
  x1 = argmax(objects(I, F, F, T), size) 
  # x2: Get the bounding box indices of the largest object
  x2 = box(x1)
  # x3: Create a set of indices for the right edge, excluding the top and bottom rows
  x3 = frozenset((i, rightmost(x1)) for i in range(uppermost(x1) + 1, lowermost(x1)))
  # x4: Filter the right edge indices, keeping only those with even row indices 
  x4 = sfilter(x3, lambda loc: even(loc[0]))
  # O: Fill the interior and selected right edge indices with 2
  O = fill(fill(I, 2, difference(toindices(x1), x2)), 2, x4)  
  return O
 
80.5, 40.508198, def bfbbhgbcgccaehfdahabfidhdfddcgbd(I):
  # x1: Identify the largest object, excluding the background
  x1 = argmax(objects(I, F, F, T), size)
  # x2: Create a grid with the same dimensions as the input, filled with 2s 
  x2 = canvas(2, shape(I))
  # x3: Paint the largest object onto the new grid
  x3 = paint(x2, x1)
  # x4: Combine the original grid and the new grid using cellwise comparison
  #     If the values match, keep the original value; otherwise, use the value from the new grid 
  O = cellwise(I, x3, 2)
  return O
 
83.0, 40.408867, def bbadbabdbdegeedcbdchfjbafagjfahh(I):
  # x1: Find the largest object, excluding the background
  x1 = argmax(objects(I, F, F, T), size)
  # x2: Create a set of all indices of the grid
  x2 = asindices(I)
  # x3: Remove the indices of the largest object from the set of all indices
  x3 = difference(x2, toindices(x1))
  # x4: Create a set of indices for the right edge of the largest object, excluding the first row
  x4 = frozenset((i, rightmost(x1)) for i in range(1, height(x1) + uppermost(x1)))
  # x5: Filter the right edge indices, keeping only those with odd row indices
  x5 = sfilter(x4, lambda loc: not even(loc[0]))
  # O: Fill the indices that are not part of the largest object and the selected right edge indices with 2 
  O = fill(fill(I, 2, x3), 2, x5)
  return O
 
11.5, 21.676413, def bbddgidifjfeedbfifffgfbfdbcabicb(I):
  objs = objects(I, T, F, T) # Get all objects excluding background
  target_obj = argmax(objs, size) # Find the largest object

  # Define the starting and ending points of the diagonal line
  start_i = uppermost(target_obj) + 1 
  start_j = leftmost(target_obj) + 1
  end_i = lowermost(target_obj) - 1
  end_j = rightmost(target_obj) - 1

  # Draw the diagonal line
  line = connect((start_i, start_j), (end_i, end_j))
  return fill(I, 2, line) # Fill the line with '2's
 
19.0, 9.665902, def jdjjdcbdcacdecfciacjaicebafcjjae(I):
  objs = objects(I, T, F, T)
  target_obj = argmax(objs, size) 

  # Calculate the line's row/column based on object's orientation
  line_index = (uppermost(target_obj) + height(target_obj) // 2 - 1) if portrait(target_obj) else (leftmost(target_obj) + width(target_obj) // 2 - 1)

  # Generate the line indices based on orientation
  line = ((i, line_index) for i in range(height(I))) if portrait(target_obj) else ((line_index, j) for j in range(width(I)))

  # Fill the line with '2's
  return fill(I, 2, frozenset(line)) 
 
10.0, 16.024519, def hcfifdeedjcgeicajjdfejeiabfeceba(I):
  obj = argmax(objects(I, T, F, T), size) # Find largest object
  h, w = shape(obj) # Get object's height and width

  if h > w: # If object is taller
    line = ((uppermost(obj) + h // 2 - 1, j) for j in range(leftmost(obj) + 1, rightmost(obj)))
  else: # If object is wider
    line = ((i, leftmost(obj) + w // 2 - 1) for i in range(uppermost(obj) + 1, lowermost(obj)))

  return fill(I, 2, frozenset(line)) # Fill the line with '2's
 
10.0, 16.233261, def jfeeajfaaaefefddacchbaehhceghdbd(I):
  obj = argmax(objects(I, T, F, T), size)
  ul = ulcorner(obj) # Get upper-left corner
  lr = lrcorner(obj) # Get lower-right corner

  # Generate line indices diagonally within the object's boundaries
  line = frozenset((i, j) for i in range(ul[0] + 1, lr[0]) for j in range(ul[1] + 1, lr[1]) if i - j == ul[0] - ul[1])

  return fill(I, 2, line) 
 
9.5, 15.409898, def edgedefdfedfegeaiddacabdggeafccj(I):
  obj = argmax(objects(I, T, F, T), size)
  center_i, center_j = centerofmass(obj) # Get object's center of mass

  if portrait(obj): # If object is taller
      line = ((i, center_j - 1) for i in range(uppermost(obj) + 1, lowermost(obj)))
  else: # If object is wider
      line = ((center_i - 1, j) for j in range(leftmost(obj) + 1, rightmost(obj)))

  return fill(I, 2, frozenset(line)) 
 
12.0, 13.387656, def aecidjbffdjdeedbjdbfbfiadjfeedge(I):
  return paint(I, 
               merge(apply(lambda obj: recolor(2, 
                                               frozenset((v, (i, leftmost(obj) + width(obj) // 3 + j)) 
                                                        for v, (i, j) in obj 
                                                        if j < width(obj) // 3)),
                           objects(I, T, T, T))))
 
13.0, 26.634548, def jfafbheabcfjeebhadhfdcjjffbbffeb(I):
  objs = objects(I, T, T, T)
  for obj in objs:
    w = width(obj)
    start = leftmost(obj) + w // 3
    end = start + w // 3 - 1
    replace_area = frozenset((i, j) for i, j in product(interval(uppermost(obj), lowermost(obj) + 1, 1), 
                                                   interval(start, end + 1, 1)))
    I = underfill(I, 2, replace_area)
  return I
 
12.0, 5.879319, def fdfabjhdcicbeejfbajbjffgdddjcffd(I):
  return paint(I, 
               merge(apply(lambda obj: 
                           recolor(2, 
                                  intersection(toindices(obj), 
                                              frozenset((i, j) for i in range(height(I)) for j in range(width(I)) 
                                                       if width(obj) // 3 <= j - leftmost(obj) < 2 * width(obj) // 3))), 
                           objects(I, T, T, T))))
 
12.0, 6.4288464, def ccdhceieeebgefjcbfjeicbhachchdgc(I):
    return paint(I, 
               merge(apply(lambda obj:
                           recolor(2,
                                   frozenset((v, astuple(i, leftmost(obj) + width(obj) // 3 + k)) 
                                                for v, (i, j) in obj 
                                                for k in range(width(obj) // 3))),
                           objects(I, T, T, T))))
 
9.0, 8.034549, def gaddaiifgjjeebfcaijbffcegeddiebh(I):
  objs = objects(I, T, T, T)
  for obj in objs:
    if color(obj) == 5 and width(obj) > 2:
      start_row = uppermost(obj) + 1
      if any(other_obj != obj and color(other_obj) == 5 and uppermost(other_obj) < start_row  for other_obj in objs):
        start_row = uppermost(obj) + height(obj) // 2 - 1
      for i in range(start_row, start_row + height(obj) // 3 + (height(obj)%3>0)):
        for j in range(leftmost(obj) + width(obj) // 3, leftmost(obj) + 2 * width(obj) // 3):
          I = fill(I, 2, {(i, j)})
  return I
 
36.0, 61.294495, def eebcfebadheceeadjedbibhajicaidfa(I):
  O = canvas(mostcolor(I), shape(I))
  for obj in objects(I, T, T, T):
    if color(obj) == 5:
      start_row = uppermost(obj) + height(obj) // 2 - 1
      if not any(other_obj != obj and color(other_obj) == 5 and uppermost(other_obj) < uppermost(obj) for other_obj in objects(I, T, T, T)):
        start_row = uppermost(obj) + 1
      if width(obj) > 2:
        O = fill(O, 2, {(i, j) for i in range(start_row, start_row + height(obj) // 3 + (height(obj)%3>0)) for j in range(leftmost(obj) + width(obj) // 3, leftmost(obj) + 2 * width(obj) // 3)})
      else:
        O = paint(O, obj)
  return O
 
7.0, 8.544548, def fhddjhhiebacecjebcbhdjbefdgjdjbb(I):
  O = I
  for obj in sorted(objects(I, T, T, T), key=lambda obj: (color(obj), -uppermost(obj))): 
    if color(obj) == 5 and width(obj) > 2:
      start_row = uppermost(obj) + height(obj) // 2 - 1
      if not any(other_obj != obj and color(other_obj) == 5 and uppermost(other_obj) == uppermost(obj) - 1 for other_obj in objects(I, T, T, T)): 
        start_row = uppermost(obj) + 1
      O = fill(O, 2, set((i, j) for i in range(start_row, start_row + height(obj) // 3 + (height(obj)%3>0)) for j in range(leftmost(obj) + width(obj) // 3, leftmost(obj) + 2 * width(obj) // 3)))
  return O
 
11.0, 13.511634, def dfbaidcgbijhehdcijdhedidcfhaafcd(I):
  G = I
  for i in range(1, height(I) - 1):
    for j in range(1, width(I) - 1):
      if all(index(I, (i + di, j + dj)) == index(I, (i, j)) for di, dj in [(0, 1), (0, -1), (1, 0), (-1, 0)]):
        G = fill(G, 2, frozenset({(i, j)}))
  return G
 
13.0, 26.634548, def dcabcfffcgcfejjdidbcbiiaffcfbebd(I):
  objs = objects(I, F, F, T)
  largest_obj = argmax(objs, size)
  interior = set()
  for x, y in toindices(largest_obj):
    if all((x+i, y+j) not in toindices(largest_obj) for i, j in [(1,0),(-1,0),(0,1),(0,-1)]):
      interior.add((x, y))
  O = fill(I, 2, frozenset(interior))
  return O
 
10.0, 7.721701, def ddcjejebbhideedcijhbafhbedbjifge(I):
  return paint(I, 
               merge(apply(lambda obj: 
                           recolor(2, 
                                  frozenset((v, (i, leftmost(obj) + j)) 
                                            for v, (i, j) in obj 
                                            if width(obj) // 5 <= j < 4 * width(obj) // 5)),
                           objects(I, T, T, T))))
 
13.5, 5.996279, def eccaceeehcddeebaiaeibidfbecajdjb(I):
  return paint(I, 
               merge(apply(lambda obj: 
                           recolor(2, 
                                   intersection(toindices(obj),
                                               frozenset((i, j) for i in range(height(I))
                                                        for j in range(width(I))
                                                        if  width(obj) // 5  + leftmost(obj) <= j < 4 * width(obj) // 5 + leftmost(obj)))),
                           objects(I, T, T, T))))
 
13.5, 5.762034, def jcgabaabafjeedgfjfdfadidbhdjfecb(I):
    objs = objects(I, T, T, T)
    return paint(I,
                 merge(apply(lambda obj:
                             recolor(2,
                                    frozenset((v, (i, j))
                                              for v, (i, j) in obj
                                              if (j - leftmost(obj)) * 5 >= width(obj) and (j - leftmost(obj)) * 5 < 4 * width(obj))),
                             objs)))
 
9.5, 7.497015, def bjedbebggjcheifjiahaefeeecafhbdg(I):
  O = I
  for obj in objects(I, T, T, T):
    if color(obj) == 5:
      middle_width = width(obj) // 3
      O = fill(O, 2, {(i, j) for i in range(uppermost(obj) + 1, lowermost(obj) + 1) 
                       for j in range(leftmost(obj) + middle_width, leftmost(obj) + 2 * middle_width)})
  return O
 
4.5, 4.647011, def cfabccadfeeeefehbiidabgadbadibbf(I):
  largest_obj = argmax(objects(I, F, F, T), size)
  O = I
  for i, j in toindices(largest_obj):
    if (i, j) not in box(largest_obj):
      O = fill(O, 2, {(i, j)})
    elif j == rightmost(largest_obj) and even(i - uppermost(largest_obj) - 1):
      O = fill(O, 2, {(i, j)}) 
  return O
 
15.0, 21.62757, def jiebhgccdcgaeabdjaaehddacajfbfjc(I):
  O = I
  largest_obj = argmax(objects(I, F, F, T), lambda obj: len(toindices(obj)))
  for cell in asindices(I):
    if cell in toindices(largest_obj) and all(n not in toindices(largest_obj) for n in dneighbors(cell)):
      O = fill(O, 2, {cell})
    elif cell in toindices(largest_obj) and cell[1] == rightmost(largest_obj) and even(cell[0] - uppermost(largest_obj) - 1):
      O = fill(O, 2, {cell})
  return O
 
3.5, 4.662811, def dbfcjdgbfddheifcbbfifghidgbecdcc(I):
  obj = argmax(objects(I, F, F, T), size)
  up, lo, le, ri = uppermost(obj), lowermost(obj), leftmost(obj), rightmost(obj)
  O = fill(I, 2, {(i, j) for i in range(up + 1, lo) for j in range(le + 1, ri)})
  return fill(O, 2, {(i, ri) for i in range(up + 2, lo, 2)})
 
11.5, 6.0311375, def ffdibgecagbaeeddjijiddbbacffidee(I):
  obj = argmax(objects(I, T, F, T), size)
  shifted_obj = shift(obj, (-ONE, -ONE) if width(obj) > height(obj) else (-ONE, ZERO))
  band = intersection(toindices(shifted_obj), toindices(shift(shifted_obj, (TWO, ZERO) if width(obj) > height(obj) else (ZERO, TWO))))
  return fill(I, TWO, band)
 
9.0, 12.758293, def hafefddccddeechjbgdjfhbcbcbdifih(I):
  return paint(I, 
               merge(apply(lambda obj:
                           recolor(2, 
                                   frozenset((v, (i, leftmost(obj) + width(obj) // 3 + k)) 
                                                for v, (i, j) in obj 
                                                for k in range(width(obj) // 3) 
                                                if  hline(obj) or (i - uppermost(obj) >= height(obj) // 3 and 
                                                                  i - uppermost(obj) < 2 * height(obj) // 3))),
                           objects(I, T, T, T))))
 
10.0, 8.094039, def cfdiaachbbaceicaaegddadfadfbdfai(I):
  objs = objects(I, T, T, T)
  recolored_objs = []
  for obj in objs:
    if hline(obj):
      recolored_objs.append(recolor(2, frozenset((v, (i, leftmost(obj) + width(obj) // 3 + k)) 
                                                for v, (i, j) in obj 
                                                for k in range(width(obj) // 3))))
    else:
      recolored_objs.append(recolor(2, frozenset((v, (i, j)) 
                                                for v, (i, j) in obj 
                                                if  i - uppermost(obj) >= height(obj) // 3 and 
                                                    i - uppermost(obj) < 2 * height(obj) // 3)))
  return paint(I, merge(recolored_objs))
 
10.5, 20.255478, def bdhbbefcchaeehjfjcddfaefabcbjaba(I):
  O = I
  for obj in objects(I, T, T, T):
    if color(obj) == 5:
      start_row = uppermost(obj) + 1
      end_row = start_row + height(obj) // 3
      start_col = leftmost(obj) + width(obj) // 3
      end_col = start_col + width(obj) // 3
      for i in range(start_row, end_row):
        for j in range(start_col, end_col):
          O = fill(O, 2, {(i, j)})
  return O
 
9.5, 17.560215, def cbfdaaaddfefebahafdgjcbbaehfddad(I):
  objs = objects(I, T, T, T)
  for obj in objs:
    if color(obj) == 5:
      h, w = shape(obj)
      I = fill(I, 2, product(interval(uppermost(obj) + 1, uppermost(obj) + 1 + h // 3, 1), interval(leftmost(obj) + w // 3, leftmost(obj) + 2 * w // 3, 1)))
  return I
 
8.5, 14.235548, def hhjbfcddfbbiejdbjcggdbafbdgdgjba(I):
  O = I
  for obj in objects(I, T, T, T):
    if color(obj) == 5 and height(obj) > 1 and width(obj) > 2:
      upper_left = (uppermost(obj) + 1, leftmost(obj) + width(obj) // 3)
      lower_right = (uppermost(obj) + height(obj) // 3, leftmost(obj) + 2 * width(obj) // 3)
      O = paint(O, recolor(2, toobject(connect(upper_left, lower_right), I))) 
  return O
 
19.0, 8.319269, def ajcbcijceaacedghihiaebbeijbggegf(I):
  obj = argmax(objects(I, T, F, T), size)
  orientation = 'horizontal' if width(obj) > height(obj) else 'vertical'
  band_slice = (slice(uppermost(obj) + 1, uppermost(obj) + 3), slice(None)) if orientation == 'horizontal' else (slice(None), slice(leftmost(obj) + 1, leftmost(obj) + 3))
  I_filled = [[TWO if (orientation == 'horizontal' and band_slice[0].start <= i <= band_slice[0].stop - 1) or (orientation == 'vertical' and band_slice[1].start <= j <= band_slice[1].stop - 1) else I[i][j] for j in range(len(I[0]))] for i in range(len(I))]
  return tuple(tuple(row) for row in I_filled)
 
21.0, 9.023007, def aefaiabagibcejcbiidgfjffhaaaiaic(I):
    obj = argmax(objects(I, T, F, T), size)
    if width(obj) > height(obj):
        I = tuple(tuple(2 if uppermost(obj) + 1 <= i <= uppermost(obj) + 2 else v for i, v in enumerate(row)) for row in I)
    else:
        I = tuple(tuple(2 if leftmost(obj) + 1 <= j <= leftmost(obj) + 2 else v for j, v in enumerate(row)) for row in I)
    return I
 
12.5, 5.9817567, def eeijaeecebgceebaabhcfdehdccdcebj(I):
  objs = objects(I, T, T, T)
  return paint(I,
               merge(apply(lambda obj:
                            branch(
                              portrait(obj),
                              recolor(2,
                                      frozenset((v, (uppermost(obj) + height(obj) // 3, j))
                                                for v, (i, j) in obj)),
                              recolor(2,
                                     frozenset((v, (i, leftmost(obj) + width(obj) // 3 + k))
                                               for v, (i, j) in obj
                                               for k in range(width(obj) // 3)))),
                            objs)))
 
13.0, 5.502319, def hjfbbdifecdcefehjfabcaddfffgabhg(I):
  objs = objects(I, T, T, T)
  return paint(I, 
               merge(apply(lambda obj:
                           branch(
                              width(obj) > height(obj),
                              recolor(2,
                                     frozenset((v, (i, j))
                                              for v, (i, j) in obj
                                              if (j >= leftmost(obj) + width(obj) // 3) and (j < leftmost(obj) + 2 * width(obj) // 3))),
                              recolor(2, 
                                     frozenset((v, (i, j)) 
                                               for v, (i, j) in obj 
                                               if i == uppermost(obj) + height(obj) // 3))),
                           objs))) 
 
16.0, 14.290095, def eheacdbcgcfiecfiigiccjffhifebdda(I):
  """
  Recolors cells to 2 if all direct neighbors have the same color.
  """
  G = canvas(mostcolor(I), shape(I)) # Create a blank canvas
  for i in range(1, height(I) - 1):
    for j in range(1, width(I) - 1):
      if all(index(I, (i,j)) == index(I, n) for n in dneighbors((i,j))):
        G = fill(G, 2, {(i,j)})
      else:
        G = fill(G, index(I, (i,j)), {(i,j)})
  return G
 
39.0, 24.108673, def jajccdbifgdaeeegjcdhhdfffdcaefid(I):
  """
  Identifies inner cells and paints them onto a new canvas.
  """
  G = canvas(mostcolor(I), shape(I))  # Create a blank canvas
  inner_cells = set()
  for i in range(1, height(I) - 1):
    for j in range(1, width(I) - 1):
      if all(index(I, (i, j)) == index(I, n) for n in dneighbors((i, j))):
        inner_cells.add((i, j))
  return paint(G, recolor(2, frozenset(inner_cells)))
 
5.5, 5.4995832, def abaebbffbefcebcdaaadejfbajgbgajd(I):
  largest_obj = argmax(objects(I, F, F, T), size)
  O = I
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if (i, j) in toindices(largest_obj):
        if (i, j) not in box(largest_obj):
          O = fill(O, 2, {(i, j)})
        elif j == rightmost(largest_obj) and even(i - uppermost(largest_obj)):
          O = fill(O, 2, {(i, j)})
  return O
 
13.0, 23.655363, def hfcaeibbaacbedfjaejjiifcgdgchdjf(I):
  obj = argmax(objects(I, T, F, T), size)
  if width(obj) > height(obj):
    line = shift(recolor(TWO, canvas((ZERO, TWO), (TWO, width(obj) - FOUR))), (uppermost(obj) + TWO, leftmost(obj) + TWO))
    I = paint(I, line)
  else:
    line = shift(recolor(TWO, canvas((TWO, ZERO), (height(obj) - FOUR, TWO))), (uppermost(obj) + TWO, leftmost(obj) + TWO))
    I = paint(I, line)
  return I
 
11.5, 8.128612, def eeddfgffefbfedefjfiifbddibdejbfc(I):
  obj = argmax(objects(I, T, F, T), size)
  h, w = height(obj), width(obj)
  line = frozenset({(TWO, (i, j)) for i in range(2, h - 2) for j in range(w)}) if h < w else frozenset({(TWO, (i, j)) for i in range(h) for j in range(2, w - 2)})
  return paint(I, shift(line, ulcorner(obj)))
 
10.5, 21.128065, def ejcbjeeiffhfeihiafejeddajicdhagd(I):
  O = I
  for obj in objects(I, T, T, T):
    if color(obj) == 5:
      h, w = shape(obj)
      for i in range(uppermost(obj) + 1, uppermost(obj) + h // 3 + 1):
        for j in range(leftmost(obj) + 1, leftmost(obj) + w // 3 + 1):
          O = fill(O, 2, {(i, j)})
  return O
 
2.5, 3.874306, def aijihjcebifieejfjjcceehafcjeabab(I):
  obj = argmax(objects(I, T, F, T), size)
  inner_border = difference(backdrop(obj), box(obj))
  return fill(I, TWO, intersection(toindices(obj), inner_border))
 
22.5, 12.894911, def ejeeaeicdebaedediadidfcafgdadiab(I):
  obj = argmax(objects(I, T, F, T), size)
  shifted_obj = shift(obj, (ONE, ONE))
  return fill(I, TWO, difference(toindices(obj), backdrop(shifted_obj)))
 
19.5, 21.772924, def acigdhdddaffedbciaegheghdaffjdfc(I):
  obj = argmax(objects(I, T, F, T), size)
  return fill(I, TWO, difference(difference(toindices(obj), hsplit(crop(I, ulcorner(obj), shape(obj)), TWO)[0]), hsplit(crop(I, ulcorner(obj), shape(obj)), TWO)[1]))
 
12.5, 8.665973, def echfhheddeeeeagfadbedbcejicaafjd(I):
  def recolor_band(obj):
    if width(obj) > height(obj):
      return recolor(2, 
                     frozenset((v, (i, j)) 
                              for v, (i, j) in obj 
                              if leftmost(obj) + width(obj) // 3 <= j < leftmost(obj) + 2 * width(obj) // 3))
    else:
      return recolor(2,
                     frozenset((v, (i, j))
                              for v, (i, j) in obj
                              if uppermost(obj) + height(obj) // 3 <= i < uppermost(obj) + 2 * height(obj) // 3))
  return paint(I, merge(apply(recolor_band, objects(I, T, T, T))))
 
12.5, 5.219939, def jecfcdeecaefebaiiddfaafgfdahjejb(I):
  def recolor_band(obj):
    w, h = width(obj), height(obj)
    start_j = leftmost(obj) + w // 3
    end_j = start_j + w // 3
    start_i = uppermost(obj) + h // 3
    end_i = start_i + h // 3
    return recolor(2, 
                   frozenset((v, (i, j))
                             for v, (i, j) in obj 
                             if (w > h and start_j <= j < end_j) or 
                                (h >= w and start_i <= i < end_i)))

  return paint(I, merge(apply(recolor_band, objects(I, T, T, T))))
 
5.0, 7.0215635, def afebdgcfgfddeabeifbdbcbdhccdbejg(I):
  O = I
  for obj in objects(I, T, T, T):
    if color(obj) == 5:
      h, w = shape(obj)
      for i in range(uppermost(obj) + 1, lowermost(obj)):  # Exclude top and bottom rows
        for j in range(leftmost(obj) + w // 3, leftmost(obj) + 2 * w // 3):
          O = fill(O, 2, {(i, j)})
  return O
 
28.0, 26.786596, def adcbhdbbfddieedfbddaaeceeiadacgb(I):
  """
  Recolors inner cells of objects to 2 using delta and backdrop.
  """
  G = I
  for obj in objects(I, T, F, T):
    if size(obj) > 1:
      for loc in toindices(obj):
        if not intersection(dneighbors(loc), backdrop(obj) - toindices(obj)):
          G = fill(G, 2, frozenset({loc}))
  return G
 
13.0, 10.191677, def ggifbfcaedbaebaiidcebbceeheccead(I):
  obj = argmax(objects(I, T, F, T), size)
  return underfill(fill(I, THREE, inbox(obj)), TWO, obj)
 
11.5, 18.67364, def abdcbdfjbieeefgdafdfifiiccebdfeb(I):
  obj = argmax(objects(I, T, F, T), size)
  h, w = shape(obj)
  inner_region = frozenset((i,j) for i in range(uppermost(obj) + 2, uppermost(obj) + h - 2) 
                              for j in range(leftmost(obj) + 2, leftmost(obj) + w - 2))
  return fill(I, TWO, inner_region)
 
9.5, 5.4137697, def eddgacajdjhheaejjfeaaidaehchaaeg(I):
  return paint(I,
               merge(apply(lambda obj:
                           recolor(2,
                                   branch(greater(width(obj), height(obj)),
                                         intersection(backdrop(obj), 
                                                      frozenset((i, j) for i in range(uppermost(obj) + height(obj) // 3, uppermost(obj) + 2 * height(obj) // 3)
                                                                   for j in range(leftmost(obj), rightmost(obj) + 1))),
                                         intersection(backdrop(obj),
                                                      frozenset((i, j) for j in range(leftmost(obj) + width(obj) // 3, leftmost(obj) + 2 * width(obj) // 3)
                                                                   for i in range(uppermost(obj), lowermost(obj) + 1))))),
                           objects(I, T, T, T))))
 
12.5, 7.216127, def bhbgihagfbbfebbhbddfdcaeajdacdcd(I):
  objs = objects(I, T, T, T)
  return paint(I,
               merge(apply(lambda obj:
                           branch(portrait(obj),
                                 recolor(2, 
                                         frozenset((i, j) for v, (i, j) in obj
                                                  if uppermost(obj) + height(obj) // 3 <= i < uppermost(obj) + 2 * height(obj) // 3)),
                                 recolor(2,
                                         frozenset((i, j) for v, (i, j) in obj
                                                  if leftmost(obj) + width(obj) // 3 <= j < leftmost(obj) + 2 * width(obj) // 3))),
                           objs)))
 
13.0, 26.634548, def adegbbcdabhbeccfadghhgcjicbbaijf(I):
  O = canvas(mostcolor(I), shape(I)) # initialize with background
  for obj in objects(I, T, T, T):
    if color(obj) == 5:
      h, w = shape(obj)
      for i in range(uppermost(obj) + 1, lowermost(obj) + 1):
        region = connect((i, leftmost(obj) + w // 3), (i, leftmost(obj) + 2 * w // 3 - 1))
        O = paint(O, recolor(2, region))
    O = paint(O, obj) # paint the object onto the canvas
  return O
 
84.5, 79.81292, def gdaedbdagadjefciaehacjgadfcfeddf(I):
  """
  Recolors inner cells by filling over a shifted grid with background checking.
  """
  shifted_grid = fill(I, mostcolor(I), shift(asindices(I), (1,1)))
  return underfill(shifted_grid, 2, asindices(I))
 
19.5, 21.772924, def hifdibeddeigedgfiidagdbjhcbdbcff(I):
  largest_obj = argmax(objects(I, F, F, T), size)
  shifted_obj = shift(largest_obj, (1,0))
  O = I
  for i in range(height(largest_obj) - 1):
    O = fill(O, 2, intersection(toindices(largest_obj), toindices(shift(shifted_obj, (-i,0)))))
  return O
 
10.0, 5.4762235, def edaiabhgegbhecdbbbjjaedagaggbfcd(I):
  obj = argmax(objects(I, T, F, T), size)
  start = ulcorner(obj)
  dims = shape(obj)
  if dims[1] > dims[0]:
    band = frozenset((i, j) for i in range(start[0] + TWO, start[0] + FOUR) for j in range(start[1], start[1] + dims[1]))
  else:
    band = frozenset((i, j) for i in range(start[0], start[0] + dims[0]) for j in range(start[1] + TWO, start[1] + FOUR))
  return fill(I, TWO, band)
 
22.0, 16.967176, def acciagbhcecdefcebdbcbdhejacaeffb(I):
  obj = argmax(objects(I, T, F, T), size)
  if width(obj) > height(obj):
    band = crop(I, add(ulcorner(obj), (TWO, ZERO)), (TWO, width(obj)))
    return paint(I, recolor(TWO, asobject(band)))
  else:
    band = crop(I, add(ulcorner(obj), (ZERO, TWO)), (height(obj), TWO))
    return paint(I, recolor(TWO, asobject(band))) 
 
30.0, 51.12196, def beaiaddcageeebabaaeccjbbdegjcdea(I):
  obj = argmax(objects(I, T, F, T), size)
  h, w = shape(obj)
  if w > h:
    return fill(fill(I, TWO,  {(i, j) for i in range(uppermost(obj) + TWO, uppermost(obj) + FOUR) for j in range(leftmost(obj), leftmost(obj) + w)}), mostcolor(I), obj)
  else:
    return fill(fill(I, TWO, {(i, j) for i in range(uppermost(obj), uppermost(obj) + h) for j in range(leftmost(obj) + TWO, leftmost(obj) + FOUR)}), mostcolor(I), obj)
 
9.5, 7.26659, def ddahfdgccgdfeccbbabdgdjbgagiihcd(I):
  return paint(I,
               merge(apply(lambda obj: 
                           recolor(2,
                                   branch(portrait(obj), 
                                         sfilter(toindices(obj), lambda idx: leftmost(obj) + width(obj) // 3 <= idx[1] < leftmost(obj) + 2 * width(obj) // 3),
                                         sfilter(toindices(obj), lambda idx: uppermost(obj) + height(obj) // 3 <= idx[0] < uppermost(obj) + 2 * height(obj) // 3))),
                           objects(I, T, T, T))))
 
8.0, 5.966588, def hecgcbcjgbceedcaaafifjfffaeghfeg(I):
  def recolor_central_third(obj):
    w, h = width(obj), height(obj)
    third_w, third_h = w // 3, h // 3
    return recolor(2, 
                   frozenset((i, j)
                             for i in range(uppermost(obj) + (third_h if w > h else 0), 
                                            lowermost(obj) + 1 - (third_h if w > h else 0))
                             for j in range(leftmost(obj) + (third_w if h >= w else 0), 
                                            rightmost(obj) + 1 - (third_w if h >= w else 0))))

  return paint(I, merge(apply(recolor_central_third, objects(I, T, T, T))))
 
10.0, 12.811085, def ahgjiacibgfdegbfjjcacdebbddeegfe(I):
  """
  Recolors inner cells by checking all 8 neighbors.
  """
  h, w = len(I), len(I[0])
  def is_inner(i, j):
    if i <= 0 or i >= h - 1 or j <= 0 or j >= w - 1:
      return False
    value = I[i][j]
    return all(I[i+di][j+dj] == value for di in (-1, 0, 1) for dj in (-1, 0, 1) if di != 0 or dj != 0)
  return tuple(tuple(2 if is_inner(i, j) else I[i][j] for j in range(w)) for i in range(h))
 
59.0, 21.494568, def fajfdegieeceefedieijaicfjafefifg(I):
  """
  Recolors inner cells by finding cells not on the perimeter of objects.
  """
  objs = objects(I, T, F, T)
  perimeter_cells = merge(apply(box, objs))
  return fill(I, 2, difference(asindices(I), perimeter_cells))
 
4.5, 5.2916074, def feccdaddcfdaegbjahcadecggafhcjfj(I):
  obj = argmax(objects(I, F, F, T), size)
  O = I
  for i in range(uppermost(obj) + 1, lowermost(obj) + 1):
    if even(i - uppermost(obj)):
      O = fill(O, 2, {(i, rightmost(obj))})
  return fill(O, 2, difference(toindices(obj), box(obj)))
 
17.0, 9.545364, def aeefecfjfbddeeaebecfejhedeceibhc(I):
  obj = argmax(objects(I, T, F, T), size)
  if portrait(obj):
    area = frozenset((i,j) for i,j in toindices(obj) if j < leftmost(obj) + 2)
  else:
    area = frozenset((i,j) for i,j in toindices(obj) if i < uppermost(obj) + 2)
  return paint(I, recolor(TWO, toobject(area, I)))
 
14.0, 24.734495, def ibaaijdbajieebcabeeccbecdcfhfdfb(I):
  obj = argmax(objects(I, T, F, T), size)
  if portrait(obj):
    shift_amount = (0, 0)
  else:
    shift_amount = (0, width(obj)-2)
  return paint(I, recolor(TWO, toobject(shift(crop(canvas(ZERO, shape(obj)), (ZERO, ZERO), (height(obj), 2)), add(ulcorner(obj), shift_amount)), I)))
 
13.0, 6.554281, def jafbbeadgbegefbjajacefbcjaiejdcg(I):
  def recolor_band(obj):
    w, h = width(obj), height(obj)
    start_i = uppermost(obj) + h // 3 if h > w else uppermost(obj)
    end_i = lowermost(obj) - h // 3 + 1 if h > w else lowermost(obj) + 1
    start_j = leftmost(obj) + w // 3 if w >= h else leftmost(obj)
    end_j = rightmost(obj) - w // 3 + 1 if w >= h else rightmost(obj) + 1
    return recolor(2, 
                   frozenset((i, j)
                             for i in range(start_i, end_i)
                             for j in range(start_j, end_j)))
  return paint(I, merge(apply(recolor_band, objects(I, T, T, T))))
 
1.5, 8.281623, def bfecahhdcajbehgdjeibcdejgfadfgch(I):
  """
  Iterates through objects, recolors inner cells based on inbox comparison.
  """
  objs = objects(I, T, F, T)
  G = I
  for obj in objs:
    inner_cells = intersection(toindices(obj), inbox(obj))
    G = fill(G, 2, inner_cells)
  return G
 
24.0, 16.026804, def cfffbcbfidfeegcfjfdhbacfidbbface(I):
  """
  Identifies inner cells and uses underfill for targeted recoloring.
  """
  h, w = len(I), len(I[0])
  inner_cells = frozenset((i, j) for i in range(1, h-1) for j in range(1, w-1) if I[i][j] == I[i-1][j] == I[i][j-1] == I[i+1][j] == I[i][j+1])
  return underfill(I, 2, inner_cells)
 
51.0, 49.550453, def cegjhhebffcbedfjjaidbegacchaceab(I):
  """
  Uses hmatching and vmatching to determine and recolor inner cells.
  """
  G = I
  h, w = len(I), len(I[0])
  for i in range(1, h-1):
    for j in range(1, w-1):
      if (hmatching(frozenset({(i, j)}), inbox(frozenset({(i, j)})))) and (vmatching(frozenset({(i, j)}), inbox(frozenset({(i, j)})))):
        G = fill(G, 2, frozenset({(i, j)}))
  return G 
 
17.0, 13.653389, def cbchcedjfechefhbjbcadefdfedfeagd(I):
  obj = argmax(objects(I, T, F, T), size) #Find the largest object
  h, w = shape(obj) #Get height and width of the object
  target_width = 2 #Width of the line to be drawn
  if h > w:
    fill_area = product(interval(uppermost(obj), uppermost(obj) + target_width, 1), interval(leftmost(obj), rightmost(obj) + 1, 1)) #Area to be filled if portrait
  else:
    fill_area = product(interval(uppermost(obj), lowermost(obj) + 1, 1), interval(leftmost(obj), leftmost(obj) + target_width, 1)) #Area to be filled if landscape
  return paint(I, recolor(TWO, toobject(intersection(toindices(obj), fill_area), I))) #Fill the area with color '2'
 
14.0, 25.710243, def dhejdhcedjdfeaceabgaeacaaihebdae(I):
  obj = argmax(objects(I, T, F, T), size)
  h, w = shape(obj)
  if h > w:
    return paint(I, recolor(TWO, toobject(shift(crop(canvas(ZERO, shape(obj)), (ZERO, ZERO), (2, w)), ulcorner(obj)), I)))
  else:
    return paint(I, recolor(TWO, toobject(shift(crop(canvas(ZERO, shape(obj)), (ZERO, ZERO), (h, 2)), ulcorner(obj)), I)))
 
15.0, 24.167725, def fedebabbaicdedecjadcgadjdaegdeii(I):
  obj = argmax(objects(I, T, F, T), size)
  h, w = shape(obj)
  line = {(0, 0), (1, 0)} if h > w else {(0, 0), (0, 1)}  # Define base line shape
  shifted_line = shift(line, ulcorner(obj))
  return paint(I, recolor(TWO, toobject(intersection(shifted_line, toindices(obj)), I))) 
 
7.0, 10.331285, def efheebdeaieaejceidcccbicccdfcfea(I):
  new_objs = set()
  for obj in objects(I, T, T, T):
    if color(obj) != mostcolor(I):
      start_row = uppermost(obj) + 1
      end_row = lowermost(obj)
      start_col = leftmost(obj) + width(obj) // 3
      end_col = start_col + width(obj) // 3
      new_obj = {(2, (i, j)) for i in range(start_row, end_row) for j in range(start_col, end_col)}
      new_objs.add(frozenset(new_obj))
  return paint(I, merge(new_objs)) 
 
12.5, 5.2199397, def efdiijbdadcdeeajibedgaaeadeajdeh(I):
  objs = objects(I, T, F, T)
  largest_obj = max(objs, key=size)
  remaining_objs = objs - {largest_obj}
  target_obj = max(remaining_objs, key=size, default=frozenset())
  if portrait(target_obj):
    O = fill(I, color(largest_obj), {(i, leftmost(target_obj)) for i in range(uppermost(target_obj), lowermost(target_obj) + 1)})
    O = fill(O, color(largest_obj), {(i, rightmost(target_obj)) for i in range(uppermost(target_obj), lowermost(target_obj) + 1)})
  else:
    O = fill(I, color(largest_obj), {(uppermost(target_obj), j) for j in range(leftmost(target_obj), rightmost(target_obj) + 1)})
    O = fill(O, color(largest_obj), {(lowermost(target_obj), j) for j in range(leftmost(target_obj), rightmost(target_obj) + 1)})
  return O
 
13.5, 14.781381, def fhigfigiicafeihdbcifcdaeeafebbdf(I):
  O = I
  objs = objects(I, T, F, T)
  largest_obj = max(objs, key=len)
  second_largest_obj = max((obj for obj in objs if obj != largest_obj), key=len, default=frozenset())
  lc = color(largest_obj)
  if height(second_largest_obj) > width(second_largest_obj):
    for i in range(uppermost(second_largest_obj), lowermost(second_largest_obj) + 1):
      O = fill(O, lc, {(i, leftmost(second_largest_obj))})
      O = fill(O, lc, {(i, rightmost(second_largest_obj))})
  else:
    for j in range(leftmost(second_largest_obj), rightmost(second_largest_obj) + 1):
      O = fill(O, lc, {(uppermost(second_largest_obj), j)})
      O = fill(O, lc, {(lowermost(second_largest_obj), j)})
  return O
 
13.0, 26.634548, def ifhejidbfeceebdgacaeajceegbaiifa(I):
  objs = objects(I, T, F, T)
  target_color = color(max(objs, key=len))
  for obj in objs:
    if obj != max(objs, key=len):
      if height(obj) > width(obj):
        for i in range(height(obj)):
          I = fill(I, target_color, {(uppermost(obj) + i, leftmost(obj))})
          I = fill(I, target_color, {(uppermost(obj) + i, rightmost(obj))})
      else:
        for j in range(width(obj)):
          I = fill(I, target_color, {(uppermost(obj), leftmost(obj) + j)})
          I = fill(I, target_color, {(lowermost(obj), leftmost(obj) + j)})
  return I
 
14.0, 7.1236935, def afhaggdfddiaejjfafadcecdfccbcbdd(I):
  objs = objects(I, T, F, T)
  target_obj = argmax(objs, size) 
  band_height = TWO
  start_i = uppermost(target_obj) + ONE
  end_i = lowermost(target_obj) - ONE
  return paint(I, frozenset(((TWO if (start_i <= i < start_i + band_height) or (end_i - band_height < i <= end_i) else c), (i, j)) for c, (i, j) in target_obj))
 
16.0, 5.778933, def hbdhcegcacgdehcfieifcdeefehhdfic(I):
  objs = objects(I, T, F, T)
  largest_obj = argmax(objs, size)
  h = height(largest_obj)
  band = interval(ONE, h - ONE, ONE)
  return paint(I, frozenset((TWO if i in band else c, (i + uppermost(largest_obj), j)) for c, (i, j) in normalize(largest_obj))) 
 
13.5, 5.698847, def iidbdffbicfbeddbicgbgacagcejedhj(I):
  O = I
  for obj in objects(I, T, F, T):
    if obj == argmax(objects(I, T, F, T), size):
      h = height(obj)
      for i in range(1, h - 1):
        O = fill(O, TWO, ((uppermost(obj) + i, leftmost(obj)), (uppermost(obj) + i, rightmost(obj))))
  return O
 
12.0, 6.2882333, def badjbegfcgceeegjieffaaccejdecede(I):
  largest_obj = argmax(objects(I, T, F, T), size)
  return paint(I, frozenset(
    (TWO if (i == uppermost(largest_obj) + ONE or i == lowermost(largest_obj) - ONE) else c, (i, j)) 
    for c, (i, j) in largest_obj
  ))
 
15.0, 8.624403, def abgfcagjceheejehjacfabbdfcedaabh(I):
  O = I
  for obj in objects(I, T, T, T):
    if color(obj) == 5:
      O = fill(O, 2, inbox(obj))
  return O
 
10.5, 5.2040462, def hjicdddhgcehefffjfgeeffhcfcbdegb(I):
  O = I
  for obj in objects(I, T, T, T):
    if color(obj) == 5:
      for i in range(uppermost(obj) + 1, lowermost(obj)):
        for j in range(leftmost(obj) + 1, rightmost(obj)):
          O = fill(O, 2, {(i, j)})
  return O
 
12.5, 5.2199397, def afcefhiebbdcebefjdfeibgebfbbfdic(I):
  O = I
  for obj in objects(I, T, T, T):
    if color(obj) == 5:
      O = fill(O, 2, delta(obj) & toindices(obj))
  return O
 
32.5, 30.696367, def hhecjdcehjededaeaaajfaejbcidbffc(I):
  for obj in objects(I, T, T, T):
    if color(obj) == 5:
      I = paint(cover(I, obj), recolor(2, inbox(obj))) 
  return I
 
13.5, 6.605627, def dajagdeehfeaeaejagejjdabefefffch(I):
  O = I
  for obj in objects(I, T, T, T):
    if color(obj) == 2:
      target_color = 5
      for i in range(uppermost(obj), lowermost(obj) + 1):
        for j in range(leftmost(obj), len(I[0])):
          if index(I, (i, j)) == target_color:
            O = fill(O, 2, connect((i, leftmost(obj)), (i, j)))
            break
  return O
 
19.0, 6.7389235, def fgjaheaccadfebafbbfbheeeaageefeh(I):
  O = I
  for obj in objects(I, T, T, T):
    if color(obj) == 2:
      target_obj = extract(objects(I, T, T, T), lambda x: color(x) == 5 and hmatching(obj, x))
      if target_obj:
        start_j = min(leftmost(target_obj), leftmost(obj))
        end_j = max(rightmost(target_obj), rightmost(obj))
        for i in range(uppermost(obj), lowermost(obj) + 1):
          O = fill(O, 2, connect((i, start_j), (i, end_j)))
  return O
 
17.0, 9.955016, def dfjbjabdeehfebjcjcagagchdaecggef(I):
  for obj in objects(I, T, T, T):
    if color(obj) == 2:
      target_j = rightmost(obj) + 1
      while target_j < len(I[0]) and any(index(I, (i, target_j)) == 5 for i in range(uppermost(obj), lowermost(obj) + 1)):
        I = fill(I, 2, {(i, target_j) for i in range(uppermost(obj), lowermost(obj) + 1)})
        target_j += 1
  return I
 
19.0, 9.304086, def fcbjbdfcjfafebaajeiahedjeeafbbfi(I):
  O = I
  for obj in objects(I, T, T, T):
    if color(obj) == 2:
      target_indices = set()
      for i in range(uppermost(obj), lowermost(obj) + 1):
        for j in range(leftmost(obj), len(I[0])):
          if index(I, (i, j)) == 5:
            target_indices.update(connect((i, leftmost(obj)), (i, j)))
      O = fill(O, 2, frozenset(target_indices))
  return O
 
13.5, 6.5800457, def bcbjhgbdeddaebfdbfhedfbdeccfefcj(I):
  O = I
  for obj in objects(I, T, T, T):
    if color(obj) == 5:
      w = width(obj) // 3
      start = leftmost(obj) + w
      end = start + w if w != 0 else start 
      replace_area = frozenset((i, j) for i, j in toindices(obj) if start <= j < end)
      O = fill(O, 2, replace_area)
  return O
 
12.5, 5.2199397, def idhhbcdfbjijeicciedcbcedeaaafcbi(I):
  O = I
  for obj in objects(I, T, T, T):
    if color(obj) == 5 and width(obj) > 2:
      left_third = width(obj) // 3
      right_third = 2 * left_third
      replace_area = frozenset((i, j) for i, j in toindices(obj) if left_third < j < right_third)
      O = paint(O, recolor(2, toobject(replace_area, I)))
  return O
 
12.5, 6.0633216, def dcajaagcbfcjeieebdihgaabfdedejfd(I):
  objs = objects(I, T, T, T)
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  for obj in objs:
    if color(obj) == 5:
      w = width(obj)
      if w > 2:
        third = w // 3
        O = paint(O,  toobject(frozenset((i, j) for i, j in toindices(obj) if j < third or j >= 2 * third), I))
        O = paint(O, recolor(2, toobject(frozenset((i, j) for i, j in toindices(obj) if third <= j < 2 * third), I)))
      else:
        O = paint(O, obj)
    else:
      O = paint(O, obj)
  return O
 
12.5, 5.2199397, def cbbbgidadbiaebcbaeejbaacaggdceie(I):
  objs = objects(I, T, F, T)
  largest_obj = argmax(objs, size)
  second_color = color(argmax(difference(objs, {largest_obj}), size))
  top_indices =  frozenset((i, j) for v, (i, j) in largest_obj if i in {uppermost(largest_obj), uppermost(largest_obj) + 1})
  bottom_indices =  frozenset((i, j) for v, (i, j) in largest_obj if i in {lowermost(largest_obj), lowermost(largest_obj) - 1})
  alternating_bottom =  frozenset(((second_color if even(i + j) else v), (i, j)) for v, (i, j) in toobject(bottom_indices, I))
  return paint(paint(I, recolor(second_color, top_indices)), alternating_bottom)
 
12.5, 6.4871135, def ajidbbdicdcbehegjcjjcceieggacfhd(I):
  O = I 
  for obj in objects(I, T, T, T):
    if color(obj) == 5:
      ul = ulcorner(obj)
      for i in range(ul[0] + 1, lowermost(obj)):
        for j in range(ul[1] + 1, rightmost(obj)):
          if (i, j) in toindices(obj):
            O = fill(O, 2, {(i-1, j-1)})
  return O
 
16.0, 5.80326, def cfjebeffeadbecbdjebgjjbgeidacaca(I):
  O = I
  for obj in objects(I, T, T, T):
    if color(obj) == 2:
      O = fill(O, 5, shift(obj, (-1, 0)))
      O = fill(O, 2, shift(obj, (0, 1)))
  return O
 
14.5, 6.6320243, def deibcbeefeajebfaidcbbffehbcafbfa(I):
  objs = objects(I, T, T, T)
  target_obj = extract(objs, lambda obj: color(obj) == 2)
  O = fill(I, 5, shift(target_obj, (-1, 0)))
  O = fill(O, 2, shift(target_obj, (0, 1)))
  return O
 
13.5, 5.452313, def dibebdabfegaejddjceafaacdaieaibc(I):
  O = I
  for i, row in enumerate(I):
    for j, value in enumerate(row):
      if value == 2:
        if i > 0 and I[i-1][j] == 5:
          O = fill(O, 2, {(i, j+1)})
          O = fill(O, 5, {(i-1, j)})
  return O
 
16.0, 6.1729913, def hiabcbhbjfaaeaaabaefhagjehcfgbag(I):
  O = canvas(mostcolor(I), shape(I))
  for obj in objects(I, T, T, T):
    if color(obj) == 2:
      O = paint(O, shift(obj, (0, 1)))
    else:
      O = paint(O, obj)
  return O
 
12.5, 8.8233595, def cajfbiadgcbbedacafjdaabcbahcfcje(I):
  O = I
  for j in range(len(I[0])-1):
    for i in range(len(I)):
      if I[i][j] == 2 and I[i][j+1] == 5:
        O = fill(O, 5, {(i, j)})
        O = fill(O, 2, {(i, j+1)})
  return O
 
12.5, 5.833364, def edfeefcajceeeecebgabccagcieegfhc(I):
  objs = objects(I, T, T, T)
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  for obj in objs:
    if color(obj) == 5 and width(obj) > 1:
      w = width(obj)
      fifth = w // 5
      left_part = toobject(frozenset((i, j) for i, j in toindices(obj) if j < fifth * 2), I)
      middle_part = recolor(2, toobject(frozenset((i, j) for i, j in toindices(obj) if fifth * 2 <= j < fifth * 3), I))
      right_part = toobject(frozenset((i, j) for i, j in toindices(obj) if j >= fifth * 3), I)
      O = paint(O, left_part)
      O = paint(O, middle_part)
      O = paint(O, right_part)
    else:
      O = paint(O, obj)
  return O
 
29.5, 34.23787, def aaacgdfbceeaeiaabjahbbjdebddaheb(I):
  O = canvas(mostcolor(I), shape(I))
  for obj in objects(I, T, T, T):
    if color(obj) == 5 and width(obj) > 1:
      w = width(obj)
      fifth = w // 5
      replace_start = 2 * fifth
      replace_end = 3 * fifth
      for j in range(leftmost(obj), rightmost(obj) + 1):
        if replace_start <= j < replace_end:
          for i in range(uppermost(obj), lowermost(obj) + 1):
            if (i, j) in toindices(obj):
              O = fill(O, 2, frozenset({(i, j)}))
        else:
          O = paint(O, toobject(frozenset((v, (i, j)) for v, (i, j) in obj if i == j), I))
    else:
      O = paint(O, obj)
  return O
 
13.5, 10.303653, def dfjhhebejjaieiehjccjedeccdgcfigd(I):
  objs = objects(I, T, T, T)
  two_obj = extract(objs, lambda obj: color(obj) == 2)
  five_obj = extract(objs, lambda obj: color(obj) == 5)
  O = paint(I, shift(recolor(5, two_obj), (0, 1)))
  O = underpaint(O, shift(two_obj, (0, 2)))
  extension = {(5, (lrcorner(five_obj)[0] + 1, lrcorner(five_obj)[1]))}
  O = paint(O, extension)
  return O
 
12.5, 6.2757726, def bacihhcdbcdiecdbiedadifdeeacfcgh(I):
  O = canvas(mostcolor(I), shape(I))
  for obj in objects(I, T, T, T):
    if color(obj) == 5 and width(obj) > 1:
      O = paint(O, obj)
      w = width(obj)
      fifth = w // 5
      start = leftmost(obj) + 2 * fifth
      end = start + 2 * fifth
      replace_area = frozenset((i, j) for i, j in toindices(obj) if start <= j < end)
      O = fill(O, 2, replace_area)
    else:
      O = paint(O, obj)
  return O
 
12.0, 5.9097877, def djbhhcjgbifeecccabfccgcdfgbdcaea(I):
  objs = objects(I, T, F, T)
  largest_obj = argmax(objs, size)
  O = I
  if width(largest_obj) > height(largest_obj):
    middle_width = width(largest_obj) // 3
    O = fill(O, 2, {(i, j) for i in range(uppermost(largest_obj), lowermost(largest_obj) + 1) 
                     for j in range(leftmost(largest_obj) + middle_width, leftmost(largest_obj) + 2 * middle_width)})
  else:
    middle_height = height(largest_obj) // 3
    O = fill(O, 2, {(i, j) for j in range(leftmost(largest_obj), rightmost(largest_obj) + 1)
                     for i in range(uppermost(largest_obj) + middle_height, uppermost(largest_obj) + 2 * middle_height)})
  return O
 
12.0, 5.9623475, def ccdbeabffjbjeadiidacabdacafbaebc(I):
  O = I
  for obj in objects(I, T, T, T):
    if size(obj) == valmax(objects(I, T, T, T), size):
      if portrait(obj):
        third = height(obj) // 3
        O = fill(O, 2, {(i, j) for i in range(uppermost(obj) + third, uppermost(obj) + 2 * third)
                         for j in range(leftmost(obj), rightmost(obj) + 1)})
      else:
        third = width(obj) // 3
        O = fill(O, 2, {(i, j) for j in range(leftmost(obj) + third, leftmost(obj) + 2 * third)
                         for i in range(uppermost(obj), lowermost(obj) + 1)})
  return O
 
12.0, 5.843488, def idgigacihfffegdgbbdcjfecechegbab(I):
  objs = objects(I, T, T, T)
  largest_obj = max(objs, key=lambda obj: (size(obj), -color(obj)))
  O = I
  if width(largest_obj) > height(largest_obj):
    line_start = leftmost(largest_obj) + width(largest_obj) // 3
    line_end = line_start + width(largest_obj) // 3
    O = fill(O, 2, product(range(uppermost(largest_obj), lowermost(largest_obj) + 1), range(line_start, line_end)))
  else:
    line_start = uppermost(largest_obj) + height(largest_obj) // 3
    line_end = line_start + height(largest_obj) // 3
    O = fill(O, 2, product(range(line_start, line_end), range(leftmost(largest_obj), rightmost(largest_obj) + 1)))
  return O
 
16.5, 8.927985, def ddfccfdcebbaeajeabdcifdbbaibeece(I):
  O = I
  for obj in objects(I, T, T, T):
    if size(obj) == valmax(objects(I, T, T, T), size):
      if portrait(obj):
        O = paint(cover(O, shift(obj, (height(obj) // 3, 0))), obj)
        O = paint(cover(O, shift(obj, (2 * height(obj) // 3, 0))), obj)
      else:
        O = paint(cover(O, shift(obj, (0, width(obj) // 3))), obj)
        O = paint(cover(O, shift(obj, (0, 2 * width(obj) // 3))), obj)
  return O
 
91.5, 96.51169, def ggcdefdaeeejedchjehggiifgfedafeb(I):
  objs = objects(I, T, F, T)
  largest_obj = argmax(objs, size)
  second_color = color(argmax(difference(objs, {largest_obj}), size))
  
  h = height(largest_obj)
  
  # Horizontal Expansion
  expanded_grid = tuple(
      tuple(
          second_color if any(leftmost(largest_obj) <= k <= rightmost(largest_obj) and I[i][k] == second_color for k in range(len(I[0]))) 
          else v 
          for j, v in enumerate(row)
      ) 
      for i, row in enumerate(I) if uppermost(largest_obj) <= i <= lowermost(largest_obj)
  )
  
  modified_grid = I[:uppermost(largest_obj)] + expanded_grid + I[lowermost(largest_obj) + 1:]
  
  # Alternating Pattern
  modified_grid = tuple(
      tuple(
          second_color if i >= uppermost(largest_obj) + h // 2 and even(i + j) 
          else v 
          for j, v in enumerate(row)
      ) 
      for i, row in enumerate(modified_grid) if uppermost(largest_obj) <= i <= lowermost(largest_obj) 
  )
  
  modified_grid =  modified_grid[:uppermost(largest_obj)] + modified_grid[uppermost(largest_obj):]
  return modified_grid 
 
26.0, 24.20958, def ghbebdbejdfdejdajacfbaaaffabacjc(I):
  objs = objects(I, T, F, T)
  largest_obj = argmax(objs, size)
  second_color = color(argmax(difference(objs, {largest_obj}), size))

  # Horizontal Expansion
  modified_grid = tuple(
      tuple(
          second_color if any(
              (i, k) in toindices(largest_obj) and I[i][k] == second_color 
              for k in range(leftmost(largest_obj), rightmost(largest_obj) + 1)
          ) 
          else v 
          for j, v in enumerate(row)
      ) 
      for i, row in enumerate(I) if uppermost(largest_obj) <= i <= lowermost(largest_obj) 
  )
  modified_grid = I[:uppermost(largest_obj)] + modified_grid + I[lowermost(largest_obj) + 1:]

  # Alternating Pattern
  modified_obj = frozenset(
      (second_color if i >= uppermost(largest_obj) + height(largest_obj) // 2 and even(i + j) else v, (i, j))
      for v, (i, j) in asobject(modified_grid) if (i, j) in toindices(largest_obj)
  )
  return paint(modified_grid, modified_obj) 
 
22.5, 10.02447, def badaccaiafjbefbbbdhgghadhjcecfhb(I):
  twos = ofcolor(I, 2)
  fives = ofcolor(I, 5)
  O = fill(I, 5, shift(twos, (0, 1)))
  O = fill(O, 2, shift(twos, (0, 2)))
  for obj in objects(O, T, T, T):
    if color(obj) == 5:
      right_edge = {(i, rightmost(obj)) for i in range(uppermost(obj), lowermost(obj) + 1)}
      O = fill(O, 2, shift(right_edge, (1, 0)))
  return O
 
22.5, 7.810271, def dhfafbfdfaadeadgaagjbadhhdbcbdeg(I):
  O = I
  for obj in objects(I, T, T, T):
    if color(obj) == 2:
      O = paint(O, shift(recolor(5, obj), (0, 1)))
      O = paint(O, shift(obj, (0, 2)))
    elif color(obj) == 5:
      right_edge = toobject({(i, rightmost(obj)) for i in range(uppermost(obj), lowermost(obj) + 1)}, I)
      O = paint(O, shift(recolor(2, right_edge), (1, 0)))
  return O
 
19.0, 7.4591494, def affbaeadfejdecaciabibfbecbbcfcaf(I):
  O = I
  for i in range(len(I)):
    for j in range(len(I[0]) - 1):
      if I[i][j] == 2 and I[i][j + 1] in (0, 5):
        O = fill(O, 5, {(i, j + 1)})
        O = fill(O, 2, {(i, j + 2)})
  for obj in objects(O, T, T, T):
    if color(obj) == 5:
      O = fill(O, 2, {(lowermost(obj) + 1, rightmost(obj))})
  return O
 
18.0, 7.317225, def bbdiegddbjefeddgaijdgiaghbcjhfde(I):
  two_obj = extract(objects(I, T, T, T), lambda obj: color(obj) == 2)
  five_objs = sizefilter(objects(I, T, T, T), size(extract(objects(I, T, T, T), lambda obj: color(obj) == 5)))
  O = fill(I, 5, shift(toindices(two_obj), (0, 1)))
  O = fill(O, 2, shift(toindices(two_obj), (0, 2)))
  for obj in five_objs:
    O = fill(O, 2, {(lowermost(obj) + 1, rightmost(obj))})
  return O
 
13.0, 5.744273, def affbbgbgbfhceegfbadfchcbedcfggbh(I):
  objs = objects(I, T, F, T)
  target_obj = argmax(objs, size)
  offset = (ONE, width(target_obj) // THREE)
  shifted_obj = shift(target_obj, offset)
  band_width = width(target_obj) // THREE 
  band_indices = frozenset((i, j) for i, j in toindices(shifted_obj) if leftmost(shifted_obj) <= j < leftmost(shifted_obj) + band_width)
  return paint(I, recolor(TWO, band_indices)) 
 
12.0, 5.711674, def dfbacfcdbedeeccfibddhdhbbbeffcfa(I):
  objs = objects(I, T, F, T)
  largest_obj = argmax(objs, size)
  center_j = leftmost(largest_obj) + width(largest_obj) // TWO
  band_width = width(largest_obj) // THREE
  band_start = center_j - band_width // TWO
  return paint(I, frozenset(((TWO if band_start <= j < band_start + band_width else c), (i, j)) 
                        for c, (i, j) in largest_obj)) 
 
14.0, 6.5677714, def egidabffcceaegeabheefdjbadfbidbe(I):
  O = I
  for obj in objects(I, T, F, T):
    if obj == argmax(objects(I, T, F, T), size):
      for i in range(uppermost(obj), lowermost(obj) + ONE):
        for j in range(leftmost(obj) + width(obj) // THREE, leftmost(obj) + TWO * width(obj) // THREE):
          O = fill(O, TWO, ((i, j),))
  return O
 
12.0, 5.843488, def acffibfgiffbejffabjicbbbefagfeeg(I):
  objs = objects(I, T, F, T)
  target = argmax(objs, size)
  band_start = leftmost(target) + width(target) // THREE 
  band_end = band_start + width(target) // THREE
  return fill(I, TWO, frozenset((i, j) for i, j in asindices(I) 
                            if i in range(uppermost(target), lowermost(target) + 1) 
                            and j in range(band_start, band_end)))
 
15.5, 6.0607715, def gfabfafdeabfeabibiefedafbjdjfgeg(I):
  O = canvas(mostcolor(I), shape(I))
  for obj in objects(I, T, T, T):
    if color(obj) == 5 and width(obj) > 2:
      third = width(obj) // 3
      left_part = frozenset((v, (i,j)) for v, (i,j) in obj if j < leftmost(obj) + third)
      right_part = frozenset((v, (i,j)) for v, (i,j) in obj if j >= leftmost(obj) + 2*third)
      O = paint(O, left_part)
      O = paint(O, right_part)
    else:
      O = paint(O, obj)
  return O
 
12.0, 5.237758, def baehececbfffeafijiacdjcceacbjcab(I):
  objs = objects(I, T, F, T)
  target_obj = argmax(objs, size)
  if portrait(target_obj): 
    w = width(target_obj) // 3
    offset = (0, w)
    band_indices = frozenset((i, j) for i, j in toindices(target_obj) if leftmost(target_obj) + w <= j < leftmost(target_obj) + 2 * w)
  else:
    h = height(target_obj) // 3
    offset = (h, 0)
    band_indices = frozenset((i, j) for i, j in toindices(target_obj) if uppermost(target_obj) + h <= i < uppermost(target_obj) + 2 * h)
  shifted_obj = shift(target_obj, offset)
  return paint(I, recolor(TWO, intersection(toindices(shifted_obj), band_indices))) 
 
17.0, 6.5827074, def bbdjidceeacbehbgjiafgeicheajcccg(I):
  objs = objects(I, T, F, T)
  O = I
  for obj in objs:
    if obj == argmax(objs, size):
      if portrait(obj):
        w = width(obj) // 3
        for i in range(uppermost(obj), lowermost(obj) + 1):
          O = fill(O, TWO, ((i, leftmost(obj) + w), (i, leftmost(obj) + 2 * w - 1)))
      else:
        h = height(obj) // 3
        for j in range(leftmost(obj), rightmost(obj) + 1):
          O = fill(O, TWO, ((uppermost(obj) + h, j), (uppermost(obj) + 2 * h - 1, j)))
  return O
 
14.5, 6.3794084, def fcdbdbebdfadebfcjdecddighadhiefa(I):
  objs = objects(I, T, F, T)
  target_obj = argmax(objs, size)
  c = centerofmass(target_obj)
  if portrait(target_obj):
    w = width(target_obj) // 3
    band_indices = frozenset((i, j) for i, j in toindices(target_obj) if  c[1] - w // 2 <= j <= c[1] + w // 2)
  else:
    h = height(target_obj) // 3
    band_indices = frozenset((i, j) for i, j in toindices(target_obj) if  c[0] - h // 2 <= i <= c[0] + h // 2)
  return paint(I, recolor(TWO, band_indices))
 
11.5, 5.2282124, def ieecaebajiiceegjafejdgfefeccfdbh(I):
  modified_objects = set()
  for obj in objects(I, T, T, T):
    if color(obj) == 5:
      ul = ulcorner(obj)
      lr = lrcorner(obj)
      inner_rect = {(2, (i, j)) for i in range(ul[0] + 1, lr[0]) for j in range(ul[1] + 1, lr[1])}
      modified_objects.add(frozenset(inner_rect))
    modified_objects.add(obj)
  return paint(I, merge(modified_objects))
 
62.0, 51.45152, def fbfahcefdfjieafcbaeebbifbdbbeceb(I):
  objs = objects(I, T, F, T)
  if len(objs) <= 1:
    return I
  largest_obj = max(objs, key=size)
  fill_color = color(largest_obj)
  second_largest_obj = max(objs - {largest_obj}, key=size)
  left_edge = leftmost(second_largest_obj)
  right_edge = rightmost(second_largest_obj)
  extension = {(i, j) for i in range(height(I)) for j in range(width(I))
               if (j < left_edge or j > right_edge)}
  return paint(I, recolor(fill_color, extension))
 
14.5, 5.848241, def hcgebfbcbacaebcbjeddbfjcfgfdcfab(I):
  objs = objects(I, T, F, T)
  largest_obj = argmax(objs, size)
  second_largest_obj = argmax(difference(objs, {largest_obj}), size)
  shifted_obj = shift(second_largest_obj, (0, 1)) 
  top_two_rows = frozenset((v, (i, j)) for v, (i, j) in largest_obj if i <= uppermost(largest_obj) + 1)
  bottom_two_rows = frozenset((v, (i, j)) for v, (i, j) in shifted_obj if i >= lowermost(shifted_obj) - 1)
  recolored_top = recolor(5, top_two_rows)
  recolored_bottom = recolor(5, bottom_two_rows)
  return paint(paint(I, recolored_top), recolored_bottom) 
 
28.0, 26.786596, def bdhaacgiiebaebfaaaeabeghbededdje(I):
  new_objs = set()
  for obj in objects(I, T, T, T):
    if color(obj) == 5:
      new_obj = recolor(2, backdrop(obj))
      new_objs.add(new_obj)
    else:
      new_objs.add(obj)
  return paint(I, merge(new_objs))
 
26.5, 25.522316, def cedachbffgajehdgbaceacifdehhgedh(I):
  O = I
  for obj in objects(I, T, T, T):
    if color(obj) == 5 and width(obj) > 2:
      third = width(obj) // 3
      left_part = crop(I, (uppermost(obj), leftmost(obj)), (height(obj), third))
      middle_part = crop(I, (uppermost(obj), leftmost(obj) + third), (height(obj), third))
      right_part = crop(I, (uppermost(obj), leftmost(obj) + 2 * third), (height(obj), third))
      O = paint(cover(O, obj), toobject(asindices(left_part), I))
      O = paint(O, recolor(2, toobject(asindices(middle_part), I)))
      O = paint(O, toobject(asindices(right_part), I))
  return O
 
14.5, 8.970054, def cdchbdgjeahaeeaaijecefgeedbbjcfi(I):
  objs = sorted(objects(I, T, F, T), key=lambda obj: (size(obj), -color(obj)), reverse=True)
  fill_color = color(objs[0])
  target_obj = objs[1] if len(objs) > 1 else frozenset()
  extension = {(i, j) for i in range(uppermost(target_obj), lowermost(target_obj) + 1) for j in range(
    leftmost(objs[0]) if leftmost(objs[0]) < leftmost(target_obj) else leftmost(target_obj),
    rightmost(objs[0]) if leftmost(objs[0]) < leftmost(target_obj) else rightmost(target_obj) + 1
  )}
  return paint(I, recolor(fill_color, extension))
 
14.0, 6.453889, def faafjdadcfedeiccibadhijdgdadcbaf(I):
  O = I
  for obj in objects(I, T, T, T):
    if color(obj) == 5:
      for i in range(uppermost(obj) + 1, lowermost(obj) + 1):
        for j in range(leftmost(obj) + width(obj) // 3, leftmost(obj) + 2 * width(obj) // 3):
          if (i, j) in toindices(obj):
            O = fill(O, 2, ((i, j),))
  return O
 
28.0, 26.786596, def ebjaccdejdfdeacbjfgjcffchcbbdcce(I):
  O = I
  for obj in objects(I, T, T, T):
    if color(obj) == 5:
      box_width = width(obj) // 3
      left_third = frozenset((i, j) for i, j in toindices(obj) if j < leftmost(obj) + box_width)
      right_third = frozenset((i, j) for i, j in toindices(obj) if j >= rightmost(obj) - box_width + 1)
      O = paint(O, recolor(2, difference(obj, left_third | right_third)))
  return O
 
11.0, 6.51619, def feagiacbfcegeccfjdbfhcehcdfgbjfi(I):
  O = I
  for obj in objects(I, T, T, T):
    if color(obj) == 5 and height(obj) > 1:
      upper_part = frozenset((v, (i, j)) for v, (i, j) in obj if i == uppermost(obj))
      lower_part = frozenset((v, (i, j)) for v, (i, j) in obj if i == lowermost(obj))
      middle_part = difference(obj, upper_part | lower_part)
      middle_third = frozenset((v, (i, j)) for v, (i, j) in middle_part if leftmost(obj) + width(obj) // 3 <= j < leftmost(obj) + 2 * width(obj) // 3)
      O = paint(O, recolor(2, middle_third))
  return O
 
10.0, 5.4946513, def jfgadidfacebejediebeddcidjbghafd(I):
  O = I
  for obj in objects(I, T, T, T):
    if color(obj) == 5:
      top_third = uppermost(obj) + height(obj) // 3
      bottom_third = top_third + height(obj) // 3 + (height(obj) % 3 == 2)
      for i in range(top_third, bottom_third):
        for j in range(leftmost(obj) + 1, rightmost(obj)):
          O = fill(O, 2, {(i, j)})
  return O
 
17.0, 7.1006994, def deafbcbadbbheffbjgighfgdiddfgefb(grid):
  for obj in objects(grid, T, T, T):
    if color(obj) == 2:
      grid = paint(grid, recolor(5, shift(toindices(obj), (-1, 0))))
      grid = move(grid, obj, (1, 0))
  return grid
 
15.5, 13.822101, def adedgghhcceeecejafdedffiddbaabja(grid):
  new_grid = canvas(mostcolor(grid), shape(grid))
  for obj in objects(grid, T, T, T):
    if color(obj) == 2:
      new_grid = paint(new_grid, recolor(5, shift(obj, (-1, 0))))
      new_grid = paint(new_grid, shift(obj, (1, 0)))
    else:
      new_grid = paint(new_grid, obj)
  return new_grid
 
13.0, 18.711206, def ebefahgadciceidaiaaeeihiddgeafgg(grid):
  shifted_objs = frozenset({shift(obj, (1, 0)) if color(obj) == 2 else obj for obj in objects(grid, T, T, T)})
  grid = paint(canvas(mostcolor(grid), shape(grid)), merge(shifted_objs))
  for obj in shifted_objs:
    if color(obj) == 2:
      grid = paint(grid, recolor(5, shift(toindices(obj), (-1, 0))))
  return grid
 
15.5, 7.1576114, def ccaibfccheicedfdaebhfddhfggahdec(grid):
  for obj in objects(grid, T, T, T):
    if color(obj) == 2:
      grid = fill(grid, 5, shift(toindices(obj) & backdrop(shift(obj, (1, 0))), (-1, 0)))
      grid = move(grid, obj, (1, 0))
  return grid
 
18.0, 10.609047, def dbeegffdjefaechfjfgeccdhdegjgjdj(grid):
  new_grid = canvas(mostcolor(grid), shape(grid))
  for i, row in enumerate(grid):
    for j, val in enumerate(row):
      if val == 2:
        if i > 0:
          new_grid = fill(new_grid, 5, {(i - 1, j + 1)})
        new_grid = fill(new_grid, 2, {(i, j + 1)})
      else:
        new_grid = fill(new_grid, val, {(i, j)})
  return new_grid
 
20.5, 7.7595615, def bdaahhicfedjedccbdhaafcbjaajbgig(I):
  O = I
  for x in range(len(I)):
    for y in range(len(I[0])):
      if index(I, (x, y)) == 5:
        if (y - leftmost(toobject(ofcolor(I, 5), I))) % ((width(toobject(ofcolor(I, 5), I))) // 3) == 1:
          O = paint(O, {(2, (x, y))})
  return O
 
14.5, 15.177456, def aeddbcbgdgjaegefjeejcbfffihbccdd(I):
  objs = objects(I, T, F, T)
  largest_obj = max(objs, key=len) 
  remaining_objs = difference(objs, {largest_obj})
  target_obj = max(remaining_objs, key=len, default=frozenset())
  fill_color = color(largest_obj)
  min_j, max_j = min(leftmost(largest_obj), leftmost(target_obj)), max(rightmost(largest_obj), rightmost(target_obj)) 
  extension = {(i, j) for i in range(uppermost(target_obj), lowermost(target_obj) + 1)
               for j in range(min_j, max_j + 1)}
  return paint(I, recolor(fill_color, extension))
 
20.0, 6.1687045, def edfbebaehhbdeadaifgehbahfgjbeebf(I):
  O = I
  for obj in objects(I, T, T, T):
    if color(obj) == 5:
      obj_width = width(obj)
      third_width = obj_width // 3
      if third_width > 0:
        left_part = crop(I, ulcorner(obj), (height(obj), third_width))
        middle_part = canvas(2, (height(obj) - 1, third_width))
        right_part = crop(I, (uppermost(obj), leftmost(obj) + 2 * third_width), (height(obj), obj_width - 2 * third_width))
        O = paint(O, asobject(hconcat(hconcat(left_part, middle_part), right_part)))
  return O
 
13.0, 4.9517, def ddeadghdefdaeefdibgcccdccgcgihae(I):
  O = I
  for obj in objects(I, T, T, T):
    if color(obj) == 5 and width(obj) > 2:
      w = width(obj) // 3
      O = paint(O, recolor(2, frozenset((i, j) for i, j in toindices(obj) if leftmost(obj) + w <= j < leftmost(obj) + 2 * w and i != uppermost(obj))))
  return O
 
14.5, 5.8159947, def fjeecbicfbfaeabdbjeabadidfdafgba(I):
  O = canvas(mostcolor(I), shape(I))
  for obj in objects(I, T, T, T):
    if color(obj) == 5 and width(obj) > 2:
      w = width(obj) // 3
      left_indices = frozenset((i, j) for i, j in toindices(obj) if j < leftmost(obj) + w)
      right_indices = frozenset((i, j) for i, j in toindices(obj) if j >= leftmost(obj) + 2 * w)
      middle_indices = frozenset((i, j) for i, j in toindices(obj) if leftmost(obj) + w <= j < leftmost(obj) + 2 * w and i != uppermost(obj))
      O = paint(paint(paint(O, toobject(left_indices, I)), toobject(right_indices, I)), recolor(2, middle_indices))
    else:
      O = paint(O, obj)
  return O
 
10.5, 6.4829645, def jfhfbajcbbefeehdagfgajggfdjdcacb(I):
  return paint(I, merge(apply(lambda obj: recolor(2, intersection(
    toindices(obj),
    frozenset((i, j) for i in range(uppermost(obj) + height(obj) // 3, uppermost(obj) + 2 * height(obj) // 3) for j in range(leftmost(obj) + width(obj) // 3, leftmost(obj) + 2 * width(obj) // 3))
  )), sfilter(objects(I, T, T, T), lambda obj: color(obj) == 5))))
 
16.5, 6.5338907, def cfdeacicceceehdhjcfdfjgedifdccdc(I):
  O = I
  for obj in objects(I, T, T, T):
    if color(obj) == 2:
      for cell in obj:
        i, j = cell[1]
        if (i > 0) and (index(I, (i-1,j)) == 5):
          O = fill(O, 2, {(i-1,j)})
  return O
 
12.0, 5.700016, def bbafhgiehecceeajideicgeeaegbacaa(I):
  O = I
  for obj in objects(I, T, T, T):
    if color(obj) == 2:
      shift_amount = gravitate(obj, shift(obj, (-1,0)))
      O = paint(O, shift(recolor(2, obj), shift_amount))
  return O
 
12.5, 5.2199397, def aegagbcgcbceeabbahffcbddbbhgihdb(I):
  for obj in objects(I, T, T, T):
    if color(obj) == 2:
      target_col = minimum([j for i, j in toindices(obj) if index(I, (i, j+1)) != 2 and index(I, (i, j+1)) != 0])
      I = paint(I, recolor(2, frozenset((2, (i, k)) for i, j in toindices(obj) for k in range(j, target_col))))
  return I
 
13.5, 6.623966, def ggbdacgbffcbeddaididcfbcafcddfba(I):
  O = I
  for obj in objects(I, T, T, T):
    if color(obj) == 5 and width(obj) > 2:
      start = (uppermost(obj), leftmost(obj) + width(obj) // 3)
      end = (lowermost(obj), leftmost(obj) + 2 * width(obj) // 3)
      O = paint(O, recolor(2, toobject(product(interval(start[0], end[0] + 1, 1), interval(start[1], end[1], 1)), O)))
  return O
 
