25.5, 17.38143, def ibageajdcfejedjaidhbahdieeahbjdb(I):
  indices =  mfilter(asindices(I), lambda loc: index(I, loc) != 0)  # Get indices of all non-background cells
  shifted_indices = mpapply(lambda i, j: frozenset({(i, j), (i+1, j), (i+2, j), (i, j+1), (i+1, j+1), (i+2, j+1), (i, j+2), (i+1, j+2), (i+2, j+2)}), indices, indices) # Generate indices for 3x3 squares
  O = fill(I, 1, shifted_indices)  # Fill the grid with 1s at the generated indices
  return O
 
32.5, 52.151894, def cabicbeedjajecdajicedhfjjhhcjdbe(I):
  # Identify the background color
  bg = mostcolor(I)
  # Get all objects in the input grid, excluding the background
  objs = objects(I, univalued=False, diagonal=True, without_bg=True)
  # Initialize an empty output grid
  O = canvas(bg, shape(I))
  # Iterate over each object
  for obj in objs:
    # Calculate the offset to move the object to the opposite corner
    offset = subtract(lrcorner(I), lrcorner(obj))
    # Shift the object and recolor it to 1
    shifted_obj = recolor(1, shift(obj, offset))
    # Paint the shifted object onto the output grid
    O = paint(O, shifted_obj)
  return O
 
31.5, 43.6262, def cdjfhbfcefceehjdbhcdhedccdcbaeff(I):
  # Get indices of all cells in the grid
  indices = asindices(I)
  # Create a mapping function to flip indices diagonally
  flip_index = lambda i, j: (len(I) - 1 - i, len(I[0]) - 1 - j)
  # Apply the mapping to all indices and recolor to 1
  new_indices = frozenset(flip_index(i, j) for i, j in indices)
  # Create the output object by combining color 1 with the flipped indices
  O = toobject(recolor(1, new_indices), I)
  # Paint the output object onto an empty canvas
  return paint(canvas(mostcolor(I), shape(I)), O)
 
29.0, 43.178925, def jgeaeccbgbafeejdafdgijedbgebeafd(I):
  # Define a lambda function to flip an object diagonally
  flip_object = lambda obj: frozenset((1, (len(I) - 1 - i, len(I[0]) - 1 - j)) for v, (i, j) in obj)
  # Apply the flip function to all objects in the input grid
  flipped_objs = frozenset(flip_object(obj) for obj in objects(I, univalued=False, diagonal=True, without_bg=True))
  # Merge all flipped objects into a single object
  merged_obj = merge(flipped_objs)
  # Paint the merged object onto an empty canvas
  return paint(canvas(mostcolor(I), shape(I)), merged_obj)
 
28.0, 43.98202, def dcedajjbbdjceeeebbbdddehbcfgddbe(I):
  obj = objects(I, T, F, T)
  O = I
  for o in obj:
    upper = uppermost(o)
    lower = lowermost(o)
    left = leftmost(o)
    right = rightmost(o)
    for i in range(upper, lower + 1):
      O = fill(O, 1, {(i, j) for j in range(left, right + 1)})
  return O
 
33.0, 42.26227, def gcfdfjjebcggehihbbbbjdbjaddgedee(I):
    h = height(I) // 2
    top_objs = objects(crop(I, (0, 0), (h, width(I))), T, F, T)
    bottom_objs = objects(crop(I, (h, 0), (h, width(I))), T, F, T)
    O = I
    for obj in top_objs:
      O = move(O, obj, (-uppermost(obj),-leftmost(obj)))
    for obj in bottom_objs:
      O = move(O, obj, (h-1-uppermost(obj),width(I)-1-leftmost(obj)))
    return O
 
32.0, 51.42324, def fecibihjdfibegfcabjfafejdbaaaaeh(I):
  h = height(I)
  w = width(I)
  O = canvas(ZERO, (h, w))
  for i in range(h):
    for j in range(w):
      if i < h // 2:
        if index(I,(i,j)) != ZERO:
          O = paint(O, shift({(index(I,(i,j)),(i,j))}, (-i,-j)))
      else:
        if index(I,(i,j)) != ZERO:
          O = paint(O, shift({(index(I,(i,j)),(i,j))}, (h-1-i,w-1-j)))
  return O
 
32.0, 39.69062, def aabhffidfbageaidbffhcfcgffeddccc(I):
    h = height(I) // 2
    top_indices = {(i, j) for i in range(h) for j in range(width(I)) if index(I, (i, j)) != 0}
    bottom_indices = {(i, j) for i in range(h, height(I)) for j in range(width(I)) if index(I, (i, j)) != 0}
    O = I
    for i, j in top_indices:
        O = paint(O, {(index(I, (i, j)), (0, 0))})
    for i, j in bottom_indices:
        O = paint(O, {(index(I, (i, j)), (height(I) - 1, width(I) - 1))})
    return O
 
33.0, 44.434917, def feagjcbfcdbaedgcihccbecaejjdjahf(I):
    h = height(I) // 2
    top = crop(I, (0, 0), (h, width(I)))
    bottom = crop(I, (h, 0), (h, width(I)))
    O = canvas(0, shape(I))
    O = paint(O, asobject(top))
    O = paint(O, shift(asobject(bottom), (h - height(bottom), width(I) - width(bottom))))
    return O
 
30.5, 51.586575, def jbhjgjgeahcdefcajegddiccfiafjhfi(I):
  objs = objects(I, T, F, T)
  corner_tl = ulcorner(asindices(I))
  corner_br = lrcorner(asindices(I))
  moved_objs = frozenset()
  for i, obj in enumerate(objs):
    if i % 2 == 0:
      offset = subtract(corner_tl, ulcorner(obj))
    else:
      offset = subtract(corner_br, lrcorner(obj))
    moved_objs = insert(shift(obj, offset), moved_objs)
  O = paint(canvas(ZERO, shape(I)), recolor(ONE, merge(moved_objs)))
  return O
 
30.5, 53.19219, def ajfdfcbgeaaaejedbeigfcaacaadbeag(I):
  objs = objects(I, T, F, T)
  target = ulcorner(asindices(I)) if len(objs) % 2 == 1 else lrcorner(asindices(I))
  moved_objs = frozenset({shift(obj, subtract(target, lrcorner(obj)) if i > 0 else subtract(target, ulcorner(obj))) for i, obj in enumerate(objs)})
  O = paint(canvas(ZERO, shape(I)), recolor(ONE, merge(moved_objs)))
  return O
 
30.5, 43.71658, def fgddgfefedadeeeibjbhfbahhfdadidd(I):
  objs = objects(I, T, F, T)
  connected_obj = extract(objs, lambda obj: size(obj) > 1) if any(size(obj) > 1 for obj in objs) else first(objs)
  target_corner = lrcorner(connected_obj)
  moved_objs = frozenset({shift(obj, subtract(target_corner, ulcorner(obj))) for obj in objs if obj != connected_obj})
  O = paint(I, recolor(ONE, merge(moved_objs | {connected_obj})))
  return O
 
30.5, 53.830708, def bdidbgdafhgcehfebajacbgaceehjbff(I):
  objs = objects(I, T, F, T)
  is_connected = any(size(obj) > 1 for obj in objs)
  moved_objs = mapply(lambda obj: shift(obj, subtract((0, 0) if is_connected else lrcorner(asindices(I)), ulcorner(obj))), objs)
  O = paint(canvas(ZERO, shape(I)), recolor(ONE, moved_objs))
  return O
 
31.5, 52.65037, def fhacacadejfbefheaejhfhjaeaddbcad(I):
  target = (0, 0) if len(objects(I, T, T, T)) > 1 else lrcorner(asindices(I))
  moved_objs = mapply(lambda obj: shift(obj, subtract(target, ulcorner(obj))), objects(I, T, F, T))
  O = paint(canvas(ZERO, shape(I)), recolor(ONE, moved_objs))
  return O
 
28.0, 43.98202, def dhfcdceehchdeejcaehbabdcdbdbbdeb(I):
  O = canvas(0, shape(I))  # Start with a blank canvas
  for obj in objects(I, T, F, T):
    O = paint(O, recolor(1, backdrop(obj))) # Paint a square for each object
  return O
 
28.0, 43.98202, def eejddccfifceeabbieehejfhacafihfe(I):
  O = I
  for obj in objects(I, False, False, True):
    O = paint(cover(O, obj), recolor(1, dmirror(obj)))
  return O
 
31.0, 43.075104, def gibcaaddadigebdabacbfhjcjgeafdaj(I):
  bg = mostcolor(I)
  O = canvas(bg, shape(I))
  for i, row in enumerate(I):
    for j, val in enumerate(row):
      if val != bg:
        O = fill(O, 1, {(len(I)-1-j, len(I[0])-1-i)})
  return O
 
35.0, 17.672514, def fdaifjfbbabeeediaahecibachhdeadd(I):
  objs = fgpartition(I) # Partition the grid into objects, excluding background
  filled_grid = I
  for obj in objs:
    filled_grid = fill(filled_grid, 1, backdrop(toindices(obj))) # Fill the bounding box of each object with 1
  O = filled_grid
  return O 
 
32.5, 52.2199, def cedbgfadegidehfeidjbacefiifeacfb(I):
    obj = first(objects(I, T, F, T))  # Extract the object
    O = paint(canvas(ZERO, shape(I)), shift(obj, subtract(lrcorner(I), lrcorner(obj))))  # Move to bottom-right
    return O
 
31.5, 45.782875, def ejigffbecbbheibcbfifieeacagadebb(I):
    obj = first(objects(I, T, F, T))
    target_corner = lrcorner(asindices(I))  # Target: bottom-right corner
    offset = subtract(target_corner, lrcorner(obj))  # Calculate the shift
    O = paint(fill(I, ZERO, obj), shift(obj, offset))  # Erase and paint at the new location
    return O
 
31.5, 48.047604, def adegfefidibiebgjibcdadaehdaaaadc(I):
    obj = first(objects(I, T, F, T))
    new_obj = shift(obj, subtract(shape(I), shape(obj))) # Calculate offset and shift object
    O = fill(I, ZERO, obj)  # Clear the original position
    O = paint(O, new_obj)  # Paint the object at the new location
    return O
 
31.5, 55.62986, def djejccedjcdaeaacjeadcdbjccaddjfd(I):
    obj = first(objects(I, T, F, T))
    corner = (height(I) - height(obj), width(I) - width(obj))  # Calculate the target corner
    moved_obj = shift(obj, corner)  # Shift the object
    O = paint(canvas(ZERO, shape(I)), moved_obj)  # Create new grid and paint the object
    return O
 
50.0, 50.311745, def dfaafcdacaecehbajeahibdeaceadccf(I):
  objs = objects(I, T, F, T)
  center_point = divide(shape(I), 2)
  transformed_objs = set()
  for obj in objs:
    obj_center = center(obj)
    if obj_center[0] < center_point[0] and obj_center[1] < center_point[1]:
      target_corner = ulcorner(I)
    else:
      target_corner = lrcorner(I)
    shifted_obj = shift(obj, subtract(target_corner, ulcorner(obj)))
    transformed_objs.add(shifted_obj)
  O = paint(canvas(1, shape(I)), merge(transformed_objs))
  return O
 
51.0, 48.396725, def bhedabaifaedeabjbdedffgiccgabdfa(I):
  objs = objects(I, T, F, T)
  transformed_objs = set()
  for obj in objs:
    obj_center = center(obj)
    h, w = halve(shape(I))
    destination = (0, 0) if obj_center[0] < h and obj_center[1] < w else (h, w)
    shifted_obj = shift(obj, subtract(destination, ulcorner(obj)))
    transformed_objs.add(shifted_obj)
  O = paint(canvas(1, shape(I)), merge(transformed_objs))
  return O
 
32.5, 52.151894, def dffdgdbdebaeeafebfheddcfccbbehbe(I):
  bg = mostcolor(I)
  objs = objects(I, T, F, T) - colorfilter(objects(I, T, F, T), bg)
  moved_objs = frozenset({recolor(ONE, shift(toindices(obj), subtract(lrcorner(I), lrcorner(obj)))) for obj in objs})
  O = paint(canvas(ZERO, shape(I)), merge(moved_objs))
  return O
 
31.5, 53.87849, def bgdfchecdjejeccajebaehfihcedcbej(I):
  objs = objects(I, True, False, True)  # Identify objects
  output = canvas(0, shape(I))  # Create empty canvas
  for obj in objs:
    corner = ulcorner(obj) if ulcorner(obj) != (0,0) else lrcorner(obj)  # Identify top-left or bottom-right corner
    opposite_corner = (len(I) - corner[0] - height(obj), len(I[0]) - corner[1] - width(obj))  # Calculate opposite corner
    shifted_obj = shift(obj, opposite_corner)  # Shift object to the opposite corner
    output = paint(output, shifted_obj)  # Paint the object onto the output
  return output 
 
49.5, 54.352985, def feiaeddejfjceabijdjajdcdfecgbdhc(I):
  h, w = halve(shape(I))
  O = canvas(mostcommon(I), shape(I))
  for (val, (i, j)) in asobject(I):
    if val != mostcommon(I):
      target_i = i if i < h else h + i - h * (i >= h)
      target_j = j if j < w else w + j - w * (j >= w)
      O = paint(O, {(1, (target_i, target_j))})
  return O
 
33.0, 51.320347, def dbfiachaeiifeaaiaefddjcbfdddddaf(I):
  objs = objects(I, True, False, True)
  O = I
  for obj in objs:
    com = centerofmass(obj)
    target = (0, 0) if com[0] < len(I) // 2 else (len(I) - height(obj), 0)
    O = move(O, obj, subtract(target, ulcorner(obj)))
  return O
 
34.5, 48.28215, def ecefcjejagccefcbidfadeihecghbfbh(I):
  objs_top = sfilter(objects(I, True, False, True), lambda obj: centerofmass(obj)[0] < len(I) // 2)
  objs_bottom = sfilter(objects(I, True, False, True), lambda obj: centerofmass(obj)[0] >= len(I) // 2)
  O = I
  for i, obj in enumerate(objs_top):
    O = move(O, obj, subtract((0, i * width(obj)), ulcorner(obj)))
  for i, obj in enumerate(objs_bottom):
    O = move(O, obj, subtract((len(I) - height(obj), i * width(obj)), ulcorner(obj)))
  return O
 
36.5, 21.285856, def eiegbejchhaeecaebifjeaecjeedghjf(I):
    target_color = leastcolor(I)
    target_indices = ofcolor(I, target_color)
    top_left = ulcorner(target_indices)
    bottom_right = lrcorner(target_indices)
    width = bottom_right[1] - top_left[1] + 1
    height = bottom_right[0] - top_left[0] + 1
    square_size = max(width, height)
    square_indices = frozenset((i,j) for i in range(top_left[0], top_left[0] + square_size) 
                                   for j in range(top_left[1], top_left[1] + square_size))
    O = fill(I, 1, square_indices)
    return O
 
31.5, 50.695087, def eegacjfhffddeeddbgifbahaihfgbcac(I):
  # Find the largest object
  obj = toobject(argmax(objects(I, T, F, T), size), I) 
  # Mirror the object diagonally
  mirrored_obj = cmirror(obj)
  # Create a canvas filled with 0s
  canvas_grid = canvas(ZERO, shape(I))
  # Paint the mirrored object onto the canvas
  O = paint(canvas_grid, mirrored_obj)
  return O
 
30.5, 50.905853, def dccefjidcbeiefffabbcjafcbfjagdha(I):
    # Find the largest object's indices
    obj_indices = toindices(argmax(objects(I, T, F, T), size))
    # Calculate diagonally flipped indices
    flipped_indices = {(height(I)-1-i, width(I)-1-j) for i, j in obj_indices}
    # Create output grid by mapping cell values
    O = tuple(
        tuple(
            ONE if (i, j) in flipped_indices else ZERO
            for j in range(width(I))
        )
        for i in range(height(I))
    )
    return O
 
0.0, 0.0, def ceccchehdbaaebjjaeagaehbddjdehfc(I):
  O = canvas(0, shape(I))
  for obj in objects(I, T, F, T):
    center_i, center_j = centerofmass(obj)
    for i in range(center_i - 1, center_i + 2):
      for j in range(center_j - 1, center_j + 2):
        if 0 <= i < len(I) and 0 <= j < len(I[0]):
          O = fill(O, 1, {(i, j)})
  return O
 
